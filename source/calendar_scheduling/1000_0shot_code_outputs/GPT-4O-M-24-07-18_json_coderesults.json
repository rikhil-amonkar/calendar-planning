{
    "0shot": [
        {
            "final_program_time": "{14:30:0:15}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules and meeting duration\nparticipants = {\n    'Michelle': [(datetime(2023, 10, 9, 11, 0), datetime(2023, 10, 9, 12, 0))],\n    'Steven': [(datetime(2023, 10, 9, 9, 0), datetime(2023, 10, 9, 9, 30)),\n               (datetime(2023, 10, 9, 11, 30), datetime(2023, 10, 9, 12, 0)),\n               (datetime(2023, 10, 9, 13, 30), datetime(2023, 10, 9, 14, 0)),\n               (datetime(2023, 10, 9, 15, 30), datetime(2023, 10, 9, 16, 0))],\n    'Jerry': [(datetime(2023, 10, 9, 9, 0), datetime(2023, 10, 9, 9, 30)),\n              (datetime(2023, 10, 9, 10, 0), datetime(2023, 10, 9, 11, 0)),\n              (datetime(2023, 10, 9, 11, 30), datetime(2023, 10, 9, 12, 30)),\n              (datetime(2023, 10, 9, 13, 0), datetime(2023, 10, 9, 14, 30)),\n              (datetime(2023, 10, 9, 15, 30), datetime(2023, 10, 9, 16, 0)),\n              (datetime(2023, 10, 9, 16, 30), datetime(2023, 10, 9, 17, 0))]\n}\n\nmeeting_duration = timedelta(hours=1)\nstart_of_working_day = datetime(2023, 10, 9, 9, 0)\nend_of_working_day = datetime(2023, 10, 9, 17, 0)\n\n# Function to check if a time slot is free\ndef is_time_slot_free(start, end):\n    for schedule in participants.values():\n        for busy_start, busy_end in schedule:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a suitable time slot for the meeting\ndef find_meeting_time():\n    current_time = start_of_working_day\n    while current_time + meeting_duration <= end_of_working_day:\n        if is_time_slot_free(current_time, current_time + meeting_duration):\n            return current_time.strftime('%H:%M:%S') + ':' + (current_time + meeting_duration).strftime('%H:%M')\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Generate and print the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_0"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules\nraymond_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nbilly_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ndonald_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Helper function to check if a time slot is free\ndef is_free(start, end, schedule):\n    for (busy_start, busy_end) in schedule:\n        if (start < busy_end and end > busy_start):  # Overlap check\n            return False\n    return True\n\n# Try to find suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    time_end = current_time + meeting_duration\n    if (is_free(current_time, time_end, raymond_schedule) and\n        is_free(current_time, time_end, billy_schedule) and\n        is_free(current_time, time_end, donald_schedule)):\n        # Check if billy's preference is honored\n        if current_time < datetime.strptime(\"15:00\", \"%H:%M\"):\n            print(f\"{current_time.strftime('%H:%M')}:{time_end.strftime('%H:%M')}\")\n            break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Roy\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    ],\n    \"Kathryn\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Amy\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Set the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to get free slots\ndef get_free_slots(schedules, work_start, work_end):\n    busy_times = []\n    \n    # Compile busy schedules from all participants\n    for busy in schedules.values():\n        busy_times.extend(busy)\n    \n    busy_times.sort()\n    \n    free_slots = []\n    last_end = work_start\n\n    for start, end in busy_times:\n        # Check for free time before the next busy slot\n        if last_end < start:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    # Check for free time after the last busy slot until work end\n    if last_end < work_end:\n        free_slots.append((last_end, work_end))\n    \n    return free_slots\n\n# Calculate available meeting slots\nfree_slots = get_free_slots(schedules, work_start, work_end)\n\n# Find a suitable slot for the meeting\ndef find_meeting_slot(free_slots, duration):\n    for start, end in free_slots:\n        if end - start >= duration:\n            meeting_start = start\n            meeting_end = meeting_start + duration\n            if meeting_end <= end:\n                return meeting_start, meeting_end\n    return None\n\n# Find the meeting slot\nmeeting_time = find_meeting_slot(free_slots, meeting_duration)\n\n# Output the result if a meeting time is found\nif meeting_time:\n    meeting_start, meeting_end = meeting_time\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_2"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\narthur_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nmichael_busy = [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))]\n\nsamantha_busy = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Collect all busy times\nall_busy_times = arthur_busy + michael_busy + samantha_busy\n\n# Check for available time slots\ndef find_available_time_slots(start, end, busy_times):\n    available_slots = []\n    \n    current_time = start\n    while current_time + meeting_duration <= end:\n        # Check if current time is free\n        is_busy = any(start <= current_time < end for start, end in busy_times)\n        \n        if not is_busy:\n            available_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return available_slots\n\n# Get all available time slots\navailable_times = find_available_time_slots(start_time, end_time, all_busy_times)\n\n# We want to return the first available time that can accommodate the meeting\nfor time in available_times:\n    if all(time + meeting_duration <= end for start, end in all_busy_times):\n        meeting_start = time\n        meeting_end = time + meeting_duration\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_3"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule constraints in a dictionary (start time, end time)\nparticipants_schedule = {\n    \"Donna\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"John\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Billy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef find_meeting_time(schedule, duration, start_time, end_time):\n    # Create busy time slots consolidated into one list\n    busy_times = []\n    for times in schedule.values():\n        busy_times.extend(times)\n\n    # Sort the combined busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Check available slots\n    current_start = start_time\n    for busy_start, busy_end in busy_times:\n        if current_start + duration <= busy_start:  # If free time is available before next busy period\n            return current_start.strftime(\"%H:%M\"), (current_start + duration).strftime(\"%H:%M\")\n        current_start = max(current_start, busy_end)\n\n    # Check the time after the last busy slot until end work hours\n    if current_start + duration <= end_time:\n        return current_start.strftime(\"%H:%M\"), (current_start + duration).strftime(\"%H:%M\")\n    \n    return None\n\nmeeting_time = find_meeting_time(participants_schedule, meeting_duration, work_hours_start, work_hours_end)\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```",
            "count": "calendar_scheduling_example_4"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nkathryn_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ncharlotte_busy = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nlauren_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Time boundaries\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is available for all participants\ndef is_time_available(start, duration):\n    end = start + duration\n    for busy in kathryn_busy + charlotte_busy + lauren_busy:\n        if start < busy[1] and end > busy[0]:  # Overlap check\n            return False\n    return True\n\n# Schedule meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_available(current_time, meeting_duration) and current_time.time() <= datetime.strptime(\"13:30\", \"%H:%M\").time():\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=15)  # Check next 15 minutes\n```",
            "count": "calendar_scheduling_example_5"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Initialize available time blocks\n    available_times = [(work_start, work_end)]\n    \n    # Process each participant's schedule\n    for schedule in participants:\n        busy_times = participants[schedule]\n        new_available_times = []\n        \n        for start, end in available_times:\n            free_start = start\n            \n            for busy_start, busy_end in busy_times:\n                if free_start < busy_start:\n                    new_available_times.append((free_start, busy_start))\n                free_start = max(free_start, busy_end)\n                \n            if free_start < end:\n                new_available_times.append((free_start, end))\n        \n        available_times = new_available_times\n    \n    # Find a suitable meeting time\n    for start, end in available_times:\n        if (end - start) >= meeting_duration:\n            proposed_time_start = start\n            proposed_time_end = start + meeting_duration\n            return f\"{proposed_time_start.strftime('%H:%M')}:{proposed_time_end.strftime('%H:%M')}\"\n\n# Constraints\nparticipants = {\n    'Thomas': [],\n    'Dylan': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'))],\n    'Jerry': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\nmeeting_duration = timedelta(hours=1)\n\n# Get proposed meeting time\nproposed_meeting_time = find_meeting_time(participants, meeting_duration)\nprint(proposed_meeting_time)\n```",
            "count": "calendar_scheduling_example_6"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nheather_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n]\n\nzachary_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours and constraints\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nzachary_preference_end = datetime.strptime('14:00', '%H:%M')\n\n# Function to find available meeting time\ndef find_meeting_time(heather_schedule, zachary_schedule, meeting_duration, work_start, work_end, zachary_preference_end):\n    # Create a list of all busy times\n    busy_times = heather_schedule + zachary_schedule\n    \n    # Sort the busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Check for free slots between work hours\n    last_end_time = work_start\n\n    for start, end in busy_times:\n        # Find a gap between last_end_time and the current start time\n        if last_end_time + meeting_duration <= start:\n            meeting_start = last_end_time\n            meeting_end = meeting_start + meeting_duration\n            \n            # Ensure the meeting ends by work_end and meets Zachary's preference\n            if meeting_end <= work_end and meeting_end <= zachary_preference_end:\n                return meeting_start, meeting_end\n        \n        # Move the last_end_time to the end of the busy time if it's later\n        last_end_time = max(last_end_time, end)\n\n    # Check for a final slot after the last busy time before work_end\n    if last_end_time + meeting_duration <= work_end:\n        meeting_start = last_end_time\n        meeting_end = meeting_start + meeting_duration\n        return meeting_start, meeting_end\n\n    return None, None  # No available time found\n\n# Find meeting time\nmeeting_start_time, meeting_end_time = find_meeting_time(heather_schedule, zachary_schedule, meeting_duration, work_start, work_end, zachary_preference_end)\n\n# Output in the requested format\noutput_time = f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\" if meeting_start_time else \"No available time\"\nprint(output_time)\n```",
            "count": "calendar_scheduling_example_7"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(occupants, duration_minutes):\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Convert duration to timedelta\n    duration = timedelta(minutes=duration_minutes)\n    \n    # Create a list of occupied time ranges\n    occupied_times = []\n    for occupant in occupants:\n        for start, end in occupant['schedule']:\n            occupied_times.append((start, end))\n    \n    # Sort occupied times by start time\n    occupied_times.sort(key=lambda x: x[0])\n    \n    # Merge overlapping or contiguous time blocks\n    merged_times = []\n    for start, end in occupied_times:\n        if not merged_times or merged_times[-1][1] < start:\n            merged_times.append((start, end))\n        else:\n            merged_times[-1] = (merged_times[-1][0], max(merged_times[-1][1], end))\n    \n    # Find available slots\n    available_times = []\n    previous_end = work_start\n    \n    for start, end in merged_times:\n        if previous_end + duration <= start:\n            available_times.append((previous_end, previous_end + duration))\n        previous_end = end\n    \n    # Check the time after the last booked meeting\n    if previous_end + duration <= work_end:\n        available_times.append((previous_end, previous_end + duration))\n    \n    # Return the first available time slot\n    return available_times[0] if available_times else None\n\n# Participant schedules\nparticipants = [\n    {\n        'name': 'Adam',\n        'schedule': [\n            (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n            (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        ]\n    },\n    {\n        'name': 'Jerry',\n        'schedule': [\n            (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n            (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n        ]\n    },\n    {\n        'name': 'Matthew',\n        'schedule': [\n            (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n            (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n            (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n            (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n        ]\n    }\n]\n\n# Meeting duration in minutes\nduration = 30\n\n# Find a suitable time for the meeting\nmeeting_time = find_meeting_time(participants, duration)\n\n# Output the result in the required format\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_8"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\n# Define the participants' busy schedules\ndiane_schedule = [(9, 0, 9, 30), (12, 0, 12, 30), (14, 30, 15, 30)]\nkelly_schedule = [(9, 30, 10, 0), (10, 30, 11, 0)]\ndeborah_schedule = [(9, 0, 9, 30), (10, 0, 14, 0), (14, 30, 17, 0)]\n\n# Translate the busy schedules into a single list of time intervals\nbusy_times = diane_schedule + kelly_schedule + deborah_schedule\n\n# Define work hours and meeting duration\nwork_start = (9, 0)\nwork_end = (17, 0)\nmeeting_duration = (0, 30)  # 30 minutes\n\n# Function to check if a time slot is free\ndef is_time_slot_free(start_hour, start_minute, duration_hour, duration_minute):\n    end_hour = start_hour + duration_hour\n    end_minute = start_minute + duration_minute\n    if end_minute >= 60:\n        end_hour += 1\n        end_minute -= 60\n\n    for busy_start_hour, busy_start_minute, busy_end_hour, busy_end_minute in busy_times:\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and \\\n           (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\n# Function to find a suitable time slot\ndef find_meeting_time():\n    for hour in range(work_start[0], work_end[0] + 1):\n        for minute in range(0, 60):\n            if is_time_slot_free(hour, minute, meeting_duration[0], meeting_duration[1]):\n                return f\"{hour:02}:{minute:02}:{hour:02}:{minute + meeting_duration[1]:02}\"\n    return \"No available time slot found\"\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_9"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules in time blocks (start_time, end_time)\ndiana_schedule = [(datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 0)),\n                  (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30))]\n\nethan_schedule = []  # No meetings\n\njanet_schedule = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n                  (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n                  (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 0)),\n                  (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 17, 0))]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Generate free time slots\ndef get_free_time_slots(schedule, work_start, work_end):\n    free_slots = []\n    \n    if not schedule:\n        return [(work_start, work_end)]\n\n    # Start with the beginning of work hours\n    current_start = work_start\n\n    for start, end in sorted(schedule):\n        if current_start < start:\n            free_slots.append((current_start, start))\n        current_start = max(current_start, end)\n\n    if current_start < work_end:\n        free_slots.append((current_start, work_end))\n\n    return free_slots\n\n# Find all free slots for each participant\ndiana_free_slots = get_free_time_slots(diana_schedule, work_start, work_end)\nethan_free_slots = get_free_time_slots(ethan_schedule, work_start, work_end)\njanet_free_slots = get_free_time_slots(janet_schedule, work_start, work_end)\n\n# Find common free slots that can accommodate the meeting duration\ndef find_common_slot(diana_free_slots, ethan_free_slots, janet_free_slots, meeting_duration):\n    common_slots = []\n    diana_index, ethan_index, janet_index = 0, 0, 0\n    \n    while diana_index < len(diana_free_slots) and ethan_index < len(ethan_free_slots) and janet_index < len(janet_free_slots):\n        start_time = max(diana_free_slots[diana_index][0], ethan_free_slots[ethan_index][0], janet_free_slots[janet_index][0])\n        end_time = min(diana_free_slots[diana_index][1], ethan_free_slots[ethan_index][1], janet_free_slots[janet_index][1])\n        \n        if end_time - start_time >= meeting_duration:\n            common_slots.append((start_time, end_time))\n        \n        # Move to the next slot for the participant with the earliest end time\n        if diana_free_slots[diana_index][1] < ethan_free_slots[ethan_index][1]:\n            diana_index += 1\n        elif ethan_free_slots[ethan_index][1] < janet_free_slots[janet_index][1]:\n            ethan_index += 1\n        else:\n            janet_index += 1\n            \n    return common_slots\n\n# Get the common slots\ncommon_slots = find_common_slot(diana_free_slots, ethan_free_slots, janet_free_slots, meeting_duration)\n\n# Choose the first common slot that fits the meeting duration\nif common_slots:\n    proposed_time = common_slots[0][0]\n    print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\nelse:\n    print(\"No available slot found.\")\n```",
            "count": "calendar_scheduling_example_10"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules as busy time slots for each participant in tuples of (start, end)\nschedules = {\n    \"Alexander\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Elizabeth\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Walter\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules, duration, working_start, working_end):\n    busy_times = []\n    for busy_slots in schedules.values():\n        busy_times.extend(busy_slots)\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    start_time = working_start\n    for busy_start, busy_end in busy_times:\n        if start_time + duration <= busy_start:\n            return start_time.strftime(\"%H:%M\") + \":\" + (start_time + duration).strftime(\"%H:%M\")\n        start_time = max(start_time, busy_end)\n\n    # Check if there's time after the last busy slot\n    if start_time + duration <= working_end:\n        return start_time.strftime(\"%H:%M\") + \":\" + (start_time + duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Call the function and print the proposed meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration, working_hours_start, working_hours_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_11"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time\ndef find_meeting_time(david_availability, debra_availability, kevin_availability, meeting_duration):\n    # Create a list of all time slots during work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of unavailable time slots from each participant\n    time_slots = []\n    \n    for start, end in [david_availability, debra_availability, kevin_availability]:\n        current_time = start\n        while current_time < end:\n            time_slots.append(current_time.strftime(\"%H:%M\"))\n            current_time += timedelta(minutes=30)  # Check every 30 minutes to get rough slots\n    \n    # Check for available slots\n    for time in time_slots:\n        meeting_start = datetime.strptime(time, \"%H:%M\")\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        \n        if meeting_end.time() <= work_end.time():\n            if (meeting_start.time() >= david_availability[0].time() and \n                meeting_end.time() <= david_availability[1].time() and\n                not (meeting_start.time() in debra_availability or meeting_start.time() in kevin_availability)):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n    return None\n\n# Participants' availability (start_time, end_time)\ndavid_availability = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\ndebra_availability = (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\nkevin_availability = (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))\n\nmeeting_duration = 60  # Duration in minutes\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(david_availability, debra_availability, kevin_availability, meeting_duration)\nprint(meeting_time)  # Output in HH:MM:HH:MM format\n```",
            "count": "calendar_scheduling_example_12"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(geral_schedule, roy_schedule, barbara_schedule, duration):\n    meeting_start_time = 9 * 60  # 9:00 in minutes\n    meeting_end_time = 17 * 60    # 17:00 in minutes\n    \n    # Convert schedules to minute ranges\n    gerald_busy_times = [\n        (9 * 60, 9 * 60 + 30),  # 9:00 to 9:30\n        (13 * 60, 14 * 60),     # 13:00 to 14:00\n        (15 * 60, 15 * 60 + 30), # 15:00 to 15:30\n        (16 * 60, 17 * 60)       # 16:00 to 17:00\n    ]\n    \n    barbara_busy_times = [\n        (9 * 60 + 30, 10 * 60),   # 9:30 to 10:00\n        (11 * 60 + 30, 14 * 60),  # 11:30 to 14:00\n        (14 * 60 + 30, 15 * 60),   # 14:30 to 15:00\n        (15 * 60 + 30, 17 * 60)    # 15:30 to 17:00\n    ]\n\n    # Combine and sort busy times\n    busy_times = gerald_busy_times + barbara_busy_times\n    busy_times.sort()\n\n    # Find free slots in the working hours\n    free_slots = []\n    last_end = meeting_start_time\n    \n    for start, end in busy_times:\n        if last_end + duration <= start:  # Check if there is a free time\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)  # Update last_end to the latest end time\n    \n    # Check for the time after last busy time until meeting_end_time\n    if last_end + duration <= meeting_end_time:\n        free_slots.append((last_end, meeting_end_time))\n    \n    # Filter free slots based on Gerald's preference of avoiding before 13:00\n    available_slots = [(start, end) for start, end in free_slots if start >= 13 * 60 or end >= 13 * 60]\n    \n    # Return the first available slot that meets all conditions\n    if available_slots:\n        proposed_start = available_slots[0][0]\n        proposed_end = proposed_start + duration\n        return f\"{proposed_start // 60:02}:{proposed_start % 60:02}:{proposed_end // 60:02}:{proposed_end % 60:02}\"\n    \n    return None\n\n# Existing schedules and duration\ngeral_schedule = {}\nroy_schedule = {}\nbarbara_schedule = {}\nduration = 30  # Duration in minutes\n\n# Calculate proposed time for the meeting\nproposed_time = find_meeting_time(geral_schedule, roy_schedule, barbara_schedule, duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_13"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Participants' schedules\n    brandon_schedule = [(13, 0, 14, 0), (15, 30, 16, 0), (16, 30, 17, 0)]\n    jerry_schedule = []\n    bradley_schedule = [(9, 0, 11, 30), (12, 0, 15, 0), (16, 0, 16, 30)]\n\n    # Meeting duration (in hours and minutes)\n    meeting_duration = (0, 30)  # 30 minutes\n\n    # Work hours\n    work_start = (9, 0)\n    work_end = (17, 0)\n\n    # Function to check if time is free\n    def is_time_free(start, duration, schedule):\n        end = (start[0] + (start[1] + duration[1]) // 60, (start[1] + duration[1]) % 60)\n        return all(not (start < (s, m) < end or start < (e, m) < end) for s, m, e, _ in schedule)\n\n    # Function to convert time to a tuple of (hour, minute)\n    def time_add(start, add_duration):\n        return (start[0] + add_duration[0] + (start[1] + add_duration[1]) // 60, \n                (start[1] + add_duration[1]) % 60)\n\n    # Check time slots for the meeting\n    current_time = work_start\n\n    while current_time < work_end:\n        if is_time_free(current_time, meeting_duration, brandon_schedule) and \\\n           is_time_free(current_time, meeting_duration, jerry_schedule) and \\\n           is_time_free(current_time, meeting_duration, bradley_schedule):\n\n            if current_time >= (14, 30):  # Brandon's preference\n                # Output format as HH:MM:HH:MM\n                proposed_time = f\"{current_time[0]:02}:{current_time[1]:02}:{time_add(current_time, meeting_duration)[0]:02}:{time_add(current_time, meeting_duration)[1]:02}\"\n                return proposed_time\n            \n        # Increment time by 30 minutes\n        current_time = time_add(current_time, (0, 30))\n\n    return None\n\n\nproposed_meeting_time = find_meeting_time()\nprint(proposed_meeting_time)\n```",
            "count": "calendar_scheduling_example_14"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(joyce_schedule, christine_schedule, alexander_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Define the occupied time slots according to the schedules\n    occupied_slots = []\n\n    # Joyce's schedule\n    for start, end in joyce_schedule:\n        occupied_slots.append((start, end))\n    \n    # Christine's schedule\n    for start, end in christine_schedule:\n        occupied_slots.append((start, end))\n    \n    # Alexander's schedule\n    for start, end in alexander_schedule:\n        occupied_slots.append((start, end))\n    \n    # Sort the occupied slots\n    occupied_slots.sort()\n\n    # Combine overlapping intervals\n    merged_intervals = []\n    for current_start, current_end in occupied_slots:\n        if not merged_intervals or merged_intervals[-1][1] < current_start:\n            merged_intervals.append((current_start, current_end))\n        else:\n            merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], current_end))\n\n    # Find gaps\n    free_times = []\n    previous_end = work_start\n\n    for start, end in merged_intervals:\n        if previous_end < start:\n            free_times.append((previous_end, start))\n        previous_end = end\n\n    if previous_end < work_end:\n        free_times.append((previous_end, work_end))\n    \n    # Find a suitable time slot for the meeting\n    for start, end in free_times:\n        if (end - start) >= meeting_duration:\n            proposed_start = start\n            proposed_end = start + meeting_duration\n            return proposed_start.strftime(\"%H:%M\") + ':' + proposed_end.strftime(\"%H:%M\")\n\n    return None\n\njoyce_schedule = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nchristine_schedule = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nalexander_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                      (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                      (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nmeeting_duration = timedelta(minutes=30)\n\nproposed_time = find_meeting_time(joyce_schedule, christine_schedule, alexander_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_15"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the constraints\nparticipants_busy = {\n    \"Scott\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Gabriel\": [],\n    \"Christine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable time\ndef find_meeting_time(participants_busy, meeting_duration, work_start, work_end):\n    free_times = []\n    \n    # Generate the full day schedule with free times\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        busy = False\n        for busy_times in participants_busy.values():\n            for start, end in busy_times:\n                if start <= current_time < end or (current_time + meeting_duration > start and current_time < end):\n                    busy = True\n                    break\n            if busy:\n                break\n        if not busy:\n            free_times.append(current_time)\n        current_time += timedelta(minutes=1)\n\n    if free_times:\n        meeting_time_start = free_times[0]\n        meeting_time_end = meeting_time_start + meeting_duration\n        return meeting_time_start.strftime(\"%H:%M\"), meeting_time_end.strftime(\"%H:%M\")\n    return None\n\n# Calculate the proposed meeting time\nstart_time, end_time = find_meeting_time(participants_busy, meeting_duration, work_start, work_end)\n\n# Output the result in the required format\noutput = f\"{start_time}:{end_time}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_16"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nmargaret_schedule = [(\"09:00\", \"10:00\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"),\n                     (\"13:00\", \"13:30\"), (\"15:00\", \"15:30\")]\ndonna_schedule = [(\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")]\nhelen_schedule = [(\"09:00\", \"09:30\"), (\"10:00\", \"11:30\"), (\"13:00\", \"14:00\"),\n                  (\"14:30\", \"15:00\"), (\"15:30\", \"17:00\")]\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nhelen_preference_end = datetime.strptime(\"13:30\", \"%H:%M\")\n\n# Function to find a suitable time\ndef find_meeting_time(margaret_schedule, donna_schedule, helen_schedule, meeting_duration, work_start, work_end):\n    # Generate all time blocks\n    all_booked = []\n    \n    for start, end in margaret_schedule + donna_schedule + helen_schedule:\n        all_booked.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    \n    # Sort by start times\n    all_booked.sort()\n\n    # Check for free times\n    last_end = work_start\n    for start, end in all_booked:\n        # If there's free time before this meeting\n        if last_end + meeting_duration <= start:\n            if last_end <= helen_preference_end:  # Check helen's preference\n                return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n\n    # Check after the last end time up to work end\n    if last_end + meeting_duration <= work_end:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(margaret_schedule, donna_schedule, helen_schedule, meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time slots for each participant\nbrian_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nbilly_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\npatricia_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Time slots combined and sorted\nbusy_slots = [slot for schedule in [brian_schedule, billy_schedule, patricia_schedule] for slot in schedule]\nbusy_slots.sort(key=lambda x: x[0])\n\n# Find the time slot for the meeting\ncurrent_start = busy_slots[0][0]\nfor start, end in busy_slots:\n    if current_start + meeting_duration <= start:\n        proposed_start = current_start\n        proposed_end = proposed_start + meeting_duration\n        if proposed_end.time() <= datetime.strptime(\"15:30\", \"%H:%M\").time():\n            print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n            break\n    current_start = max(current_start, end)\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_18"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of free time slots\n    free_slots = []\n    \n    # Determine the busy times for all participants\n    busy_times = []\n    for schedule in schedules:\n        for busy_time in schedule:\n            busy_times.append((datetime.strptime(busy_time[0], \"%H:%M\"), datetime.strptime(busy_time[1], \"%H:%M\")))\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Find free slots between work hours\n    previous_end = work_start\n    for start, end in busy_times:\n        if previous_end + timedelta(hours=meeting_duration) <= start:\n            free_slots.append((previous_end, start))\n        previous_end = max(previous_end, end)\n\n    # Check for free time after last busy period until work end\n    if previous_end + timedelta(hours=meeting_duration) <= work_end:\n        free_slots.append((previous_end, work_end))\n\n    # Find a suitable slot for the meeting\n    for start, end in free_slots:\n        if end - start >= timedelta(hours=meeting_duration):\n            proposed_start = start\n            proposed_end = start + timedelta(hours=meeting_duration)\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Schedules of participants\nschedules = [\n    [(\"10:00\", \"10:30\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")],  # Stephen\n    [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"13:30\", \"14:30\"), (\"15:00\", \"16:00\")],  # Edward\n    [(\"09:00\", \"11:30\"), (\"12:30\", \"13:00\"), (\"13:30\", \"15:30\"), (\"16:00\", \"17:00\")]   # Angela\n]\n\n# Meeting duration in hours\nmeeting_duration = 1\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_19"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, duration, work_hours):\n    start_time = datetime.strptime(work_hours[0], \"%H:%M\")\n    end_time = datetime.strptime(work_hours[1], \"%H:%M\")\n    \n    # Create busy time slots\n    busy_slots = []\n    for schedule in participants.values():\n        for busy_start, busy_end in schedule:\n            busy_slots.append((busy_start, busy_end))\n    \n    # Check for a suitable time slot\n    current_time = start_time\n    while current_time + timedelta(minutes=duration) <= end_time:\n        end_meeting_time = current_time + timedelta(minutes=duration)\n        \n        # Check if the current slot overlaps with any busy slots\n        overlaps = any(current_time < busy_end and end_meeting_time > busy_start for busy_start, busy_end in busy_slots)\n        \n        if not overlaps:\n            return f\"{current_time.strftime('%H:%M')}:{end_meeting_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Try the next minute\n\n# Define participant schedules in (start_time, end_time) format\nparticipants = {\n    \"Ralph\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Peter\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Daniel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = 30  # in minutes\nwork_hours = [\"09:00\", \"17:00\"]\n\n# Find a suitable time\nproposed_time = schedule_meeting(participants, meeting_duration, work_hours)\nprint(proposed_time)\n'''",
            "count": "calendar_scheduling_example_20"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the busy times for each participant\nscott_busy = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nkimberly_busy = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy times into one list\nbusy_times = scott_busy + kimberly_busy\n\n# Check for available times\ncurrent_time = working_start\nwhile current_time + meeting_duration <= working_end:\n    # Assume the time is free until we find a conflict\n    is_free = True\n    for busy_start, busy_end in busy_times:\n        if current_time < busy_end and (current_time + meeting_duration) > busy_start:\n            is_free = False\n            break\n    \n    if is_free:\n        # If found a free time\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n\n    current_time += timedelta(minutes=30)  # Increment time by 30 minutes to check the next slot\n```",
            "count": "calendar_scheduling_example_21"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\ntheresa_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ncharles_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nbetty_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Define meeting duration and work hours\nmeeting_duration = timedelta(hours=1)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create a list of all busy time slots\nbusy_slots = theresa_schedule + charles_schedule + betty_schedule\n\n# Function to find available time slot\ndef find_available_slot():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        # Check if current time slot overlaps with any busy slot\n        if not any(start < end_time and current_time < end for start, end in busy_slots):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every half hour\n    return None\n\n# Get the available slot\navailable_slot = find_available_slot()\n\nprint(available_slot)  # This will output the valid time in the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_22"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(billy_busy, maria_busy, william_busy, meeting_duration, start_time, end_time):\n    # Convert times from string to datetime\n    work_start = datetime.strptime(start_time, \"%H:%M\")\n    work_end = datetime.strptime(end_time, \"%H:%M\")\n    meeting_duration = timedelta(hours=meeting_duration)\n\n    # Create a list of busy intervals\n    busy_intervals = []\n    for start, end in billy_busy + maria_busy + william_busy:\n        busy_intervals.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n    # Check for potential meeting spots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        is_busy = any(meeting_start < end and meeting_end > start for start, end in busy_intervals)\n        \n        if not is_busy:\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n\n    return None\n\n# Participants' busy times\nbilly_busy = [(\"11:30\", \"12:00\"), (\"13:00\", \"15:00\"), (\"16:00\", \"16:30\")]\nmaria_busy = [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"13:00\", \"13:30\"), (\"14:00\", \"14:30\")]\nwilliam_busy = [(\"09:30\", \"10:00\"), (\"12:00\", \"12:30\"), (\"13:30\", \"15:00\"), (\"15:30\", \"17:00\")]\n\n# Meeting configuration\nmeeting_duration = 1  # 1 hour\nstart_time = \"09:00\"\nend_time = \"17:00\"\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(billy_busy, maria_busy, william_busy, meeting_duration, start_time, end_time)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_23"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nbenjamin_free = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M'))]\nhannah_free = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\nbrenda_free = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find a common free slot\ndef find_meeting_time(benjamin_free, hannah_free, brenda_free):\n    # Get union of free times for all participants\n    all_free_slots = []\n    \n    for start, end in benjamin_free:\n        all_free_slots.append((start, end))\n    for start, end in hannah_free:\n        all_free_slots.append((start, end))\n    for start, end in brenda_free:\n        all_free_slots.append((start, end))\n\n    # Find available time slots\n    available_slots = []\n    for slot in all_free_slots:\n        if len(available_slots) == 0 or available_slots[-1][1] < slot[0]:\n            available_slots.append(slot)\n        else:\n            available_slots[-1] = (available_slots[-1][0], max(available_slots[-1][1], slot[1]))\n\n    # Check for a suitable meeting time\n    for start, end in available_slots:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = meeting_start + meeting_duration\n            if meeting_end <= end:\n                return meeting_start.strftime('%H:%M') + \":\" + meeting_end.strftime('%H:%M')\n\n# Execute the function\nproposed_time = find_meeting_time(benjamin_free, hannah_free, brenda_free)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_24"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and durations\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the busy times for each participant\nschedules = {\n    \"Anthony\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n  \n    \"Pamela\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n  \n    \"Zachary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Aggregate all busy times\nbusy_times = []\nfor participant, times in schedules.items():\n    busy_times.extend(times)\n\n# Sort busy times\nbusy_times.sort(key=lambda x: x[0])\n\n# Find a suitable meeting time\ncurrent_start = work_start\n\nfor start, end in busy_times:\n    if current_start + meeting_duration <= start:\n        # Check if there's enough time for the meeting\n        if current_start + meeting_duration <= work_end:\n            print(f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\")\n            break\n    # Move the current start time to the end of the busy period\n    current_start = max(current_start, end)\n\n# Check if there's time left after the last busy period\nif current_start + meeting_duration <= work_end:\n    print(f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# define participants' schedules\nkatherine_schedule = [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 17, 0))]\nnicole_schedule = [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 17, 0))]\nkevin_schedule = [\n    (datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 10, 0)),\n    (datetime(2023, 10, 23, 10, 30), datetime(2023, 10, 23, 11, 30)),\n    (datetime(2023, 10, 23, 12, 0), datetime(2023, 10, 23, 15, 30)),\n    (datetime(2023, 10, 23, 16, 30), datetime(2023, 10, 23, 17, 0))\n]\n\n# duration of the meeting\nmeeting_duration = timedelta(hours=1)\n\n# find available time slot\ndef find_meeting_time(katherine_schedule, nicole_schedule, kevin_schedule, meeting_duration):\n    working_hours_start = datetime(2023, 10, 23, 9, 0)\n    working_hours_end = datetime(2023, 10, 23, 17, 0)\n\n    # merged schedules\n    merged_schedule = sorted(katherine_schedule + nicole_schedule + kevin_schedule)\n\n    # find available time in the merged schedule\n    available_start = working_hours_start\n    for start, end in merged_schedule:\n        if available_start + meeting_duration <= start:\n            return available_start.strftime('%H:%M:%S') + ':' + (available_start + meeting_duration).strftime('%H:%M:%S')\n        available_start = max(available_start, end)\n    \n    # check if there's time after the last event\n    if available_start + meeting_duration <= working_hours_end:\n        return available_start.strftime('%H:%M:%S') + ':' + (available_start + meeting_duration).strftime('%H:%M:%S')\n\n    return None\n\n# get proposed meeting time\nproposed_time = find_meeting_time(katherine_schedule, nicole_schedule, kevin_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_26"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing schedules\njesse_busy_times = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\nmegan_busy_times = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Combine all busy times\nall_busy_times = jesse_busy_times + megan_busy_times\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is in any busy time\n        is_busy = any(start <= current_time < end or start < current_time + meeting_duration <= end for start, end in all_busy_times)\n        \n        if not is_busy:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_27"
        },
        {
            "final_program_time": "{11:00:11:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration, work_hours):\n    start_of_day = work_hours[0]\n    end_of_day = work_hours[1]\n    current_time = start_of_day\n\n    while current_time + duration <= end_of_day:\n        available = True\n        for busy_slots in participants:\n            if any(busy[0] < current_time + duration and busy[1] > current_time for busy in busy_slots):\n                available = False\n                break\n        if available:\n            return current_time.strftime(\"%H:%M:%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next half hour\n\n# Participants' schedules (busy time slots)\nbrittany_schedule = [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nemily_schedule = []  # Free all day\n\ndoris_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nparticipants = [brittany_schedule, emily_schedule, doris_schedule]\nmeeting_duration = timedelta(minutes=30)\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\nmeeting_time = find_meeting_time(participants, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_28"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the schedule for each participant\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules as start and end times (blocked)\nmadison_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))]\n\ndiana_schedule = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))]\n\nshirley_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all schedules into a single schedule for all participants\nall_schedules = madison_schedule + diana_schedule + shirley_schedule\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = working_start\n\n    while current_time + meeting_duration <= working_end:\n        # Check if the current time conflicts with any schedule\n        conflict = False\n        for start, end in all_schedules:\n            if current_time < end and current_time + meeting_duration > start:\n                conflict = True\n                break\n        \n        if not conflict:\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=15)  # Check the next 15-minute slot\n\n# Get the meeting time\nstart_time, end_time = find_meeting_time()\noutput = f\"{start_time}:{end_time}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_29"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and constraints\njeffrey_schedule = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M'))]\nvirginia_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                     (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                     (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                     (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\nmelissa_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find available time slot\ndef find_meeting_time(schedules, duration, work_start, work_end):\n    # Create a list of busy times\n    busy_times = []\n    for schedule in schedules:\n        busy_times.extend(schedule)\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Find available slots\n    current_time = work_start\n    for busy_start, busy_end in busy_times:\n        # If there's time before the next busy time\n        if current_time + duration <= busy_start:\n            return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n        # Shift current time to the end of the busy slot\n        current_time = max(current_time, busy_end)\n    \n    # Check if there's time after the last busy slot till work end\n    if current_time + duration <= work_end:\n        return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n    \n    return None\n\n# Check for the preferred time constraint for Melissa\nmelissa_preferred_end = datetime.strptime('14:00', '%H:%M')\n\n# Run the function twice: first with all schedules and then check Melissa's preference\nmeeting_time = find_meeting_time([jeffrey_schedule, virginia_schedule, melissa_schedule], meeting_duration, work_start, work_end)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    start_time_dt = datetime.strptime(start_time, '%H:%M')\n    \n    if start_time_dt < melissa_preferred_end:\n        print(f'{{{start_time}:{end_time}}}')\n    else:\n        # If the time found is not within preferred range, continue checking after preferred end\n        print('No suitable time found within preferences and schedules.')\nelse:\n    print('No available slots found.')\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nrichard_schedule = [(datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]\n\nmartha_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                   (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M'))]\n\nkimberly_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                     (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                     (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                     (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n\n# Function to check availability\ndef is_time_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Check available time slots\ndef find_meeting_time():\n    start_time = work_start\n    while start_time + meeting_duration <= work_end:\n        end_time = start_time + meeting_duration\n        if is_time_available(start_time, end_time, richard_schedule) and \\\n           is_time_available(start_time, end_time, martha_schedule) and \\\n           is_time_available(start_time, end_time, kimberly_schedule) and \\\n           start_time >= datetime.strptime('14:00', '%H:%M'):  # Martha's preference\n            return start_time.strftime('%H:%M') + ':' + end_time.strftime('%H:%M')\n        start_time += timedelta(minutes=30)  # Increment by 30 minutes\n    return None\n\n# Get proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_31"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules\nemily_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nmelissa_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nfrank_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine busy schedules\ncombined_busy = emily_busy + melissa_busy + frank_busy\ncombined_busy.sort()\n\n# Find available time slots\navailable_slots = []\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    busy = False\n    for start, end in combined_busy:\n        if (current_time < end) and (start < end_time):\n            busy = True\n            break\n    if not busy:\n        available_slots.append((current_time, end_time))\n    current_time += timedelta(minutes=1)\n\n# Find a suitable time slot\nif available_slots:\n    proposed_time = available_slots[0]\n    print(f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy slots\nlisa_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nbobby_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nrandy_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to check if the time slot is free\ndef is_slot_free(start_time, end_time, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    time_slot = work_start\n    while time_slot + meeting_duration <= work_end:\n        end_slot = time_slot + meeting_duration\n        if (is_slot_free(time_slot, end_slot, lisa_busy) and\n            is_slot_free(time_slot, end_slot, bobby_busy) and\n            is_slot_free(time_slot, end_slot, randy_busy)):\n            # Check Bobby's preference\n            if time_slot >= datetime.strptime(\"15:00\", \"%H:%M\"):\n                return None  # Bobby wants to avoid meetings after 15:00\n            return f\"{time_slot.strftime('%H:%M')}:{end_slot.strftime('%H:%M')}\"\n        time_slot += timedelta(minutes=30)  # Check the next possible slot\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' schedules\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Schedules (busy times for each participant)\nrichard_busy_times = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                       (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                       (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                       (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nnoah_busy_times = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# A function to check if two time intervals overlap\ndef is_overlap(start1, end1, start2, end2):\n    return start1 < end2 and start2 < end1\n\n# Check all times in the available range for a potential meeting time\ndef find_meeting_time():\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        end_time = current_time + meeting_duration\n        \n        # Check if the proposed time overlaps with Richard's busy times\n        richard_is_free = all(not is_overlap(current_time, end_time, start, end) for start, end in richard_busy_times)\n        \n        # Check if the proposed time overlaps with Noah's busy times\n        noah_is_free = all(not is_overlap(current_time, end_time, start, end) for start, end in noah_busy_times)\n        \n        # If both participants are free, return this time\n        if richard_is_free and noah_is_free:\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        # Move to the next minute\n        current_time += timedelta(minutes=1)\n\n# Print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_34"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Schedules (blocked times)\n    bradley_free = [(work_start, work_end)]\n    zachary_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n    teresa_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n    # Bradley's preference\n    bradley_preference_start = datetime.strptime(\"14:30\", \"%H:%M\")\n\n    # Combined busy times\n    busy_times = zachary_busy + teresa_busy\n    busy_times.sort()\n\n    # Free slots initialization\n    free_slots = []\n    last_end = work_start\n\n    for start, end in busy_times:\n        if start > last_end:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < work_end:\n        free_slots.append((last_end, work_end))\n\n    # Finding available time for meeting considering Bradley's preference\n    for start, end in free_slots:\n        # Adjusting start for Bradley's preference\n        available_start = max(start, bradley_preference_start)\n        proposed_end = available_start + meeting_duration\n        if proposed_end <= end:\n            return f\"{available_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n    return \"No available time found\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_35"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nryan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n\ndenise_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nruth_busy = []  # Ruth has no meetings\n\n# Define work hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Function to find free slots\ndef find_meeting_time(ryan_busy, denise_busy, ruth_busy, start_time, end_time, duration):\n    current_time = start_time\n    while current_time + duration <= end_time:\n        is_free = True\n        for start, end in ryan_busy + denise_busy + ruth_busy:\n            if current_time < end and current_time + duration > start:\n                is_free = False\n                break\n        if is_free:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(ryan_busy, denise_busy, ruth_busy, start_of_day, end_of_day, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration, work_hours):\n    start_of_work = datetime.strptime(work_hours[0], '%H:%M')\n    end_of_work = datetime.strptime(work_hours[1], '%H:%M')\n\n    # Create a list of all busy times\n    busy_slots = []\n    for schedule in participants:\n        busy_slots.extend(schedule)\n    \n    # Normalize the busy slots to a single list of intervals\n    busy_intervals = []\n    for busy in busy_slots:\n        busy_intervals.append((datetime.strptime(busy[0], '%H:%M'), datetime.strptime(busy[1], '%H:%M')))\n    \n    # Sort the busy intervals\n    busy_intervals.sort()\n\n    # Find available slots within work hours\n    available_starts = [start_of_work]\n    for busy_start, busy_end in busy_intervals:\n        if available_starts[-1] < busy_start:\n            available_starts.append(available_starts[-1])\n        if busy_end > available_starts[-1]:\n            available_starts[-1] = busy_end\n            \n    # Find a suitable time slot for the meeting\n    for i in range(len(available_starts) - 1):\n        if available_starts[i + 1] - available_starts[i] >= duration:\n            meeting_start = available_starts[i]\n            meeting_end = meeting_start + duration\n            if meeting_end <= end_of_work:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\n# Participants' schedules\ngregory_schedule = [('11:00', '11:30'), ('12:00', '12:30'), ('15:30', '16:30')]\nteresa_schedule = []  # Teresa is free all day\ncarol_schedule = [('09:00', '10:30'), ('11:00', '16:00'), ('16:30', '17:00')]\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_hours = ['09:00', '17:00']\n\n# Find the meeting time\nparticipants = [gregory_schedule, teresa_schedule, carol_schedule]\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_37"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and durations\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules as lists of tuples (start, end)\ncatherine_schedule = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nmichael_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nalexander_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                      (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                      (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Function to find available meeting time\ndef find_meeting_time(schedules, start, end, duration):\n    current_time = start\n    while current_time + duration <= end:\n        # Check if this time slot is free for all participants\n        if all(not (current_time < busy_end and current_time + duration > busy_start)\n               for schedule in schedules\n               for busy_start, busy_end in schedule):\n            return current_time\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    return None\n\n# Find an available meeting time\nschedules = [catherine_schedule, michael_schedule, alexander_schedule]\navailable_time = find_meeting_time(schedules, working_hours_start, working_hours_end, meeting_duration)\n\n# Output the time in required format\nif available_time:\n    print(f\"{available_time.strftime('%H:%M')}:{(available_time + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_38"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' schedules\nstart_work_hour = datetime.strptime(\"09:00\", \"%H:%M\")\nend_work_hour = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Participants' schedules (busy time ranges)\nvictoria_busy_times = [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nnancy_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\n# Function to check if a time slot is free\ndef is_free(start_time, end_time, busy_times):\n    for busy_start, busy_end in busy_times:\n        if (start_time < busy_end) and (end_time > busy_start):\n            return False\n    return True\n\n# Check for the earliest time slot available for all participants\ndef find_meeting_time():\n    current_time = start_work_hour\n\n    while current_time + timedelta(minutes=meeting_duration) <= end_work_hour:\n        meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n\n        if is_free(current_time, meeting_end_time, victoria_busy_times) and \\\n           is_free(current_time, meeting_end_time, nancy_busy_times):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n\n    return \"No available slot found\"\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_39"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Available time slots initialized\n    available_slots = [(work_start, work_end)]\n\n    # Subtract booked slots from available slots for each participant\n    for schedule in participants:\n        new_slots = []\n        for start, end in available_slots:\n            # If the scheduled meeting is completely outside the available slot\n            if end <= schedule[0] or start >= schedule[1]:\n                new_slots.append((start, end))\n            else:\n                # Start of the available slot till the start of the booked meeting\n                if start < schedule[0]:\n                    new_slots.append((start, schedule[0]))\n                # End of the booked meeting till the end of the available slot\n                if end > schedule[1]:\n                    new_slots.append((schedule[1], end))\n\n        available_slots = new_slots\n\n    # Check for slots that can fit the required duration\n    for start, end in available_slots:\n        if end - start >= timedelta(hours=duration):\n            meeting_start = start\n            meeting_end = start + timedelta(hours=duration)\n            if meeting_end <= end:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Participant schedules (start, end)\njacob_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\ngabriel_schedule = [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nmatthew_schedule = [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Find meeting time for all participants\nparticipants_schedules = jacob_schedule + gabriel_schedule + matthew_schedule\nmeeting_duration = 1  # in hours\nmeeting_time = find_meeting_time(participants_schedules, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_40"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules and constraints\nalan_availability = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nnancy_busy = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\npatricia_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Alan's preference for meeting time\nalan_preference_start = datetime.strptime(\"14:30\", \"%H:%M\")\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time():\n    start_time = alan_preference_start\n    end_time = alan_availability[0][1]\n\n    while start_time + meeting_duration <= end_time:\n        # Check if this time overlaps with Nancy's or Patricia's busy times\n        meeting_end_time = start_time + meeting_duration\n        if all(not (start < meeting_end_time and end > start_time) for (start, end) in nancy_busy) and \\\n           all(not (start < meeting_end_time and end > start_time) for (start, end) in patricia_busy):\n            return f\"{start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        start_time += timedelta(minutes=1)\n\n# Generate proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_41"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules: (start time, end time) in hours\njulie_busy = [(9, 9.5), (11, 11.5), (12, 12.5), (13.5, 14), (16, 17)]\nsean_busy = [(9, 9.5), (13, 13.5), (15, 15.5), (16, 16.5)]\nlori_busy = [(10, 10.5), (11, 13), (15.5, 17)]\n\nwork_start = 9  # 9:00\nwork_end = 17   # 17:00\nmeeting_duration = 1  # 1 hour\n\n# Function to check if a time slot is free\ndef is_time_free(start, end, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if start < busy_end and end > busy_start:  # Overlapping check\n            return False\n    return True\n\n# Generate time slots and check for availability\nfor hour in range(work_start, work_end - meeting_duration + 1):\n    start_time = hour\n    end_time = hour + meeting_duration\n    \n    if is_time_free(start_time, end_time, julie_busy) and \\\n       is_time_free(start_time, end_time, sean_busy) and \\\n       is_time_free(start_time, end_time, lori_busy):\n        # Output found time\n        print(f\"{start_time:02d}:00:{end_time:02d}:00\")\n        break\n```",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Albert\": [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n    \"Gregory\": [\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    ],\n    \"Benjamin\": [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find available meeting time\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a combined schedule of busy times\n    busy_times = []\n    for participant in schedules.values():\n        busy_times.extend(participant)\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Check for gaps in the schedule\n    current_time = work_start\n    for start, end in busy_times:\n        if current_time + meeting_duration <= start:\n            return current_time.strftime('%H:%M') + ':' + (current_time + meeting_duration).strftime('%H:%M')\n        # Move current time after the busy period\n        current_time = max(current_time, end)\n\n    # Check if there's time at the end of the day\n    if current_time + meeting_duration <= work_end:\n        return current_time.strftime('%H:%M') + ':' + (current_time + meeting_duration).strftime('%H:%M')\n\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_43"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "IndexError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' availability\nisabella_free = [(9, 0), (17, 0)]  # 9:00 to 17:00\nronald_busy = [(11, 30), (12, 0), (14, 0), (14, 30), (16, 0), (17, 0)]  # Busy slots\namanda_busy = [(9, 30), (12, 0), (12, 30), (13, 0), (13, 30), (15, 30), (17, 0)]  # Busy slots\n\ndef find_meeting_time(duration):\n    # Convert times to datetime objects\n    def create_time_slots(start, end):\n        return [(datetime(2023, 10, 2, start[0], start[1]), datetime(2023, 10, 2, end[0], end[1]))]\n\n    # Generate list of busy slots for each participant\n    busy_slots = []\n    \n    # Add Ronald's busy slots\n    for i in range(0, len(ronald_busy), 2):\n        busy_slots.append(create_time_slots(ronald_busy[i], ronald_busy[i + 1]))\n    \n    # Add Amanda's busy slots\n    for i in range(0, len(amanda_busy), 2):\n        busy_slots.append(create_time_slots(amanda_busy[i], amanda_busy[i + 1]))\n\n    # All busy slots combined\n    all_busy_slots = sorted([slot for sublist in busy_slots for slot in sublist])\n\n    # Set the endpoint of the meeting schedule\n    work_start = datetime(2023, 10, 2, 9, 0)\n    work_end = datetime(2023, 10, 2, 17, 0)\n    \n    current_time = work_start\n    meeting_duration = timedelta(minutes=duration)\n\n    while current_time + meeting_duration <= work_end:\n        # Checking if current_time overlaps with any busy slots\n        if all(all_busy_slot[0] > current_time + meeting_duration or all_busy_slot[1] < current_time for all_busy_slot in all_busy_slots):\n            if current_time.time() < datetime(2023, 10, 2, 13, 0).time():\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Increment time\n\n# Find a valid meeting time for half an hour\nmeeting_time = find_meeting_time(30)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_44"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules\nandrew_schedule = []\ngrace_schedule = []\nsamuel_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ndef find_meeting_time(working_hours_start, working_hours_end, meeting_duration, participant_schedules):\n    current_time = working_hours_start\n    \n    while current_time + meeting_duration <= working_hours_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < end and end_time > start)\n               for schedule in participant_schedules for start, end in schedule):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n\n# All schedules of participants\nparticipant_schedules = [andrew_schedule, grace_schedule, samuel_schedule]\n\n# Find and print meeting time\nmeeting_time = find_meeting_time(working_hours_start, working_hours_end, meeting_duration, participant_schedules)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if a meeting can fit in between schedules\ndef can_schedule_meeting(start_time, end_time, schedules):\n    for schedule in schedules:\n        for blocked_start, blocked_end in schedule:\n            if start_time < blocked_end and end_time > blocked_start:\n                return False\n    return True\n\n# Main function to find a suitable meeting time\ndef find_meeting_time(schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if can_schedule_meeting(current_time, end_time, schedules):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Check the next minute\n    \n    return \"No suitable time found\"\n\n# Existing schedules for each participant\narthur_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))]\n\ntheresa_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\ncarl_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combining all schedules\nschedules = [arthur_schedule, theresa_schedule, carl_schedule]\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Finding the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_46"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\neric_availabilities = [\n    (working_hours_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), working_hours_end),\n]\n\nroger_availabilities = [\n    (working_hours_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), working_hours_end),\n]\n\n# Function to find time slots\ndef find_time_slot(availabilties1, availabilties2, duration):\n    for start1, end1 in availabilties1:\n        for start2, end2 in availabilties2:\n            # Find the overlapping time range\n            latest_start = max(start1, start2)\n            earliest_end = min(end1, end2)\n\n            # Check if there is enough time for the meeting\n            if earliest_end - latest_start >= duration:\n                return latest_start, latest_start + duration\n    \n    return None\n\n# Calculate available times\ntime_slot = find_time_slot(eric_availabilities, roger_availabilities, meeting_duration)\n\n# Format output\nif time_slot:\n    start_time, end_time = time_slot\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_47"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the busy schedules of the participants\njanet_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\ncynthia_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Preferences\ncynthia_preference = datetime.strptime(\"13:30\", \"%H:%M\")\n\n# Check potential meeting slots\ndef is_time_available(meeting_start, busy_schedule):\n    meeting_end = meeting_start + meeting_duration\n    for start, end in busy_schedule:\n        if (meeting_start < end) and (meeting_end > start):\n            return False\n    return True\n\n# Find a suitable time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if current_time >= cynthia_preference and is_time_available(current_time, janet_busy) and is_time_available(current_time, cynthia_busy):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\nmeeting_start, meeting_end = find_meeting_time()\nprint(f\"{{{meeting_start}:{meeting_end}}}\")\n```",
            "count": "calendar_scheduling_example_48"
        },
        {
            "final_program_time": "{10:30:10:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"Teresa\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Kathleen\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Patricia\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a list of busy times for all participants\n    busy_times = []\n    for participant, times in schedules.items():\n        busy_times.extend(times)\n    \n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Check for gaps in busy times for potential meeting slots\n    last_end_time = work_start\n    for start, end in busy_times:\n        if last_end_time + meeting_duration <= start:  # Check if there's enough time for the meeting\n            proposed_time = last_end_time\n            return proposed_time.strftime(\"%H:%M:%H:%M\")  # Return in desired format\n        last_end_time = max(last_end_time, end)  # Move last_end_time to the end of the current busy time\n    \n    # Check the time after the last busy slot till work end\n    if last_end_time + meeting_duration <= work_end:\n        proposed_time = last_end_time\n        return proposed_time.strftime(\"%H:%M:%H:%M\")\n    \n    return None  # If no suitable time found\n\n# Get the suitable meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_49"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants schedules\n# Each entry is a tuple (start, end) in a 24-hour format\ndaniel_schedule = [(9, 17)]  # Open all day\nroy_schedule = [(9, 17)]      # Open all day\nemma_schedule = [(9, 10.5), (11, 12), (12.5, 13.5), (14.5, 15.5), (16, 16.5)]\n\n# Meeting duration in hours\nmeeting_duration = 1\n\n# Function to find free time\ndef find_meeting_time(daniel, roy, emma, duration):\n    # Combine all schedules into a single schedule\n    combined_schedule = []\n    for start, end in daniel:\n        combined_schedule.append((start, end))\n    for start, end in roy:\n        combined_schedule.append((start, end))\n    for start, end in emma:\n        combined_schedule.append((start, end))\n\n    # Sort combined schedules\n    combined_schedule.sort()\n\n    # Check for available time slots\n    meeting_start = 9  # Start of work day\n    for start, end in combined_schedule:\n        # Check if there is enough space before the next meeting\n        if meeting_start + duration <= start:\n            return meeting_start\n        # Move the meeting start to the end of the current meeting\n        meeting_start = max(meeting_start, end)\n\n    # Final check after the last meeting\n    if meeting_start + duration <= 17:\n        return meeting_start\n\n    return None\n\n# Find appropriate meeting time\nmeeting_time_start = find_meeting_time([daniel_schedule], [roy_schedule], emma_schedule, meeting_duration)\n\nif meeting_time_start is not None:\n    meeting_time_end = meeting_time_start + meeting_duration\n    print(f\"{int(meeting_time_start):02}:{int((meeting_time_start % 1) * 60):02}:{int(meeting_time_end):02}:{int((meeting_time_end % 1) * 60):02}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_50"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules in the format (start, end)\nbrandon_schedule = [(datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 12, 0)),\n                    (datetime(2023, 10, 23, 12, 30), datetime(2023, 10, 23, 13, 30)),\n                    (datetime(2023, 10, 23, 14, 0), datetime(2023, 10, 23, 14, 30))]\n\ndonna_schedule = [(datetime(2023, 10, 23, 10, 0), datetime(2023, 10, 23, 10, 30)),\n                  (datetime(2023, 10, 23, 12, 0), datetime(2023, 10, 23, 12, 30))]\n\njack_schedule = [(datetime(2023, 10, 23, 9, 30), datetime(2023, 10, 23, 10, 0)),\n                 (datetime(2023, 10, 23, 10, 30), datetime(2023, 10, 23, 11, 0)),\n                 (datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 12, 30)),\n                 (datetime(2023, 10, 23, 13, 0), datetime(2023, 10, 23, 14, 30)),\n                 (datetime(2023, 10, 23, 15, 30), datetime(2023, 10, 23, 17, 0))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Combine all busy times into one list\nbusy_times = []\nfor schedule in [brandon_schedule, donna_schedule, jack_schedule]:\n    busy_times.extend(schedule)\n\n# Define work hour limits\nwork_start = datetime(2023, 10, 23, 9, 0)\nwork_end = datetime(2023, 10, 23, 17, 0)\n\n# Function to find possible meeting times\ndef find_meeting_time(busy_times, meeting_duration):\n    # Sort busy times\n    busy_times.sort()\n\n    # Initialize the current time to work start\n    current_time = work_start\n\n    for start, end in busy_times:\n        # Considering the time slot before the busy schedule\n        if current_time + meeting_duration <= start:\n            return current_time, current_time + meeting_duration\n        \n        # Move current time to the end of the busy schedule\n        current_time = max(current_time, end)\n    \n    # Check after the last busy time till work end\n    if current_time + meeting_duration <= work_end:\n        return current_time, current_time + meeting_duration\n\n    return None  # No available time slot\n\nmeeting_time = find_meeting_time(busy_times, meeting_duration)\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time for meeting.\")\n```\n",
            "count": "calendar_scheduling_example_51"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, work_start, work_end):\n    work_start_time = datetime.strptime(work_start, \"%H:%M\")\n    work_end_time = datetime.strptime(work_end, \"%H:%M\")\n    meeting_duration_timedelta = timedelta(hours=meeting_duration)\n\n    available_times = []\n    for t in range((work_end_time - work_start_time).seconds // 60):\n        start_time = work_start_time + timedelta(minutes=t)\n        end_time = start_time + meeting_duration_timedelta\n        \n        if end_time <= work_end_time and all(not (start_time < busy_end and end_time > busy_start)\n                                               for busy_start, busy_end in participants):\n            available_times.append((start_time, end_time))\n\n    return available_times[0] if available_times else None\n\ndef main():\n    participants_busy_times = [\n        [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 9, 30)),  # Grace\n         (datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 11, 0)),\n         (datetime(2023, 10, 16, 16, 0), datetime(2023, 10, 16, 16, 30))],\n         \n        [(datetime(2023, 10, 16, 12, 30), datetime(2023, 10, 16, 13, 0)),  # Randy\n         (datetime(2023, 10, 16, 16, 0), datetime(2023, 10, 16, 16, 30))],\n         \n        [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 14, 30)),  # Susan\n         (datetime(2023, 10, 16, 15, 30), datetime(2023, 10, 16, 16, 0))]\n    ]\n    \n    busy_times = []\n    for busy_time_list in participants_busy_times:\n        busy_times.extend(busy_time_list)\n    \n    meeting_duration = 1  # 1 hour\n    work_hours_start = \"09:00\"\n    work_hours_end = \"17:00\"\n    \n    meeting_time = find_meeting_time(busy_times, meeting_duration, work_hours_start, work_hours_end)\n    \n    if meeting_time:\n        proposed_time = f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\"\n        print(proposed_time)\n    else:\n        print(\"No available time found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_52"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": "NameError",
            "full_response": "```python\ndef find_meeting_time(people_schedules, meeting_duration):\n    from datetime import datetime, timedelta\n\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    duration = timedelta(hours=meeting_duration)\n\n    # Generate free time slots for all participants\n    free_time = []\n    current_time = work_start\n\n    while current_time < work_end:\n        next_time = current_time + duration\n        if next_time > work_end:\n            break\n\n        if all(not (busy_start < next_time and busy_end > current_time) for schedule in people_schedules for busy_start, busy_end in schedule):\n            free_time.append((current_time.time(), next_time.time()))\n        \n        current_time += timedelta(minutes=1)  # Check next minute\n\n    return free_time[0] if free_time else None\n\n# Schedules for Noah, Alice, and Arthur (busy time slots)\nnoah_schedule = []\nalice_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\narthur_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# List of participants' schedules\nparticipants_schedules = [noah_schedule, alice_schedule, arthur_schedule]\n\n# Meeting duration in hours\nmeeting_duration_hours = 1\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(participants_schedules, meeting_duration_hours)\n\n# Format the output\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_53"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if a time slot is available for all participants\ndef is_time_slot_available(start, duration, schedules):\n    end = start + duration\n    for schedule in schedules:\n        for busy_start, busy_end in schedule:\n            if (start < busy_end and end > busy_start):  # Check for overlapping\n                return False\n    return True\n\n# Participants' schedules for Monday\nschedules = {\n    \"Isabella\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Tyler\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \"Jordan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Settings for the meeting\nmeeting_duration = timedelta(hours=1)\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Finding a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_slot_available(current_time, meeting_duration, schedules.values()):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f'{{ {proposed_start}:{proposed_end} }}')\n        break\n    current_time += timedelta(minutes=30)  # Check every 30 minutes\n```",
            "count": "calendar_scheduling_example_54"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules\nkeith_busy_times = [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\ncynthia_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                      (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find free time\ndef find_free_time(start_time, end_time, busy_times, duration):\n    current_time = start_time\n\n    while current_time + duration <= end_time:\n        is_free = True\n        for busy_start, busy_end in busy_times:\n            if current_time < busy_end and current_time + duration > busy_start:\n                is_free = False\n                break\n\n        if is_free:\n            return current_time\n\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return None\n\n# Check for available time slots\nkeith_free_times = [(start_time, end_time)]\nfor busy_start, busy_end in keith_busy_times:\n    new_free_times = []\n    for free_start, free_end in keith_free_times:\n        if free_start < busy_start:\n            new_free_times.append((free_start, busy_start))\n        if free_end > busy_end:\n            new_free_times.append((busy_end, free_end))\n    keith_free_times = new_free_times\n\ncynthia_free_times = [(start_time, end_time)]\nfor busy_start, busy_end in cynthia_busy_times:\n    new_free_times = []\n    for free_start, free_end in cynthia_free_times:\n        if free_start < busy_start:\n            new_free_times.append((free_start, busy_start))\n        if free_end > busy_end:\n            new_free_times.append((busy_end, free_end))\n    cynthia_free_times = new_free_times\n\n# Find overlapping free time\nfor k_start, k_end in keith_free_times:\n    for c_start, c_end in cynthia_free_times:\n        start_overlap = max(k_start, c_start)\n        end_overlap = min(k_end, c_end)\n        if start_overlap + meeting_duration <= end_overlap:\n            proposed_time = start_overlap\n            print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_55"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for each participant\njeremy_busy = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\ndonna_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nrobert_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Function to check if a time slot is available for all participants\ndef is_slot_available(start, duration, busy_slots):\n    end = start + duration\n    for busy_start, busy_end in busy_slots:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Check for available slots within working hours\ncurrent_time = working_hours_start\nwhile current_time + meeting_duration <= working_hours_end:\n    if (is_slot_available(current_time, meeting_duration, jeremy_busy) and\n        is_slot_available(current_time, meeting_duration, donna_busy) and\n        is_slot_available(current_time, meeting_duration, robert_busy)):\n        # Format the output\n        start_time_str = current_time.strftime(\"%H:%M\")\n        end_time_str = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{start_time_str}:{end_time_str}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_56"
        },
        {
            "final_program_time": "{14:30:13:00}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules represented as (start_time, end_time)\nschedules = {\n    \"Virginia\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Charles\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Megan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time to current_time + meeting_duration is free for all participants\n        end_time = current_time + meeting_duration\n        is_free = True\n        \n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if current_time < end and end_time > start:  # overlap\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        # Charles' preference to avoid meetings before 14:30\n        if is_free and current_time < datetime.strptime(\"14:30\", \"%H:%M\"):\n            current_time = datetime.strptime(\"14:30\", \"%H:%M\")  # Skip to 14:30\n        \n        if is_free:\n            return (current_time, end_time)\n        \n        current_time += timedelta(minutes=1)  # Increment by 1 minute\n\n# Find the meeting time and format it\nmeeting_start, meeting_end = find_meeting_time(schedules, meeting_duration, work_start, work_end)\noutput = f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_57"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\njoan_schedule = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n\ntheresa_schedule = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nshirley_schedule = [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Generate busy times from schedules\nbusy_times = joan_schedule + theresa_schedule + shirley_schedule\n\n# Function to check if a time slot is free\ndef is_free(start, duration):\n    end = start + duration\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_free(current_time, meeting_duration):\n        proposed_time = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        print(f\"Proposed meeting time: {proposed_time}\")\n        break\n    current_time += timedelta(minutes=30)  # Check every 30 minutes\n```",
            "count": "calendar_scheduling_example_58"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "NameError",
            "full_response": "```python\n# Define the participants' schedules and preferences\nparticipants = {\n    \"Jeffrey\": {\n        \"available\": [(14, 0), (17, 0)],  # available from 14:00 to 17:00\n        \"preferred\": (14, 0)   # prefers to meet after 14:00\n    },\n    \"Jack\": {\n        \"busy\": [(10, 30), (11, 30), (13, 0), (13, 30), (14, 0), (14, 30), (16, 0), (17, 0)]\n    },\n    \"Judith\": {\n        \"busy\": [(9, 0), (10, 0), (10, 30), (11, 0), (11, 30), (14, 0), (14, 30), (15, 30), (17, 0)]\n    }\n}\n\ndef is_available(start_time, end_time, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Define busy times for Jack and Judith to verify availability\nbusy_times = []\nfor busy in participants[\"Jack\"].get(\"busy\", []):\n    busy_times.append((busy[0], busy[0] + 1))\nfor busy in participants[\"Judith\"].get(\"busy\", []):\n    busy_times.append((busy[0], busy[0] + 1))\n\n# We need a 30-minute meeting time\nmeeting_duration = 0.5  # in hours\n\ndef find_meeting_time():\n    for hour in range(9, 18):  # From 9:00 to 18:00\n        for minute in (0, 30):  # Check every half hour\n            start_time = (hour, minute)\n            end_time = (hour + (minute + 30) // 60, (minute + 30) % 60)  # Calculate end time\n            \n            # Check if Jeffrey prefers this time\n            if (hour < Jeffrey['preferred'][0]) or (hour == Jeffrey['preferred'][0] and minute < Jeffrey['preferred'][1]):\n                continue\n\n            # Check if the time is available for all participants\n            if (is_available(start_time, end_time, participants[\"Jack\"].get(\"busy\", [])) and\n                is_available(start_time, end_time, participants[\"Judith\"].get(\"busy\", []))):\n                return start_time, end_time\n\nproposed_time = find_meeting_time()\nif proposed_time:\n    start, end = proposed_time\n    print(f\"{start[0]:02}:{start[1]:02}:{end[0]:02}:{end[1]:02}\")\n```",
            "count": "calendar_scheduling_example_59"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, time, timedelta\n\ndef find_meeting_time(lisa_schedule, dorothy_schedule, raymond_schedule, meeting_duration, work_start, work_end):\n    work_start_time = datetime.combine(datetime.today(), work_start)\n    work_end_time = datetime.combine(datetime.today(), work_end)\n    current_time = work_start_time\n\n    while current_time + meeting_duration <= work_end_time:\n        meeting_possible = True\n\n        for busy_time in lisa_schedule:\n            if busy_time[0] < current_time + meeting_duration and busy_time[1] > current_time:\n                meeting_possible = False\n                break\n\n        if meeting_possible:\n            for busy_time in raymond_schedule:\n                if busy_time[0] < current_time + meeting_duration and busy_time[1] > current_time:\n                    meeting_possible = False\n                    break\n\n        if meeting_possible and current_time < datetime.combine(datetime.today(), time(10, 30)):\n            return current_time.strftime(\"%H:%M\") + \":15:30\"\n\n        if meeting_possible and current_time >= datetime.combine(datetime.today(), time(10, 30)) and current_time <= datetime.combine(datetime.today(), time(10, 30)):\n            return current_time.strftime(\"%H:%M\") + \":15:30\"\n        \n        current_time += timedelta(minutes=30)  # Check next half hour\n\n    return None\n\n# Participant schedules in (start_time, end_time) tuples\nlisa_schedule = [(time(10, 30), time(11, 0)), (time(11, 30), time(12, 0)), (time(14, 0), time(15, 0))]\ndorothy_schedule = []  # No busy times\nraymond_schedule = [(time(9, 0), time(10, 0)), (time(10, 30), time(11, 0)), (time(11, 30), time(15, 0)), (time(16, 0), time(17, 0))]\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\nsuggested_time = find_meeting_time(lisa_schedule, dorothy_schedule, raymond_schedule, meeting_duration, work_start, work_end)\nprint(suggested_time)\n```",
            "count": "calendar_scheduling_example_60"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define existing schedules\nbusy_schedule = {\n    \"Lisa\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Patrick\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is available\ndef is_slot_available(start_time, end_time):\n    for busy_times in busy_schedule.values():\n        for (busy_start, busy_end) in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        if is_slot_available(current_time, next_time):\n            return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Check the next minute\n    return None\n\n# Output proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_61"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable time for the meeting\ndef schedule_meeting(participants, duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    duration_timedelta = timedelta(hours=duration)\n\n    for time in range((end_time - start_time).seconds // 60):\n        proposed_time = start_time + timedelta(minutes=time)\n        if all(proposed_time + duration_timedelta <= datetime.strptime(\"14:00\", \"%H:%M\") or\n               proposed_time >= datetime.strptime(\"14:00\", \"%H:%M\") for participant in participants):\n            return f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + duration_timedelta).strftime('%H:%M')}\"\n\nparticipants = [\"Abigail\", \"Michael\", \"Sharon\"]\nduration = 1  # duration in hours\nmeeting_time = schedule_meeting(participants, duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_62"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participants' schedules as busy times (start, end)\nmadison_schedule = []  # Madison is free the entire day\njudith_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))\n]\nroger_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\n# Function to check if time slot is available\ndef is_time_available(start, end, schedules):\n    for busy_start, busy_end in schedules:\n        if (start < busy_end and end > busy_start):  # Overlap\n            return False\n    return True\n\n# Find a suitable time for a one-hour meeting\ndef find_meeting_time():\n    current_time = work_start\n    meeting_duration = timedelta(hours=1)\n\n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        if is_time_available(current_time, meeting_end, judith_schedule) and is_time_available(current_time, meeting_end, roger_schedule):\n            return f'{current_time.strftime(\"%H:%M\")}:{meeting_end.strftime(\"%H:%M\")}'\n        current_time += timedelta(minutes=30)  # Check next half hour\n        \n    return None\n\n# Get proposed time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_63"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules for participants\nnancy_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n\nnathan_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Function to check if a time slot is available\ndef is_time_slot_available(start_time, end_time, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\n# Attempt to find an available time slot for the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    meeting_end_time = current_time + meeting_duration\n    if is_time_slot_available(current_time, meeting_end_time, nancy_schedule) and \\\n       is_time_slot_available(current_time, meeting_end_time, nathan_schedule):\n        print(f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_64"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' busy schedules\njohn_busy = [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nandrea_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nlisa_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        meeting_end_time = current_time + meeting_duration\n        \n        # Check if the meeting time conflicts with any participant's busy schedule\n        is_conflict = False\n        for start, end in john_busy + andrea_busy + lisa_busy:\n            if current_time < end and meeting_end_time > start:\n                is_conflict = True\n                break\n        \n        # If no conflicts, return the proposed meeting time\n        if not is_conflict:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        # Move to the next time slot, increment by a minute \n        current_time += timedelta(minutes=1)\n        \n    return None\n\n# Calculate and output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_65"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participant schedules\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\n\nronald_schedule = [(working_hours_start, working_hours_end)]\nmaria_schedule = [(working_hours_start, working_hours_end)]\ncharles_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))\n]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a suitable meeting time\ndef find_meeting_time(ronald, maria, charles, duration):\n    free_slots = []\n    current_start = working_hours_start\n    \n    while current_start + duration <= working_hours_end:\n        current_end = current_start + duration\n        \n        # Check availability for all participants\n        is_free = True\n        \n        # Check Ronald's schedule\n        for busy_start, busy_end in ronald:\n            if current_start < busy_end and current_end > busy_start:\n                is_free = False\n                break\n                \n        # Check Maria's schedule\n        for busy_start, busy_end in maria:\n            if current_start < busy_end and current_end > busy_start:\n                is_free = False\n                break\n\n        # Check Charles's schedule\n        for busy_start, busy_end in charles:\n            if current_start < busy_end and current_end > busy_start:\n                is_free = False\n                break\n\n        if is_free:\n            free_slots.append((current_start, current_end))\n        \n        current_start += timedelta(minutes=1)\n    \n    if free_slots:\n        return free_slots[0]  # Return the first available slot\n\n# Find meeting time\nmeeting_time = find_meeting_time(ronald_schedule, maria_schedule, charles_schedule, meeting_duration)\n\n# Output in the requested format\noutput_time = f'{meeting_time[0].strftime(\"%H:%M\")}:{meeting_time[1].strftime(\"%H:%M\")}'\nprint(output_time)\n```",
            "count": "calendar_scheduling_example_66"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\ndef find_meeting_time():\n    # Participants' busy schedules\n    jacqueline_busy = [(13, 0, 13, 30), (16, 0, 16, 30)]\n    christian_busy = []  # Christian is free all day\n    linda_busy = [(9, 0, 10, 30), (11, 30, 12, 30), (14, 0, 14, 30), (15, 30, 16, 30)]\n    \n    # Convert busy times to a single list for easy checking\n    busy_times = jacqueline_busy + linda_busy\n\n    # Meeting duration\n    meeting_duration = 30  # in minutes\n    \n    # Work hours\n    work_start = (9, 0)\n    work_end = (17, 0)\n\n    # Find free time slots\n    free_times = []\n    \n    # Check for free slots between work hours\n    current_time = list(work_start)\n    \n    while tuple(current_time) < work_end:\n        next_time = list(current_time)\n        next_time[1] += meeting_duration\n        \n        # If minutes exceed 60, adjust hours and minutes\n        if next_time[1] >= 60:\n            next_time[0] += next_time[1] // 60\n            next_time[1] = next_time[1] % 60\n            \n        # Check if the current slot is free\n        is_busy = False\n        for busy_start, busy_start_min, busy_end, busy_end_min in busy_times:\n            if (current_time[0] < busy_end or (current_time[0] == busy_end and current_time[1] < busy_end_min)) and\n                (next_time[0] > busy_start or (next_time[0] == busy_start and next_time[1] > busy_start_min))):\n                continue\n            else:\n                is_busy = True\n                break\n        \n        if not is_busy:\n            free_times.append(tuple(current_time))\n        \n        # Increment time by 30 minutes\n        current_time[1] += 30\n        if current_time[1] >= 60:\n            current_time[0] += 1\n            current_time[1] = 0\n            \n    # Select the first available free time slot\n    if free_times:\n        meeting_time = free_times[0]\n        return f\"{meeting_time[0]:02}:{meeting_time[1]:02}:{meeting_time[0]:02}:{meeting_time[1]+30}\"\n    else:\n        return \"No available time slot.\"\n\n# Output the result\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_67"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules for each participant\nmichael_availability = [\n    (start_time, datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), end_time)\n]\n\nlauren_availability = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))\n]\n\n# Finds the first common time slot for the meeting\ndef find_meeting_time(duration_minutes):\n    meeting_duration = timedelta(minutes=duration_minutes)\n    \n    # Create a list of free time slots by intersecting the availability\n    free_slots = []\n    for start, end in michael_availability:\n        if start >= end_time:\n            break\n        for lauren_start, lauren_end in lauren_availability:\n            free_start = max(start, lauren_start)\n            free_end = min(end, lauren_end)\n            if free_start + meeting_duration <= free_end:\n                free_slots.append((free_start, free_end))\n    \n    # Get the earliest available meeting slot\n    for start, end in free_slots:\n        if start + meeting_duration <= end:\n            return start.strftime(\"%H:%M\"), (start + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Schedule the meeting for 30 minutes\nmeeting_time = find_meeting_time(30)\nif meeting_time:\n    print(f'{{{meeting_time[0]}:{meeting_time[1]}}}')\nelse:\n    print(\"No available time for the meeting.\")\n```",
            "count": "calendar_scheduling_example_68"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of available time slots\n    available_slots = []\n    current_time = work_start\n    \n    while current_time < work_end:\n        end_time = current_time + timedelta(hours=meeting_duration)\n        \n        # Check if the meeting can fit in the current slot for all participants\n        if end_time <= work_end:\n            can_schedule = True\n            for busy_times in schedules:\n                for busy_start, busy_end in busy_times:\n                    if current_time < busy_end and end_time > busy_start:\n                        can_schedule = False\n                        break\n                if not can_schedule:\n                    break\n            \n            if can_schedule:\n                available_slots.append((current_time, end_time))\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    \n    # Return the first available time slot found\n    if available_slots:\n        return available_slots[0]\n    return None\n\n# Schedules for Shirley, Stephen, and Paul\nschedules = [\n    [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n     \n    [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n     \n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n]\n\nmeeting_duration = 1  # 1 hour\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\nif meeting_time:\n    start_time_str = meeting_time[0].strftime(\"%H:%M\")\n    end_time_str = meeting_time[1].strftime(\"%H:%M\")\n    print(f\"{start_time_str}:{end_time_str}\")\n```",
            "count": "calendar_scheduling_example_69"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\ndenise_schedule = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nangela_schedule = []  # No meetings for Angela\n\nnatalie_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time\ndef find_meeting_time():\n    # Create a list of all busy slots from all participants\n    busy_slots = denise_schedule + natalie_schedule\n    busy_slots.sort()  # Sort by start time\n    \n    # Create a suitable time slot list, combining busy slots\n    slots = []\n    current_time = work_start\n    \n    # Check against busy slots\n    for busy_start, busy_end in busy_slots:\n        # If the current time is before the busy slot starts, we have a potential meeting slot\n        if current_time + meeting_duration <= busy_start:\n            slots.append((current_time, busy_start))\n        \n        # Move current time to the end of the current busy slot\n        if current_time < busy_end:\n            current_time = busy_end\n\n    # Check for the last available slot before work ends\n    if current_time + meeting_duration <= work_end:\n        slots.append((current_time, work_end))\n    \n    # Return the first available slot\n    if slots:\n        return f\"{slots[0][0].strftime('%H:%M')}:{(slots[0][0] + meeting_duration).strftime('%H:%M')}\"\n    \n    return None  # No available slot found\n\n# Get the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Nicole\": [(9, 0), (17, 0)],  # free the entire day\n    \"John\": [(9, 0), (12, 30), (13, 0), (16, 30), (17, 0)],  # busy at 12:30-13:00 and 16:30-17:00\n    \"Ethan\": [(9, 0), (10, 0), (11, 30), (14, 0), (17, 0)]  # busy at 9:00-10:00, 11:30-14:00, 14:30-17:00\n}\n\n# Define meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\njohn_pref_time = datetime.strptime(\"12:00\", \"%H:%M\")  # John prefers not to meet after 12:00\n\n# Function to check availability\ndef is_time_available(meeting_start, meeting_end):\n    for participant, times in schedules.items():\n        for i in range(0, len(times), 2):\n            busy_start = datetime.combine(work_start.date(), datetime(times[i][0], times[i][1]))\n            busy_end = datetime.combine(work_start.date(), datetime(times[i + 1][0], times[i + 1][1]))\n            if meeting_start < busy_end and meeting_end > busy_start:\n                return False\n    return True\n\n# Find suitable meeting time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    proposed_meeting_end = current_time + meeting_duration\n    if is_time_available(current_time, proposed_meeting_end):\n        # Ensure John preference is respected\n        if current_time > john_pref_time:\n            break\n        print(f\"{current_time.strftime('%H:%M')}:{proposed_meeting_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Increment by half an hour\n```",
            "count": "calendar_scheduling_example_71"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nduration = timedelta(hours=1)\n\n# Schedules in the form of (start_time, end_time)\nmason_schedule = []\namy_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nchristopher_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Function to check if a proposed time slot is free for all participants\ndef is_slot_available(start, end):\n    for start_block, end_block in amy_schedule:\n        if start < end_block and end > start_block:\n            return False\n    for start_block, end_block in christopher_schedule:\n        if start < end_block and end > start_block:\n            return False\n    return True\n\n# Check each time slot in the working hours\ncurrent_time = work_start\nwhile current_time + duration <= work_end:\n    end_time = current_time + duration\n    if is_slot_available(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_72"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nbradley_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nandrew_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nmelissa_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Function to find available time slot\ndef find_available_time_slots(busy_times, work_start, work_end, meeting_duration):\n    available_slots = []\n    current_time = work_start\n\n    for busy_start, busy_end in sorted(busy_times):\n        if current_time + meeting_duration <= busy_start:\n            available_slots.append((current_time, busy_start))\n        current_time = max(current_time, busy_end)\n\n    if current_time + meeting_duration <= work_end:\n        available_slots.append((current_time, work_end))\n\n    return available_slots\n\n# Get available slots for each participant\nbradley_slots = find_available_time_slots(bradley_busy, work_start, work_end, meeting_duration)\nandrew_slots = find_available_time_slots(andrew_busy, work_start, work_end, meeting_duration)\nmelissa_slots = find_available_time_slots(melissa_busy, work_start, work_end, meeting_duration)\n\n# Find common available time slots\ncommon_slots = []\nfor start_b in bradley_slots:\n    for start_a in andrew_slots:\n        for start_m in melissa_slots:\n            start_time = max(start_b[0], start_a[0], start_m[0])\n            end_time = start_time + meeting_duration\n            \n            if end_time <= min(start_b[1], start_a[1], start_m[1]):\n                common_slots.append((start_time, end_time))\n\n# Select the first common available slot\nif common_slots:\n    proposed_time = common_slots[0]\n    print(f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No available slots found\")\n```",
            "count": "calendar_scheduling_example_73"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if two time intervals overlap\ndef do_times_overlap(start1, end1, start2, end2):\n    return max(start1, start2) < min(end1, end2)\n\n# Function to find a suitable meeting time\ndef find_meeting_time(available_slots, meeting_duration):\n    for start_time, end_time in available_slots:\n        if (end_time - start_time) >= meeting_duration:\n            return (start_time, start_time + meeting_duration)\n    return None\n\n# Defining participants' schedules\neric_schedule = [(datetime(2023, 10, 23, 10, 0), datetime(2023, 10, 23, 12, 0))]\nalbert_schedule = [\n    (datetime(2023, 10, 23, 12, 0), datetime(2023, 10, 23, 12, 30)),\n    (datetime(2023, 10, 23, 15, 30), datetime(2023, 10, 23, 16, 0))\n]\nkatherine_schedule = [\n    (datetime(2023, 10, 23, 10, 0), datetime(2023, 10, 23, 11, 0)),\n    (datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 14, 0)),\n    (datetime(2023, 10, 23, 15, 0), datetime(2023, 10, 23, 15, 30))\n]\n\n# Combining schedules to find busy slots\nbusy_slots = []\nfor schedule in [eric_schedule, albert_schedule, katherine_schedule]:\n    busy_slots.extend(schedule)\n\n# Meeting duration of 1 hour\nmeeting_duration = timedelta(hours=1)\n\n# Setting the work hours for finding available slots\nwork_start = datetime(2023, 10, 23, 9, 0)\nwork_end = datetime(2023, 10, 23, 17, 0)\n\n# Finding available time slots\navailable_slots = []\nif busy_slots:\n    # Sort busy slots\n    busy_slots.sort(key=lambda x: x[0])\n\n    # Check available slots between busy times\n    last_end = work_start\n    for start, end in busy_slots:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    # Check if there's time after the last busy slot\n    if last_end < work_end:\n        available_slots.append((last_end, work_end))\nelse:\n    available_slots.append((work_start, work_end))\n\n# Find a suitable meeting time\nproposed_time = find_meeting_time(available_slots, meeting_duration)\n\n# Output the proposed time\nif proposed_time:\n    proposed_start, proposed_end = proposed_time\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\nelse:\n    print(\"No available time found\")\n```",
            "count": "calendar_scheduling_example_74"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the schedules for each participant\njacob_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\namanda_busy_times = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))]\n\nlisa_busy_times = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Function to check if a time slot is free for everyone\ndef is_slot_free(start_time, end_time):\n    for busy_time in jacob_busy_times + amanda_busy_times + lisa_busy_times:\n        if not (end_time <= busy_time[0] or start_time >= busy_time[1]):\n            return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_slot_free(current_time, current_time + meeting_duration):\n        print(f'{current_time.strftime(\"%H:%M\")}:{(current_time + meeting_duration).strftime(\"%H:%M\")}')\n        break\n    current_time += timedelta(minutes=30)  # Check every 30 minutes\n```",
            "count": "calendar_scheduling_example_75"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(joyce_schedule, beverly_schedule, peter_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    all_schedules = [\n        (joyce_schedule, 'Joyce'), \n        (beverly_schedule, 'Beverly'), \n        (peter_schedule, 'Peter')\n    ]\n\n    # Prepare all busy slots for each participant\n    busy_slots = []\n    for schedule, name in all_schedules:\n        for start, end in schedule:\n            busy_slots.append((start, end))\n\n    # Add work hours as busy slots\n    busy_slots.append((work_start, work_end))\n\n    # Sort busy slots\n    busy_slots.sort()\n\n    # Find available time slots\n    available_slots = []\n    last_end = work_start\n\n    for start, end in busy_slots:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    # Check for meeting duration\n    for start, end in available_slots:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = meeting_start + meeting_duration\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n    return None\n\njoyce_schedule = []\nbeverly_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\npeter_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nmeeting_duration = timedelta(hours=1)\n\nproposed_time = find_meeting_time(joyce_schedule, beverly_schedule, peter_schedule, meeting_duration)\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_76"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' blocked schedules\ndonald_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\njoyce_schedule = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\nabigail_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create a list of all busy times\nall_busy_times = donald_schedule + joyce_schedule + abigail_schedule\n\n# Check possible time slots\ndef find_meeting_time():\n    # Start searching from the beginning of work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is busy\n        is_busy = any(start < current_time + meeting_duration and current_time < end for start, end in all_busy_times)\n        # Check Donald's preference\n        if is_busy or current_time >= donald_schedule[-1][0]:  # After last blocked time for Donald\n            current_time += timedelta(minutes=30)\n            continue\n        \n        # If found suitable time\n        return (current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"))\n    \n    return None\n\n# Finding the time and print the result\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```",
            "count": "calendar_scheduling_example_77"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules (busy times)\nronald_schedule = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n                   (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0))]\nteresa_schedule = [(datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n                   (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30))]\ncarol_schedule = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 12, 30)),\n                  (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 30)),\n                  (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 17, 0))]\n\n# Meeting details\nmeeting_duration = timedelta(hours=1)\nworking_hours_start = datetime(2023, 10, 2, 9, 0)\nworking_hours_end = datetime(2023, 10, 2, 17, 0)\n\n# Function to find a free time slot\ndef find_free_time(ronald_schedule, teresa_schedule, carol_schedule, meeting_duration):\n    busy_times = ronald_schedule + teresa_schedule + carol_schedule\n    busy_times.sort()\n    \n    # Check for free time between working hours\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        is_busy = False\n        for start, end in busy_times:\n            if current_time < end and current_time + meeting_duration > start:\n                is_busy = True\n                break\n        if not is_busy:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Move to the next potential meeting time\n    return None\n\n# Find the meeting time\nmeeting_time = find_free_time(ronald_schedule, teresa_schedule, carol_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_78"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(amy_schedule, emma_schedule, john_schedule, duration, work_start, work_end):\n    # Convert times to datetime objects for easier comparison\n    work_start = datetime.strptime(work_start, '%H:%M')\n    work_end = datetime.strptime(work_end, '%H:%M')\n    \n    # Create a list of all busy times for each participant\n    busy_times = amy_schedule + emma_schedule + john_schedule\n    busy_times.sort()\n\n    # Track current time to check for available slots\n    current_time = work_start\n    \n    while current_time + duration <= work_end:\n        # Check if current_time is within any busy times\n        is_busy = any(busy_start <= current_time < busy_end for busy_start, busy_end in busy_times)\n        \n        if is_busy:\n            # Move to the end of the busy time\n            current_time = max(busy_end for busy_start, busy_end in busy_times if busy_start <= current_time)  \n        else:\n            # If free, check if the duration also fits\n            if all(not (busy_start < current_time + duration <= busy_end) for busy_start, busy_end in busy_times):\n                return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n            current_time += timedelta(minutes=30)  # increment in chunks of 30 minutes\n\n    return None\n\n# Existing schedules\namy_schedule = [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M'))]\nemma_schedule = []  # No meetings\njohn_schedule = [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\nduration = timedelta(hours=1)  # Meeting duration of 1 hour\nwork_start = '09:00'\nwork_end = '17:00'\n\ntime_slot = find_meeting_time(amy_schedule, emma_schedule, john_schedule, duration, work_start, work_end)\nif time_slot:\n    print(f\"{time_slot[0]}:{time_slot[1]}\")\nelse:\n    print(\"No available time found\")\n```",
            "count": "calendar_scheduling_example_79"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' busy schedules\nschedule = {\n    \"Michelle\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Billy\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Alexis\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Define Alexis's preference\nalexis_preference_end = datetime.strptime(\"15:00\", \"%H:%M\")\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for participant, busy_times in schedule.items():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\n# Try to schedule the meeting\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        if is_time_slot_free(meeting_start, meeting_end):\n            if meeting_end <= alexis_preference_end:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n    return None\n\n# Get the proposed meeting time\nmeeting_slot = find_meeting_time()\nprint(meeting_slot)\n```",
            "count": "calendar_scheduling_example_80"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(schedules, duration):\n    work_start = 9 * 60  # 9:00 AM in minutes\n    work_end = 17 * 60    # 5:00 PM in minutes\n    \n    # Convert schedules to busy times in minutes\n    busy_times = []\n    for schedule in schedules:\n        for start, end in schedule:\n            busy_times.append((start, end))\n    \n    # We need to sort the busy times\n    busy_times.sort()\n    \n    # Initialize the available start time\n    available_start = work_start\n    \n    for start, end in busy_times:\n        # Check if there is enough time for the meeting before the next busy period\n        if available_start + duration <= start:\n            return f\"{available_start // 60:02}:{available_start % 60:02}:{(available_start + duration) // 60:02}:{(available_start + duration) % 60:02}\"\n        # Update the available start time after the busy period\n        available_start = max(available_start, end)\n    \n    # Check if there is time after the last busy period until the end of the work day\n    if available_start + duration <= work_end:\n        return f\"{available_start // 60:02}:{available_start % 60:02}:{(available_start + duration) // 60:02}:{(available_start + duration) % 60:02}\"\n    \n    return None\n\n# Participants' schedules in minutes (start, end)\njeremy_schedule = [(870, 930)]  # 14:30 to 15:30 -> 870 to 930\nlawrence_schedule = [(930, 960), (990, 1020)]  # 15:30 to 16:00, 16:30 to 17:00 -> 930 to 960, 990 to 1020\nhelen_schedule = [(570, 600), (630, 660), (690, 720), (780, 840), (900, 930), (960, 1020)]  # various blocks\n\nschedules = [jeremy_schedule, lawrence_schedule, helen_schedule]\nduration = 60  # meeting duration in minutes\n\n# Finding a suitable meeting time\nmeeting_time = find_meeting_time(schedules, duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_81"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules defined as (start_time, end_time) tuples\nmichael_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\narthur_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Eric's calendar is wide open\neric_schedule = []\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(michael_schedule, arthur_schedule, eric_schedule, working_start, working_end, meeting_duration):\n    busy_times = michael_schedule + arthur_schedule\n    busy_times.sort()  # Sort the busy times\n\n    current_time = working_start\n    \n    while current_time + meeting_duration <= working_end:\n        # Check if the current_time is not falling into busy schedules\n        is_busy = False\n        for start, end in busy_times:\n            if start <= current_time < end or start < current_time + meeting_duration <= end:\n                is_busy = True\n                break\n        \n        if not is_busy:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=1)\n\n# Find a suitable time\nmeeting_time = find_meeting_time(michael_schedule, arthur_schedule, eric_schedule, working_start, working_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(schedule, meeting_duration):\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    busy_times = []\n\n    # Create a list of busy times in minutes\n    for participant in schedule:\n        for busy_time in schedule[participant]:\n            busy_times.append(busy_time)\n\n    # Sort busy times by start time\n    busy_times.sort()\n\n    # Initialize the start of the first possible meeting time\n    last_busy_end = work_start\n\n    for start, end in busy_times:\n        # Check for available time before the next busy period\n        if last_busy_end + meeting_duration <= start:\n            meeting_start = last_busy_end\n            meeting_end = last_busy_end + meeting_duration\n            if meeting_end <= work_end:\n                return f\"{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}\"\n\n        # Update the end of the last busy period\n        last_busy_end = max(last_busy_end, end)\n\n    # Check for a possible meeting at the end of the day\n    if last_busy_end + meeting_duration <= work_end:\n        meeting_start = last_busy_end\n        meeting_end = last_busy_end + meeting_duration\n        return f\"{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}\"\n\n# Existing schedules for each participant\nschedules = {\n    \"Anthony\": [(14 * 60, 14 * 60 + 30), (15 * 60, 15 * 60 + 30)],\n    \"Ronald\": [(9 * 60, 10 * 60), (12 * 60, 12 * 60 + 30), (13 * 60 + 30, 14 * 60)],\n    \"Jonathan\": [(9 * 60, 10 * 60), (11 * 60, 11 * 60 + 30), (12 * 60, 13 * 60), \n                 (14 * 60, 14 * 60 + 30), (15 * 60, 17 * 60)],\n}\n\n# Meeting duration in minutes\nmeeting_duration = 60\n\n# Find a suitable time for the meeting\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_83"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules (busy times)\nkevin_schedule = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                  (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n\nryan_schedule = [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                 (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'))]\n\neugene_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                   (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                   (datetime.strptime('12:30', '%H:%M'), end_time)]\n\n# Combine schedules and create a list of all busy times\nall_busy_times = kevin_schedule + ryan_schedule + eugene_schedule\n\n# Function to find available slot\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        if all(not (current_time < busy_end and meeting_end_time > busy_start) for busy_start, busy_end in all_busy_times):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)\n    return None\n\n# Find and print meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_84"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if a time slot is available for all participants\ndef is_time_slot_available(start_time, end_time, schedules):\n    for schedule in schedules:\n        for busy_start, busy_end in schedule:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Define the schedules for each participant\nkelly_schedule = []  # Kelly is free all day\njulia_schedule = [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n                  (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30)),\n                  (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30)),\n                  (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))]\nmartha_schedule = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 0)),\n                   (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 15, 0))]\n\n# Combine schedules for checking availability\nschedules = [kelly_schedule, julia_schedule, martha_schedule]\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_start_time = datetime(2023, 10, 2, 9, 0)\nwork_end_time = datetime(2023, 10, 2, 17, 0)\n\n# Find a suitable time for the meeting\ncurrent_time = work_start_time\nwhile current_time + meeting_duration <= work_end_time:\n    proposed_end_time = current_time + meeting_duration\n    if is_time_slot_available(current_time, proposed_end_time, schedules) and current_time <= datetime(2023, 10, 2, 13, 30):\n        print(f\"{current_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_85"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nsamuel_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                   (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                   (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                   (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                   (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n\nemma_schedule = []  # Emma is free all day\n\nbrittany_schedule = [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                     (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                     (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a common free time\ndef find_meeting_time(schedules, start_time, end_time, duration):\n    free_times = []\n    \n    # Create a sorted list of all busy intervals\n    busy_intervals = []\n    for schedule in schedules:\n        busy_intervals.extend(schedule)\n    \n    busy_intervals.sort()\n\n    # Check for free slots in the entire time range\n    last_end = start_time\n    \n    for start, end in busy_intervals:\n        if last_end + duration <= start:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    if last_end + duration <= end_time:\n        free_times.append((last_end, end_time))\n    \n    return free_times\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Find meeting time\nall_schedules = [samuel_schedule, emma_schedule, brittany_schedule]\navailable_times = find_meeting_time(all_schedules, work_start, work_end, meeting_duration)\n\n# Output the first available time slot\nif available_times:\n    meeting_time_start = available_times[0][0]\n    meeting_time_end = meeting_time_start + meeting_duration\n    print(f\"{{{meeting_time_start.strftime('%H:%M')}:{meeting_time_end.strftime('%H:%M')}}}\")\n```",
            "count": "calendar_scheduling_example_86"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy time slots on Monday\nbrittany_busy = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nwayne_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ncharles_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# All busy times combined\nall_busy = brittany_busy + wayne_busy + charles_busy\n\n# Find available slot\ndef find_meeting_time():\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < busy_end and end_time > busy_start) for busy_start, busy_end in all_busy):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Check the next minute\n\nresult = find_meeting_time()\nprint(result)\n```",
            "count": "calendar_scheduling_example_87"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the existing schedules for each participant\ndennis_schedule = []  # No meetings\njoseph_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n]\nisabella_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if a time slot is available\ndef is_time_slot_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Find a suitable time slot for the meeting\ncurrent_time = start_time\n\nwhile current_time + meeting_duration <= end_time:\n    meeting_end_time = current_time + meeting_duration\n    if is_time_slot_available(current_time, meeting_end_time, joseph_schedule) and \\\n       is_time_slot_available(current_time, meeting_end_time, isabella_schedule):\n        print(f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Increment by 30 minutes to find next slot\n```",
            "count": "calendar_scheduling_example_88"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules (blocked times)\nmichelle_schedule = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nandrea_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\ndouglas_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Generate free time intervals\ndef get_free_times(schedule):\n    free_times = []\n    current_start = work_start\n    \n    for (start, end) in schedule:\n        if current_start < start:\n            free_times.append((current_start, start))\n        current_start = end\n        \n    if current_start < work_end:\n        free_times.append((current_start, work_end))\n    \n    return free_times\n\n# Combine the free times of all participants\nall_free_times = get_free_times(michelle_schedule) + get_free_times(andrea_schedule) + get_free_times(douglas_schedule)\n\n# Find a common free interval of at least 1 hour\ndef find_meeting_time(free_times, duration):\n    for start, end in free_times:\n        if (end - start) >= duration:\n            return start\n    return None\n\ndef is_time_available(time_to_check, schedules):\n    for schedule in schedules:\n        for start, end in schedule:\n            if start <= time_to_check < end or (start < time_to_check + meeting_duration <= end):\n                return False\n    return True\n\n# Find suitable time\nmeeting_time = find_meeting_time(all_free_times, meeting_duration)\n\n# Check if the meeting_time is available for all participants\nif meeting_time and is_time_available(meeting_time, [michelle_schedule, andrea_schedule, douglas_schedule]):\n    meeting_end = meeting_time + meeting_duration\n    print(f\"{meeting_time.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_89"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participant_schedules, meeting_duration, work_start, work_end):\n    # Create a schedule for the entire day\n    day_schedule = [(work_start, work_end)]\n    \n    # Subtract busy times from the day's schedule\n    for busy_time in participant_schedules:\n        new_schedule = []\n        for start, end in day_schedule:\n            if busy_time[0] > end or busy_time[1] < start:\n                # No overlap\n                new_schedule.append((start, end))\n            else:\n                # There is overlap, adjust the available time slots\n                if start < busy_time[0]:\n                    new_schedule.append((start, busy_time[0]))\n                if end > busy_time[1]:\n                    new_schedule.append((busy_time[1], end))\n        day_schedule = new_schedule\n\n    # Find a suitable time slot for the meeting\n    for start, end in day_schedule:\n        meeting_end = start + timedelta(minutes=meeting_duration)\n        if meeting_end <= end:\n            return start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\n# Existing schedules\nadam_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nwillie_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\ngloria_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Combine all schedules\ncombined_schedules = adam_schedule + willie_schedule + gloria_schedule\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Schedule the meeting\navailable_time = schedule_meeting(combined_schedules, meeting_duration, work_start, work_end)\n\nif available_time:\n    print(f\"{{{available_time[0]}:{available_time[1]}}}\")\n```",
            "count": "calendar_scheduling_example_90"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Generate free time slots for each participant\n    def get_free_slots(schedule):\n        free_slots = []\n        current_time = work_start\n        \n        for start, end in schedule:\n            if current_time < start:\n                free_slots.append((current_time, start))\n            current_time = max(current_time, end)\n        \n        if current_time < work_end:\n            free_slots.append((current_time, work_end))\n        \n        return free_slots\n    \n    danielle_free = get_free_slots(danielle_schedule)\n    bruce_free = get_free_slots(bruce_schedule)\n    eric_free = get_free_slots(eric_schedule)\n\n    # Find overlapping free slots\n    potential_slots = []\n    for d_start, d_end in danielle_free:\n        for b_start, b_end in bruce_free:\n            for e_start, e_end in eric_free:\n                start_time = max(d_start, b_start, e_start)\n                end_time = start_time + timedelta(hours=meeting_duration)\n\n                if end_time <= min(d_end, b_end, e_end):\n                    potential_slots.append((start_time, end_time))\n    \n    if potential_slots:\n        # Returning the first available slot\n        return potential_slots[0]\n    return None\n\n# Existing schedules\ndanielle_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nbruce_schedule = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\neric_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\n# Meeting duration in hours\nmeeting_duration = 1\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, meeting_duration)\n\nif meeting_time:\n    print(f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No suitable meeting time found.\")\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules for each participant (start_time, end_time)\njacqueline_schedule = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                       (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\nhenry_schedule = []\n\nwilliam_schedule = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    busy_times = []\n    \n    # Combine all busy times from participants\n    busy_times.extend(jacqueline_schedule)\n    busy_times.extend(william_schedule)\n    \n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Check for free slots\n    last_end_time = work_start\n    \n    for start, end in busy_times:\n        # If there's a gap between last_end_time and current start.time\n        if last_end_time + meeting_duration <= start:\n            return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Update the last_end_time if the current meeting ends later\n        last_end_time = max(last_end_time, end)\n\n    # Check for time after the last busy schedule\n    if last_end_time + meeting_duration <= work_end:\n        return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_92"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule constraints for each participant\naustin_busy = [(datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n                (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0))]\n\ndanielle_busy = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n                  (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n                  (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n                  (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0))]\n\ncharles_busy = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 30)),\n                 (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n                 (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 17, 0))]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable meeting time\ndef find_meeting_time(austin_busy, danielle_busy, charles_busy, meeting_duration):\n    work_start = datetime(2023, 10, 2, 9, 0)\n    work_end = datetime(2023, 10, 2, 17, 0)\n\n    # Create a list of all busy times\n    busy_times = austin_busy + danielle_busy + charles_busy\n\n    # Check potential meeting times in 30-minute intervals\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (start < end_time and current_time < finish) for start, finish in busy_times):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n# Output the proposed meeting time\nmeeting_time = find_meeting_time(austin_busy, danielle_busy, charles_busy, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_93"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(nicholas_schedule, elizabeth_schedule, sandra_schedule, meeting_duration):\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Mark existing meetings in a timeline\n    timeline = []\n    for start, end in nicholas_schedule:\n        timeline.append((start, end, 'Nicholas'))\n    for start, end in elizabeth_schedule:\n        timeline.append((start, end, 'Elizabeth'))\n    for start, end in sandra_schedule:\n        timeline.append((start, end, 'Sandra'))\n    \n    # Sort the timeline by start time\n    timeline.sort()\n\n    # Check for available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        slot_available = True\n        slot_end = current_time + meeting_duration\n        \n        for start, end, participant in timeline:\n            if not (slot_end <= start or current_time >= end):\n                slot_available = False\n                break\n        \n        if slot_available:\n            return current_time.strftime(\"%H:%M\"), slot_end.strftime(\"%H:%M\")\n\n        current_time += timedelta(minutes=30)  # Increment search time\n\n    return None\n\n# Schedule for each participant\nnicholas_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nelizabeth_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\nsandra_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find available time\nmeeting_time = find_meeting_time(nicholas_schedule, elizabeth_schedule, sandra_schedule, meeting_duration)\nif meeting_time:\n    print(f\"{{{{{meeting_time[0]}:{meeting_time[1]}}}}}\")\n```",
            "count": "calendar_scheduling_example_94"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and existing schedules for each participant\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define meetings schedule for each participant\njennifer_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\ngary_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nfrances_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Generate all potential meeting slots within work hours\ndef get_time_slots():\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        yield current_time\n        current_time += timedelta(minutes=30)\n\n# Check if the time slot is free for all participants\ndef is_time_slot_free(slot):\n    meeting_end = slot + meeting_duration\n    for busy_schedule in [jennifer_schedule, gary_schedule, frances_schedule]:\n        for start, end in busy_schedule:\n            if not (meeting_end <= start or slot >= end):\n                return False\n    return True\n\n# Find a suitable time slot that meets all participants' conditions\nfor slot in get_time_slots():\n    if slot >= datetime.strptime(\"12:30\", \"%H:%M\") and is_time_slot_free(slot):\n        start_time = slot.strftime(\"%H:%M\")\n        end_time = (slot + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{start_time}:{end_time}\")\n        break\n```",
            "count": "calendar_scheduling_example_95"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "AttributeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedule, duration, work_start, work_end):\n    work_start_time = datetime.strptime(work_start, \"%H:%M\")\n    work_end_time = datetime.strptime(work_end, \"%H:%M\")\n    \n    current_time = work_start_time\n    \n    while current_time + duration <= work_end_time:\n        meeting_time = current_time.time()\n        conflict = False\n        \n        for person, busy_times in schedule.items():\n            for busy_start, busy_end in busy_times:\n                if meeting_time >= busy_start and meeting_time < busy_end:\n                    conflict = True\n                    break\n                if meeting_time + duration.time() > busy_start and meeting_time < busy_end:\n                    conflict = True\n                    break\n            \n            if conflict:\n                break\n        \n        if not conflict:\n            return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + duration).strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Participants' schedules\nschedules = {\n    \"Christopher\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"10:00\", \"%H:%M\").time()),\n                    (datetime.strptime(\"10:30\", \"%H:%M\").time(), datetime.strptime(\"11:00\", \"%H:%M\").time()),\n                    (datetime.strptime(\"11:30\", \"%H:%M\").time(), datetime.strptime(\"13:00\", \"%H:%M\").time()),\n                    (datetime.strptime(\"15:00\", \"%H:%M\").time(), datetime.strptime(\"15:30\", \"%H:%M\").time())],\n    \"Robert\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"10:00\", \"%H:%M\").time()),\n               (datetime.strptime(\"11:00\", \"%H:%M\").time(), datetime.strptime(\"11:30\", \"%H:%M\").time()),\n               (datetime.strptime(\"12:00\", \"%H:%M\").time(), datetime.strptime(\"12:30\", \"%H:%M\").time()),\n               (datetime.strptime(\"13:30\", \"%H:%M\").time(), datetime.strptime(\"14:30\", \"%H:%M\").time()),\n               (datetime.strptime(\"15:00\", \"%H:%M\").time(), datetime.strptime(\"15:30\", \"%H:%M\").time())],\n    \"Wayne\": [(datetime.strptime(\"10:00\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nstart_time = \"09:00\"\nend_time = \"17:00\"\n\n# Find suitable meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, start_time, end_time)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_96"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Defined schedules\njoseph_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nkyle_busy = [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))]\n\njoan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Function to check if the meeting can be scheduled\ndef is_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find an available time slot for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time <= work_end - meeting_duration:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check the availability for all participants\n        if (is_available(meeting_start, meeting_end, joseph_busy) and\n            is_available(meeting_start, meeting_end, kyle_busy) and\n            is_available(meeting_start, meeting_end, joan_busy) and\n            current_time >= datetime.strptime(\"14:30\", \"%H:%M\")):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Check the next half hour\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_97"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\njuan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nmarilyn_busy = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n\nronald_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Merge all busy schedules\nbusy_times = juan_busy + marilyn_busy + ronald_busy\n\n# Create a list of free time slots\nfree_time_slots = []\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    # Check if current_time conflicts with any busy schedules\n    conflict = False\n    for start, end in busy_times:\n        if start <= current_time < end or start < current_time + meeting_duration <= end:\n            conflict = True\n            break\n    if not conflict:\n        free_time_slots.append(current_time)\n    current_time += timedelta(minutes=1)\n\n# Select the first available time slot\nif free_time_slots:\n    proposed_time = free_time_slots[0]\n    start_time_str = proposed_time.strftime(\"%H:%M\")\n    end_time_str = (proposed_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{start_time_str}:{end_time_str}\")\n```\n",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": "{15:00:16:00}",
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Working hours\n    working_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    working_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=1)\n\n    # Existing schedules\n    stephanie_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))]\n    scott_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n    # Mark prefers meetings after 15:00\n    mark_preferred_start = datetime.strptime(\"15:00\", \"%H:%M\")\n\n    # Potential meeting slots\n    slots = []\n    current_time = working_hours_start\n\n    while current_time + meeting_duration <= working_hours_end:\n        # Check if current_time and current_time + meeting_duration are free for all\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        if meeting_end > working_hours_end:\n            break\n\n        # Check if the time slot conflicts with Stephanie's schedule\n        is_free = True\n        for start, end in stephanie_busy_times:\n            if (meeting_start < end) and (meeting_end > start):\n                is_free = False\n                break\n\n        # Check if the time slot conflicts with Scott's schedule\n        if is_free:\n            for start, end in scott_busy_times:\n                if (meeting_start < end) and (meeting_end > start):\n                    is_free = False\n                    break\n\n        # Mark's preference for starting after 15:00\n        if is_free and meeting_start >= mark_preferred_start:\n            slots.append((meeting_start, meeting_end))\n\n        current_time += timedelta(minutes=10)  # Check next slot in 10-minute intervals\n\n    # Select the first valid slot\n    if slots:\n        meeting_start, meeting_end = slots[0]\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    else:\n        return \"No available meeting slots found.\"\n\n# Print the scheduled meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_99"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and participants schedules\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participant schedules in terms of (start_time, end_time) tuples\nhenry_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nchristian_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find a suitable meeting time\ndef find_meeting_time(working_start, working_end, meeting_duration, henry_schedule, christian_schedule):\n    current_time = working_start\n\n    while current_time + meeting_duration <= working_end:\n        meeting_end_time = current_time + meeting_duration\n        \n        # Check if time overlaps with Henry's schedule\n        henry_busy = any(start < meeting_end_time and end > current_time for start, end in henry_schedule)\n        # Check if time overlaps with Christian's schedule\n        christian_busy = any(start < meeting_end_time and end > current_time for start, end in christian_schedule)\n\n        if not henry_busy and not christian_busy:\n            return current_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Increment time by 30 minutes to find next slot\n\n    return None  # In case no slot is found, but per task this shouldn't happen\n\n# Invoke the function\nmeeting_time = find_meeting_time(working_start, working_end, meeting_duration, henry_schedule, christian_schedule)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_100"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time for given participants\ndef find_meeting_time(participants, duration):\n    # Meeting duration in minutes\n    meeting_duration = timedelta(minutes=duration)\n    \n    # Work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of busy intervals\n    busy_intervals = []\n    for schedule in participants:\n        for start, end in schedule:\n            busy_intervals.append((start, end))\n\n    # Check available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        \n        # Check if the current_time to next_time overlaps with any busy interval\n        if not any(start < next_time and end > current_time for start, end in busy_intervals):\n            return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n        \n        # Move to the next minute\n        current_time += timedelta(minutes=1)\n\n    return \"No available time.\"\n\n# Participants' schedules as list of tuples with busy intervals\nmadison_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nlinda_schedule = []\n\nlogan_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nvirginia_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combining all schedules\nall_schedules = [madison_schedule, linda_schedule, logan_schedule, virginia_schedule]\n\n# Find suitable meeting time for 30 minutes\nmeeting_time = find_meeting_time(all_schedules, 30)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_101"
        },
        {
            "final_program_time": "{11:00:0:12}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Function to convert time in HH:MM format to minutes\ndef time_to_minutes(t):\n    return t.hour * 60 + t.minute\n\n# Function to convert minutes to time in HH:MM format\ndef minutes_to_time(m):\n    return time(m // 60, m % 60)\n\n# Define the working hours\nwork_start = time(9, 0)\nwork_end = time(17, 0)\nmeeting_duration = 60  # 1 hour in minutes\n\n# Existing schedules\ndylan_schedule = [(time(14, 0), time(15, 0))]\nkathryn_schedule = [(time(9, 0), time(9, 30)), (time(10, 0), time(10, 30))]\nhannah_schedule = [(time(9, 0), time(10, 30)), (time(12, 30), time(15, 30)), (time(16, 0), time(16, 30))]\nanna_schedule = [(time(9, 0), time(11, 0)), (time(12, 0), time(14, 0)), (time(14, 30), time(15, 0)), (time(16, 0), time(16, 30))]\n\n# Helper function to get all busy times\ndef get_busy_times(schedules):\n    busy_times = []\n    for schedule in schedules:\n        for start, end in schedule:\n            busy_times.append((time_to_minutes(start), time_to_minutes(end)))\n    return busy_times\n\n# Get busy times for each participant\nbusy_times = get_busy_times([dylan_schedule, kathryn_schedule, hannah_schedule, anna_schedule])\n\n# Function to check if a proposed time slot is free\ndef is_time_free(start_minutes, end_minutes, busy_times):\n    for busy_start, busy_end in busy_times:\n        if not (end_minutes <= busy_start or start_minutes >= busy_end):\n            return False\n    return True\n\n# Try to schedule the meeting\nfor start in range(time_to_minutes(work_start), time_to_minutes(work_end) - meeting_duration + 1):\n    end = start + meeting_duration\n    if is_time_free(start, end, busy_times):\n        start_time = minutes_to_time(start)\n        end_time = minutes_to_time(end)\n        print(f\"{start_time}:{end_time}\")\n        break\n```",
            "count": "calendar_scheduling_example_102"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules for each participant\nschedules = {\n    \"Diane\": [(datetime(2023, 10, 16, 9, 30), datetime(2023, 10, 16, 10, 0)),\n              (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0))],\n    \"Jack\": [(datetime(2023, 10, 16, 13, 30), datetime(2023, 10, 16, 14, 0)),\n             (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0))],\n    \"Eugene\": [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 10, 0)),\n               (datetime(2023, 10, 16, 10, 30), datetime(2023, 10, 16, 11, 30)),\n               (datetime(2023, 10, 16, 12, 0), datetime(2023, 10, 16, 14, 30)),\n               (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 16, 30))],\n    \"Patricia\": [(datetime(2023, 10, 16, 9, 30), datetime(2023, 10, 16, 10, 30)),\n                 (datetime(2023, 10, 16, 11, 0), datetime(2023, 10, 16, 12, 0)),\n                 (datetime(2023, 10, 16, 12, 30), datetime(2023, 10, 16, 14, 0)),\n                 (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 16, 30))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available time slot\ndef find_available_slot(schedules, work_start, work_end, duration):\n    # Convert work hours to datetime objects\n    work_start = datetime(2023, 10, 16, work_start.hour, work_start.minute)\n    work_end = datetime(2023, 10, 16, work_end.hour, work_end.minute)\n    \n    # Create list of all blocked times\n    blocked_times = []\n    for busy_schedule in schedules.values():\n        blocked_times.extend(busy_schedule)\n    \n    # Generate free time slots from work start to end\n    free_slots = []\n    current_time = work_start\n    \n    while current_time + duration <= work_end:\n        # Check if current_time is blocked\n        is_blocked = any(start <= current_time < end for start, end in blocked_times)\n        \n        if not is_blocked:\n            free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=1)\n\n    # Return the first available slot\n    if free_slots:\n        return free_slots[0]\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find available time\navailable_time = find_available_slot(schedules, work_start, work_end, meeting_duration)\n\n# Output the proposed meeting time\nmeeting_start = available_time\nmeeting_end = available_time + meeting_duration\noutput = f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_103"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define working hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Define participants' blocked times (start, end)\n    schedules = {\n        \"Karen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Brandon\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Donald\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Kelly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n    }\n\n    # Collect all busy time intervals\n    busy_times = []\n    for blocks in schedules.values():\n        busy_times.extend(blocks)\n\n    # Adding the bounds of the working hours to check for available time\n    busy_times.append((work_start, work_end))\n\n    # Sorting the busy times\n    busy_times.sort()\n\n    # Finding free time slots\n    last_end = work_start\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n\n    return \"No available time found\"\n\n# Proposed time for the meeting\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_104"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Work hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant (busy time slots)\nschedules = {\n    \"Jason\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"William\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Frances\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Rachel\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        # Check for conflicts in all schedules\n        meeting_end_time = current_time + meeting_duration\n        conflicts = False\n        \n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if (current_time < busy_end) and (meeting_end_time > busy_start):\n                    conflicts = True\n                    break\n            if conflicts:\n                break\n        \n        if not conflicts:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Check next minute\n    \n    return None\n\n# Output proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_105"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time range and participants' schedules\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Participants' blocked times\nolivia_schedule = [(datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                   (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                   (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\nvirginia_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                     (datetime.strptime('11:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                     (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\npaul_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                 (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Function to check if two time slots overlap\ndef is_overlapping(start1, end1, start2, end2):\n    return start1 < end2 and start2 < end1\n\n# Function to create a free time list from the blocked schedules\ndef get_free_times(schedule):\n    free_times = []\n    current_time = work_start\n    \n    for start, end in sorted(schedule):\n        if current_time < start:\n            free_times.append((current_time, start))\n        current_time = max(current_time, end)\n    \n    if current_time < work_end:\n        free_times.append((current_time, work_end))\n    \n    return free_times\n\n# Get free times for each participant\nolivia_free_times = get_free_times(olivia_schedule)\nvirginia_free_times = get_free_times(virginia_schedule)\npaul_free_times = get_free_times(paul_schedule)\n\n# Find the common free time slot of at least one hour\ndef find_common_free_time(olivia_free_times, virginia_free_times, paul_free_times):\n    for ol_start, ol_end in olivia_free_times:\n        for vi_start, vi_end in virginia_free_times:\n            for pa_start, pa_end in paul_free_times:\n                start = max(ol_start, vi_start, pa_start)\n                end = min(ol_end, vi_end, pa_end)\n                if (end - start) >= meeting_duration:\n                    return start, end\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_common_free_time(olivia_free_times, virginia_free_times, paul_free_times)\n\n# Output the proposed meeting time\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f'{start_time.strftime(\"%H:%M\")}:{end_time.strftime(\"%H:%M\")}')\nelse:\n    print(\"No common meeting time found.\")\n```",
            "count": "calendar_scheduling_example_106"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_availability, meeting_duration):\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create time slots\n    time_slots = []\n    current_time = start_of_day\n    while current_time + meeting_duration <= end_of_day:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every half an hour\n    \n    # Check availability\n    for start_time in time_slots:\n        end_time = start_time + meeting_duration\n        if all(is_available(start_time, end_time, availability) for availability in participants_availability):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\ndef is_available(start, end, availability):\n    for busy_start, busy_end in availability:\n        if busy_start < end and start < busy_end:  # Overlap check\n            return False\n    return True\n\nparticipants_availability = [\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],  # Peter\n    \n    [],  # Judith, fully available\n    \n    [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Keith\n    \n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]  # Evelyn\n]\n\nmeeting_duration = timedelta(minutes=30)\nmeeting_time = find_meeting_time(participants_availability, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_107"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time():\n    # Define the schedules\n    schedules = {\n        \"Lisa\": [(9, 9, 30), (10, 10, 30), (13, 14, 0), (15, 16, 0)],\n        \"Dorothy\": [(9, 9, 30), (10, 11, 30), (13, 14, 0), (14, 15, 30)],\n        \"Anthony\": [(9, 10, 0), (11, 12, 30), (13, 14, 0), (15, 16, 30)],\n        \"Ryan\": [(9, 12, 30), (13, 16, 30)]\n    }\n\n    # Convert busy schedules to free time slots\n    work_hours = [(9, 17, 0)]\n    \n    def get_free_time_slots(schedules):\n        busy_slots = []\n        for person in schedules.values():\n            busy_slots.extend(person)\n        \n        busy_slots.sort()\n        \n        free_slots = []\n        last_end = 9 * 60  # start of work hours in minutes\n        \n        for start, end in busy_slots:\n            start_mins = start * 60 + end\n            if start_mins > last_end:\n                free_slots.append((last_end//60, last_end % 60, start))\n            last_end = max(last_end, start_mins + (end - start) * 60)\n        \n        if last_end < 17 * 60:  # end of work hours in minutes\n            free_slots.append((last_end // 60, last_end % 60, 17))\n        \n        return free_slots\n\n    free_time_slots = get_free_time_slots(schedules)\n\n    # Filter free time slots to find a suitable meeting time\n    for start_hour, start_minute, end_hour in free_time_slots:\n        end_minute = 0  # meeting duration is half an hour, so we start looking for half hour slots\n        if end_hour - start_hour >= 1 and (start_hour > 14 or (start_hour == 14 and start_minute >= 30)):\n            return f\"{start_hour:02}:{start_minute:02}:{start_hour:02}:{start_minute + 30:02}\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_108"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nbusy_times = {\n    \"Marie\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Janice\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Elijah\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Theresa\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a given time slot is free for all participants\ndef is_free(start_time, end_time):\n    for busy in busy_times.values():\n        for period in busy:\n            if start_time < period[1] and end_time > period[0]:\n                return False\n    return True\n\n# Find a suitable time slot that satisfies all constraints\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if is_free(current_time, end_time) and end_time <= datetime.strptime(\"12:00\", \"%H:%M\"):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)\n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_109"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_hour = 9\nend_hour = 17\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' busy schedules\nbusy_schedule = {\n    \"Grace\": [],\n    \"Alexis\": [],\n    \"Helen\": [\n        (datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 12, 0)),\n        (datetime(2023, 10, 16, 12, 30), datetime(2023, 10, 16, 14, 0)),\n        (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0)),\n        (datetime(2023, 10, 16, 15, 30), datetime(2023, 10, 16, 16, 0)),\n        (datetime(2023, 10, 16, 16, 30), datetime(2023, 10, 16, 17, 0))\n    ],\n    \"Ashley\": [\n        (datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 9, 30)),\n        (datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 10, 30)),\n        (datetime(2023, 10, 16, 11, 0), datetime(2023, 10, 16, 14, 0)),\n        (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0)),\n        (datetime(2023, 10, 16, 15, 30), datetime(2023, 10, 16, 17, 0))\n    ]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = datetime(2023, 10, 16, start_hour, 0)\n    end_time = datetime(2023, 10, 16, end_hour, 0)\n\n    while current_time + meeting_duration <= end_time:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        if is_time_slot_available(meeting_start, meeting_end):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n    return \"No available time found\"\n\n# Function to check if time slot is available\ndef is_time_slot_available(start, end):\n    for participant, times in busy_schedule.items():\n        for busy_start, busy_end in times:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    if start.hour >= 15:  # Grace's preference to avoid meetings after 15:00\n        return False\n    return True\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_110"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting time constraints and existing schedules\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules: (start, end)\ngregory_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))]\n\nnatalie_schedule = []\n\nchristine_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nvincent_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is available for all participants\n        end_time = current_time + meeting_duration\n        \n        is_available = True\n        \n        # Check Gregory's schedule\n        for start, end in gregory_schedule:\n            if start < end_time and current_time < end:\n                is_available = False\n                break\n        \n        # Check Christine's schedule\n        for start, end in christine_schedule:\n            if start < end_time and current_time < end:\n                is_available = False\n                break\n        \n        # Check Vincent's schedule\n        for start, end in vincent_schedule:\n            if start < end_time and current_time < end:\n                is_available = False\n                break\n        \n        # If time is available for everyone\n        if is_available:\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # increment time by 1 minute\n    \n    return None  # If no time found\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_111"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules: (start_time, end_time)\nschedules = {\n    'Jean': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n             (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Jose': [],\n    'Samuel': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Henry': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Function to find a free time slot\ndef find_meeting_time(schedules, meeting_duration):\n    all_busy_times = []\n\n    # Collecting all busy times\n    for busy_intervals in schedules.values():\n        all_busy_times.extend(busy_intervals)\n\n    # Sort busy times by start time\n    all_busy_times.sort(key=lambda x: x[0])\n\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        # Check if current time overlaps with any busy times\n        overlaps = False\n        for start, end in all_busy_times:\n            if current_time < end and current_time + meeting_duration > start:\n                overlaps = True\n                current_time = end  # Move to the end of this busy slot\n                break\n        \n        if not overlaps:\n            return current_time.strftime('%H:%M') + ':' + (current_time + meeting_duration).strftime('%H:%M')\n\n    return None  # Return None if no slot found\n\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_112"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meetings for each participant (start, end)\nbradley_meetings = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nteresa_meetings = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nelizabeth_meetings = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nchristian_meetings = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                       (datetime.strptime(\"10:30\", \"%H:%M\"), end_time)]\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_slot, end_slot):\n    for meeting in bradley_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    for meeting in teresa_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    for meeting in elizabeth_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    for meeting in christian_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    return True\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find a free slot within the work hours\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        proposed_time = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        print(proposed_time)\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_113"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define the busy times for each participant\n    stephanie_busy = [(10, 30), (16, 0)]\n    cheryl_busy = [(10, 30), (11, 30), (12, 0), (13, 30), (14, 0), (16, 30), (17, 0)]\n    bradley_busy = [(9, 30), (10, 0), (10, 30), (11, 30), (13, 30), (14, 0), (14, 30), (15, 0), (15, 30), (17, 0)]\n    steven_busy = [(9, 0), (12, 0), (13, 0), (13, 30), (14, 30), (17, 0)]\n\n    # Convert busy times to a single list in minutes from the start of the day\n    busy_slots = []\n    for hour, minute in stephanie_busy + cheryl_busy + bradley_busy + steven_busy:\n        busy_slots.append(hour * 60 + minute)\n\n    # Define the work hours (in minutes)\n    work_start = 9 * 60  # 9:00\n    work_end = 17 * 60   # 17:00\n    meeting_duration = 60 # 60 minutes\n\n    # Check for free slots in the work hours\n    for start in range(work_start, work_end - meeting_duration + 1):\n        end = start + meeting_duration\n        \n        if all(start >= busy_end or end <= busy_start for busy_start, busy_end in zip(busy_slots[::2], busy_slots[1::2])):\n            meeting_start_hour = start // 60\n            meeting_start_minute = start % 60\n            meeting_end_hour = end // 60\n            meeting_end_minute = end % 60\n            return f\"{meeting_start_hour:02}:{meeting_start_minute:02}:{meeting_end_hour:02}:{meeting_end_minute:02}\"\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_114"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and duration of the meeting\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for each participant\nschedules = {\n    \"Jose\": [(start_time, end_time)],\n    \"Catherine\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Rachel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)],\n    \"Lori\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, start_time, end_time, meeting_duration):\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        if can_schedule_meeting(current_time, meeting_end_time, schedules):\n            return current_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)\n    return None\n\n# Function to check if the meeting can be scheduled\ndef can_schedule_meeting(meeting_start, meeting_end, schedules):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if (meeting_start < busy_end and meeting_end > busy_start):\n                return False\n    return True\n\n# Find and print the suitable meeting time\nmeeting_time = find_meeting_time(schedules, start_time, end_time, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_115"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules: (start_time, end_time)\nadam_schedule = [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\njohn_schedule = [\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\nstephanie_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\nanna_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Anna's preference\nanna_preference_time = datetime.strptime(\"14:30\", \"%H:%M\")\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current_time conflicts with anyone's schedule\n        conflicts = False\n        meeting_end_time = current_time + meeting_duration\n        \n        for start, end in adam_schedule + john_schedule + stephanie_schedule + anna_schedule:\n            if (current_time < end and meeting_end_time > start):\n                conflicts = True\n                break\n                \n        # Check if Anna's preference is respected\n        if current_time < anna_preference_time:\n            conflicts = True\n        \n        if not conflicts:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n    \n    return None\n\n# Find and print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_116"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the duration of the meeting\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules for each participant\nschedules = {\n    \"Brian\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Ronald\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Denise\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to check if a proposed time slot is free\ndef is_slot_free(start, end, schedules):\n    for busy_slots in schedules.values():\n        for (busy_start, busy_end) in busy_slots:\n            if (start < busy_end and end > busy_start):\n                return False\n    return True\n\n# Finding a suitable time slot\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        if is_slot_free(current_time, meeting_end, schedules):\n            # Jesse's preference to avoid meetings after 15:00\n            if current_time >= datetime.strptime(\"15:00\", \"%H:%M\"):\n                break\n            return current_time.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n    return None\n\n# Calculate proposed time\nmeeting_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\nif meeting_time:\n    print(f'Proposed meeting time: {{{meeting_time[0]}:{meeting_time[1]}}}')\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_117"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' blocked schedules\nschedules = {\n    \"Ruth\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Angela\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Lisa\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Cheryl\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ]\n}\n\n# Duration of meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    time_slot = start_of_day\n    while time_slot + meeting_duration <= end_of_day:\n        # Check if all participants are free in this time slot\n        if all(not (time_slot < end and time_slot + meeting_duration > start)\n               for schedule in schedules.values() \n               for start, end in schedule):\n            return time_slot.strftime(\"%H:%M\") + \":\" + (time_slot + meeting_duration).strftime(\"%H:%M\")\n        time_slot += timedelta(minutes=1)\n    return \"No suitable time found\"\n\n# Output proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_118"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    'Scott': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Laura': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    'Marilyn': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Natalie': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find free time slots\ndef find_free_time(start, end, busy_times):\n    current_time = start\n    free_slots = []\n\n    while current_time < end:\n        next_time = current_time + meeting_duration\n\n        # Check if the next time falls within any busy schedule\n        is_busy = any(busy_start < next_time and current_time < busy_end for busy_start, busy_end in busy_times)\n\n        if not is_busy:\n            free_slots.append((current_time, next_time))\n        \n        current_time += timedelta(minutes=15)  # Check every 15 minutes\n\n    return free_slots\n\n# Gather all busy times from all participants\nall_busy_times = []\nfor participant in schedules:\n    all_busy_times.extend(schedules[participant])\n\n# Find free time slots in work hours\nfree_time_slots = find_free_time(work_start, work_end, all_busy_times)\n\n# Select the first suitable time slot\nif free_time_slots:\n    proposed_time = free_time_slots[0]\n    print(f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No available time slot found\")\n```",
            "count": "calendar_scheduling_example_119"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nschedules = {\n    'Debra': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))\n    ],\n    'Christopher': [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ],\n    'Evelyn': [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))\n    ],\n    'Wayne': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))\n    ]\n}\n\ndef find_meeting_time():\n    # Create a list of all blocked intervals\n    blocked_intervals = []\n    for times in schedules.values():\n        blocked_intervals.extend(times)\n\n    # Sort blocked intervals by start time\n    blocked_intervals.sort(key=lambda x: x[0])\n\n    # Merge overlapping intervals\n    merged_intervals = []\n    for start, end in blocked_intervals:\n        if not merged_intervals or merged_intervals[-1][1] < start:\n            merged_intervals.append((start, end))\n        else:\n            merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end))\n\n    # Check for available time slots between work start and end\n    current_start = work_start\n    for start, end in merged_intervals:\n        if current_start + meeting_duration <= start:\n            # Check if the time slot is valid\n            if current_start.hour < 13 or (current_start.hour == 13 and current_start.minute == 0):\n                return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n        current_start = max(current_start, end)\n    \n    # After the last blocked interval\n    if current_start + meeting_duration <= work_end:\n        return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_120"
        },
        {
            "final_program_time": "{12:30:12:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' meetings times in tuples (start_time, end_time)\njerry_schedule = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nbenjamin_schedule = []\n\nandrew_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nanna_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Combine all schedules\ncombined_schedule = jerry_schedule + andrew_schedule + anna_schedule\n\ndef is_time_available(start_time):\n    end_time = start_time + meeting_duration\n    # Check if the proposed time overlaps with any participant's schedule\n    for schedule in combined_schedule:\n        if not (end_time <= schedule[0] or start_time >= schedule[1]):\n            return False\n    return start_time >= working_start and end_time <= working_end\n\n# Find suitable time slot\ndef find_meeting_time():\n    for hour in range(working_start.hour, working_end.hour + 1):\n        for minute in [0, 30]:  # Check every half hour\n            proposed_time = datetime.strptime(f\"{hour}:{minute:02}\", \"%H:%M\")\n            if is_time_available(proposed_time):\n                return proposed_time.strftime(\"%H:%M:%H:%M\")\n    return \"No suitable time found\"\n\n# Get the meeting time\navailable_time = find_meeting_time()\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_121"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\ndef find_meeting_time(participants, meeting_duration, work_start, work_end):\r\n    # Convert string time to datetime objects\r\n    work_start_time = datetime.strptime(work_start, '%H:%M')\r\n    work_end_time = datetime.strptime(work_end, '%H:%M')\r\n    \r\n    # Create full availability list\r\n    available_times = []\r\n    current_time = work_start_time\r\n\r\n    while current_time + timedelta(minutes=meeting_duration) <= work_end_time:\r\n        time_slot = (current_time, current_time + timedelta(minutes=meeting_duration))\r\n        available_times.append(time_slot)\r\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\r\n\r\n    # Check each slot against participants' schedules\r\n    for start, end in available_times:\r\n        meeting_possible = True\r\n        for schedule in participants:\r\n            for busy_start, busy_end in schedule:\r\n                if (start < busy_end and end > busy_start):  # Check for overlap\r\n                    meeting_possible = False\r\n                    break\r\n            if not meeting_possible:\r\n                break\r\n        if meeting_possible:\r\n            return start.strftime('%H:%M') + ':' + end.strftime('%H:%M')\r\n\r\n# Constraints\r\nDiana_schedule = [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\r\n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\r\n                  (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\r\n\r\nRebecca_schedule = [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\r\n                    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\r\n                    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\r\n                    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))]\r\n\r\nMadison_schedule = [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\r\n                    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\r\n                    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\r\n                    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\r\n\r\nCarol_schedule = [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\r\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\r\n                  (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\r\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\r\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\r\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\r\n\r\nparticipants = [Diana_schedule, Rebecca_schedule, Madison_schedule, Carol_schedule]\r\n\r\n# Meeting duration and work hours\r\nmeeting_duration = 30  # in minutes\r\nwork_start = '09:00'\r\nwork_end = '17:00'\r\n\r\n# Find a suitable meeting time\r\nproposed_time = find_meeting_time(participants, meeting_duration, work_start, work_end)\r\nprint(proposed_time)\r\n```",
            "count": "calendar_scheduling_example_122"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules for each participant\nschedules = {\n    \"Catherine\": [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    \"Ruth\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Andrew\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    \"Thomas\": []\n}\n\n# Function to find an available time slot\ndef find_meeting_time(schedules, start_time, end_time, meeting_duration):\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        if all(not (current_time < end and meeting_end_time > start) \n               for busy_times in schedules.values() \n               for start, end in busy_times):\n            return current_time, meeting_end_time\n        current_time += timedelta(minutes=1)\n    return None\n\n# Calculate proposed time\nproposed_time = find_meeting_time(schedules, start_time, end_time, meeting_duration)\nif proposed_time:\n    meeting_start, meeting_end = proposed_time\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_123"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedule constraints for each participant\nschedules = {\n    \"Michael\": [(datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Hannah\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Brenda\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Anthony\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef is_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Generate a list of possible meeting times\nmeeting_times = []\nfor hour in range(14, 17):  # Only check from 14:00 to 17:00\n    start_time = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n    end_time = start_time + meeting_duration\n    if end_time.time() <= datetime.strptime(\"17:00\", \"%H:%M\").time():\n        if (is_available(start_time, end_time, schedules[\"Michael\"]) and\n            is_available(start_time, end_time, schedules[\"Hannah\"]) and\n            is_available(start_time, end_time, schedules[\"Brenda\"]) and\n            is_available(start_time, end_time, schedules[\"Anthony\"])):\n            meeting_times.append((start_time, end_time))\n\n# Select the first valid time for simplicity\nif meeting_times:\n    proposal = meeting_times[0]\n    print(f\"{proposal[0].strftime('%H:%M')}:{proposal[1].strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_124"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and constraints\nschedules = {\n    'Jesse': [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Alan': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Elijah': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Amy': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"9:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if time slot is available\ndef is_slot_available(start, end, schedules):\n    for busy_time in schedules:\n        if (start < busy_time[1] and end > busy_time[0]):\n            return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    # Start looking for a time after 12:30 due to Jesse's preference\n    current_time = datetime.strptime(\"12:30\", \"%H:%M\")\n    \n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        busy_times = []\n        \n        for participant, busy_slots in schedules.items():\n            busy_times.extend(busy_slots)\n        \n        if is_slot_available(current_time, next_time, busy_times):\n            return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n        \n        # Move to the next minute to check availability\n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Get the meeting time and print the result\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_125"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy times as tuples of (start, end)\nschedules = {\n    'Lawrence': [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    'Sharon': [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    'Aaron': [\n        (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Amy': [\n        (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nlawrence_preference_start = datetime.strptime(\"13:00\", \"%H:%M\")\n\n# Function to find an available time slot\ndef find_meeting_time(schedules, meeting_duration, working_hours_start, working_hours_end, lawrence_preference_start):\n    # Create a list of all busy times\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Check for available slots between 9:00 and 17:00\n    current_time = working_hours_start\n\n    for busy_start, busy_end in busy_times:\n        # Adjust current_time if it is before the first busy slot\n        if current_time < busy_start:\n            # Check if the available slot is after Lawrence's preference\n            if current_time < lawrence_preference_start:\n                current_time = lawrence_preference_start\n            \n            # Calculate the end time for the meeting\n            meeting_end = current_time + meeting_duration\n            \n            # Check if the meeting fits before the busy slot\n            if meeting_end <= busy_start:\n                return (current_time.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\"))\n        \n        # Move current_time past the busy slot\n        if current_time < busy_end:\n            current_time = busy_end\n    \n    # Final check after last busy time\n    if current_time + meeting_duration <= working_hours_end:\n        return (current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"))\n\n# Find the meeting time\nmeeting_start, meeting_end = find_meeting_time(schedules, meeting_duration, working_hours_start, working_hours_end, lawrence_preference_start)\nprint(f\"{{{meeting_start}:{meeting_end}}}\")\n```",
            "count": "calendar_scheduling_example_126"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedule\nschedules = {\n    \"Kathleen\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Frank\": [],\n    \n    \"Christopher\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                     (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Kathryn\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if time slot is free for all participants\ndef is_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Time range for the meeting\nstart_work_hour = datetime.strptime(\"09:00\", \"%H:%M\")\nend_work_hour = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Check potential meeting times\nmeeting_start_time = datetime.strptime(\"13:30\", \"%H:%M\")\nwhile meeting_start_time + meeting_duration <= end_work_hour:\n    meeting_end_time = meeting_start_time + meeting_duration\n    if is_free(meeting_start_time, meeting_end_time):\n        print(f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    meeting_start_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_127"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule of participants (start time, end time)\ncatherine_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                      (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nharold_schedule = [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nann_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nrandy_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if the proposed time is available for all participants\ndef is_time_available(start_time, duration):\n    end_time = start_time + duration\n    for schedule in [catherine_schedule, harold_schedule, ann_schedule, randy_schedule]:\n        for busy_start, busy_end in schedule:\n            # Check if there's an overlap\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_available(current_time, meeting_duration):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # increment by 30 mins\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```",
            "count": "calendar_scheduling_example_128"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Jacqueline\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Adam\": [],\n    \"Gerald\": [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wayne\": [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define a function to find available time slots\ndef find_available_time(start_time, end_time):\n    # Iterate through all time slots during the work hours\n    time_slot = start_time\n    while time_slot + meeting_duration <= end_time:\n        busy = False\n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if busy_start < time_slot + meeting_duration and busy_end > time_slot:\n                    busy = True\n                    break\n            if busy:\n                break\n        \n        if not busy:\n            return time_slot\n        time_slot += timedelta(minutes=30)\n\n# Work hours for the meeting\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find the earliest available time\navailable_time = find_available_time(work_start, work_end)\n\n# Output the result\nif available_time:\n    output = f\"{available_time.strftime('%H:%M')}:{(available_time + meeting_duration).strftime('%H:%M')}\"\n    print(output)  # This outputs the meeting time in required format\n```",
            "count": "calendar_scheduling_example_129"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    'John': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n             (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Ralph': [(datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Daniel': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Keith': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find free time slots for all participants\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a list for all busy times\n    busy_times = []\n    for busy in schedules.values():\n        busy_times.extend(busy)\n    \n    # Add the work hours as busy time intervals\n    busy_times.append((work_start, work_end))\n    \n    # Sort the busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Merge overlapping busy times\n    merged_busy = []\n    for current in busy_times:\n        if not merged_busy or merged_busy[-1][1] < current[0]:\n            merged_busy.append(current)\n        else:\n            merged_busy[-1] = (merged_busy[-1][0], max(merged_busy[-1][1], current[1]))\n\n    # Find gaps in the merged busy intervals\n    for i in range(len(merged_busy) - 1):\n        end_current = merged_busy[i][1]\n        start_next = merged_busy[i + 1][0]\n        if start_next - end_current >= meeting_duration:\n            meeting_start = end_current\n            meeting_end = meeting_start + meeting_duration\n            if meeting_end <= work_end:\n                return meeting_start.strftime('%H:%M'), meeting_end.strftime('%H:%M')\n\n    # Additionally check if we can schedule it at the end of the work day\n    last_end = merged_busy[-1][1]\n    if work_end - last_end >= meeting_duration:\n        meeting_start = last_end\n        meeting_end = meeting_start + meeting_duration\n        return meeting_start.strftime('%H:%M'), meeting_end.strftime('%H:%M')\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nif meeting_time:\n    print(f'{meeting_time[0]}:{meeting_time[1]}')\n```",
            "count": "calendar_scheduling_example_130"
        },
        {
            "final_program_time": "{15:30:16:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert time to minutes since start of the day\ndef time_to_minutes(time_str):\n    t = datetime.strptime(time_str, \"%H:%M\")\n    return t.hour * 60 + t.minute\n\n# Function to convert minutes since start of the day back to time\ndef minutes_to_time(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour:02}:{minute:02}\"\n\n# Existing schedules (busy slots)\nschedules = {\n    \"Walter\": [(time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n               (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\"))],\n    \"Jacob\": [(time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")),\n              (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\"))],\n    \"Jennifer\": [(time_to_minutes(\"09:30\"), time_to_minutes(\"10:30\")),\n                 (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n                 (time_to_minutes(\"12:30\"), time_to_minutes(\"15:00\"))],\n    \"Joan\": [(time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n             (time_to_minutes(\"10:30\"), time_to_minutes(\"11:30\")),\n             (time_to_minutes(\"12:00\"), time_to_minutes(\"12:30\")),\n             (time_to_minutes(\"13:00\"), time_to_minutes(\"14:00\")),\n             (time_to_minutes(\"14:30\"), time_to_minutes(\"15:30\"))]\n}\n\n# Duration of the meeting in minutes\nmeeting_duration = 60\n\n# Work hours in minutes\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\n\n# Function to find available time\ndef find_available_time():\n    busy_times = []\n    \n    # Gather all busy times\n    for schedule in schedules.values():\n        busy_times.extend(schedule)\n    \n    # Combine and sort busy times\n    busy_times.sort()\n    \n    # Check for available slots\n    current_start = work_start\n    \n    for start, end in busy_times:\n        # If there's room for meeting before the next busy time\n        if current_start + meeting_duration <= start:\n            return f\"{minutes_to_time(current_start)}:{minutes_to_time(current_start + meeting_duration)}\"\n        current_start = max(current_start, end)  # Move to the end of busy time if it's later\n        \n    # Check last slot after the last busy time\n    if current_start + meeting_duration <= work_end:\n        return f\"{minutes_to_time(current_start)}:{minutes_to_time(current_start + meeting_duration)}\"\n    \n    return None  # This should not happen as per the task description\n\n# Get proposed time\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_131"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Define the working hours\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Define unavailability for each participant (busy times)\n    diana_busy = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n    \n    harold_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n    \n    philip_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), end_time)]\n\n    # Concatenate all busy times and sort them\n    all_busy_times = diana_busy + harold_busy + philip_busy\n    all_busy_times.sort()\n\n    # Check for available time slots\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        available = True\n        for busy_start, busy_end in all_busy_times:\n            # If there's an overlap with busy times\n            if current_time < busy_end and current_time + meeting_duration > busy_start:\n                available = False\n                break\n        if available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)\n    \n    return None\n\n# Print the proposed time for the meeting\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_132"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy schedules\nschedules = {\n    \"Janice\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Isabella\": [],\n    \"Linda\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Billy\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Generate busy times from all participants' schedules\n    busy_times = []\n    for busy_slots in schedules.values():\n        busy_times.extend(busy_slots)\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Check for available time slots\n    start_time = work_start\n    while start_time + meeting_duration <= work_end:\n        # Check if the current start_time is in any busy slot\n        in_busy_slot = False\n        for busy_start, busy_end in busy_times:\n            if start_time < busy_end and (start_time + meeting_duration) > busy_start:\n                in_busy_slot = True\n                start_time = busy_end  # Jump to end of the busy schedule\n                break\n        \n        if not in_busy_slot:\n            return start_time.strftime(\"%H:%M\"), (start_time + meeting_duration).strftime(\"%H:%M\")\n\n    return None\n\n# Find a suitable time\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nif meeting_time:\n    print(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\n```",
            "count": "calendar_scheduling_example_133"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define busy schedules for each participant\nalice_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\ncharlotte_busy = []\n\nstephanie_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nethan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy schedules into one\nall_busy = alice_busy + stephanie_busy + ethan_busy\n\n# Function to find a suitable time\ndef find_meeting_time(duration_minutes):\n    duration = timedelta(minutes=duration_minutes)\n    current_time = start_time\n\n    while current_time + duration <= end_time:\n        meeting_start = current_time\n        meeting_end = current_time + duration\n\n        # Check if meeting time clashes with any busy schedule\n        clash = False\n        for busy_start, busy_end in all_busy:\n            if meeting_start < busy_end and meeting_end > busy_start:\n                clash = True\n                break\n\n        if not clash:\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n        current_time += timedelta(minutes=1)  # Check next minute\n\n    return None  # No suitable time found\n\n# Find a suitable time for a 30-minute meeting\nmeeting_time = find_meeting_time(30)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_134"
        },
        {
            "final_program_time": "{12:00:0:12}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy schedules of each participant\nashley_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), timedelta(hours=1)),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), timedelta(hours=1))]\n                \nronald_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), timedelta(hours=1, minutes=30)),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), timedelta(hours=1.5)),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), timedelta(hours=2.5))]\n                \nlarry_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), timedelta(hours=3)),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), timedelta(hours=4))]\n\n# Function to check if a time slot is free\ndef is_free(time_slot_start, duration, busy_times):\n    for busy_start, busy_duration in busy_times:\n        busy_end = busy_start + busy_duration\n        if (time_slot_start < busy_end) and (time_slot_start + duration > busy_start):\n            return False\n    return True\n\n# Finding the suitable time slot \ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if (is_free(current_time, meeting_duration, ashley_busy) and\n        is_free(current_time, meeting_duration, ronald_busy) and\n        is_free(current_time, meeting_duration, larry_busy)):\n        proposed_time = current_time.strftime(\"%H:%M:%S\")\n        end_time = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_time}:{end_time}\")  # output in the requested format\n        break\n    current_time += timedelta(minutes=30)  # increments by 30 minutes\n```",
            "count": "calendar_scheduling_example_135"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    'Diana': [\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n    'Gerald': [\n        (datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ],\n    'Timothy': [\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n    'Julie': [\n        (datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a proposed time is free for all participants\ndef is_time_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Find a suitable time\ndef find_meeting_time():\n    work_start = datetime.strptime('09:30', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_free(current_time, current_time + meeting_duration):\n            return current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M')\n        current_time += timedelta(minutes=1)\n\n    return None\n\nproposed_time = find_meeting_time()\nprint(f'{{{proposed_time[0]}:{proposed_time[1]}}}')\n```",
            "count": "calendar_scheduling_example_136"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' schedules (busy times)\nschedules = {\n    \"Rebecca\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Donald\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Diana\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Diana's constraint\ndiana_constraint = datetime.strptime(\"14:00\", \"%H:%M\")\n\n# Function to check if a time slot is free for all participants\ndef is_slot_free(start_time, duration):\n    for participant, busy_times in schedules.items():\n        end_time = start_time + duration\n        for start, end in busy_times:\n            if (start_time < end and end_time > start):\n                return False\n        # Check Diana's constraint\n        if participant == \"Diana\" and start_time < diana_constraint:\n            return False\n    return True\n\n# Finding a suitable meeting time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_slot_free(current_time, meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_137"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nWORK_START = datetime.strptime('09:00', '%H:%M')\nWORK_END = datetime.strptime('17:00', '%H:%M')\nMEETING_DURATION = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\nbusy_times = {\n    'Emma': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M'))],\n    \n    'Gloria': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \n    'Joan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Function to check if a proposed meeting time works for all participants\ndef is_time_available(start, end):\n    for times in busy_times.values():\n        for busy_start, busy_end in times:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Search for an available time slot for the meeting\ndef find_meeting_time():\n    current_time = WORK_START\n    while current_time + MEETING_DURATION <= WORK_END:\n        if is_time_available(current_time, current_time + MEETING_DURATION):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + MEETING_DURATION).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)\n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_138"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the available time slots\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Existing schedules\nschedules = {\n    'Jose': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M'))],\n    \n    'Sean': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    \n    'Denise': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n               \n    'Amanda': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Find the common free slots\ndef find_free_time_slots(schedules, work_start, work_end, meeting_duration):\n    busy_intervals = []\n    \n    for busy_times in schedules.values():\n        busy_intervals.extend(busy_times)\n\n    # create list of free time slots between work_start and work_end\n    free_slots = []\n    current_start = work_start\n\n    # Sort busy intervals\n    busy_intervals.sort()\n\n    for busy_start, busy_end in busy_intervals:\n        if current_start + meeting_duration <= busy_start:\n            free_slots.append((current_start, busy_start))\n        current_start = max(current_start, busy_end)\n\n    # Check for available time after last busy time\n    if current_start + meeting_duration <= work_end:\n        free_slots.append((current_start, work_end))\n\n    return free_slots\n\nfree_slots = find_free_time_slots(schedules, work_start, work_end, meeting_duration)\n\nif free_slots:\n    proposed_start = free_slots[0][0]\n    proposed_end = proposed_start + meeting_duration\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_139"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedule for each participant\nschedules = {\n    \"Willie\": [(datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0))],\n    \"Charlotte\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n                  (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30)),\n                  (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    \"Noah\": [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n             (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n             (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 15, 0)),\n             (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Evelyn\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n               (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 30)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 16, 0)),\n               (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n}\n\n# Define working hours\nworking_hours_start = datetime(2023, 10, 2, 9, 0)\nworking_hours_end = datetime(2023, 10, 2, 17, 0)\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Generate available time slots\ndef get_availability():\n    # Create the full range of work hours\n    time_slots = []\n    current_time = working_hours_start\n    \n    while current_time + meeting_duration <= working_hours_end:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=5)  # Check every 5 minutes for availability\n\n    return time_slots\n\ndef is_time_available(start_time):\n    end_time = start_time + meeting_duration\n    for participant, busy_slots in schedules.items():\n        for busy_start, busy_end in busy_slots:\n            if (start_time < busy_end and end_time > busy_start):  # Overlap exists\n                return False\n    return True\n\n# Find a suitable time\navailable_times = get_availability()\nfor start_time in available_times:\n    if is_time_available(start_time):\n        end_time = start_time + meeting_duration\n        print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_140"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Linda\": [(time(10, 0), time(11, 30)), (time(12, 0), time(12, 30)), (time(13, 0), time(14, 0))],\n    \"Samantha\": [(time(10, 30), time(11, 0)), (time(16, 0), time(16, 30))],\n    \"Ralph\": [(time(9, 0), time(10, 0)), (time(10, 30), time(12, 0)), (time(12, 30), time(13, 30)),\n              (time(14, 0), time(15, 0)), (time(16, 30), time(17, 0))],\n    \"Katherine\": [(time(10, 0), time(12, 30)), (time(13, 30), time(14, 0)), \n                  (time(14, 30), time(15, 0)), (time(15, 30), time(16, 0))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\n# Convert time to datetime for easier comparison\ndef time_range_overlap(ranges):\n    busy_times = []\n\n    for busy in ranges:\n        busy_times.append((datetime.combine(datetime.today(), busy[0]), \n                           datetime.combine(datetime.today(), busy[1])))\n\n    return busy_times\n\ndef check_availability(start, end):\n    for busy in time_range_overlap(schedules[\"Linda\"]) + time_range_overlap(schedules[\"Samantha\"]) + \\\n                 time_range_overlap(schedules[\"Ralph\"]) + time_range_overlap(schedules[\"Katherine\"]):\n        if (start < busy[1] and end > busy[0]):\n            return False\n    return True\n\n# Find suitable time\ndef find_meeting_time(start_hour, end_hour):\n    current_time = datetime.combine(datetime.today(), start_hour)\n    end_time = datetime.combine(datetime.today(), end_hour)\n\n    while current_time + meeting_duration <= end_time:\n        if check_availability(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Check every minute\n\n# Propose a time\nproposed_time = find_meeting_time(work_start, work_end)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_141"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the existing schedules for each participant in terms of busy intervals\nparticipants = {\n    \"Richard\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \"Sarah\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Gloria\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Kathleen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Create a list of all busy intervals\n    busy_intervals = []\n    for busy_times in participants.values():\n        busy_intervals.extend(busy_times)\n\n    # Sort busy intervals\n    busy_intervals.sort()\n\n    # Find free slots\n    last_end_time = working_start\n    \n    for start, end in busy_intervals:\n        if last_end_time + meeting_duration <= start:  # Check if there's enough time before the next busy interval\n            proposed_time_start = last_end_time\n            proposed_time_end = last_end_time + meeting_duration\n            if proposed_time_end <= start:  # Ensure the proposed time fits\n                return proposed_time_start.strftime(\"%H:%M\") + \":\" + proposed_time_end.strftime(\"%H:%M\")\n        last_end_time = max(last_end_time, end)\n    \n    # Check for time after the last busy interval until end of working hours\n    if last_end_time + meeting_duration <= working_end:\n        proposed_time_start = last_end_time\n        proposed_time_end = last_end_time + meeting_duration\n        return proposed_time_start.strftime(\"%H:%M\") + \":\" + proposed_time_end.strftime(\"%H:%M\")\n    \n    return None\n\n# Calculate and print the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_142"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nschedules = {\n    \"Marilyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \"Timothy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"))],\n    \"Peter\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Patrick\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\n# Function to check if the time slot is free for all participants\ndef is_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:  # Overlapping time\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_free(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Increment checking every 30 minutes\n    return None\n\n# Proposed meeting time output\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_143"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting():\n    # Define the participants' schedules\n    schedules = {\n        \"Diane\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Olivia\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        \"Vincent\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        \"Steven\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ]\n    }\n    \n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n    \n    # Initialize free time slots\n    free_time_slots = []\n\n    # Determine the free slots\n    for start_time, end_time in schedules[\"Diane\"]:\n        current_start = start_time\n        while current_start < end_time:\n            current_end = current_start + meeting_duration\n            is_free = True\n            \n            for name, busy_slots in schedules.items():\n                if name != \"Diane\":\n                    for busy_start, busy_end in busy_slots:\n                        if not (current_end <= busy_start or current_start >= busy_end):\n                            is_free = False\n                            break\n                if not is_free:\n                    break\n                    \n            if is_free:\n                free_time_slots.append((current_start, current_end))\n            current_start += timedelta(minutes=30)  # Increment checking by half an hour\n    \n    # Select the first available time slot\n    if free_time_slots:\n        proposed_time = free_time_slots[0]\n        return f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}\"\n\n# Output the proposed time\nprint(schedule_meeting())\n```",
            "count": "calendar_scheduling_example_144"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participant_schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=meeting_duration)\n    \n    # Create a list of busy times from participant schedules\n    busy_times = []\n    for schedule in participant_schedules:\n        for meeting in schedule:\n            busy_times.append(meeting)\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Find available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current time slot is free\n        slot_start = current_time\n        slot_end = current_time + meeting_duration\n        \n        free = True\n        for busy_start, busy_end in busy_times:\n            if (slot_start < busy_end) and (slot_end > busy_start):\n                free = False\n                break\n        \n        if free:\n            return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n    \n    return None  # No available time found\n\n# Define the schedules for each participant as (start_time, end_time)\nmarilyn_schedule = []\ncarolyn_schedule = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\ncharles_schedule = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\nlori_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nparticipants = [marilyn_schedule, carolyn_schedule, charles_schedule, lori_schedule]\nmeeting_duration = 30  # Minutes\n\nproposed_time = find_meeting_time(participants, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_145"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define each participant's busy schedule\nanna_busy = [(time(9, 0), time(9, 30)), (time(10, 30), time(11, 0)), (time(12, 0), time(12, 30)),\n             (time(14, 30), time(15, 0)), (time(16, 0), time(17, 0))]\ndennis_busy = [(time(12, 0), time(13, 30)), (time(15, 0), time(15, 30))]\nzachary_busy = [(time(9, 0), time(10, 30)), (time(12, 0), time(12, 30)), (time(13, 0), time(17, 0))]\nbobby_busy = [(time(9, 30), time(11, 0)), (time(11, 30), time(12, 0)), (time(12, 30), time(14, 30)),\n               (time(15, 0), time(17, 0))]\n\n# Convert the busy schedules into a full range of times for the day\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\n# Create a list of all busy times\nall_busy_times = []\n\ndef add_busy_times(busy_schedule):\n    for start, end in busy_schedule:\n        all_busy_times.append((start, end))\n\nadd_busy_times(anna_busy)\nadd_busy_times(dennis_busy)\nadd_busy_times(zachary_busy)\nadd_busy_times(bobby_busy)\n\n# Sort busy times\nall_busy_times.sort()\n\n# Function to find a free time slot for a specified duration\ndef find_free_time(duration):\n    current = work_start\n    duration_timedelta = timedelta(minutes=duration)\n    \n    for start, end in all_busy_times:\n        # If there's a gap between the current time and the start of the busy period\n        if current < start:\n            free_time_slot = (current, start)\n            gap_duration = timedelta(hours=start.hour, minutes=start.minute) - timedelta(hours=current.hour, minutes=current.minute)\n            if gap_duration >= duration_timedelta:\n                return (current, (current.hour, current.minute + duration))\n        \n        # Move current time to the end of the busy period\n        if current < end:\n            current = end\n            \n    # After the last busy period, check if there's time to schedule the meeting until the end of work hours\n    if current < work_end:\n        free_time_slot = (current, work_end)\n        gap_duration = timedelta(hours=work_end.hour, minutes=work_end.minute) - timedelta(hours=current.hour, minutes=current.minute)\n        if gap_duration >= duration_timedelta:\n            return (current, (work_end.hour, work_end.minute))\n    \n    return None\n\n# Find a free time slot for a 30-minute meeting\nmeeting_time = find_free_time(30)\n\nif meeting_time:\n    start, (end_hour, end_minute) = meeting_time\n    print(f\"{start.hour:02}:{start.minute:02}:{end_hour:02}:{end_minute:02}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_146"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy slots for each participant\ndanielle_busy = []\njanice_busy = [(\"09:00\", \"09:30\"), (\"15:00\", \"16:30\")]\nalexander_busy = [(\"09:00\", \"09:30\"), (\"10:00\", \"12:30\"), (\"13:00\", \"14:00\"), \n                  (\"14:30\", \"15:30\"), (\"16:00\", \"17:00\")]\nthomas_busy = [(\"09:00\", \"11:00\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:30\"), \n                (\"16:00\", \"16:30\")]\n\n# Create a function to get busy slots as datetime objects\ndef get_busy_slots(busy_times):\n    return [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in busy_times]\n\n# Generate all busy slots for the participants\ndanielle_busy_slots = get_busy_slots(danielle_busy)\njanice_busy_slots = get_busy_slots(janice_busy)\nalexander_busy_slots = get_busy_slots(alexander_busy)\nthomas_busy_slots = get_busy_slots(thomas_busy)\n\n# Combine all busy slots into one list and sort it\nall_busy_slots = (danielle_busy_slots + janice_busy_slots + \n                  alexander_busy_slots + thomas_busy_slots)\n\nall_busy_slots.sort()\n\n# Check for available time slots between work_start and work_end\navailable_slots = []\ncurrent_time = work_start\n\nfor start, end in all_busy_slots:\n    # Check if there's free time before the next busy slot\n    if current_time + meeting_duration <= start:\n        available_slots.append((current_time, current_time + meeting_duration))\n    current_time = max(current_time, end)\n\n# Check any remaining time slot after the last busy slot until work_end\nif current_time + meeting_duration <= work_end:\n    available_slots.append((current_time, current_time + meeting_duration))\n\n# We need to take into account Alexander's preference for after 13:00\nvalid_meeting_times = []\nfor start, end in available_slots:\n    if start >= datetime.strptime(\"13:00\", \"%H:%M\"):\n        valid_meeting_times.append((start, end))\n\n# Output the first valid meeting time\nif valid_meeting_times:\n    proposed_meeting = valid_meeting_times[0]\n    print(f\"{proposed_meeting[0].strftime('%H:%M')}:{proposed_meeting[1].strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_147"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration):\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=duration)\n    \n    busy_times = []\n    \n    for schedule in participants:\n        busy_times.extend(schedule)\n\n    busy_times.sort()\n\n    current_time = start_of_day\n\n    for start, end in busy_times:\n        if current_time + meeting_duration <= start:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time = max(current_time, end)\n\n    return None\n\nparticipants = [\n    [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Deborah\n     \n    [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],  # Samuel\n     \n    [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Betty\n     \n    [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Stephen\n]\n\n# Stephen cannot meet before 14:00\nparticipants[3].append((datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")))\n\nmeeting_time = find_meeting_time(participants, 30)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_148"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Existing busy schedules\nbusy_times = {\n    \"Diane\": [],\n    \"Russell\": [],\n    \"Kathryn\": [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n    \"Joshua\": [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n    \"Russell\": [],\n}\n\ndef find_free_time(busy_times, work_start, work_end, meeting_duration):\n    # Create a list of available time slots\n    available_slots = []\n    \n    # Get all busy intervals\n    all_busy_times = []\n    for busy in busy_times.values():\n        all_busy_times.extend(busy)\n    \n    # Sort and merge busy times\n    all_busy_times.sort()\n    merged_busy_times = []\n    \n    for start, end in all_busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\n            merged_busy_times.append((start, end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n    # Check for free time slots\n    last_end = work_start\n    for start, end in merged_busy_times:\n        if last_end + meeting_duration <= start:\n            available_slots.append((last_end, start))\n        last_end = end\n\n    # After last busy time until work end\n    if last_end + meeting_duration <= work_end:\n        available_slots.append((last_end, work_end))\n\n    return available_slots\n\ndef schedule_meeting():\n    available_time_slots = find_free_time(busy_times, work_start, work_end, meeting_duration)\n    \n    if available_time_slots:\n        # Return the first available slot formatted correctly\n        start, end = available_time_slots[0]\n        return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n    return None\n\nproposed_time = schedule_meeting()\nprint(proposed_time)\n```\n",
            "count": "calendar_scheduling_example_149"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules\ndennis_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nnancy_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nalexander_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available time slot\ndef find_meeting_time():\n    current_time = working_start\n    while current_time + meeting_duration <= working_end:\n        end_time = current_time + meeting_duration\n        \n        # Check if current time is available for all participants\n        if all(not (busy_start < end_time and busy_end > current_time)\n               for busy_start, busy_end in dennis_busy + nancy_busy + alexander_busy):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n\n        current_time += timedelta(minutes=1)  # Increment by one minute\n        \n    return None  # In case no slot is found (not expected in this case)\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(\"{\" + proposed_time + \"}\")\n```",
            "count": "calendar_scheduling_example_150"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the current schedules\npeters_schedule = [(work_start, work_end)]\npatricias_busy_times = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nmegans_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nambers_busy_times = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\n# Function to check if the meeting can be scheduled\ndef can_schedule_meeting(start_time, busy_times):\n    end_time = start_time + meeting_duration\n    for busy_start, busy_end in busy_times:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\n# Find suitable time for the meeting\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    if (current_time >= datetime.strptime(\"11:00\", \"%H:%M\") and \n        can_schedule_meeting(current_time, patricias_busy_times) and\n        can_schedule_meeting(current_time, megans_busy_times) and\n        can_schedule_meeting(current_time, ambers_busy_times)):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=15)\n```",
            "count": "calendar_scheduling_example_151"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for each participant\nschedules = {\n    \"Aaron\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Sarah\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Martha\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Heather\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end_time = current_time + meeting_duration\n        available = True\n        \n        # Check against everyone's busy schedules\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if (current_time < end) and (meeting_end_time > start):\n                    available = False\n                    break\n            if not available:\n                break\n            \n        # Check Sarah's preference\n        if current_time < datetime.strptime(\"13:30\", \"%H:%M\"):\n            available = False\n        \n        if available:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)\n    \n    return \"No available time\"\n\n# Execute the function to find and print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_152"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nschedules = {\n    'Logan': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Bruce': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Joan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Kevin': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Generate all busy times\nbusy_times = []\nfor participant, times in schedules.items():\n    for start, end in times:\n        busy_times.append((start, end))\n\n# Function to find free slots\ndef find_free_slots(start, end, busy_times, duration):\n    free_slots = []\n    current_time = start\n    \n    while current_time + duration <= end:\n        # Check if current_time is busy\n        is_busy = any(start < current_time + duration and current_time < end for start, end in busy_times)\n        if not is_busy:\n            free_slots.append(current_time)\n        current_time += timedelta(minutes=1)\n    \n    return free_slots\n\n# Find free time slots\nfree_slots = find_free_slots(work_start, work_end, busy_times, meeting_duration)\n\n# Select the first valid free time slot\nif free_slots:\n    proposed_start = free_slots[0]\n    proposed_end = proposed_start + meeting_duration\n    print(f'{{{proposed_start.strftime(\"%H:%M\")}:{proposed_end.strftime(\"%H:%M\")}}}')\n```",
            "count": "calendar_scheduling_example_153"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing schedules\nann_schedule = [(work_start, work_end)]\nkelly_schedule = [(work_start, datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n                  (datetime.strptime(\"17:00\", \"%H:%M\"), work_end)]\nbenjamin_schedule = [(work_start, datetime.strptime(\"10:30\", \"%H:%M\")),\n                     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n                     (datetime.strptime(\"17:00\", \"%H:%M\"), work_end)]\npamela_schedule = [(work_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n                   (datetime.strptime(\"17:00\", \"%H:%M\"), work_end)]\n\n# Function to find common free time for a meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        \n        # Check if current_time to end_time is free for all schedules\n        if (all(is_time_free(current_time, end_time, schedule) for schedule in [ann_schedule, kelly_schedule, benjamin_schedule, pamela_schedule])):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n\ndef is_time_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if not (end <= busy_start or start >= busy_end):  # Overlapping time\n            return False\n    return True\n\n# Find and print the suitable meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_154"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the existing schedules (busy times)\nschedules = {\n    \"Dennis\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Ruth\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Eugene\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Generate all busy times into a single list\nbusy_times = []\nfor busy in schedules.values():\n    busy_times.extend(busy)\n\n# Sort the busy times\nbusy_times.sort()\n\n# Find a suitable time slot for the meeting\nstart_time = work_start\n\nwhile start_time + meeting_duration <= work_end:\n    end_time = start_time + meeting_duration\n    conflict = False\n    \n    for busy_start, busy_end in busy_times:\n        if (start_time < busy_end and end_time > busy_start):\n            conflict = True\n            break\n    \n    if not conflict:\n        print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n        \n    start_time += timedelta(minutes=30)  # Check the next time slot\n```",
            "count": "calendar_scheduling_example_155"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\nschedules = {\n    \"Alexander\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                  (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \n    \"Paul\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))],\n    \n    \"Elijah\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), work_end)],\n    \n    \"Mark\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n             (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n             (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n             (datetime.strptime('16:30', '%H:%M'), work_end)]\n}\n\n# Function to find the first available time slot\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    # Create a list of busy times\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n    \n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Check for available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if this time is free\n        is_busy = False\n        for start, end in busy_times:\n            if current_time < end and current_time + meeting_duration > start:\n                is_busy = True\n                current_time = end  # Jump to the end of the busy period\n                break\n        if not is_busy:\n            # Found an available slot\n            return current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M')\n    \n    return None\n\n# Get the meeting time\nmeeting_start, meeting_end = find_meeting_time(schedules, work_start, work_end, meeting_duration)\n\n# Output the proposed time\nprint(f\"{meeting_start}:{meeting_end}\")\n```",
            "count": "calendar_scheduling_example_156"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nrichard_schedule = []  # No meetings throughout the day\ndebra_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\nmatthew_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\nelizabeth_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for busy_start, busy_end in debra_schedule + matthew_schedule + elizabeth_schedule:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    proposed_end_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, proposed_end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_157"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules (busy times)\nschedules = {\n    \"Russell\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Debra\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Philip\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Peter\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Find available time slots\ndef find_meeting_time():\n    current_time = work_start\n\n    while current_time <= work_end - meeting_duration:\n        # Check for each participant if they are free during the proposed time slot\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        if all(not (meeting_start < busy_end and meeting_end > busy_start) for busy_times in schedules.values() for busy_start, busy_end in busy_times):\n            # Check Philip's preference to avoid meetings before 13:30\n            if meeting_start >= datetime.strptime(\"13:30\", \"%H:%M\"):\n                return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)  # check the next minute\n\n# Get proposed time and print\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_158"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\ntheresa_schedule = []\nnathan_schedule = []\nvirginia_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\npaul_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Create a function to find a suitable time slot\ndef find_meeting_time():\n    # Get all busy times\n    busy_times = virginia_schedule + paul_schedule\n    # Filter to avoid Nathan's preference\n    busy_times += [ \n        (work_start, datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), work_end)\n    ]\n    \n    # Check from the start of working hours to end\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        available = True\n        meeting_end = current_time + meeting_duration\n        \n        for start, end in busy_times:\n            if (current_time < end) and (meeting_end > start):\n                available = False\n                break\n        \n        if available:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n    \n    return None  # If no time is available\n\n# Call the function and print the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_159"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedule, duration, preferences):\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert schedules to datetime ranges\n    unavailable_times = []\n    for times in schedule:\n        for start, end in times:\n            unavailable_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    \n    # Add Jacob's preference\n    if preferences['Jacob']['after'] is not None:\n        unavailable_times.append((work_start, datetime.strptime(preferences['Jacob']['after'], \"%H:%M\")))\n    \n    # Sort unavailable times\n    unavailable_times.sort()\n\n    # Find available slots\n    available_times = []\n    current_time = work_start\n    \n    for start, end in unavailable_times:\n        if current_time < start:\n            available_times.append((current_time, start))\n        current_time = max(current_time, end)\n    \n    if current_time < work_end:\n        available_times.append((current_time, work_end))\n    \n    # Find suitable meeting time\n    for start, end in available_times:\n        if (end - start) >= timedelta(minutes=duration):\n            meeting_start = start\n            meeting_end = meeting_start + timedelta(minutes=duration)\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Define participants' schedules\nschedules = {\n    'Nathan': [(\"10:30\", \"11:00\"), (\"13:00\", \"13:30\")],\n    'Jacob': [(\"13:00\", \"13:30\"), (\"15:30\", \"16:00\")],\n    'Katherine': [(\"09:30\", \"11:00\"), (\"11:30\", \"15:00\"), (\"15:30\", \"16:30\")],\n    'Samantha': [(\"09:00\", \"11:00\"), (\"11:30\", \"13:30\"), (\"14:00\", \"15:30\"), (\"16:00\", \"16:30\")]\n}\n\nmeeting_duration = 30  # in minutes\npreferences = {\n    'Jacob': {'after': '14:30'}\n}\n\n# Call the function to find a suitable meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, preferences)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_160"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules (busy times)\nschedules = {\n    'Ryan': [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    'Margaret': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    'Willie': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Shirley': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Check all possible start times within work hours\n    potential_start = work_start\n    while potential_start + meeting_duration <= work_end:\n        if all(is_time_available(potential_start, meeting_duration, busy_times) for busy_times in schedules.values()):\n            return potential_start.strftime(\"%H:%M\") + \":\" + (potential_start + meeting_duration).strftime(\"%H:%M\")\n        potential_start += timedelta(minutes=30)  # Try next half-hour slot\n    return None\n\ndef is_time_available(start_time, duration, busy_times):\n    end_time = start_time + duration\n    for busy_start, busy_end in busy_times:\n        if (start_time < busy_end and end_time > busy_start):  # Overlapping times\n            return False\n    return True\n\n# Margaret prefers not to meet before 13:30\nfirst_available_time = datetime.strptime(\"13:30\", \"%H:%M\")\n\n# Modify meeting search to start after Margaret's preference\nif find_meeting_time(schedules, meeting_duration, first_available_time, work_end):\n    proposed_time = find_meeting_time(schedules, meeting_duration, first_available_time, work_end)\nelse:\n    proposed_time = \"No available time\"\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_161"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration_minutes, work_start, work_end):\n    work_start_time = datetime.strptime(work_start, '%H:%M')\n    work_end_time = datetime.strptime(work_end, '%H:%M')\n    \n    # Create a list of busy slots\n    busy_slots = []\n    \n    for schedule in schedules:\n        for busy_time in schedule:\n            busy_slots.append((datetime.strptime(busy_time[0], '%H:%M'), datetime.strptime(busy_time[1], '%H:%M')))\n\n    # Sort busy slots\n    busy_slots.sort()\n\n    # Check for free time slots\n    last_end_time = work_start_time\n\n    for start, end in busy_slots:\n        # If there's a time gap\n        if last_end_time < start:\n            available_start = last_end_time\n            available_end = start\n            \n            # Check if the available gap is sufficient for the meeting\n            if (available_end - available_start).total_seconds() >= meeting_duration_minutes * 60:\n                return available_start.strftime('%H:%M') + ':' + (available_start + timedelta(minutes=meeting_duration_minutes)).strftime('%H:%M')\n        \n        # Move the last_end_time forward\n        last_end_time = max(last_end_time, end)\n\n    # Check if there's available time after the last busy slot until end of work\n    if last_end_time < work_end_time:\n        available_start = last_end_time\n        available_end = work_end_time\n        \n        if (available_end - available_start).total_seconds() >= meeting_duration_minutes * 60:\n            return available_start.strftime('%H:%M') + ':' + (available_start + timedelta(minutes=meeting_duration_minutes)).strftime('%H:%M')\n\n    return None\n\nschedules = [\n    [('10:00', '11:30'), ('12:00', '12:30'), ('13:30', '14:00'), ('15:00', '15:30')],  # Angela\n    [],  # David\n    [('09:00', '09:30'), ('10:00', '13:30'), ('14:30', '16:00'), ('16:30', '17:00')],  # Judith\n    [('09:00', '10:00'), ('11:30', '12:30'), ('13:00', '14:00'), ('14:30', '16:00'), ('16:30', '17:00')]  # Thomas\n]\n\nmeeting_duration = 30  # minutes\nwork_start = '09:00'\nwork_end = '17:00'\n\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_162"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Define working hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert busy times to datetime ranges\n    busy_times = []\n    for person in participants:\n        for busy in person['busy_slots']:\n            start = datetime.strptime(busy[0], \"%H:%M\")\n            end = datetime.strptime(busy[1], \"%H:%M\")\n            busy_times.append((start, end))\n\n    # Merge busy times\n    busy_times.sort()\n    merged_busy_times = []\n    for current_start, current_end in busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < current_start:\n            merged_busy_times.append((current_start, current_end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], current_end))\n\n    # Find available slots\n    available_slots = []\n    last_end = work_start\n    \n    for start, end in merged_busy_times:\n        if last_end + timedelta(minutes=meeting_duration) <= start:\n            available_slots.append((last_end, start))\n        last_end = end\n\n    if last_end < work_end:\n        available_slots.append((last_end, work_end))\n\n    # Return the first available slot that fits the meeting duration\n    for slot_start, slot_end in available_slots:\n        if (slot_end - slot_start).total_seconds() >= meeting_duration * 60:\n            meeting_start = slot_start\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\nparticipants = [\n    {\"name\": \"Jason\", \"busy_slots\": [(\"10:30\", \"13:00\"), (\"14:00\", \"14:30\")]},\n    {\"name\": \"Hannah\", \"busy_slots\": []},\n    {\"name\": \"Gary\", \"busy_slots\": [(\"09:00\", \"10:00\"), (\"10:30\", \"15:00\"), (\"16:30\", \"17:00\")]},\n    {\"name\": \"Pamela\", \"busy_slots\": [(\"09:30\", \"10:00\"), (\"11:30\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:00\", \"14:30\"), (\"15:00\", \"16:30\")]}\n]\n\nmeeting_duration = 30\ntime_slot = find_meeting_time(participants, meeting_duration)\nif time_slot:\n    print(f\"{time_slot[0]}:{time_slot[1]}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_163"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\n# Schedules for participants\nschedules = {\n    \"Jennifer\": [(12:30, 13:00), (15:30, 16:00)],\n    \"Jean\": [(12:00, 12:30), (13:00, 13:30), (14:00, 15:00), (15:30, 16:00), (16:30, 17:00)],\n    \"Jerry\": [(9:00, 9:30), (10:00, 11:00), (11:30, 12:00), (13:00, 13:30), (14:00, 14:30), (15:30, 16:00), (16:30, 17:00)],\n    \"Carl\": [(9:00, 11:00), (12:00, 13:00), (13:30, 14:00), (15:30, 16:00)]\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Function to find the available time slot\ndef find_available_time(schedules, meeting_duration):\n    # Consider work hours\n    work_start = 9 * 60  # 9:00\n    work_end = 17 * 60    # 17:00\n\n    # Create a list of busy times in minutes\n    busy_times = []\n    for participant, times in schedules.items():\n        for start, end in times:\n            busy_times.append((start.hour * 60 + start.minute, end.hour * 60 + end.minute))\n\n    # Merge overlapping busy times\n    busy_times.sort()\n    merged_busy_times = []\n    for start, end in busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\n            merged_busy_times.append((start, end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n    # Find an available slot\n    last_end = work_start\n    for start, end in merged_busy_times:\n        if last_end + meeting_duration <= start:\n            available_start = last_end\n            available_end = last_end + meeting_duration\n            if available_end <= work_end:\n                return f\"{available_start // 60:02}:{available_start % 60:02}:{available_end // 60:02}:{available_end % 60:02}\"\n        last_end = max(last_end, end)\n\n    # Check if there's time after the last busy period until work end\n    if last_end + meeting_duration <= work_end:\n        available_start = last_end\n        available_end = last_end + meeting_duration\n        return f\"{available_start // 60:02}:{available_start % 60:02}:{available_end // 60:02}:{available_end % 60:02}\"\n\n# Call the function and print the result\nprint(find_available_time(schedules, meeting_duration))\n```",
            "count": "calendar_scheduling_example_164"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy schedules (start_time, end_time)\nschedules = {\n    \"Anthony\": [],\n    \"Stephanie\": [ (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")) ],\n    \"Emma\": [ (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")) ],\n    \"Kathleen\": [ (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")) ]\n}\n\ndef find_available_time(schedules, work_start, work_end, meeting_duration):\n    # Create a list of all busy times\n    busy_times = []\n    for busy in schedules.values():\n        busy_times.extend(busy)\n\n    # Sort the busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Check available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is free\n        slot_start = current_time\n        slot_end = current_time + meeting_duration\n        is_free = True\n        \n        for busy_start, busy_end in busy_times:\n            if slot_start < busy_end and slot_end > busy_start:  # Overlapping\n                is_free = False\n                break\n        \n        if is_free:\n            return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n        \n        # Increment by 5 minutes to check the next slot\n        current_time += timedelta(minutes=5)\n\n    # No available time found in the specified range\n    return None\n\n# Finding and printing the available time\navailable_time = find_available_time(schedules, work_start, work_end, meeting_duration)\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_165"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules in a list of tuples (start_time, end_time)\nschedules = {\n    'Sara': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Lauren': [],\n    'Jose': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Henry': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is free for all participants\ndef is_free(start_time, duration, schedules):\n    end_time = start_time + duration\n    for participant, booked_slots in schedules.items():\n        for slot in booked_slots:\n            if start_time < slot[1] and end_time > slot[0]:  # There's a conflict\n                return False\n    return True\n\n# Find suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_free(current_time, meeting_duration, schedules):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_166"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Marilyn\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    \"George\": [],\n    \n    \"Stephanie\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Kimberly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Free time slots for each participant\ndef get_free_slots(schedule):\n    free_slots = []\n    current_start = work_start\n    \n    for busy_start, busy_end in sorted(schedule):\n        if current_start < busy_start:\n            free_slots.append((current_start, busy_start))\n        current_start = max(current_start, busy_end)\n    \n    if current_start < work_end:\n        free_slots.append((current_start, work_end))\n    \n    return free_slots\n\n# Find common free slots\ndef find_common_free_slots(schedules):\n    common_free_slots = get_free_slots(schedules[\"George\"])  # George is always free\n    for participant, busy_times in schedules.items():\n        if participant != \"George\":\n            free_slots = get_free_slots(busy_times)\n            new_common_slots = []\n            for start, end in common_free_slots:\n                for fs, fe in free_slots:\n                    if fs < end and start < fe:\n                        new_common_slots.append((max(start, fs), min(end, fe)))\n            common_free_slots = new_common_slots\n    return common_free_slots\n\n# Get common free slots\ncommon_free_slots = find_common_free_slots(schedules)\n\n# Find a suitable time for meeting\nfor start, end in common_free_slots:\n    if end - start >= meeting_duration:\n        proposed_start = start\n        proposed_end = start + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_167"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import timedelta, datetime\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\nschedules = {\n    \"Jean\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), end_time)],\n    \"Lauren\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Olivia\": [(start_time, datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)],\n    \"Scott\": [(start_time, datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n}\n\n# Function to check if there is a common available slot\ndef find_meeting_time(schedules, start_time, end_time, meeting_duration):\n    # Generate all busy times in minutes\n    busy_times = []\n    for busy in schedules.values():\n        for start, end in busy:\n            busy_times.append((start, end))\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Find time slot\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        # Check if the current time is free\n        is_busy = False\n        for busy_start, busy_end in busy_times:\n            if busy_start <= current_time < busy_end or busy_start < (current_time + meeting_duration) <= busy_end:\n                is_busy = True\n                break\n        if not is_busy:\n            return current_time\n        current_time += timedelta(minutes=1)\n    return None\n\n# Calculate meeting time\nmeeting_time = find_meeting_time(schedules, start_time, end_time, meeting_duration)\nif meeting_time:\n    proposed_end_time = meeting_time + meeting_duration\n    print(f\"{meeting_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available meeting time found.\")\n```",
            "count": "calendar_scheduling_example_168"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules as lists of tuples (start, end)\nphilip_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nalbert_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        end_meeting_time = current_time + meeting_duration\n        \n        if all(not (current_time < end and end_meeting_time > start) for start, end in philip_schedule) and \\\n           all(not (current_time < end and end_meeting_time > start) for start, end in albert_schedule):\n            return current_time.strftime(\"%H:%M\"), end_meeting_time.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Check next half-hour block\n\nmeeting_start, meeting_end = find_meeting_time()\nprint(f\"{{ {meeting_start}:{meeting_end} }}\")\n```",
            "count": "calendar_scheduling_example_169"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the work hours and the meeting duration\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Participants' schedules\n    schedules = {\n        \"Gary\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n        \"Douglas\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Elizabeth\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Daniel\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n    }\n\n    # Gary's preference (not after 10:00)\n    latest_time = datetime.strptime(\"10:00\", \"%H:%M\")\n    \n    # Check for available time slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check against all schedules\n        avail = True\n        for participant, busy_slots in schedules.items():\n            for start, end in busy_slots:\n                if current_time < end and current_time + meeting_duration > start:\n                    avail = False\n                    break\n            if not avail:\n                break\n\n        # Check Gary's preference\n        if avail and current_time <= latest_time:\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Move to the next half hour\n\n# Call the function and print the result\nmeeting_start, meeting_end = find_meeting_time()\nprint(f'{{{meeting_start}:{meeting_end}}}')\n```",
            "count": "calendar_scheduling_example_170"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules in terms of busy times (start, end)\nkevin_busy = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))]\n\ncarolyn_busy = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nstephanie_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nisabella_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Function to find a free slot\ndef find_free_slot(busy_times, duration):\n    current_time = work_start\n    while current_time < work_end:\n        free_slot_start = current_time\n        free_slot_end = current_time + duration\n        \n        # Check if this slot overlaps with any busy times\n        overlaps = False\n        for busy_start, busy_end in busy_times:\n            if free_slot_start < busy_end and free_slot_end > busy_start:\n                overlaps = True\n                break\n        \n        if not overlaps and free_slot_end <= work_end:\n            return free_slot_start, free_slot_end\n        \n        # Move to the next time\n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Check for each participant's busy times\nall_busy_times = kevin_busy + carolyn_busy + stephanie_busy + isabella_busy\nduration = timedelta(minutes=30)\n\nmeeting_time = find_free_slot(all_busy_times, duration)\n\nif meeting_time:\n    print(f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No available slot found.\")\n```",
            "count": "calendar_scheduling_example_171"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Patrick\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kayla\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Carl\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christian\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is available\ndef is_slot_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Finding a suitable time for the meeting\nfor start_hour in range(9, 17):\n    for start_minute in range(0, 60, 30):  # Check every 30 minutes\n        start_time = datetime.strptime(f\"{start_hour:02}:{start_minute:02}\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        if start_time >= work_start and end_time <= work_end:\n            if all(is_slot_available(start_time, end_time, schedules[participant]) for participant in schedules):\n                print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_172"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and duration\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=30)\n\n# Existing schedules in (start_time, end_time) format\nschedules = {\n    \"Jacqueline\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Harold\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Arthur\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to find the available time slot\ndef find_meeting_time(schedules, work_start, work_end, duration):\n    # Create a list of busy intervals\n    busy_intervals = []\n    for participant, intervals in schedules.items():\n        busy_intervals.extend(intervals)\n\n    # Sort the busy intervals\n    busy_intervals.sort()\n\n    # Merge overlapping intervals to get a consolidated busy schedule\n    merged_intervals = []\n    for start, end in busy_intervals:\n        if not merged_intervals or merged_intervals[-1][1] < start:\n            merged_intervals.append((start, end))\n        else:\n            merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end))\n\n    # Finding a free slot for the meeting\n    current_time = work_start\n    for start, end in merged_intervals:\n        # Check if there is a gap between current_time and the start of the busy interval\n        while current_time + duration <= start:\n            if current_time >= work_start and current_time + duration <= work_end:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + duration).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=1)  # Increment time to find a slot\n\n        current_time = max(current_time, end)  # Move current_time to the end of the busy interval\n\n    # Check for remaining time after the last busy slot\n    while current_time + duration <= work_end:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)\n\n# Finding an available meeting time\nmeeting_time = find_meeting_time(schedules, WORK_START, WORK_END, MEETING_DURATION)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_173"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time range and the meeting duration\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules for each participant\nschedules = {\n    \"Kevin\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"David\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Stephen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Helen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules, start_of_day, end_of_day, meeting_duration):\n    free_times = []\n    \n    # Getting free time slots in each participant's schedule\n    for participant, busy_times in schedules.items():\n        current_time = start_of_day\n        free_times_for_participant = []\n        \n        for busy_start, busy_end in busy_times:\n            if current_time < busy_start:\n                free_times_for_participant.append((current_time, busy_start))\n            current_time = max(current_time, busy_end)\n        \n        if current_time < end_of_day:\n            free_times_for_participant.append((current_time, end_of_day))\n        \n        free_times.append(free_times_for_participant)\n\n    # Finding the common free time slot across all participants\n    for free_slot in free_times[0]:  # Take the free slots of the first participant\n        start, end = free_slot\n        \n        for i in range(1, len(free_times)):\n            # Find intersection of free slots\n            new_start = max(start, free_times[i][0][0])  # Starting point from both participants\n            new_end = min(end, free_times[i][0][1])  # End point from both participants\n            \n            if new_start >= new_end:  # No intersection found\n                break\n            \n            # Check if the duration fits\n            if (new_end - new_start) >= meeting_duration:\n                possible_meeting_start = new_start\n                return possible_meeting_start.strftime(\"%H:%M\") + \":\" + (possible_meeting_start + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time(schedules, start_of_day, end_of_day, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_174"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define meeting duration and working hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules\nschedules = {\n    \"Roger\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Daniel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Maria\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Calculate available slots\ndef find_available_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is blocked by any participant\n        available = True\n        for participant, busy_slots in schedules.items():\n            if any(start <= current_time < end for start, end in busy_slots):\n                available = False\n                break\n        \n        # Additionally check if it's after Maria's constraint\n        if available and current_time < datetime.strptime(\"12:30\", \"%H:%M\"):\n            available = False\n            \n        # Check if the time slot is still available after the meeting duration\n        if available and all(not (start < current_time + meeting_duration <= end or\n                                  start <= current_time < end) for busy_slots in schedules.values() for start, end in busy_slots):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)\n\n# Get the proposed meeting time\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_175"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules (blocking times)\nschedules = {\n    'Gary': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Melissa': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Alan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n             (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n             (datetime.strptime('12:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Kevin': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n}\n\n# Function to find a free time slot\ndef find_free_time_slot(schedules, work_start, work_end, meeting_duration):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        if all(not (current_time < blocking_end and meeting_end > blocking_start) \n               for schedule in schedules.values()\n               for blocking_start, blocking_end in schedule):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)\n    return None\n\n# Find and print the free time slot\nfree_time_slot = find_free_time_slot(schedules, work_start, work_end, meeting_duration)\nprint(free_time_slot)\n```",
            "count": "calendar_scheduling_example_176"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and the meeting duration\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=30)\n\n# Define participants' busy schedules (start, end)\nschedules = {\n    \"Richard\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Joseph\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Gabriel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Brenda\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Create a list of busy intervals for all participants\nbusy_intervals = []\nfor participant in schedules.values():\n    busy_intervals.extend(participant)\n\n# Sort intervals by start time\nbusy_intervals.sort(key=lambda x: x[0])\n\n# Function to check if a time slot is available\ndef is_slot_available(start, duration):\n    end = start + duration\n    for busy_start, busy_end in busy_intervals:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = WORK_START\nwhile current_time + MEETING_DURATION <= WORK_END:\n    if is_slot_available(current_time, MEETING_DURATION):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + MEETING_DURATION).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_177"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules\nschedules = {\n    \"Aaron\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Bryan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Philip\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ronald\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find available time slots\ndef find_meeting_time(schedules, meeting_duration):\n    # Create a list of busy time slots from all participants\n    busy_slots = []\n    for participant, slots in schedules.items():\n        busy_slots.extend(slots)\n\n    # Sort the busy slots\n    busy_slots.sort(key=lambda x: x[0])\n\n    # Create a list of free time slots between busy slots\n    free_slots = []\n    current_start = working_hours_start\n\n    for start, end in busy_slots:\n        if current_start < start:\n            free_slots.append((current_start, start))\n        current_start = max(current_start, end)\n\n    if current_start < working_hours_end:\n        free_slots.append((current_start, working_hours_end))\n\n    # Now, find a free slot that can accommodate the meeting duration\n    for start, end in free_slots:\n        if end - start >= meeting_duration:\n            return (start.strftime(\"%H:%M\"), (start + meeting_duration).strftime(\"%H:%M\"))\n\n# Get the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```",
            "count": "calendar_scheduling_example_178"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules (busy times)\njoseph_busy = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\nlaura_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))]\njeffrey_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\njeremy_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy times\nall_busy_times = joseph_busy + laura_busy + jeffrey_busy + jeremy_busy\n\n# Find a suitable time for the meeting\ncurrent_time = start_time\n\nwhile current_time + meeting_duration <= end_time:\n    meeting_end_time = current_time + meeting_duration\n    # Check if current time conflicts with any busy time\n    conflict = False\n    for busy_start, busy_end in all_busy_times:\n        if (current_time < busy_end) and (meeting_end_time > busy_start):\n            conflict = True\n            break\n    if not conflict:\n        print(f\"{{{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}}}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_179"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nschedules = {\n    \"David\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")), \n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ethan\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Bradley\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Natalie\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours for the day\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if the time slot is free for all participants\ndef is_time_slot_free(start_time, duration):\n    end_time = start_time + duration\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Try to find a free time slot\nproposed_time = None\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, meeting_duration):\n        proposed_time = current_time\n        break\n    current_time += timedelta(minutes=1)\n\n# Output the proposed time\nif proposed_time:\n    print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_180"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and durations\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' schedules\nschedules = {\n    \"Evelyn\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Ruth\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Amanda\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n}\n\n# Amanda's restriction\namanda_restriction_start = datetime.strptime(\"16:00\", \"%H:%M\")\n\n# Available time slots collection\navailable_times = []\n\n# Check each time slot in working hours\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    is_available = True\n    meeting_end_time = current_time + meeting_duration\n    \n    # Check against each participant's schedule\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if current_time < busy_end and meeting_end_time > busy_start:\n                is_available = False\n                break\n        # Check Amanda's specific meeting start restriction\n        if participant == \"Amanda\" and current_time < amanda_restriction_start:\n            is_available = False\n            \n    if is_available:\n        available_times.append((current_time, meeting_end_time))\n        \n    # Move to the next time slot\n    current_time += timedelta(minutes=1)\n\n# Select the first available time slot\nif available_times:\n    start_time, end_time = available_times[0]\n    proposed_time = f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    print(proposed_time)\n```\n",
            "count": "calendar_scheduling_example_181"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nschedules = {\n    \"Emma\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Ann\": [],\n    \"Doris\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), work_end),\n    ],\n    \"Randy\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), work_end),\n    ]\n}\n\n# Function to find a suitable time\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    time_slot_start = work_start\n    \n    while time_slot_start + meeting_duration <= work_end:\n        time_slot_end = time_slot_start + meeting_duration\n        if all(not (time_slot_start < end and time_slot_end > start) for busy_times in schedules.values() for start, end in busy_times):\n            # Check Doris' constraint to avoid after 12:30\n            if time_slot_end > datetime.strptime(\"12:30\", \"%H:%M\"):\n                break\n            return time_slot_start.strftime(\"%H:%M\") + ':' + time_slot_end.strftime(\"%H:%M\")\n        time_slot_start += timedelta(minutes=30)\n\nresult = find_meeting_time(schedules, work_start, work_end, meeting_duration)\nprint(result)\n```",
            "count": "calendar_scheduling_example_182"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define schedules (busy times)\nschedules = {\n    \"Benjamin\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Philip\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Jessica\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Ashley\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Helper function to check if a time range is available for all participants\ndef is_time_available(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Find suitable time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_available(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=15)  # Increment the start time by 15 minutes\n\nmeeting_start, meeting_end = find_meeting_time()\nprint(f'{{{meeting_start}:{meeting_end}}}')\n```",
            "count": "calendar_scheduling_example_183"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    start_work_hour = time(9, 0)\n    end_work_hour = time(17, 0)\n    \n    current_time = datetime.combine(datetime.today(), start_work_hour)\n    end_time = datetime.combine(datetime.today(), end_work_hour)\n\n    while current_time + meeting_duration <= end_time:\n        meeting_start = current_time.time()\n        meeting_end = (current_time + meeting_duration).time()\n        \n        if all(not is_time_conflicted(meeting_start, meeting_end, schedule) for schedule in schedules):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n    \n    return None\n\ndef is_time_conflicted(meeting_start, meeting_end, schedule):\n    for busy_start, busy_end in schedule:\n        if (meeting_start < busy_end and meeting_end > busy_start):\n            return True\n    return False\n\nschedules = [\n    [(time(9, 30), time(10, 0)), (time(12, 30), time(14, 30)), (time(15, 30), time(16, 0))],  # Raymond\n    [],  # Sophia\n    [(time(9, 0), time(9, 30)), (time(10, 30), time(13, 0)), (time(14, 30), time(15, 0)), (time(15, 30), time(17, 0))],  # Lori\n    [(time(9, 0), time(13, 30)), (time(14, 0), time(15, 0)), (time(16, 0), time(16, 30))]   # Dorothy\n]\n\nmeeting_duration = timedelta(minutes=30)\n\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_184"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    \"Kimberly\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Megan\": [],\n    \"Marie\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Diana\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Create a list of all busy times\nbusy_times = []\nfor busy_schedule in schedules.values():\n    busy_times.extend(busy_schedule)\n\n# Function to check if a time slot is free\ndef is_free(start, end):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find suitable time for the meeting\nfor hour in range(work_start.hour, work_end.hour):\n    start_time = datetime.strptime(f'{hour:02d}:00', '%H:%M')\n    if start_time < work_start:\n        start_time = work_start\n\n    while start_time + meeting_duration <= work_end:\n        # Check if the time slot is free\n        if is_free(start_time, start_time + meeting_duration):\n            # For Megan's preference to avoid meetings before 10:00\n            if start_time >= datetime.strptime('10:00', '%H:%M'):\n                proposed_time = f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n                print(proposed_time)\n                break\n        start_time += timedelta(minutes=30)\n\n        if 'proposed_time' in locals():\n            break\n```",
            "count": "calendar_scheduling_example_185"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, time, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' availability (start, end)\nparticipants_availability = {\n    \"Richard\": [(time(9, 0), time(17, 0))],\n    \"Frances\": [(time(9, 0), time(17, 0))],\n    \"Andrea\": [(time(9, 0), time(9, 30)),\n                (time(10, 0), time(10, 30)),\n                (time(14, 0), time(14, 30)),\n                (time(16, 0), time(17, 0))],\n    \"Cheryl\": [(time(9, 0), time(10, 30)),\n               (time(12, 30), time(13, 0)),\n               (time(14, 0), time(14, 30)),\n               (time(15, 0), time(16, 0)),\n               (time(16, 30), time(17, 0))],\n}\n\n# Function to find available time slot\ndef find_meeting_time(participants_availability, meeting_duration):\n    for start_hour in range(9, 17):\n        for start_minute in [0, 30]:\n            start_time = time(start_hour, start_minute)\n            end_time = (datetime.combine(datetime.today(), start_time) + meeting_duration).time()\n\n            # Check if this time range is free for all participants\n            if all(any(start <= start_time < end and start < end_time <= end for start, end in availability)\n                   for availability in participants_availability.values()):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Finding a suitable time\nmeeting_time = find_meeting_time(participants_availability, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_186"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participants' schedules (busy times)\nschedules = {\n    \"Douglas\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Gloria\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), work_end),\n    ],\n    \"Peter\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), work_end),\n    ],\n    \"Ryan\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), work_end),\n    ],\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef is_time_available(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Find an available time slot\ndef find_available_slot():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the slot is available\n        if is_time_available(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Increment by 1 minute\n    return None\n\n# Get the proposed time\nproposed_time = find_available_slot()\n\n# Output the proposed time\nprint(f\"Proposed time for the meeting: {proposed_time}\")\n```",
            "count": "calendar_scheduling_example_187"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' schedules\nschedules = {\n    \"Beverly\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Brenda\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Lori\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Ronald\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Preference for Beverly to meet after 15:00\nmeeting_start_time = datetime.strptime(\"15:00\", \"%H:%M\")\n\n# Create a list of all the busy intervals\nbusy_intervals = []\nfor busy_times in schedules.values():\n    busy_intervals.extend(busy_times)\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if current_time >= meeting_start_time and all(not (current_time < end and end_time > start) for start, end in busy_intervals):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_188"
        },
        {
            "final_program_time": "{9:00:9:00}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\n# Define the busy times for each participant\nschedules = {\n    \"Judy\": [(9, 30, 10, 0), (15, 0, 15, 30)],\n    \"Lori\": [(14, 30, 15, 0), (16, 0, 16, 30)],\n    \"Andrea\": [(9, 0, 9, 30), (10, 30, 11, 30), (12, 30, 13, 0), (13, 30, 14, 0), \n               (15, 0, 16, 0), (16, 30, 17, 0)],\n    \"Mark\": [(9, 30, 14, 0), (14, 30, 15, 0), (16, 0, 17, 0)]\n}\n\n# Meeting duration\nmeeting_duration = 30 # in minutes\n\n# Define work hours\nwork_start = (9, 0)\nwork_end = (17, 0)\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Create a list of all time slots in work hours\n    busy_times = []\n    for participant, busy_slots in schedules.items():\n        busy_times.extend(busy_slots)\n\n    # Check all intervals for available time slots\n    available_times = []\n    current_start = work_start\n\n    for hour in range(work_start[0], work_end[0]):\n        for minute in range(0, 60):\n            if (hour, minute) in busy_times: \n                continue\n            \n            # Check for meeting time\n            next_slot = (hour, minute + meeting_duration // 60)\n            if next_slot[1] >= 60:\n                next_slot = (next_slot[0] + 1, next_slot[1] - 60)\n            \n            if next_slot[0] >= work_end[0] or next_slot[1] >= 60:\n                continue\n            \n            if not any(check_conflict((hour, minute), next_slot, busy) for busy in busy_times):\n                available_times.append((hour, minute, next_slot[0], next_slot[1]))\n    \n    # Return the first valid time slot found\n    if available_times:\n        return available_times[0]\n    return None\n\ndef check_conflict(start, end, busy):\n    busy_start = (busy[0], busy[1])\n    busy_end = (busy[2], busy[3])\n    \n    # Check for overlap\n    if start < busy_end and end > busy_start:\n        return True\n    return False\n\n# Finding a suitable time slot\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\nif meeting_time:\n    start_hour, start_minute, end_hour, end_minute = meeting_time\n    print(f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\")\n```\n",
            "count": "calendar_scheduling_example_189"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    'Cheryl': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Raymond': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Karen': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Joan': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n             (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n             (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime('9:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find available time for the meeting\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Initialize the free time slots for all participants\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check if this time slot is free for all participants\n        is_free = True\n        for busy_slots in schedules.values():\n            for start, end in busy_slots:\n                if meeting_start < end and meeting_end > start:\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        # Check Raymond's preference\n        if is_free and (meeting_end <= datetime.strptime('11:30', '%H:%M')):\n            return meeting_start.strftime('%H:%M'), meeting_end.strftime('%H:%M')\n        \n        # Move to next time slot\n        current_time += timedelta(minutes=30)\n    \n    return None, None\n\n# Find the meeting time\nstart_time, end_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\n\n# Printing the result\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_190"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\n# This script calculates a suitable time for a meeting based on participants' schedules\n\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 AM in minutes\n    work_end = 17 * 60    # 5:00 PM in minutes\n    meeting_duration = 30  # Duration in minutes\n\n    # Participant schedules in minutes\n    rachel_busy = [(9 * 60, 9 * 60 + 30), (10 * 60 + 30, 11 * 60), \n                   (12 * 60, 12 * 60 + 30), (13 * 60 + 30, 15 * 60), \n                   (15 * 60 + 30, 16 * 60 + 30)]\n    \n    andrea_busy = [(9 * 60 + 30, 11 * 60 + 30), (12 * 60, 13 * 60 + 30), \n                   (14 * 60, 15 * 60 + 30), (16 * 60, 17 * 60)]\n    \n    busy_times = rachel_busy + andrea_busy\n\n    # Create a list of free time slots\n    free_times = []\n    last_end = work_start\n\n    # Check free time between busy slots and work hours\n    for start, end in sorted(busy_times):\n        if last_end + meeting_duration <= start:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    # Check for free time after the last busy slot\n    if last_end + meeting_duration <= work_end:\n        free_times.append((last_end, work_end))\n\n    # Find a suitable time slot\n    for start, end in free_times:\n        if end - start >= meeting_duration:\n            proposed_start = start\n            proposed_end = start + meeting_duration\n            return f\"{proposed_start // 60:02}:{proposed_start % 60:02}:{proposed_end // 60:02}:{proposed_end % 60:02}\"\n\n# Output the proposed time in the requested format\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_191"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    'Thomas': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n               \n    'Amanda': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n               \n    'Joe': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n            \n    'Christina': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find an available time slot\ndef find_meeting_time(schedules, duration, work_start, work_end):\n    free_times = []\n    \n    # Create a full day's schedule from work_start to work_end\n    current_time = work_start\n    while current_time + duration <= work_end:\n        busy = False\n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if busy_start <= current_time < busy_end:\n                    busy = True\n                    break\n            if busy:\n                break\n        if not busy:\n            free_times.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every half hour\n\n    if free_times:\n        return free_times[0]\n\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\n\n# Output the proposed time in the format HH:MM:HH:MM\nstart_time_str = meeting_time.strftime(\"%H:%M\")\nend_time_str = (meeting_time + meeting_duration).strftime(\"%H:%M\")\noutput = f'{{{start_time_str}:{end_time_str}}}'\nprint(output)\n```",
            "count": "calendar_scheduling_example_192"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant\nschedules = {\n    \"Lisa\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Joshua\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \n    \"James\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Steven\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    free_times = []\n    \n    # Generate a list of busy times\n    busy_times = []\n    for busy_slots in schedules.values():\n        busy_times.extend(busy_slots)\n    \n    # Merge overlapping busy times\n    busy_times.sort(key=lambda x: x[0])  # Sort by start time\n    merged_busy = []\n    last_start, last_end = busy_times[0]\n\n    for start, end in busy_times[1:]:\n        if start <= last_end:  # Overlap detected\n            last_end = max(last_end, end)\n        else:\n            merged_busy.append((last_start, last_end))\n            last_start, last_end = start, end\n    merged_busy.append((last_start, last_end))  # Add last interval\n\n    # Find free time slots\n    current_start = work_start\n    for start, end in merged_busy:\n        if current_start + meeting_duration <= start:  # Check if slot is available\n            free_times.append((current_start, current_start + meeting_duration))\n        current_start = max(current_start, end)\n\n    # Check for free time at the end of the work day\n    if current_start + meeting_duration <= work_end:\n        free_times.append((current_start, current_start + meeting_duration))\n    \n    return free_times\n\n# Finding free time slots\npossible_meeting_times = find_meeting_time(schedules, work_start, work_end, meeting_duration)\n\n# Output the first suitable time slot in the required format\nif possible_meeting_times:\n    meeting_start, meeting_end = possible_meeting_times[0]\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_193"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef is_time_slot_free(start, end, schedules):\n    for busy_start, busy_end in schedules:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\ndef find_meeting_time(participants, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a combined busy schedule\n    combined_busy_schedule = []\n    for participant in participants:\n        combined_busy_schedule.extend(participant)\n    \n    combined_busy_schedule.sort()\n\n    # Check for available time slots in 30-minute increments\n    current_time = work_start\n    while current_time + timedelta(minutes=meeting_duration) <= work_end:\n        if is_time_slot_free(current_time, current_time + timedelta(minutes=meeting_duration), combined_busy_schedule):\n            return current_time.strftime(\"%H:%M\") + ':' + (current_time + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Participants' busy schedules\ndennis_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nvictoria_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nsamantha_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\njeffrey_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nparticipants_schedules = [dennis_schedule, victoria_schedule, samantha_schedule, jeffrey_schedule]\nmeeting_duration_minutes = 30\n\nproposed_time = find_meeting_time(participants_schedules, meeting_duration_minutes)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_194"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nschedules = {\n    \"Aaron\": [(working_hours_start, working_hours_end)],\n    \"Donna\": [(working_hours_start, datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), working_hours_end)],\n    \"Andrea\": [(working_hours_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), working_hours_end)],\n    \"Dylan\": [(working_hours_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), working_hours_end)],\n}\n\n# Aaron's preference\naaron_preference_cutoff = datetime.strptime(\"10:30\", \"%H:%M\")\n\n# Find available time slots\navailable_slots = []\n\nfor start, end in schedules[\"Aaron\"]:\n    available_slots.append((start, end))\n\nfor participant, busy_times in schedules.items():\n    if participant == \"Aaron\":\n        continue\n    new_available_slots = []\n    for start, end in available_slots:\n        for busy_start, busy_end in busy_times:\n            if busy_start > start and busy_end < end:\n                # The busy time is within the available time, split the slot\n                new_available_slots.append((start, busy_start))\n                new_available_slots.append((busy_end, end))\n            elif busy_start <= start and busy_end >= end:\n                # The busy time completely overlaps the available time\n                break\n            elif busy_start <= start and busy_end > start:\n                # The busy time starts before the available time\n                new_available_slots.append((busy_end, end))\n                break\n            elif busy_start < end and busy_end >= end:\n                # The busy time ends after the available time\n                new_available_slots.append((start, busy_start))\n                break\n        else:\n            # No overlap\n            new_available_slots.append((start, end))\n    available_slots = new_available_slots\n\n# Check slots against Aaron's preference\nfinal_slots = []\n\nfor start, end in available_slots:\n    if end - start >= meeting_duration:\n        # Find time for meeting\n        meeting_start = start\n        while meeting_start + meeting_duration <= end:\n            if meeting_start >= aaron_preference_cutoff:\n                final_slots.append(meeting_start)\n            meeting_start += timedelta(minutes=1)\n\n# Select the first valid time slot\nif final_slots:\n    proposed_time = final_slots[0]\n    print(f\"{proposed_time.time().strftime('%H:%M')}:{(proposed_time + meeting_duration).time().strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_195"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedule for each participant using sets of busy times\nschedules = {\n    \"Jonathan\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Lisa\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Jerry\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Emma\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is available for all participants\n        is_time_available = True\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if current_time < end and current_time + meeting_duration > start:\n                    is_time_available = False\n                    break\n            if not is_time_available:\n                break\n        \n        if is_time_available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        # Increment current time by 15 minutes\n        current_time += timedelta(minutes=15)\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_196"
        },
        {
            "final_program_time": "{15:00:15:00}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define each participant's busy schedule\naustin_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ndonna_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))]\n\nbobby_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy schedules into one\nall_busy_times = austin_busy + donna_busy + bobby_busy\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(start_time, duration):\n    end_time = start_time + duration\n    for busy_start, busy_end in all_busy_times:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Find an available time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if can_schedule_meeting(current_time, meeting_duration):\n            return current_time.strftime(\"%H:%M:%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Output proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_197"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if the proposed meeting time works for all participants\ndef is_time_suitable(meeting_start, meeting_duration, schedules):\n    meeting_end = meeting_start + meeting_duration\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (meeting_start < busy_end and meeting_end > busy_start):\n                return False\n    return True\n\n# Define the existing schedules for each participant\nschedules = {\n    'Keith': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n              (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 12, 0)),\n              (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 30))],\n    \n    'Wayne': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n              (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n              (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n              (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30))],\n\n    'Harold': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n               (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n               (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30))],\n\n    'Ralph': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n              (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 15, 30)),\n              (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30))]\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Search for a suitable meeting time\nfor hour in range(9, 17):  # Working hours from 9 AM to 5 PM\n    for minute in [0, 30]:  # Check every half hour\n        proposed_time = datetime(2023, 10, 2, hour, minute)\n        if proposed_time < datetime(2023, 10, 2, 16, 0) and hour < 16:\n            continue  # Wayne prefers no meetings before 16:00\n        if is_time_suitable(proposed_time, meeting_duration, schedules):\n            print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_198"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules and constraints\nschedules = {\n    'Elizabeth': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                  (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \n    'Carol': [],  # Free all day\n\n    'Christian': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \n    'Isabella': [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\n\n# Function to find available time slot\ndef find_available_time():\n    all_unavailable_times = []\n    \n    # Collect all unavailable times\n    for participant, busy_times in schedules.items():\n        all_unavailable_times.extend(busy_times)\n    \n    # Sort the unavailable times\n    all_unavailable_times.sort(key=lambda x: x[0])\n\n    # Check for free slots\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        is_available = True\n        \n        # Check against all busy times\n        for busy_start, busy_end in all_unavailable_times:\n            if busy_start <= current_time < busy_end or busy_start < current_time + meeting_duration <= busy_end:\n                is_available = False\n                break\n        \n        # Check Carol's preference\n        if current_time < datetime.strptime('12:30', '%H:%M'):\n            is_available = False\n        \n        if is_available:\n            return current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M')\n        \n        current_time += timedelta(minutes=30)  # Increase time block by 30 minutes\n\n# Get available time\nstart, end = find_available_time()\nprint(f'{{{start}:{end}}}')\n```",
            "count": "calendar_scheduling_example_199"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for each participant\nelijah_busy = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n\nwilliam_busy = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n\njeremy_busy = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\ntimothy_busy = [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n\n# Combine all busy times\nbusy_times = elijah_busy + william_busy + jeremy_busy + timothy_busy\n\ndef is_free(start, end):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_free(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_200"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\nschedules = {\n    \"Sarah\": [],\n    \"Sarah\": [(\"12:00\", \"12:30\"), (\"15:00\", \"15:30\")],\n    \"Shirley\": [(\"13:30\", \"14:00\"), (\"14:30\", \"15:00\")],\n    \"Harold\": [(\"09:00\", \"10:00\"), (\"10:30\", \"12:30\"), (\"13:00\", \"17:00\")],\n    \"Terry\": [(\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"17:00\")]\n}\n\n# Convert schedule times into datetime objects\nfor name, times in schedules.items():\n    schedules[name] = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in times]\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    # Create a list of all participants' busy times\n    busy_slots = []\n    for times in schedules.values():\n        busy_slots.extend(times)\n    \n    # Sort the busy slots\n    busy_slots.sort()\n\n    # Check for free slots in the work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if not any(start < end_time and end > current_time for start, end in busy_slots):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Increment by one minute to find the next available time\n\n    return None\n\n# Find a time for the meeting\nmeeting_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_201"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules of each participant\nlawrence_schedule = []  # no meetings\nchristine_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\nbarbara_schedule = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\nstephanie_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                      (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nhannah_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                   (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Function to check if a time slot is free for all participants\ndef is_slot_free(start, end):\n    for schedule in [christine_schedule, barbara_schedule, stephanie_schedule, hannah_schedule]:\n        for busy_start, busy_end in schedule:\n            if (start < busy_end and end > busy_start):  # overlap check\n                return False\n    return True\n\n# Search for a free slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    next_time = current_time + meeting_duration\n    if is_slot_free(current_time, next_time):\n        print(f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_202"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Availability blocks (busy times)\nelijah_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\njanet_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nbrian_busy = []\n\ncarl_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\ntimothy_busy = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy schedules\nall_busy = elijah_busy + janet_busy + carl_busy + timothy_busy\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = working_start\n    \n    while current_time + meeting_duration <= working_end:\n        end_time = current_time + meeting_duration\n        \n        # Check if the proposed time conflicts with the busy schedules\n        conflict = any(start < end_time and current_time < end for start, end in all_busy)\n        \n        if not conflict:\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n    \n    return None\n\n# Get proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_203"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the blocked times for each participant\nschedules = {\n    \"Benjamin\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Juan\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Heather\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Nathan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Jacob\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_time_free(start_time, end_time):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Find a suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_time_free(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_204"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules of each participant\nschedules = {\n    'Julia': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Joshua': [],\n    'Nicholas': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'David': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Melissa': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Function to find available time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        if all(not (current_time < start < meeting_end or current_time < end < meeting_end) for participant in schedules.values() for start, end in participant):\n            return current_time.strftime('%H:%M'), meeting_end.strftime('%H:%M')\n        current_time += timedelta(minutes=30)\n    return None\n\n# Get proposed meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time found\")\n```",
            "count": "calendar_scheduling_example_205"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"Shirley\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Jacob\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Stephen\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Margaret\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Mason\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define a function to check if a time slot is free for all participants\ndef is_free(start_time, duration):\n    end_time = start_time + duration\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Check available time slots\nstart_of_day = datetime.strptime(\"14:30\", \"%H:%M\")  # start after Margaret's preferred time\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Try to find a suitable time slot\ncurrent_time = start_of_day\nwhile current_time + meeting_duration <= end_of_day:\n    if is_free(current_time, meeting_duration):\n        # If a time slot is found\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{{{proposed_start}:{proposed_end}}}\")\n        break\n    current_time += timedelta(minutes=15)  # check next available time slot\n```",
            "count": "calendar_scheduling_example_206"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert string time to datetime\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\n# Function to convert datetime to string time\ndef datetime_to_time(dt):\n    return dt.strftime('%H:%M')\n\n# Define participant calendars with their busy slots\nparticipants = {\n    \"Walter\": [],\n    \"Danielle\": [],\n    \"Julia\": [\"09:30-10:00\", \"10:30-11:00\", \"13:30-14:00\", \"16:00-16:30\"],\n    \"Samuel\": [\"09:00-11:00\", \"11:30-12:30\", \"13:00-14:30\", \"15:00-15:30\", \"16:00-17:00\"],\n    \"Lori\": [\"10:00-10:30\", \"11:00-11:30\", \"12:00-12:30\", \"13:00-14:30\", \"15:00-17:00\"],\n}\n\n# Define working hours and meeting duration\nstart_of_day = time_to_datetime(\"09:00\")\nend_of_day = time_to_datetime(\"17:00\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available time slots\ndef find_available_time():\n    # Create a list of all busy slots\n    busy_slots = []\n    for busy_times in participants.values():\n        for times in busy_times:\n            start, end = times.split('-')\n            busy_slots.append((time_to_datetime(start), time_to_datetime(end)))\n\n    # Sort busy slots\n    busy_slots.sort()\n\n    # Check for available slots\n    current_time = start_of_day\n    while current_time + meeting_duration <= end_of_day:\n        slot_end = current_time + meeting_duration\n        \n        # Check if current_time slot overlaps with busy slots\n        if all(current_time >= end or slot_end <= start for start, end in busy_slots):\n            return f\"{datetime_to_time(current_time)}:{datetime_to_time(slot_end)}\"\n        \n        # Move to next time slot\n        current_time += timedelta(minutes=1)\n\n# Call function to display available time for meeting\navailable_time = find_available_time()\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_207"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time range and the meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nschedules = {\n    \"Jesse\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Nancy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Isabella\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Harold\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Linda\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to check if a proposed meeting time is free for all participants\ndef is_time_free(start, duration, schedules):\n    end = start + duration\n    for busy_times in schedules.values():\n        for (busy_start, busy_end) in busy_times:\n            if (start < busy_end and end > busy_start):  # There's an overlap\n                return False\n    return True\n\n# Attempt to find a time that fits for all participants\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        if is_time_free(current_time, meeting_duration, schedules):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)\n    return None\n\n# Get the suitable meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_208"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules (busy times)\nschedules = {\n    'Michael': [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    'Samuel': [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Aaron': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Judith': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Kevin': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\ndef is_time_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_free(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next half-hour increment\n\nstart_time, end_time = find_meeting_time()\nresult = f'{{{start_time}:{end_time}}}'\nprint(result)\n```",
            "count": "calendar_scheduling_example_209"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting participants' schedules\nschedules = {\n    \"Raymond\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Daniel\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \n    \"Julia\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \n    \"Laura\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Willie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Define the meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is available for all participants\ndef is_slot_available(start, end):\n    for busy_times in schedules.values():\n        if any(start < busy_end and end > busy_start for busy_start, busy_end in busy_times):\n            return False\n    return True\n\n# Iterate through the possible meeting times\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_slot_available(current_time, current_time + meeting_duration):\n        print(f'{current_time.strftime(\"%H:%M\")}:{(current_time + meeting_duration).strftime(\"%H:%M\")}')\n        break\n    current_time += timedelta(minutes=5)\n```",
            "count": "calendar_scheduling_example_210"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of busy intervals for each participant\n    busy_intervals = []\n    for schedule in participants.values():\n        for busy_time in schedule:\n            busy_intervals.append(busy_time)\n\n    # Merge busy intervals to find free slots\n    busy_intervals.sort()\n    \n    # Find free time slots\n    free_slots = []\n    current_time = work_start\n    \n    for busy_start, busy_end in busy_intervals:\n        if current_time < busy_start:\n            free_slots.append((current_time, busy_start))\n        current_time = max(current_time, busy_end)\n    \n    # Check for free time at the end of the workday\n    if current_time < work_end:\n        free_slots.append((current_time, work_end))\n\n    # Now check for available slots with the meeting duration\n    for start, end in free_slots:\n        if (end - start) >= timedelta(minutes=meeting_duration):\n            meeting_start = start\n            meeting_end = start + timedelta(minutes=meeting_duration)\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n\nparticipants_schedules = {\n    \"Douglas\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Mary\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    \"Billy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Russell\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Judy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration_minutes = 30\nproposed_time = find_meeting_time(participants_schedules, meeting_duration_minutes)\nprint(proposed_time)  # Example output: \"12:00:12:30\"\n```",
            "count": "calendar_scheduling_example_211"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy times for each participant\nbusy_times = {\n    \"Katherine\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Carl\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    ],\n    \"Charles\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Gerald\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Stephanie\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n}\n\n# Specify the duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours to check for free time slots\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Finding available time slots\ndef find_available_slot():\n    time = work_start\n    while time + meeting_duration <= work_end:\n        free = True\n        for busy in busy_times.values():\n            for start, end in busy:\n                if start < time + meeting_duration and end > time:\n                    free = False\n                    break\n            if not free:\n                break\n        \n        if free:\n            return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n        \n        time += timedelta(minutes=30)\n\n# Output the proposed time for the meeting\nproposed_time = find_available_slot()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_212"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules.\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\nschedules = {\n    'Jeremy': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Diana': [],\n    'Beverly': [],\n    'Diane': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Megan': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to check if the proposed meeting time is available for all participants.\ndef is_time_available(start, end):\n    for key, busy_slots in schedules.items():\n        for busy_start, busy_end in busy_slots:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\n# Check all possible meeting slots.\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_available(current_time, current_time + meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{{{proposed_start}:{proposed_end}}}\")\n        break\n    current_time += timedelta(minutes=30) # Increment time by 30 minutes\n```",
            "count": "calendar_scheduling_example_213"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define participant schedules\nschedules = {\n    'Ethan': [\n        (work_start + timedelta(minutes=0), work_start + timedelta(minutes=30)),  # 09:00-09:30\n        (work_start + timedelta(hours=1, minutes=30), work_start + timedelta(hours=1, minutes=50)),  # 11:30-12:00\n        (work_start + timedelta(hours=2, minutes=0), work_start + timedelta(hours=2, minutes=30)),  # 13:00-13:30\n        (work_start + timedelta(hours=7, minutes=30), work_end)  # 16:30-17:00\n    ],\n    'Adam': [\n        (work_start + timedelta(minutes=30), work_start + timedelta(hours=1)),  # 09:30-10:00\n        (work_start + timedelta(hours=1, minutes=30), work_start + timedelta(hours=2)),  # 10:30-11:00\n        (work_start + timedelta(hours=2, minutes=0), work_start + timedelta(hours=2, minutes=30)),  # 11:30-12:00\n        (work_start + timedelta(hours=2, minutes=0), work_start + timedelta(hours=3)),  # 13:00-14:00\n        (work_start + timedelta(hours=6), work_start + timedelta(hours=7, minutes=30))  # 15:00-16:30\n    ],\n    'Jordan': [\n        (work_start, work_start + timedelta(hours=1, minutes=30)),  # 09:00-10:30\n        (work_start + timedelta(hours=1, minutes=30), work_start + timedelta(hours=2)),  # 11:00-11:30\n        (work_start + timedelta(hours=2), work_start + timedelta(hours=2, minutes=30)),  # 12:00-12:30\n        (work_start + timedelta(hours=2, minutes=30), work_start + timedelta(hours=4)),  # 13:00-14:30\n        (work_start + timedelta(hours=5), work_start + timedelta(hours=5, minutes=30)),  # 15:00-15:30\n        (work_start + timedelta(hours=6), work_start + timedelta(hours=7, minutes=30))  # 16:00-16:30\n    ],\n    'Donna': [],\n    'Susan': []\n}\n\n# Find available time slots\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a list of all busy times\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Combine overlapping busy times\n    combined_busy = []\n    current_start = None\n    current_end = None\n\n    for start, end in busy_times:\n        if current_start is None:\n            current_start = start\n            current_end = end\n        elif start <= current_end:\n            current_end = max(current_end, end)\n        else:\n            combined_busy.append((current_start, current_end))\n            current_start = start\n            current_end = end\n    if current_start is not None:\n        combined_busy.append((current_start, current_end))\n\n    # Check available times\n    last_end = work_start\n    for start, end in combined_busy:\n        if last_end + meeting_duration <= start:\n            return last_end.strftime('%H:%M') + ':' + (last_end + meeting_duration).strftime('%H:%M')\n        last_end = max(last_end, end)\n\n    # Check for available slot at the end of the work day\n    if last_end + meeting_duration <= work_end:\n        return last_end.strftime('%H:%M') + ':' + (last_end + meeting_duration).strftime('%H:%M')\n\n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_214"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules in terms of busy time slots\nschedules = {\n    'Cynthia': [(\"09:30\", \"10:30\"), (\"11:30\", \"12:00\"), (\"13:00\", \"13:30\"), (\"15:00\", \"16:00\")],\n    'Lauren': [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"13:00\", \"13:30\"),\n               (\"14:00\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    'Robert': [(\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:30\"), (\"14:00\", \"16:00\")],\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available time slot\ndef find_meeting_time():\n    # Generate busy intervals for everyone\n    busy_times = []\n    for person in schedules:\n        for start, end in schedules[person]:\n            busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Check for free time slots\n    previous_end = work_start\n    \n    for busy_start, busy_end in busy_times:\n        # Check if there's enough room before the next busy time\n        if previous_end + timedelta(minutes=meeting_duration) <= busy_start:\n            # Format and return the available time slot\n            meeting_start = previous_end\n            meeting_end = previous_end + timedelta(minutes=meeting_duration)\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        # Move the previous_end marker\n        previous_end = max(previous_end, busy_end)\n    \n    # Check after the last busy time until the end of the work day\n    if previous_end + timedelta(minutes=meeting_duration) <= work_end:\n        meeting_start = previous_end\n        meeting_end = previous_end + timedelta(minutes=meeting_duration)\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No available time\"\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_215"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules (busy times)\nschedules = {\n    \"Kyle\": [(start_time, end_time)],\n    \"Kathleen\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n    ],\n    \"Ashley\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Christian\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)\n    ],\n    \"Matthew\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)\n    ]\n}\n\n# Find available time slots for the meeting\ndef find_meeting_time(schedules, start_time, end_time, meeting_duration):\n    # Create a list of busy times across all participants\n    busy_times = []\n    for participant, times in schedules.items():\n        for start, end in times:\n            busy_times.append((start, end))\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Merge overlapping busy times\n    merged_busy_times = []\n    for start, end in busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\n            merged_busy_times.append((start, end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n    \n    # Find gaps in the schedule\n    free_times = []\n    current_time = start_time\n    \n    for start, end in merged_busy_times:\n        if current_time + meeting_duration <= start:\n            free_times.append((current_time, start))\n        current_time = max(current_time, end)\n    \n    if current_time + meeting_duration <= end_time:\n        free_times.append((current_time, end_time))\n    \n    # Return the first available slot\n    for start, end in free_times:\n        if end - start >= meeting_duration:\n            return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, start_time, end_time, meeting_duration)\nprint(proposed_time)  # Output the proposed time in HH:MM:HH:MM format\n```",
            "count": "calendar_scheduling_example_216"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules (blocked time slots)\nschedules = {\n    \"Lauren\": [(\"09:30\", \"10:00\"), (\"14:30\", \"15:00\")],\n    \"Willie\": [(\"09:30\", \"11:30\"), (\"12:30\", \"14:00\"), (\"15:00\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Lori\": [(\"09:30\", \"10:00\"), (\"11:00\", \"11:30\"), (\"12:00\", \"13:30\"), (\"14:00\", \"14:30\"), (\"15:00\", \"16:00\")],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free for all\ndef is_time_slot_free(start, duration):\n    end = start + duration\n    for bookings in schedules.values():\n        for start_time, end_time in bookings:\n            booked_start = datetime.strptime(start_time, \"%H:%M\")\n            booked_end = datetime.strptime(end_time, \"%H:%M\")\n            if (start < booked_end and end > booked_start):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_start}:{proposed_end}\")\n        break\n    current_time += timedelta(minutes=30)  # Check the next half-hour slot\n```",
            "count": "calendar_scheduling_example_217"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules (busy times)\nschedules = {\n    \"Sharon\": [(\"12:00\", \"13:00\"), (\"13:30\", \"14:30\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Elizabeth\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\")],\n    \"Danielle\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"12:00\", \"12:30\"), (\"13:30\", \"14:00\")],\n    \"David\": [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:00\", \"14:30\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Charles\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:00\", \"13:30\"), (\"15:00\", \"17:00\")]\n}\n\n# Convert busy times to datetime objects\ndef convert_to_datetime(busy_times):\n    return [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in busy_times]\n\n# Collect all busy times into a single list\nall_busy_times = []\nfor busy in schedules.values():\n    all_busy_times.extend(convert_to_datetime(busy))\n\n# Sort the busy times\nall_busy_times.sort(key=lambda x: x[0])\n\n# Function to check if a proposed time is free\ndef is_time_free(start, end):\n    for busy_start, busy_end in all_busy_times:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_free(current_time, current_time + meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_start}:{proposed_end}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_218"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Thomas\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"14:30\", \"15:30\")],\n    \"Terry\": [(\"12:00\", \"12:30\"), (\"13:00\", \"14:00\"), (\"15:00\", \"15:30\")],\n    \"Kenneth\": [(\"11:30\", \"12:00\"), (\"12:30\", \"13:30\"), (\"14:00\", \"14:30\"), (\"16:00\", \"17:00\")],\n    \"Andrew\": [(\"09:30\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"14:00\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    \"Sharon\": [(\"09:00\", \"10:30\"), (\"11:30\", \"13:00\"), (\"13:30\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"16:30\")]\n}\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if the time range is free for all participants\ndef is_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            busy_start_dt = datetime.strptime(busy_start, \"%H:%M\")\n            busy_end_dt = datetime.strptime(busy_end, \"%H:%M\")\n            if not (end_time <= busy_start_dt or start_time >= busy_end_dt):\n                return False\n    return True\n\n# Finding a suitable time for the meeting\nproposed_time = None\nfor hour in range(work_start.hour, work_end.hour):\n    for minute in range(0, 60, 30):  # Check every 30 minutes\n        start_time = datetime.strptime(f\"{hour:02}:{minute:02}\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if start_time >= work_start and end_time <= work_end:\n            if is_free(start_time, end_time):\n                proposed_time = f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n                break\n    if proposed_time:\n        break\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_219"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nmason_free_time = [(working_hours_start, working_hours_end)]\nevelyn_free_time = [(working_hours_start, working_hours_end)]\njose_free_time = [(working_hours_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), working_hours_end)]\n\nhelen_free_time = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), working_hours_end)]\n\nbeverly_free_time = [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n                     (datetime.strptime(\"17:00\", \"%H:%M\"), working_hours_end)]\n\n# Find common free time slots among all participants\ndef find_common_time_slots(*schedules):\n    common_slots = []\n    for time_range in schedules[0]:  # Start with the first person's free time\n        start, end = time_range\n        for other_schedule in schedules[1:]:\n            new_common_slots = []\n            for other_start, other_end in other_schedule:\n                # Overlapping time calculation\n                common_start = max(start, other_start)\n                common_end = min(end, other_end)\n                if common_start < common_end:\n                    new_common_slots.append((common_start, common_end))\n            # Update start and end with the overlapping times\n            if not new_common_slots:\n                break  # No overlapping times found\n            start, end = new_common_slots[0]  # Proceed with the first found common slot\n            for cs in new_common_slots[1:]:  # Merge all common slots\n                if cs[0] <= end:  # Overlapping\n                    end = max(end, cs[1])\n                else:\n                    common_slots.append((start, end))\n                    start, end = cs\n            common_slots.append((start, end))\n\n    return common_slots\n\ncommon_time_slots = find_common_time_slots(mason_free_time, evelyn_free_time, jose_free_time, helen_free_time, beverly_free_time)\n\n# Find a suitable time slot for the meeting\nfor start, end in common_time_slots:\n    if end - start >= meeting_duration:\n        meeting_start = start\n        meeting_end = meeting_start + meeting_duration\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_220"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participant_schedules, meeting_duration, work_hours):\n    start_time = datetime.strptime(work_hours[0], \"%H:%M\")\n    end_time = datetime.strptime(work_hours[1], \"%H:%M\")\n\n    # Check for each half-hour slot in the work hours\n    current_time = start_time\n    while current_time + timedelta(minutes=meeting_duration) <= end_time:\n        slot_start = current_time\n        slot_end = current_time + timedelta(minutes=meeting_duration)\n\n        # Check if this slot is available for all participants\n        if all(not (slot_start < participant[1] and slot_end > participant[0]) for participant in participant_schedules):\n            return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n\n        current_time += timedelta(minutes=30)  # Move to the next half-hour slot\n\n    return None  # In case there is no available time\n\n# Participant schedules are defined as tuples of (start_time, end_time)\nparticipant_schedules = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Megan\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Megan\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:00\", \"%H:%M\")),    # Jacob (no meetings)\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:00\", \"%H:%M\")),    # Kathryn (no meetings)\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),   # Keith\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),   # Matthew\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Matthew\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Matthew\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))   # Matthew\n]\n\nwork_hours = [\"09:00\", \"17:00\"]\nmeeting_duration = 30  # in minutes\n\n# Call the function and print the proposed meeting time\nproposed_time = find_meeting_time(participant_schedules, meeting_duration, work_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_221"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\nschedules = {\n    \"Betty\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    \"Evelyn\": [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    \"John\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n             (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    \"Andrea\": [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Eric\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n             (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Function to find an available time slot\ndef find_time_slot(schedules, start, end, duration):\n    current_time = start\n    while current_time + duration <= end:\n        # Assume the time is free until a busy schedule is found\n        is_free = True\n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if current_time < busy_end and current_time + duration > busy_start:\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        if is_free:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + duration).strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Find a suitable time slot\nproposed_time = find_time_slot(schedules, work_start, work_end, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_222"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules with their busy times\nschedules = {\n    \"Frances\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Sarah\": [\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Christopher\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Bobby\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Janice\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Function to check if a time slot is available for all participants\ndef is_available(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find the earliest possible meeting time\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    meeting_start = current_time\n    meeting_end = current_time + meeting_duration\n    if is_available(meeting_start, meeting_end):\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_223"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=30)\n\n# Define each participant's availability\nschedules = {\n    \"Marilyn\": [(datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wayne\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    ],\n    \"Julia\": [\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Deborah\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Virginia\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_free_for_all(start_time, end_time):\n    for busy_slots in schedules.values():\n        for (busy_start, busy_end) in busy_slots:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Check possible time slots\ndef find_meeting_time():\n    current_time = WORK_START\n    while current_time + MEETING_DURATION <= WORK_END:\n        end_time = current_time + MEETING_DURATION\n        if is_free_for_all(current_time, end_time):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Increment by one minute\n    return None\n\n# Get the proposed time for the meeting\nmeeting_time_slot = find_meeting_time()\nprint(meeting_time_slot)\n```",
            "count": "calendar_scheduling_example_224"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy times (start, end)\nschedules = {\n    \"Jean\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Terry\": [],\n    \n    \"Amber\": [],\n    \n    \"Doris\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    \"Joan\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Define meeting constraint\nmeeting_duration = timedelta(minutes=30)\nstart_of_workday = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_workday = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if the meeting time is free for all\ndef is_time_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for (start, end) in busy_times:\n            if start_time < end and end_time > start:  # overlap\n                return False\n    return True\n\n# Iterate over possible meeting times\nfor hour in range(9, 17):\n    for minute in (0, 30):\n        meeting_start = datetime.strptime(f\"{hour}:{minute:02}\", \"%H:%M\")\n        meeting_end = meeting_start + meeting_duration\n        \n        # Check if meeting within work hours and if it is free\n        if meeting_start >= start_of_workday and meeting_end <= end_of_workday:\n            if is_time_free(meeting_start, meeting_end):\n                print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_225"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\n# Define the busy schedules for each participant\nschedules = {\n    \"Maria\": [(9, 30, 10, 0), (11, 0, 12, 0), (15, 30, 16, 0)],\n    \"Gary\": [(10, 0, 10, 30), (13, 0, 13, 30), (14, 30, 15, 0), (16, 30, 17, 0)],\n    \"Betty\": [],\n    \"Charlotte\": [(9, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n    \"Jerry\": [(9, 30, 10, 0), (10, 30, 12, 30), (13, 0, 16, 30)],\n}\n\n# Define the meeting duration\nmeeting_duration = 30  # in minutes\n\n# Define the working hours\nworking_hours = (9, 0, 17, 0)  # (start_hour, start_minute, end_hour, end_minute)\n\n# Helper function to find free time slots\ndef find_free_slot(schedules, duration, working_hours):\n    # Create time slots for the day in minutes\n    free_slots = []\n    start_time = working_hours[0] * 60 + working_hours[1]\n    end_time = working_hours[2] * 60 + working_hours[3]\n\n    # list of all busy periods\n    busy_times = []\n    for busy in schedules.values():\n        for start_h, start_m, end_h, end_m in busy:\n            busy_times.append((start_h * 60 + start_m, end_h * 60 + end_m))\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Find free time slots between busy periods\n    current_time = start_time\n    for start, end in busy_times:\n        if current_time < start:\n            free_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    if current_time < end_time:\n        free_slots.append((current_time, end_time))\n\n    # Filter free slots based on duration\n    valid_slots = []\n    for start, end in free_slots:\n        if end - start >= duration:\n            valid_slots.append((start, start + duration))\n\n    return valid_slots\n\n# Find a suitable slot\nfree_slots = find_free_slot(schedules, meeting_duration, working_hours)\n\n# Output first valid time slot found in HH:MM:HH:MM format\nif free_slots:\n    start_slot, end_slot = free_slots[0]\n    start_h, start_m = divmod(start_slot, 60)\n    end_h, end_m = divmod(end_slot, 60)\n    print(f\"{start_h:02}:{start_m:02}:{end_h:02}:{end_m:02}\")\n```\n",
            "count": "calendar_scheduling_example_226"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Create a list of busy times for each participant\ndavid_busy = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\ndouglas_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\nralph_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\njordan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy times with labels\nall_busy_times = {\n    \"David\": david_busy,\n    \"Douglas\": douglas_busy,\n    \"Ralph\": ralph_busy,\n    \"Jordan\": jordan_busy,\n}\n\n# Function to check if a proposed time is free for all participants\ndef is_time_free(start_time, duration):\n    end_time = start_time + timedelta(minutes=duration)\n    for busy_times in all_busy_times.values():\n        for busy_start, busy_end in busy_times:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Look for a suitable time\ncurrent_time = work_start\n\n# Adjust to David's preference\ncurrent_time = max(current_time, datetime.strptime(\"14:00\", \"%H:%M\"))\n\nwhile current_time + timedelta(minutes=meeting_duration) <= work_end:\n    if is_time_free(current_time, meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n        print(f\"{proposed_start}:{proposed_end}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_227"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting time duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Existing schedules\nschedules = {\n    'Mason': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Anthony': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'))],\n    'Teresa': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Katherine': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Brian': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Function to find a suitable time\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is available for all participants\n        is_available = True\n        for participant, busy_slots in schedules.items():\n            for start, end in busy_slots:\n                if start <= current_time < end or start < current_time + meeting_duration <= end:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        \n        if is_available:\n            return current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M')\n        \n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Get the proposed time for the meeting\nstart_time, end_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\nprint(f\"{{{start_time}:{end_time}}}\")\n```",
            "count": "calendar_scheduling_example_228"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define meeting constraints\nparticipants_schedule = {\n    \"Brittany\": [(9, 17)],\n    \"Wayne\": [(9, 17)],\n    \"Betty\": [(9, 10, 30), (15, 15, 30)],\n    \"Diane\": [(9, 9, 30), (10, 11), (11, 13), (13, 16, 30)],\n    \"Larry\": [(9, 11), (11, 13), (13, 17)]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Convert the schedule into busy times\nbusy_times = []\nfor participant, times in participants_schedule.items():\n    for time in times:\n        if len(time) == 2:  # Full day availability\n            busy_times.append((time[0], time[1]))\n        else:  # Busy periods\n            busy_times.append((time[0], time[1]))\n\n# Generate all possible meeting slots from 9:00 to 17:00\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\ncurrent_time = work_start\n\n# Check for available slots\nwhile current_time <= work_end - meeting_duration:\n    end_time = current_time + meeting_duration\n    is_available = True\n    \n    # Check against the busy times\n    for busy_start, busy_end in busy_times:\n        busy_period_start = datetime.strptime(f\"{busy_start//100}:{busy_start%100}\", \"%H:%M\")\n        busy_period_end = datetime.strptime(f\"{busy_end//100}:{busy_end%100}\", \"%H:%M\")\n\n        if current_time < busy_period_end and end_time > busy_period_start:\n            is_available = False\n            break\n\n    if is_available:\n        # Check Betty's preference to avoid meetings after 11:30\n        if current_time >= datetime.strptime(\"11:30\", \"%H:%M\"):\n            break\n        \n        proposed_time = f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        print(f\"Proposed meeting time: {proposed_time}\")\n        break\n    \n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_229"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Create a list of busy schedules\njoshua_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nrobert_schedule = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nsamuel_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\njennifer_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Aggregate all schedules into one list\nbusy_schedule = joshua_schedule + robert_schedule + samuel_schedule + jennifer_schedule\n\n# Function to check if a time slot is free\ndef is_free(start, end, busy_schedule):\n    for busy_start, busy_end in busy_schedule:\n        if (start < busy_end and end > busy_start):  # Overlap\n            return False\n    return True\n\n# Find a suitable meeting time\nfor hour in range(work_start.hour, work_end.hour):\n    for minute in range(0, 60, 30):  # Check every half hour\n        start_time = datetime(work_start.year, work_start.month, work_start.day, hour, minute)\n        end_time = start_time + meeting_duration\n        \n        if start_time >= work_start and end_time <= work_end:\n            if is_free(start_time, end_time, busy_schedule):\n                print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_230"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant as busy time intervals\nbusy_intervals = {\n    \"Betty\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Olivia\": [],\n    \n    \"Brandon\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Lori\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \n    \"Rachel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a meeting can be scheduled at a specific time\ndef can_schedule_meeting(start, duration, busy_intervals):\n    end = start + duration\n    for busy in busy_intervals:\n        for interval in busy_intervals[busy]:\n            if start < interval[1] and end > interval[0]:  # Overlap condition\n                return False\n    return True\n\n# Try to find a free slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if can_schedule_meeting(current_time, meeting_duration, busy_intervals):\n        # Format the output as required\n        proposed_time = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        print(proposed_time)\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_231"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Joyce\": [(9, 0), (17, 0)],\n    \"Judith\": [(9, 0, 9, 30), (14, 30, 15, 0)],\n    \"Bradley\": [(10, 0, 10, 30), (14, 0, 14, 30), (15, 0, 16, 0)],\n    \"Terry\": [(9, 0, 12, 0), (12, 30, 14, 30), (15, 0, 17, 0)],\n    \"Hannah\": [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 12, 0), \n               (12, 30, 13, 0), (14, 0, 15, 0), (16, 0, 16, 30)],\n}\n\ndef is_free(start_hour, start_minute, end_hour, end_minute, busy_times):\n    \"\"\" Check if the provided time is free from busy schedules \"\"\"\n    for busy_time in busy_times:\n        if len(busy_time) == 2:  # free entire day scenario\n            continue\n        busy_start = busy_time[:2]\n        busy_end = busy_time[2:] if len(busy_time) == 4 else busy_time\n        busy_start_time = datetime(1, 1, 1, *busy_start)\n        busy_end_time = datetime(1, 1, 1, *busy_end)\n        proposed_start_time = datetime(1, 1, 1, start_hour, start_minute)\n        proposed_end_time = proposed_start_time + timedelta(minutes=30)\n\n        if (proposed_start_time < busy_end_time and proposed_end_time > busy_start_time):\n            return False\n    return True\n\ndef find_meeting_time(schedules, duration=30):\n    # Check for each available time slot within the work hours\n    work_start = (9, 0)\n    work_end = (17, 0)\n\n    for hour in range(work_start[0], work_end[0]):\n        for minute in range(0, 60):\n            # Check if we can schedule at hour:minute\n            if (minute + duration) > 60:\n                continue\n            \n            end_hour = hour\n            end_minute = minute + duration\n            \n            if end_minute >= 60:\n                end_hour += 1\n                end_minute -= 60\n            \n            if end_hour > work_end[0]:\n                continue\n\n            busy_times = []\n            for participant, times in schedules.items():\n                busy_times.extend(times)\n\n            if is_free(hour, minute, end_hour, end_minute, busy_times):\n                return f\"{hour:02}:{minute:02}:{end_hour:02}:{end_minute:02}\"\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_232"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nschedules = {\n    \"Samuel\": [(\"12:30\", \"13:00\"), (\"15:30\", \"16:00\")],\n    \"Jesse\": [],\n    \"Willie\": [],\n    \"Joyce\": [(\"9:30\", \"10:00\"), (\"11:00\", \"11:30\"), (\"12:00\", \"13:00\"), \n              (\"14:00\", \"14:30\"), (\"15:00\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Mark\": [(\"9:00\", \"10:00\"), (\"10:30\", \"14:00\"), (\"14:30\", \"16:00\")]\n}\n\n# Work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Helper function to check if a time slot is free\ndef is_slot_free(start, end):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            busy_start = datetime.strptime(busy_start, \"%H:%M\")\n            busy_end = datetime.strptime(busy_end, \"%H:%M\")\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    meeting_start = current_time\n    meeting_end = current_time + meeting_duration\n\n    if is_slot_free(meeting_start, meeting_end):\n        # Check if Mark's preference is satisfied\n        if meeting_start >= datetime.strptime(\"13:00\", \"%H:%M\"):\n            break\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_233"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_availability, meeting_duration_minutes):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=meeting_duration_minutes)\n\n    # Create a list of busy time intervals\n    busy_times = []\n    for participant in participants_availability:\n        busy_times.extend(participants_availability[participant])\n\n    # Sort the busy times\n    busy_times.sort()\n\n    # Initialize available time slots\n    available_start = work_start\n    for start, end in busy_times:\n        if available_start + meeting_duration <= start:  # Check if there is enough space\n            return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n        available_start = max(available_start, end)\n\n    # Check if there's space after the last busy time up to work end\n    if available_start + meeting_duration <= work_end:\n        return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Define schedules\nparticipants_availability = {\n    \"Catherine\": [],\n    \"Barbara\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Bruce\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Robert\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Michelle\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Find a time for a 30-minute meeting\nmeeting_time = find_meeting_time(participants_availability, 30)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_234"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nstart_work_hour = datetime.strptime(\"09:00\", \"%H:%M\")\nend_work_hour = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the existing schedules\nschedules = {\n    \"Amber\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Alice\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n\n    \"Brian\": [],\n\n    \"Ryan\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n\n    \"Jonathan\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, start_work_hour, end_work_hour, meeting_duration):\n    current_time = start_work_hour\n    while current_time + meeting_duration <= end_work_hour:\n        end_time = current_time + meeting_duration\n        \n        # Check if there is any conflict for all participants\n        conflict = False\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if current_time < end and end_time > start:  # If there's a conflict\n                    conflict = True\n                    break\n            if conflict:\n                break\n        \n        if not conflict:  # No conflicts found\n            return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)  # Try the next minute\n\n# Get the proposed meeting time\nproposed_start, proposed_end = find_meeting_time(schedules, start_work_hour, end_work_hour, meeting_duration)\nprint(f\"{{ {proposed_start}: {proposed_end} }}\")\n```",
            "count": "calendar_scheduling_example_235"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time window for the meeting\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Schedule blocks for each participant\nschedules = {\n    \"Gregory\": [(start_of_day, end_of_day)],\n    \"Joyce\": [(start_of_day, end_of_day)],\n    \"Christopher\": [(start_of_day, datetime.strptime(\"09:30\", \"%H:%M\")),\n                     (datetime.strptime(\"15:00\", \"%H:%M\"), end_of_day)],\n    \"Dorothy\": [(start_of_day, datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n                 (datetime.strptime(\"17:00\", \"%H:%M\"), end_of_day)],\n    \"Cynthia\": [(start_of_day, datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), end_of_day)]\n}\n\n# Find a suitable meeting time\ndef find_meeting_time():\n    # Initialize available time slots\n    available_slots = []\n\n    # Check each time slot in the day\n    current_time = start_of_day\n    while current_time + meeting_duration <= end_of_day:\n        time_blocked = False\n        for name, blocks in schedules.items():\n            for start, end in blocks:\n                if start <= current_time < end or start < current_time + meeting_duration <= end:\n                    time_blocked = True\n                    break\n            if time_blocked:\n                break\n        if not time_blocked:\n            available_slots.append(current_time)\n        current_time += timedelta(minutes=1)  # Increment by 1 minute to check for next slot\n\n    # Return the first available slot for the meeting\n    if available_slots:\n        meeting_start = available_slots[0]\n        meeting_end = meeting_start + meeting_duration\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    return None\n\n# Calculate the meeting time\nproposed_time = find_meeting_time()\nproposed_time\n```",
            "count": "calendar_scheduling_example_236"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules (busy times) for each participant\nschedules = {\n    \"Carol\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Cynthia\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Judy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Alan\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Linda\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time range is available for all participants\ndef is_time_available(start, end):\n    for busy_times in schedules.values():\n        for (busy_start, busy_end) in busy_times:\n            if (start < busy_end and end > busy_start):  # Overlap condition\n                return False\n    return True\n\n# Finding a suitable time slot\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        if is_time_available(current_time, current_time + meeting_duration):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Check the next minute\n    return None\n\n# Output the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_237"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules in terms of busy intervals\nschedules = {\n    \"Alexander\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Dylan\": [],\n    \"Elizabeth\": [],\n    \"Edward\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Douglas\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Combine all busy intervals\nbusy_times = []\nfor schedule in schedules.values():\n    busy_times.extend(schedule)\n\n# Sort busy times and merge overlapping intervals\nbusy_times.sort()\n\nmerged_busy_times = []\nfor start, end in busy_times:\n    if not merged_busy_times or merged_busy_times[-1][1] < start:\n        merged_busy_times.append([start, end])\n    else:\n        merged_busy_times[-1][1] = max(merged_busy_times[-1][1], end)\n\n# Find suitable time slot for the meeting\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    # Check against merged busy times\n    available = True\n    for busy_start, busy_end in merged_busy_times:\n        if current_time < busy_end and (current_time + meeting_duration) > busy_start:\n            available = False\n            break\n    if available:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Check next half hour\n```",
            "count": "calendar_scheduling_example_238"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules for each participant\nschedules = {\n    \"Jennifer\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Gabriel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Andrew\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n               (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carolyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Alexis\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\ndef find_meeting_time(duration_minutes):\n    duration = timedelta(minutes=duration_minutes)\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Check possible time slots\n    for start_hour in range(9, 17):\n        for start_minute in [0, 30]:\n            meeting_start = datetime(start_hour, start_minute)\n            meeting_end = meeting_start + duration\n            \n            if meeting_end > end_of_day:\n                continue\n            \n            # Check against all schedules\n            if all(any(start <= meeting_start < end and start < meeting_end <= end\n                       for start, end in schedules[participant]) for participant in schedules):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Request for a 30-minute meeting\nresult = find_meeting_time(30)\nprint(result)\n```",
            "count": "calendar_scheduling_example_239"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Edward\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Daniel\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Jonathan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Samuel\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Paul\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Time frame for scheduling\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available time\ndef find_available_time(schedules, meeting_duration, work_start, work_end):\n    # Create a timeline of all occupied times\n    occupied = []\n    \n    for busy_times in schedules.values():\n        occupied.extend(busy_times)\n    \n    # Sort the busy times\n    occupied.sort(key=lambda x: x[0])\n    \n    # Check for available time slots\n    current_time = work_start\n    \n    for start, end in occupied:\n        # If there's a gap between current_time and the start of the next busy time\n        if current_time + meeting_duration <= start:\n            return current_time, current_time + meeting_duration\n        \n        # Move current_time to the end of the current busy period\n        if current_time < end:\n            current_time = end\n            \n    # Final check after the last busy period\n    if current_time + meeting_duration <= work_end:\n        return current_time, current_time + meeting_duration\n    \n    return None\n\n# Get the available time\navailable_time = find_available_time(schedules, meeting_duration, work_start, work_end)\n\n# Format the output\nif available_time:\n    start_time, end_time = available_time\n    output = f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\nelse:\n    output = \"No available time found\"\n\nprint(output)\n```",
            "count": "calendar_scheduling_example_240"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nbusy_schedules = {\n    \"Terry\": [(datetime.strptime(\"2023-10-23 13:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 14:00\", \"%Y-%m-%d %H:%M\")),\n              (datetime.strptime(\"2023-10-23 16:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 17:00\", \"%Y-%m-%d %H:%M\"))],\n    \"Janet\": [(datetime.strptime(\"2023-10-23 09:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 10:00\", \"%Y-%m-%d %H:%M\")),\n              (datetime.strptime(\"2023-10-23 12:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 13:00\", \"%Y-%m-%d %H:%M\")),\n              (datetime.strptime(\"2023-10-23 13:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 14:00\", \"%Y-%m-%d %H:%M\")),\n              (datetime.strptime(\"2023-10-23 14:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 15:30\", \"%Y-%m-%d %H:%M\")),\n              (datetime.strptime(\"2023-10-23 16:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 17:00\", \"%Y-%m-%d %H:%M\"))],\n    \"Lauren\": [],\n    \"Sharon\": [(datetime.strptime(\"2023-10-23 09:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 10:30\", \"%Y-%m-%d %H:%M\")),\n               (datetime.strptime(\"2023-10-23 11:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 12:00\", \"%Y-%m-%d %H:%M\")),\n               (datetime.strptime(\"2023-10-23 12:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 17:00\", \"%Y-%m-%d %H:%M\"))],\n    \"Adam\": [(datetime.strptime(\"2023-10-23 09:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 10:30\", \"%Y-%m-%d %H:%M\")),\n             (datetime.strptime(\"2023-10-23 11:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-23 17:00\", \"%Y-%m-%d %H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find free slots for all participants\ndef find_meeting_time():\n    work_start = datetime.strptime(\"2023-10-23 09:00\", \"%Y-%m-%d %H:%M\")\n    work_end = datetime.strptime(\"2023-10-23 17:00\", \"%Y-%m-%d %H:%M\")\n    \n    # Generate slots\n    free_slots = []\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        is_busy = False\n        for participant, busy_times in busy_schedules.items():\n            for start, end in busy_times:\n                if start <= current_time < end or start < (current_time + meeting_duration) <= end:\n                    is_busy = True\n                    break\n            if is_busy:\n                break\n        \n        if not is_busy:\n            free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=1)  # Check next minute\n    \n    # Choose the earliest slot to schedule the meeting\n    if free_slots:\n        meeting_time = free_slots[0]\n        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + meeting_duration).strftime('%H:%M')}\"\n    return None\n\n# Find and print the meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_241"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy times for each participant\nbusy_times = {\n    \"Anthony\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Zachary\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Russell\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \"Gary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Helen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is available\ndef is_available(start_time, end_time):\n    for times in busy_times.values():\n        for busy_start, busy_end in times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Finding a suitable time for the meeting\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    if is_available(current_time, current_time + meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{{{proposed_start}:{proposed_end}}}\")\n        break\n    current_time += timedelta(minutes=1)  # Check the next minute\n```",
            "count": "calendar_scheduling_example_242"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing schedules for each participant\nschedules = {\n    \"Debra\": [(datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Frank\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Nicholas\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Mark\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find a suitable time slot for the meeting\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        available = True\n        for participant, busy_slots in schedules.items():\n            for start, end in busy_slots:\n                if current_time < end and current_time + meeting_duration > start:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check the next 30 minutes\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_243"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' schedules (busy times)\nschedules = {\n    \"Cynthia\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Ann\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Catherine\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Kyle\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find a suitable time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < end and end_time > start) for busy_times in schedules.values() for start, end in busy_times):\n            return current_time.strftime(\"%H:%M\") + ':' + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every half hour\n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_244"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work schedule\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules as busy time slots\nschedules = {\n    \"Amanda\": [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Margaret\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Walter\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Larry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"John\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is free for everyone\ndef is_time_slot_free(start_time, end_time):\n    for busy_slots in schedules.values():\n        for slot_start, slot_end in busy_slots:\n            if (start_time < slot_end) and (end_time > slot_start):\n                return False\n    return True\n\n# Find a suitable slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    slot_end_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, slot_end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{slot_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)  # Increment time minute by minute\n```",
            "count": "calendar_scheduling_example_245"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Jacob\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Diana\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Adam\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Angela\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Dennis\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Finding a suitable time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Generate all potential meeting times in 30 minutes increments\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        available = True\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if (current_time < end) and (current_time + meeting_duration > start):\n                    available = False\n                    break\n            if not available:\n                break\n        \n        if available:\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)\n\n# Calculate and print proposed meeting time\nstart_time, end_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(f\"{{{start_time}:{end_time}}}\")\n```",
            "count": "calendar_scheduling_example_246"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nschedules = {\n    \"Charles\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Bryan\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ruth\": [],\n    \"Keith\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"William\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable time slot\ndef find_meeting_time(schedules, meeting_duration):\n    free_slots = []\n    # Generate all time slots during work hours\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        end_time = current_time + meeting_duration\n        free = True\n        for participant, busy_times in schedules.items():\n            # Check if participant is busy during the current proposed slot\n            for busy_start, busy_end in busy_times:\n                if (busy_start < end_time and busy_end > current_time):\n                    free = False\n                    break\n            if not free:\n                break\n        if free:\n            free_slots.append((current_time, end_time))\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n    # Return the first available time slot\n    if free_slots:\n        start_time, end_time = free_slots[0]\n        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    return None\n\n# Get the proposed time\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_247"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules for each participant\nbilly_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\njoe_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))]\n\nbrittany_schedule = [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\ngrace_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\ndennis_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Consolidate all schedules into one list for availability check\nall_schedules = [billy_schedule, joe_schedule, brittany_schedule, grace_schedule, dennis_schedule]\n\n# Function to find the first available time slot\ndef find_meeting_time(duration_minutes):\n    duration = timedelta(minutes=duration_minutes)\n    \n    for current_time in range(0, (end_time - start_time).seconds // 60):\n        meeting_start = start_time + timedelta(minutes=current_time)\n        meeting_end = meeting_start + duration\n        \n        if meeting_end > end_time:\n            break\n        \n        if all(is_available(meeting_start, meeting_end, schedule) for schedule in all_schedules):\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\n# Function to check if a time slot is available in a given schedule\ndef is_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end and end > busy_start):  # Overlap condition\n            return False\n    return True\n\n# Find a suitable time for a 30-minute meeting\nproposed_time = find_meeting_time(30)\nprint(proposed_time)  # Output the result\n```",
            "count": "calendar_scheduling_example_248"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define busy schedules\nschedules = {\n    \"Julie\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Betty\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Kayla\": [],\n    \"Heather\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Keith\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to check if a time slot is available for all participants\ndef is_slot_available(start_time, end_time):\n    for busy_slots in schedules.values():\n        for slot in busy_slots:\n            if not (end_time <= slot[0] or start_time >= slot[1]):\n                return False\n    return True\n\n# Iterate through available slots\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_slot_available(current_time, current_time + meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Check next half-hour slot\n```",
            "count": "calendar_scheduling_example_249"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Blocked times for each participant\nschedules = {\n    \"Dorothy\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Kenneth\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \n    \"Madison\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Brandon\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Judith\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a proposed meeting time is available for all participants\ndef is_time_available(start_time, end_time):\n    for busy_times in schedules.values():\n        for (busy_start, busy_end) in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Find a suitable time slot for the meeting\ndef find_meeting_time():\n    time_to_check = working_hours_start\n    while time_to_check + meeting_duration <= working_hours_end:\n        end_time = time_to_check + meeting_duration\n        if is_time_available(time_to_check, end_time):\n            return f\"{time_to_check.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        time_to_check += timedelta(minutes=1)  # Check next minute\n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_250"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Willie\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Diana\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Olivia\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    \"Kyle\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kathleen\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable meeting time\ndef find_meeting_time(start_time, end_time, meeting_duration):\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        if all(not (current_time < busy_end and busy_start < current_time + meeting_duration)\n               for schedule in schedules.values() for busy_start, busy_end in schedule):\n            return current_time\n        current_time += timedelta(minutes=30)\n    return None\n\n# Working hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find a suitable time\nproposed_time = find_meeting_time(start_of_day, end_of_day, meeting_duration)\nif proposed_time:\n    meeting_start = proposed_time.strftime(\"%H:%M\")\n    meeting_end = (proposed_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{{{meeting_start}:{meeting_end}}}\")\n```\n",
            "count": "calendar_scheduling_example_251"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define available work hours\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\n# Schedule of each participant (start, end) in tuples\nschedules = {\n    'Daniel': [(time(9, 30), time(10, 0)), (time(12, 30), time(13, 0))],\n    'Wayne': [(time(13, 0), time(13, 30)), (time(14, 0), time(14, 30))],\n    'Gloria': [(time(10, 30), time(11, 0)), (time(11, 30), time(12, 0))],\n    'Stephanie': [(time(9, 30), time(15, 30))],\n    'Megan': [(time(9, 0), time(10, 30)), (time(11, 0), time(14, 0)), (time(15, 0), time(16, 30))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is available\ndef is_available(start, end):\n    for busy_times in schedules.values():\n        for (busy_start, busy_end) in busy_times:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Find suitable time slot\ncurrent_time = timedelta(hours=work_start.hour, minutes=work_start.minute)\nend_of_work_day = timedelta(hours=work_end.hour, minutes=work_end.minute)\n\nwhile current_time + meeting_duration <= end_of_work_day:\n    meeting_start = time(hour=current_time.seconds // 3600, minute=(current_time.seconds // 60) % 60)\n    meeting_end = (current_time + meeting_duration)\n    meeting_end_time = time(hour=meeting_end.seconds // 3600, minute=(meeting_end.seconds // 60) % 60)\n    \n    if is_available(meeting_start, meeting_end_time):\n        print(f'{meeting_start.hour:02}:{meeting_start.minute:02}:{meeting_end_time.hour:02}:{meeting_end_time.minute:02}')\n        break\n\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_252"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define available slots as functions\ndef get_free_slots():\n    # Define the working hours\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Define busy schedules\n    bryan_schedule = []  # Free entire day\n    lori_schedule = []   # Free entire day\n    kimberly_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                         (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))]\n    beverly_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n    dennis_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                       (datetime.strptime(\"12:00\", \"%H:%M\"), end_time)]\n    \n    # Convert all busy times into a combined busy list\n    busy_slots = kimberly_schedule + beverly_schedule + dennis_schedule\n    \n    # Generate free slots\n    free_slots = []\n    current_time = start_time\n    while current_time < end_time:\n        # Check if current time is free\n        is_busy = any(start <= current_time < end for start, end in busy_slots)\n        if not is_busy:\n            free_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every half hour\n\n    return free_slots\n\ndef find_meeting_time(duration=30):\n    free_slots = get_free_slots()\n    \n    # Check for a suitable slot for a half-hour meeting\n    for start in free_slots:\n        end = start + timedelta(minutes=duration)\n        if end in free_slots:\n            return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n    \n    return \"No available slot found.\"\n\n# Print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_253"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and durations\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing scheduled time blocks\njudith_schedule = []\ncheryl_schedule = []\nann_schedule = []\njoseph_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\ndouglas_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ndef is_time_available(time, duration, participant_schedules):\n    end_time = time + duration\n    for schedule in participant_schedules:\n        for busy_start, busy_end in schedule:\n            if (time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\ndef find_meeting_time():\n    current_time = start_time\n    participants_schedules = [joseph_schedule, douglas_schedule]  # Only need to check against those with schedules\n    while current_time + meeting_duration <= end_time:\n        if is_time_available(current_time, meeting_duration, participants_schedules):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)\n\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_254"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create list of busy times\n    busy_slots = []\n    for participant in participants:\n        busy_slots.extend(participant)\n\n    busy_slots.sort()  # Sort busy slots for easier checking\n\n    # Go through the time slots and check for availability\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        available = True\n        \n        for busy_start, busy_end in busy_slots:\n            if not (current_time >= busy_end or current_time + meeting_duration <= busy_start):\n                available = False\n                break\n        \n        if available:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n    return \"No available time\"\n\n# Participants' busy schedules\nparticipants = [\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n     (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Michael\n\n    [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],  # Vincent\n     \n    [],  # Laura has no meetings\n    \n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Frank\n\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]   # Dylan\n]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Find meeting time\navailable_time = find_meeting_time(participants, meeting_duration)\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_255"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules (as tuples of start and end times)\nschedules = {\n    \"Carol\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 17, 0))],  # Available whole day\n    \"Lori\": [\n        (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n        (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n        (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 0)),\n    ],\n    \"Patricia\": [\n        (datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n        (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 30)),\n        (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30)),\n    ],\n    \"Alexis\": [\n        (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 12, 0)),\n        (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 14, 30)),\n        (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 17, 0)),\n    ],\n    \"Tyler\": [\n        (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 30)),\n        (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 15, 30)),\n        (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30)),\n    ],\n}\n\n# Define work hours and meeting duration\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available time slot\ndef find_meeting_slot():\n    # Create a list of occupied time slots\n    occupied_slots = []\n    \n    for participant, times in schedules.items():\n        for start, end in times:\n            occupied_slots.append((start, end))\n    \n    # Sorting by start time\n    occupied_slots.sort()\n\n    # Check for free slots\n    last_end = work_start\n    for start, end in occupied_slots:\n        if last_end + meeting_duration <= start:  # Check if there's enough space\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n    \n    # Check if time is available at the end of the work day\n    if last_end + meeting_duration <= work_end:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n\n# Calculate and print the proposed time\nproposed_time = find_meeting_slot()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_256"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing busy schedules for participants\nschedules = {\n    \"Jennifer\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Gregory\": [],\n    \"Stephanie\": [],\n    \"Lori\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jessica\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to check if time slot is available\ndef is_time_slot_available(start, end):\n    for participant in schedules:\n        for busy_start, busy_end in schedules[participant]:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\n# Finding a suitable time\ncurrent_time = working_start\nwhile current_time + meeting_duration <= working_end:\n    meeting_end_time = current_time + meeting_duration\n    if is_time_slot_available(current_time, meeting_end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_257"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\n# Define the working hours and the duration of the meeting\nworking_hours = (9 * 60, 17 * 60)  # in minutes\nmeeting_duration = 30  # in minutes\n\n# Define the schedules of each participant in terms of blocked time periods\nschedules = {\n    \"Juan\": [(10 * 60 + 30, 11 * 60), (12 * 60, 13 * 60 + 30), (14 * 60, 14 * 60 + 30), (15 * 60 + 30, 16 * 60)],\n    \"Marilyn\": [(11 * 60, 11 * 60 + 30), (13 * 60 + 30, 14 * 60)],\n    \"Brian\": [(14 * 60, 14 * 60 + 30), (15 * 60, 15 * 60 + 30), (16 * 60, 17 * 60)],\n    \"Ruth\": [(9 * 60 + 30, 10 * 60 + 30), (11 * 60 + 30, 12 * 60 + 30), (13 * 60, 17 * 60)],\n    \"Diana\": [(9 * 60 + 30, 11 * 60 + 30), (12 * 60, 16 * 60)],\n}\n\n# Convert schedules to a single list of busy time slots\nbusy_slots = []\nfor schedule in schedules.values():\n    busy_slots.extend(schedule)\nbusy_slots.sort()\n\n# Function to find a suitable meeting time\ndef find_meeting_time(busy_slots, meeting_duration):\n    last_end_time = working_hours[0]\n    \n    for start, end in busy_slots:\n        # Check if there's enough time before the next busy slot\n        if last_end_time + meeting_duration <= start:\n            return last_end_time, last_end_time + meeting_duration\n        last_end_time = max(last_end_time, end)  # Update last end time\n    \n    # Check if there's time after the last busy slot until the end of working hours\n    if last_end_time + meeting_duration <= working_hours[1]:\n        return last_end_time, last_end_time + meeting_duration\n    \n    return None  # No suitable time found\n\n# Find the meeting time\nmeeting_time = find_meeting_time(busy_slots, meeting_duration)\n\n# Output the proposed time in the desired format\nif meeting_time:\n    start, end = meeting_time\n    proposed_time = f\"{start // 60:02d}:{start % 60:02d}:{end // 60:02d}:{end % 60:02d}\"\n    print(proposed_time)\nelse:\n    print(\"No suitable meeting time found.\")\n```",
            "count": "calendar_scheduling_example_258"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules based on given constraints\nschedules = {\n    \"Randy\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carolyn\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Christina\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Amy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Convert all busy times to a single list\nbusy_times = []\nfor participant, busy_periods in schedules.items():\n    for start, end in busy_periods:\n        busy_times.append((start, end))\n\n# Function to check if a proposed time slot is free for all\ndef is_time_slot_free(start, end):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Check slots in the available time frame\nproposed_time = None\nfor hour in range(work_start.hour, work_end.hour):\n    for minute in [0, 30]:\n        start_time = datetime.strptime(f\"{hour}:{minute:02d}\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        # Randy does not want to meet after 15:30\n        if end_time > datetime.strptime(\"15:30\", \"%H:%M\"):\n            continue\n\n        if is_time_slot_free(start_time, end_time):\n            proposed_time = (start_time, end_time)\n            break\n    if proposed_time:\n        break\n\n# Output the proposed time in the required format\nif proposed_time:\n    start_str = proposed_time[0].strftime(\"%H:%M\")\n    end_str = proposed_time[1].strftime(\"%H:%M\")\n    print(f\"{start_str}:{end_str}\")\n```",
            "count": "calendar_scheduling_example_259"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time format\nfmt = \"%H:%M\"\n\n# Schedule constraints\nschedules = {\n    \"Sharon\": [(fmt, fmt)],\n    \"Ryan\": [(\"10:00\", \"11:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"14:30\")],\n    \"Isabella\": [(\"11:00\", \"11:30\"), (\"14:00\", \"14:30\")],\n    \"Anna\": [(\"09:00\", \"10:00\"), (\"11:00\", \"11:30\"), (\"13:00\", \"14:30\"), (\"15:00\", \"17:00\")],\n    \"Vincent\": [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"11:30\", \"12:00\"), (\"13:30\", \"16:00\")],\n}\n\n# Meeting duration configuration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", fmt)\nwork_end = datetime.strptime(\"17:00\", fmt)\n\n# Create blocks of busy times for each participant\nbusy_times = []\nfor times in schedules.values():\n    for start, end in times:\n        busy_times.append((datetime.strptime(start, fmt), datetime.strptime(end, fmt)))\n\n# Merge busy times to get a full list of unavailable slots\nbusy_times.sort()\nmerged_busy_times = []\nfor start, end in busy_times:\n    if not merged_busy_times or merged_busy_times[-1][1] < start:\n        merged_busy_times.append((start, end))\n    else:\n        merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n# Check for free slots\nfree_slots = []\ncurrent_start = work_start\nfor start, end in merged_busy_times:\n    if current_start + meeting_duration <= start:\n        free_slots.append((current_start, start))\n    current_start = max(current_start, end)\n\n# Check at the end of the day\nif current_start + meeting_duration <= work_end:\n    free_slots.append((current_start, work_end))\n\n# Select a suitable time for the meeting\nif free_slots:\n    meeting_start = free_slots[0][0]\n    meeting_end = meeting_start + meeting_duration\n    print(f\"{meeting_start.strftime(fmt)}:{meeting_end.strftime(fmt)}\")\nelse:\n    print(\"No available time for a meeting.\")\n```",
            "count": "calendar_scheduling_example_260"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration and work hours\nmeeting_duration = timedelta(hours=1)\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Define existing schedules for each participant\nschedules = {\n    'Lisa': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n             \n    'Frances': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n                \n    'Alan': [],  # Alan's calendar is wide open the entire day\n               \n    'Linda': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n              \n    'Shirley': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\ndef is_available(start, end, schedules):\n    for schedule in schedules:\n        for busy_start, busy_end in schedules[schedule]:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Check time slots in work hours for a meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    meeting_end = current_time + meeting_duration\n    if is_available(current_time, meeting_end, schedules):\n        print(f'{{{current_time.strftime(\"%H:%M\")}:{meeting_end.strftime(\"%H:%M\")}}}')\n        break\n    current_time += timedelta(minutes=30)  # Check every 30 minutes\n```",
            "count": "calendar_scheduling_example_261"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# User schedules\nschedules = {\n    \"Doris\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Dennis\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Matthew\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Andrea\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Brandon\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Time range\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free for everyone\ndef is_time_slot_free(start_time, end_time):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Find suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        # Formatting output\n        output = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        print(output)\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_262"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the constraints and existing schedules\nparticipants = {\n    'Nicholas': [],\n    'Robert': [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    'Gary': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    'Doris': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Beverly': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Time constraints\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Create a list of busy times\n    busy_times = []\n    for busy in participants.values():\n        busy_times.extend(busy)\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Check for gaps in the schedule\n    last_end = work_start\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            # Check if we have a valid meeting time\n            return last_end, last_end + meeting_duration\n        last_end = max(last_end, end)\n    \n    # Check after the last busy time\n    if last_end + meeting_duration <= work_end:\n        return last_end, last_end + meeting_duration\n\n# Calculate the meeting time\nstart_time, end_time = find_meeting_time()\n\n# Format the output\noutput = f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_263"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\n# Importing necessary libraries\nfrom datetime import datetime, timedelta\n\n# Defining the working hours and meeting duration\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Defining the busy schedules for each participant\nbusy_slots = {\n    \"Amber\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Christian\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Natalie\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Douglas\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Larry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is free for all participants\ndef is_slot_free(start, end):\n    for participant, slots in busy_slots.items():\n        for busy_start, busy_end in slots:\n            if (start < busy_end and end > busy_start):  # Checking for overlap\n                return False\n    return True\n\n# Finding a suitable time slot\ndef find_meeting_time():\n    current_time = working_start\n    while current_time + meeting_duration <= working_end:\n        if is_slot_free(current_time, current_time + meeting_duration):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Increment time by 1 minute\n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_264"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Cheryl\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Juan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Alan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christina\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Grace\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Check availability\ndef find_meeting_time(schedules):\n    available_slots = []\n\n    # Combine all schedules into a list of unavailable time slots\n    for participant, times in schedules.items():\n        for start, end in times:\n            available_slots.append((start, end))\n\n    # Sort the unavailable slots\n    available_slots.sort()\n\n    # Find available time between 9:00 and 17:00\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    last_end = start_of_day\n    for start, end in available_slots:\n        if last_end + meeting_duration <= start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n\n    # After the last unavailable slot\n    if last_end + meeting_duration <= end_of_day:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Output the proposed meeting time\nmeeting_time = find_meeting_time(schedules)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_265"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing schedules for each participant\nschedules = {\n    \"Joe\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Keith\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Patricia\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Nancy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Pamela\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Find suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < busy_end and end_time > busy_start) \n               for schedule in schedules.values() \n               for busy_start, busy_end in schedule):\n            return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\nmeeting_start, meeting_end = find_meeting_time()\nprint(f\"{meeting_start}:{meeting_end}\")\n```",
            "count": "calendar_scheduling_example_266"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"Deborah\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)), \n                (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30))],\n    \"Gary\": [(datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)), \n             (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0))],\n    \"Emma\": [],\n    \"Carolyn\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 12, 0)), \n                (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 15, 30)),\n                (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30))],\n    \"Karen\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)), \n              (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n              (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 0)),\n              (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n              (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n              (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 30))]\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define start and end of working hours\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Collect all busy times\nbusy_times = []\nfor participant, times in schedules.items():\n    for start, end in times:\n        busy_times.append((start, end))\n\n# Create a list to hold available time slots\navailable_slots = []\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    is_busy = False\n    for start, end in busy_times:\n        if current_time < end and current_time + meeting_duration > start:\n            is_busy = True\n            break\n            \n    # Check for Emma's preference\n    if current_time < datetime(2023, 10, 2, 13, 30):\n        is_busy = True\n\n    if not is_busy:\n        available_slots.append(current_time)\n    \n    current_time += timedelta(minutes=30)\n\n# Take the first available time slot\nif available_slots:\n    proposed_start = available_slots[0]\n    proposed_end = proposed_start + meeting_duration\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_267"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Blocked times for each participant\njesse_busy = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\ncheryl_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ndiana_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nbarbara_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Combine all busy schedules\nall_busy = jesse_busy + cheryl_busy + diana_busy + barbara_busy\n\n# Function to check if a time slot is available\ndef is_available(start_time, duration):\n    end_time = start_time + duration\n    for busy_start, busy_end in all_busy:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_available(current_time, meeting_duration):\n        proposed_start = current_time.time()\n        proposed_end = (current_time + meeting_duration).time()\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_268"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules\nschedules = {\n    \"Virginia\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Melissa\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Emma\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jacqueline\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find available meeting time\ndef find_available_time(schedules, work_start, work_end, meeting_duration):\n    time = work_start\n    while time + meeting_duration <= work_end:\n        meeting_end = time + meeting_duration\n        if all(not (time < busy[1] and meeting_end > busy[0]) for busy_times in schedules.values() for busy in busy_times):\n            return time.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n        time += timedelta(minutes=1)\n    return None\n\n# Find the available time\nmeeting_time = find_available_time(schedules, work_start, work_end, meeting_duration)\n\nif meeting_time:\n    print(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\n```",
            "count": "calendar_scheduling_example_269"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants and their busy schedules\nschedules = {\n    \"Frances\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Aaron\": [],\n    \"Rebecca\": [],\n    \"Kimberly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christopher\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\ndef is_time_available(start, end):\n    for busy_periods in schedules.values():\n        for busy_start, busy_end in busy_periods:\n            if (start < busy_end and end > busy_start):\n                return False\n    return True\n\ndef find_meeting_time(meeting_duration_minutes):\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=meeting_duration_minutes)\n    \n    current_time = start_of_day\n    \n    while current_time + meeting_duration <= end_of_day:\n        if is_time_available(current_time, current_time + meeting_duration):\n            return (current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"))\n        current_time += timedelta(minutes=1)\n    \n    return None\n\nmeeting_time = find_meeting_time(30)\n\nif meeting_time:\n    output = f\"{{{meeting_time[0]}:{meeting_time[1]}}}\"\n    print(output)\n```",
            "count": "calendar_scheduling_example_270"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nschedules = {\n    \"Teresa\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)],\n    \n    \"Amanda\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \n    \"Frances\": [],\n    \n    \"Evelyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)],\n    \n    \"Betty\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)]\n}\n\n# Function to find available meeting time\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    all_busy_times = []\n    \n    # Collect all busy times from each participant\n    for busy_times in schedules.values():\n        all_busy_times.extend(busy_times)\n\n    # Sort all busy times\n    all_busy_times.sort()\n\n    # Compute free slots\n    free_slots = []\n    current_time = work_start\n    \n    for busy_start, busy_end in all_busy_times:\n        if current_time + meeting_duration <= busy_start:\n            free_slots.append((current_time, busy_start))\n        current_time = max(current_time, busy_end)\n    \n    if current_time + meeting_duration <= work_end:\n        free_slots.append((current_time, work_end))\n    \n    # Check for a suitable slot\n    for start, end in free_slots:\n        if (end - start) >= meeting_duration:\n            return start.strftime(\"%H:%M\") + \":\" + (start + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\nproposed_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_271"
        },
        {
            "final_program_time": "{16:00:16:00}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule constraints for each participant\nschedules = {\n    \"Teresa\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 13, 0)),\n               (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30))],\n    \"Scott\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n              (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 11, 0)),\n              (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 0)),\n              (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    \"Eric\": [(datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n             (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n             (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 30))],\n    \"Maria\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n              (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 12, 0)),\n              (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 30)),\n              (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 30))],\n    \"Emily\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 30)),\n              (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 14, 0)),\n              (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n              (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Finding a suitable time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a list of all busy blocks\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Initialize the search for free slots\n    current_time = work_start\n\n    for start, end in busy_times:\n        # Check for available time until the next busy time\n        while current_time + meeting_duration <= start:\n            return current_time.strftime(\"%H:%M:%H:%M\")\n        current_time = max(current_time, end)\n\n    # Check the end of the workday\n    if current_time + meeting_duration <= work_end:\n        return current_time.strftime(\"%H:%M:%H:%M\")\n\n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_272"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules for participants\nschedules = {\n    \"John\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Frank\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    \"Randy\": [],\n    \n    \"Larry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Beverly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Create a list of busy times\nbusy_times = []\nfor participant in schedules:\n    busy_times.extend(schedules[participant])\n\n# Sort busy times\nbusy_times.sort(key=lambda x: x[0])\n\n# Find a slot for the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    # Check if current_time is free\n    free = True\n    for start, end in busy_times:\n        if current_time < end and current_time + meeting_duration > start:\n            free = False\n            break\n    if free:\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_273"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"Kevin\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joyce\": [],\n    \"Kathryn\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Bruce\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ronald\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free for all participants\ndef is_free(start_time, end_time):\n    for busy_slots in schedules.values():\n        for start, end in busy_slots:\n            if start_time < end and start < end_time:\n                return False\n    return True\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Search for a suitable time slot\nfor start_hour in range(working_hours_start.hour, working_hours_end.hour + 1):\n    for start_minute in [0, 30]:\n        start_time = datetime(2023, 10, 16, start_hour, start_minute)  # Assuming it's Monday, Oct 16, 2023\n        end_time = start_time + meeting_duration\n        \n        if end_time <= working_hours_end and is_free(start_time, end_time):\n            print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_274"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\n# Define the working hours and duration\r\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\r\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\r\nmeeting_duration = timedelta(minutes=30)\r\n\r\n# Define the busy times for each participant in a list of tuples (start, end)\r\nbusy_slots = {\r\n    \"Jose\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\r\n    \"Albert\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\r\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\r\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\r\n    \"Brenda\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\r\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\r\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\r\n    \"Bruce\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\r\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\r\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\r\n    \"Jacob\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\r\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\r\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\r\n}\r\n\r\n# Function to check if a given time slot is free for everyone\r\ndef is_free(start, end):\r\n    for slots in busy_slots.values():\r\n        for busy_start, busy_end in slots:\r\n            if start < busy_end and end > busy_start:\r\n                return False\r\n    return True\r\n\r\n# Trying to find a suitable time slot\r\ncurrent_time = work_start\r\nwhile current_time + meeting_duration <= work_end:\r\n    next_time = current_time + meeting_duration\r\n    if is_free(current_time, next_time):\r\n        print(f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\")\r\n        break\r\n    current_time += timedelta(minutes=1)\r\n```",
            "count": "calendar_scheduling_example_275"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules during the day\nschedules = {\n    \"Christine\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \n    \"Natalie\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Willie\": [],  # Fully available until 12:00\n    \"Anna\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Evelyn\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_time_available(start_time, duration):\n    for busy_slot in schedules[\"Christine\"] + schedules[\"Natalie\"] + schedules[\"Anna\"] + schedules[\"Evelyn\"]:\n        if (start_time < busy_slot[1] and start_time + duration > busy_slot[0]):\n            return False\n    return True\n\n# Find a suitable time\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    if is_time_available(current_time, meeting_duration):\n        proposed_time = current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_time}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_276"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define meeting duration\nMEETING_DURATION = timedelta(minutes=30)\n\n# Define the working hours\nSTART_TIME = datetime.strptime(\"09:00\", \"%H:%M\")\nEND_TIME = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participants' schedules in tuples of (start, end)\nschedules = {\n    \"Marilyn\": [(START_TIME, END_TIME)],\n    \"Virginia\": [\n        (START_TIME, datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), END_TIME)\n    ],\n    \"Diana\": [(START_TIME, END_TIME)],\n    \"Lawrence\": [\n        (START_TIME, datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), END_TIME)\n    ],\n    \"Angela\": [\n        (START_TIME, datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), END_TIME)\n    ]\n}\n\n# Function to find common available time slots\ndef find_available_slot(schedules):\n    all_slots = []\n    for participant, times in schedules.items():\n        all_slots.append(times)\n\n    # Initialize with the entire working day\n    available_slots = [(START_TIME, END_TIME)]\n    \n    for slots in all_slots:\n        new_slots = []\n        for start, end in available_slots:\n            for busy_start, busy_end in slots:\n                # Check if there is an available time between start and busy_start or busy_end and end\n                if start < busy_start:\n                    new_slots.append((start, busy_start))\n                start = max(start, busy_end)\n            if start < end:\n                new_slots.append((start, end))\n        available_slots = new_slots\n    \n    return available_slots\n\n# Find available time slots\navailable_slots = find_available_slot(schedules)\n\n# Find a suitable time slot for the proposed meeting duration\nfor start, end in available_slots:\n    if start + MEETING_DURATION <= end:\n        meeting_start = start\n        meeting_end = start + MEETING_DURATION\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_277"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of busy times\n    busy_times = []\n    for schedule in participants.values():\n        for busy_time in schedule:\n            busy_start = datetime.strptime(busy_time[0], \"%H:%M\")\n            busy_end = datetime.strptime(busy_time[1], \"%H:%M\")\n            busy_times.append((busy_start, busy_end))\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Find free time slots\n    free_times = []\n    last_end = work_start\n    for start, end in busy_times:\n        if last_end < start:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    if last_end < work_end:\n        free_times.append((last_end, work_end))\n    \n    # Check for available time slots for the meeting\n    for start, end in free_times:\n        if (end - start) >= duration:\n            meeting_start = start\n            meeting_end = start + duration\n            return meeting_start.strftime(\"%H:%M\") + ':' + meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\nparticipants = {\n    \"Donald\": [(\"10:00\", \"10:30\"), (\"11:30\", \"13:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Gregory\": [(\"09:30\", \"10:00\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\")],\n    \"Roy\": [(\"10:00\", \"10:30\"), (\"12:30\", \"13:00\")],\n    \"Jack\": [(\"09:00\", \"09:30\"), (\"10:00\", \"13:30\"), (\"14:00\", \"16:00\")],\n    \"Paul\": [(\"09:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"15:00\", \"16:30\")]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nproposed_time = find_meeting_time(participants, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_278"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n    \n    # Schedule constraints for participants\n    schedules = {\n        \"Abigail\": [(work_start, work_end)],\n        \"Betty\": [(work_start, work_end)],\n        \"Thomas\": [(work_start, work_start + timedelta(minutes=30)),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n        \"Albert\": [(work_start + timedelta(minutes=30), work_start + timedelta(hours=2)),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)],\n        \"Margaret\": [(work_start + timedelta(minutes=30), work_start + timedelta(hours=1)),\n                     (work_start + timedelta(hours=1, minutes=30), work_start + timedelta(hours=2, minutes=30)),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                     (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)]\n    }\n\n    # Create list of available time intervals for each participant\n    available_times = []\n\n    for participant, busy_times in schedules.items():\n        busy_times.sort()\n        available_intervals = []\n        last_end = work_start\n\n        for start, end in busy_times:\n            if start > last_end:\n                available_intervals.append((last_end, start))\n            last_end = end\n        \n        if last_end < work_end:\n            available_intervals.append((last_end, work_end))\n        \n        available_times.append(available_intervals)\n\n    # Find overlapping time slots in available times\n    overall_available = available_times[0]\n\n    for available in available_times[1:]:\n        new_overall = []\n        for start1, end1 in overall_available:\n            for start2, end2 in available:\n                new_start = max(start1, start2)\n                new_end = min(end1, end2)\n                if new_start + meeting_duration <= new_end:\n                    new_overall.append((new_start, new_end))\n        overall_available = new_overall\n    \n    # Check the preference of Betty (not after 13:00)\n    meeting_time = None\n    for start, end in overall_available:\n        if start < datetime.strptime(\"13:00\", \"%H:%M\") and start + meeting_duration <= end:\n            meeting_time = start\n            break\n\n    if meeting_time:\n        end_time = meeting_time + meeting_duration\n        return f\"{meeting_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_279"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the work hours and the participants' schedules\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Existing schedules (busy times)\n    schedules = {\n        \"Charles\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \"Adam\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \"Jason\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n        \"Daniel\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \"Ethan\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    }\n\n    # Create a list of blocked times\n    blocked_times = []\n    for busy_slots in schedules.values():\n        blocked_times.extend(busy_slots)\n\n    # Create a merged list of busy times\n    blocked_times.sort()\n\n    # Check for free slots in the work hours\n    current_start = work_start\n    while current_start + meeting_duration <= work_end:\n        # Define the end time of the proposed meeting\n        current_end = current_start + meeting_duration\n        \n        # Check if the proposed meeting time is free\n        is_free = True\n        for start, end in blocked_times:\n            if current_start < end and current_end > start:\n                is_free = False\n                break\n        \n        if is_free:\n            return f\"{current_start.strftime('%H:%M')}:{current_end.strftime('%H:%M')}\"\n        \n        # Move to the next time slot\n        current_start += timedelta(minutes=30)  # Check every 30 minutes\n        \n    return None\n\n# Find and display the time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_280"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define the busy slots for each participant\n    schedules = {\n        \"Rebecca\": [],\n        \"Alexander\": [],\n        \"Angela\": [(11, 30, 12, 0), (12, 30, 13, 0), (13, 30, 14, 30), (15, 0, 15, 30), (16, 0, 16, 30)],\n        \"Beverly\": [(9, 30, 10, 0), (10, 30, 15, 0), (15, 30, 16, 30)],\n        \"Peter\": [(9, 30, 11, 0), (11, 30, 12, 0), (13, 0, 13, 30), (14, 0, 15, 0), (16, 30, 17, 0)]\n    }\n    \n    # Meeting time duration in hours and minutes\n    meeting_duration = (0, 30)  # 30 minutes\n\n    # Work hours on Monday\n    work_start = (9, 0)\n    work_end = (17, 0)\n\n    # Create a list of all time slots in minutes\n    def time_to_minutes(h, m):\n        return h * 60 + m\n    \n    def minutes_to_time(minutes):\n        return divmod(minutes, 60)\n\n    busy_slots = []\n\n    # Combine all busy slots into a single list\n    for busy in schedules.values():\n        busy_slots.extend(busy)\n\n    # Generate the full time range from start to end in minutes\n    busy_minutes = []\n    for start_h, start_m, end_h, end_m in busy_slots:\n        busy_minutes.append((time_to_minutes(start_h, start_m), time_to_minutes(end_h, end_m)))\n\n    # Check for free time slots within the work hours\n    free_slots = []\n    current_time = time_to_minutes(work_start[0], work_start[1])\n    end_time = time_to_minutes(work_end[0], work_end[1])\n\n    # Status of previous busy time\n    previous_end = current_time\n\n    # Sort busy minutes\n    busy_minutes.sort()\n\n    for start, end in busy_minutes:\n        if start > previous_end:\n            free_slots.append((previous_end, start))\n        previous_end = max(previous_end, end)\n\n    # Check the time after the last busy slot until work end\n    if previous_end < end_time:\n        free_slots.append((previous_end, end_time))\n\n    # Finally, check for suitable time slots equal to or longer than the meeting duration\n    for start, end in free_slots:\n        if (end - start) >= meeting_duration[0] * 60 + meeting_duration[1]:\n            meeting_start = start\n            meeting_end = start + (meeting_duration[0] * 60 + meeting_duration[1])\n            return f\"{minutes_to_time(meeting_start)[0]:02}:{minutes_to_time(meeting_start)[1]:02}:{minutes_to_time(meeting_end)[0]:02}:{minutes_to_time(meeting_end)[1]:02}\"\n\n# Call the function to find a suitable meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_281"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy schedules for each participant\nbusy_slots = {\n    \"Larry\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Juan\": [],\n    \"Emily\": [],\n    \"Joan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Julie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), end_time)],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time range is free for all participants\ndef is_time_free(start, end):\n    for busy in busy_slots.values():\n        for slot in busy:\n            if start < slot[1] and end > slot[0]:  # Check for overlap\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_free(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_282"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time():\n    # Define working hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Participants' busy schedules\n    busy_times = {\n        \"Rachel\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n        \"Alexander\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                      (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n        \"Aaron\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), work_end)],\n        \"Hannah\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n    }\n\n    # Combine all busy times into one list\n    all_busy_times = []\n    for times in busy_times.values():\n        all_busy_times.extend(times)\n\n    # Sort busy times\n    all_busy_times.sort(key=lambda x: x[0])\n\n    # Find gaps in the schedule\n    last_end = work_start\n    for start, end in all_busy_times:\n        if last_end + meeting_duration <= start:\n            return last_end.strftime(\"%H:%M\") + \":\" + (last_end + meeting_duration).strftime(\"%H:%M\")\n        last_end = max(last_end, end)\n\n    # Check if there's time after the last busy slot\n    if last_end + meeting_duration <= work_end:\n        return last_end.strftime(\"%H:%M\") + \":\" + (last_end + meeting_duration).strftime(\"%H:%M\")\n    \n    return \"No available time\"\n\n# Get proposed meeting time\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_283"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Schedule for each participant\nschedule = {\n    \"Frances\": [],\n    \"Jack\": [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Susan\": [(datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    \"Scott\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Joan\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n             (datetime.strptime('11:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n             (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        # Check if the current time slot is available for all participants\n        if all(not any(start < end_time and end > current_time for start, end in schedule[participant]) for participant in schedule):\n            return current_time.strftime('%H:%M') + ':' + end_time.strftime('%H:%M')\n        current_time += timedelta(minutes=1)\n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_284"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule definition\nparticipants = {\n    'Logan': [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n              (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30))],\n    'Kathryn': [],\n    'Jennifer': [],\n    'Alexis': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 0)),\n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    'Roy': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 30)),\n            (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n            (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n            (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 0)),\n            (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Function to determine available time slots\ndef find_available_time(participants, meeting_duration, work_start, work_end):\n    busy_slots = []\n    \n    # Gather all busy slots from participants\n    for schedule in participants.values():\n        busy_slots.extend(schedule)\n    \n    busy_slots.sort()\n    \n    # Check for time slots\n    last_end = work_start\n    for start, end in busy_slots:\n        if last_end + meeting_duration <= start:\n            return last_end.strftime('%H:%M') + ':' + (last_end + meeting_duration).strftime('%H:%M')\n        last_end = max(last_end, end)\n    \n    # Check the time after the last busy slot until work end\n    if last_end + meeting_duration <= work_end:\n        return last_end.strftime('%H:%M') + ':' + (last_end + meeting_duration).strftime('%H:%M')\n    \n    return None\n\n# Find available time to schedule the meeting\navailable_time = find_available_time(participants, meeting_duration, work_start, work_end)\n\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_285"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules of participants\nschedules = {\n    \"Ralph\": [(work_start, datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"John\": [],\n    \"Sharon\": [],\n    \"Sophia\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), work_end)],\n    \"Samantha\": [(work_start, datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)]\n}\n\n# Helper function to find available time slots\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    all_busy_times = []\n    \n    # Collect busy times from all participants\n    for participant, busy_times in schedules.items():\n        all_busy_times.extend(busy_times)\n\n    # Sort busy times by start time\n    all_busy_times.sort(key=lambda x: x[0])\n\n    # Find free slots\n    previous_end = work_start\n\n    for start, end in all_busy_times:\n        # Check if there is a free slot before this busy time\n        if previous_end + meeting_duration <= start:\n            return previous_end.strftime(\"%H:%M\") + \":\" + (previous_end + meeting_duration).strftime(\"%H:%M\")\n        previous_end = max(previous_end, end)  # Move the end to the latest end of busy times\n\n    # Check if there is space after the last busy time until work end\n    if previous_end + meeting_duration <= work_end:\n        return previous_end.strftime(\"%H:%M\") + \":\" + (previous_end + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_286"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules of the participants\nschedules = {\n    \"Aaron\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Lori\": [],\n    \"Jordan\": [],\n    \"Noah\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Susan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for participant, busy_slots in schedules.items():\n        for busy_start, busy_end in busy_slots:\n            if start < busy_end and end > busy_start:  # overlap condition\n                return False\n    return True\n\n# Find the suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        break\n    current_time += timedelta(minutes=30)\n\n# Output the proposed time in the desired format\noutput = f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_287"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Dennis\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Ralph\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Deborah\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Karen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Working hours and meeting duration\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    slots = []\n    \n    # Collect all busy times\n    busy_times = []\n    for person, busy_slots in schedules.items():\n        for start, end in busy_slots:\n            busy_times.append((start, end))\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Determine free slots\n    last_end = start_of_day\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            slots.append((last_end, last_end + meeting_duration))\n        last_end = max(last_end, end)\n\n    # Check for time after the last busy period\n    if last_end + meeting_duration <= end_of_day:\n        slots.append((last_end, last_end + meeting_duration))\n\n    # Return the first available time slot\n    if slots:\n        return slots[0]\n    return None\n\n# Calculate the proposed time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    proposed_start = meeting_time[0].strftime(\"%H:%M\")\n    proposed_end = meeting_time[1].strftime(\"%H:%M\")\n    print(f'{proposed_start}:{proposed_end}')\n```",
            "count": "calendar_scheduling_example_288"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules for participants\nschedules = {\n    \"Kathryn\": [],\n    \"Janet\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Alexander\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Alan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Henry\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find available slot\ndef find_available_slot():\n    current_time = working_start\n    while current_time + meeting_duration <= working_end:\n        is_available = True\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if current_time < end and (current_time + meeting_duration) > start:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)\n\n# Get a suitable time for the meeting\nsuitable_time = find_available_slot()\nprint(suitable_time)\n```",
            "count": "calendar_scheduling_example_289"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Define participants' schedules\n    schedules = {\n        \"Ryan\": [],\n        \"Susan\": [],\n        \"Joyce\": [(\"10:00\", \"10:30\"), (\"15:30\", \"16:00\")],\n        \"Jacob\": [(\"09:00\", \"11:00\"), (\"12:30\", \"13:00\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n        \"Lauren\": [(\"09:00\", \"10:00\"), (\"13:00\", \"13:30\"), (\"14:30\", \"17:00\")]\n    }\n    \n    # Convert schedules to datetime objects\n    busy_times = []\n    for participant, busy_slots in schedules.items():\n        for start, end in busy_slots:\n            busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    \n    # Combine busy slots\n    busy_times.sort()\n    \n    # Find available time slots\n    last_end = work_start\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            available_start = last_end\n            available_end = last_end + meeting_duration\n            if available_end <= work_end:\n                return f\"{available_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n\n    # Check if there is time available after the last busy slot\n    if last_end + meeting_duration <= work_end:\n        available_start = last_end\n        available_end = last_end + meeting_duration\n        return f\"{available_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\"\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_290"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\nschedules = {\n    \"Pamela\": [],\n    \"Randy\": [ \n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Elijah\": [\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Jerry\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Kevin\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\ndef find_meeting_time(start, end, duration, schedules):\n    current_time = start\n    while current_time + duration <= end:\n        # Check if the current time is available for all participants\n        if all(not any(start < busy_end and end > busy_start for busy_start, busy_end in participant_schedule)\n               for participant_schedule in schedules.values()):\n            return current_time.strftime(\"%H:%M\") + ':' + (current_time + duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n    return None\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(work_start, work_end, meeting_duration, schedules)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_291"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Participant busy times (start, end)\n    schedules = {\n        \"Larry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Harold\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n        \"Elijah\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n        \"Willie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Patrick\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    }\n\n    # Find free time slots\n    free_slots = []\n    \n    # Create a list of all busy times\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Check for free slots in between busy times\n    current_start = work_start\n\n    for start, end in busy_times:\n        if current_start + meeting_duration <= start:\n            free_slots.append((current_start, start))\n        current_start = max(current_start, end)\n\n    # Check after the last busy time\n    if current_start + meeting_duration <= work_end:\n        free_slots.append((current_start, work_end))\n\n    # Return the first free slot's start time if available\n    if free_slots:\n        meeting_start = free_slots[0][0]\n        meeting_end = meeting_start + meeting_duration\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Example Usage\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_292"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule of each participant (free time slots)\nfree_slots = {\n    \"Scott\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Nicholas\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Donna\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Vincent\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ann\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find common free slot\ndef find_meeting_time(free_slots, meeting_duration):\n    # Get potential time slots by intersecting free slots of all participants\n    common_slots = []\n\n    # Check all participants' free slots\n    for start_time in range(9*60, 17*60): # from 9:00 to 17:00\n        slot_start = datetime.strptime(f\"{start_time // 60}:{start_time % 60:02}\", \"%H:%M\")\n        slot_end = slot_start + meeting_duration\n        \n        if all(any(start <= slot_start < end and start < slot_end <= end for start, end in free_slots[participant]) for participant in free_slots):\n            common_slots.append((slot_start, slot_end))\n\n    # Return the first common slot found\n    if common_slots:\n        return common_slots[0]\n    return None\n\nmeeting_start, meeting_end = find_meeting_time(free_slots, meeting_duration)\n\n# Output in the required format\nprint(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_293"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy times for each participant\nschedules = {\n    \"Willie\": [],\n    \"Marilyn\": [(datetime.strptime(\"14:00\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), timedelta(minutes=30))],\n    \"Charlotte\": [(datetime.strptime(\"09:00\", \"%H:%M\"), timedelta(minutes=30)),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), timedelta(minutes=30)),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), timedelta(minutes=30)),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), timedelta(minutes=30))],\n    \"Zachary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), timedelta(minutes=60)),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), timedelta(minutes=60)),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), timedelta(minutes=60)),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), timedelta(minutes=60))],\n    \"Noah\": [(datetime.strptime(\"10:30\", \"%H:%M\"), timedelta(minutes=60)),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), timedelta(minutes=120)),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), timedelta(minutes=30)),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), timedelta(minutes=90))]\n}\n\n# Function to determine available time slots\ndef find_available_slot(meeting_duration):\n    current_time = work_start\n    while current_time < work_end:\n        # Checking for conflicts\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        \n        if meeting_end > work_end:\n            break  # No need to check further, beyond work hours\n        \n        is_conflict = False\n        \n        for busy_times in schedules.values():\n            for busy_start, busy_duration in busy_times:\n                busy_end = busy_start + busy_duration\n                if (meeting_start < busy_end) and (busy_start < meeting_end):\n                    is_conflict = True\n                    break\n            if is_conflict:\n                break\n                \n        if not is_conflict:\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n\n        current_time += timedelta(minutes=30)\n\n# Schedule a 30-minute meeting\nmeeting_time = find_available_slot(30)\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```\n",
            "count": "calendar_scheduling_example_294"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules in ranges (start, end)\ngloria_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nann_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ndorothy_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ndavid_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Build a list of busy time slots for all participants\nbusy_times = gloria_busy + ann_busy + dorothy_busy + david_busy\n\n# A function to find a suitable meeting time\ndef find_meeting_time(start_time, end_time, meeting_duration, busy_times):\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        # Check if the current time overlaps with any busy time\n        if not any(start <= current_time < end or start < current_time + meeting_duration <= end for start, end in busy_times):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Increment by one minute if busy\n    return None\n\n# Call the function and print the proposed time\nproposed_time = find_meeting_time(start_time, end_time, meeting_duration, busy_times)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_295"
        },
        {
            "final_program_time": "{12:00:12:00}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules for each participant\nschedules = {\n    'Albert': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \n    'Jessica': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \n    'Lisa': [],\n    \n    'Danielle': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \n    'Deborah': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n}\n\n# Define the meeting length\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours\nstart_of_day = datetime.strptime('09:00', '%H:%M')\nend_of_day = datetime.strptime('17:00', '%H:%M')\n\ndef find_meeting_time(schedules, duration, start, end):\n    current_time = start\n    \n    while current_time + duration <= end:\n        # Check if the current time slot is free for everyone\n        is_free = True\n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if busy_start <= current_time < busy_end or busy_start < current_time + duration <= busy_end:\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        if is_free:\n            return current_time.strftime('%H:%M:%H:%M')\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Find a suitable time for the meeting\nmeeting_time = find_meeting_time(schedules, meeting_duration, start_of_day, end_of_day)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_296"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants and their schedules\nschedules = {\n    \"Carolyn\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    \"Mark\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    \"Thomas\": [],  # free all day\n    \n    \"Hannah\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Abigail\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Define meeting duration and available time window\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if time slot is free for all participants\ndef is_time_slot_free(start, end, schedules):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end <= busy_start or start >= busy_end):  # overlap check\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time(schedules, meeting_duration):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        if is_time_slot_free(current_time, next_time, schedules):\n            return current_time, next_time\n        current_time += timedelta(minutes=30)  # increment time by 30 minutes\n    return None\n\n# Calculate proposed meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_297"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\n# Define participant schedules in tuples of (start, end) in minutes from 00:00\ndef schedule_meeting():\n    participants = {\n        \"Ryan\": [(780, 810), (840, 870)],  # 13:00 to 13:30, 14:00 to 14:30\n        \"Randy\": [],  # Free all day\n        \"Diana\": [],  # Free all day\n        \"Stephanie\": [(540, 630), (660, 840), (870, 990)],  # 9:00 to 10:30, 11:00 to 14:00, 14:30 to 16:30\n        \"Doris\": [(540, 570), (600, 690), (780, 840), (870, 990)],  # 9:00 to 9:30, 10:00 to 11:30, 13:00 to 14:00, 14:30 to 16:30\n    }\n\n    # Define work hours in minutes\n    work_start = 540  # 9:00\n    work_end = 1020   # 17:00\n    meeting_duration = 30  # 30 minutes\n\n    # Find free slots for each participant\n    free_slots = []\n    for participant, busy_times in participants.items():\n        if not busy_times:  # If free all day\n            free_slots.append([(work_start, work_end)])\n            continue\n\n        busy_times.sort()\n        free_times = []\n\n        # Calculate free times based on busy intervals\n        last_end = work_start\n        for start, end in busy_times:\n            if last_end < start:\n                free_times.append((last_end, start))\n            last_end = max(last_end, end)\n\n        if last_end < work_end:\n            free_times.append((last_end, work_end))\n\n        free_slots.append(free_times)\n\n    # Find overlapping free slots across all participants\n    common_free_slots = free_slots[0]\n    for slots in free_slots[1:]:\n        new_common = []\n        for start1, end1 in common_free_slots:\n            for start2, end2 in slots:\n                new_start = max(start1, start2)\n                new_end = min(end1, end2)\n                if new_start < new_end:  # Only consider valid overlaps\n                    new_common.append((new_start, new_end))\n        common_free_slots = new_common\n\n    # Find a suitable time that fits the meeting duration\n    for start, end in common_free_slots:\n        if end - start >= meeting_duration:\n            proposed_start = start\n            proposed_end = start + meeting_duration\n            return f\"{proposed_start // 60:02}:{proposed_start % 60:02}:{proposed_end // 60:02}:{proposed_end % 60:02}\"\n\n# Output the proposed time for the meeting\nprint(schedule_meeting())\n```",
            "count": "calendar_scheduling_example_298"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules in tuples of (start, end)\nschedules = {\n    'Jacqueline': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                   (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                   (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                   (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                   (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Lauren': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Billy': [],\n    'Mark': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Teresa': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Create a list of busy times for all participants\nbusy_times = []\nfor person, time_slots in schedules.items():\n    for start, end in time_slots:\n        busy_times.append((start, end))\n\n# Merge overlapping busy times\nbusy_times.sort()\nmerged_busy_times = []\nfor start, end in busy_times:\n    if not merged_busy_times or merged_busy_times[-1][1] < start:\n        merged_busy_times.append((start, end))\n    else:\n        merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n# Find available time slots for the meeting\navailable_start = work_start\nfor start, end in merged_busy_times:\n    if available_start + meeting_duration <= start:\n        # We found an available slot\n        proposed_start = available_start\n        proposed_end = proposed_start + meeting_duration\n        if proposed_end <= work_end:\n            print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n            break\n    available_start = max(available_start, end)\n\n```",
            "count": "calendar_scheduling_example_299"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\n# Participant schedules\nschedules = {\n    \"Eric\": [(10, 30), (12, 30)],\n    \"Jeremy\": [(11, 0), (12, 30), (15, 0)],\n    \"Joe\": [],\n    \"Brian\": [(9, 0), (10, 30), (11, 0), (13, 30), (14, 30), (16, 30)],\n    \"Brittany\": [(9, 0), (9, 30), (10, 30), (12, 0), (13, 30), (15, 0), (16, 30)],\n    \"Julia\": [(9, 0), (11, 0), (12, 30), (13, 30), (15, 0), (16, 0)],\n}\n\n# Meeting duration\nmeeting_duration = 30  # in minutes\nwork_hours_start = 9 * 60  # 9:00 in minutes\nwork_hours_end = 17 * 60    # 17:00 in minutes\n\n# Convert schedules into a list with busy time in minutes\nbusy_times = []\nfor times in schedules.values():\n    for time in times:\n        busy_start = time[0] * 60 + time[1]  # convert to minutes\n        busy_end = busy_start + meeting_duration\n        busy_times.append((busy_start, busy_end))\n\n# Merge busy times and find free slots\nbusy_times.sort()\nmerged_busy_times = []\nfor start, end in busy_times:\n    if not merged_busy_times or merged_busy_times[-1][1] < start:\n        merged_busy_times.append((start, end))\n    else:\n        merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n# Find free slots between work hours\nfree_slots = []\nprev_end = work_hours_start\nfor start, end in merged_busy_times:\n    if start > prev_end:\n        free_slots.append((prev_end, start))\n    prev_end = end\nif prev_end < work_hours_end:\n    free_slots.append((prev_end, work_hours_end))\n\n# Find a suitable slot for the meeting\nfor start, end in free_slots:\n    if (end - start) >= meeting_duration:\n        proposed_start = start\n        proposed_end = proposed_start + meeting_duration\n        print(f\"{proposed_start // 60:02}:{proposed_start % 60:02}:{proposed_end // 60:02}:{proposed_end % 60:02}\")\n        break\n```",
            "count": "calendar_scheduling_example_300"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_schedule, meeting_duration, work_start, work_end):\n    work_start = datetime.strptime(work_start, \"%H:%M\")\n    work_end = datetime.strptime(work_end, \"%H:%M\")\n    \n    # Generate all possible time slots\n    time_slots = []\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # check every 30 minutes slot\n\n    # Check each time slot against participants' schedules\n    for start_time in time_slots:\n        end_time = start_time + meeting_duration\n        if all(not (start_time < busy_end and end_time > busy_start) for busy_times in participants_schedule.values() for busy_start, busy_end in busy_times):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Existing schedules for everyone\nparticipants_schedule = {\n    \"Amy\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Jonathan\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Brittany\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Matthew\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Catherine\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carl\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = \"09:00\"\nwork_end = \"17:00\"\n\n# Find a suitable time for the meeting\nmeeting_time = find_meeting_time(participants_schedule, meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_301"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nschedules = {\n    \"Nicole\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Christine\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Anna\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Terry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Julie\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Abigail\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Anna's preference\nanna_not_before = datetime.strptime(\"14:00\", \"%H:%M\")\n\n# Function to find common available time\ndef find_meeting_time(start, end, duration, schedules, not_before=None):\n    current_time = start\n    while current_time + duration <= end:\n        # Check if current time overlaps with any participant's schedule\n        meeting_start = current_time\n        meeting_end = current_time + duration\n        \n        if not_before and meeting_end <= not_before:\n            current_time = not_before\n            continue\n\n        available = True\n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if not (meeting_end <= busy_start or meeting_start >= busy_end):\n                    available = False\n                    break\n            if not available:\n                break\n\n        if available:\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n\n        current_time += timedelta(minutes=30)\n\n    return None\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(start_time, end_time, meeting_duration, schedules, not_before=anna_not_before)\n\nif meeting_time:\n    print(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\n```\n",
            "count": "calendar_scheduling_example_302"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy schedules (start and end times)\nschedules = {\n    \"Theresa\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Alexander\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Virginia\": [],\n    \"Lisa\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Natalie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Victoria\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Create a combined list of busy periods\nbusy_periods = []\nfor busy_times in schedules.values():\n    busy_periods.extend(busy_times)\n\n# Sort busy periods by start time\nbusy_periods.sort(key=lambda x: x[0])\n\n# Find available time slots\navailable_slots = []\ncurrent_time = working_hours_start\n\nfor start, end in busy_periods:\n    if current_time + meeting_duration <= start:\n        available_slots.append((current_time, start))\n    current_time = max(current_time, end)\n\n# Check the slot after the last busy period until the end of the working hours\nif current_time + meeting_duration <= working_hours_end:\n    available_slots.append((current_time, working_hours_end))\n\n# Find a suitable slot\nfor start_time, end_time in available_slots:\n    if start_time + meeting_duration <= end_time:\n        proposed_time = start_time\n        break\n\n# Output the proposed time in the required format\nstart_str = proposed_time.strftime(\"%H:%M\")\nend_str = (proposed_time + meeting_duration).strftime(\"%H:%M\")\nprint(f\"{start_str}:{end_str}\")\n```",
            "count": "calendar_scheduling_example_303"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Existing schedules\n    busy_times = {\n        \"Christine\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                       (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                       (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                       (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                       (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \n        \"Janice\": [],\n        \n        \"Bobby\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n        \n        \"Elizabeth\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                      (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                      (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \n        \"Tyler\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \n        \"Edward\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    }\n\n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Generate all busy times into a single list\n    all_busy_times = []\n    for times in busy_times.values():\n        all_busy_times.extend(times)\n    \n    # Sort the busy times\n    all_busy_times.sort(key=lambda x: x[0])\n    \n    # Determine free time slots\n    free_times = []\n    previous_end = work_start\n\n    for busy_start, busy_end in all_busy_times:\n        if previous_end < busy_start:\n            free_times.append((previous_end, busy_start))\n        previous_end = max(previous_end, busy_end)\n\n    # Check for free time slots until work end\n    if previous_end < work_end:\n        free_times.append((previous_end, work_end))\n    \n    # Janice's constraint: No meetings after 13:00\n    janice_constraint_end = datetime.strptime(\"13:00\", \"%H:%M\")\n\n    # Find a suitable free time slot for the meeting\n    for start, end in free_times:\n        # Meeting should end before Janice's constraint and last for 30 minutes\n        if start < janice_constraint_end:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            if meeting_end <= end:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No suitable time found\"\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_304"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Diane\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Helen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Arthur\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ethan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Beverly\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Deborah\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Create a list of busy times\nbusy_times = []\nfor participant, times in schedules.items():\n    for start, end in times:\n        busy_times.append((start, end))\n\n# Sort busy times\nbusy_times.sort()\n\n# Calculate free intervals\nfree_intervals = []\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Add intervals before the first busy time\nif busy_times[0][0] > start_of_day:\n    free_intervals.append((start_of_day, busy_times[0][0]))\n\n# Add intervals between busy times\nfor i in range(len(busy_times) - 1):\n    if busy_times[i][1] < busy_times[i + 1][0]:\n        free_intervals.append((busy_times[i][1], busy_times[i + 1][0]))\n\n# Add interval after the last busy time\nif busy_times[-1][1] < end_of_day:\n    free_intervals.append((busy_times[-1][1], end_of_day))\n    \n# Find a suitable time for the meeting\nfor start, end in free_intervals:\n    if end - start >= meeting_duration:\n        meeting_start = start\n        meeting_end = meeting_start + meeting_duration\n        if meeting_end <= datetime.strptime(\"15:30\", \"%H:%M\"):\n            print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_305"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Donald\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n               (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n               (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Zachary\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n                (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 30)),\n                (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n                (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 14, 0))],\n    \"Kathryn\": [],\n    \"Deborah\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n                (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n                (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 0)),\n                (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n                (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 17, 0))],\n    \"Teresa\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n               (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 11, 0)),\n               (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    \"James\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n              (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 30)),\n              (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 14, 0)),\n              (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 17, 0))]\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nworking_start = datetime(2023, 10, 2, 9, 0)\nworking_end = datetime(2023, 10, 2, 17, 0)\n\n# Function to check availability\ndef is_available(start, end):\n    for schedule in schedules.values():\n        for busy_start, busy_end in schedule:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = working_start\nwhile current_time + meeting_duration <= working_end:\n    if is_available(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_306"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules as tuples of (start_time, end_time)\nschedules = {\n    \"Ronald\": [(work_start, work_end)],\n    \"Stephen\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Brittany\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)],\n    \"Dorothy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), work_end)],\n    \"Rebecca\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), work_end)],\n    \"Jordan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Generate a list of busy times from all participants\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n\n    # Sort the busy times\n    busy_times.sort(key=lambda time: time[0])\n\n    # Find available time slots\n    last_end_time = work_start\n    for start, end in busy_times:\n        if last_end_time + meeting_duration <= start:\n            return last_end_time.strftime(\"%H:%M\") + ':' + (last_end_time + meeting_duration).strftime(\"%H:%M\")\n        last_end_time = max(last_end_time, end)\n\n    # Check time at the end of the day\n    if last_end_time + meeting_duration <= work_end:\n        return last_end_time.strftime(\"%H:%M\") + ':' + (last_end_time + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)  # Output format: HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_307"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules for each participant\nbusy_slots = {\n    \"Adam\": [(\"10:00\", \"10:30\"), (\"12:30\", \"13:00\")],\n    \"Frances\": [(\"12:30\", \"13:00\"), (\"14:00\", \"14:30\")],\n    \"Natalie\": [(\"10:30\", \"11:00\"), (\"12:30\", \"13:30\"), (\"16:00\", \"16:30\")],\n    \"Patrick\": [(\"10:30\", \"11:00\"), (\"12:00\", \"14:00\"), (\"14:30\", \"16:00\")],\n    \"Willie\": [(\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"13:00\"), (\"14:00\", \"15:30\"), (\"16:00\", \"16:30\")],\n    \"Diana\": [(\"09:00\", \"10:30\"), (\"11:00\", \"16:30\")]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nstart_of_week_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_week_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_time_available(start, end):\n    \"\"\"Check if the time slot is available.\"\"\"\n    return all(not (start < datetime.strptime(busy_start, \"%H:%M\") < end or\n                    start < datetime.strptime(busy_end, \"%H:%M\") < end)\n               for busy_slots in busy_slots.values() for busy_start, busy_end in busy_slots)\n\ndef find_meeting_time():\n    \"\"\"Find a suitable time for the meeting.\"\"\"\n    current_time = start_of_week_day\n    while current_time + meeting_duration <= end_of_week_day:\n        end_time = current_time + meeting_duration\n        if is_time_available(current_time, end_time):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every half hour\n    return None\n\n# Get the suggested time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_308"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the working hours and meeting duration\n    start_work_hour = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_work_hour = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Participant's schedules (busy times)\n    schedules = {\n        \"Nicholas\": [(start_work_hour, end_work_hour)],\n        \"Emma\": [(start_work_hour, end_work_hour)],\n        \"Catherine\": [\n            (start_work_hour, datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), end_work_hour)\n        ],\n        \"Steven\": [\n            (start_work_hour, datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:00\", \"%H:%M\"), end_work_hour)\n        ],\n        \"Adam\": [\n            (start_work_hour, datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), end_work_hour)\n        ],\n        \"Lori\": [\n            (start_work_hour, datetime.strptime(\"11:30\", \"%H:%M\")),\n            (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n        ]\n    }\n\n    # Create a list for free time slots\n    free_slots = []\n    \n    # Find free time slots in a single day\n    for participant, busy_times in schedules.items():\n        free_time = []\n        last_end = start_work_hour\n        \n        for start, end in busy_times:\n            if last_end < start:\n                free_time.append((last_end, start))\n            last_end = max(last_end, end)\n        \n        if last_end < end_work_hour:\n            free_time.append((last_end, end_work_hour))\n        \n        if not free_slots:\n            free_slots = free_time\n        else:\n            # Intersect the free time of each participant\n            new_free_slots = []\n            for f_start, f_end in free_slots:\n                for b_start, b_end in free_time:\n                    # Find overlap\n                    if f_start < b_end and b_start < f_end:\n                        new_free_slots.append((max(f_start, b_start), min(f_end, b_end)))\n            free_slots = new_free_slots\n\n    # Check for a suitable time slot that can accommodate the meeting\n    for f_start, f_end in free_slots:\n        if f_end - f_start >= meeting_duration:\n            proposed_meeting_start = f_start\n            proposed_meeting_end = proposed_meeting_start + meeting_duration\n            return proposed_meeting_start.strftime(\"%H:%M\") + \":\" + proposed_meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\n# Run the function and print the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_309"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define available time slots based on participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy times for each participant\nbusy_times = {\n    \"Helen\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Sophia\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Anthony\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Hannah\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Donna\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Brittany\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to check if a proposed time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for busy in busy_times.values():\n        for (busy_start, busy_end) in busy:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_slot_free(current_time, current_time + meeting_duration):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=10)  # Check the next time slot in 10-minute increments\n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_310"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "IndexError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participant schedules\nschedules = {\n    'Zachary': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Douglas': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Adam': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Mark': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))\n    ],\n    'Ashley': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ],\n    'Jennifer': [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nworking_start = datetime.strptime('09:00', '%H:%M')\nworking_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find a suitable time\ndef find_meeting_time(schedules, duration):\n    available_slots = []\n    for start, end in schedules[\"Zachary\"]:\n        available_slots.append((start, end))\n    \n    # Check each participant's unavailable times\n    for participant, times in schedules.items():\n        if participant == \"Zachary\":\n            continue\n        unavailable_times = []\n        for start, end in times:\n            unavailable_times.append((start, end))\n        \n        # Finding free slots\n        new_slots = []\n        for start, end in available_slots:\n            free_start = start\n            for u_start, u_end in unavailable_times:\n                if free_start < u_start:\n                    free_end = min(end, u_start)\n                    while free_start + duration <= free_end:\n                        new_slots.append((free_start, free_start + duration))\n                        free_start += timedelta(minutes=1)\n                free_start = max(free_start, u_end)\n            if free_start < end:\n                free_end = end\n                while free_start + duration <= free_end:\n                    new_slots.append((free_start, free_start + duration))\n                    free_start += timedelta(minutes=1)\n        \n        available_slots = new_slots\n    \n    # Return the first available time slot\n    return available_slots[0][0], available_slots[0][1]\n\nmeeting_start, meeting_end = find_meeting_time(schedules, meeting_duration)\n\n# Output the proposed time in HH:MM:HH:MM format\noutput_time = f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\nprint(output_time)\n```",
            "count": "calendar_scheduling_example_311"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nschedules = {\n    \"Samantha\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Jerry\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Walter\": [],\n    \"Sara\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kenneth\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Danielle\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Get all occupied time ranges for the participants\noccupied_intervals = []\nfor busy_times in schedules.values():\n    occupied_intervals.extend(busy_times)\n\n# Sort and merge overlapping time intervals\noccupied_intervals.sort(key=lambda x: x[0])\nmerged_intervals = []\n\nfor start, end in occupied_intervals:\n    if not merged_intervals or merged_intervals[-1][1] < start:\n        merged_intervals.append((start, end))\n    else:\n        merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end))\n\n# Find a suitable time for the meeting\ncurrent_time = work_start\nfor start, end in merged_intervals:\n    # Check for free slots before the busy time\n    if current_time + meeting_duration <= start:\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time = max(current_time, end)\n\n# Lastly check after the last busy time if there is still time available\nif current_time + meeting_duration <= work_end:\n    print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_312"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# The working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules (start, end) for each participant\nschedules = {\n    \"Carl\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Shirley\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Timothy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Marilyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Martha\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Samantha\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to find available time slot\ndef find_time_slot():\n    free_times = []\n    \n    # Create a list of occupied time slots merged together\n    all_blocked = []\n    for times in schedules.values():\n        all_blocked.extend(times)\n\n    # Sort the blocked times\n    all_blocked.sort(key=lambda x: x[0])\n\n    # Start checking for free slots\n    current_time = work_start\n    for start, end in all_blocked:\n        # While the current time is before the start of a blocked time\n        while current_time + meeting_duration <= start:\n            free_times.append((current_time, current_time + meeting_duration))\n            current_time += timedelta(minutes=30)  # Check the next time slot\n        \n        # Move the current time to the end of the blocked time\n        current_time = max(current_time, end)\n\n    # Check at the end of the day\n    while current_time + meeting_duration <= work_end:\n        free_times.append((current_time, current_time + meeting_duration))\n        current_time += timedelta(minutes=30)\n\n    # Return first available time slot\n    return free_times[0] if free_times else None\n\n# Get the available time slot\navailable_slot = find_time_slot()\nif available_slot:\n    print(f\"{available_slot[0].strftime('%H:%M')}:{available_slot[1].strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_313"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\nbusy_times = {\n    'Tyler': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Julie': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Andrea': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Gabriel': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Function to check if a time slot is available for everyone\ndef is_time_available(start, duration):\n    end = start + duration\n    for busy in busy_times.values():\n        for busy_start, busy_end in busy:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Find a suitable time slot for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_available(current_time, meeting_duration):\n            return current_time.strftime('%H:%M') + ':' + (current_time + meeting_duration).strftime('%H:%M')\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_314"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define busy schedules for each participant\nbusy_times = {\n    'Gloria': [],\n    'Roy': [(\"09:00\", \"10:00\")],\n    'Kimberly': [(\"09:00\", \"09:30\"), (\"11:00\", \"12:00\"), (\"16:30\", \"17:00\")],\n    'Robert': [(\"09:00\", \"09:30\"), (\"10:00\", \"11:00\"), (\"13:00\", \"13:30\"), (\"14:00\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    'Jesse': [(\"09:00\", \"09:30\"), (\"10:00\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:00\", \"14:00\"), (\"14:30\", \"15:00\")],\n    'Sophia': [(\"09:00\", \"12:00\"), (\"13:00\", \"17:00\")]\n}\n\n# Convert busy time ranges to datetime objects\ndef get_busy_periods(busy_times):\n    busy_periods = []\n    for times in busy_times.values():\n        for start, end in times:\n            busy_periods.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return busy_periods\n\nbusy_periods = get_busy_periods(busy_times)\n\n# Function to find a suitable meeting time\ndef find_meeting_time(start_time, end_time, meeting_duration, busy_periods):\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        if all(not (current_time < end and meeting_end_time > start) for start, end in busy_periods):\n            return current_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Check the next minute\n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(start_time, end_time, meeting_duration, busy_periods)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_315"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy times\nschedules = {\n    \"Brittany\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Gloria\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    \"Lisa\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \n    \"Paul\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Justin\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Diana\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a common available slot\ndef find_time_slot(duration_minutes):\n    start_work_hour = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_work_hour = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a free time slots list\n    free_time_slots = []\n    \n    current_time = start_work_hour\n    while current_time < end_work_hour:\n        available = True\n        for busy_times in schedules.values():\n            for busy_start, busy_end in busy_times:\n                if busy_start <= current_time < busy_end or busy_start < current_time + timedelta(minutes=duration_minutes):\n                    available = False\n                    break\n            if not available:\n                break\n        \n        if available:\n            free_time_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)\n    \n    for slot in free_time_slots:\n        if all(slot + timedelta(minutes=duration_minutes) <= end for busy_times in schedules.values() for start, end in busy_times):\n            proposed_time = slot.strftime(\"%H:%M\") + \":\" + (slot + timedelta(minutes=duration_minutes)).strftime(\"%H:%M\")\n            return proposed_time\n    \n    return None\n\n# Meeting duration\nduration_minutes = 30\n\n# Get proposed time\nproposed_time = find_time_slot(duration_minutes)\nprint(f\"Proposed time: {proposed_time}\")\n```",
            "count": "calendar_scheduling_example_316"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    'Virginia': [],\n    'Kevin': [(14, 30), (15, 0), (15, 30), (16, 0)],\n    'Kimberly': [(9, 30), (10, 30), (11, 30), (12, 0), (12, 30), (13, 0), (13, 30), (15, 0), (15, 30)],\n    'Lawrence': [(10, 0), (10, 30), (11, 0), (11, 30), (12, 0), (12, 30), (13, 0), (14, 0), (14, 30), (15, 30), (16, 0), (16, 30)],\n    'Donna': [(10, 0), (11, 0), (12, 0), (15, 0), (15, 30), (16, 30), (17, 0)],\n    'Joe': [(9, 30), (10, 0), (11, 30), (12, 30), (13, 0), (13, 30), (14, 30), (16, 0), (16, 30), (17, 0)]\n}\n\n# Convert schedules to busy time intervals\ndef convert_schedule_to_intervals(schedule):\n    busy_intervals = []\n    for start in schedule:\n        busy_intervals.append((start[0] * 60 + start[1], start[0] * 60 + start[1] + 30))  # 30 minute meetings\n    return busy_intervals\n\n# Find common available time\ndef find_available_time():\n    work_start = 9 * 60  # 9:00 AM in minutes\n    work_end = 17 * 60    # 5:00 PM in minutes\n\n    all_busy_times = []\n    for participant, busy_times in schedules.items():\n        all_busy_times.extend(convert_schedule_to_intervals(busy_times))\n\n    all_busy_times.sort()  # Sort busy times\n\n    # Create free time slots\n    free_times = []\n    last_end = work_start\n\n    for start, end in all_busy_times:\n        if last_end < start:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < work_end:\n        free_times.append((last_end, work_end))\n\n    # Find a suitable time for a 30-minute meeting\n    for start, end in free_times:\n        if end - start >= 30:\n            meeting_start = start\n            meeting_end = start + 30\n            return f\"{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}\"\n\n# Output the proposed meeting time\nprint(find_available_time())\n```",
            "count": "calendar_scheduling_example_317"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy schedules as a list of tuples (start_time, end_time)\nschedules = {\n    \"Shirley\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Carl\": [],\n    \"Bradley\": [],\n    \"Kevin\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Walter\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Anna\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end and end > busy_start):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = working_hours_start\nwhile current_time + meeting_duration <= working_hours_end:\n    next_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, next_time):\n        proposed_time = f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n        print(proposed_time)\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_318"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, duration):\n    # Convert schedule times to datetime objects\n    busy_times = []\n    for participant in schedules:\n        for time in schedules[participant]:\n            busy_times.append((datetime.strptime(time[0], \"%H:%M\"), datetime.strptime(time[1], \"%H:%M\")))\n    \n    # Define the work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of all time slots\n    free_slots = []\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Find free slots by checking busy times\n    last_end_time = work_start\n    for start, end in busy_times:\n        if last_end_time < start:\n            free_slots.append((last_end_time, start))\n        last_end_time = max(last_end_time, end)\n    \n    # Check for free time after last busy slot till end of work hours\n    if last_end_time < work_end:\n        free_slots.append((last_end_time, work_end))\n    \n    # Now check for a free slot that can accommodate the meeting duration\n    for start, end in free_slots:\n        if (end - start) >= timedelta(minutes=duration):\n            proposed_start = start\n            proposed_end = start + timedelta(minutes=duration)\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    \n    return None\n\nschedules = {\n    \"Natalie\": [(\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"Evelyn\": [(\"09:00\", \"17:00\")],\n    \"Andrea\": [(\"09:00\", \"17:00\")],\n    \"Kimberly\": [(\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:30\", \"13:30\"), (\"14:30\", \"15:30\")],\n    \"Dennis\": [(\"09:00\", \"10:00\"), (\"11:00\", \"11:30\"), (\"12:00\", \"14:00\"), (\"14:30\", \"16:00\")],\n    \"Larry\": [(\"09:00\", \"11:00\"), (\"12:00\", \"17:00\")]\n}\n\nmeeting_duration = 30  # minutes\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)  # Output the proposed meeting time\n```",
            "count": "calendar_scheduling_example_319"
        },
        {
            "final_program_time": "{11:00:11:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time slots for each participant's meetings\nschedules = {\n    'Diane': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    'Christian': [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    'Jeffrey': [],\n    'Vincent': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Ethan': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Christine': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a list of all busy times\n    busy_times = []\n    for busy_slots in schedules.values():\n        busy_times.extend(busy_slots)\n\n    # Check time slots in the range from work start to work end\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end_time = current_time + meeting_duration\n        is_conflict = any(start < meeting_end_time and end > current_time for start, end in busy_times)\n        if not is_conflict:\n            return current_time.strftime(\"%H:%M:%H:%M\")\n        current_time += timedelta(minutes=1)  # Increment time by one minute\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_320"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Grace\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Ralph\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Harold\": [],\n    \"Kayla\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Andrea\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Maria\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"9:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find available time slots\ndef find_available_time_slots(schedules, work_start, work_end, meeting_duration):\n    busy_intervals = []\n\n    for participant, intervals in schedules.items():\n        for start, end in intervals:\n            busy_intervals.append((start, end))\n    \n    # Sort intervals and merge overlapping ones\n    busy_intervals.sort()\n    merged_intervals = []\n    \n    for start, end in busy_intervals:\n        if not merged_intervals or merged_intervals[-1][1] < start:\n            merged_intervals.append((start, end))\n        else:\n            merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end))\n\n    # Finding available slots\n    available_slots = []\n    \n    # Check before the first busy interval\n    if merged_intervals and merged_intervals[0][0] > work_start:\n        available_slots.append((work_start, merged_intervals[0][0]))\n\n    # Check between busy intervals\n    for i in range(len(merged_intervals) - 1):\n        end_current = merged_intervals[i][1]\n        start_next = merged_intervals[i + 1][0]\n        if end_current < start_next:\n            available_slots.append((end_current, start_next))\n\n    # Check after the last busy interval\n    if merged_intervals and merged_intervals[-1][1] < work_end:\n        available_slots.append((merged_intervals[-1][1], work_end))\n\n    return available_slots\n\n# Calculate slots\navailable_time_slots = find_available_time_slots(schedules, work_start, work_end, meeting_duration)\n\n# Check for suitable time\ndef schedule_meeting(available_slots, meeting_duration):\n    for start, end in available_slots:\n        if end - start >= meeting_duration:\n            return start, start + meeting_duration\n    return None\n\nmeeting_time = schedule_meeting(available_time_slots, meeting_duration)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available slot found.\")\n```\n",
            "count": "calendar_scheduling_example_321"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert string time to datetime object\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to convert datetime object to string time\ndef datetime_to_time(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, duration):\n    work_start = time_to_datetime(\"09:00\")\n    work_end = time_to_datetime(\"17:00\")\n    \n    duration_timedelta = timedelta(hours=duration)\n    \n    # Create all busy intervals for each participant\n    busy_times = []\n    for participant, busy_intervals in schedules.items():\n        for start, end in busy_intervals:\n            busy_times.append((time_to_datetime(start), time_to_datetime(end)))\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Merge overlapping busy intervals\n    merged_busy_times = []\n    current_start, current_end = busy_times[0]\n    \n    for start, end in busy_times[1:]:\n        if start <= current_end:  # Overlapping intervals\n            current_end = max(current_end, end)\n        else:\n            merged_busy_times.append((current_start, current_end))\n            current_start, current_end = start, end\n    merged_busy_times.append((current_start, current_end))\n    \n    # Find available slots for meeting\n    available_slots = []\n    last_end = work_start\n\n    for start, end in merged_busy_times:\n        if last_end + duration_timedelta <= start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    # Check for available time at the end of the workday\n    if last_end + duration_timedelta <= work_end:\n        available_slots.append((last_end, work_end))\n    \n    # Return the first available slot\n    if available_slots:\n        meeting_start, meeting_end = available_slots[0]\n        return f\"{datetime_to_time(meeting_start)}:{datetime_to_time(meeting_end)}\"\n    else:\n        return None\n\n# Schedules for the participants\nschedules = {\n    \"Kathryn\": [(\"09:30\", \"10:00\"), (\"12:30\", \"14:00\")],\n    \"Jessica\": [],\n    \"Ruth\": [(\"12:30\", \"13:00\"), (\"14:30\", \"15:00\")],\n    \"Matthew\": [(\"09:00\", \"10:00\"), (\"11:30\", \"13:00\"), (\"13:30\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Jennifer\": [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"15:00\", \"17:00\")],\n    \"Alice\": [(\"09:00\", \"10:30\"), (\"12:00\", \"12:30\"), (\"15:00\", \"17:00\")]\n}\n\n# Meeting duration in hours\nduration = 1\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time(schedules, duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_322"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time range of the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules based on the problem\nschedules = {\n    \"Ralph\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Kenneth\": [],\n    \"Diane\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kayla\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Bruce\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Find a suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    next_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, next_time):\n        print(f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=15)  # Check 15-minute intervals\n```",
            "count": "calendar_scheduling_example_323"
        },
        {
            "final_program_time": "{13:00:0:13}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participant schedules\nschedules = {\n    \"Jacob\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Nancy\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Lori\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Ann\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Pamela\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Anna\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if this slot is free for all participants\n        meeting_end = current_time + meeting_duration\n        if all(is_free_for_all(current_time, meeting_end, busy_times) for busy_times in schedules.values()):\n            return current_time.strftime(\"%H:%M:%S\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next possible start time\n    return None\n\ndef is_free_for_all(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if (start < busy_end and end > busy_start):  # Overlap condition\n            return False\n    return True\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_324"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\nschedules = {\n    \"Jose\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Keith\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Logan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Megan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Gary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Bobby\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting constraints\njose_availability_end = datetime.strptime(\"15:30\", \"%H:%M\")\n\n# Function to check availability\ndef is_available(start_time, end_time):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Main logic to find a suitable time\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        meeting_end_time = current_time + meeting_duration\n        if current_time <= jose_availability_end and is_available(current_time, meeting_end_time):\n            return current_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next half hour\n    return None\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_325"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of blocks\n    blocked_times = []\n    \n    for participant in participants:\n        for block in participant['busy_times']:\n            start = datetime.strptime(block[0], \"%H:%M\")\n            end = datetime.strptime(block[1], \"%H:%M\")\n            blocked_times.append((start, end))\n    \n    # Sort the blocked times\n    blocked_times.sort()\n    \n    # Merge overlapping blocks\n    merged_blocks = []\n    for start, end in blocked_times:\n        if not merged_blocks or merged_blocks[-1][1] < start:\n            merged_blocks.append((start, end))\n        else:\n            merged_blocks[-1] = (merged_blocks[-1][0], max(merged_blocks[-1][1], end))\n    \n    # Check for available time slots\n    available_start = work_start\n    for start, end in merged_blocks:\n        if available_start + timedelta(minutes=meeting_duration) <= start:\n            return f\"{available_start.strftime('%H:%M')}:{(available_start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n        available_start = max(available_start, end)\n    \n    # Check at the end of the work day\n    if available_start + timedelta(minutes=meeting_duration) <= work_end:\n        return f\"{available_start.strftime('%H:%M')}:{(available_start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n    \n    return None\n\nparticipants = [\n    {'name': 'Jason', 'busy_times': [('09:30', '10:00'), ('10:30', '11:30'), ('12:30', '13:00'), ('14:00', '14:30'), ('16:00', '16:30')]},\n    {'name': 'Anthony', 'busy_times': [('09:00', '09:30'), ('10:00', '11:00'), ('15:30', '17:00')]},\n    {'name': 'Joan', 'busy_times': [('11:00', '11:30'), ('12:00', '12:30'), ('15:00', '15:30'), ('16:00', '16:30')]},\n    {'name': 'Elizabeth', 'busy_times': [('09:00', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('13:30', '15:30'), ('16:00', '17:00')]},\n    {'name': 'Ryan', 'busy_times': [('09:00', '10:00'), ('11:00', '11:30'), ('12:30', '13:00'), ('13:30', '16:30')]},\n    {'name': 'Jeffrey', 'busy_times': [('09:30', '10:30'), ('11:00', '11:30'), ('12:00', '13:00'), ('13:30', '14:00'), ('14:30', '16:00'), ('16:30', '17:00')]}\n]\n\nmeeting_duration = 30  # 30 minutes\nproposed_time = find_meeting_time(participants, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_326"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\ncynthia_busy_slots = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nmegan_busy_slots = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nphilip_busy_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nryan_busy_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nlauren_busy_slots = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Function to check if a time slot is free for all participants\ndef is_slot_free(start_time, end_time):\n    for busy_slots in [cynthia_busy_slots, megan_busy_slots, philip_busy_slots, ryan_busy_slots, lauren_busy_slots]:\n        for (start, end) in busy_slots:\n            if start_time < end and start < end_time:  # Overlapping check\n                return False\n    return True\n\n# Find a slot for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_slot_free(current_time, current_time + meeting_duration):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Test the next minute\n    return None\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_327"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules with their busy times\nschedules = {\n    \"Diana\": [(datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n              (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Timothy\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n                (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n                (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n                (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30))],\n    \"Patrick\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n                (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n                (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 30)),\n                (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n                (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30))],\n    \"Janet\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n              (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n              (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n              (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 16, 30))],\n    \"Megan\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 12, 30)),\n              (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n              (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 17, 0))],\n    \"Evelyn\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 30)),\n               (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 17, 0))]\n}\n\n# Meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\ndef find_meeting_time(schedules, duration, work_start, work_end):\n    slots = []\n    current_time = work_start\n\n    # Create free time slots based on participant schedules\n    while current_time + duration <= work_end:\n        free_slot = True\n        for busy_times in schedules.values():\n            for busy_start, busy_end in busy_times:\n                if current_time < busy_end and current_time + duration > busy_start:\n                    free_slot = False\n                    break\n            if not free_slot:\n                break\n        \n        if free_slot:\n            slots.append(current_time)\n\n        current_time += timedelta(minutes=30)  # check the next 30 minutes\n\n    return slots[0] if slots else None\n\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\n\nif meeting_time:\n    output_time = meeting_time.strftime(\"%H:%M\")\n    end_time = (meeting_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{output_time}:{end_time}\")\n```\n",
            "count": "calendar_scheduling_example_328"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if the time slot is free for all participants\ndef is_time_slot_free(start_time, end_time, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\n# Set the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy schedules (example in (start_time, end_time) format)\nschedules = {\n    'Anna': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Samuel': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Joshua': [],\n    'Eugene': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Debra': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Carolyn': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\n# Create a consolidated busy schedule\nconsolidated_busy_times = []\nfor busy_times in schedules.values():\n    consolidated_busy_times.extend(busy_times)\n\n# Check each time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, current_time + meeting_duration, consolidated_busy_times):\n        # Output the proposed time in the required format\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_329"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules in terms of start and end times\nbusy_slots = {\n    'Terry': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Gloria': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Julie': [],  # Julie is free all day\n    'Albert': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Logan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Alexander': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                  (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to check if the time slot is available for all participants\ndef is_slot_available(start, end):\n    for busy in busy_slots.values():\n        for slot in busy:\n            if start < slot[1] and end > slot[0]:  # Overlapping condition\n                return False\n    return True\n\n# Check for available slots within work hours\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + timedelta(minutes=meeting_duration) <= work_end:\n        end_time = current_time + timedelta(minutes=meeting_duration)\n        if is_slot_available(current_time, end_time):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Check the next minute\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_330"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the work hours\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    # Schedule constraints for each participant\n    busy_times = {\n        'Evelyn': [],\n        'Patrick': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n        'Anthony': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n        'Aaron': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                  (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                  (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n        'Abigail': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n        'Vincent': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    }\n\n    # Combine all busy times\n    combined_busy_times = []\n    for busy_slots in busy_times.values():\n        combined_busy_times.extend(busy_slots)\n\n    # Add start and end times\n    combined_busy_times.append((start_time, start_time))\n    combined_busy_times.append((end_time, end_time))\n    \n    # Sort all busy times\n    combined_busy_times.sort()\n\n    # Find a suitable time slot for a 30-minute meeting\n    meeting_duration = timedelta(minutes=30)\n    for i in range(len(combined_busy_times) - 1):\n        end_of_current_busy = combined_busy_times[i][1]\n        start_of_next_busy = combined_busy_times[i + 1][0]\n\n        # Check if there's enough time between current busy end and next busy start\n        if (start_of_next_busy - end_of_current_busy) >= meeting_duration:\n            proposed_start = end_of_current_busy\n            proposed_end = proposed_start + meeting_duration\n            if proposed_end <= end_time:\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_331"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nschedules = {\n    'Pamela': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Sandra': [],\n    'Helen': [],\n    'Zachary': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Janice': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Paul': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Find available time\ndef is_time_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Iterate over possible meeting times\ncurrent_time = work_start\nwhile current_time <= work_end - meeting_duration:\n    end_time = current_time + meeting_duration\n    if is_time_free(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_332"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' existing schedules\nschedules = {\n    \"Debra\": [(datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Sean\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Randy\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Gary\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Joseph\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Christina\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n    ]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(is_time_available(current_time, end_time, busy_times) for busy_times in schedules.values()):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check the next half-hour slot\n    return None\n\ndef is_time_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_333"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nschedules = {\n    \"Albert\": [(start_time, end_time)],\n    \"Laura\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Elijah\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kenneth\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), end_time)],\n    \"Adam\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)],\n    \"Heather\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), end_time)]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    free_slots = []\n    current_time = start_time\n    \n    while current_time + meeting_duration <= end_time:\n        # Check if any participant is busy at the current time slot\n        busy = False\n        for participant, busy_slots in schedules.items():\n            for start, end in busy_slots:\n                if start <= current_time < end:\n                    busy = True\n                    break\n            if busy:\n                break\n        \n        # If no one is busy, add to free slots\n        if not busy:\n            free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)  # Increment the time slot by 30 minutes\n\n    # Select the earliest free slot for the meeting\n    if free_slots:\n        meeting_start = free_slots[0]\n        meeting_end = meeting_start + meeting_duration\n        return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_334"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' existing schedules\nschedules = {\n    \"Stephanie\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n                  (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n                  (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 30))],\n    \"Henry\": [(datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 30)),\n              (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30))],\n    \"Janice\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n               (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0))],\n    \"Judy\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n             (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 12, 0)),\n             (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30)),\n             (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 0))],\n    \"Victoria\": [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n                 (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 13, 30)),\n                 (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 30)),\n                 (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30))],\n    \"Joe\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 30)),\n            (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n            (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 15, 30)),\n            (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30))]\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the working hours\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\ndef find_meeting_time():\n    # Start checking from the beginning of working hours\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        # Check if all participants are available\n        if all(not (current_time < end and current_time + meeting_duration > start) \n               for schedule in schedules.values() \n               for start, end in schedule):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Increment the current time by 15 minutes\n        current_time += timedelta(minutes=15)\n\n# Find the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_335"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    \"Cheryl\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Bryan\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joseph\": [],\n    \"Maria\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Elizabeth\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kimberly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for busy_times in schedules.values():\n        if any(start < b_end and end > b_start for b_start, b_end in busy_times):\n            return False\n    return True\n\n# Function to find a meeting slot\ndef find_meeting_slot(start_time, end_time, duration):\n    current_time = start_time\n    while current_time + duration <= end_time:\n        if is_time_slot_free(current_time, current_time + duration):\n            return current_time, current_time + duration\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Define work hours and duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_slot(work_start, work_end, meeting_duration)\n\n# Output the result\nif meeting_time:\n    start_time_formatted = meeting_time[0].strftime(\"%H:%M\")\n    end_time_formatted = meeting_time[1].strftime(\"%H:%M\")\n    print(f\"{{{start_time_formatted}:{end_time_formatted}}}\")\nelse:\n    print(\"No available meeting time found\")\n```",
            "count": "calendar_scheduling_example_336"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"John\": [(datetime(2023, 10, 30, 11, 30), datetime(2023, 10, 30, 12, 0)),\n             (datetime(2023, 10, 30, 14, 0), datetime(2023, 10, 30, 14, 30))],\n    \"Megan\": [(datetime(2023, 10, 30, 12, 0), datetime(2023, 10, 30, 12, 30)),\n              (datetime(2023, 10, 30, 14, 0), datetime(2023, 10, 30, 15, 0)),\n              (datetime(2023, 10, 30, 15, 30), datetime(2023, 10, 30, 16, 0))],\n    \"Brandon\": [],\n    \"Kimberly\": [(datetime(2023, 10, 30, 9, 0), datetime(2023, 10, 30, 9, 30)),\n                 (datetime(2023, 10, 30, 10, 0), datetime(2023, 10, 30, 10, 30)),\n                 (datetime(2023, 10, 30, 11, 0), datetime(2023, 10, 30, 14, 30)),\n                 (datetime(2023, 10, 30, 15, 0), datetime(2023, 10, 30, 16, 0)),\n                 (datetime(2023, 10, 30, 16, 30), datetime(2023, 10, 30, 17, 0))],\n    \"Sean\": [(datetime(2023, 10, 30, 10, 0), datetime(2023, 10, 30, 11, 0)),\n             (datetime(2023, 10, 30, 11, 30), datetime(2023, 10, 30, 14, 0)),\n             (datetime(2023, 10, 30, 15, 0), datetime(2023, 10, 30, 15, 30))],\n    \"Lori\": [(datetime(2023, 10, 30, 9, 0), datetime(2023, 10, 30, 9, 30)),\n             (datetime(2023, 10, 30, 10, 30), datetime(2023, 10, 30, 12, 0)),\n             (datetime(2023, 10, 30, 13, 0), datetime(2023, 10, 30, 14, 30)),\n             (datetime(2023, 10, 30, 16, 0), datetime(2023, 10, 30, 16, 30))]\n}\n\n# Define work hours\nwork_start = datetime(2023, 10, 30, 9, 0)\nwork_end = datetime(2023, 10, 30, 17, 0)\n\n# Create a list of busy times\nbusy_times = []\nfor schedule in schedules.values():\n    busy_times.extend(schedule)\n\n# Sort busy times\nbusy_times.sort()\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find available slots\navailable_slots = []\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    # Check if the current time conflicts with any busy times\n    conflict = False\n    for start, end in busy_times:\n        if current_time < end and current_time + meeting_duration > start:\n            conflict = True\n            break\n    if not conflict:\n        available_slots.append(current_time)\n    \n    current_time += timedelta(minutes=1)\n\n# Select the earliest available slot\nif available_slots:\n    proposed_time_start = available_slots[0]\n    proposed_time_end = proposed_time_start + meeting_duration\n    print(f\"{proposed_time_start.strftime('%H:%M')}:{proposed_time_end.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_337"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' busy schedules as time ranges\nschedules = {\n    \"Alexander\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Amy\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christopher\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    \"Kyle\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Jerry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Raymond\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a meeting time is free for all participants\ndef is_time_free(proposed_start, proposed_end):\n    for busy_slots in schedules.values():\n        for start, end in busy_slots:\n            if (proposed_start < end and proposed_end > start):\n                return False\n    return True\n\n# Find a suitable time slot for the meeting\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    proposed_start = current_time\n    proposed_end = proposed_start + meeting_duration\n    if is_time_free(proposed_start, proposed_end):\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_338"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules as busy time slots\nschedules = {\n    \"Kenneth\": [(9, 0, 10, 0), (11, 30, 12, 0), (14, 30, 15, 30), (16, 0, 16, 30)],\n    \"Judy\": [(9, 30, 10, 0), (16, 0, 16, 30)],\n    \"Jean\": [(9, 0, 10, 0), (10, 30, 11, 0), (11, 30, 12, 30), (13, 30, 14, 0), (14, 30, 16, 0), (16, 30, 17, 0)],\n    \"Sean\": [(9, 30, 10, 30), (11, 30, 14, 30), (15, 0, 16, 0)],\n    \"Alice\": [(9, 0, 9, 30), (10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 13, 30), (14, 0, 16, 0), (16, 30, 17, 0)]\n}\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create an array of busy times\nbusy_times = []\nfor busy_slots in schedules.values():\n    for start_h, start_m, end_h, end_m in busy_slots:\n        busy_times.append((datetime(start_h, start_m), datetime(end_h, end_m)))\n\n# Sort busy times\nbusy_times.sort()\n\n# Find a suitable time for the meeting\ncurrent_time = start_time\n\nwhile current_time + meeting_duration <= end_time:\n    # Check if current_time is free\n    is_free = True\n    for busy_start, busy_end in busy_times:\n        if current_time < busy_end and current_time + meeting_duration > busy_start:\n            is_free = False\n            break\n\n    if is_free:\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_start}:{proposed_end}\")\n        break\n\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_339"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting participants\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant (start, end)\nschedules = {\n    \"Aaron\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Frank\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Diane\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \n    \"Dylan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Alexis\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Mason\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is available for all participants\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        available = True\n        \n        for busy_slots in schedules.values():\n            for start, end in busy_slots:\n                if meeting_start < end and meeting_end > start:  # Overlapping check\n                    available = False\n                    break\n            if not available:\n                break\n        \n        if available:\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n        \n    return None\n\n# Get the proposed meeting time and print it\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_340"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant\nschedules = {\n    \"Ruth\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    \"Aaron\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    \"Brittany\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \n    \"Jeffrey\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Virginia\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    \"Peter\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to check if a given time slot is available for all participants\ndef is_time_available(start_time, end_time):\n    for busy_times in schedules.values():\n        for (busy_start, busy_end) in busy_times:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Try to schedule the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_time_available(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_341"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, time, timedelta\n\ndef find_meeting_time():\n    # Participants' busy schedules\n    schedules = {\n        \"Ryan\": [(time(10, 0), time(10, 30)), (time(16, 0), time(16, 30))],\n        \"Brandon\": [],\n        \"Sandra\": [(time(11, 0), time(11, 30)), (time(15, 30), time(16, 0))],\n        \"Jonathan\": [(time(9, 0), time(12, 0)), (time(12, 30), time(13, 0)), (time(14, 0), time(16, 30))],\n        \"Elijah\": [(time(9, 30), time(11, 0)), (time(12, 0), time(13, 0)), (time(14, 0), time(16, 30))],\n        \"Justin\": [(time(9, 0), time(10, 30)), (time(11, 30), time(13, 0)), (time(14, 30), time(16, 30))]\n    }\n\n    # Duration of the meeting\n    meeting_duration = timedelta(hours=1)\n\n    # Work hours\n    start_work_hour = time(9, 0)\n    end_work_hour = time(17, 0)\n\n    # Generate all time slots for the day\n    time_slots = []\n    current_time = datetime.combine(datetime.today(), start_work_hour)\n    end_time = datetime.combine(datetime.today(), end_work_hour)\n\n    while current_time < end_time:\n        next_time = current_time + meeting_duration\n        if next_time.time() <= end_work_hour:\n            time_slots.append((current_time.time(), next_time.time()))\n        current_time += timedelta(minutes=30)  # Checking every 30 minutes\n\n    # Function to check if a given time slot is free for all participants\n    def is_slot_free(slot):\n        start, end = slot\n        for busy_times in schedules.values():\n            for busy_start, busy_end in busy_times:\n                if not (end <= busy_start or start >= busy_end):  # Overlap check\n                    break\n            else:\n                continue\n            break\n        else:\n            return True\n        return False\n\n    # Find a suitable time slot\n    for slot in time_slots:\n        if is_slot_free(slot):\n            return f\"{slot[0].strftime('%H:%M')}:{slot[1].strftime('%H:%M')}\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_342"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Benjamin\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"13:00\", \"15:00\")],\n    \"Beverly\": [(\"10:00\", \"10:30\"), (\"12:30\", \"13:00\")],\n    \"Willie\": [],\n    \"Ethan\": [(\"10:00\", \"10:30\"), (\"11:30\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Marie\": [(\"09:00\", \"10:30\"), (\"11:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"16:30\", \"17:00\")],\n    \"Sandra\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\n# Convert time strings to datetime objects\ndef create_busy_intervals(schedule):\n    busy_times = []\n    for start, end in schedule:\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return busy_times\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Check for a free time slot\ndef find_meeting_time(schedules, duration):\n    # Define work hours\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Create a list of busy intervals for all participants\n    busy_intervals = []\n    for schedule in schedules.values():\n        busy_intervals.extend(create_busy_intervals(schedule))\n\n    # Merge busy intervals\n    busy_intervals.sort()\n    merged_busy_intervals = []\n    for start, end in busy_intervals:\n        if not merged_busy_intervals or merged_busy_intervals[-1][1] < start:\n            merged_busy_intervals.append((start, end))\n        else:\n            merged_busy_intervals[-1] = (merged_busy_intervals[-1][0], max(merged_busy_intervals[-1][1], end))\n\n    # Check for free times in between busy intervals\n    last_end_time = start_of_day\n    for start, end in merged_busy_intervals:\n        if last_end_time + duration <= start:\n            return last_end_time.strftime(\"%H:%M\") + \":\" + (last_end_time + duration).strftime(\"%H:%M\")\n        last_end_time = max(last_end_time, end)\n\n    # Check for time after the last busy interval\n    if last_end_time + duration <= end_of_day:\n        return last_end_time.strftime(\"%H:%M\") + \":\" + (last_end_time + duration).strftime(\"%H:%M\")\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_343"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for each participant as a list of tuples (start, end)\nschedules = {\n    \"Noah\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Ralph\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Sean\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"John\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Harold\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Austin\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to determine if a time slot is available\ndef is_available(start, end):\n    for busy_slots in schedules.values():\n        for busy_start, busy_end in busy_slots:\n            if (start < busy_end and end > busy_start):\n                return False\n    return True\n\n# Find a suitable meeting time\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        if is_available(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30) # Increment by 30 mins\n    return None\n\n# Get the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_344"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' availability\ndennis_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nelijah_busy = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nchristian_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy slots\nbusy_slots = dennis_busy + elijah_busy + christian_busy\n\n# Finding an available slot after 10:00\ncurrent_time = max(working_hours_start, datetime.strptime(\"10:00\", \"%H:%M\"))\n\nwhile current_time + meeting_duration <= working_hours_end:\n    # Check if current_time is within any busy slot\n    is_busy = any(start <= current_time < end for start, end in busy_slots)\n    \n    if not is_busy:\n        # Check if the next 30 minutes is also free\n        if not any(start <= current_time + meeting_duration <= end for start, end in busy_slots):\n            proposed_start = current_time.strftime(\"%H:%M\")\n            proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n            print(f\"{{{proposed_start}:{proposed_end}}}\")\n            break\n            \n    # Move to the next half hour\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_345"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Work hours\nstart_time = \"09:00\"\nend_time = \"17:00\"\n\n# Participants' busy schedules\nschedules = {\n    \"Walter\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"13:00\", \"14:00\")],\n    \"Jessica\": [(\"13:30\", \"14:00\"), (\"14:30\", \"15:00\")],\n    \"Robert\": [(\"11:00\", \"11:30\"), (\"14:00\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"Nicole\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"11:30\", \"13:00\"), \n               (\"13:30\", \"14:30\"), (\"16:00\", \"16:30\")],\n    \"Dorothy\": [(\"09:30\", \"11:30\"), (\"12:00\", \"12:30\"), (\"15:00\", \"16:30\")],\n    \"Gabriel\": [(\"09:00\", \"10:30\"), (\"11:00\", \"12:30\"), (\"13:30\", \"15:30\")]\n}\n\n# Convert string to datetime for comparison\ndef to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Check for conflicts\ndef is_available(start, end):\n    for schedule in schedules.values():\n        for busy_start, busy_end in schedule:\n            if not (end <= to_datetime(busy_start) or start >= to_datetime(busy_end)):\n                return False\n    return True\n\n# Meeting duration in minutes\nmeeting_duration = 30\nmeeting_delta = timedelta(minutes=meeting_duration)\n\n# Search for a suitable time slot\ncurrent_time = to_datetime(start_time)\n\nwhile current_time + meeting_delta <= to_datetime(end_time):\n    meeting_end = current_time + meeting_delta\n    if is_available(current_time, meeting_end):\n        print(f\"{current_time.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_346"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert string time to datetime object\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to convert datetime object to string time\ndef convert_to_str_time(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Check if time slot is free for all participants\ndef is_time_slot_available(start_time, end_time, schedules):\n    for busy_times in schedules:\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Main function to find a suitable meeting time\ndef find_meeting_time():\n    start_of_day = convert_to_datetime(\"09:00\")\n    end_of_day = convert_to_datetime(\"17:00\")\n\n    # All participants' busy schedules for Monday in (start, end) tuples\n    schedules = [\n        [(convert_to_datetime(\"12:30\"), convert_to_datetime(\"13:00\")),\n         (convert_to_datetime(\"14:00\"), convert_to_datetime(\"14:30\"))],  # Albert\n\n        [],  # Jean free all day\n\n        [(convert_to_datetime(\"10:00\"), convert_to_datetime(\"11:00\")),\n         (convert_to_datetime(\"12:30\"), convert_to_datetime(\"13:00\")),\n         (convert_to_datetime(\"14:30\"), convert_to_datetime(\"16:00\"))],  # William\n\n        [(convert_to_datetime(\"09:30\"), convert_to_datetime(\"10:00\")),\n         (convert_to_datetime(\"10:30\"), convert_to_datetime(\"11:30\")),\n         (convert_to_datetime(\"12:00\"), convert_to_datetime(\"13:30\")),\n         (convert_to_datetime(\"14:30\"), convert_to_datetime(\"15:30\")),\n         (convert_to_datetime(\"16:00\"), convert_to_datetime(\"17:00\"))],  # Alan\n\n        [(convert_to_datetime(\"09:00\"), convert_to_datetime(\"10:00\")),\n         (convert_to_datetime(\"12:00\"), convert_to_datetime(\"13:30\")),\n         (convert_to_datetime(\"14:00\"), convert_to_datetime(\"15:00\")),\n         (convert_to_datetime(\"16:30\"), convert_to_datetime(\"17:00\"))],  # Donna\n\n        [(convert_to_datetime(\"09:00\"), convert_to_datetime(\"11:00\")),\n         (convert_to_datetime(\"11:30\"), convert_to_datetime(\"12:00\")),\n         (convert_to_datetime(\"12:30\"), convert_to_datetime(\"13:00\")),\n         (convert_to_datetime(\"16:00\"), convert_to_datetime(\"17:00\"))]   # Christina\n    ]\n\n    # Checking for a suitable time slot for 30 mins\n    meeting_duration = timedelta(minutes=30)\n    current_time = start_of_day\n\n    while current_time + meeting_duration <= end_of_day:\n        if is_time_slot_available(current_time, current_time + meeting_duration, schedules):\n            return f\"{convert_to_str_time(current_time)}:{convert_to_str_time(current_time + meeting_duration)}\"\n        current_time += timedelta(minutes=1)  # Check the next minute\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_347"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define working hours\nstart_time = time(9, 0)\nend_time = time(17, 0)\n\n# Define the busy schedules for each participant\nschedules = {\n    \"Anna\": [(time(10, 30), time(11, 0)), (time(12, 30), time(13, 0)), (time(15, 0), time(16, 0))],\n    \"Nathan\": [],\n    \"Benjamin\": [(time(10, 0), time(10, 30)), (time(11, 0), time(11, 30)), (time(12, 30), time(13, 0)), (time(14, 0), time(14, 30))],\n    \"Noah\": [(time(9, 30), time(13, 30)), (time(14, 0), time(14, 30)), (time(15, 0), time(15, 30)), (time(16, 0), time(17, 0))],\n    \"Bruce\": [(time(9, 30), time(10, 30)), (time(11, 0), time(13, 0)), (time(13, 30), time(14, 0)), (time(14, 30), time(17, 0))],\n    \"Matthew\": [(time(9, 30), time(16, 30))]\n}\n\n# Function to check if a time slot is available\ndef is_time_slot_available(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end and end > busy_start):  # Check for overlap\n                return False\n    return True\n\n# Find a 30-minute slot\nmeeting_duration = timedelta(minutes=30)\ncurrent_time = timedelta(hours=start_time.hour, minutes=start_time.minute)\n\nwhile current_time < timedelta(hours=end_time.hour, minutes=end_time.minute - 30):\n    meeting_start = time(int(current_time.total_seconds() // 3600), int((current_time.total_seconds() % 3600) // 60))\n    meeting_end = (datetime.combine(datetime.today(), meeting_start) + meeting_duration).time()\n    \n    if is_time_slot_available(meeting_start, meeting_end):\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    \n    current_time += timedelta(minutes=1)  # increment by a minute\n```",
            "count": "calendar_scheduling_example_348"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and the duration of the meeting\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules as tuples of (start_time, end_time)\nschedules = {\n    \"Carl\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Patricia\": [],\n    \"Madison\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Gloria\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kenneth\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Betty\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if time range [start, end] is free for all participants\ndef is_time_slot_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end and end > busy_start):\n                return False\n    return True\n\n# Iterate over the time slots in the working day to find a free slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    meeting_end_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, meeting_end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_349"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the participants' schedules as busy time intervals\nschedules = {\n    \"Madison\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    \"Cheryl\": [],\n    \n    \"Walter\": [],\n    \n    \"Donna\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Kathleen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Samuel\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time slot\ndef find_meeting_time(schedules, working_start, working_end, meeting_duration):\n    # Create a list of all busy time slots\n    busy_times = []\n    for busy in schedules.values():\n        busy_times.extend(busy)\n    \n    # Find available time slots in the working hours\n    current_time = working_start\n    while current_time + meeting_duration <= working_end:\n        end_time = current_time + meeting_duration\n        overlap = False\n        \n        for (start, end) in busy_times:\n            if current_time < end and end_time > start:  # There's an overlap\n                overlap = True\n                break\n        \n        if not overlap:\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n\n# Find and print a suitable time\nmeeting_time = find_meeting_time(schedules, working_start, working_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_350"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\nbusy_slots = {\n    \"Andrew\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Rebecca\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Harold\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Douglas\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jean\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Larry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_slot_free(start, end):\n    for busy_times in busy_slots.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:  # Overlap check\n                return False\n    return True\n\n# Check for free time slots within the working hours\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_slot_free(current_time, current_time + meeting_duration):\n        proposed_time = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        print(proposed_time)\n        break\n    current_time += timedelta(minutes=1)  # Move to the next minute\n```",
            "count": "calendar_scheduling_example_351"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Aaron\": [],\n    \"Betty\": [\"10:00-10:30\", \"11:30-12:00\", \"12:30-13:00\", \"14:30-15:00\", \"15:30-16:00\", \"16:30-17:00\"],\n    \"Linda\": [],\n    \"Joan\": [\"09:00-09:30\", \"10:00-11:00\", \"12:00-12:30\", \"13:00-14:30\", \"16:00-16:30\"],\n    \"Walter\": [\"09:00-09:30\", \"10:30-11:00\", \"11:30-12:00\", \"12:30-13:00\", \"13:30-14:30\", \"15:00-17:00\"],\n    \"Martha\": [\"09:00-09:30\", \"10:30-11:00\", \"11:30-12:00\", \"12:30-13:30\", \"14:30-15:30\", \"16:00-16:30\"]\n}\n\n# Convert the time blocks to unavailable periods\ndef get_unavailable_times(schedule):\n    unavailable = []\n    for block in schedule:\n        start, end = block.split('-')\n        unavailable.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return unavailable\n\n# Merge all unavailable times for participants\ndef merge_unavailable_times(all_unavailable):\n    merged = []\n    for times in all_unavailable:\n        for start, end in times:\n            if not merged or merged[-1][1] < start:\n                merged.append((start, end))\n            else:\n                merged[-1] = (merged[-1][0], max(merged[-1][1], end))\n    return merged\n\n# Check the first available time slot\ndef find_first_available_slot(merged_unavailable, meeting_duration):\n    work_day_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_day_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Add work day boundaries to unavailable times\n    merged_unavailable.insert(0, (work_day_start, work_day_start))\n    merged_unavailable.append((work_day_end, work_day_end))\n\n    for i in range(len(merged_unavailable) - 1):\n        start_end_gap = merged_unavailable[i + 1][0] - merged_unavailable[i][1]\n        if start_end_gap >= timedelta(minutes=meeting_duration):\n            return merged_unavailable[i][1]\n\n# Main logic to schedule the meeting\ndef schedule_meeting(participants, meeting_duration):\n    all_unavailable = [get_unavailable_times(schedules[participant]) for participant in participants]\n    merged_unavailable = merge_unavailable_times(all_unavailable)\n    \n    first_available_time = find_first_available_slot(merged_unavailable, meeting_duration)\n    if first_available_time:\n        meeting_end_time = first_available_time + timedelta(minutes=meeting_duration)\n        return first_available_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n\nparticipants = [\"Aaron\", \"Betty\", \"Linda\", \"Joan\", \"Walter\", \"Martha\"]\nmeeting_duration = 30  # 30 minutes\navailable_time_slot = schedule_meeting(participants, meeting_duration)\n\nprint(available_time_slot)  # This will print the output in the required format\n```",
            "count": "calendar_scheduling_example_352"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' busy schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\nparticipants_busy = {\n    \"Andrea\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Gloria\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Philip\": [],  # Free all day\n    \"Christian\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Denise\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Julie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Duration for the meeting\nmeeting_duration = timedelta(minutes=30)\n\ndef is_free(start, end):\n    for busy_time in busy_slots:\n        if not (end <= busy_time[0] or start >= busy_time[1]):\n            return False\n    return True\n\n# Create a list of busy slots from all participants\nbusy_slots = []\nfor busy in participants_busy.values():\n    busy_slots.extend(busy)\n\n# Sort busy_slots by start time\nbusy_slots.sort()\n\n# Check time slots for a 30-minute meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_free(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_353"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": "NameError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    from datetime import datetime, timedelta\n    \n    # Create time slots for work hours\n    start_time = datetime.strptime(work_hours[0], '%H:%M')\n    end_time = datetime.strptime(work_hours[1], '%H:%M')\n    \n    # Create blocks for participants\n    blocked_times = []\n    for participant in participants:\n        blocked_times.extend(participants[participant])\n    \n    # Sort blocked times\n    blocked_times.sort()\n    \n    # Generate available time slots\n    available_slots = []\n    last_end = start_time\n    \n    for start, end in blocked_times:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < end_time:\n        available_slots.append((last_end, end_time))\n    \n    # Check for slots that can accommodate the meeting\n    for start, end in available_slots:\n        if end - start >= timedelta(minutes=meeting_duration):\n            meeting_start = start\n            meeting_end = start + timedelta(minutes=meeting_duration)\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Participant's schedules in the format (start, end)\nparticipants = {\n    \"Wayne\": [(datetime(2023, 10, 23, 9, 30), datetime(2023, 10, 23, 10, 0)), \n              (datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 12, 0)), \n              (datetime(2023, 10, 23, 12, 30), datetime(2023, 10, 23, 13, 0)), \n              (datetime(2023, 10, 23, 15, 0), datetime(2023, 10, 23, 15, 30))],\n    \"Larry\": [],\n    \"Richard\": [(datetime(2023, 10, 23, 9, 30), datetime(2023, 10, 23, 10, 30)), \n                (datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 12, 0)), \n                (datetime(2023, 10, 23, 13, 0), datetime(2023, 10, 23, 13, 30))],\n    \"Sophia\": [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 9, 30)), \n               (datetime(2023, 10, 23, 11, 0), datetime(2023, 10, 23, 15, 30))],\n    \"Jennifer\": [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 9, 30)), \n                 (datetime(2023, 10, 23, 10, 30), datetime(2023, 10, 23, 13, 0)), \n                 (datetime(2023, 10, 23, 13, 30), datetime(2023, 10, 23, 14, 30)), \n                 (datetime(2023, 10, 23, 15, 0), datetime(2023, 10, 23, 16, 0))],\n    \"Theresa\": [(datetime(2023, 10, 23, 9, 30), datetime(2023, 10, 23, 10, 0)), \n                (datetime(2023, 10, 23, 11, 0), datetime(2023, 10, 23, 12, 0)), \n                (datetime(2023, 10, 23, 12, 30), datetime(2023, 10, 23, 13, 30)), \n                (datetime(2023, 10, 23, 14, 30), datetime(2023, 10, 23, 15, 30)), \n                (datetime(2023, 10, 23, 16, 0), datetime(2023, 10, 23, 16, 30))]\n}\n\nmeeting_duration = 30\nwork_hours = ['09:00', '17:00']\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_354"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' unavailable times\nunavailable_times = {\n    \"Bruce\": [],\n    \"Vincent\": [(datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Austin\": [],\n    \"Diane\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Juan\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Joseph\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))]\n}\n\n# Function to check if time is available for all\ndef is_time_available(start, duration):\n    end = start + duration\n    for times in unavailable_times.values():\n        for (unavailable_start, unavailable_end) in times:\n            if not (end <= unavailable_start or start >= unavailable_end):\n                return False\n    return True\n\n# Generate meeting slots and check availability\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_available(current_time, meeting_duration):\n        proposed_start = current_time.strftime('%H:%M')\n        proposed_end = (current_time + meeting_duration).strftime('%H:%M')\n        print(f'{{{proposed_start}:{proposed_end}}}')\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_355"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define the work hours and meeting duration\nwork_start = time(9, 0)\nwork_end = time(17, 0)\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules\nschedules = {\n    'Katherine': [(time(12, 0), time(12, 30)), (time(13, 0), time(14, 30))],\n    'Rebecca': [],\n    'Julie': [(time(9, 0), time(9, 30)), (time(10, 30), time(11, 0)),\n              (time(13, 30), time(14, 0)), (time(15, 0), time(15, 30))],\n    'Angela': [(time(9, 0), time(10, 0)), (time(10, 30), time(11, 0)),\n               (time(11, 30), time(14, 0)), (time(14, 30), time(15, 0)),\n               (time(16, 30), time(17, 0))],\n    'Nicholas': [(time(9, 30), time(11, 0)), (time(11, 30), time(13, 30)),\n                 (time(14, 0), time(16, 0)), (time(16, 30), time(17, 0))],\n    'Carl': [(time(9, 0), time(11, 0)), (time(11, 30), time(12, 30)),\n             (time(13, 0), time(14, 30)), (time(15, 0), time(16, 0)),\n             (time(16, 30), time(17, 0))]\n}\n\ndef is_time_slot_available(start, end):\n    for busy_slots in schedules.values():\n        for busy_start, busy_end in busy_slots:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\ndef find_meeting_time():\n    cur_time = datetime.combine(datetime.today(), work_start)\n    end_work_time = datetime.combine(datetime.today(), work_end)\n    \n    while cur_time + meeting_duration <= end_work_time:\n        start = cur_time.time()\n        end = (cur_time + meeting_duration).time()\n        \n        if is_time_slot_available(start, end):\n            return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n        \n        cur_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Execute the function to find the suitable time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_356"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules for each participant\nschedules = {\n    \"Eric\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carol\": [],\n    \"Nicholas\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Randy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kevin\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Henry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free for all participants\ndef is_free_for_all(start, end):\n    for busy_slots in schedules.values():\n        for busy_start, busy_end in busy_slots:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_free_for_all(current_time, current_time + meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f'{{{proposed_start}:{proposed_end}}}')\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_357"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define the work hours\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\n# Define the schedules for each person\nschedules = {\n    \"Jennifer\": [(time(10, 30), time(11, 0)), (time(13, 0), time(14, 0)), (time(16, 30), time(17, 0))],\n    \"Douglas\": [(time(9, 0), time(9, 30)), (time(12, 30), time(13, 0))],\n    \"Lauren\": [(time(9, 0), time(9, 30)), (time(10, 0), time(10, 30)), (time(13, 0), time(15, 0))],\n    \"Daniel\": [(time(9, 0), time(10, 0)), (time(10, 30), time(11, 0)),\n               (time(11, 30), time(12, 30)), (time(13, 0), time(14, 30)), (time(15, 30), time(16, 30))],\n    \"Abigail\": [(time(9, 30), time(10, 30)), (time(11, 30), time(12, 0)),\n                (time(12, 30), time(14, 30)), (time(15, 30), time(16, 0))],\n    \"Catherine\": [(time(9, 0), time(11, 0)), (time(11, 30), time(14, 0)),\n                  (time(14, 30), time(15, 30)), (time(16, 30), time(17, 0))]\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Create a list to hold all busy slots\nbusy_slots = []\n\n# Combine all schedules into busy slots\nfor person, times in schedules.items():\n    for start, end in times:\n        busy_slots.append((start, end))\n\n# Create a list of all available slots\navailable_slots = []\n\n# Iterate through each minute in the work hours to find available slots\ncurrent_time = datetime.combine(datetime.today(), work_start)\nend_of_day = datetime.combine(datetime.today(), work_end)\n\nwhile current_time + meeting_duration <= end_of_day:\n    meeting_start = current_time.time()\n    meeting_end = (current_time + meeting_duration).time()\n    \n    # Check if the current slot is busy\n    is_busy = False\n    for busy_start, busy_end in busy_slots:\n        if not (meeting_end <= busy_start or meeting_start >= busy_end):\n            is_busy = True\n            break\n\n    if not is_busy:\n        available_slots.append((meeting_start, meeting_end))\n\n    current_time += timedelta(minutes=1)\n\n# Get the first available slot\nif available_slots:\n    first_slot = available_slots[0]\n    proposed_time = f\"{first_slot[0].strftime('%H:%M')}:{first_slot[1].strftime('%H:%M')}\"\n    print(\"Proposed time:\", proposed_time)\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_358"
        },
        {
            "final_program_time": "{14:00:14:00}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules as unavailable time ranges\nschedules = {\n    \"Bryan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Sophia\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Jeremy\": [],\n    \"Marie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Tyler\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Emily\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_free(start_time, duration):\n    end_time = start_time + duration\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if busy_start < end_time and start_time < busy_end:  # Overlap check\n                return False\n    return True\n\n# Find suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_free(current_time, meeting_duration):\n            return current_time.strftime(\"%H:%M:%H:%M\")\n        current_time += timedelta(minutes=30)  # Check the next half-hour slot\n    return None\n\n# Output the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_359"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# List of participants' busy times\nbusy_times = {\n    \"Emily\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Mason\": [],\n    \"Maria\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Carl\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"David\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Frank\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nduration = timedelta(minutes=30)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(busy_times, work_start, work_end, duration):\n    # Create a list of all busy times\n    all_busy_times = []\n    for times in busy_times.values():\n        all_busy_times.extend(times)\n    \n    # Merge busy times\n    all_busy_times.sort()\n    merged_busy = []\n    for start, end in all_busy_times:\n        if not merged_busy or merged_busy[-1][1] < start:\n            merged_busy.append((start, end))\n        else:\n            merged_busy[-1] = (merged_busy[-1][0], max(merged_busy[-1][1], end))\n    \n    # Check for free slots\n    previous_end = work_start\n    for start, end in merged_busy:\n        if previous_end + duration <= start:\n            return previous_end, previous_end + duration\n        previous_end = end\n    \n    if previous_end + duration <= work_end:\n        return previous_end, previous_end + duration\n    \n    return None  # No suitable time found\n\n# Get the meeting time\nmeeting_time = find_meeting_time(busy_times, work_start, work_end, duration)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_360"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants availability\navailability = {\n    \"Kenneth\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Melissa\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Emily\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Brandon\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Christopher\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Function to find a suitable time\ndef find_meeting_time(availability, duration):\n    merged_availabilities = []\n\n    # Merge all participants' available times\n    for times in availability.values():\n        for start, end in times:\n            merged_availabilities.append((start, end))\n\n    # Sort availabilities by start time\n    merged_availabilities.sort()\n\n    # Check for time slots\n    for i in range(len(merged_availabilities) - 1):\n        start1, end1 = merged_availabilities[i]\n        start2, end2 = merged_availabilities[i + 1]\n\n        # Max end time of current and next slot\n        if end1 >= start2:\n            open_start = max(start1, start2)\n            open_end = min(end1, end2)\n            \n            if (open_end - open_start).total_seconds() / 60 >= duration:\n                return open_start.strftime(\"%H:%M\"), (open_start + timedelta(minutes=duration)).strftime(\"%H:%M\")\n\n    return \"No available slot\"\n\n# Get proposed meeting time\nstart_time, end_time = find_meeting_time(availability, meeting_duration)\n\n# Output in specified format\nprint(f'{{{start_time}:{end_time}}}')\n```",
            "count": "calendar_scheduling_example_361"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert time strings to datetime objects\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\n# Existing schedules as start and end times (using datetime objects)\nparticipants_schedule = {\n    'Megan': [(time_to_datetime('13:30'), time_to_datetime('14:00')),\n              (time_to_datetime('14:30'), time_to_datetime('15:00'))],\n    'Jeremy': [(time_to_datetime('14:00'), time_to_datetime('15:00'))],\n    'Sean': [(time_to_datetime('11:00'), time_to_datetime('11:30')),\n             (time_to_datetime('12:00'), time_to_datetime('12:30')),\n             (time_to_datetime('13:30'), time_to_datetime('14:00')),\n             (time_to_datetime('16:00'), time_to_datetime('16:30'))],\n    'Dorothy': [(time_to_datetime('09:00'), time_to_datetime('10:00')),\n                (time_to_datetime('11:00'), time_to_datetime('11:30')),\n                (time_to_datetime('12:00'), time_to_datetime('13:00')),\n                (time_to_datetime('14:00'), time_to_datetime('15:30')),\n                (time_to_datetime('16:00'), time_to_datetime('17:00'))],\n    'Michael': [(time_to_datetime('09:30'), time_to_datetime('10:00')),\n                (time_to_datetime('10:30'), time_to_datetime('11:30')),\n                (time_to_datetime('12:30'), time_to_datetime('13:00')),\n                (time_to_datetime('13:30'), time_to_datetime('14:30')),\n                (time_to_datetime('15:00'), time_to_datetime('15:30')),\n                (time_to_datetime('16:00'), time_to_datetime('16:30'))],\n    'Jesse': [(time_to_datetime('10:00'), time_to_datetime('12:30')),\n              (time_to_datetime('14:00'), time_to_datetime('14:30')),\n              (time_to_datetime('16:00'), time_to_datetime('17:00'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = time_to_datetime('09:00')\nwork_end = time_to_datetime('17:00')\n\n# Find available time slot\ndef find_meeting_time():\n    # Generate all possible time slots from 9:00 to 17:00 in increments of 15 minutes\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current time slot overlaps with any busy time\n        overlaps = False\n        for participant, busy_times in participants_schedule.items():\n            for busy_start, busy_end in busy_times:\n                if not (current_time >= busy_end or (current_time + meeting_duration) <= busy_start):\n                    overlaps = True\n                    break\n            if overlaps:\n                break\n        \n        # Check Dorothy's preference to avoid meetings after 15:00\n        if current_time >= time_to_datetime('15:00'):\n            overlaps = True\n        \n        if not overlaps:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Increment time by 15 minutes\n        current_time += timedelta(minutes=15)\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)  # Example output: 15:30:16:00\n```",
            "count": "calendar_scheduling_example_362"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants availability\navailability = {\n    'Peter': [(9, 0), (17, 0)],\n    'Amber': [(9, 0), (17, 0)],\n    'Russell': [(9, 0), (14, 30), (15, 0), (17, 0)],\n    'Paul': [(9, 0), (10, 0), (10, 30), (12, 30), (13, 0), (15, 0), (15, 30), (16, 0), (17, 0)],\n    'Donna': [(9, 0), (9, 30), (10, 0), (11, 0), (11, 30), (12, 30), (14, 0), (14, 30), (15, 0), (15, 30), (16, 0), (16, 30)],\n    'Isabella': [(9, 0), (9, 30), (10, 0), (11, 0), (11, 30), (12, 0), (12, 30), (13, 0), (13, 30), (14, 0), (14, 30), (15, 0), (15, 30), (16, 0), (17, 0)],\n}\n\n# Meeting duration\nmeeting_duration = 30  # in minutes\n\ndef find_meeting_time(availability, duration):\n    # Convert availability into blocks\n    busy_times = []\n    for name, times in availability.items():\n        for i in range(0, len(times)-1, 2):\n            busy_times.append((datetime(2023, 10, 2, times[i][0], times[i][1]),  # Start time\n                               datetime(2023, 10, 2, times[i + 1][0], times[i + 1][1])))  # End time\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Find gaps between busy times\n    start_of_day = datetime(2023, 10, 2, 9, 0)\n    end_of_day = datetime(2023, 10, 2, 17, 0)\n    \n    busy_times.insert(0, (start_of_day, start_of_day))  # Start of day as busy time\n    busy_times.append((end_of_day, end_of_day))  # End of day as busy time\n\n    # Check for available slots\n    for i in range(len(busy_times) - 1):\n        current_end = busy_times[i][1]\n        next_start = busy_times[i + 1][0]\n\n        # Calculate the free time length\n        free_time = (next_start - current_end).total_seconds() / 60  # in minutes\n        \n        if free_time >= duration:\n            proposed_start = current_end\n            proposed_end = proposed_start + timedelta(minutes=duration)\n            \n            return proposed_start.strftime('%H:%M'), proposed_end.strftime('%H:%M')\n\n# Get proposed meeting time\nstart_time, end_time = find_meeting_time(availability, meeting_duration)\nprint(f\"{{{start_time}:{end_time}}}\")\n```",
            "count": "calendar_scheduling_example_363"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' schedules\nschedules = {\n    \"Virginia\": [(work_start, work_end)],\n    \"Janet\": [(work_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), work_end)],\n    \"Joyce\": [(work_start, datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), work_end)],\n    \"Catherine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), work_end)],\n    \"Donna\": [(work_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), work_end)],\n    \"Evelyn\": [(work_start, datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)],\n}\n\n# Function to find the common free time slot\ndef find_meeting_time(schedules, meeting_duration):\n    # Initialize free time slots\n    free_time_slots = []\n\n    # Get the free time slots for each participant\n    for name, slots in schedules.items():\n        free_slots = []\n        last_end = work_start\n        \n        for start, end in slots:\n            if last_end < start:\n                free_slots.append((last_end, start))\n            last_end = max(last_end, end)\n        \n        if last_end < work_end:\n            free_slots.append((last_end, work_end))\n        \n        free_time_slots.append(free_slots)\n\n    # Find common free time slots across all participants\n    common_slots = free_time_slots[0]\n    \n    for slots in free_time_slots[1:]:\n        new_common_slots = []\n        for start1, end1 in common_slots:\n            for start2, end2 in slots:\n                new_start = max(start1, start2)\n                new_end = min(end1, end2)\n                if new_start < new_end:\n                    new_common_slots.append((new_start, new_end))\n        common_slots = new_common_slots\n\n    # Find a suitable slot that can accommodate the meeting\n    for start, end in common_slots:\n        if (end - start) >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Find the proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_364"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy times for each participant\nschedules = {\n    \"Sarah\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Russell\": [],\n    \"Michael\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    \"Charles\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Heather\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Sharon\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is available for all participants\ndef is_time_slot_available(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_slot_available(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_365"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define meeting parameters\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules as busy time periods\nschedules = {\n    \"Jeffrey\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Benjamin\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"))],\n    \n    \"Denise\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    \"Alexis\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Shirley\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Philip\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_available(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_start = work_start\n    while current_start + meeting_duration <= work_end:\n        current_end = current_start + meeting_duration\n        if is_time_slot_available(current_start, current_end):\n            return current_start.strftime(\"%H:%M\") + \":\" + current_end.strftime(\"%H:%M\")\n        current_start += timedelta(minutes=1)  # Increment time by one minute for next check\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)  # Output the time in HH:MM:HH:MM format\n```",
            "count": "calendar_scheduling_example_366"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Carolyn\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jordan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wayne\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Megan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Billy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Peter\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Possible meeting time range\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Find a suitable time\nmeeting_start_time = start_of_day\nwhile meeting_start_time + meeting_duration <= end_of_day:\n    meeting_end_time = meeting_start_time + meeting_duration\n    if is_time_slot_free(meeting_start_time, meeting_end_time):\n        print(f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    meeting_start_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_367"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participant schedules\nschedules = {\n    'Patrick': [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'John': [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    'Samantha': [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Billy': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Christine': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Ruth': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\ndef find_meeting_time(work_start, work_end, meeting_duration, schedules):\n    # Create a list of all busy times\n    busy_times = []\n    for participant in schedules:\n        busy_times.extend(schedules[participant])\n    \n    # Sort busy times\n    busy_times.sort()\n\n    # Check available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is free\n        is_busy = False\n        for start, end in busy_times:\n            if current_time < end and current_time + meeting_duration > start:\n                is_busy = True\n                break\n\n        if not is_busy:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n        current_time += timedelta(minutes=1)\n\n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(work_start, work_end, meeting_duration, schedules)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_368"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nschedules = {\n    \"Charles\": [(work_start, work_end)],\n    \"Kayla\": [(work_start, datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), work_end)],\n    \"Cynthia\": [(work_start, work_end)],\n    \"Rebecca\": [(work_start, datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n                (datetime.strptime(\"17:00\", \"%H:%M\"), work_end)],\n    \"Randy\": [(work_start, datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"17:00\", \"%H:%M\"), work_end)],\n    \"Hannah\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n               (datetime.strptime(\"17:00\", \"%H:%M\"), work_end)],\n}\n\n# Function to find available slots\ndef find_meeting_slot(schedules, meeting_duration, work_start, work_end):\n    # Get all the busy slots from schedules\n    busy_slots = []\n    for participant_slots in schedules.values():\n        for slot in participant_slots:\n            busy_slots.append(slot)\n\n    # Normalize busy slots into a single list\n    busy_slots = sorted(busy_slots)\n\n    # Create a list of free time slots\n    free_slots = []\n    current_time = work_start\n\n    for start, end in busy_slots:\n        if current_time < start:\n            free_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    if current_time < work_end:\n        free_slots.append((current_time, work_end))\n\n    # Find a suitable free slot for the meeting\n    for start, end in free_slots:\n        if end - start >= meeting_duration:\n            # Check Kayla's preference\n            if start >= datetime.strptime(\"10:30\", \"%H:%M\"):\n                return (start, start + meeting_duration)\n    \n    return None\n\nmeeting_time = find_meeting_slot(schedules, meeting_duration, work_start, work_end)\n\n# Output the time in the required format\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found\")\n```",
            "count": "calendar_scheduling_example_369"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    'Peter': [(10, 30), (11, 30), (13, 0), (15, 30)],\n    'Grace': [(11, 30), (15, 0)],\n    'Julie': [(9, 30), (10, 30), (14, 0), (15, 30)],\n    'Kayla': [(11, 30), (12, 30), (15, 0), (16, 30)],\n    'Emma': [(9, 0), (10, 30), (11, 30), (13, 0)],\n    'Scott': [(9, 0), (12, 0), (13, 0), (14, 30), (16, 0)]\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a meeting time\ndef find_meeting_time(schedules, meeting_duration):\n    # Create a list of all busy times in minutes after midnight\n    busy_times = []\n    for participant, busy_slots in schedules.items():\n        for slot in busy_slots:\n            start_time = timedelta(hours=slot[0], minutes=slot[1])\n            busy_times.append((start_time, start_time + meeting_duration))\n    \n    # Check for every half-hour block in work hours\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check if this time falls within any busy schedule\n        overlap = False\n        for busy_start, busy_end in busy_times:\n            if not (meeting_end <= busy_start or meeting_start >= busy_end):\n                overlap = True\n                break\n        \n        # Check Kayla's preference\n        if meeting_start < timedelta(hours=11, minutes=0):\n            overlap = True\n            \n        if not overlap:\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Check next half hour\n\n# Call the function to find a suitable time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_370"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\nschedules = {\n    'Mark': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Logan': [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    'Isabella': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    'Nathan': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Anna': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Dylan': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time):\n    for participant, busy_slots in schedules.items():\n        if any(start < end_time and end > start_time for start, end in busy_slots):\n            return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = working_hours_start\nwhile current_time + meeting_duration <= working_hours_end:\n    end_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_371"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules (start time, end time)\nschedules = {\n    \"Barbara\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Arthur\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Elijah\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Natalie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Philip\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jordan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a proposed time slot is free for everyone\ndef is_time_slot_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Search for a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_372"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": "IndexError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    participants = {\n        \"Julia\": [(9, 0), (17, 0)],\n        \"Joseph\": [(9, 30), (10, 0), (11, 0), (12, 0), (12, 30)],\n        \"Donna\": [(9, 30), (10, 0), (12, 30), (13, 0), (14, 0), (16, 0)],\n        \"Bruce\": [(9, 30), (11, 0), (11, 30), (12, 0), (12, 30), (14, 0), (15, 0), (16, 30)],\n        \"Bobby\": [(9, 0), (9, 30), (10, 30), (11, 30), (12, 30), (13, 0), (14, 0), (15, 30), (16, 0), (16, 30)],\n        \"Arthur\": [(9, 0), (9, 30), (10, 0), (10, 30), (11, 30), (12, 0), (13, 0), (13, 30), (14, 0), (14, 30), (15, 0), (16, 30)]\n    }\n\n    work_start = (9, 0)\n    work_end = (17, 0)\n    meeting_duration = timedelta(minutes=30)\n\n    # Create a list of busy intervals for each participant\n    busy_intervals = []\n\n    for participant, busy_times in participants.items():\n        intervals = []\n        for i in range(0, len(busy_times), 2):\n            start_time = datetime(2023, 10, 23, busy_times[i][0], busy_times[i][1])\n            end_time = datetime(2023, 10, 23, busy_times[i+1][0], busy_times[i+1][1])\n            intervals.append((start_time, end_time))\n        busy_intervals.append(intervals)\n\n    # Function to find a common free time slot for all participants\n    def is_slot_free(start_time, end_time):\n        for intervals in busy_intervals:\n            for busy_start, busy_end in intervals:\n                if start_time < busy_end and end_time > busy_start:\n                    return False\n        return True\n\n    # Iterate through possible meeting times between work hours.\n    for hour in range(work_start[0], work_end[0]):\n        for minute in range(0, 60, 30):\n            start_time = datetime(2023, 10, 23, hour, minute)\n            end_time = start_time + meeting_duration\n\n            if start_time >= datetime(2023, 10, 23, work_start[0], work_start[1]) and \\\n               end_time <= datetime(2023, 10, 23, work_end[0], work_end[1]) and \\\n               is_slot_free(start_time, end_time):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return \"No available time slot found\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_373"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules represented as a list of busy time intervals\nschedules = {\n    \"Lori\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Victoria\": [],\n    \"Natalie\": [],\n    \"Pamela\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Justin\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Martha\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours on Monday\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find free slots\ndef find_free_slots(schedules):\n    # Create a list of all busy intervals for participants\n    busy_times = []\n    for busy_intervals in schedules.values():\n        busy_times.extend(busy_intervals)\n    \n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    free_slots = []\n    current_time = work_start\n\n    for start, end in busy_times:\n        # If there is a gap between current_time and the busy start time\n        if current_time + meeting_duration <= start:\n            free_slots.append((current_time, start))\n        # Move the current_time forward if it ends before this busy slot\n        current_time = max(current_time, end)\n    \n    # Check for free time after the last busy slot until work_end\n    if current_time + meeting_duration <= work_end:\n        free_slots.append((current_time, work_end))\n    \n    return free_slots\n\n# Get free slots\nfree_slots = find_free_slots(schedules)\n\n# Find the first available time slot that fits the meeting duration\nif free_slots:\n    meeting_start, meeting_end = free_slots[0]\n    meeting_start_str = meeting_start.strftime(\"%H:%M\")\n    meeting_end_str = (meeting_start + meeting_duration).strftime(\"%H:%M\")\n    print(f\"Proposed meeting time: {meeting_start_str}:{meeting_end_str}\")\nelse:\n    print(\"No suitable time found.\")\n```\n",
            "count": "calendar_scheduling_example_374"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\nschedules = {\n    \"Julie\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Sara\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Donna\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Keith\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Dylan\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Jose\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Convert busy schedules into a single list of busy times\nbusy_times = []\nfor busy in schedules.values():\n    busy_times.extend(busy)\n\n# Function to check if the time slot is free\ndef is_slot_available(start, end):\n    for busy_start, busy_end in busy_times:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Find a time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_slot_available(current_time, current_time + meeting_duration):\n            return current_time, current_time + meeting_duration\n        current_time += timedelta(minutes=30)  # Check each half hour interval\n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    start, end = meeting_time\n    print(f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_375"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and durations\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant\nschedules = {\n    'Larry': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Angela': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Christina': [],\n    'Scott': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Matthew': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Charlotte': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Convert busy times into a list of busy intervals\nbusy_times = []\nfor participant, times in schedules.items():\n    for start, end in times:\n        busy_times.append((start, end))\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        meeting_end = current_time + meeting_duration\n        \n        # Check if the current time interferes with any busy intervals\n        if all(not (start < meeting_end and end > current_time) for start, end in busy_times):\n            return current_time.strftime('%H:%M') + ':' + meeting_end.strftime('%H:%M')\n        \n        current_time += timedelta(minutes=1)\n\n# Call the function and print the result\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_376"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"Diana\": [],\n    \"Sean\": [],\n    \"Rebecca\": [(\"13:00\", \"13:30\"), (\"16:30\", \"17:00\")],\n    \"Peter\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:30\"), (\"12:30\", \"13:00\"),\n              (\"14:00\", \"14:30\"), (\"15:00\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Lawrence\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:00\"), (\"12:00\", \"13:00\"),\n                 (\"13:30\", \"14:00\"), (\"14:30\", \"15:00\"), (\"16:30\", \"17:00\")],\n    \"Randy\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:30\"), (\"12:00\", \"13:00\"),\n              (\"13:30\", \"15:30\"), (\"16:00\", \"17:00\")]\n}\n\n# Define the meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nrandy_preference_end = datetime.strptime(\"10:30\", \"%H:%M\")\n\n# Create list of all busy periods\nbusy_times = []\nfor busy_schedule in schedules.values():\n    for start_time, end_time in busy_schedule:\n        busy_times.append((datetime.strptime(start_time, \"%H:%M\"), datetime.strptime(end_time, \"%H:%M\")))\n\n# Sort busy times\nbusy_times.sort()\n\n# Function to find a free slot\ndef find_meeting_time():\n    current_start = work_start\n    for busy_start, busy_end in busy_times:\n        if current_start + meeting_duration <= busy_start:\n            if current_start <= randy_preference_end:\n                return current_start.strftime(\"%H:%M\") + \":\" + (current_start + meeting_duration).strftime(\"%H:%M\")  \n        current_start = max(current_start, busy_end)\n    \n    # Check for time after last busy period but within work hours\n    if current_start + meeting_duration <= work_end:\n        return current_start.strftime(\"%H:%M\") + \":\" + (current_start + meeting_duration).strftime(\"%H:%M\")\n\n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_377"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules (busy times)\nschedules = {\n    \"Marie\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Mark\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Patrick\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Julie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Emma\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Daniel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if the time range is free for all participants\ndef is_time_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_free(current_time, current_time + meeting_duration):\n            return (current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"))\n        current_time += timedelta(minutes=30)  # Check next half hour\n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time for the meeting.\")\n\n```",
            "count": "calendar_scheduling_example_378"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for participants\nschedules = {\n    \"Carolyn\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \n    \"Russell\": [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Emma\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Maria\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Mason\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    \"Hannah\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        # Check if the current time is free for all participants\n        is_free = True\n        for blocked_times in schedules.values():\n            for start, end in blocked_times:\n                if current_time < end and current_time + meeting_duration > start:\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        if is_free:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)  # Increment time by a minute\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_379"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules in terms of busy time slots\nschedules = {\n    \"Adam\": [],\n    \"Jacqueline\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Denise\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Kimberly\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Ann\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Steven\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_free(time_start, time_end):\n    for schedule in schedules.values():\n        for busy_start, busy_end in schedule:\n            if not (time_end <= busy_start or time_start >= busy_end):\n                return False\n    return True\n\n# Find available time slots\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    next_time = current_time + meeting_duration\n    if is_free(current_time, next_time):\n        print(f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_380"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Define participants' busy schedules\nschedules = {\n    'Larry': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Julie': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Jason': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Mason': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Alan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n             (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Bruce': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Required meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef is_time_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Find an available time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if is_time_free(current_time, end_time):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Check every minute\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_381"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants and their busy schedules\nschedules = {\n    \"Debra\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ryan\": [],\n    \"Maria\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Timothy\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Pamela\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ethan\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create a list to hold all busy times\nbusy_times = []\nfor busy_slots in schedules.values():\n    busy_times.extend(busy_slots)\n\n# Sort busy times\nbusy_times.sort()\n\n# Find available time slots\ndef get_available_slots(busy_times, start, end):\n    available_slots = []\n    last_end = start\n\n    for start_time, end_time in busy_times:\n        if last_end + meeting_duration <= start_time:\n            available_slots.append((last_end, start_time))\n        last_end = max(last_end, end_time)\n\n    # Check if there's time available at the end of the day\n    if last_end + meeting_duration <= end:\n        available_slots.append((last_end, end))\n\n    return available_slots\n\n# Calculate available slots\navailable_slots = get_available_slots(busy_times, work_start, work_end)\n\n# Choose the first available slot for the meeting\nif available_slots:\n    proposed_start, proposed_end = available_slots[0]\n    proposed_end = proposed_start + meeting_duration\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\nelse:\n    print(\"No available time slots found.\")\n```\n",
            "count": "calendar_scheduling_example_382"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting participants and their schedules\nschedules = {\n    \"Diane\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Rachel\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Amber\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Shirley\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joshua\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Lisa\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules):\n    time_slots = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        conflict = False\n        for participant, busy_times in schedules.items():\n            for start, end in busy_times:\n                if start < current_time + meeting_duration and end > current_time:\n                    conflict = True\n                    break\n            if conflict:\n                break\n        if not conflict:\n            time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check next 30 min slot\n\n    # Return the first available time slot if exists\n    if time_slots:\n        start_time = time_slots[0]\n        end_time = start_time + meeting_duration\n        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return \"No available time slot\"\n\n# Get the proposed time for the meeting\nproposed_time = find_meeting_time(schedules)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_383"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy slots for each participant\nbusy_slots = {\n    \"Stephen\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Diane\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Joe\": [\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Diana\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Julia\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Stephanie\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to check if a time slot is available for all participants\ndef is_time_available(start, end):\n    for busy in busy_slots.values():\n        for slot in busy:\n            if start < slot[1] and end > slot[0]:  # Check for overlap\n                return False\n    return True\n\n# Finding the first available time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_available(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=15)  # Check every 15 minutes\n```",
            "count": "calendar_scheduling_example_384"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Noah\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n             \n    \"Jesse\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n\n    \"Amy\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n\n    \"Timothy\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n\n    \"Eugene\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n\n    \"Theresa\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a proposed time slot is free for all participants\ndef is_time_slot_free(start_time, duration):\n    end_time = start_time + duration\n    for busy_times in schedules.values():\n        for start, end in busy_times:\n            if start_time < end and start < end_time:  # Overlap check\n                return False\n    return True\n\n# Finding a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, meeting_duration):\n        meeting_start = current_time.strftime(\"%H:%M\")\n        meeting_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"Proposed meeting time: {meeting_start}:{meeting_end}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_385"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import time, timedelta\r\n\r\ndef find_meeting_time(schedules, meeting_duration, preferences):\r\n    # Define the working hours\r\n    working_start = time(9, 0)\r\n    working_end = time(17, 0)\r\n\r\n    # Convert time to minutes for easier comparison\r\n    def time_to_minutes(t):\r\n        return t.hour * 60 + t.minute\r\n\r\n    # Create a list of free time slots\r\n    free_slots = []\r\n    current_time = working_start\r\n    while current_time < working_end:\r\n        # Check if everyone is free at current_time\r\n        end_time = (time_to_minutes(current_time) + meeting_duration) % (24 * 60)\r\n        end_time_actual = time(end_time // 60, end_time % 60)\r\n        \r\n        is_free = True\r\n        for participant, busy_times in schedules.items():\r\n            for start, end in busy_times:\r\n                if current_time < end and end_time_actual > start:\r\n                    is_free = False\r\n                    break\r\n            if not is_free:\r\n                break\r\n        \r\n        if is_free:\r\n            free_slots.append(current_time)\r\n        \r\n        # Increment current time by 30 minutes\r\n        current_time = (time_to_minutes(current_time) + 30) % (24 * 60)\r\n        current_time = time(current_time // 60, current_time % 60)\r\n    \r\n    # Apply preferences (e.g., Jason prefers meeting after 10:30)\r\n    free_slots = [slot for slot in free_slots if slot >= preferences['Jason']]\r\n    \r\n    # Take the first available slot\r\n    if free_slots:\r\n        meeting_start = free_slots[0]\r\n        meeting_end = (time_to_minutes(meeting_start) + meeting_duration) % (24 * 60)\r\n        return f\"{meeting_start.strftime('%H:%M')}:{time(meeting_end // 60, meeting_end % 60).strftime('%H:%M')}\"\r\n    return None\r\n\r\n# Given schedules for the participants\r\nschedules = {\r\n    'Bryan': [(time(9, 30), time(10, 0)), (time(13, 30), time(14, 30)), (time(15, 0), time(16, 30))],\r\n    'Benjamin': [],\r\n    'Matthew': [(time(9, 0), time(9, 30)), (time(10, 30), time(12, 0)), (time(14, 0), time(14, 30)), (time(15, 30), time(16, 0))],\r\n    'Margaret': [(time(9, 0), time(9, 30)), (time(10, 30), time(12, 0)), (time(12, 30), time(13, 0)), (time(13, 30), time(14, 30)), (time(15, 0), time(15, 30))],\r\n    'Donald': [(time(9, 0), time(10, 0)), (time(10, 30), time(13, 30)), (time(14, 0), time(14, 30)), (time(15, 30), time(17, 0))],\r\n    'Jason': [(time(9, 0), time(10, 0)), (time(12, 0), time(12, 30)), (time(13, 0), time(13, 30)), (time(15, 0), time(17, 0))]\r\n}\r\n\r\n# Meeting duration in minutes\r\nmeeting_duration = 30\r\n\r\n# Meeting preferences\r\npreferences = {\r\n    'Jason': time(10, 30)  # Jason prefers not to meet before 10:30\r\n}\r\n\r\n# Find and print the proposed meeting time\r\nprint(find_meeting_time(schedules, meeting_duration, preferences))\r\n```",
            "count": "calendar_scheduling_example_386"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules (each time range as a tuple of start and end times)\nexisting_schedules = {\n    \"Bruce\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Dorothy\": [],\n    \"Joyce\": [],\n    \"Jessica\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Aaron\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kathryn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\ndef find_meeting_time(schedules, duration):\n    # Combine all busy times into a single list\n    busy_times = []\n    for participant, times in schedules.items():\n        busy_times.extend(times)\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Check for gaps between busy times\n    current_end = work_start\n    for start, end in busy_times:\n        if current_end + duration <= start: # Enough time for the meeting\n            return current_end, current_end + duration\n        current_end = max(current_end, end)\n\n    # Check if there's time at the end of the day\n    if current_end + duration <= work_end:\n        return current_end, current_end + duration\n\n    return None\n\n# Calculate meeting time\nmeeting_time = find_meeting_time(existing_schedules, meeting_duration)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time for the meeting.\")\n```",
            "count": "calendar_scheduling_example_387"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_availability, meeting_duration):\n    day_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    day_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_end = day_start + timedelta(minutes=meeting_duration)\n    \n    while meeting_end <= day_end:\n        if all(available(meeting_start, meeting_end, participant) for participant in participants_availability):\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n        meeting_start = meeting_end\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    return None\n\ndef available(meeting_start, meeting_end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if busy_start < meeting_end and meeting_start < busy_end:\n            return False\n    return True\n\nparticipants_availability = {\n    \"Amy\": [],\n    \"Karen\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Mark\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Madison\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Michelle\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Brandon\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = 30 # minutes\nmeeting_time = find_meeting_time(participants_availability, meeting_duration)\n\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```\n",
            "count": "calendar_scheduling_example_388"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_available(participants_schedules, start_time, duration):\n    end_time = start_time + timedelta(minutes=duration)\n    for schedule in participants_schedules:\n        for busy_start, busy_end in schedule:\n            # Check if the meeting overlaps with any busy time\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Existing schedules for each participant\nparticipants_schedules = [\n    [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],  # Debra\n    [],  # Sara\n    [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],  # Theresa\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],  # Carol\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n     (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Justin\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]   # Edward\n]\n\nstart_of_work = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_work = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = 30  # minutes\n\n# Finding a suitable time slot\ncurrent_time = start_of_work\nwhile current_time + timedelta(minutes=meeting_duration) <= end_of_work:\n    if is_time_slot_available(participants_schedules, current_time, meeting_duration):\n        # Format output\n        meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n        print(f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_389"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define time slots for each participant\nparticipants = {\n    \"Katherine\": [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n                  (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 11, 30)),\n                  (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 30)),\n                  (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30)),\n                  (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Justin\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 30)),\n               (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n               (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 30)),\n               (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 30))],\n    \"Abigail\": [(datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n                (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 15, 0)),\n                (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 30))],\n    \"Kayla\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n              (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 0)),\n              (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 14, 0)),\n              (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n              (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 30))],\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Create a time interval for the whole day\nstart_of_day = datetime(2023, 10, 2, 9, 0)\nend_of_day = datetime(2023, 10, 2, 17, 0)\n\n# Generate busy times for all participants\nbusy_times = []\nfor busy in participants.values():\n    busy_times.extend(busy)\n\n# Check for available slots\navailable_start = start_of_day\nwhile available_start + meeting_duration <= end_of_day:\n    available_end = available_start + meeting_duration\n    if all(not (available_start < busy_end and available_end > busy_start) for busy_start, busy_end in busy_times):\n        print(f\"{available_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\")\n        break\n    available_start += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_390"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to generate a schedule based on existing participant schedules\ndef find_meeting_time():\n    # Define the working hours and meeting duration\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Define participant schedules (busy times)\n    bryan_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n    \n    billy_busy = []\n    \n    alexander_busy = []\n    \n    sophia_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n    \n    larry_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n    nicole_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n    \n    # Combine all busy schedules\n    all_busy_times = bryan_busy + billy_busy + alexander_busy + sophia_busy + larry_busy + nicole_busy\n\n    # Check each time block for availability\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        is_conflict = False\n        \n        for busy_start, busy_end in all_busy_times:\n            if not (meeting_end_time <= busy_start or current_time >= busy_end):\n                is_conflict = True\n                break\n        \n        if not is_conflict:\n            # Format for output\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_391"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create list of busy intervals\n    busy_intervals = []\n    for schedule in schedules.values():\n        for busy_start, busy_end in schedule:\n            busy_intervals.append((busy_start, busy_end))\n\n    # Sort busy intervals\n    busy_intervals.sort()\n\n    # Merge overlapping busy intervals\n    merged_intervals = []\n    for start, end in busy_intervals:\n        if not merged_intervals or merged_intervals[-1][1] < start:\n            merged_intervals.append((start, end))\n        else:\n            merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end))\n\n    # Find time slots for the meeting\n    free_intervals = []\n    last_end = work_start\n\n    for start, end in merged_intervals:\n        if last_end + timedelta(minutes=meeting_duration) <= start:\n            free_intervals.append((last_end, start))\n        last_end = max(last_end, end)\n\n    # Check the time after the last busy interval\n    if last_end + timedelta(minutes=meeting_duration) <= work_end:\n        free_intervals.append((last_end, work_end))\n\n    if not free_intervals:\n        return None\n\n    # Return the first available slot\n    start_time = free_intervals[0][0]\n    end_time = start_time + timedelta(minutes=meeting_duration)\n\n    return start_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n\nschedules = {\n    \"Donald\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Alice\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Doris\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Noah\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jerry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = 30  # in minutes\nstart_time, end_time = find_meeting_time(schedules, meeting_duration)\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_392"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import timedelta, datetime\n\n# Define participant schedules\nschedules = {\n    \"Samantha\": [(9, 17)],\n    \"Nancy\": [(9, 9.5), (11, 11.5)],\n    \"Steven\": [(9, 17)],\n    \"William\": [(9, 11), (12, 13), (13.5, 16.5)],\n    \"Karen\": [(9, 12), (12.5, 17)],\n    \"Tyler\": [(9, 11), (11.5, 12), (12.5, 15), (15.5, 17)],\n}\n\n# Meeting duration in hours\nmeeting_duration = 0.5  # 30 minutes\n\n# Calculate free time slots for each participant\ndef calculate_free_time(schedules):\n    free_slots = []\n    for participant, times in schedules.items():\n        busy_times = sorted(times)\n        available_slots = []\n        \n        # Initialize with full work hours\n        current_start = 9\n        current_end = 17\n        \n        for start, end in busy_times:\n            # Check if current busy time starts after current available time\n            if start > current_start:\n                available_slots.append((current_start, start))\n            current_start = max(current_start, end)\n\n        # Add the remaining free time at the end of the day\n        if current_start < current_end:\n            available_slots.append((current_start, current_end))\n        \n        free_slots.append(available_slots)\n\n    return free_slots\n\ndef find_meeting_time(free_slots, meeting_duration):\n    # Start checking for common free time slots\n    potential_times = []\n\n    # Get the intersection of all available time slots\n    for slot in free_slots[0]:\n        start, end = slot\n        for participant_slots in free_slots[1:]:\n            for p_start, p_end in participant_slots:\n                # Find overlapping times\n                if start < p_end and end > p_start:\n                    start = max(start, p_start)\n                    end = min(end, p_end)\n            if end - start >= meeting_duration:\n                potential_times.append((start, end))\n\n    # Return the first available time slot found\n    if potential_times:\n        return potential_times[0]\n    return None\n\n# Get free time for participants\nfree_time_slots = calculate_free_time(schedules)\n\n# Find meeting time\nmeeting_time = find_meeting_time(free_time_slots, meeting_duration)\n\n# Format output\nif meeting_time:\n    start_time, end_time = meeting_time\n    start_hour = int(start_time)\n    start_minute = int((start_time % 1) * 60)\n    end_hour = int(end_time)\n    end_minute = int((end_time % 1) * 60)\n    output = f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\n    print(output)\nelse:\n    print(\"No available meeting time found.\")\n```",
            "count": "calendar_scheduling_example_393"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules as busy time intervals (start, end)\nschedules = {\n    \"Nicole\": [],\n    \"Randy\": [],\n    \"Michelle\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Matthew\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Andrea\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Douglas\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Function to find available meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if this time slot is not overlapping with any busy schedules\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        if all(not (meeting_start < end and meeting_end > start) for schedule in schedules.values() for start, end in schedule):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n# Call the function and print the output\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_394"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules in a format of busy time slots\nschedules = {\n    \"Jonathan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"George\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Stephen\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Betty\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Frank\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function that checks if a time slot is free for everyone\ndef is_slot_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and busy_start < end:  # Overlap check\n                return False\n    return True\n\n# Iterating through possible time slots\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    if is_slot_free(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Check next half hour slot\n```",
            "count": "calendar_scheduling_example_395"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules for the participants as busy time slots\nschedules = {\n    \"Jack\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Madison\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Rachel\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Douglas\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Ryan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if time slot is free\ndef is_free(time_slot):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (time_slot[1] <= busy_start or time_slot[0] >= busy_end):\n                return False\n    return True\n\n# Finding a suitable time for the meeting\ncurrent_time = start_time\n\nwhile current_time + meeting_duration <= end_time:\n    proposed_time_slot = (current_time, current_time + meeting_duration)\n    if is_free(proposed_time_slot):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=15)  # increment by 15 minutes to find next slot\n```",
            "count": "calendar_scheduling_example_396"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules as tuples of (start_time, end_time)\nschedules = {\n    \"Jonathan\": [],\n    \"Matthew\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Carl\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Ryan\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Albert\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Danielle\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a free slot\ndef find_meeting_time(schedules):\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of all busy times\n    busy_times = []\n    for busy in schedules.values():\n        busy_times.extend(busy)\n\n    # Sort busy times by start time\n    busy_times.sort(key=lambda x: x[0])\n\n    # Find potential meeting time\n    current_time = work_start\n    for start, end in busy_times:\n        # Check if there is enough time before the next busy slot\n        if current_time + meeting_duration <= start:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        # Move current time to the end of the busy period\n        current_time = max(current_time, end)\n\n    # If we finish loop without finding a slot, try to schedule at the end\n    if current_time + meeting_duration <= work_end:\n        return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time(schedules)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_397"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the blocked times of each participant\nschedules = {\n    \"Doris\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Theresa\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Christian\": [],\n    \"Terry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carolyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kyle\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find available time slots\ndef find_available_slot(schedules, work_start, work_end, meeting_duration):\n    blocked_times = []\n    \n    for participant, blocks in schedules.items():\n        for start, end in blocks:\n            # Combine with work hours\n            if start < work_start:\n                start = work_start\n            if end > work_end:\n                end = work_end\n            blocked_times.append((start, end))\n    \n    # Sort blocked times\n    blocked_times.sort()\n    \n    # Check for available slots\n    last_end = work_start\n    for start, end in blocked_times:\n        if last_end + meeting_duration <= start:\n            return last_end, last_end + meeting_duration\n        last_end = max(last_end, end)\n    \n    # Finally check if there's time after the last blocked slot\n    if last_end + meeting_duration <= work_end:\n        return last_end, last_end + meeting_duration\n    \n    return None\n\n# Finding available slot\nslot = find_available_slot(schedules, work_start, work_end, meeting_duration)\n\nif slot:\n    start_time, end_time = slot\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available slot found\")\n```",
            "count": "calendar_scheduling_example_398"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define each participant's busy times\nbusy_times = {\n    \"Andrew\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Sandra\": [],\n    \"Lawrence\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Olivia\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Bruce\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Joyce\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to check if a time period is free for all participants\ndef is_time_free(start, end):\n    for busy in busy_times.values():\n        for b_start, b_end in busy:\n            if not (end <= b_start or start >= b_end):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_free(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=15)  # Check every 15 minutes\n    return None\n\n# Outputting the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_399"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define busy schedules for each participant\nschedules = {\n    \"Rachel\": [],\n    \"Katherine\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Cynthia\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Anthony\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ryan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Richard\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Convert busy schedules to occupied time slots\noccupied_slots = []\nfor busy_times in schedules.values():\n    occupied_slots.extend(busy_times)\n\n# Sort the busy slots for easier processing\noccupied_slots.sort(key=lambda x: x[0])\n\n# Function to find available time slots\ndef find_available_slots(occupied_slots, meeting_duration):\n    available_slots = []\n    current_time = work_start\n    \n    for busy_start, busy_end in occupied_slots:\n        if current_time + meeting_duration <= busy_start:\n            available_slots.append((current_time, busy_start))\n        current_time = max(current_time, busy_end)\n\n    if current_time + meeting_duration <= work_end:\n        available_slots.append((current_time, work_end))\n\n    return available_slots\n\n# Find available slots\nmeeting_duration = timedelta(minutes=30)\navailable_slots = find_available_slots(occupied_slots, meeting_duration)\n\n# Select the first available slot if it exists\nif available_slots:\n    proposed_start, proposed_end = available_slots[0]\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\nelse:\n    print(\"No available slot found.\")\n```",
            "count": "calendar_scheduling_example_400"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\nschedules = {\n    \"Evelyn\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Roy\": [],\n    \"Billy\": [],\n    \"Gregory\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Vincent\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Philip\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"William\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        end_time = current_time + meeting_duration\n        is_free = True\n        \n        for busy_slots in schedules.values():\n            for start, end in busy_slots:\n                if current_time < end and end_time > start:\n                    is_free = False\n                    break\n            if not is_free:\n                break\n            \n        if is_free:\n            # Check William's preference\n            if current_time >= datetime.strptime(\"13:30\", \"%H:%M\"):\n                break\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n\n    return None\n\n# Get a proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_401"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time slots for each participant\nparticipants_schedule = {\n    \"Samantha\": [(datetime(2023, 10, 9, 11, 0), datetime(2023, 10, 9, 11, 30)),\n                  (datetime(2023, 10, 9, 13, 0), datetime(2023, 10, 9, 13, 30)),\n                  (datetime(2023, 10, 9, 15, 30), datetime(2023, 10, 9, 16, 0)),\n                  (datetime(2023, 10, 9, 16, 30), datetime(2023, 10, 9, 17, 0))],\n\n    \"Brian\": [],\n\n    \"Arthur\": [(datetime(2023, 10, 9, 13, 30), datetime(2023, 10, 9, 14, 0)),\n               (datetime(2023, 10, 9, 16, 0), datetime(2023, 10, 9, 16, 30))],\n\n    \"Matthew\": [],\n\n    \"Marilyn\": [(datetime(2023, 10, 9, 9, 0), datetime(2023, 10, 9, 10, 0)),\n                (datetime(2023, 10, 9, 10, 30), datetime(2023, 10, 9, 11, 30)),\n                (datetime(2023, 10, 9, 12, 0), datetime(2023, 10, 9, 13, 0)),\n                (datetime(2023, 10, 9, 14, 0), datetime(2023, 10, 9, 14, 30)),\n                (datetime(2023, 10, 9, 16, 0), datetime(2023, 10, 9, 16, 30))],\n\n    \"Mark\": [(datetime(2023, 10, 9, 9, 30), datetime(2023, 10, 9, 11, 0)),\n             (datetime(2023, 10, 9, 11, 30), datetime(2023, 10, 9, 13, 30)),\n             (datetime(2023, 10, 9, 14, 0), datetime(2023, 10, 9, 14, 30)),\n             (datetime(2023, 10, 9, 15, 0), datetime(2023, 10, 9, 16, 0))],\n\n    \"Andrea\": [(datetime(2023, 10, 9, 9, 30), datetime(2023, 10, 9, 11, 0)),\n               (datetime(2023, 10, 9, 11, 30), datetime(2023, 10, 9, 14, 30)),\n               (datetime(2023, 10, 9, 15, 0), datetime(2023, 10, 9, 15, 30))]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nwork_start = datetime(2023, 10, 9, 9, 0)\nwork_end = datetime(2023, 10, 9, 17, 0)\n\n# Create a list of busy times from all participants\nbusy_times = []\nfor schedule in participants_schedule.values():\n    busy_times.extend(schedule)\n\n# Sort the busy times\nbusy_times.sort()\n\n# Available time\ncurrent_time = work_start\n\n# Find a suitable time\nwhile current_time + meeting_duration <= work_end:\n    # Check if current_time overlaps with any busy time\n    is_free = True\n    for start, end in busy_times:\n        if current_time < end and current_time + meeting_duration > start:\n            is_free = False\n            break\n    if is_free:\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f'{{{proposed_start.strftime(\"%H:%M\")}:{proposed_end.strftime(\"%H:%M\")}}}')\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_402"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nschedules = {\n    \"Wayne\": [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n\n    \"Edward\": [],\n\n    \"Lauren\": [],\n\n    \"Helen\": [],\n\n    \"Michael\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n\n    \"Joseph\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n\n    \"Vincent\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find free time slots for all participants\ndef find_free_time(schedules, work_start, work_end, meeting_duration):\n    all_busy_times = []\n    \n    # Aggregate all busy times\n    for busy_times in schedules.values():\n        all_busy_times.extend(busy_times)\n\n    # Sort busy times\n    all_busy_times.sort(key=lambda x: x[0])\n\n    # Create a list of free slots\n    free_slots = []\n    last_end = work_start\n\n    for start, end in all_busy_times:\n        if last_end < start:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < work_end:\n        free_slots.append((last_end, work_end))\n\n    # Check for available slots for the meeting duration\n    for start, end in free_slots:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n\n    return None\n\n# Finding a suitable meeting time\nmeeting_time = find_free_time(schedules, work_start, work_end, meeting_duration)\n\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_403"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants and their schedules\nschedules = {\n    \"Kayla\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Sandra\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ryan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Kathleen\": [],\n    \"Walter\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Arthur\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Heather\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Duration of the meeting\nmeeting_duration = timedelta(hours=1)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create a list for busy times\nbusy_times = []\nfor participant, time_slots in schedules.items():\n    for start, end in time_slots:\n        busy_times.append((start, end))\n\n# Merge overlapping time slots\nbusy_times.sort()\nmerged_busy_times = []\nfor start, end in busy_times:\n    if not merged_busy_times or merged_busy_times[-1][1] < start:\n        merged_busy_times.append((start, end))\n    else:\n        merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n# Find a suitable time slot for the meeting\ncurrent_time = work_start\nfor start, end in merged_busy_times:\n    while current_time + meeting_duration <= start:\n        proposed_end_time = current_time + meeting_duration\n        if proposed_end_time <= work_end:\n            print(f\"{current_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\")\n            break\n        current_time = proposed_end_time\n    current_time = max(current_time, end)\n\n# Check for time after last busy slot until work end\nwhile current_time + meeting_duration <= work_end:\n    proposed_end_time = current_time + meeting_duration\n    print(f\"{current_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\")\n    break\n```",
            "count": "calendar_scheduling_example_404"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_availabilities, meeting_duration):\n    start_working_hour = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_working_hour = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Creating a time range for the entire day\n    time_slots = []\n    current_time = start_working_hour\n    \n    while current_time + meeting_duration <= end_working_hour:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # check every 30 minutes\n    \n    # Now check each time slot against participants' availability\n    for start_time in time_slots:\n        end_time = start_time + meeting_duration\n        if all(is_time_slot_free(start_time, end_time, availability) for availability in participants_availabilities):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\ndef is_time_slot_free(start_time, end_time, availability):\n    for busy_start, busy_end in availability:\n        if not (end_time <= busy_start or start_time >= busy_end):\n            return False\n    return True\n\n# Participants' availabilities in (start, end) tuples\nparticipants_availabilities = [\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")), \n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")), \n     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")), \n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Emily\n     \n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")), \n     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")), \n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Brian\n\n    [],  # Gerald\n   \n    [],  # Julia\n\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")), \n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")), \n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Logan\n\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")), \n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")), \n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")), \n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Judith\n\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")), \n     (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")), \n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")), \n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")), \n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]  # Michael\n]\n\nmeeting_duration = timedelta(minutes=30)\navailable_time = find_meeting_time(participants_availabilities, meeting_duration)\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_405"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    \"Alan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \n    \"Michael\": [],\n    \n    \"Michelle\": [],\n    \n    \"Roy\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \n    \"Judy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Natalie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Brian\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a free slot\ndef find_free_slot(schedules, duration, start, end):\n    # Create a list of all busy intervals\n    busy_intervals = []\n    for participant, intervals in schedules.items():\n        busy_intervals.extend(intervals)\n\n    # Add work hours as busy intervals\n    busy_intervals.append((start, end))\n\n    # Sort intervals by start time\n    busy_intervals.sort()\n\n    # Find gaps in busy intervals\n    current_time = start\n    for busy_start, busy_end in busy_intervals:\n        if current_time + duration <= busy_start:\n            return current_time, current_time + duration\n        current_time = max(current_time, busy_end)\n\n    return None\n\n# Find an available time slot\navailable_slot = find_free_slot(schedules, meeting_duration, work_start, work_end)\n\nif available_slot:\n    start_time, end_time = available_slot\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time found.\")\n```\n",
            "count": "calendar_scheduling_example_406"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Busy schedules for each participant\nbusy_times = {\n    'Alice': [],\n    'Daniel': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Scott': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Lori': [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Cynthia': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Jeffrey': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Hannah': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a free time slot\ndef find_meeting_time(busy_times, start_time, end_time, meeting_duration):\n    free_slots = []\n    current_time = start_time\n\n    while current_time + meeting_duration <= end_time:\n        is_free = True\n        for busy in busy_times.values():\n            for start, end in busy:\n                if start <= current_time < end or start < (current_time + meeting_duration) <= end:\n                    is_free = False\n                    break\n            if not is_free:\n                break\n\n        if is_free:\n            free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n    # Return the first suitable time\n    return free_slots[0] if free_slots else None\n\nmeeting_time = find_meeting_time(busy_times, start_time, end_time, meeting_duration)\nif meeting_time:\n    print(f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_407"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of busy slots\n    busy_slots = []\n    for schedule in participants_schedules:\n        for busy_slot in schedule:\n            busy_slots.append((datetime.strptime(busy_slot[0], \"%H:%M\"), datetime.strptime(busy_slot[1], \"%H:%M\")))\n\n    # Sort busy slots by start time\n    busy_slots.sort()\n\n    # Check for gaps in the busy slots\n    last_end = work_start\n    for start, end in busy_slots:\n        if last_end + timedelta(minutes=meeting_duration) <= start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n\n    # Check for time after last busy slot\n    if last_end + timedelta(minutes=meeting_duration) <= work_end:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n\n    return None\n\n# Participants busy schedules\nparticipants = {\n    \"Noah\": [],\n    \"Teresa\": [(\"11:00\", \"12:00\"), (\"14:00\", \"15:00\"), (\"16:00\", \"17:00\")],\n    \"Bradley\": [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"16:30\")],\n    \"Philip\": [(\"09:00\", \"09:30\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"16:30\", \"17:00\")],\n    \"Joyce\": [(\"09:30\", \"10:00\"), (\"11:30\", \"12:30\"), (\"13:30\", \"14:30\"), (\"15:30\", \"17:00\")],\n    \"Ryan\": [(\"09:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"14:00\", \"17:00\")],\n    \"Aaron\": [(\"10:00\", \"12:00\"), (\"14:00\", \"14:30\"), (\"15:00\", \"16:30\")]\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Finding a suitable time\nmeeting_time = find_meeting_time(participants.values(), meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_408"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Alan\": [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 9, 30)),\n             (datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 11, 0)),\n             (datetime(2023, 10, 16, 11, 30), datetime(2023, 10, 16, 12, 0))],\n    \"Mason\": [(datetime(2023, 10, 16, 13, 30), datetime(2023, 10, 16, 14, 0)),\n              (datetime(2023, 10, 16, 16, 30), datetime(2023, 10, 16, 17, 0))],\n    \"Dennis\": [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 9, 30)),\n               (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0))],\n    \"Theresa\": [],\n    \"Brenda\": [(datetime(2023, 10, 16, 10, 30), datetime(2023, 10, 16, 11, 0)),\n               (datetime(2023, 10, 16, 12, 0), datetime(2023, 10, 16, 13, 30)),\n               (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 30)),\n               (datetime(2023, 10, 16, 16, 0), datetime(2023, 10, 16, 17, 0))],\n    \"Juan\": [(datetime(2023, 10, 16, 9, 30), datetime(2023, 10, 16, 10, 0)),\n             (datetime(2023, 10, 16, 10, 30), datetime(2023, 10, 16, 11, 0)),\n             (datetime(2023, 10, 16, 11, 30), datetime(2023, 10, 16, 13, 0)),\n             (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0)),\n             (datetime(2023, 10, 16, 16, 0), datetime(2023, 10, 16, 17, 0))],\n    \"Angela\": [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 10, 0)),\n               (datetime(2023, 10, 16, 10, 30), datetime(2023, 10, 16, 11, 0)),\n               (datetime(2023, 10, 16, 11, 30), datetime(2023, 10, 16, 12, 0)),\n               (datetime(2023, 10, 16, 13, 0), datetime(2023, 10, 16, 14, 0)),\n               (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 15, 30)),\n               (datetime(2023, 10, 16, 16, 30), datetime(2023, 10, 16, 17, 0))]\n}\n\ndef find_meeting_time(schedules, meeting_duration):\n    work_start = datetime(2023, 10, 16, 9, 0)\n    work_end = datetime(2023, 10, 16, 17, 0)\n    meeting_duration = timedelta(minutes=meeting_duration)\n    \n    # Create a list of busy times\n    busy_times = []\n    for busy in schedules.values():\n        busy_times.extend(busy)\n        \n    # Sort busy times\n    busy_times.sort()\n    \n    # Check for meeting slots\n    available_start = work_start\n    for start, end in busy_times:\n        if available_start + meeting_duration <= start:\n            return available_start.strftime(\"%H:%M\") + ':' + (available_start + meeting_duration).strftime(\"%H:%M\")\n        available_start = max(available_start, end)\n        \n    # Final check after last busy slot\n    if available_start + meeting_duration <= work_end:\n        return available_start.strftime(\"%H:%M\") + ':' + (available_start + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Find a suitable time for the 30-minute meeting\nresult = find_meeting_time(schedules, 30)\nprint(result)\n```",
            "count": "calendar_scheduling_example_409"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant's schedules\nschedules = {\n    \"Nathan\": [(\"09:00\", \"17:00\")],\n    \"David\": [(\"09:30\", \"16:00\")],\n    \"Robert\": [(\"09:00\", \"09:30\"), (\"10:00\", \"13:00\"), (\"13:30\", \"17:00\")],\n    \"Evelyn\": [(\"09:00\", \"17:00\")],\n    \"Christine\": [(\"10:00\", \"13:00\"), (\"13:30\", \"14:00\"), (\"16:00\", \"17:00\")],\n    \"Kelly\": [(\"09:00\", \"10:00\"), (\"11:00\", \"12:00\"), (\"12:30\", \"13:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    \"Paul\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:30\"), (\"12:00\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"15:00\"), (\"16:00\", \"17:00\")],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Convert string time to datetime\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\n# Convert datetime to string time\ndef datetime_to_time_str(dt):\n    return dt.strftime('%H:%M')\n\n# Find available time slots for the meeting\navailable_slots = []\nfor hour in range(9, 17):  # 9 AM to 5 PM\n    for minute in [0, 30]:\n        start_time = time_to_datetime(f\"{hour}:{minute}\")\n        end_time = start_time + meeting_duration\n\n        # Check if this time slot is free for all\n        is_free = True\n        for person, times in schedules.items():\n            free = False\n            for (start, end) in times:\n                start_dt = time_to_datetime(start)\n                end_dt = time_to_datetime(end)\n                if start_dt <= start_time < end_dt and start_dt < end_time <= end_dt:\n                    free = True\n                    break\n            if not free:\n                is_free = False\n                break\n\n        if is_free:\n            available_slots.append((start_time, end_time))\n\n# Filter out times after 11:00 for Paul\nfiltered_slots = [\n    (start, end) for start, end in available_slots \n    if start < time_to_datetime(\"11:00\")\n]\n\n# Select the first available slot\nif filtered_slots:\n    meeting_time = filtered_slots[0]\n    print(f'{{{datetime_to_time_str(meeting_time[0])}:{datetime_to_time_str(meeting_time[1])}}}')\nelse:\n    print(\"No suitable meeting time found.\")\n```",
            "count": "calendar_scheduling_example_410"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to schedule a meeting given participants' availability\ndef find_meeting_time(schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Schedule in minutes\n    meeting_duration_minutes = meeting_duration * 60 \n    current_time = work_start\n\n    while current_time + timedelta(minutes=meeting_duration_minutes) <= work_end:\n        # Check if the current time slot is available for all participants\n        slot_available = True\n        for busy_times in schedules:\n            for busy_start, busy_end in busy_times:\n                if not (current_time >= busy_end or current_time + timedelta(minutes=meeting_duration_minutes) <= busy_start):\n                    slot_available = False\n                    break\n            if not slot_available:\n                break\n        \n        if slot_available:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration_minutes)).strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Existing schedules for each participant (busy times)\nschedules = [\n    [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n]\n\n# Meeting duration in hours\nmeeting_duration = 0.5 \n\n# Get proposed time\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_411"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nschedules = {\n    'Douglas': [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Susan': [],\n    'Donna': [],\n    'Elizabeth': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Ralph': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Paul': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Ryan': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Generate a list of all times in the work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = meeting_start + meeting_duration\n        \n        # Check if this time slot is free for everyone\n        if all(not any(start < meeting_end and end > meeting_start for start, end in schedules[person]) for person in schedules):\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30) # Check next half hour\n\n# Get the suitable meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(f\"{{{proposed_time}}}\")\n```",
            "count": "calendar_scheduling_example_412"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' busy times\nbusy_times = {\n    \"Patrick\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Bryan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Matthew\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Bruce\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"William\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\ndef is_time_free(start, end):\n    for busy in busy_times.values():\n        for period in busy:\n            if start < period[1] and end > period[0]: \n                return False\n    return True\n\n# Find a suitable time\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_free(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)  # Check the next minute\n```",
            "count": "calendar_scheduling_example_413"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nschedules = {\n    \"Evelyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), work_end)],\n    \"Janice\": [],\n    \"Marilyn\": [],\n    \"Margaret\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)],\n    \"Lauren\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)],\n    \"Henry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)],\n}\n\n# Function to find available time slot\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    timeline = []\n    \n    # Create a blocked timeline\n    for person, blocks in schedules.items():\n        for start, end in blocks:\n            timeline.append((start, 'start'))\n            timeline.append((end, 'end'))\n    \n    # Sort the timetable\n    timeline.sort()\n\n    # Initialize the current end time of available slots\n    current_time = work_start\n\n    for time, action in timeline:\n        # Check if there's enough time before the next blocked start\n        if current_time + meeting_duration <= time:\n            return current_time, current_time + meeting_duration\n        \n        # Update the current time based on the action (blocking)\n        if action == 'start':\n            current_time = max(current_time, time)\n        elif action == 'end':\n            current_time = time\n\n    # Check if there's time at the end of the work hours\n    if current_time + meeting_duration <= work_end:\n        return current_time, current_time + meeting_duration\n    \n    return None\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\n\n# Output the result in the required format\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_414"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\n# Define participants' busy schedules\r\nbusy_times = {\r\n    \"Paul\": [(10, 30, 11, 0), (15, 0, 15, 30)],\r\n    \"Kyle\": [(10, 30, 11, 0), (15, 30, 16, 0)],\r\n    \"Christian\": [(9, 0, 10, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0), (16, 30, 17, 0)],\r\n    \"Alice\": [(9, 0, 9, 30), (12, 0, 12, 30), (14, 0, 15, 0), (15, 30, 16, 30)],\r\n    \"Kelly\": [(10, 30, 15, 0), (15, 30, 16, 0)],\r\n    \"Brian\": [(9, 0, 9, 30), (10, 30, 11, 30), (12, 30, 14, 30), (15, 0, 16, 0), (16, 30, 17, 0)],\r\n    \"James\": [(10, 30, 11, 30), (12, 0, 13, 30), (14, 0, 15, 0), (15, 30, 17, 0)]\r\n}\r\n\r\n# Duration of the meeting\r\nmeeting_duration = 30  # minutes\r\n\r\n# Convert time into minutes from the start of the day\r\ndef convert_to_minutes(hour, minute):\r\n    return hour * 60 + minute\r\n\r\n# Check if a time slot is available\r\ndef is_available(start, end):\r\n    for busy in busy_times.values():\r\n        for (b_start_h, b_start_m, b_end_h, b_end_m) in busy:\r\n            b_start = convert_to_minutes(b_start_h, b_start_m)\r\n            b_end = convert_to_minutes(b_end_h, b_end_m)\r\n            if not (end <= b_start or start >= b_end):  # Overlap check\r\n                return False\r\n    return True\r\n\r\n# Find a suitable time slot within working hours\r\ndef find_meeting_time():\r\n    work_start = convert_to_minutes(9, 0)  # 9:00 AM\r\n    work_end = convert_to_minutes(17, 0)    # 5:00 PM\r\n    for start in range(work_start, work_end - meeting_duration + 1):  # valid start time\r\n        end = start + meeting_duration\r\n        if is_available(start, end):\r\n            start_hour = start // 60\r\n            start_minute = start % 60\r\n            end_hour = end // 60\r\n            end_minute = end % 60\r\n            return f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\r\n    return \"No available time slot.\"\r\n\r\n# Schedule the meeting\r\nproposed_time = find_meeting_time()\r\nprint(proposed_time)\r\n```",
            "count": "calendar_scheduling_example_415"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Jack\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Frank\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \n    \"Theresa\": [],\n    \n    \"Ronald\": [],\n\n    \"Alexander\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Peter\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Anthony\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable time\ndef find_meeting_time():\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if all participants are free\n        all_free = True\n        for p, busy_times in schedules.items():\n            for start, end in busy_times:\n                if start <= current_time < end or start < current_time + meeting_duration <= end:\n                    all_free = False\n                    break\n            if not all_free:\n                break\n\n        if all_free:\n            # Check Ronald's preference\n            if current_time >= datetime.strptime(\"11:00\", \"%H:%M\"):\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Increase in increments of 30 minutes\n\n# Find and print the suitable time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_416"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\n# Define the working hours and the meeting duration\nworking_start = 9 * 60  # 9:00 AM in minutes\nworking_end = 17 * 60    # 5:00 PM in minutes\nmeeting_duration = 30     # meeting duration in minutes\n\n# Define the participants' schedules\nschedules = {\n    \"Anthony\": [],\n    \"Teresa\": [],\n    \"Vincent\": [(10 * 60, 10 * 60 + 30), (11 * 60 + 30, 12 * 60), (13 * 60 + 30, 14 * 60), (16 * 60, 17 * 60)],\n    \"Kevin\": [(9 * 60, 9 * 60 + 30), (10 * 60 + 30, 11 * 60), (11 * 60 + 30, 12 * 60), (12 * 60 + 30, 13 * 60), (16 * 60, 16 * 60 + 30)],\n    \"Julie\": [(9 * 60, 9 * 60 + 30), (10 * 60, 11 * 60 + 30), (12 * 60, 12 * 60 + 30), (13 * 60, 14 * 60), (15 * 60, 16 * 60 + 30)],\n    \"Tyler\": [(9 * 60 + 30, 10 * 60), (10 * 60 + 30, 12 * 60), (12 * 60 + 30, 13 * 60), (13 * 60 + 30, 14 * 60), (14 * 60 + 30, 15 * 60), (16 * 60, 16 * 60 + 30)],\n    \"Bryan\": [(9 * 60, 12 * 60 + 30), (13 * 60, 14 * 60), (14 * 60 + 30, 17 * 60)],\n}\n\n# Create a function to check if a time slot is free for all participants\ndef is_time_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Search for a suitable time slot\nfor start in range(working_start, working_end - meeting_duration + 1):\n    end = start + meeting_duration\n    if is_time_free(start, end):\n        # Convert minutes back into HH:MM format\n        start_hour = start // 60\n        start_minute = start % 60\n        end_hour = end // 60\n        end_minute = end % 60\n        print(f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\")\n        break\n```",
            "count": "calendar_scheduling_example_417"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules\nbusy_slots = {\n    \"Dylan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Janice\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Willie\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Donna\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Peter\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Raymond\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a free slot\ndef find_free_slot(work_start, work_end, busy_slots):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        free_slot = True\n        for participant, times in busy_slots.items():\n            for start, end in times:\n                if current_time < end and current_time + meeting_duration > start:\n                    free_slot = False\n                    break\n            if not free_slot:\n                break\n        if free_slot:\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n    return None\n\n# Find an appropriate time slot for the meeting\nresult = find_free_slot(work_start, work_end, busy_slots)\nif result:\n    print(f\"Proposed meeting time: {result[0]} to {result[1]}\")\nelse:\n    print(\"No available time slot found.\")\n\n# Output format\nif result:\n    print(f'{result[0]}:{result[1]}')\n```\n",
            "count": "calendar_scheduling_example_418"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\n# Define the busy times for each participant\nbusy_times = {\n    \"Shirley\": [],\n    \"Mary\": [(datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Doris\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Daniel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Madison\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Albert\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Stephanie\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n}\n\ndef find_time_slot(duration_minutes):\n    duration = timedelta(minutes=duration_minutes)\n    start_time = working_hours[0]\n    end_time = working_hours[1]\n\n    # Create the busy intervals for all participants\n    busy_intervals = []\n    for times in busy_times.values():\n        busy_intervals.extend(times)\n\n    # Sort the busy intervals\n    busy_intervals.sort()\n\n    # Find available slots\n    current_time = start_time\n    for start, end in busy_intervals:\n        # If there's room before the next busy interval\n        if current_time + duration <= start:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + duration).strftime(\"%H:%M\")\n        # Move current time forward if it's busy\n        current_time = max(current_time, end)\n    \n    # Check for available time after the last busy interval until working hours end\n    if current_time + duration <= end_time:\n        return current_time.strftime(\"%H:%M\") + \":\" + (current_time + duration).strftime(\"%H:%M\")\n\n# Schedule a 30-minute meeting\nmeeting_time = find_time_slot(30)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_419"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of free time slots\n    free_slots = []\n    \n    current_time = work_start\n    \n    while current_time < work_end:\n        end_time = current_time + timedelta(minutes=meeting_duration)\n        if end_time > work_end:\n            break\n        \n        if all(not (current_time < busy_end and end_time > busy_start) for busy_start, busy_end in participants_schedule):\n            free_slots.append((current_time, end_time))\n        \n        current_time += timedelta(minutes=1)  # Check next minute\n\n    # Return the first available slot in desired format\n    if free_slots:\n        start_time, end_time = free_slots[0]\n        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    return None\n\n# Participants' busy schedules\nparticipants_schedule = [\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Larry\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Elijah\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Elijah\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Elijah\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Elijah\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Walter\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Walter\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Walter\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Walter\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Keith\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Ethan\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Ethan\n]\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time(participants_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_420"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' busy times\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Busy schedules (start_time, end_time) tuples\nbusy_schedules = {\n    \"William\": [],\n    \"Julia\": [(\"10:00\", \"10:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"14:00\"), (\"15:30\", \"16:30\")],\n    \"Katherine\": [],\n    \"Diana\": [],\n    \"Philip\": [(\"10:00\", \"11:00\"), (\"12:30\", \"13:30\"), (\"15:00\", \"17:00\")],\n    \"Ashley\": [(\"09:00\", \"11:30\"), (\"12:00\", \"14:00\"), (\"14:30\", \"15:30\"), (\"16:00\", \"16:30\")],\n    \"Mark\": [(\"09:30\", \"11:30\"), (\"12:30\", \"14:30\"), (\"15:00\", \"16:00\")]\n}\n\n# Convert busy schedules into datetime objects\ndef get_busy_times(busy_schedules):\n    busy_times = []\n    for times in busy_schedules.values():\n        for start, end in times:\n            busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return busy_times\n\n# Check for available meeting time\ndef find_meeting_slot(busy_times):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is free for the duration of the meeting\n        if not any(start < current_time + meeting_duration and end > current_time for start, end in busy_times):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n    return None\n\n# Collect all busy times\nbusy_times = get_busy_times(busy_schedules)\n# Find a suitable meeting slot\nmeeting_slot = find_meeting_slot(busy_times)\n\nprint(meeting_slot)\n```",
            "count": "calendar_scheduling_example_421"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and the participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\nschedules = {\n    \"Julie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \n    \"Ann\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \n    \"Kenneth\": [],\n    \n    \"Austin\": [],\n    \n    \"Edward\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Christine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Carol\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available time slot\ndef find_meeting_time(schedules, meeting_duration):\n    all_busy_times = []\n\n    # Collect all busy times from all participants\n    for participant_times in schedules.values():\n        all_busy_times.extend(participant_times)\n\n    # Sort all busy times\n    all_busy_times.sort(key=lambda x: x[0])\n    \n    current_start = working_hours_start\n\n    # Check against busy times\n    for busy_start, busy_end in all_busy_times:\n        if current_start + meeting_duration <= busy_start:\n            return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n        current_start = max(current_start, busy_end)\n\n    # Check the last time slot after the last busy schedule till working hours end\n    if current_start + meeting_duration <= working_hours_end:\n        return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Finding suitable meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_422"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedule, meeting_duration, work_hours):\n    start_time = datetime.strptime(work_hours[0], \"%H:%M\")\n    end_time = datetime.strptime(work_hours[1], \"%H:%M\")\n    \n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        if all(not (current_time < end and current_time + meeting_duration > start) \n               for busy_times in schedule.values() for start, end in busy_times):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # check every 30 minutes\n    return None\n\n# Existing schedules\nschedules = {\n    \"Frank\": [(\"11:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"14:30\")],\n    \"Julie\": [(\"9:30\", \"10:00\"), (\"11:00\", \"11:30\"), (\"12:30\", \"13:00\"), (\"16:30\", \"17:00\")],\n    \"Donna\": [],\n    \"Ronald\": [],\n    \"Peter\": [(\"9:30\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:00\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"Nancy\": [(\"10:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"16:00\")],\n    \"Scott\": [(\"9:30\", \"11:30\"), (\"12:30\", \"13:30\"), (\"15:00\", \"16:00\")]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours = [\"09:00\", \"17:00\"]\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_hours)\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_423"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create a list of participants and their busy schedules (blocked time)\nschedules = {\n    \"Julie\": [],\n    \"Marilyn\": [(\"09:30\", \"10:00\"), (\"15:00\", \"15:30\")],\n    \"Olivia\": [],\n    \"Emily\": [(\"12:30\", \"13:30\")],\n    \"Bruce\": [(\"09:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Jeffrey\": [(\"09:00\", \"14:30\"), (\"15:00\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Kyle\": [(\"09:00\", \"10:00\"), (\"11:00\", \"12:30\"), (\"13:30\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\n# Convert busy times to datetime objects\nbusy_times = {}\nfor participant, times in schedules.items():\n    busy_times[participant] = []\n    for start, end in times:\n        busy_times[participant].append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time):\n    for participant, times in busy_times.items():\n        for busy_start, busy_end in times:\n            if start_time < busy_end and end_time > busy_start:  # Overlap condition\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_424"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=30)\n\n# Define the schedules of the participants\nschedules = {\n    'Judy': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    'Alice': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    'Christina': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    'Barbara': [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Sharon': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Edward': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Sarah': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    # Create a list of all busy times\n    busy_times = []\n    for participant in schedules.values():\n        busy_times.extend(participant)\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Initialize the free time slots\n    free_times = []\n    current_time = work_start\n\n    for start, end in busy_times:\n        if current_time + meeting_duration <= start and current_time < work_end:\n            free_times.append((current_time, start))\n        current_time = max(current_time, end)\n\n    if current_time + meeting_duration <= work_end:\n        free_times.append((current_time, work_end))\n\n    # Find the first suitable time for the meeting\n    for start, end in free_times:\n        if (end - start) >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n\n# Run the function to find the meeting time\nmeeting_time = find_meeting_time(schedules, WORK_START, WORK_END, MEETING_DURATION)\nprint(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```",
            "count": "calendar_scheduling_example_425"
        },
        {
            "final_program_time": "{9:30:9:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define the busy schedules of participants as tuples of time ranges\n    schedules = {\n        'Donna': [(10, 30), (11, 0), (13, 0), (14, 30)],\n        'Albert': [(10, 30), (11, 0), (13, 30), (16, 0)],\n        'Jeremy': [],\n        'Grace': [(13, 0), (16, 30)],\n        'Matthew': [(10, 30), (11, 0), (12, 0), (15, 30)],\n        'Jean': [(11, 0), (14, 30), (16, 30)],\n        'Dylan': [(9, 0), (10, 30), (11, 30), (12, 30), (13, 30), (15, 0), (16, 0)]\n    }\n\n    # Define the working hours and meeting length\n    start_hour = 9\n    end_hour = 17\n    meeting_duration = 0.5  # in hours\n\n    # Create a list of all the time slots\n    time_slots = []\n    for hour in range(start_hour, end_hour):\n        time_slots.append((hour, 0))\n        time_slots.append((hour, 30))\n\n    # Check each time slot to find a suitable one\n    for start in time_slots:\n        end = (start[0] + (30 // 60), (start[1] + 30) % 60)  # Calculate end time\n        if end[1] == 0:  # If minutes roll over to the next hour\n            end = (end[0], 0)\n            end_hour = end[0]\n            if end_hour >= 17:  # If end hour exceeds working hours\n                continue\n        \n        # Check if current slot conflicts with any participant's busy schedules\n        conflicts = False\n        for participant, busy_times in schedules.items():\n            for busy_start in busy_times:\n                busy_end = (busy_start[0] + (30 // 60), (busy_start[1] + 30) % 60)  # example duration of 30 mins\n                if (start < busy_end and end > busy_start):\n                    conflicts = True\n                    break\n            if conflicts:\n                break\n        \n        # If there's no conflict, return the time in required format\n        if not conflicts:\n            return f\"{start[0]:02}:{start[1]:02}:{end[0]:02}:{end[1]:02}\"\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_426"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules (busy times)\nschedules = {\n    'Nancy': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Gloria': [],\n    'Harold': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Katherine': [],\n    'Tyler': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Larry': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Mark': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('10:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\ndef is_time_slot_available(start, end, schedules):\n    for busy_slots in schedules.values():\n        for busy_start, busy_end in busy_slots:\n            if start < busy_end and end > busy_start:  # Overlap check\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_slot_available(current_time, current_time + meeting_duration, schedules):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_427"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration (30 minutes)\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy schedules\nbusy_times = {\n    \"Amber\": [(\"10:00\", \"10:30\"), (\"11:30\", \"12:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Charles\": [(\"09:30\", \"10:00\"), (\"11:30\", \"12:30\"), (\"13:30\", \"15:00\")],\n    \"Edward\": [(\"11:30\", \"12:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"Richard\": [(\"09:00\", \"09:30\"), (\"11:00\", \"12:30\"), (\"14:00\", \"14:30\"), (\"15:00\", \"16:30\")],\n    \"Katherine\": [(\"09:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"16:00\", \"16:30\")],\n    \"Russell\": [(\"09:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\n# Convert time strings to datetime objects\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Generate all busy time ranges\nbusy_ranges = []\nfor times in busy_times.values():\n    for start, end in times:\n        busy_ranges.append((time_to_datetime(start), time_to_datetime(end)))\n\n# Sort busy ranges by start time\nbusy_ranges.sort()\n\n# Define work hours\nwork_start = time_to_datetime(\"09:00\")\nwork_end = time_to_datetime(\"17:00\")\n\n# Find a suitable meeting time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    # Check if the current time is free\n    meeting_start = current_time\n    meeting_end = current_time + meeting_duration\n    is_free = True\n\n    for start, end in busy_ranges:\n        if meeting_start < end and meeting_end > start:\n            is_free = False\n            break\n    \n    if is_free:\n        # Found a free slot\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    \n    current_time += timedelta(minutes=30)  # Try the next half-hour slot\n```",
            "count": "calendar_scheduling_example_428"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nbusy_times = {\n    \"Judy\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Olivia\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Jacqueline\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Laura\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tyler\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Lisa\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Work hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free\ndef is_free(start, end):\n    for busy in busy_times.values():\n        for busy_start, busy_end in busy:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a free time slot\ndef find_meeting_time():\n    current_time = start_of_day\n    while current_time + meeting_duration <= end_of_day:\n        if is_free(current_time, current_time + meeting_duration):\n            return current_time, current_time + meeting_duration\n        current_time += timedelta(minutes=1)  # Check each minute\n    return None\n\n# Get proposed meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    proposed_start, proposed_end = meeting_time\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_429"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule constraints\nschedules = {\n    \"Jessica\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)), \n                (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Elijah\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)), \n               (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 14, 30)), \n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    \"Ann\": [(datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 11, 30)), \n            (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Marie\": [],\n    \"Kathryn\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)), \n                (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)), \n                (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 30)), \n                (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 30))],\n    \"Albert\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 0)), \n               (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 30)), \n               (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 17, 0))],\n    \"Nicole\": [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 11, 0)), \n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)), \n               (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 15, 0)), \n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 17, 0))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\nwork_start_time = datetime(2023, 10, 2, 9, 0)\nwork_end_time = datetime(2023, 10, 2, 17, 0)\n\n# Function to check if a time slot is free for all participants\ndef is_free_for_all(start, end):\n    for participant, busy_slots in schedules.items():\n        for busy_start, busy_end in busy_slots:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = work_start_time\nwhile current_time + meeting_duration <= work_end_time:\n    if is_free_for_all(current_time, current_time + meeting_duration):\n        start_time = current_time.strftime(\"%H:%M\")\n        end_time = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{{{start_time}:{end_time}}}\")\n        break\n    current_time += timedelta(minutes=30)  # Check next half hour\n```",
            "count": "calendar_scheduling_example_430"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting():\n    # Define participants' free and busy times\n    busy_times = {\n        \"Dylan\": [],\n        \"William\": [],\n        \"Douglas\": [],\n        \"Kimberly\": [],\n        \"Emma\": [\n            (9.5, 10.5), (11, 12), (12.5, 13), (14, 16), (16.5, 17)\n        ],\n        \"Alan\": [\n            (9.5, 10.5), (11, 17)\n        ],\n        \"Philip\": [\n            (9.5, 10.5), (11, 12.5), (13, 13.5), (14.5, 15), (16, 16.5)\n        ],\n    }\n    \n    # Meeting duration\n    meeting_duration = 0.5  # 30 minutes\n    \n    # Work hours\n    work_start = 9.0\n    work_end = 17.0\n    \n    # Define the free time slots for each participant\n    free_times = {}\n    \n    for participant, busy in busy_times.items():\n        free_times[participant] = []\n        # Assume the entire work hours to start\n        current_start = work_start\n        for start, end in sorted(busy):\n            if current_start < start:\n                free_times[participant].append((current_start, start))\n            current_start = max(current_start, end)\n        if current_start < work_end:\n            free_times[participant].append((current_start, work_end))\n\n    # Identify common free time slots\n    common_free_times = free_times[\"Dylan\"]  # Starting from Dylan's full availability\n    for participant in free_times:\n        if participant == \"Dylan\": \n            continue\n        current_availability = []\n        for start, end in common_free_times:\n            for free_start, free_end in free_times[participant]:\n                if free_start < end and start < free_end:  # There is an overlap\n                    current_availability.append((max(start, free_start), min(end, free_end)))\n        common_free_times = current_availability\n    \n    # Find a time slot that meets the meeting duration requirement\n    for start, end in common_free_times:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = meeting_start + meeting_duration\n            return f\"{int(meeting_start)}:{int((meeting_start % 1) * 60):02d}:{int(meeting_end)}:{int((meeting_end % 1) * 60):02d}\"\n\n# Call the function and print the result for the proposed meeting time\nprint(schedule_meeting())\n```",
            "count": "calendar_scheduling_example_431"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules defined as tuples of (start_time, end_time) in HH:MM format\nschedules = {\n    \"Grace\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Nicholas\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Ann\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Jacob\": [],\n    \"Joe\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Stephanie\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tyler\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\ndef find_available_time(schedules, duration_minutes=30, work_start=\"09:00\", work_end=\"17:00\"):\n    work_start = datetime.strptime(work_start, \"%H:%M\")\n    work_end = datetime.strptime(work_end, \"%H:%M\")\n    \n    # Create a list of busy times\n    busy_times = []\n    for participant, meetings in schedules.items():\n        for start, end in meetings:\n            busy_times.append((start, end))\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Merge overlapping busy times\n    merged_busy_times = []\n    current_start, current_end = busy_times[0]\n    \n    for start, end in busy_times[1:]:\n        if start <= current_end:\n            current_end = max(current_end, end)\n        else:\n            merged_busy_times.append((current_start, current_end))\n            current_start, current_end = start, end\n    \n    # Add the last busy time\n    merged_busy_times.append((current_start, current_end))\n    \n    # Find free slots\n    free_times = []\n    last_end = work_start\n    \n    for start, end in merged_busy_times:\n        if last_end < start:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    # Add time after last busy period until work end\n    if last_end < work_end:\n        free_times.append((last_end, work_end))\n    \n    # Find a time slot that fits the duration\n    for start, end in free_times:\n        if (end - start) >= timedelta(minutes=duration_minutes):\n            proposed_start = start\n            proposed_end = proposed_start + timedelta(minutes=duration_minutes)\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n# Calling the function to get the proposed time\nproposed_time = find_available_time(schedules)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_432"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participant schedules (busy times)\nschedules = {\n    \"Diane\": [],\n    \"Terry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jessica\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Peter\": [],\n    \"Gary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Gabriel\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Amanda\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to check if the time range is free for all participants\ndef is_time_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find free slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_free(current_time, current_time + meeting_duration):\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Increment by 30 minutes\n```",
            "count": "calendar_scheduling_example_433"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants and their busy schedules\nschedules = {\n    'Kayla': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Karen': [],\n    'Henry': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Randy': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Stephanie': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Tyler': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Joe': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n            (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n            (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n            (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Find available time slot\ndef find_meeting_time():\n    # Collect all busy times from all participants\n    busy_times = []\n    for participant, times in schedules.items():\n        busy_times.extend(times)\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Initialize checking time\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is free\n        is_free = True\n        for start, end in busy_times:\n            if start < current_time + meeting_duration and current_time < end:\n                is_free = False\n                break\n        if is_free:\n            return (current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M'))\n        current_time += timedelta(minutes=1)  # increment time by 1 minute\n        \n    return None\n\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time found.\")\n```\n",
            "count": "calendar_scheduling_example_434"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert time strings to datetime objects\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to find available meeting slot\ndef find_meeting_slot(participants, duration):\n    work_start = time_to_datetime(\"09:00\")\n    work_end = time_to_datetime(\"17:00\")\n    meeting_duration = timedelta(minutes=duration)\n\n    # Generate time slots for the whole workday\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        # Check if this time slot is available for all participants\n        if all(not (meeting_start < busy_end and meeting_end > busy_start) \n               for busy_times in participants.values() \n               for busy_start, busy_end in busy_times):\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n    return None  # Shouldn't happen as we assume there's always a solution\n\n# Participants' busy schedules\nparticipants = {\n    \"Lawrence\": [(time_to_datetime(\"10:00\"), time_to_datetime(\"10:30\")),\n                 (time_to_datetime(\"13:30\"), time_to_datetime(\"14:00\"))],\n    \"Shirley\": [],\n    \"Alexander\": [(time_to_datetime(\"09:30\"), time_to_datetime(\"10:00\")),\n                  (time_to_datetime(\"10:30\"), time_to_datetime(\"11:30\")),\n                  (time_to_datetime(\"12:30\"), time_to_datetime(\"13:00\"))],\n    \"Brian\": [(time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n              (time_to_datetime(\"13:30\"), time_to_datetime(\"14:00\"))],\n    \"Kathryn\": [(time_to_datetime(\"09:00\"), time_to_datetime(\"15:00\")),\n                (time_to_datetime(\"16:00\"), time_to_datetime(\"17:00\"))],\n    \"Aaron\": [(time_to_datetime(\"09:00\"), time_to_datetime(\"11:00\")),\n              (time_to_datetime(\"11:30\"), time_to_datetime(\"12:30\")),\n              (time_to_datetime(\"13:00\"), time_to_datetime(\"13:30\")),\n              (time_to_datetime(\"14:00\"), time_to_datetime(\"15:00\")),\n              (time_to_datetime(\"16:00\"), time_to_datetime(\"16:30\"))],\n    \"Janice\": [(time_to_datetime(\"09:00\"), time_to_datetime(\"11:30\")),\n               (time_to_datetime(\"12:00\"), time_to_datetime(\"12:30\")),\n               (time_to_datetime(\"13:00\"), time_to_datetime(\"15:00\")),\n               (time_to_datetime(\"15:30\"), time_to_datetime(\"16:00\")),\n               (time_to_datetime(\"16:30\"), time_to_datetime(\"17:00\"))]\n}\n\n# Duration of the meeting\nmeeting_duration = 30\n\n# Find and print the meeting time\nmeeting_time = find_meeting_slot(participants, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_435"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\n# Define participants' schedules\nschedules = {\n    \"Patrick\": [(13, 30), (14, 0), (14, 30), (15, 0)],\n    \"Shirley\": [(9, 0), (9, 30), (11, 0), (11, 30), (12, 0), (12, 30), (14, 30), (15, 0), (16, 0), (17, 0)],\n    \"Jeffrey\": [(9, 0), (9, 30), (10, 30), (11, 0), (11, 30), (12, 0), (13, 0), (13, 30), (16, 0), (17, 0)],\n    \"Gloria\": [(11, 30), (12, 0), (15, 0), (15, 30)],\n    \"Nathan\": [(9, 0), (9, 30), (10, 30), (12, 0), (14, 0), (17, 0)],\n    \"Angela\": [(9, 0), (9, 30), (10, 0), (11, 0), (12, 30), (15, 0), (15, 30), (16, 30)],\n    \"David\": [(9, 0), (9, 30), (10, 0), (10, 30), (11, 0), (14, 0), (14, 30), (16, 30), (17, 0)]\n}\n\n# Function to check availability for 30 minutes\ndef is_available(start_hour, start_minute):\n    end_hour = start_hour + (start_minute + 30) // 60\n    end_minute = (start_minute + 30) % 60\n    for participant, busy_times in schedules.items():\n        for busy_start in busy_times:\n            busy_hour, busy_minute = busy_start\n            # Check if the busy time overlaps with the desired meeting time\n            if (start_hour < busy_hour or (start_hour == busy_hour and start_minute < busy_minute)) and \\\n               (end_hour > busy_hour or (end_hour == busy_hour and end_minute > busy_minute)):\n                return False\n    return True\n\n# Find a suitable time within work hours from 9:00 to 17:00\nfor hour in range(9, 17):\n    for minute in range(0, 60, 1):  # check every minute interval\n        if is_available(hour, minute):\n            print(f\"{hour:02}:{minute:02}:{hour:02}:{minute + 30:02}\")\n            break\n    else:\n        continue\n    break\n```",
            "count": "calendar_scheduling_example_436"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    \"Joshua\": [(None, None)],\n    \"Alice\": [(None, None)],\n    \"Gerald\": [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Paul\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Donald\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Richard\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Patrick\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if time is free for all participants\ndef is_time_free(start, end):\n    for busy_times in schedules.values():\n        if any(start < busy_end and end > busy_start for busy_start, busy_end in busy_times if busy_start and busy_end):\n            return False\n    return True\n\n# Define meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Search for a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_free(current_time, current_time + meeting_duration):\n        # Format the proposed time range\n        proposed_time = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        print(f\"Proposed meeting time: {proposed_time}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_437"
        },
        {
            "final_program_time": "{14:00:0:14}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    'George': [(datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 12, 0)),\n               (datetime(2023, 10, 23, 15, 0), datetime(2023, 10, 23, 15, 30)),\n               (datetime(2023, 10, 23, 16, 0), datetime(2023, 10, 23, 17, 0))],\n    'Jesse': [],\n    'Emma': [(datetime(2023, 10, 23, 9, 30), datetime(2023, 10, 23, 10, 0)),\n             (datetime(2023, 10, 23, 11, 0), datetime(2023, 10, 23, 11, 30)),\n             (datetime(2023, 10, 23, 12, 0), datetime(2023, 10, 23, 12, 30)),\n             (datetime(2023, 10, 23, 15, 0), datetime(2023, 10, 23, 15, 30)),\n             (datetime(2023, 10, 23, 16, 0), datetime(2023, 10, 23, 17, 0))],\n    'Christian': [],\n    'Ashley': [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 9, 30)),\n               (datetime(2023, 10, 23, 10, 0), datetime(2023, 10, 23, 12, 30)),\n               (datetime(2023, 10, 23, 14, 30), datetime(2023, 10, 23, 15, 30))],\n    'Jose': [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 11, 0)),\n             (datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 13, 30)),\n             (datetime(2023, 10, 23, 14, 30), datetime(2023, 10, 23, 16, 30))],\n    'Charles': [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 10, 0)),\n                (datetime(2023, 10, 23, 10, 30), datetime(2023, 10, 23, 11, 0)),\n                (datetime(2023, 10, 23, 12, 0), datetime(2023, 10, 23, 14, 0)),\n                (datetime(2023, 10, 23, 14, 30), datetime(2023, 10, 23, 15, 30)),\n                (datetime(2023, 10, 23, 16, 30), datetime(2023, 10, 23, 17, 0))]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\nworking_hours_start = datetime(2023, 10, 23, 9, 0)\nworking_hours_end = datetime(2023, 10, 23, 17, 0)\n\n# Function to find available time slot\ndef find_meeting_time(schedules, meeting_duration, start_time, end_time):\n    # Create a list of all busy times\n    busy_times = []\n    for participant, times in schedules.items():\n        busy_times.extend(times)\n\n    # Include working hours as busy slots\n    busy_times.append((start_time, start_time))  # Block start time\n    busy_times.append((end_time, end_time))      # Block end time\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Check for available time slots\n    free_start_time = start_time\n\n    for busy_start, busy_end in busy_times:\n        if free_start_time + meeting_duration <= busy_start:\n            return free_start_time.strftime(\"%H:%M:%S\") + \":\" + (free_start_time + meeting_duration).strftime(\"%H:%M:%S\")\n        free_start_time = max(free_start_time, busy_end)\n\n    # No available slot found\n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, working_hours_start, working_hours_end)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_438"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "'''python\nfrom datetime import datetime, timedelta\n\n# Work hours\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nschedules = {\n    'Jeffrey': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'))],\n    'Nancy': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Jordan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Samantha': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Jason': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Shirley': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Jessica': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    meeting_start = current_time\n    meeting_end = meeting_start + meeting_duration\n    if is_time_slot_free(meeting_start, meeting_end):\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n'''",
            "count": "calendar_scheduling_example_439"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Define participant schedules\nschedules = {\n    'Alan': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Kyle': [],\n    'Zachary': [],\n    'Heather': [],\n    'Joan': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Diane': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Julie': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find available time slots\ndef find_available_time_slot():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (any(start < end_time and current_time < end for start, end in schedules[participant])\n                    for participant in schedules)):\n            return current_time, end_time\n        current_time += timedelta(minutes=1)\n\navailable_start, available_end = find_available_time_slot()\nprint(f'{{\"{available_start.strftime(\"%H:%M\")}\":\"{available_end.strftime(\"%H:%M\")}\"}}')\n```",
            "count": "calendar_scheduling_example_440"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules\nschedules = {\n    'Joan': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Megan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Austin': [],\n    'Betty': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Judith': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Terry': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Kathryn': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\ndef can_schedule_meeting(start_time):\n    end_time = start_time + meeting_duration\n    for busy_times in schedules.values():\n        for (busy_start, busy_end) in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if can_schedule_meeting(current_time):\n            return current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M')\n        current_time += timedelta(minutes=30)  # Check every half hour\n    return None\n\nstart_time, end_time = find_meeting_time()\nprint(f'{{{start_time}:{end_time}}}')\n```",
            "count": "calendar_scheduling_example_441"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nschedules = {\n    'Christopher': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    'Karen': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \n    'Patricia': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \n    'Charlotte': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    'Roger': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    'Anna': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    'Dylan': [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Time slots for the meeting (work hours)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_available(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Find available slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_available(current_time, current_time + meeting_duration):\n        start_time_str = current_time.strftime(\"%H:%M\")\n        end_time_str = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{start_time_str}:{end_time_str}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_442"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedule, duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=duration)\n\n    # Create a list of all busy slots\n    busy_slots = []\n    for participant in schedule:\n        busy_slots.extend(schedule[participant])\n\n    # Sort busy slots by time\n    busy_slots.sort(key=lambda x: x[0])\n\n    # Check for free time slots\n    current_time = start_time\n    for start, end in busy_slots:\n        while current_time + meeting_duration <= start:\n            if current_time + meeting_duration <= end_time:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time += meeting_duration\n        current_time = max(current_time, end)\n\n    # Final check after the last busy slot\n    if current_time + meeting_duration <= end_time:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n# Define schedules for participants\nschedule = {\n    \"Jacob\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Frances\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Emily\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Mark\": [],\n    \"Linda\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Robert\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Raymond\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Check for a 30-minute meeting\nproposed_time = find_meeting_time(schedule, 30)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_443"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing meetings for each participant\nschedules = {\n    \"Abigail\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Roy\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Brian\": [],  # No meetings\n    \"Deborah\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Eric\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Susan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joyce\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Generate a list of unavailable times based on the schedules\nunavailable_times = []\nfor participant, times in schedules.items():\n    unavailable_times.extend(times)\n\n# Find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        # Check if the current meeting time overlaps with any existing meetings\n        if not any(start < meeting_end and current_time < end for start, end in unavailable_times):\n            return current_time\n        current_time += timedelta(minutes=1)\n    return None\n\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + meeting_duration).strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found\")\n```",
            "count": "calendar_scheduling_example_444"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time slots for each participant's busy hours\nschedules = {\n    \"Sophia\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Judith\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Linda\": [(datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ethan\": [],\n    \"Anna\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Marie\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Olivia\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Find open slots\ndef find_free_time(schedules, work_start, work_end, meeting_duration):\n    all_busy_times = []\n    \n    # Collect all busy times from all participants\n    for busy_times in schedules.values():\n        all_busy_times.extend(busy_times)\n    \n    all_busy_times.sort(key=lambda x: x[0])  # Sort by start time\n    \n    # Add silent time slots at the beginning and end of the day\n    open_slots = []\n    current_time = work_start\n\n    for start, end in all_busy_times:\n        if current_time < start:\n            open_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    if current_time < work_end:\n        open_slots.append((current_time, work_end))\n\n    # Find suitable time for the meeting\n    for start, end in open_slots:\n        if (end - start) >= meeting_duration:\n            return start, start + meeting_duration\n\nmeeting_start, meeting_end = find_free_time(schedules, work_start, work_end, meeting_duration)\n\nprint(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_445"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\n# Import necessary libraries\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\nparticipants_schedules = {\n    \"Megan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Christine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Gabriel\": [],\n    \"Sara\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Bruce\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kathryn\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Billy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n}\n\n# Function to find free time slots for all participants\ndef find_free_time_slots(participants_schedules, meeting_duration):\n    busy_times = []\n\n    # Create a combined list of busy times from all participants\n    for schedule in participants_schedules.values():\n        busy_times.extend(schedule)\n\n    free_slots = []\n    previous_end = work_start\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Determine free time slots\n    for start, end in busy_times:\n        if previous_end < start:\n            free_slots.append((previous_end, start))\n        previous_end = max(previous_end, end)\n\n    if previous_end < work_end:\n        free_slots.append((previous_end, work_end))\n\n    # Check for meeting duration in free slots\n    available_slots = []\n    for start, end in free_slots:\n        if (end - start) >= meeting_duration:\n            available_slots.append((start, start + meeting_duration))\n\n    return available_slots\n\n# Specify meeting duration (30 minutes)\nmeeting_duration = timedelta(minutes=30)\n\n# Get available time slots\navailable_slots = find_free_time_slots(participants_schedules, meeting_duration)\n\n# Output the first available time slot\nif available_slots:\n    start_time, end_time = available_slots[0]\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available slots.\")\n```",
            "count": "calendar_scheduling_example_446"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Joan\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Sean\": [\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    ],\n    \"Christian\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Jessica\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Virginia\": [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Harold\": [\n        (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_time_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):  # Overlapping\n                return False\n    return True\n\n# Search for a suitable time\ncurrent_time = start_of_day\nwhile current_time + meeting_duration <= end_of_day:\n    if is_time_free(current_time, current_time + meeting_duration):\n        print(f\"{{{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}}}\")\n        break\n    current_time += timedelta(minutes=5)  # Check next 5-minute slot\n```",
            "count": "calendar_scheduling_example_447"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\nschedules = {\n    \"Thomas\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kyle\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Helen\": [],\n    \"Anna\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Lauren\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Frances\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Maria\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is available\ndef is_time_available(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = start_of_day\n    while current_time + meeting_duration <= end_of_day:\n        if is_time_available(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=15)  # Check every 15 minutes\n    return \"No available time\"\n\n# Execute the function and print the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_448"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' schedules as busy time slots\nschedules = {\n    \"Walter\": [],\n    \"Frances\": [],\n    \"Martha\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:00\")],\n    \"Lori\": [],\n    \"Beverly\": [(\"09:00\", \"10:00\"), (\"10:30\", \"11:00\"), (\"12:30\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Christine\": [(\"09:00\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:00\", \"14:00\"), (\"14:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Catherine\": [(\"09:00\", \"10:30\"), (\"11:30\", \"12:00\"), (\"13:00\", \"14:00\"), (\"15:00\", \"17:00\")]\n}\n\n# Convert busy times to datetime objects\ndef convert_schedule_to_times(busy_slots):\n    busy_times = []\n    for start, end in busy_slots:\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return busy_times\n\n# Build the overall busy schedule\noverall_busy_times = []\nfor participant in schedules:\n    busy_times = convert_schedule_to_times(schedules[participant])\n    overall_busy_times.extend(busy_times)\n\n# Sort busy times\noverall_busy_times.sort()\n\n# Find a suitable meeting time\ndef find_meeting_time(start, end, duration):\n    current_time = start\n    while current_time + duration <= end:\n        meeting_possible = True\n        for busy_start, busy_end in overall_busy_times:\n            if busy_start < current_time + duration and current_time < busy_end:\n                meeting_possible = False\n                break\n        if meeting_possible:\n            return current_time\n        current_time += timedelta(minutes=1)  # Check the next minute\n    return None\n\n# Check for a suitable time in the work hours\nmeeting_time = find_meeting_time(work_start, work_end, meeting_duration)\n\nif meeting_time:\n    meeting_start = meeting_time.strftime(\"%H:%M\")\n    meeting_end = (meeting_time + meeting_duration).strftime(\"%H:%M\")\n    print(f'{meeting_start}:{meeting_end}')\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_449"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(schedules, meeting_duration):\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    \n    # Convert schedules to minute-blocked ranges\n    blocked_ranges = []\n    for participant in schedules:\n        for block in schedules[participant]:\n            start = block[0] * 60 + block[1]  # converting to minutes\n            end = block[2] * 60 + block[3]    # converting to minutes\n            blocked_ranges.append((start, end))\n    \n    # Sort and merge blocked time ranges\n    blocked_ranges.sort()\n    merged_ranges = []\n    \n    for start, end in blocked_ranges:\n        if not merged_ranges or merged_ranges[-1][1] < start:\n            merged_ranges.append((start, end))\n        else:\n            merged_ranges[-1] = (merged_ranges[-1][0], max(merged_ranges[-1][1], end))\n    \n    # Find a suitable time slot for the meeting\n    potential_start = work_start\n    \n    for start, end in merged_ranges:\n        # Check for available time before the next blocked range\n        if potential_start + meeting_duration <= start:\n            return (potential_start // 60, potential_start % 60, \n                    (potential_start + meeting_duration) // 60, \n                    (potential_start + meeting_duration) % 60)\n        # Move the potential start to the end of the current blocked range\n        potential_start = max(potential_start, end)\n    \n    # Check at the end of the work hours if there is space\n    if potential_start + meeting_duration <= work_end:\n        return (potential_start // 60, potential_start % 60, \n                (potential_start + meeting_duration) // 60, \n                (potential_start + meeting_duration) % 60)\n\nschedules = {\n    \"Jonathan\": [(9, 30, 10, 0), (12, 30, 13, 30), (14, 30, 15, 0)],\n    \"Janice\": [(9, 0, 9, 30), (11, 30, 12, 0), (12, 30, 13, 30), (14, 30, 15, 0), (16, 0, 16, 30)],\n    \"Walter\": [(9, 30, 10, 0), (11, 30, 12, 0)],\n    \"Mary\": [(12, 0, 12, 30), (13, 30, 14, 0)],\n    \"Roger\": [(9, 30, 10, 30), (11, 0, 12, 30), (13, 0, 13, 30), (14, 0, 15, 30), (16, 0, 16, 30)],\n    \"Tyler\": [(9, 30, 11, 0), (11, 30, 12, 30), (13, 30, 14, 0), (15, 0, 16, 0)],\n    \"Arthur\": [(10, 0, 11, 30), (12, 30, 13, 0), (13, 30, 14, 0), (14, 30, 16, 0)]\n}\n\nmeeting_duration = 30  # in minutes\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nprint(f\"{meeting_time[0]:02}:{meeting_time[1]:02}:{meeting_time[2]:02}:{meeting_time[3]:02}\")\n```",
            "count": "calendar_scheduling_example_450"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Judy\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Jack\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ronald\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Sandra\": [],\n    \"Ashley\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Heather\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Terry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Proposed meeting time duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# 13:30 is the earliest preferred time for Sandra\nsandra_pref_start = datetime.strptime(\"13:30\", \"%H:%M\")\n\n# Find a suitable time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end, sandra_pref_start):\n    # Initialize an array of free slots\n    free_slots = []\n\n    # Create a list of busy slots for all participants\n    busy_slots = []\n    for participant, slots in schedules.items():\n        busy_slots.extend(slots)\n\n    # Sort busy slots\n    busy_slots.sort(key=lambda x: x[0])\n\n    # Check for free slots in working hours\n    last_end = work_start\n    for start, end in busy_slots:\n        if last_end < start:  # There is a gap\n            free_slots.append((last_end, start))\n        last_end = end\n\n    # After the last busy slot, check if there's time till work end\n    if last_end < work_end:\n        free_slots.append((last_end, work_end))\n\n    # Check for valid free slots considering Sandra's preference\n    for start, end in free_slots:\n        if start >= sandra_pref_start and end - start >= meeting_duration:\n            # Return the first valid meeting time found\n            return start, start + meeting_duration\n\n# Get proposed time\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end, sandra_pref_start)\n\n# Output the meeting time in required format\nif meeting_time:\n    print(f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_451"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Austin\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Andrew\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Raymond\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Mary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Bobby\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Shirley\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Jordan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find available time\ndef get_available_time(schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Generate a list of busy time intervals\n    busy_times = []\n    for times in schedules.values():\n        for start, end in times:\n            busy_times.append((start, end))\n    \n    # Sort and merge the busy times\n    busy_times.sort()\n    merged_busy_times = []\n    for start, end in busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\n            merged_busy_times.append((start, end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n    # Check for available slots\n    last_end = work_start\n    for start, end in merged_busy_times:\n        if last_end + meeting_duration <= start:\n            return last_end.time(), (last_end + meeting_duration).time()\n        last_end = max(last_end, end)\n\n    # Check after the last busy time\n    if last_end + meeting_duration <= work_end:\n        return last_end.time(), (last_end + meeting_duration).time()\n    \n    return None\n\n# Get available time for all participants\navailable_time = get_available_time(schedules, meeting_duration)\nif available_time:\n    start_time, end_time = available_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_452"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Natalie\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    \"Dylan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Pamela\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Charlotte\": [],\n    \"Ann\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jason\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Benjamin\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_time_available(start, duration):\n    end_time = start + duration\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\ndef find_meeting_time():\n    curr_time = work_start\n    while curr_time + meeting_duration <= work_end:\n        if is_time_available(curr_time, meeting_duration):\n            return f\"{curr_time.strftime('%H:%M')}:{(curr_time + meeting_duration).strftime('%H:%M')}\"\n        curr_time += timedelta(minutes=30)  # Increment by 30 minutes\n    return None\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_453"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy slots for each participant\nparticipants = {\n    'Sara': [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30))],\n    'Ethan': [\n        (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 11, 30)),\n        (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n        (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 15, 0)),\n        (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0))\n    ],\n    'Stephanie': [],\n    'Hannah': [\n        (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 30)),\n        (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n        (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))\n    ],\n    'Kevin': [\n        (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 15, 0)),\n        (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n        (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))\n    ],\n    'Susan': [\n        (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n        (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 13, 30)),\n        (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 16, 0)),\n        (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))\n    ],\n    'Bryan': [\n        (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n        (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n        (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 0)),\n        (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 15, 30)),\n        (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nstart_time = datetime(2023, 10, 2, 9, 0)\nend_time = datetime(2023, 10, 2, 17, 0)\n\n# Create the list of busy time slots\nbusy_slots = []\nfor busy_times in participants.values():\n    busy_slots.extend(busy_times)\n\n# Sort busy slots\nbusy_slots.sort()\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        # Assume current time is valid unless found busy\n        valid_time = True\n        \n        for start, end in busy_slots:\n            if current_time < end and (current_time + meeting_duration) > start:\n                valid_time = False\n                break\n        \n        if valid_time:\n            return current_time\n        \n        current_time += timedelta(minutes=1)\n\n# Find meeting time\nmeeting_time = find_meeting_time()\n\n# Output in required format\nif meeting_time:\n    start_meeting = meeting_time.strftime(\"%H:%M\")\n    end_meeting = (meeting_time + meeting_duration).strftime(\"%H:%M\")\n    print(f'{{{start_meeting}:{end_meeting}}}')\n```",
            "count": "calendar_scheduling_example_454"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedule for each participant\nschedules = {\n    \"Ryan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Jerry\": [],\n    \"Raymond\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Eugene\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Justin\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Gerald\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Eric\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to find a common available time slot\ndef find_available_time(duration_minutes):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    duration = timedelta(minutes=duration_minutes)\n    \n    # Check each half hour interval in the work hours\n    for hour in range(9, 17):\n        for minute in [0, 30]:\n            proposed_start = datetime(year=work_start.year, month=work_start.month, day=work_start.day, hour=hour, minute=minute)\n            proposed_end = proposed_start + duration\n            \n            if proposed_end > work_end:\n                continue\n            \n            # Check if the proposed time is available for all participants\n            is_conflict = False\n            for busy_times in schedules.values():\n                for busy_start, busy_end in busy_times:\n                    if (proposed_start < busy_end and proposed_end > busy_start):\n                        is_conflict = True\n                        break\n                if is_conflict:\n                    break\n            \n            if not is_conflict:\n                return proposed_start.strftime(\"%H:%M\"), proposed_end.strftime(\"%H:%M\")\n\n# Find a suitable meeting time for 30 minutes\nmeeting_start, meeting_end = find_available_time(30)\nprint(f\"{meeting_start}:{meeting_end}\")\n```",
            "count": "calendar_scheduling_example_455"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define schedules for each participant\nschedules = {\n    \"Margaret\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    \"Justin\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'))],\n    \"Noah\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    \"Madison\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    \"Carl\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n             (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Denise\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Mason\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    # Generate all free time slots from work_start to work_end\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        available = True\n        \n        # Check against each participant's schedule\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if current_time < end and meeting_end > start:\n                    available = False\n                    break\n            if not available:\n                break\n        \n        if available:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n\n# Execute the function\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_456"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and meeting duration\nschedules = {\n    \"Andrea\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n                (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 30))],\n    \"Ruth\": [(datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n             (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30))],\n    \"Steven\": [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n               (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 11, 30)),\n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    \"Grace\": [],\n    \"Kyle\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n             (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 12, 0)),\n             (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n             (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 15, 0)),\n             (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n             (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Elijah\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 0)),\n               (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 13, 0)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n               (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Lori\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n             (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 11, 30)),\n             (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 13, 30)),\n             (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 16, 0)),\n             (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules, meeting_duration):\n    # Create a list of all blocked time periods\n    blocked_times = []\n    for busy_slots in schedules.values():\n        for start, end in busy_slots:\n            blocked_times.append((start, end))\n    \n    # Sort the blocked times\n    blocked_times.sort()\n    \n    # Merge overlapping time slots\n    merged_blocked_times = []\n    for start, end in blocked_times:\n        if not merged_blocked_times or merged_blocked_times[-1][1] < start:\n            merged_blocked_times.append((start, end))\n        else:\n            merged_blocked_times[-1] = (merged_blocked_times[-1][0], max(merged_blocked_times[-1][1], end))\n    \n    # Find an available slot for the meeting\n    last_end = work_start\n    for start, end in merged_blocked_times:\n        # Check if there's enough time before the next busy slot\n        if last_end + meeting_duration <= start:\n            return last_end, last_end + meeting_duration\n        last_end = end\n    \n    # Check for a free slot after the last busy period until the work end time\n    if last_end + meeting_duration <= work_end:\n        return last_end, last_end + meeting_duration\n    \n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration)\n\nif proposed_time:\n    start_time, end_time = proposed_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_457"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the existing schedules\nschedules = {\n    \"Wayne\": [],\n    \"Melissa\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Catherine\": [],\n    \"Gregory\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Victoria\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thomas\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Jennifer\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is available for all participants\ndef is_time_slot_available(start, duration, schedules):\n    end = start + duration\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end and end > busy_start):\n                return False\n    return True\n\n# Search for a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    # Check against the availability of participants\n    if is_time_slot_available(current_time, meeting_duration, schedules):\n        # Ensure Wayne's preference is also respected\n        if current_time >= datetime.strptime(\"14:00\", \"%H:%M\"):\n            proposed_start = current_time\n            proposed_end = proposed_start + meeting_duration\n            print(f\"{{{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}}}\")\n            break\n    current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n```",
            "count": "calendar_scheduling_example_458"
        },
        {
            "final_program_time": "{9:00:0:09}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy times\nschedules = {\n    \"Marie\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Roger\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"John\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Peter\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ruth\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"James\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Victoria\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Check for available time slots\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < busy_end and end_time > busy_start) for busy_times in schedules.values() for busy_start, busy_end in busy_times):\n            return current_time.strftime(\"%H:%M:%S\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_459"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time, schedules):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Define the schedules for each participant\nschedules = {\n    \"Katherine\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Douglas\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Ann\": [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Pamela\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Gloria\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Donna\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christopher\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Define the meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"9:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find a suitable time slot for the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, current_time + meeting_duration, schedules):\n        start_str = current_time.strftime(\"%H:%M\")\n        end_str = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{start_str}:{end_str}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_460"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' schedules (busy times)\nschedules = {\n    \"Justin\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Nancy\": [],\n    \"Willie\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Alan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Brian\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Lori\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Isabella\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if a proposed time is free for all participants\ndef is_time_free(start_time, end_time):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if is_time_free(current_time, end_time):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Increment time by minute\n    \n    return None\n\n# Execute the function to find the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_461"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nschedules = {\n    \"Terry\": [(start_time, end_time)],\n    \"Justin\": [(start_time, datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), end_time)],\n    \"Grace\": [(start_time, end_time)],\n    \"Bruce\": [(start_time, end_time)],\n    \"Diane\": [(start_time, datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)],\n    \"Bryan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), end_time)],\n    \"Beverly\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), end_time)]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules, meeting_duration, start_time, end_time):\n    # Create a timeline of free and busy slots\n    free_time_slots = []\n    \n    # Create a time slot covering the entire work hours\n    current_time = start_time\n    \n    while current_time < end_time:\n        busy = False\n        for participant, busy_slots in schedules.items():\n            for start, end in busy_slots:\n                if start <= current_time < end:\n                    busy = True\n                    break\n            if busy:\n                break\n\n        if not busy:\n            free_time_slots.append(current_time)\n\n        current_time += timedelta(minutes=30)  # Check for next half hour\n\n    # Check each free time slot for sufficient duration for meeting\n    for start in free_time_slots:\n        end = start + meeting_duration\n        if end <= end_time:\n            return start.strftime(\"%H:%M:%H:%M\")\n    \n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration, start_time, end_time)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_462"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import timedelta, time\n\n# Define work hours\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\n# Define the existing schedules\nschedules = {\n    'Joyce': [(time(10, 30), time(11, 30)), (time(12, 30), time(14, 0)), (time(15, 0), time(15, 30))],\n    'Diana': [(time(9, 0), time(9, 30)), (time(16, 0), time(16, 30))],\n    'Emma': [(time(9, 0), time(9, 30)), (time(12, 0), time(12, 30)), (time(13, 0), time(13, 30)), (time(14, 0), time(14, 30))],\n    'Gregory': [(time(10, 0), time(10, 30)), (time(16, 30), time(17, 0))],\n    'Tyler': [(time(9, 0), time(9, 30)), (time(10, 0), time(10, 30)), (time(11, 0), time(14, 0))],\n    'Jacob': [(time(9, 0), time(11, 0)), (time(11, 30), time(12, 0)), (time(12, 30), time(14, 0)), (time(15, 30), time(16, 30))],\n    'Bruce': [(time(9, 0), time(9, 30)), (time(10, 0), time(11, 30)), (time(12, 0), time(14, 30)), (time(15, 0), time(16, 0)), (time(16, 30), time(17, 0))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a given time range is free for all participants\ndef is_time_free(start, end):\n    for busy_times in schedules.values():\n        if any(start < busy_end and end > busy_start for busy_start, busy_end in busy_times):\n            return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    start_time = timedelta(hours=work_start.hour, minutes=work_start.minute)\n    end_time = timedelta(hours=work_end.hour, minutes=work_end.minute)\n\n    while start_time + meeting_duration <= end_time:\n        meeting_end = start_time + meeting_duration\n        if is_time_free(time(*divmod(start_time.seconds, 3600)), time(*divmod(meeting_end.seconds, 3600))):\n            return f\"{time(*divmod(start_time.seconds, 3600)):02}:{time(*divmod(meeting_end.seconds, 3600)):02}\"\n        start_time += timedelta(minutes=1)  # Check the next minute\n    \n    return None\n\n# Output the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)  # This will output the time in the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_463"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy times\nschedules = {\n    \"Rachel\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    \"Henry\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    ],\n    \"Jesse\": [\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Albert\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Ashley\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Jonathan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Walter\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Check for available time slots\ndef is_time_slot_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start: # overlaps\n                return False\n    return True\n\n# Find suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        if is_time_slot_free(current_time, next_time):\n            return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1) # Check the next minute\n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)  # Output will be in the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_464"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules of participants as busy time slots\nbusy_slots = {\n    'Gregory': [(datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'John': [],\n    'Roger': [],\n    'Roy': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n            (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Adam': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Judith': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Robert': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\n# Function to check if two time intervals overlap\ndef is_overlapping(slot1, slot2):\n    return not (slot1[1] <= slot2[0] or slot1[0] >= slot2[1])\n\n# Find free time slots\ndef find_free_slot():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        busy = False\n        \n        for participant, slots in busy_slots.items():\n            for slot in slots:\n                if is_overlapping((current_time, end_time), slot):\n                    busy = True\n                    break\n            if busy:\n                break\n        \n        if not busy:\n            return current_time.strftime('%H:%M') + ':' + end_time.strftime('%H:%M')\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n\n# Get the proposed meeting time\nproposed_time = find_free_slot()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_465"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    'Kyle': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n             (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Danielle': [],\n    'Kelly': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M'))],\n    'Carol': [],\n    'Angela': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Carolyn': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Gary': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n             (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\n# Function to find suitable meeting time\ndef find_meeting_time(duration):\n    meeting_start = datetime.strptime('09:00', '%H:%M')\n    meeting_end = datetime.strptime('17:00', '%H:%M')\n\n    while meeting_start + duration <= meeting_end:\n        meeting_valid = True\n        for busy_slots in schedules.values():\n            for busy_start, busy_end in busy_slots:\n                if (meeting_start < busy_end) and (meeting_start + duration > busy_start):\n                    meeting_valid = False\n                    break\n            if not meeting_valid:\n                break\n        if meeting_valid:\n            return meeting_start.strftime('%H:%M') + ':' + (meeting_start + duration).strftime('%H:%M')\n        meeting_start += timedelta(minutes=30)  # Check next half hour\n\n    return None\n\n# Setting meeting duration to half an hour\nduration = timedelta(minutes=30)\nmeeting_time = find_meeting_time(duration)\n\n# Output the proposed meeting time\nprint(meeting_time)  # Should output a valid time\n```",
            "count": "calendar_scheduling_example_466"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nschedules = {\n    \"Nicole\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Wayne\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Gerald\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Christian\": [],\n    \"Harold\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Larry\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jason\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Available time slots (from 9:00 to 17:00)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is available for all participants\ndef is_time_slot_available(start_time, duration):\n    end_time = start_time + duration\n    for participant, blocked_times in schedules.items():\n        if any(start < end_time and end > start_time for start, end in blocked_times):\n            return False\n    return True\n\n# Check time slots\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_slot_available(current_time, meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=10)  # Check every 10 minutes\n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_467"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy schedules for each participant\nschedules = {\n    \"Stephen\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jacqueline\": [],\n    \"Logan\": [],\n    \"Larry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Jean\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Adam\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Eugene\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if time range is free for all participants\ndef is_time_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Attempt to find a suitable time slot of 30 minutes\nmeeting_duration = timedelta(minutes=30)\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    if is_time_free(current_time, current_time + meeting_duration):\n        print(f\"{{{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}}}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_468"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find available time slots\ndef find_meeting_slot(participants_availability, meeting_duration_minutes):\n    # Convert meeting duration to a timedelta\n    meeting_duration = timedelta(minutes=meeting_duration_minutes)\n    \n    # Working hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Iterate through each minute of the working day\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check availability of all participants\n        if all(not (current_time < end and current_time + meeting_duration > start) \n               for start, end in participants_availability):\n            return (current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"))\n        \n        # Increment time by one minute\n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Participants' schedules as (start_time, end_time) tuples in minutes\nparticipants_availability = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Edward\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Jacob\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Edward\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Willie\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Edward\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Billy\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Jacob\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Edward\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Billy\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Edward\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Billy\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Edward\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Lori\n]\n\n# Meeting duration in minutes\nmeeting_duration_minutes = 30\n\n# Find and print the meeting slot\nmeeting_time = find_meeting_slot(participants_availability, meeting_duration_minutes)\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```\n",
            "count": "calendar_scheduling_example_469"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    'Jordan': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    'Madison': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Kimberly': [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Carol': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Nathan': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Walter': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    'Aaron': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create a list of time slots\nbusy_times = []\nfor busy in schedules.values():\n    busy_times.extend(busy)\n\n# Sort the busy times\nbusy_times.sort(key=lambda x: x[0])\n\n# Merge overlapping busy times\nmerged_busy_times = []\ncurrent_start, current_end = busy_times[0]\nfor start, end in busy_times[1:]:\n    if start <= current_end:  # Overlapping\n        current_end = max(current_end, end)\n    else:\n        merged_busy_times.append((current_start, current_end))\n        current_start, current_end = start, end\nmerged_busy_times.append((current_start, current_end))\n\n# Find available time slots for the meeting\navailable_slots = []\ncurrent_time = work_start\nfor start, end in merged_busy_times:\n    if current_time + meeting_duration <= start:\n        available_slots.append((current_time, current_time + meeting_duration))\n    current_time = max(current_time, end)\n\n# Check for any remaining free time after the last busy period\nif current_time + meeting_duration <= work_end:\n    available_slots.append((current_time, current_time + meeting_duration))\n\n# Preferential meeting time for Carol before 10:00\nfor slot in available_slots:\n    if slot[0] < datetime.strptime(\"10:00\", \"%H:%M\"):\n        print(f\"{slot[0].strftime('%H:%M')}:{slot[1].strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_470"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nschedules = {\n    \"Willie\": [],\n    \"Scott\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jordan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Austin\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Kimberly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Teresa\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Dylan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find available slots\ndef find_meeting_time(schedules, duration):\n    free_slots = []\n    \n    # Generate booked timeframes\n    booked_times = []\n    \n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            booked_times.append((busy_start, busy_end))\n    \n    # Create a list of all booked times during the work hours\n    current_time = start_time\n    while current_time < end_time:\n        next_time = current_time + duration\n        if next_time > end_time:\n            break\n            \n        # Check if current slot is free\n        is_free = True\n        for busy_start, busy_end in booked_times:\n            if current_time < busy_end and next_time > busy_start:\n                is_free = False\n                break\n        \n        if is_free:\n            free_slots.append((current_time, next_time))\n        \n        current_time += timedelta(minutes=1)  # Check minute by minute\n        \n    return free_slots[0] if free_slots else None\n\n# Find an available time slot\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\nif meeting_time:\n    print(f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_471"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\n# Define the busy schedules for each participant\r\nschedules = {\r\n    \"Roy\": [(datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\r\n    \"Thomas\": [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\r\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\r\n    \"John\": [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\r\n             (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\r\n             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\r\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\r\n             (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\r\n    \"Amy\": [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\r\n            (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\r\n            (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\r\n            (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\r\n    \"Mason\": [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\r\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\r\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\r\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\r\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\r\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\r\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\r\n    \"Zachary\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\r\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\r\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\r\n                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\r\n                (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\r\n    \"Jacqueline\": [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\r\n                   (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\r\n                   (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\r\n                   (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\r\n}\r\n\r\n# Define meeting duration and time range\r\nmeeting_duration = timedelta(minutes=30)\r\nstart_time = datetime.strptime('09:00', '%H:%M')\r\nend_time = datetime.strptime('17:00', '%H:%M')\r\n\r\n# Function to check if a time slot is free for all participants\r\ndef is_free(slot_start, slot_end):\r\n    for busy_times in schedules.values():\r\n        for busy_start, busy_end in busy_times:\r\n            if not (slot_end <= busy_start or slot_start >= busy_end):\r\n                return False\r\n    return True\r\n\r\n# Find a time slot for the meeting\r\ncurrent_time = start_time\r\nwhile current_time + meeting_duration <= end_time:\r\n    if is_free(current_time, current_time + meeting_duration):\r\n        proposed_start = current_time.strftime('%H:%M')\r\n        proposed_end = (current_time + meeting_duration).strftime('%H:%M')\r\n        print(f\"{proposed_start}:{proposed_end}\")\r\n        break\r\n    current_time += timedelta(minutes=1)\r\n```",
            "count": "calendar_scheduling_example_472"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nschedules = {\n    \"Gregory\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Jonathan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Barbara\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Alan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Nicole\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Catherine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        break\n    current_time += timedelta(minutes=30)\n\n# Output the proposed time\nprint(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_473"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define participant schedules\nschedules = {\n    \"Russell\": [(work_start, work_end)],\n    \"Christina\": [(work_start, datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)],\n    \"Ethan\": [(work_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), work_end)],\n    \"Brian\": [(work_start, work_end)],\n    \"Peter\": [(work_start, datetime.strptime(\"09:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), work_end)],\n    \"Isabella\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)],\n    \"Dylan\": [(work_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"17:00\", \"%H:%M\"), work_end)],\n}\n\n# Function to find a common free slot\ndef find_meeting_time(meeting_duration):\n    common_free_times = []\n\n    # Initial free time range (the whole work day)\n    current_free_time = [(work_start, work_end)]\n\n    for schedule in schedules.values():\n        new_free_times = []\n        for free_start, free_end in current_free_time:\n            for busy_start, busy_end in schedule:\n                # If the free time overlaps with busy time, trim it\n                if busy_start > free_start and busy_start < free_end:\n                    new_free_times.append((free_start, busy_start))\n                elif busy_end > free_start and busy_end < free_end:\n                    new_free_times.append((busy_end, free_end))\n                elif busy_start <= free_start and busy_end >= free_end:\n                    break\n            else:\n                new_free_times.append((free_start, free_end))\n        current_free_time = new_free_times\n    \n    for free_start, free_end in current_free_time:\n        while free_start + meeting_duration <= free_end:\n            common_free_times.append((free_start, free_start + meeting_duration))\n            free_start += timedelta(minutes=1)  # Check next minute\n\n    return common_free_times[0] if common_free_times else None\n\nmeeting_time = find_meeting_time(meeting_duration)\n\n# Output format: HH:MM:HH:MM\nif meeting_time:\n    start_time = meeting_time[0].strftime(\"%H:%M\")\n    end_time = meeting_time[1].strftime(\"%H:%M\")\n    print(f\"{start_time}:{end_time}\")\nelse:\n    print(\"No available time slot.\")\n```",
            "count": "calendar_scheduling_example_474"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participants' schedules (busy times)\nschedules = {\n    \"Brittany\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Debra\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Amber\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Theresa\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Gloria\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Amanda\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Stephanie\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free for all participants\ndef is_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Find suitable time\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_free(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_475"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy slots\nbusy_slots = {\n    \"Daniel\": [],\n    \"Kathleen\": [(14, 30, 15, 30)],\n    \"Carolyn\": [(12, 0, 12, 30), (13, 0, 13, 30)],\n    \"Roger\": [],\n    \"Cheryl\": [(9, 0, 9, 30), (10, 0, 11, 30), (12, 30, 13, 30), (14, 0, 17, 0)],\n    \"Virginia\": [(9, 30, 11, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 30, 15, 30), (16, 0, 17, 0)],\n    \"Angela\": [(9, 30, 10, 0), (10, 30, 11, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 0, 16, 30)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free\ndef is_free(start_time, end_time):\n    for busy in busy_slots.values():\n        for (start_hour, start_minute, end_hour, end_minute) in busy:\n            busy_start = datetime.strptime(f\"{start_hour}:{start_minute}\", \"%H:%M\")\n            busy_end = datetime.strptime(f\"{end_hour}:{end_minute}\", \"%H:%M\")\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Finding a suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_free(current_time, end_time):\n        print(f'{{{current_time.strftime(\"%H:%M\")}:{end_time.strftime(\"%H:%M\")}}}')\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_476"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules with busy time slots\nschedules = {\n    \"Julia\": [],\n    \"Bryan\": [(10, 30), (11, 0), (13, 30), (14, 30), (15, 30)],\n    \"Betty\": [],\n    \"Arthur\": [(9, 30), (12, 0)],\n    \"Megan\": [(9, 30), (12, 0), (12, 30), (14, 0), (15, 30)],\n    \"Kevin\": [(9, 0), (10, 0), (11, 30), (13, 0), (14, 0), (15, 30)],\n    \"Alice\": [(9, 0), (15, 30), (16, 0)],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free\ndef is_free(start_time, end_time):\n    for participant, busy_times in schedules.items():\n        for busy_start in busy_times:\n            busy_start_time = datetime(work_start.year, work_start.month, work_start.day, busy_start[0], busy_start[1])\n            busy_end_time = busy_start_time + meeting_duration\n            if start_time < busy_end_time and end_time > busy_start_time:\n                return False\n    return True\n\n# Function to find a suitable time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if is_free(current_time, end_time):\n            return current_time.strftime(\"%H:%M\") + ':' + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    return None\n\n# Calculate the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_477"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules (busy times)\nschedules = {\n    \"Kimberly\": [(work_start, work_end)],\n    \"Deborah\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Samuel\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Lisa\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Vincent\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), work_end)],\n    \"Julia\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Judith\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), work_end)],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:  # Check for overlap\n                return False\n    return True\n\n# Finding suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```\n",
            "count": "calendar_scheduling_example_478"
        },
        {
            "final_program_time": "{0:30:9:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\nschedules = {\n    \"Evelyn\": [(0, 0)],  # Free all day\n    \"Joshua\": [(11, 0), (12, 30), (13, 30), (14, 30), (16, 30), (17, 0)],\n    \"Kevin\": [(0, 0)],   # Free all day\n    \"Gerald\": [(0, 0)],  # Free all day\n    \"Jerry\": [(9, 0), (9, 30), (10, 30), (12, 0), (12, 30), (13, 0), (13, 30), (14, 0), (14, 30), (15, 0), (15, 30), (16, 0)],\n    \"Jesse\": [(9, 0), (9, 30), (10, 30), (12, 0), (12, 30), (14, 30), (15, 0), (15, 30), (16, 30)],\n    \"Kenneth\": [(10, 30), (12, 30), (13, 30), (14, 30), (15, 30), (16, 0), (16, 30), (17, 0)],\n}\n\n# Generate busy intervals in minutes\ndef get_busy_intervals(schedule):\n    busy_intervals = []\n    for start_hour, start_minute in schedule:\n        busy_intervals.append(start_hour * 60 + start_minute)\n    return busy_intervals\n\n# Find common free time slots\ndef find_free_time(busy_intervals, meeting_duration):\n    all_busy = sorted(set(busy_intervals))\n    free_times = []\n    \n    # Start with 9:00 AM\n    current_time = 9 * 60\n    \n    for busy_time in all_busy:\n        if busy_time - current_time >= meeting_duration:\n            free_times.append((current_time, busy_time))\n        current_time = busy_time + 30  # 30 minutes gap after busy time\n\n    # Check after the last busy time until 5:00 PM\n    if 17 * 60 - current_time >= meeting_duration:\n        free_times.append((current_time, 17 * 60))\n\n    return free_times\n\n# Meeting duration in minutes (1 hour = 60 minutes)\nmeeting_duration = 60\n\n# Gather all busy intervals for all participants\nall_busy_intervals = []\nfor name, schedule in schedules.items():\n    all_busy_intervals.extend(get_busy_intervals(schedule))\n\n# Find free time that fits everyone's schedules\nfree_intervals = find_free_time(all_busy_intervals, meeting_duration)\n\nif free_intervals:\n    start, end = free_intervals[0]\n    start_hour, start_minute = divmod(start, 60)\n    end_hour, end_minute = divmod(end, 60)\n    print(f\"{{{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}}}\")\nelse:\n    print(\"No available time for meeting.\")\n```",
            "count": "calendar_scheduling_example_479"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules for each participant\nschedules = {\n    \"Betty\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Roy\": [],\n    \"Douglas\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kimberly\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Ashley\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Isabella\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carl\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    next_time = current_time + meeting_duration\n    if is_time_slot_free(current_time, next_time):\n        print(f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_480"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Andrew\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Keith\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Pamela\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carol\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Barbara\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Ronald\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Diana\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available slots\ndef find_available_slot(schedules, duration):\n    # Create a list of blocks for each time slot\n    blocked_times = []\n    \n    for times in schedules.values():\n        for start, end in times:\n            blocked_times.append((start, end))\n    \n    # Consider the working hours as available time\n    available_start = work_start\n    while available_start < work_end:\n        available_end = available_start + duration\n        \n        # Check if the current slot is blocked\n        is_blocked = any(av_start < available_end and av_end > available_start for av_start, av_end in blocked_times)\n        \n        if not is_blocked and available_end <= work_end:\n            return available_start.strftime(\"%H:%M\"), available_end.strftime(\"%H:%M\")\n        \n        available_start += timedelta(minutes=1)  # Increment by 1 minute to find the next available slot\n    \n    return None  # No available slot found\n\n# Find and output available slot\nslot_start, slot_end = find_available_slot(schedules, meeting_duration)\noutput = f\"{slot_start}:{slot_end}\"\nprint(output)\n```\n",
            "count": "calendar_scheduling_example_481"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    \"Frank\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Michael\": [],\n    \"Jeremy\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Charles\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Scott\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Julie\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Working hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = start_of_day\nwhile current_time + meeting_duration <= end_of_day:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        break\n    current_time += timedelta(minutes=30)\n\n# Print the output in the required format\nprint(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_482"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nschedules = {\n    \"Nicholas\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    \"Sara\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))],\n    \n    \"Helen\": [],\n    \n    \"Brian\": [],\n    \n    \"Nancy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Kelly\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Judy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to determine free time slots\ndef get_free_times(schedules):\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n    \n    busy_times.sort(key=lambda x: x[0])\n    \n    free_times = []\n    current_time = work_start\n    \n    for start, end in busy_times:\n        if current_time < start:\n            free_times.append((current_time, start))\n        current_time = max(current_time, end)\n    \n    if current_time < work_end:\n        free_times.append((current_time, work_end))\n    \n    return free_times\n\n# Check if a free time slot can accommodate the meeting duration\ndef find_meeting_time(free_times, duration):\n    for start, end in free_times:\n        if end - start >= duration:\n            return start\n    return None\n\n# Calculate free times and find meeting time\nfree_times = get_free_times(schedules)\nmeeting_time = find_meeting_time(free_times, meeting_duration)\n\nif meeting_time:\n    meeting_end_time = meeting_time + meeting_duration\n    print(f\"{meeting_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_483"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nschedules = {\n    \"Jean\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Susan\": [],\n    \"Beverly\": [],\n    \"Denise\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jeffrey\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Mary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Joseph\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Helper function to check if time is free\ndef is_time_free(start, end):\n    for busy_periods in schedules.values():\n        for busy_start, busy_end in busy_periods:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a suitable time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        if is_time_free(current_time, next_time):\n            return current_time.strftime(\"%H:%M\") + \":\" + next_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Increment minute by minute\n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_484"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=30)\n\n# Participants' busy schedules\nschedules = {\n    \"Roy\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Kayla\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Eugene\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Matthew\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Alice\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Frank\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Helper function to find free time slots\ndef find_free_time_slots(schedule):\n    free_slots = []\n    last_end = WORK_START\n\n    for start, end in sorted(schedule):\n        if last_end < start:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    if last_end < WORK_END:\n        free_slots.append((last_end, WORK_END))\n    \n    return free_slots\n\n# Find common free slots for all participants\nall_free_slots = find_free_time_slots(sum(schedules.values(), []))\n\n# Check for available meeting time\nfor start, end in all_free_slots:\n    if end - start >= MEETING_DURATION:\n        proposed_start = start\n        proposed_end = start + MEETING_DURATION\n        if proposed_end <= end:\n            print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_485"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\nparticipants_schedule = {\n    \"Logan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Kimberly\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Angela\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Matthew\": [],\n    \"Dylan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Marilyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Grace\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration (30 minutes)\nmeeting_duration = timedelta(minutes=30)\n\ndef is_time_slot_available(start_time, end_time):\n    for busy_times in participants_schedule.values():\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\ndef find_meeting_time():\n    current_time = working_hours_start\n    \n    while current_time + meeting_duration <= working_hours_end:\n        end_time = current_time + meeting_duration\n        if is_time_slot_available(current_time, end_time):\n            return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)  # Increment by minute to check next slot\n\n# Get the proposed meeting time\nproposed_start, proposed_end = find_meeting_time()\nprint(f'{{{proposed_start}:{proposed_end}}}')\n```",
            "count": "calendar_scheduling_example_486"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the participants' busy schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing busy schedules (start time, end time) for each participant\nbusy_schedules = {\n    \"Rebecca\": [\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Ronald\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Pamela\": [\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Noah\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Diana\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Jacqueline\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n}\n\n# Function to check if a time slot is available for all participants\ndef is_time_slot_free(start_time, duration):\n    end_time = start_time + duration\n    for participant, schedules in busy_schedules.items():\n        for busy_start, busy_end in schedules:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_487"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Working hours\nstart_of_work = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_work = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' busy schedules\nschedules = {\n    \"Samuel\": [],\n    \"Maria\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Bryan\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Kyle\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Christina\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Virginia\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Ann\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n}\n\ndef is_time_free(start, end, participant_name):\n    for busy_start, busy_end in schedules[participant_name]:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\ndef find_meeting_time():\n    current_time = start_of_work\n    while current_time + timedelta(minutes=meeting_duration) <= end_of_work:\n        meeting_start = current_time\n        meeting_end = current_time + timedelta(minutes=meeting_duration)\n        \n        if all(is_time_free(meeting_start, meeting_end, participant) for participant in schedules):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_488"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define each participant's schedule as busy intervals\nschedules = {\n    \"Cynthia\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Carol\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \"Jean\": [],\n    \"Billy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"))],\n    \"Albert\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Doris\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Keith\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to check if proposed time is free for all participants\ndef is_time_free(start, duration, schedules):\n    end = start + duration\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Finding a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_free(current_time, meeting_duration, schedules):\n        proposed_time = current_time.strftime(\"%H:%M\")\n        meeting_end_time = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_time}:{meeting_end_time}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_489"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    \"Nancy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Julie\": [],\n    \"Randy\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Anthony\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Alan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Denise\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jacob\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check if the current time slot is free for all participants\n        if all(not any(start < meeting_end and end > meeting_start for start, end in busy_times)\n               for busy_times in schedules.values()):\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_490"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules in terms of busy time slots (start_time, end_time)\nschedules = {\n    \"Patricia\": [(\"12:00\", \"13:00\"), (\"14:00\", \"14:30\"), (\"15:00\", \"15:30\")],\n    \"Nathan\": [(\"11:30\", \"12:00\"), (\"14:00\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"James\": [(\"12:30\", \"13:00\"), (\"14:30\", \"15:00\"), (\"16:00\", \"17:00\")],\n    \"Pamela\": [(\"9:00\", \"9:30\"), (\"10:00\", \"10:30\"), (\"12:30\", \"13:00\"), \n               (\"14:00\", \"14:30\"), (\"16:00\", \"17:00\")],\n    \"Raymond\": [(\"9:00\", \"13:00\"), (\"13:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Cheryl\": [(\"9:00\", \"9:30\"), (\"10:00\", \"12:30\"), (\"14:30\", \"15:00\"), \n               (\"15:30\", \"16:00\")],\n    \"Michelle\": [(\"9:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), \n                 (\"14:30\", \"15:00\"), (\"15:30\", \"17:00\")]\n}\n\nday_start = datetime.strptime(\"09:00\", \"%H:%M\")\nday_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if time slot is available\ndef is_slot_available(start, end):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            busy_start_dt = datetime.strptime(busy_start, \"%H:%M\")\n            busy_end_dt = datetime.strptime(busy_end, \"%H:%M\")\n            if not (end <= busy_start_dt or start >= busy_end_dt):\n                return False\n    return True\n\n# Try to find a suitable time for a meeting\ncurrent_time = day_start\nwhile current_time + meeting_duration <= day_end:\n    meeting_end_time = current_time + meeting_duration\n    if is_slot_available(current_time, meeting_end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_491"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant's busy schedules\nschedules = {\n    \"David\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Julie\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Natalie\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Michelle\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Brittany\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Richard\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_time_slot_available(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Check each time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    next_time = current_time + meeting_duration\n    if is_time_slot_available(current_time, next_time):\n        print(f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_492"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Tyler\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Stephanie\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Hannah\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joe\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Diana\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Deborah\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Assuming the meeting duration is 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Find the common free slots\ndef find_common_free_time(schedules, meeting_duration):\n    common_time_slots = []\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Create a list of all busy times\n    busy_times = []\n    for times in schedules.values():\n        for start, end in times:\n            busy_times.append((start, end))\n    \n    # Merge busy times to find free slots\n    busy_times.sort()\n    merged_busy_times = []\n    current_start, current_end = busy_times[0]\n\n    for start, end in busy_times[1:]:\n        if start <= current_end:\n            current_end = max(current_end, end)\n        else:\n            merged_busy_times.append((current_start, current_end))\n            current_start, current_end = start, end\n    merged_busy_times.append((current_start, current_end))\n\n    # Now find free slots between busy times\n    previous_end = start_of_day\n    for start, end in merged_busy_times:\n        if previous_end + meeting_duration <= start:\n            common_time_slots.append((previous_end, start))\n        previous_end = end\n\n    # Check free time at the end of the day\n    if previous_end + meeting_duration <= end_of_day:\n        common_time_slots.append((previous_end, end_of_day))\n\n    return common_time_slots\n\nfree_time_slots = find_common_free_time(schedules, meeting_duration)\n\n# Propose the first available time slot\nif free_time_slots:\n    proposed_time = free_time_slots[0][0]\n    meeting_start = proposed_time.strftime(\"%H:%M\")\n    meeting_end = (proposed_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{{{meeting_start}:{meeting_end}}}\")\n```",
            "count": "calendar_scheduling_example_493"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours = (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\nschedules = {\n    'Denise': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'))],\n    'Roy': [(datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n            (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Roger': [],\n    'Debra': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'David': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Danielle': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                 (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Brian': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if time slot is available\ndef is_time_slot_available(start_time, end_time):\n    for busy_slots in schedules.values():\n        for (busy_start, busy_end) in busy_slots:\n            if busy_start < end_time and busy_end > start_time:\n                return False\n    return True\n\n# Find a suitable time\ndef find_meeting_time():\n    current_time = working_hours[0]\n    end_working_time = working_hours[1]\n\n    while current_time + meeting_duration <= end_working_time:\n        next_time = current_time + meeting_duration\n        if is_time_slot_available(current_time, next_time):\n            return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Check the next minute\n        \n    return None  # No suitable time found\n\n# Get and print the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_494"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants and their busy times\nparticipants = {\n    \"Jordan\": [(10, 0, 11, 0), (11, 30, 12, 0), (13, 0, 13, 30), (14, 30, 15, 0), (16, 0, 16, 30)],\n    \"Ralph\": [(12, 30, 13, 0), (14, 0, 14, 30)],\n    \"Kathryn\": [],\n    \"Isabella\": [(12, 30, 13, 0), (14, 0, 14, 30), (15, 30, 16, 30)],\n    \"Roger\": [(9, 0, 9, 30), (10, 0, 11, 0), (12, 30, 17, 0)],\n    \"Henry\": [(9, 0, 9, 30), (10, 0, 13, 0), (13, 30, 15, 0), (15, 30, 16, 30)],\n    \"Anthony\": [(9, 0, 9, 30), (10, 30, 13, 0), (13, 30, 14, 0), (15, 0, 16, 30)],\n}\n\n# Define meeting duration in minutes\nmeeting_duration = 30\n\n# Create a list to hold all busy times in a single flat list\nbusy_times = []\nfor busy_slots in participants.values():\n    for start_hour, start_minute, end_hour, end_minute in busy_slots:\n        busy_times.append((datetime(2023, 10, 2, start_hour, start_minute),\n                           datetime(2023, 10, 2, end_hour, end_minute)))\n\n# Sort the busy times\nbusy_times.sort()\n\n# Add the working hours' start and end\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Merge overlapping busy times to get a clear view of unavailable slots\nmerged_busy_times = []\nfor start, end in busy_times:\n    if not merged_busy_times or merged_busy_times[-1][1] < start:\n        merged_busy_times.append((start, end))\n    else:\n        merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n# Find a free slot for the meeting\ncurrent_start = work_start\n\nfor busy_start, busy_end in merged_busy_times:\n    # Check if there is enough time before the next busy slot\n    if current_start + timedelta(minutes=meeting_duration) <= busy_start:\n        meeting_time_start = current_start\n        meeting_time_end = current_start + timedelta(minutes=meeting_duration)\n        if meeting_time_end <= work_end:\n            print(f'{{{meeting_time_start.strftime(\"%H:%M\")}:{meeting_time_end.strftime(\"%H:%M\")}}}')\n            break\n    # Move the current start time to the end of the busy slot\n    current_start = max(current_start, busy_end)\n\n# If there's still time after the last busy slot until the end of work hours\nif current_start + timedelta(minutes=meeting_duration) <= work_end:\n    meeting_time_start = current_start\n    meeting_time_end = current_start + timedelta(minutes=meeting_duration)\n    print(f'{{{meeting_time_start.strftime(\"%H:%M\")}:{meeting_time_end.strftime(\"%H:%M\")}}}')\n```",
            "count": "calendar_scheduling_example_495"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules as (start, end) time tuples\nschedules = {\n    \"Zachary\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Amanda\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Keith\": [],\n    \"Ruth\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Noah\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Sean\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Sara\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to check if time slot is available for all participants\ndef is_time_slot_available(start, end):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end and end > busy_start):  # Collision check\n                return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        if is_time_slot_available(current_time, meeting_end_time):\n            return current_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next half hour\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(f'{{{proposed_time}}}')\n```",
            "count": "calendar_scheduling_example_496"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# List of busy schedules for each participant\nbusy_times = {\n    \"Kyle\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Russell\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Juan\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Beverly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Bryan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Margaret\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(busy_times, duration):\n    interval = timedelta(minutes=duration)\n    for start in range(work_start.hour * 60 + work_start.minute, work_end.hour * 60 + work_end.minute):\n        start_time = datetime.strptime(f\"{start // 60:02}:{start % 60:02}\", \"%H:%M\")\n        end_time = start_time + interval\n        \n        if end_time > work_end:  # If meeting ends after work hours\n            break\n        \n        # Check if this time is free for all participants\n        is_free = True\n        for busy in busy_times.values():\n            for busy_start, busy_end in busy:\n                if (start_time < busy_end) and (end_time > busy_start):\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        if is_free:\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return None\n\n# Duration of the meeting\nmeeting_duration = 30  # in minutes\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(busy_times, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_497"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define busy schedules of participants with busy times as tuples of (start, end)\nschedules = {\n    \"Diana\": [],\n    \"Richard\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Judith\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Ryan\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Alexis\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Donna\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jason\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\n# Convert busy times to a merged list of busy periods\ndef merge_busy_times(schedules):\n    busy_times = []\n    for busy_slots in schedules.values():\n        busy_times.extend(busy_slots)\n\n    # Merge overlapping busy times\n    busy_times.sort(key=lambda x: x[0])\n    merged_busy = []\n    for start, end in busy_times:\n        if not merged_busy or merged_busy[-1][1] < start:\n            merged_busy.append((start, end))\n        else:\n            merged_busy[-1] = (merged_busy[-1][0], max(merged_busy[-1][1], end))\n    return merged_busy\n\n# Find available slots\ndef find_available_slots(merged_busy):\n    available_slots = []\n    last_end = work_start\n\n    for start, end in merged_busy:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < work_end:\n        available_slots.append((last_end, work_end))\n\n    return available_slots\n\n# Find a suitable time for a 30-minute meeting\ndef schedule_meeting(duration_minutes=30):\n    merged_busy = merge_busy_times(schedules)\n    available_slots = find_available_slots(merged_busy)\n\n    for start, end in available_slots:\n        if (end - start).total_seconds() >= duration_minutes * 60:\n            meeting_start = start\n            meeting_end = meeting_start + timedelta(minutes=duration_minutes)\n            return meeting_start.strftime(\"%H:%M\") + ':' + meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\n# Get proposed meeting time\nproposed_time = schedule_meeting()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_498"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules in a dictionary\nschedules = {\n    \"Patrick\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Alice\": [],\n    \"Samuel\": [],\n    \"Joyce\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Peter\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Hannah\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joseph\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef find_available_time(schedules, meeting_duration, work_start, work_end):\n    time_slots = []\n    \n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        time_slots.append((current_time, current_time + meeting_duration))\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    for start, end in time_slots:\n        if all(not (start < busy_end and end > busy_start) for busy_times in schedules.values() for busy_start, busy_end in busy_times):\n            return start, end\n    \n    return None\n\n# Calculate proposed time\nproposed_time = find_available_time(schedules, meeting_duration, work_start, work_end)\nif proposed_time:\n    print(f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_499"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nrachel_busy_times = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\nwayne_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Function to check if a time slot is available\ndef is_time_slot_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:  # Overlapping time check\n            return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = start_time\n\nwhile current_time + meeting_duration <= end_time:\n    if current_time >= datetime.strptime(\"13:00\", \"%H:%M\"):  # Rachel prefers to meet after 13:00\n        if (is_time_slot_available(current_time, current_time + meeting_duration, rachel_busy_times) and\n                is_time_slot_available(current_time, current_time + meeting_duration, wayne_busy_times)):\n            proposed_time = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            print(proposed_time)\n            break\n    current_time += timedelta(minutes=30)  # Increment time for next check\n```",
            "count": "calendar_scheduling_example_500"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(carol_schedule, mark_schedule, duration, work_hours):\n    # Convert work hours to datetime objects\n    work_start = datetime.strptime(work_hours[0], '%H:%M')\n    work_end = datetime.strptime(work_hours[1], '%H:%M')\n    \n    # Create a list of all the busy time slots\n    carol_busy = [datetime.strptime(start, '%H:%M') for start, _ in carol_schedule] + \\\n                  [datetime.strptime(end, '%H:%M') for _, end in carol_schedule]\n    mark_busy = [datetime.strptime(start, '%H:%M') for start, _ in mark_schedule] + \\\n                  [datetime.strptime(end, '%H:%M') for _, end in mark_schedule]\n    \n    # Combine both schedules and sort\n    all_busy = sorted(carol_busy + mark_busy)\n    \n    # Create a list of available time slots\n    available_times = []\n    last_end_time = work_start\n\n    for busy_time in all_busy:\n        if last_end_time + timedelta(minutes=duration) <= busy_time:\n            available_times.append((last_end_time, last_end_time + timedelta(minutes=duration)))\n        last_end_time = max(last_end_time, busy_time)\n\n    # Check for available time after the last busy slot till the end of work\n    if last_end_time + timedelta(minutes=duration) <= work_end:\n        available_times.append((last_end_time, last_end_time + timedelta(minutes=duration)))\n\n    # Return the first available time slot\n    if available_times:\n        start_time, end_time = available_times[0]\n        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    return None\n\n# Scheduling constraints\ncarol_schedule = [('10:00', '11:00'), ('14:30', '15:00'), ('15:30', '17:00')]\nmark_schedule = [('09:30', '10:00'), ('10:30', '17:00')]\nwork_hours = ('09:00', '17:00')\nduration = 30\n\n# Find meeting time\nmeeting_time = find_meeting_time(carol_schedule, mark_schedule, duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_501"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(jack_schedule, charlotte_schedule, meeting_duration):\n    # Work hours\n    start_time = 9 * 60  # 9:00 in minutes\n    end_time = 17 * 60    # 17:00 in minutes\n\n    # Create a list of busy times\n    busy_times = []\n    busy_times.extend(jack_schedule)\n    busy_times.extend(charlotte_schedule)\n\n    # Mark busy time slots\n    busy_slots = [False] * (end_time - start_time)\n    for start, end in busy_times:\n        for i in range(max(start_time, start), min(end_time, end)):\n            busy_slots[i - start_time] = True\n\n    # Find a suitable time slot for the meeting\n    for i in range(len(busy_slots) - meeting_duration + 1):\n        if not any(busy_slots[i:i+meeting_duration]):\n            meeting_start = start_time + i\n            meeting_end = meeting_start + meeting_duration\n            return f'{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}'\n\n# Schedules (start, end) in minutes\njack_schedule = [(9 * 60 + 30, 10 * 60 + 30), (11 * 60, 11 * 60 + 30), \n                 (12 * 60 + 30, 13 * 60), (14 * 60, 14 * 60 + 30), \n                 (16 * 60, 16 * 60 + 30)]\n\ncharlotte_schedule = [(9 * 60 + 30, 10 * 60), (10 * 60 + 30, 12 * 60), \n                      (12 * 60 + 30, 13 * 60 + 30), (14 * 60, 16 * 60)]\n\nmeeting_duration = 30  # in minutes\n\n# Find the meeting time\nmeeting_time = find_meeting_time(jack_schedule, charlotte_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_502"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define working hours\n    work_start = 9 * 60  # 9:00 AM in minutes\n    work_end = 17 * 60  # 5:00 PM in minutes\n    meeting_duration = 60  # 60 minutes meeting\n\n    # Existing schedules in minutes\n    ann_schedule = [(9 * 60 + 30, 10 * 60), (13 * 60, 14 * 60), (15 * 60, 16 * 60), (16 * 60 + 30, 17 * 60)]\n    kathleen_schedule = [(10 * 60, 10 * 60 + 30), (11 * 60, 11 * 60 + 30), (13 * 60, 14 * 60 + 30), (15 * 60, 16 * 60), (16 * 60 + 30, 17 * 60)]\n\n    # Generate the unavailable times\n    unavailable = []\n    unavailable.extend(ann_schedule)\n    unavailable.extend(kathleen_schedule)\n\n    # Consolidate unavailable times\n    unavailable.sort()\n    consolidated = []\n    for start, end in unavailable:\n        if not consolidated or consolidated[-1][1] < start:\n            consolidated.append((start, end))\n        else:\n            consolidated[-1] = (consolidated[-1][0], max(consolidated[-1][1], end))\n\n    # Find a suitable meeting time\n    last_end = work_start\n    for start, end in consolidated:\n        if last_end + meeting_duration <= start:\n            return f\"{last_end // 60:02}:{last_end % 60:02}:{last_end + meeting_duration // 60:02}:{last_end + meeting_duration % 60:02}\"\n        last_end = max(last_end, end)\n    \n    # Check the time after the last scheduled meeting until the end of the workday\n    if last_end + meeting_duration <= work_end:\n        return f\"{last_end // 60:02}:{last_end % 60:02}:{last_end + meeting_duration // 60:02}:{last_end + meeting_duration % 60:02}\"\n\n# Get the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_503"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(alexis_schedule, logan_schedule, meeting_duration, working_hours):\n    start_time = datetime.strptime(working_hours[0], \"%H:%M\")\n    end_time = datetime.strptime(working_hours[1], \"%H:%M\")\n    \n    # Create a list of all busy times\n    busy_times = []\n    \n    # Add Alexis's busy times\n    for time in alexis_schedule:\n        busy_times.append((datetime.strptime(time[0], \"%H:%M\"), datetime.strptime(time[1], \"%H:%M\")))\n    \n    # Add Logan's busy times\n    for time in logan_schedule:\n        busy_times.append((datetime.strptime(time[0], \"%H:%M\"), datetime.strptime(time[1], \"%H:%M\")))\n    \n    # Sort by start time\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Check for available slots\n    current_time = start_time\n    for busy_start, busy_end in busy_times:\n        # Check if there is enough time before the next busy schedule\n        if current_time + timedelta(minutes=meeting_duration) <= busy_start:\n            if current_time >= start_time and current_time + timedelta(minutes=meeting_duration) <= end_time:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n        current_time = max(current_time, busy_end)  # Move to the end of the busy time\n\n    # Check at the end of the day\n    if current_time + timedelta(minutes=meeting_duration) <= end_time:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n\n    return \"No available time found\"\n\n# Schedules\nalexis_schedule = [(\"11:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"14:30\", \"15:00\"), (\"16:30\", \"17:00\")]\nlogan_schedule = [(\"09:00\", \"09:30\"), (\"11:30\", \"12:30\"), (\"13:00\", \"14:30\"), (\"15:00\", \"17:00\")]\nmeeting_duration = 30  # in minutes\nworking_hours = [\"09:00\", \"17:00\"]\n\n# Find and print meeting time\nproposed_time = find_meeting_time(alexis_schedule, logan_schedule, meeting_duration, working_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_504"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\naustin_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nvincent_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Vincent's preference: avoid meetings after 12:30\nvincent_preference = datetime.strptime(\"12:30\", \"%H:%M\")\n\n# Function to find a suitable time\ndef find_meeting_time(austin_schedule, vincent_schedule, meeting_duration, vincent_preference):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Create free time slots for Vincent based on his schedule\n    free_slots = []\n    last_end = work_start\n\n    for busy_start, busy_end in vincent_schedule:\n        if last_end < busy_start:\n            free_slots.append((last_end, busy_start))\n        last_end = busy_end\n    \n    if last_end < work_end:\n        free_slots.append((last_end, work_end))\n\n    # Check available slots for meeting\n    for start, end in free_slots:\n        if end - start >= meeting_duration:\n            # Check if it fits with Vincent's preference\n            if end <= vincent_preference:\n                return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n            elif start >= vincent_preference and end <= work_end:\n                return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n\n# Get the meeting time\nmeeting_time = find_meeting_time(austin_schedule, vincent_schedule, meeting_duration, vincent_preference)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_505"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules for Evelyn and Jason\njason_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Function to find a suitable time slot\ndef find_meeting_time(jason_schedule, work_start, work_end, meeting_duration):\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if the proposed time slot is free for Jason\n        proposed_end_time = current_time + meeting_duration\n        is_available = True\n        \n        for start, end in jason_schedule:\n            if (current_time < end) and (proposed_end_time > start):\n                is_available = False\n                break\n        \n        if is_available:\n            return f\"{current_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n    return None\n\n# Call the function to get a proposed meeting time\nproposed_time = find_meeting_time(jason_schedule, work_start, work_end, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_506"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time range for the meeting\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Schedule constraints for Patricia and Harold\npatricia_busy_times = [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                       (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))]\n\nharold_busy_times = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                     (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                     (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                     (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                     (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Function to check if a proposed time slot is free for both participants\ndef is_time_slot_free(start, duration, busy_times):\n    proposed_end = start + duration\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and proposed_end > busy_start:\n            return False\n    return True\n\n# Find a time slot for the meeting\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_slot_free(current_time, meeting_duration, patricia_busy_times) and \\\n       is_time_slot_free(current_time, meeting_duration, harold_busy_times) and \\\n       current_time < datetime.strptime('14:00', '%H:%M'):\n        proposed_start = current_time.strftime('%H:%M')\n        proposed_end = (current_time + meeting_duration).strftime('%H:%M')\n        print(f\"{proposed_start}:{proposed_end}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_507"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participant_schedules, duration):\n    # Convert string times to datetime objects\n    start = datetime.datetime.strptime(start_time, \"%H:%M\")\n    end = datetime.datetime.strptime(end_time, \"%H:%M\")\n    \n    # Define meeting duration\n    meeting_duration = datetime.timedelta(hours=duration)\n    \n    # Initialize the available time range\n    available_start = start\n    available_end = end\n    \n    for schedule in participant_schedules:\n        busy_times = schedule['busy_times']\n        # Check and update available time based on busy times\n        for busy_start, busy_end in busy_times:\n            busy_start = datetime.datetime.strptime(busy_start, \"%H:%M\")\n            busy_end = datetime.datetime.strptime(busy_end, \"%H:%M\")\n            if available_start < busy_end and available_end > busy_start:\n                if available_start < busy_start:\n                    # Check if there's enough time before the busy period\n                    if (busy_start - available_start) >= meeting_duration:\n                        return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n                # Move the available start to the end of the busy time if it overlaps\n                available_start = max(available_start, busy_end)\n\n    # After checking all schedules, check if there is still time left for a meeting\n    if available_end - available_start >= meeting_duration:\n        return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Parameters\nstart_time = \"09:00\"\nend_time = \"17:00\"\nparticipant_schedules = [\n    {'name': 'Peter', 'busy_times': []},  # Wide open all day\n    {'name': 'Randy', 'busy_times': [('09:00', '12:30'), ('13:30', '17:00')]}\n]\nduration = 1  # One hour meeting\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(start_time, end_time, participant_schedules, duration)\nprint(meeting_time)  # Expected output is a valid time like HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_508"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define existing schedules\nwayne_schedule = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nlaura_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), working_hours_end),\n]\n\n# Create a list of all blocked times\nblocked_times = wayne_schedule + laura_schedule\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        end_time = current_time + meeting_duration\n        if all(not (start < end_time and current_time < end) for start, end in blocked_times):\n            return (current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\"))\n        current_time += timedelta(minutes=30)  # Check every half hour\n    return None\n\n# Get the proposed time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\nelse:\n    print(\"No suitable time found\")\n```",
            "count": "calendar_scheduling_example_509"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting constraints\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Schedule conflicts for Nicole and Arthur\nnicole_schedule = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\narthur_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Nicole's preference\nnicole_preference_start = datetime.strptime(\"16:00\", \"%H:%M\")\n\n# Function to find suitable meeting time\ndef find_meeting_time():\n    # Start searching from the preferred time for Nicole\n    start_time = max(nicole_preference_start, work_start)\n    \n    while start_time + meeting_duration <= work_end:\n        # Check if start_time conflicts with either participant's schedule\n        conflict = False\n        meeting_end_time = start_time + meeting_duration\n        \n        for start, end in nicole_schedule:\n            if (start_time < end) and (meeting_end_time > start):\n                conflict = True\n                break\n        \n        if not conflict:\n            for start, end in arthur_schedule:\n                if (start_time < end) and (meeting_end_time > start):\n                    conflict = True\n                    break\n        \n        if not conflict:\n            return start_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        \n        # If there's a conflict, move to the next time slot\n        start_time += timedelta(minutes=30)\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_510"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of Barbara and Scott\nbarbara_schedule = [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nscott_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Function to check if a proposed time slot is available for both participants\ndef is_available(start_time, end_time):\n    for start, end in barbara_schedule + scott_schedule:\n        if (start_time < end) and (end_time > start):\n            return False\n    return True\n\n# Iterate through possible time slots to find a suitable meeting time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    proposed_end = current_time + meeting_duration\n    if is_available(current_time, proposed_end):\n        print(f\"{current_time.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Check the next half hour\n```",
            "count": "calendar_scheduling_example_511"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(paul_schedule, nicholas_schedule, meeting_duration):\n    work_start = 9 * 60  # 9:00 AM in minutes\n    work_end = 17 * 60    # 5:00 PM in minutes\n    meeting_duration_minutes = meeting_duration * 60  # Convert hours to minutes\n\n    # Convert schedules to available time slots\n    paul_busy = [(start, end) for (start, end) in paul_schedule]\n    nicholas_busy = [(start, end) for (start, end) in nicholas_schedule]\n\n    # Combine busy times\n    all_busy_times = paul_busy + nicholas_busy\n    all_busy_times.sort()\n\n    # Find available time slots\n    available_slots = []\n    prev_end = work_start\n\n    for start, end in all_busy_times:\n        if prev_end + meeting_duration_minutes <= start:\n            available_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n\n    # Check the end of the day\n    if prev_end + meeting_duration_minutes <= work_end:\n        available_slots.append((prev_end, work_end))\n\n    # Filter available slots for time after 15:00\n    for slot_start, slot_end in available_slots:\n        if slot_start < 15 * 60:  # Only consider slots after 15:00\n            slot_start = max(slot_start, 15 * 60)\n        if slot_start + meeting_duration_minutes <= slot_end:\n            meeting_start = slot_start\n            meeting_end = slot_start + meeting_duration_minutes\n            return f\"{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}\"\n\n    return None  # If no valid time is found\n\n# Schedules for Paul and Nicholas\npaul_schedule = [(9 * 60, 10 * 60 + 30), (11 * 60, 11 * 60 + 30), (13 * 60 + 30, 14 * 60), (15 * 60, 15 * 60 + 30)]\nnicholas_schedule = [(9 * 60 + 30, 11 * 60), (11 * 60 + 30, 14 * 60), (14 * 60 + 30, 15 * 60), (15 * 60, 16 * 60)]\n\n# Meeting duration in hours\nmeeting_duration = 0.5\n\n# Find meeting time\nmeeting_time = find_meeting_time(paul_schedule, nicholas_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_512"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\n# Define the work hours and meeting duration\nwork_start = 9 * 60  # 9:00 AM in minutes\nwork_end = 17 * 60  # 5:00 PM in minutes\nmeeting_duration = 30  # in minutes\n\n# Mark's schedule in minutes\nmarks_schedule = [\n    (9 * 60, 9 * 60 + 30),  # 9:00 to 9:30\n    (10 * 60, 10 * 60 + 30),  # 10:00 to 10:30\n    (11 * 60, 11 * 60 + 30),  # 11:00 to 11:30\n    (12 * 60, 12 * 60 + 30),  # 12:00 to 12:30\n    (14 * 60, 14 * 60 + 30),  # 2:00 to 2:30\n    (15 * 60, 15 * 60 + 30),  # 3:00 to 3:30\n    (16 * 60, 17 * 60)  # 4:00 to 5:00\n]\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    # Start checking possible times from 15:30 onward\n    start_time = 15 * 60 + 30  # 15:30 in minutes\n    \n    for t in range(start_time, work_end - meeting_duration + 1):\n        # Check if the proposed time conflicts with Mark's schedule\n        conflict = False\n        for start, end in marks_schedule:\n            if (t < end) and (t + meeting_duration > start):\n                conflict = True\n                break\n        \n        if not conflict:\n            meeting_start_hour = t // 60\n            meeting_start_minute = t % 60\n            meeting_end_hour = (t + meeting_duration) // 60\n            meeting_end_minute = (t + meeting_duration) % 60\n            \n            return f\"{meeting_start_hour:02}:{meeting_start_minute:02}:{meeting_end_hour:02}:{meeting_end_minute:02}\"\n\n# Get the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_513"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nmartha_busy_times = [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                     (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))]\n\nnathan_busy_times = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                     (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                     (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                     (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                     (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free for both participants\ndef is_time_slot_free(start_time, duration):\n    end_time = start_time + duration\n    for busy_time in martha_busy_times:\n        if not (end_time <= busy_time[0] or start_time >= busy_time[1]):\n            return False\n    for busy_time in nathan_busy_times:\n        if not (end_time <= busy_time[0] or start_time >= busy_time[1]):\n            return False\n    return True\n\n# Find a suitable meeting time\nproposed_time = None\nfor start_hour in range(work_start.hour, work_end.hour):\n    for start_minute in [0, 30]:  # Check on the hour and half-hour\n        start_time = datetime.strptime(f'{start_hour}:{start_minute}', '%H:%M')\n        if start_time < work_start or start_time + meeting_duration > work_end:\n            continue\n        if is_time_slot_free(start_time, meeting_duration):\n            proposed_time = start_time\n            break\n    if proposed_time:\n        break\n\n# Output the proposed time in the desired format\nif proposed_time:\n    output_time = f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\"\n    print(output_time)  # Example output: 14:00:14:30\n```",
            "count": "calendar_scheduling_example_514"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(randy_schedule, dylan_schedule, meeting_duration):\n    # Work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert schedules to datetime objects\n    randy_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in randy_schedule]\n    dylan_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in dylan_schedule]\n    \n    # Combine busy times and sort them\n    busy_times = randy_busy_times + dylan_busy_times\n    busy_times.sort()\n    \n    # Find possible meeting slots\n    last_end_time = work_start\n    for start, end in busy_times:\n        if last_end_time + meeting_duration <= start:\n            return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\n        last_end_time = max(last_end_time, end)\n    \n    # Check the end of the workday\n    if last_end_time + meeting_duration <= work_end:\n        return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\n\n# Randy and Dylan's schedules and desired meeting duration\nrandy_schedule = [(\"10:00\", \"10:30\"), (\"15:00\", \"15:30\")]\ndylan_schedule = [(\"09:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:30\", \"13:00\"), (\"14:30\", \"16:00\")]\nmeeting_duration = timedelta(hours=1)\n\n# Calculate and output the proposed meeting time\nproposed_time = find_meeting_time(randy_schedule, dylan_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_515"
        },
        {
            "final_program_time": "{14:30:14:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    possible_times = []\n    \n    # Create a list of busy times\n    busy_times = []\n    for schedule in participants_schedules:\n        for busy_start, busy_end in schedule:\n            busy_times.append((busy_start, busy_end))\n    \n    # Check for gaps in schedule\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        is_conflict = False\n        for busy_start, busy_end in busy_times:\n            if current_time < busy_end and current_time + meeting_duration > busy_start:\n                is_conflict = True\n                break\n        if not is_conflict:\n            possible_times.append(current_time.strftime(\"%H:%M\"))\n        \n        current_time += timedelta(minutes=15)  # Increment by 15 minutes to find gaps\n        \n    return possible_times[0] if possible_times else None\n\nsophia_schedule = [] # Sophia is free all day\njesse_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nparticipants_schedules = [sophia_schedule, jesse_schedule]\nmeeting_duration = timedelta(hours=1)\n\nmeeting_time = find_meeting_time(participants_schedules, meeting_duration)\nprint(f\"{meeting_time}:{meeting_time}\")\n```",
            "count": "calendar_scheduling_example_516"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_hour, end_hour, carol_availability, frank_availability, duration):\n    meeting_start = datetime.strptime(start_hour, '%H:%M')\n    meeting_end = datetime.strptime(end_hour, '%H:%M')\n    \n    carol_start = datetime.strptime(carol_availability[0], '%H:%M')\n    carol_end = datetime.strptime(carol_availability[1], '%H:%M')\n    \n    frank_start = datetime.strptime(frank_availability[0], '%H:%M')\n    frank_end = datetime.strptime(frank_availability[1], '%H:%M')\n    \n    # Calculate the available time range for both\n    available_start = max(carol_start, frank_start, meeting_start)\n    available_end = min(carol_end, frank_end, meeting_end)\n    \n    # Check if there is enough time for the meeting\n    current_time = available_start\n    while current_time + timedelta(hours=duration) <= available_end:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(hours=duration)).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)  # Move to the next minute if not found\n    \n    return None\n\n# Constraints\ncarol_availability = [\"14:30\", \"17:00\"]\nfrank_availability = [\"9:00\", \"17:00\"]\nduration = 1  # hour\n\n# Find meeting time\nmeeting_time = find_meeting_time(\"9:00\", \"17:00\", carol_availability, frank_availability, duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_517"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy times for Diane\nbusy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find the earliest available time slot for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current time overlaps with any busy times\n        overlap = False\n        for start, end in busy_times:\n            if current_time < end and current_time + meeting_duration > start:\n                overlap = True\n                break\n        if not overlap:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n    return None\n\n# Output the result\nproposed_time = find_meeting_time()\nprint(f'{{{proposed_time}}}')\n```",
            "count": "calendar_scheduling_example_518"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(logan_schedule, alice_schedule, meeting_duration, work_hours):\n    # Convert 24-hour time into minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time.split(':'))\n        return hours * 60 + minutes\n\n    # Convert minutes back into 24-hour time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        return f\"{hours:02}:{minutes:02}\"\n\n    # Setup the work hours in minutes\n    work_start = time_to_minutes(work_hours[0])\n    work_end = time_to_minutes(work_hours[1])\n\n    # Create a busy time list\n    busy_times = []\n\n    for start, end in logan_schedule:\n        busy_times.append((time_to_minutes(start), time_to_minutes(end)))\n    for start, end in alice_schedule:\n        busy_times.append((time_to_minutes(start), time_to_minutes(end)))\n\n    # Sort busy time slots by start time\n    busy_times.sort()\n\n    # Find free slots\n    last_end = work_start\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            return f\"{minutes_to_time(last_end)}:{minutes_to_time(last_end + meeting_duration)}\"\n        last_end = max(last_end, end)\n\n    # Check after last busy time, if within working hours\n    if last_end + meeting_duration <= work_end:\n        return f\"{minutes_to_time(last_end)}:{minutes_to_time(last_end + meeting_duration)}\"\n\n# Existing schedules\nlogan_schedule = [(\"09:30\", \"10:30\")]\nalice_schedule = [(\"10:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:00\", \"12:30\"),\n                  (\"13:00\", \"14:00\"), (\"15:00\", \"16:30\")]\n\n# Meeting duration and work hours\nmeeting_duration = 60  # in minutes\nwork_hours = (\"09:00\", \"17:00\")\n\n# Find the proposed meeting time\nproposed_time = find_meeting_time(logan_schedule, alice_schedule, meeting_duration, work_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_519"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participant_schedules, meeting_duration, work_hours):\n    # Unpack work hours\n    start_time, end_time = work_hours\n\n    # Create a full schedule for the day in minutes\n    full_day_schedule = [0] * ((end_time - start_time) // 30)\n\n    # Mark busy times for each participant\n    for schedule in participant_schedules:\n        for busy_start, busy_end in schedule:\n            # Convert to index in half-hour slots\n            busy_start_index = (busy_start - start_time) // 30\n            busy_end_index = (busy_end - start_time) // 30\n            for i in range(busy_start_index, busy_end_index):\n                full_day_schedule[i] = 1  # Mark as busy\n\n    # Find a slot where both participants are free for the meeting duration\n    consecutive_free_slots = 0\n    for i in range(len(full_day_schedule)):\n        if full_day_schedule[i] == 0:\n            consecutive_free_slots += 1\n            # Check if we have enough free slots for the meeting duration\n            if consecutive_free_slots * 30 >= meeting_duration:\n                meeting_start_index = i - consecutive_free_slots + 1\n                meeting_start = start_time + (meeting_start_index * 30)\n                meeting_end = meeting_start + meeting_duration\n                return f\"{meeting_start//60:02}:{meeting_start%60:02}:{meeting_end//60:02}:{meeting_end%60:02}\"\n        else:\n            consecutive_free_slots = 0\n\n# Participant schedules: (start_time, end_time) in minutes\npatricia_schedule = [(9*60, 9*60 + 30), (10*60, 10*60 + 30), \n                     (13*60, 14*60), (14*60 + 30, 15*60), (15*60 + 30, 16*60)]\naustin_schedule = [(9*60 + 30, 10*60), (10*60 + 30, 12*60), \n                   (13*60, 14*60), (14*60 + 30, 15*60 + 30), (16*60, 17*60)]\n\n# Combine schedules\nparticipant_schedules = [patricia_schedule, austin_schedule]\n\n# Set meeting duration to 60 minutes\nmeeting_duration = 60\n\n# Work hours from 9:00 to 17:00 (in minutes from the start of the day)\nwork_hours = (9 * 60, 17 * 60)\n\n# Get proposed meeting time\nmeeting_time = find_meeting_time(participant_schedules, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_520"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting():\n    # Define the work hours and existing schedules\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = timedelta(minutes=30)\n\n    # Elijah's unavailable slots\n    elijah_busy_slots = [\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ]\n\n    # Find available time slot for both participants\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current time is within any busy slot for Elijah\n        busy = any(start <= current_time < end for start, end in elijah_busy_slots)\n        \n        if not busy:\n            return f'{current_time.strftime(\"%H:%M\")}:{(current_time + meeting_duration).strftime(\"%H:%M\")}'\n        \n        current_time += timedelta(minutes=30)  # Check next half hour\n\n# Output the proposed meeting time\nprint(schedule_meeting())\n```",
            "count": "calendar_scheduling_example_521"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Participants' schedules in minutes from 9:00\njeremy_schedule = [(600, 630), (660, 720), (780, 810), (900, 930), (990, 1020)]  # in minutes\ndenise_schedule = [(540, 600), (630, 720), (750, 960)]  # in minutes\n\n# Denise's preference\ndenise_preference_start = 750  # 12:30 in minutes\n\n# Function to check if a time slot is free for both participants\ndef is_time_slot_free(start, end):\n    for j_start, j_end in jeremy_schedule:\n        if (start < j_end and end > j_start):\n            return False\n    for d_start, d_end in denise_schedule:\n        if (start < d_end and end > d_start):\n            return False\n    return True\n\n# Generate the available time slots to check within work hours\nwork_start = 540  # 9:00 in minutes\nwork_end = 1020   # 17:00 in minutes\n\n# Find a suitable time slot\nfor start_time in range(work_start, work_end - meeting_duration + 1):\n    if start_time >= denise_preference_start:  # Check Denise's preference\n        end_time = start_time + meeting_duration\n        if is_time_slot_free(start_time, end_time):\n            # Convert back to HH:MM format\n            proposed_time = f\"{start_time // 60:02}:{start_time % 60:02}:{end_time // 60:02}:{end_time % 60:02}\"\n            print(proposed_time)\n            break\n```",
            "count": "calendar_scheduling_example_522"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for Ryan and Kenneth\nryan_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nkenneth_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Merge busy times for both participants\nbusy_times = ryan_busy + kenneth_busy\n\n# Sort the busy times by start time\nbusy_times.sort(key=lambda x: x[0])\n\n# Find free time slots\nfree_start = work_start\nfor start, end in busy_times:\n    if free_start + meeting_duration <= start:\n        # Found a free slot\n        print(f\"{free_start.strftime('%H:%M')}:{(free_start + meeting_duration).strftime('%H:%M')}\")\n        break\n    if free_start < end:\n        free_start = end\n\n# If no free slot was found until the end of the day\nif free_start + meeting_duration <= work_end:\n    print(f\"{free_start.strftime('%H:%M')}:{(free_start + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_523"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, duration, logan_schedule):\n    current_time = start_time\n    while current_time + duration <= end_time:\n        # Check if current_time overlaps with Logan's schedule\n        clash = any(current_time < meeting[1] and (current_time + duration) > meeting[0] for meeting in logan_schedule)\n        if not clash:\n            return current_time\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Define working hours\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Logan's existing schedule\nlogan_meeting_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Find a suitable meeting time\nproposed_time = find_meeting_time(working_hours[0], working_hours[1], meeting_duration, logan_meeting_times)\n\nif proposed_time:\n    end_time = proposed_time + meeting_duration\n    print(f\"{proposed_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_524"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find available time slots\ndef find_meeting_time(james_schedule, lawrence_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of all busy times\n    busy_times = []\n    for start, end in james_schedule + lawrence_schedule:\n        busy_times.append((start, end))\n\n    # Sort the busy times\n    busy_times.sort()\n\n    # Check for available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time overlaps with any busy times\n        meets = False\n        for start, end in busy_times:\n            if current_time < end and current_time + meeting_duration > start:\n                meets = True\n                break\n        \n        if not meets:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)\n\n# James' and Lawrence's schedules\njames_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n]\n\nlawrence_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Finding the meeting time\nmeeting_time = find_meeting_time(james_schedule, lawrence_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_525"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules\nharold_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nnicholas_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Combine all busy times\nall_busy = harold_busy + nicholas_busy\n\n# Sort busy times\nall_busy.sort()\n\n# Function to find suitable time slot\ndef find_time_slot():\n    current_time = work_start\n    \n    for busy_start, busy_end in all_busy:\n        # If there's free time before the next busy start\n        if current_time + meeting_duration <= busy_start:\n            # Check if this time is within work hours and is before Nicholas's preference\n            if current_time + meeting_duration <= datetime.strptime(\"14:30\", \"%H:%M\"):\n                return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        # Move current time past the busy period\n        current_time = max(current_time, busy_end)\n\n    # After the last busy period\n    if current_time + meeting_duration <= work_end:\n        return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Get the suitable time slot\nsuitable_time_slot = find_time_slot()\nprint(suitable_time_slot)\n```",
            "count": "calendar_scheduling_example_526"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_hour, end_hour, duration_minutes, busy_slots, prefer_end_hour):\n    start_time = datetime.strptime(start_hour, \"%H:%M\")\n    end_time = datetime.strptime(end_hour, \"%H:%M\")\n    duration = timedelta(minutes=duration_minutes)\n    \n    # Filter out busy slots according to preference on end hour\n    busy_slots = [slot for slot in busy_slots if datetime.strptime(slot[1], \"%H:%M\") <= datetime.strptime(prefer_end_hour, \"%H:%M\")]\n    \n    # Finding available time slots\n    current_start = start_time\n    for start, end in busy_slots:\n        busy_start = datetime.strptime(start, \"%H:%M\")\n        busy_end = datetime.strptime(end, \"%H:%M\")\n        \n        # Check if there is time before the busy slot\n        if current_start + duration <= busy_start:\n            return f\"{current_start.strftime('%H:%M')}:{(current_start + duration).strftime('%H:%M')}\"\n        \n        # Move the current start time to the end of the busy slot\n        if busy_end > current_start:\n            current_start = busy_end\n    \n    # Check if there's time after the last busy slot before end hour\n    if current_start + duration <= end_time:\n        return f\"{current_start.strftime('%H:%M')}:{(current_start + duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Participant schedules\nbusy_slots_megan = [(\"09:00\", \"09:30\"), (\"10:00\", \"14:00\"), (\"14:30\", \"17:00\")]\nstart_hour = \"09:00\"\nend_hour = \"17:00\"\nduration_minutes = 30\nprefer_end_hour = \"11:00\"\n\n# Finding a suitable meeting time\nmeeting_time = find_meeting_time(start_hour, end_hour, duration_minutes, busy_slots_megan, prefer_end_hour)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_527"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if two time intervals overlap\ndef time_intervals_overlap(start1, end1, start2, end2):\n    return max(start1, start2) < min(end1, end2)\n\n# Convert time string to datetime object\ndef convert_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Schedule constraints for Harold and Edward\nharold_schedule = [\n    (convert_time(\"10:00\"), convert_time(\"10:30\")),\n    (convert_time(\"11:00\"), convert_time(\"11:30\")),\n    (convert_time(\"13:30\"), convert_time(\"14:00\")),\n    (convert_time(\"15:30\"), convert_time(\"16:00\"))\n]\n\nedward_schedule = [\n    (convert_time(\"9:00\"), convert_time(\"11:30\")),\n    (convert_time(\"12:00\"), convert_time(\"12:30\")),\n    (convert_time(\"13:00\"), convert_time(\"14:30\")),\n    (convert_time(\"15:00\"), convert_time(\"15:30\")),\n    (convert_time(\"16:00\"), convert_time(\"17:00\"))\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = convert_time(\"9:00\")\nwork_end = convert_time(\"17:00\")\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    for hour in range(9, 17):  # from 9:00 to 16:00\n        for minute in [0, 30]:  # on the hour or half past\n            start_time = convert_time(f\"{hour}:{minute:02}\")\n            end_time = start_time + meeting_duration\n            \n            if end_time > work_end:  # meeting can't extend beyond work hours\n                continue\n            \n            # Check if the proposed time overlaps with anyone's schedule\n            if not any(time_intervals_overlap(start_time, end_time, start, end) for start, end in harold_schedule) and \\\n               not any(time_intervals_overlap(start_time, end_time, start, end) for start, end in edward_schedule):\n                if end_time <= convert_time(\"14:30\"):  # Edward prefers not after 14:30\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Output the proposed meeting time\nproposed_meeting_time = find_meeting_time()\nprint(proposed_meeting_time)\n```",
            "count": "calendar_scheduling_example_528"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(anthony_schedule, joshua_schedule, meeting_duration, preferences):\n    # Work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n\n    # Convert schedules to minutes\n    def convert_to_minutes(schedule):\n        time_slots = []\n        for start, end in schedule:\n            start_minutes = start[0] * 60 + start[1]\n            end_minutes = end[0] * 60 + end[1]\n            time_slots.append((start_minutes, end_minutes))\n        return time_slots\n\n    anthony_schedule_minutes = convert_to_minutes(anthony_schedule)\n    joshua_schedule_minutes = convert_to_minutes(joshua_schedule)\n\n    # Combine schedules to find busy times\n    busy_times = anthony_schedule_minutes + joshua_schedule_minutes\n    busy_times.sort()\n\n    # Find available slots\n    available_slots = []\n    last_end = work_start\n\n    for start, end in busy_times:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < work_end:\n        available_slots.append((last_end, work_end))\n\n    # Find a suitable time for the meeting\n    for start, end in available_slots:\n        if (end - start) >= meeting_duration:\n            proposed_start = start\n            proposed_end = start + meeting_duration\n            # Check if the proposed end time fits within preferences\n            if proposed_end <= work_end and proposed_start // 60 <= 15:  # According to Anthony's preference\n                return f\"{proposed_start // 60:02}:{proposed_start % 60:02}:{proposed_end // 60:02}:{proposed_end % 60:02}\"\n\n    return None\n\n# Existing schedules\nanthony_schedule = [((9, 0), (10, 0)), ((12, 30), (13, 0)), ((13, 30), (14, 0)), ((15, 30), (16, 30))]\njoshua_schedule = [((9, 0), (9, 30)), ((11, 0), (12, 30)), ((13, 0), (14, 0)), ((15, 30), (16, 30))]\nmeeting_duration = 30  # 30 minutes\n\n# Execute the function\nmeeting_time = find_meeting_time(anthony_schedule, joshua_schedule, meeting_duration, None)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_529"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Define Christopher's busy times\n    busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n\n    # Meeting duration\n    meeting_duration = timedelta(hours=1)\n\n    # Check all time slots in work hours for availability\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_end_time = current_time + meeting_duration\n        # Check if current time conflicts with busy times\n        if all(not (start < meeting_end_time and end > current_time) for start, end in busy_times):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check next 30 minutes\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_530"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_hour, end_hour, duration, schedules):\n    # Create a list of all possible time slots\n    time_slots = []\n    current_time = datetime.strptime(start_hour, \"%H:%M\")\n    end_time = datetime.strptime(end_hour, \"%H:%M\")\n    \n    while current_time + timedelta(hours=duration) <= end_time:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes to check next slot\n\n    # Check each time slot against participant schedules\n    for start in time_slots:\n        end = start + timedelta(hours=duration)\n        if all(not (start < meeting_end and end > meeting_start) for participant in schedules \n               for meeting_start, meeting_end in schedules[participant]):\n            return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n    \n    return None\n\n# Participants' schedules\nschedules = {\n    \"Ruth\": [],\n    \"Kayla\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function call to find meeting time\nmeeting_time = find_meeting_time(\"09:00\", \"17:00\", 1, schedules)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_531"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Helen's busy schedule\n    helen_busy_times = [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n\n    # Finding a suitable time\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        is_conflict = any(start < current_time + meeting_duration and current_time < end for start, end in helen_busy_times)\n\n        if not is_conflict:\n            # Check Helen's preference not to meet after 13:30\n            if current_time >= datetime.strptime(\"13:30\", \"%H:%M\"):\n                break\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n        # Increment the time by 30 minutes\n        current_time += timedelta(minutes=30)\n\n    return \"No available time found\"\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_532"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(alexis_schedule, dorothy_schedule, work_hours, meeting_duration):\n    # Parse the work hours\n    work_start, work_end = map(lambda x: datetime.strptime(x, \"%H:%M\"), work_hours)\n\n    # Create a list of busy times including work hours\n    busy_times = []\n    busy_times.extend(alexis_schedule)\n    busy_times.extend(dorothy_schedule)\n\n    # Sort the busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Initialize the available_time variable to the start of work hours\n    available_time_start = work_start\n\n    for time_slot in busy_times:\n        busy_start, busy_end = time_slot\n\n        # Check if there is free time before the busy slot\n        if available_time_start + timedelta(hours=meeting_duration) <= busy_start:\n            return f\"{available_time_start.strftime('%H:%M')}:{(available_time_start + timedelta(hours=meeting_duration)).strftime('%H:%M')}\"\n        \n        # Move the available_time to the end of the busy slot\n        available_time_start = max(available_time_start, busy_end)\n\n    # Check if there is remaining time after all busy slots\n    if available_time_start + timedelta(hours=meeting_duration) <= work_end:\n        return f\"{available_time_start.strftime('%H:%M')}:{(available_time_start + timedelta(hours=meeting_duration)).strftime('%H:%M')}\"\n\n    return None\n\n\n# Participant schedules as (start, end) tuples (in hours and minutes)\nalexis_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\ndorothy_schedule = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define work hours and meeting duration\nwork_hours = [\"09:00\", \"17:00\"]\nmeeting_duration = 1  # in hours\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(alexis_schedule, dorothy_schedule, work_hours, meeting_duration)\nprint(proposed_time)  # Output example: {15:30:16:30}\n```",
            "count": "calendar_scheduling_example_533"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for each participant\nrobert_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to check if a time slot is available\ndef is_available(start_time, end_time):\n    for busy_start, busy_end in robert_busy_times:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Find the earliest available time for the meeting\ncurrent_time = working_hours_start\nwhile current_time + meeting_duration <= working_hours_end:\n    if is_available(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Check the next half-hour slot\n```",
            "count": "calendar_scheduling_example_534"
        },
        {
            "final_program_time": "{9:00:9:00}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\ndaniel_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"))]\n\ndonna_schedule = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Find the first available time for a meeting\ndef find_meeting_time(daniel_schedule, donna_schedule):\n    # Create an overall busy schedule\n    busy_times = daniel_schedule + donna_schedule\n    busy_times.sort()  # Sort the times\n\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is free\n        is_free = True\n        for start, end in busy_times:\n            if current_time < end and current_time + meeting_duration > start:\n                is_free = False\n                break\n        if is_free:\n            return current_time.strftime(\"%H:%M:%H:%M\")\n        current_time += timedelta(minutes=1)  # Check the next minute\n\n    return None\n\n# Get the available meeting time\nmeeting_time = find_meeting_time(daniel_schedule, donna_schedule)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_535"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours and existing schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nlogans_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\npauls_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Combine schedules to find available time\ndef is_available(start_time, end_time, schedule):\n    for (busy_start, busy_end) in schedule:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if is_available(current_time, end_time, logans_schedule) and is_available(current_time, end_time, pauls_schedule):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_536"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\njudith_busy_times = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))]\n\nterry_busy_times = [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\ndef find_available_time():\n    # Create a busy schedule combining both participants\n    busy_times = sorted(judith_busy_times + terry_busy_times)\n    \n    # Check for available slots\n    current_start = work_start\n    for busy_start, busy_end in busy_times:\n        # If there's a gap between current_end and busy_start\n        if current_start + meeting_duration <= busy_start:\n            return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n        current_start = max(current_start, busy_end)\n    \n    # After the last busy time, check if there's time until work_end\n    if current_start + meeting_duration <= work_end:\n        return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_537"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ken_schedule, bar_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert blocked times into datetime objects\n    ken_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in ken_schedule]\n    bar_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in bar_schedule]\n    \n    # Creating a combined busy schedule\n    busy_times = ken_busy_times + bar_busy_times\n    busy_times.sort()  # Sort by start time\n    \n    # Finding available slots\n    last_end = work_start\n    for start, end in busy_times:\n        if last_end + timedelta(minutes=meeting_duration) <= start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n    \n    # After the last busy time, check if there's room until the end of work\n    if last_end + timedelta(minutes=meeting_duration) <= work_end:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n    \n    return None\n\n# Existing schedules\nken_schedule = [(\"11:00\", \"11:30\"), (\"12:00\", \"12:30\")]\nbar_schedule = [(\"09:00\", \"11:30\"), (\"12:30\", \"17:00\")]\nmeeting_duration = 30  # minutes\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(ken_schedule, bar_schedule, meeting_duration)\nprint(meeting_time)  # Expected output: 11:30:12:00\n```",
            "count": "calendar_scheduling_example_538"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(andre_schedule, abigail_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    # Constraints\n    areas_andrea_busy = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in andre_schedule]\n    areas_abigail_busy = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in abigail_schedule]\n    \n    # Create a list of all busy times in the entire day\n    busy_times = areas_andrea_busy + areas_abigail_busy\n    busy_times.sort()\n\n    # Check for availability slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        \n        # Check if the current slot is free\n        if all(not (start < next_time and end > current_time) for start, end in busy_times):\n            # Check Andrea's preference\n            if current_time >= datetime.strptime(\"12:30\", \"%H:%M\"):\n                break  # Stop checking after 12:30\n            \n            return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # increment time by 1 minute\n\n    return \"No available time\"\n\nandre_schedule = [(\"10:00\", \"10:30\"), (\"11:30\", \"12:00\")]\nabigail_schedule = [(\"09:00\", \"12:00\"), (\"12:30\", \"14:00\"), (\"14:30\", \"15:30\"), (\"16:30\", \"17:00\")]\nmeeting_duration = 30  # in minutes\n\nprint(find_meeting_time(andre_schedule, abigail_schedule, meeting_duration))\n```",
            "count": "calendar_scheduling_example_539"
        },
        {
            "final_program_time": "{2:00:3:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(daniel_busy, christopher_busy, work_start, work_end, meeting_duration):\n    # Convert time to minutes for easier comparison\n    def time_to_minutes(time_str):\n        h, m = map(int, time_str.split(':'))\n        return h * 60 + m\n    \n    def minutes_to_time(minutes):\n        return f\"{minutes // 60:02}:{minutes % 60:02}\"\n\n    work_start_minutes = time_to_minutes(work_start)\n    work_end_minutes = time_to_minutes(work_end)\n    meeting_duration_minutes = meeting_duration\n\n    # Free time slots for both participants\n    daniel_free_slots = []\n    christopher_free_slots = []\n\n    # Get free slots for Daniel\n    last_end = work_start_minutes\n    for start, end in daniel_busy:\n        if last_end < start:\n            daniel_free_slots.append((last_end, start))\n        last_end = end\n    if last_end < work_end_minutes:\n        daniel_free_slots.append((last_end, work_end_minutes))\n\n    # Get free slots for Christopher\n    last_end = work_start_minutes\n    for start, end in christopher_busy:\n        if last_end < start:\n            christopher_free_slots.append((last_end, start))\n        last_end = end\n    if last_end < work_end_minutes:\n        christopher_free_slots.append((last_end, work_end_minutes))\n\n    # Find overlapping free slots for both participants that can accommodate the meeting\n    meeting_time_slot = None\n    for d_start, d_end in daniel_free_slots:\n        for c_start, c_end in christopher_free_slots:\n            start = max(d_start, c_start)\n            end = min(d_end, c_end)\n            if end - start >= meeting_duration_minutes:\n                meeting_time_slot = (start, start + meeting_duration_minutes)\n                break\n        if meeting_time_slot:\n            break\n\n    if meeting_time_slot:\n        return f\"{minutes_to_time(meeting_time_slot[0])}:{minutes_to_time(meeting_time_slot[1])}\"\n    else:\n        return \"No suitable time found\"\n\n# Schedules based on given problem\ndaniel_busy = [(30, 60), (60, 90), (180, 240), (300, 330), (390, 420)]  # 9:30 to 10:00, 11:00 to 11:30, ...\nchristopher_busy = [(30, 120), (180, 210), (240, 270), (300, 330), (360, 390)]  # 9:30 to 11:00, 1:30 to 2:00, ...\n\n# Meeting details\nwork_start = \"09:00\"\nwork_end = \"17:00\"\nmeeting_duration = 60  # 1 hour\n\n# Find and print a suitable time\nprint(find_meeting_time(daniel_busy, christopher_busy, work_start, work_end, meeting_duration))\n```",
            "count": "calendar_scheduling_example_540"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the participants' schedules as blocked times\nkayla_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nrebecca_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Combine and sort the blocked times\nblocked_times = sorted(kayla_schedule + rebecca_schedule)\n\n# Find suitable meeting time\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    # Check if the current time falls within any blocked time\n    is_blocked = False\n    for start, end in blocked_times:\n        if current_time < end and current_time + meeting_duration > start:\n            is_blocked = True\n            break\n    \n    if not is_blocked:\n        # Found a suitable time\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n\n    current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n```",
            "count": "calendar_scheduling_example_541"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(jean_busy, amanda_busy, meeting_duration, work_hours):\n    # Work hours should be a tuple of (start_time, end_time)\n    start_time, end_time = work_hours\n    \n    # Convert times to minutes for easier comparison\n    def time_to_minutes(time_str):\n        hours, minutes = map(int, time_str.split(':'))\n        return hours * 60 + minutes\n    \n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes = minutes % 60\n        return f\"{hours:02}:{minutes:02}\"\n    \n    # Create a list of all busy times in minutes\n    busy_times = []\n    for busy in jean_busy + amanda_busy:\n        busy_start = time_to_minutes(busy[0])\n        busy_end = time_to_minutes(busy[1])\n        busy_times.append((busy_start, busy_end))\n    \n    # Sort the busy times\n    busy_times.sort()\n    \n    # Merge overlapping busy times\n    merged_busy = []\n    for current_start, current_end in busy_times:\n        if not merged_busy or merged_busy[-1][1] < current_start:\n            merged_busy.append((current_start, current_end))\n        else:\n            merged_busy[-1] = (merged_busy[-1][0], max(merged_busy[-1][1], current_end))\n    \n    # Find a free time slot for the meeting\n    last_end_time = time_to_minutes(start_time)\n    for busy_start, busy_end in merged_busy:\n        # Check time before this busy time\n        if busy_start - last_end_time >= meeting_duration:\n            return f\"{minutes_to_time(last_end_time)}:{minutes_to_time(last_end_time + meeting_duration)}\"\n        last_end_time = max(last_end_time, busy_end)\n    \n    # Check time after the last busy time\n    if end_time - last_end_time >= meeting_duration:\n        return f\"{minutes_to_time(last_end_time)}:{minutes_to_time(last_end_time + meeting_duration)}\"\n    \n    return \"No available time slot\"\n\njean_busy = [(\"09:30\", \"10:00\"), (\"10:30\", \"11:00\"), (\"12:30\", \"13:30\")]\namanda_busy = [(\"09:00\", \"10:30\"), (\"11:30\", \"12:30\"), (\"13:00\", \"14:00\"), (\"15:30\", \"17:00\")]\nmeeting_duration = 60  # in minutes\nwork_hours = (\"09:00\", \"17:00\")\n\nmeeting_time = find_meeting_time(jean_busy, amanda_busy, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_542"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(james_busy, john_busy, meeting_duration):\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n\n    # Create a list of busy slots for both participants\n    busy_slots = []\n    for start, end in james_busy:\n        busy_slots.append((start, end))\n    for start, end in john_busy:\n        busy_slots.append((start, end))\n\n    # Sort the busy slots\n    busy_slots.sort()\n\n    # Merge the busy slots\n    merged_slots = []\n    for start, end in busy_slots:\n        if not merged_slots or merged_slots[-1][1] < start:\n            merged_slots.append((start, end))\n        else:\n            merged_slots[-1] = (merged_slots[-1][0], max(merged_slots[-1][1], end))\n\n    # Find free slots\n    free_slots = []\n    last_end = work_start\n\n    for start, end in merged_slots:\n        if last_end + meeting_duration <= start:\n            free_slots.append((last_end, start))\n        last_end = end\n\n    # Check for free time after the last busy slot\n    if last_end + meeting_duration <= work_end:\n        free_slots.append((last_end, work_end))\n\n    # Return the first available time that works\n    if free_slots:\n        start_time = free_slots[0][0]\n        end_time = start_time + meeting_duration\n        return f\"{start_time // 60:02}:{start_time % 60:02}:{end_time // 60:02}:{end_time % 60:02}\"\n    return None\n\njames_busy = [(11 * 60 + 30, 12 * 60), (14 * 60 + 30, 15 * 60)]\njohn_busy = [(9 * 60 + 30, 11 * 60), (11 * 60 + 30, 12 * 60), (12 * 60 + 30, 13 * 60 + 30), (14 * 60 + 30, 16 * 60 + 30)]\nmeeting_duration = 60  # Meeting duration in minutes\n\nprint(find_meeting_time(james_busy, john_busy, meeting_duration))\n```",
            "count": "calendar_scheduling_example_543"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, deborah_schedule, albert_schedule, duration):\n    # Create a list of free time slots for Albert\n    free_slots = []\n    \n    current_time = start_time\n    while current_time < end_time:\n        if current_time.time() < albert_schedule[0].time() or current_time.time() > albert_schedule[-1].time():\n            free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)\n    \n    # Check available times for the meeting\n    for start in free_slots:\n        if all(not(albert_schedule[i].time() <= start.time() <= albert_schedule[i + 1].time()) for i in range(len(albert_schedule) - 1)):\n            possible_meeting_time = start\n            meeting_end_time = start + timedelta(minutes=duration)\n            if meeting_end_time.time() <= end_time.time():\n                return f\"{start.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n    \n    return \"No available slot\"\n\n# Meeting requirements\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\ndeborah_schedule = []\nalbert_schedule = [datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                  datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"),\n                  datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")]\nduration = 30  # minutes\n\nproposed_time = find_meeting_time(start_time, end_time, deborah_schedule, albert_schedule, duration)\nprint(proposed_time)  # This will show the proposed meeting time\n```",
            "count": "calendar_scheduling_example_544"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(schedule_christine, schedule_richard, meeting_duration):\n    work_hours_start = 9 * 60  # Convert to minutes\n    work_hours_end = 17 * 60    # Convert to minutes\n    \n    # Convert the busy schedules to minutes\n    busy_christine = []\n    for start, end in schedule_christine:\n        busy_christine.append((start[0] * 60 + start[1], end[0] * 60 + end[1]))\n        \n    busy_richard = []\n    for start, end in schedule_richard:\n        busy_richard.append((start[0] * 60 + start[1], end[0] * 60 + end[1]))\n        \n    # Create a combined busy schedule for both participants\n    busy_schedule = busy_christine + busy_richard\n    busy_schedule.sort()\n    \n    # Find the available time slots\n    previous_end = work_hours_start\n    for start, end in busy_schedule:\n        if previous_end + meeting_duration <= start:\n            return f\"{previous_end // 60:02}:{previous_end % 60:02}:{previous_end + meeting_duration // 60:02}:{previous_end + meeting_duration % 60:02}\"\n        previous_end = max(previous_end, end)\n        \n    # Check for time after the last busy slot\n    if previous_end + meeting_duration <= work_hours_end:\n        return f\"{previous_end // 60:02}:{previous_end % 60:02}:{previous_end + meeting_duration // 60:02}:{previous_end + meeting_duration % 60:02}\"\n\n# Define the schedules for Christine and Richard in ((hour, minute), (hour, minute)) format\nschedule_christine = [((12, 0), (12, 30)), ((13, 0), (13, 30))]\nschedule_richard = [((9, 0), (12, 0)), ((13, 0), (13, 30)), ((14, 0), (14, 30)), ((15, 30), (16, 0)), ((16, 30), (17, 0))]\n\n# Meeting duration in minutes\nmeeting_duration = 60\n\n# Calculate and print the proposed time\nproposed_time = find_meeting_time(schedule_christine, schedule_richard, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_545"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration and constraints\nmeeting_duration = timedelta(hours=1)\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nlauren_preference_end = datetime.strptime(\"11:30\", \"%H:%M\")\n\n# Ruth's existing meetings\nruth_meetings = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(start_time, end_time, lauren_preference_end, meeting_duration, ruth_meetings):\n    current_time = start_time\n\n    while current_time + meeting_duration <= end_time:\n        # Check if current_time overlaps with any of Ruth's meetings\n        available = True\n        for meeting_start, meeting_end in ruth_meetings:\n            if current_time < meeting_end and (current_time + meeting_duration) > meeting_start:\n                available = False\n                break\n                \n        # Check if the found time is suitable for Lauren's preference\n        if available and current_time + meeting_duration <= lauren_preference_end:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        # Move to the next time increment (in this case, 30 minutes)\n        current_time += timedelta(minutes=30)\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(start_time, end_time, lauren_preference_end, meeting_duration, ruth_meetings)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_546"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\n# Define the working hours and the busy schedule of Jacob\nworking_hours = (9, 17)\njacob_busy_intervals = [\n    (9, 10.5),  # 9:00 to 10:30\n    (11.5, 12), # 11:30 to 12:00\n    (12.5, 13), # 12:30 to 13:00\n    (13.5, 15), # 13:30 to 15:00\n    (15.5, 16), # 15:30 to 16:00\n    (16.5, 17)  # 16:30 to 17:00\n]\n\n# Meeting duration in hours\nmeeting_duration = 1\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(working_hours, busy_intervals, meeting_duration):\n    start_hour, end_hour = working_hours\n    current_time = start_hour\n    \n    while current_time + meeting_duration <= end_hour:\n        # Check if current_time is within any busy interval\n        is_busy = any(start <= current_time < end for start, end in busy_intervals)\n        \n        # If the current_time is not busy, check for end time\n        if not is_busy:\n            if not any(start < current_time + meeting_duration <= end for start, end in busy_intervals):\n                return f\"{int(current_time):02d}:00:{int(current_time + meeting_duration):02d}:00\"\n        \n        current_time += 0.5  # Increment by half an hour to check the next slot\n    \n    return None  # No suitable time found\n\n# Find the meeting time\nmeeting_time = find_meeting_time(working_hours, jacob_busy_intervals, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_547"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Nicole's existing schedule\nnicole_availability = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                       (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Nicole's preference\nnicole_preference_start = datetime.strptime(\"16:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Check for available slots after Nicole's preference\n    start_time = nicole_preference_start\n    while start_time + meeting_duration <= work_end:\n        # Check if the proposed time clashes with Nicole's schedule\n        clash = False\n        for start, end in nicole_availability:\n            if start_time < end and start_time + meeting_duration > start:\n                clash = True\n                break\n        \n        # If no clash, return the proposed time\n        if not clash:\n            return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Move to the next half hour slot\n        start_time += timedelta(minutes=30)\n    \n    return \"No available time\"\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_548"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\n# Define work hours and meeting duration\r\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\r\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\r\nmeeting_duration = timedelta(minutes=30)\r\n\r\n# Define existing schedules as time ranges\r\ncarl_schedule = [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\r\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\r\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\r\n\r\nrussell_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\r\n                    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\r\n                    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\r\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\r\n\r\n# Function to find a suitable meeting time\r\ndef find_meeting_time(carl_schedule, russell_schedule, meeting_duration):\r\n    # Create a timeline for the entire workday\r\n    current_time = work_start\r\n    while current_time + meeting_duration <= work_end:\r\n        end_time = current_time + meeting_duration\r\n        \r\n        # Check if current time conflicts with Carl's schedule\r\n        carl_busy = any(start <= current_time < end or start < end_time <= end for start, end in carl_schedule)\r\n        # Check if current time conflicts with Russell's schedule\r\n        russell_busy = any(start <= current_time < end or start < end_time <= end for start, end in russell_schedule)\r\n        \r\n        # Check Carl's preference of not meeting after 10:30\r\n        if current_time > datetime.strptime(\"10:30\", \"%H:%M\"):\r\n            break\r\n        \r\n        if not carl_busy and not russell_busy:\r\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\r\n\r\n        current_time += timedelta(minutes=1)\r\n\r\n# Find a suitable time for the meeting\r\nmeeting_time = find_meeting_time(carl_schedule, russell_schedule, meeting_duration)\r\nprint(meeting_time)\r\n```",
            "count": "calendar_scheduling_example_549"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, duration, busy_slots):\n    current_time = start_time\n    while current_time + duration <= end_time:\n        if all(not (current_time < busy_end and current_time + duration > busy_start) for busy_start, busy_end in busy_slots):\n            return current_time\n        current_time += timedelta(minutes=1)\n    return None\n\n# Define constants\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Deborah's busy slots on Monday\ndeborah_busy_slots = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Search for a meeting time\nmeeting_time = find_meeting_time(work_start, work_end.replace(hour=14), meeting_duration, deborah_busy_slots)\n\n# Output the result in desired format\nif meeting_time:\n    end_time = meeting_time + meeting_duration\n    print(f\"{meeting_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_550"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nimport datetime\n\n# Define the working hours and meeting duration\nstart_time = datetime.time(9, 0)\nend_time = datetime.time(17, 0)\nmeeting_duration = datetime.timedelta(minutes=30)\n\n# Define participants' schedules as busy time intervals (start, end)\ndaniel_schedule = [\n    (datetime.time(10, 0), datetime.time(10, 30)),\n    (datetime.time(11, 30), datetime.time(12, 0)),\n    (datetime.time(12, 30), datetime.time(13, 0)),\n    (datetime.time(14, 30), datetime.time(16, 0)),\n]\n\nanna_schedule = [\n    (datetime.time(9, 0), datetime.time(9, 30)),\n    (datetime.time(10, 0), datetime.time(12, 0)),\n    (datetime.time(12, 30), datetime.time(17, 0)),\n]\n\n# Function to check if a time slot is free\ndef is_time_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Iterate through potential meeting times\nmeeting_time = None\ncurrent_time = datetime.datetime.combine(datetime.date.today(), start_time)\n\nwhile current_time.time() <= end_time:\n    meeting_end_time = (current_time + meeting_duration).time()\n    \n    if meeting_end_time <= end_time:\n        if is_time_free(current_time.time(), meeting_end_time, daniel_schedule) and is_time_free(current_time.time(), meeting_end_time, anna_schedule):\n            if current_time.time() < datetime.time(10, 0):  # Prefer before 10:00\n                meeting_time = current_time.time()\n                break\n    current_time += datetime.timedelta(minutes=30)\n\n# Output the proposed meeting time in the required format\nif meeting_time:\n    print(f\"{meeting_time.strftime('%H:%M')}:{(datetime.datetime.combine(datetime.date.today(), meeting_time) + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_551"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(brian_schedule, margaret_schedule, meeting_duration, work_hours):\n    # Parse work hours\n    work_start = datetime.strptime(work_hours[0], \"%H:%M\")\n    work_end = datetime.strptime(work_hours[1], \"%H:%M\")\n    \n    # Generate all time slots for the day\n    current_time = work_start\n    time_slots = []\n    while current_time + meeting_duration <= work_end:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    \n    # Filter out time slots based on Margaret's schedule\n    valid_slots = []\n    for slot in time_slots:\n        meeting_start = slot\n        meeting_end = slot + meeting_duration\n        if meeting_start >= work_start and meeting_end <= work_end: \n            if not any(meeting_start < end and meeting_end > start for start, end in margaret_schedule):\n                valid_slots.append(slot)\n    \n    return valid_slots[0] if valid_slots else None  # Return the first valid time slot\n\n# Example Input\nbrian_schedule = []  # Brian has no meetings\nmargaret_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\nmeeting_duration = timedelta(minutes=30)\nwork_hours = (\"09:00\", \"17:00\")\n\n# Find the meeting time\nmeeting_start_time = find_meeting_time(brian_schedule, margaret_schedule, meeting_duration, work_hours)\n\n# Format the output in HH:MM:HH:MM\nif meeting_start_time:\n    meeting_end_time = meeting_start_time + meeting_duration\n    output = f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n    print(output)\nelse:\n    print(\"No suitable meeting time found.\")\n```",
            "count": "calendar_scheduling_example_552"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(eric_schedule, henry_schedule, meeting_duration):\n    # Work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n\n    # Convert schedules to time slots in minutes\n    eric_busy = [(start, start + duration) for start, duration in eric_schedule]\n    henry_busy = [(start, start + duration) for start, duration in henry_schedule]\n\n    # Combine and sort busy times\n    busy_times = sorted(eric_busy + henry_busy)\n\n    # Find available slots\n    last_end = work_start\n    for start, end in busy_times:\n        # Check for available time before the next busy period\n        if last_end + meeting_duration <= start:\n            return f\"{last_end // 60:02}:{last_end % 60:02}:{(last_end + meeting_duration) // 60:02}:{(last_end + meeting_duration) % 60:02}\"\n        last_end = max(last_end, end)\n\n    # Check if there's time after the last busy period until work end\n    if last_end + meeting_duration <= work_end:\n        return f\"{last_end // 60:02}:{last_end % 60:02}:{(last_end + meeting_duration) // 60:02}:{(last_end + meeting_duration) % 60:02}\"\n\n    return None\n\n# Eric's schedule (busy times during the day)\neric_schedule = [(12 * 60, 60), (14 * 60, 60)]  # Meetings at 12:00-13:00 and 14:00-15:00\n\n# Henry's schedule (busy times during the day)\nhenry_schedule = [\n    (9 * 60 + 30, 30), (10 * 60 + 30, 30), (11 * 60 + 30, 60), \n    (13 * 60, 30), (14 * 60 + 30, 30), (16 * 60, 60)\n]  # Meetings at 9:30-10:00, 10:30-11:00, etc.\n\n# Meeting duration in minutes\nmeeting_duration = 30  # Half an hour\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(eric_schedule, henry_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_553"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\n# Define participants' schedules\r\ntheresa_schedule = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\r\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\r\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\r\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\r\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\r\n\r\nfrances_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\r\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\r\n\r\n# Meeting duration\r\nmeeting_duration = timedelta(hours=1)\r\n\r\n# Work hours\r\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\r\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\r\n\r\n# Merge schedules\r\nbusy_slots = sorted(theresa_schedule + frances_schedule)\r\n\r\n# Find available time slots\r\navailable_slots = []\r\nprev_end = work_start\r\n\r\nfor start, end in busy_slots:\r\n    if start > prev_end:\r\n        available_slots.append((prev_end, start))\r\n    prev_end = max(prev_end, end)\r\n\r\n# Check for a suitable meeting time\r\nfor start, end in available_slots:\r\n    if end - start >= meeting_duration:\r\n        proposed_start = start\r\n        proposed_end = start + meeting_duration\r\n        print(f\"{{{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}}}\")\r\n        break\r\n```",
            "count": "calendar_scheduling_example_554"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(evelyn_availability, randy_availability, meeting_duration, preference):\n    # Create a list of time slots\n    time_slots = []\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every half hour\n\n    # Filter available slots based on participant schedules\n    available_slots = []\n    for slot in time_slots:\n        meeting_end_time = slot + meeting_duration\n        if (slot >= evelyn_availability[0] and meeting_end_time <= evelyn_availability[1] and\n            slot >= randy_availability[0] and meeting_end_time <= randy_availability[1]):\n            available_slots.append(slot)\n\n    # Further filter based on Evelyn's preference\n    for slot in available_slots:\n        if slot.hour < 13:  # Evelyn prefers meeting before 13:00\n            return f\"{slot.strftime('%H:%M')}:{(slot + meeting_duration).strftime('%H:%M')}\"\n\n    return \"No available time slot found\"\n\n# Define the participants' schedules\nevelyn_availability = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))\nrandy_availability = (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Find suitable meeting time\nmeeting_time = find_meeting_time(evelyn_availability, randy_availability, meeting_duration, None)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_555"
        },
        {
            "final_program_time": "{10:30:10:30}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time\ndef find_meeting_time(eric_schedule, deborah_schedule, start_time, end_time, duration):\n    current_time = start_time\n    while current_time + duration <= end_time:\n        eric_busy = any(start <= current_time < end for start, end in eric_schedule)\n        deborah_busy = any(start <= current_time < end for start, end in deborah_schedule)\n        \n        if not eric_busy and not deborah_busy:\n            if current_time.time() < datetime.strptime(\"15:00\", \"%H:%M\").time():\n                return current_time.strftime(\"%H:%M:%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n# Define participant schedules\neric_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))\n]\n\ndeborah_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))\n]\n\n# Define work hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Find the meeting time\nproposed_time = find_meeting_time(eric_schedule, deborah_schedule, start_time, end_time, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_556"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(william_schedule, natalie_schedule, meeting_duration):\n    # Combine and sort the schedules\n    all_blocks = william_schedule + natalie_schedule\n    all_blocks.sort()\n\n    # Define the work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Initialize the possible meeting times\n    free_times = []\n\n    # Check for gaps between the blocks\n    previous_end = work_start\n\n    for start, end in all_blocks:\n        if previous_end < start:\n            free_times.append((previous_end, start))\n        previous_end = max(previous_end, end)\n\n    # Check after the last meeting until the work end\n    if previous_end < work_end:\n        free_times.append((previous_end, work_end))\n\n    # Determine suitable time slot for the meeting duration\n    for start, end in free_times:\n        if end - start >= meeting_duration:\n            proposed_start = start\n            proposed_end = start + meeting_duration\n            return proposed_start.strftime(\"%H:%M\") + \":\" + proposed_end.strftime(\"%H:%M\")\n\n    return None\n\n# Participant schedules as tuples of (start_time, end_time)\nwilliam_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nnatalie_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration of one hour\nmeeting_duration = timedelta(hours=1)\n\n# Find a suitable meeting time\nproposed_time = find_meeting_time(william_schedule, natalie_schedule, meeting_duration)\nprint(f\"Proposed Meeting Time: {proposed_time}\")\n```",
            "count": "calendar_scheduling_example_557"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define meeting parameters\nmeeting_duration = timedelta(minutes=30)\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participant availability\nanthony_availability = [(start_time, end_time)]\ndouglas_availability = [(start_time + timedelta(hours=12), start_time + timedelta(hours=12, minutes=30)), \n                        (start_time + timedelta(hours=15), end_time)]\n\n# Adjust Anthony's preference\nanthony_preference_start = datetime.strptime(\"14:00\", \"%H:%M\")\navailable_slots = []\n\n# Find available meeting slots\nfor start, end in anthony_availability:\n    for d_start, d_end in douglas_availability:\n        # Check if the meeting can start after Anthony's preference\n        if start < anthony_preference_start:\n            start = anthony_preference_start\n        \n        # Find overlapping time slots\n        meeting_start = max(start, d_start)\n        meeting_end = meeting_start + meeting_duration\n\n        if meeting_end <= min(end, d_end):\n            available_slots.append((meeting_start, meeting_end))\n\n# Select the first available slot\nif available_slots:\n    proposed_time = available_slots[0]\n    output_time = f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}\"\nelse:\n    output_time = \"No available slots\"\n\nprint(output_time)  # Output in format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_558"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(larry_schedule, james_schedule, duration):\n    available_times = []\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n\n    # Convert schedules to a list of busy times in minutes\n    busy_times = []\n    for start, end in larry_schedule + james_schedule:\n        busy_times.append((start, end))\n\n    # Create a timeline for the entire workday\n    current_time = work_start\n    while current_time < work_end:\n        # Check if current time is busy\n        busy = any(start <= current_time < end for start, end in busy_times)\n        if not busy:\n            available_times.append(current_time)\n        current_time += 1\n\n    # Find a slot that fits the duration\n    for start_time in available_times:\n        end_time = start_time + duration\n        if end_time in available_times:\n            return f\"{start_time // 60:02}:{start_time % 60:02}:{end_time // 60:02}:{end_time % 60:02}\"\n\nlarry_schedule = [(11 * 60, 12 * 60 + 30), (13 * 60, 13 * 60 + 30), (14 * 60 + 30, 15 * 60 + 30)]\njames_schedule = [(10 * 60, 10 * 60 + 30), (11 * 60 + 30, 12 * 60 + 30), (13 * 60 + 30, 14 * 60), (14 * 60 + 30, 15 * 60 + 30), (16 * 60, 17 * 60)]\nmeeting_duration = 60  # 1 hour\n\nprint(find_meeting_time(larry_schedule, james_schedule, meeting_duration))  # Example run\n```",
            "count": "calendar_scheduling_example_559"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_time, end_time = work_hours\n    meeting_start = start_time\n    meeting_end = start_time + meeting_duration\n    \n    while meeting_end <= end_time:\n        all_free = True\n        for busy_times in participants:\n            for busy_start, busy_end in busy_times:\n                if not (meeting_end <= busy_start or meeting_start >= busy_end):\n                    all_free = False\n                    break\n            if not all_free:\n                break\n        if all_free:\n            return f\"{meeting_start:02d}:00:{meeting_end:02d}:00\"\n        meeting_start += 1\n        meeting_end = meeting_start + meeting_duration\n        \n    return None\n\n# Existing schedules\nmarilyn_schedule = []\nbenjamin_schedule = [(9, 10), (10.5, 12), (13.5, 14.5), (15, 16), (16.5, 17)]\n\nparticipants = [marilyn_schedule, benjamin_schedule]\nmeeting_duration = 1  # One hour\nwork_hours = (9, 17)  # 9:00 to 17:00\n\nmeeting_time = find_meeting_time(participants, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_560"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and constraints\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Scott's busy slots\n    scott_busy_slots = [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n    \n    # Jack's busy slots\n    jack_busy_slots = [\n        (work_start, datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n    \n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n    \n    # Check available times\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        # Check if Scott is busy\n        scott_busy = any(start < end_time and end > current_time for start, end in scott_busy_slots)\n        # Check if Jack is busy\n        jack_busy = any(start < end_time and end > current_time for start, end in jack_busy_slots)\n        \n        if not scott_busy and not jack_busy:\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Increment time slot by 30 minutes\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_561"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_hour = 9\nend_hour = 17\nmeeting_duration = timedelta(minutes=30)\n\n# Participant's schedules\nrobert_schedule = [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 9, 30)),\n                   (datetime(2023, 10, 23, 10, 30), datetime(2023, 10, 23, 12, 0))]\n\nbruce_schedule = [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 10, 0)),\n                  (datetime(2023, 10, 23, 11, 0), datetime(2023, 10, 23, 17, 0))]\n\n# Function to find a suitable time slot\ndef find_meeting_time(robert_schedule, bruce_schedule, start_hour, end_hour, meeting_duration):\n    # Create available time slots\n    available_slots = []\n    current_time = datetime(2023, 10, 23, start_hour, 0)\n    \n    while current_time < datetime(2023, 10, 23, end_hour, 0):\n        end_time = current_time + meeting_duration\n        \n        # Check if the current time is available for both participants\n        if all(not (current_time < end and end_time > start) for start, end in robert_schedule) and \\\n           all(not (current_time < end and end_time > start) for start, end in bruce_schedule):\n            available_slots.append(current_time)\n        \n        current_time += timedelta(minutes=1)  # Increment by 1 minute to check the next possible slot\n\n    # If available slot found, return the first available slot\n    if available_slots:\n        meeting_start = available_slots[0]\n        meeting_end = meeting_start + meeting_duration\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(robert_schedule, bruce_schedule, start_hour, end_hour, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_562"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules and constraints\nschedule = {\n    \"Andrew\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Alexis\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Alexis's preference\nalexis_preference_start = datetime.strptime(\"13:30\", \"%H:%M\")\n\n# Find a suitable time for the meeting\ndef find_meeting_time(schedule, meeting_duration, working_hours_start, working_hours_end, alexis_preference_start):\n    # Create a list of available time slots \n    current_time = alexis_preference_start\n    while current_time + meeting_duration <= working_hours_end:\n        is_available = True\n        for participant, busy_times in schedule.items():\n            for start, end in busy_times:\n                if start < current_time + meeting_duration and current_time < end:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedule, meeting_duration, working_hours_start, working_hours_end, alexis_preference_start)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_563"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(abigail_schedule, matthew_schedule, meeting_duration, work_start, work_end, abigail_preference):\n    work_start_time = datetime.strptime(work_start, '%H:%M')\n    work_end_time = datetime.strptime(work_end, '%H:%M')\n\n    # Get the duration of the meeting in minutes\n    meeting_duration_minutes = meeting_duration.total_seconds() / 60\n\n    # Create a list of all the times in the work hours for potential meeting slots\n    current_time = work_start_time\n    available_slots = []\n\n    while current_time + timedelta(minutes=meeting_duration_minutes) <= work_end_time:\n        start_time = current_time\n        end_time = start_time + timedelta(minutes=meeting_duration_minutes)\n\n        # Check if the proposed time slot overlaps with anybody's schedule\n        if not (any(start_time < end[0] and end_time > start[1] for start, end in abigail_schedule) or\n                any(start_time < end[0] and end_time > start[1] for start, end in matthew_schedule)):\n            available_slots.append((start_time, end_time))\n        \n        current_time += timedelta(minutes=1)  # Increment the time by 1 minute to check the next slot\n\n    # Filter available slots based on Abigail's preference after 13:30\n    filtered_slots = [(start, end) for start, end in available_slots if start.time() <= abigail_preference or end.time() <= abigail_preference]\n\n    # Return the first available time that meets the constraints\n    if filtered_slots:\n        meeting_start, meeting_end = filtered_slots[0]\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None\n\nabigail_schedule = [(\"10:00\", \"10:30\"), (\"16:30\", \"17:00\")]\nmatthew_schedule = [(\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"13:00\", \"14:00\"), (\"15:30\", \"16:30\")]\nmeeting_duration = timedelta(minutes=30)\nwork_start = \"09:00\"\nwork_end = \"17:00\"\nabigail_preference = datetime.strptime(\"13:30\", '%H:%M').time()\n\nresult = find_meeting_time(abigail_schedule, matthew_schedule, meeting_duration, work_start, work_end, abigail_preference)\nprint(result)\n```",
            "count": "calendar_scheduling_example_564"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules for both participants\njoe_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nelijah_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nstart_of_work = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_work = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free\ndef is_free(start_time, end_time, busy_times):\n    for busy_start, busy_end in busy_times:\n        if not (end_time <= busy_start or start_time >= busy_end):\n            return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = start_of_work\nwhile current_time + meeting_duration <= end_of_work:\n    if is_free(current_time, current_time + meeting_duration, joe_busy_times) and \\\n       is_free(current_time, current_time + meeting_duration, elijah_busy_times):\n        # Ensure Joe's preference is also met (not after 13:30)\n        if current_time + meeting_duration <= datetime.strptime(\"13:30\", \"%H:%M\"):\n            proposed_start = current_time\n            proposed_end = current_time + meeting_duration\n            print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n            break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_565"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Roy's schedule\nroy_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n]\n\n# Debra's schedule\ndebra_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(roy_schedule, debra_schedule, work_start, work_end, meeting_duration):\n    # Combine the schedules\n    busy_times = roy_schedule + debra_schedule\n    busy_times.sort(key=lambda x: x[0])  # Sort by start time\n\n    # Check available slots\n    last_end_time = work_start\n    for start, end in busy_times:\n        if last_end_time + meeting_duration <= start:\n            return last_end_time, last_end_time + meeting_duration\n        last_end_time = max(last_end_time, end)\n\n    # Check time after the last meeting until the end of work hours\n    if last_end_time + meeting_duration <= work_end:\n        return last_end_time, last_end_time + meeting_duration\n\n    return None\n\n# Find the suitable time\nmeeting_time = find_meeting_time(roy_schedule, debra_schedule, work_start, work_end, meeting_duration)\n\n# Output the result in the required format\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_566"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(brandon_busy, virginia_busy, meeting_duration, preferred_end_time):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Build a list of busy times for both participants\n    busy_times = []\n\n    # Brandon's busy times\n    for start, end in brandon_busy:\n        busy_times.append((start, end))\n    \n    # Virginia's busy times\n    for start, end in virginia_busy:\n        busy_times.append((start, end))\n    \n    # Add preferred end time for Virginia\n    busy_times.append((preferred_end_time, end_time))\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Find gaps in the schedule\n    last_end = start_time\n    \n    for start, end in busy_times:\n        # If there is a gap between last_end and current start\n        if last_end + meeting_duration <= start:\n            return last_end.strftime(\"%H:%M\") + \":\" + (last_end + meeting_duration).strftime(\"%H:%M\")\n        last_end = max(last_end, end)\n    \n    return None\n\n# Define the existing schedules\nbrandon_busy = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))\n]\n\nvirginia_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Virginia's preference to avoid meetings after 13:00\npreferred_end_time = datetime.strptime(\"13:00\", \"%H:%M\")\n\n# Find the meeting time\nmeeting_time = find_meeting_time(brandon_busy, virginia_busy, meeting_duration, preferred_end_time)\n\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_567"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the available time slots based on the participants' schedules and constraints\njulia_busy_slots = [(datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\npamela_busy_slots = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Define the workday hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\njulia_preference_end = datetime.strptime(\"12:30\", \"%H:%M\")\n\n# Create a list of all busy times\nall_busy_slots = julia_busy_slots + pamela_busy_slots\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is busy\n        meeting_end_time = current_time + meeting_duration\n        is_busy = False\n        for start, end in all_busy_slots:\n            if (current_time < end and meeting_end_time > start):  # Overlapping time check\n                is_busy = True\n                break\n        if not is_busy and current_time <= julia_preference_end:  # Check Julia's preference\n            return (current_time.strftime(\"%H:%M\"), meeting_end_time.strftime(\"%H:%M\"))\n        \n        current_time += timedelta(minutes=30)  # Increment to check the next half hour slot\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\n```",
            "count": "calendar_scheduling_example_568"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Julie's busy times\njulie_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))\n]\n\n# Catherine's busy times\ncatherine_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\n# Preference for Julie to not meet before 13:30\njulie_meeting_preference = datetime.strptime(\"13:30\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Start checking for available time slots\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if the current time is acceptable for Julie\n        if current_time < julie_meeting_preference:\n            current_time = julie_meeting_preference\n            \n        # Check if current time overlaps with busy times for Julie or Catherine\n        available = True\n        \n        # Check Julie's busy times\n        for start, end in julie_busy_times:\n            if start < current_time + meeting_duration and end > current_time:\n                available = False\n                break\n                \n        # Check Catherine's busy times\n        if available:\n            for start, end in catherine_busy_times:\n                if start < current_time + meeting_duration and end > current_time:\n                    available = False\n                    break\n        \n        # If available, return the meeting time\n        if available:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Increment to the next time slot\n        current_time += timedelta(minutes=30)  # Checking in 30-minute increments\n        \n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_569"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participant_schedules, meeting_duration, constraints):\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        if all(not (meeting_start < busy_end and meeting_end > busy_start) for busy_start, busy_end in participant_schedules):\n            # Check constraints\n            if constraints['cannot_meet_after'] is None or current_time <= constraints['cannot_meet_after']:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check next half hour slot\n    return None\n\ndef main():\n    # Define working hours and meeting duration\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Sophia's schedule: busy times\n    sophia_schedule = [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n    \n    # Donna's schedule: free, but doesn't want to meet after 10:30\n    constraints = {\n        'cannot_meet_after': datetime.strptime(\"10:30\", \"%H:%M\")\n    }\n    \n    # Combine schedules\n    participant_schedules = sophia_schedule\n\n    # Find meeting time\n    proposed_time = find_meeting_time(work_start, work_end, participant_schedules, meeting_duration, constraints)\n    \n    print(proposed_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_570"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy times\njoseph_busy = [(\"09:00\", \"09:30\"), (\"12:00\", \"12:30\")]\nlori_busy = [(\"09:00\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:00\", \"17:00\")]\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Create a list to hold all busy times\nbusy_times = []\nfor start, end in joseph_busy + lori_busy:\n    busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n# Sort busy times\nbusy_times.sort()\n\n# Find a suitable time for the meeting\ndef find_meeting_time(work_start, work_end, busy_times, meeting_duration):\n    current_time = work_start\n    for start, end in busy_times:\n        # Check if there is free time before the next busy slot\n        if current_time + meeting_duration <= start:\n            return current_time\n        # Move the current time to the end of the busy slot\n        current_time = max(current_time, end)\n        \n    # Check if there is free time after the last busy slot until work end\n    if current_time + meeting_duration <= work_end:\n        return current_time\n\n    return None\n\nmeeting_time = find_meeting_time(work_start, work_end, busy_times, meeting_duration)\n\nif meeting_time:\n    proposed_time = meeting_time.strftime(\"%H:%M\") + \":\" + (meeting_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{{{proposed_time}}}\")\nelse:\n    print(\"No available time.\")\n```",
            "count": "calendar_scheduling_example_571"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define working hours and meeting duration\n    working_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    working_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=1)\n\n    # Define busy schedules\n    robert_busy = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\n    frances_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n    # Create a list of all busy times combined for both participants\n    busy_times = robert_busy + frances_busy\n\n    # Function to check if the time slot is free\n    def is_free(start, duration):\n        end = start + duration\n        for busy_start, busy_end in busy_times:\n            if start < busy_end and end > busy_start:\n                return False\n        return True\n\n    # Check for available time slots\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        # Check if the current time slot is free\n        if is_free(current_time, meeting_duration):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_572"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\n# Function to find available meeting times\ndef find_meeting_time(participant_schedules, meeting_duration, work_hours):\n    # Parse work hours\n    work_start, work_end = work_hours\n    available_times = []\n\n    # Check every hour in the work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check if the meeting time works for all participants\n        for schedule in participant_schedules:\n            if any(meeting_start < end and meeting_end > start for start, end in schedule):\n                break\n        else:\n            # If no participants have conflicting schedules, it's an available time\n            available_times.append((meeting_start, meeting_end))\n        \n        # Increment current_time by 30 minutes\n        current_time += 0.5  # 30 minutes\n\n    return available_times\n\n# Participants' schedules in tuples of (start time, end time)\ndiana_schedule = []  # No meetings\nalexis_schedule = [(9.0, 11.0), (12.0, 14.5), (15.0, 16.5)]\n\n# Work hours in hours (from 9:00 to 17:00)\nwork_hours = (9.0, 17.0)\nmeeting_duration = 1.0  # 1 hour\n\n# Call the function with necessary parameters\navailable_times = find_meeting_time([diana_schedule, alexis_schedule], meeting_duration, work_hours)\n\n# Output the first available time found\nif available_times:\n    start_hour = int(available_times[0][0])\n    start_minute = int((available_times[0][0] % 1) * 60)\n    end_hour = int(available_times[0][1])\n    end_minute = int((available_times[0][1] % 1) * 60)\n    print(f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\")\nelse:\n    print(\"No available meeting time found.\")\n```",
            "count": "calendar_scheduling_example_573"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(roger_availability, martha_availability, meeting_duration):\n    meeting_start = roger_availability['start']\n    meeting_end = roger_availability['end']\n\n    while meeting_start + meeting_duration <= meeting_end:\n        if is_time_available(meeting_start, meeting_duration, martha_availability):\n            return f\"{meeting_start.strftime('%H:%M')}:{(meeting_start + meeting_duration).strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=30)  # check every 30 minutes\n\n    return None\n\ndef is_time_available(start_time, duration, martha_availability):\n    end_time = start_time + duration\n    for busy_start, busy_end in martha_availability:\n        if start_time < busy_end and end_time > busy_start:\n            return False  # overlap with busy time\n    return True\n\n# Participants' availability\nroger_availability = {'start': datetime.strptime('09:00', '%H:%M'), 'end': datetime.strptime('17:00', '%H:%M')}\nmartha_availability = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(roger_availability, martha_availability, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_574"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(stephanie_schedule, samuel_schedule, duration, work_hours):\n    work_start, work_end = work_hours\n    meeting_duration = timedelta(minutes=duration)\n\n    # Create a list of busy times for both participants\n    busy_times = []\n    busy_times.extend(stephanie_schedule)\n    busy_times.extend(samuel_schedule)\n    \n    # Create a list of time slots to check\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        busy = False\n        for start, end in busy_times:\n            if current_time < end and start < current_time + meeting_duration:\n                busy = True\n                break\n        if not busy:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30) # check next half hour slot\n\n    return None\n\n# Schedules (start, end) in minutes since midnight\nstephanie_schedule = [(11*60, 11*60 + 30), (16*60 + 30, 17*60)] # 11:00-11:30, 16:30-17:00\nsamuel_schedule = [\n    (9*60, 10*60), (10*60 + 30, 11*60), (11*60 + 30, 12*60), \n    (13*60, 13*60 + 30), (14*60, 15*60 + 30), (16*60 + 30, 17*60)\n] # 9:00-10:00, 10:30-11:00, 11:30-12:30, 13:00-13:30, 14:00-15:30, 16:30-17:00\n\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nduration = 30 # minutes\n\nproposed_time = find_meeting_time(stephanie_schedule, samuel_schedule, duration, work_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_575"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\ndennis_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nroy_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Add Roy's preference\nroy_preference_end = datetime.strptime(\"12:00\", \"%H:%M\")\n\n# Consolidate all busy times\nbusy_times = sorted(dennis_schedule + roy_schedule)\n\n# Find suitable time slot for the meeting\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    # Check if the current time overlaps with any busy time\n    is_busy = any(start < current_time + meeting_duration and current_time < end for start, end in busy_times)\n    \n    # Check Roy's preference\n    if is_busy or current_time + meeting_duration > roy_preference_end:\n        current_time += timedelta(minutes=15)\n        continue\n    \n    # We've found a suitable time\n    proposed_start = current_time\n    proposed_end = current_time + meeting_duration\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n    break\n```",
            "count": "calendar_scheduling_example_576"
        },
        {
            "final_program_time": "{14:00:15:60}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(virginia_schedule, billy_schedule, meeting_duration):\n    working_hours_start = 9 * 60  # 9:00 AM in minutes\n    working_hours_end = 17 * 60    # 5:00 PM in minutes\n    \n    # Create a list of busy times for both participants\n    busy_times = []\n    busy_times.extend(virginia_schedule)\n    busy_times.extend(billy_schedule)\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Merge overlapping busy times\n    merged_busy_times = []\n    for start, end in busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\n            merged_busy_times.append((start, end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n    \n    # Find a suitable slot for the meeting\n    last_end = working_hours_start\n    for start, end in merged_busy_times:\n        if last_end + meeting_duration <= start:\n            return f\"{last_end//60:02}:{last_end%60:02}:{last_end//60 + meeting_duration//60:02}:{last_end%60 + meeting_duration:02}\"\n        last_end = end\n        \n    # Check for the time after the last busy schedule until the end of the work hours\n    if last_end + meeting_duration <= working_hours_end:\n        return f\"{last_end//60:02}:{last_end%60:02}:{last_end//60 + meeting_duration//60:02}:{last_end%60 + meeting_duration:02}\"\n\nvirginia_schedule = [(9*60 + 30, 10*60 + 30), (12*60 + 30, 13*60), (13*60 + 30, 14*60), (15*60 + 30, 16*60 + 30)]\nbilly_schedule = [(9*60 + 30, 11*60), (11*60 + 30, 13*60), (15*60, 16*60)]\nmeeting_duration = 60  # Meeting duration in minutes\n\nproposed_time = find_meeting_time(virginia_schedule, billy_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_577"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(bobby_schedule, doris_schedule, meeting_duration):\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Combine schedules into a list of occupied time blocks\n    occupied_times = []\n    for start, end in bobby_schedule + doris_schedule:\n        occupied_times.append((start, end))\n    \n    # Sort the occupied times\n    occupied_times.sort()\n    \n    # Create a list to find free timeslots\n    free_times = []\n    \n    # Check for free time before the first meeting\n    if occupied_times[0][0] > work_start:\n        free_times.append((work_start, occupied_times[0][0]))\n        \n    # Check between meetings\n    for i in range(1, len(occupied_times)):\n        if occupied_times[i][0] > occupied_times[i - 1][1]:\n            free_times.append((occupied_times[i - 1][1], occupied_times[i][0]))\n    \n    # Check for free time after the last meeting\n    if occupied_times[-1][1] < work_end:\n        free_times.append((occupied_times[-1][1], work_end))\n    \n    # Finding a suitable time for the meeting\n    for start, end in free_times:\n        if end - start >= meeting_duration:\n            meeting_start = start + timedelta(hours=4)  # Meet preferred after 13:00\n            if meeting_start >= start and meeting_start + meeting_duration <= end:\n                return f\"{meeting_start.strftime('%H:%M')}:{(meeting_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\nbobby_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\ndoris_schedule = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nmeeting_duration = timedelta(minutes=30)\n\nproposed_time = find_meeting_time(bobby_schedule, doris_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_578"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(schedule1, schedule2, duration, work_hours):\n    start_time = datetime.strptime(work_hours[0], '%H:%M')\n    end_time = datetime.strptime(work_hours[1], '%H:%M')\n\n    # Create free time slots for both schedules\n    free_slots1 = get_free_time_slots(schedule1, start_time, end_time)\n    free_slots2 = get_free_time_slots(schedule2, start_time, end_time)\n\n    # Find overlapping time slots\n    for slot1 in free_slots1:\n        for slot2 in free_slots2:\n            # Find the overlapping time slot based on duration needed\n            latest_start = max(slot1[0], slot2[0])\n            earliest_end = min(slot1[1], slot2[1])\n            if (earliest_end - latest_start) >= timedelta(minutes=duration):\n                return f\"{latest_start.strftime('%H:%M')}:{(latest_start + timedelta(minutes=duration)).strftime('%H:%M')}\"\n\n    return None\n\ndef get_free_time_slots(schedule, start_time, end_time):\n    free_slots = []\n    current_start = start_time\n\n    # Add time slots before the first meeting\n    for meeting in sorted(schedule):\n        if current_start < meeting[0]:\n            free_slots.append((current_start, meeting[0]))\n        current_start = max(current_start, meeting[1])\n\n    # Add remaining time after the last meeting\n    if current_start < end_time:\n        free_slots.append((current_start, end_time))\n    \n    return free_slots\n\n# Input schedules\nchristine_schedule = [\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))\n]\n\nhelen_schedule = [\n    (datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Meeting constraints\nmeeting_duration = 30  # in minutes\nwork_hours = ['09:00', '17:00']\n\n# Find available time\nresult = find_available_time(christine_schedule, helen_schedule, meeting_duration, work_hours)\nprint(result)  # This will output the proposed time\n'''",
            "count": "calendar_scheduling_example_579"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(adam_schedule, jose_schedule, meeting_duration):\n    # Convert time strings to datetime objects\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=meeting_duration)\n    \n    # Define Jose's unavailable time slots\n    jose_unavailable = [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n\n    # Check for available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time falls into any of jose's unavailable time slots\n        if any(start <= current_time < end for start, end in jose_unavailable):\n            current_time += timedelta(minutes=30)  # Increment by 30 minutes to find the next slot\n            continue\n        \n        # If current time slot is available\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\n# Given schedules\nadam_schedule = []\njose_schedule = [\n    (10, 11),\n    (12, 14),\n    (15, 16)\n]\n\nmeeting_duration = 1  # in hours\n\n# Finding the meeting time\nmeeting_time = find_meeting_time(adam_schedule, jose_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_580"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ronald_schedule, ann_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of busy time slots for Ronald and Ann\n    busy_slots = ronald_schedule + ann_schedule\n    busy_slots.sort()\n\n    # Check for available time slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        if all(not (current_time < end and next_time > start) for start, end in busy_slots):\n            return current_time.strftime(\"%H:%M\") + ':' + next_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return None  # If no time slot found\n\nronald_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nann_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nmeeting_duration = timedelta(hours=1)\n\n# Call the function and print the proposed time\nproposed_time = find_meeting_time(ronald_schedule, ann_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_581"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(olivia_schedule, ann_schedule, meeting_duration, work_start, work_end):\n    # Convert string times to datetime objects\n    work_start = datetime.strptime(work_start, '%H:%M')\n    work_end = datetime.strptime(work_end, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    # Generate a list of all busy times in the work hours for both participants\n    busy_times = []\n    for start, end in olivia_schedule + ann_schedule:\n        busy_times.append((datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')))\n\n    # Sort busy times by start time\n    busy_times.sort()\n\n    # Check for available slots\n    current_time = work_start\n    for start, end in busy_times:\n        if current_time + meeting_duration <= start:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time = max(current_time, end)\n\n    # Check if there's time after the last busy slot\n    if current_time + meeting_duration <= work_end:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n    return None\n\n# Schedules in (start, end) format\nolivia_schedule = [('09:30', '10:00'), ('10:30', '11:00'), ('13:00', '14:00'), ('15:30', '16:30')]\nann_schedule = [('09:00', '09:30'), ('11:00', '13:00'), ('13:30', '14:30'), ('15:00', '15:30')]\n\nmeeting_duration = 30  # Duration in minutes\nwork_start = '09:00'\nwork_end = '17:00'\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(olivia_schedule, ann_schedule, meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_582"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(lisa_schedule, anthony_schedule, meeting_duration, work_hours):\n    work_start, work_end = work_hours\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        is_lisa_free = all(not (current_time < end and current_time + meeting_duration > start) for start, end in lisa_schedule)\n        is_anthony_free = all(not (current_time < end and current_time + meeting_duration > start) for start, end in anthony_schedule)\n        \n        if is_lisa_free and is_anthony_free:\n            return current_time.strftime(\"%H:%M:%H:%M\")\n\n        current_time += timedelta(minutes=30)  # Check next half hour slot\n\n    return None  # In case no slot is found\n\n# Participant schedules\nlisa_schedule = [(9, 9.5), (10.5, 11), (14, 16)]\nanthony_schedule = [(9, 9.5), (11, 11.5), (12.5, 13.5), (14, 15), (15.5, 16), (16.5, 17)]\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\n# Calculate and print the proposed meeting time\nproposed_time = find_meeting_time(lisa_schedule, anthony_schedule, meeting_duration, work_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_583"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find available time for a meeting\ndef find_meeting_time(start_time, end_time, duration_minutes, busy_slots):\n    current_time = start_time\n    \n    while current_time + timedelta(minutes=duration_minutes) <= end_time:\n        found_slot = True\n        for busy_start, busy_end in busy_slots:\n            if not (current_time >= busy_end or (current_time + timedelta(minutes=duration_minutes)) <= busy_start):\n                found_slot = False\n                break\n        \n        if found_slot:\n            return current_time\n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Schedule details\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = 30  # in minutes\n\n# Henry's busy schedule: busy slots during the day\nhenry_busy_slots = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Find a suitable time for the meeting\nmeeting_time = find_meeting_time(work_start, work_end, meeting_duration, henry_busy_slots)\n\n# Output the time if a slot is found\nif meeting_time:\n    meeting_end_time = meeting_time + timedelta(minutes=meeting_duration)\n    print(f\"{meeting_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_584"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules for Adam and Frank (busy time slots)\nadam_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n\nfrank_schedule = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                  (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n\n# Function to check if a time slot is free\ndef is_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Searching for a suitable time slot\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    meeting_start = current_time\n    meeting_end = current_time + meeting_duration\n    \n    if is_free(meeting_start, meeting_end, adam_schedule) and is_free(meeting_start, meeting_end, frank_schedule):\n        # Output the found time slot in the format HH:MM:HH:MM\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n    \n    current_time += timedelta(minutes=30)  # Check next possible half-hour slot\n```",
            "count": "calendar_scheduling_example_585"
        },
        {
            "final_program_time": "{15:00:16:00}",
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(brandon_schedule, ralph_schedule, duration):\n    meeting_start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    meeting_end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Brandon's availability\n    brandon_available_start = max(brandon_schedule[0], meeting_start_time)\n    brandon_available_end = min(brandon_schedule[1], meeting_end_time)\n\n    # Ralph's busy times (merged into available time)\n    ralph_busy_times = ralph_schedule\n    ralph_available_times = []\n    last_end_time = meeting_start_time\n\n    for start, end in ralph_busy_times:\n        if start > last_end_time:\n            ralph_available_times.append((last_end_time, start))\n        last_end_time = end\n\n    if last_end_time < meeting_end_time:\n        ralph_available_times.append((last_end_time, meeting_end_time))\n\n    # Finding the mutual available time\n    for start_time, end_time in ralph_available_times:\n        # Check available timeframes\n        if start_time < brandon_available_end and end_time > brandon_available_start:\n            mutual_start = max(start_time, brandon_available_start)\n            mutual_end = min(end_time, brandon_available_end)\n\n            if mutual_end - mutual_start >= timedelta(hours=duration):\n                proposed_time = mutual_start.strftime(\"%H:%M\")\n                proposed_end_time = (mutual_start + timedelta(hours=duration)).strftime(\"%H:%M\")\n                return f\"{proposed_time}:{proposed_end_time}\"\n\n    return None\n\n# Given schedules\nbrandon_schedule = (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nralph_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Duration of the meeting\nduration = 1  # hours\n\n# Find meeting time\nmeeting_time = find_meeting_time(brandon_schedule, ralph_schedule, duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_586"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check for available slots\ndef find_meeting_slot(zachary_schedule, nicole_schedule, meeting_duration):\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Prepare all time slots for the day\n    time_slots = []\n    current_time = work_start\n    while current_time < work_end:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # increment to the next 30 minutes\n\n    available_slots = []\n\n    # Check each slot against both schedules\n    for start_time in time_slots:\n        end_time = start_time + meeting_duration\n        if end_time > work_end:\n            break  # No need to check further if the end time exceeds work hours\n        \n        # Check if the time is available for Zachary\n        is_zachary_available = all(not (start_time < z[1] and end_time > z[0]) for z in zachary_schedule)\n        # Check if the time is available for Nicole\n        is_nicole_available = all(not (start_time < n[1] and end_time > n[0]) for n in nicole_schedule)\n\n        if is_zachary_available and is_nicole_available:\n            available_slots.append((start_time, end_time))\n\n    return available_slots\n\n# Participant schedules (start, end)\nzachary_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nnicole_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Find available slots\navailable_slots = find_meeting_slot(zachary_schedule, nicole_schedule, meeting_duration)\n\n# Output the first available slot in the required format\nif available_slots:\n    start_time, end_time = available_slots[0]\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available slots found\")\n```",
            "count": "calendar_scheduling_example_587"
        },
        {
            "final_program_time": "{15:30:16:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy times for Kimberly and Eric\nkimberly_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\neric_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to check if a time slot is free for both Kimberly and Eric\ndef is_time_free(start, end):\n    for busy_start, busy_end in kimberly_busy:\n        if (start < busy_end and end > busy_start):\n            return False\n    for busy_start, busy_end in eric_busy:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Find a time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_free(current_time, current_time + meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f'{{{proposed_start}:{proposed_end}}}')\n        break\n    current_time += timedelta(minutes=30)  # Check every 30 minutes\n```",
            "count": "calendar_scheduling_example_588"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nlaura_schedule = [\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\npaul_schedule = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Constraints\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Merge schedules to find busy times\nbusy_times = []\nfor start, end in laura_schedule + paul_schedule:\n    busy_times.append((start, end))\n\n# Sort busy times by start time\nbusy_times.sort()\n\n# Find available time\nlast_end = work_start\n\nfor start, end in busy_times:\n    if last_end + meeting_duration <= start:\n        # Calculating available time for the meeting\n        proposed_start = last_end\n        proposed_end = last_end + meeting_duration\n        if proposed_end <= work_end and proposed_start >= work_start:\n            print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n            break\n    last_end = max(last_end, end)\n\n# Check after the last busy period\nif last_end + meeting_duration <= work_end:\n    proposed_start = last_end\n    proposed_end = last_end + meeting_duration\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_589"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define time range and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\nmegan_availability = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nemily_availability = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Find the common free time slots\ndef find_common_time_slots(availabilities):\n    free_slots = []\n    current_start = start_time\n    \n    for start, end in sorted(availabilities):\n        if current_start < start:\n            free_slots.append((current_start, start))\n        current_start = max(current_start, end)\n    \n    if current_start < end_time:\n        free_slots.append((current_start, end_time))\n    \n    return free_slots\n\n# Get common free slots\nmegan_free_slots = find_common_time_slots(megan_availability)\nemily_free_slots = find_common_time_slots(emily_availability)\n\n# Find a suitable meeting time\ndef find_meeting_time(megan_free_slots, emily_free_slots, duration):\n    for megan_slot in megan_free_slots:\n        for emily_slot in emily_free_slots:\n            start = max(megan_slot[0], emily_slot[0])\n            end = min(megan_slot[1], emily_slot[1])\n            if end - start >= duration:\n                return (start, start + duration)\n    return None\n\n# Calculate proposed meeting time\nmeeting_time = find_meeting_time(megan_free_slots, emily_free_slots, meeting_duration)\n\n# Output result\nif meeting_time:\n    print(f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_590"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define participant schedules and constraints\n    kenneth_busy = [(\"09:00\", \"09:30\"), (\"11:00\", \"11:30\"), \n                    (\"15:00\", \"15:30\"), (\"16:30\", \"17:00\")]\n    melissa_busy = [(\"10:30\", \"13:00\"), (\"14:00\", \"14:30\"), \n                    (\"15:30\", \"16:30\")]\n    \n    # Convert scheduling intervals to a list of unavailable times\n    busy_intervals = kenneth_busy + melissa_busy\n    busy_intervals.sort()  # Sort busy intervals by start time\n    \n    # Define the working hours and the meeting duration\n    working_start = \"09:00\"\n    working_end = \"17:00\"\n    meeting_duration = 60  # in minutes\n\n    # Convert time strings to minutes since midnight for easier calculations\n    def time_to_minutes(t):\n        hours, minutes = map(int, t.split(':'))\n        return hours * 60 + minutes\n    \n    # Convert minutes back to time string\n    def minutes_to_time(m):\n        hours = m // 60\n        minutes = m % 60\n        return f\"{hours:02}:{minutes:02}\"\n\n    # Initialize the available time slot\n    available_start = time_to_minutes(working_start)\n    available_end = time_to_minutes(working_end)\n    \n    # Check for available time slots\n    for start, end in busy_intervals:\n        busy_start = time_to_minutes(start)\n        busy_end = time_to_minutes(end)\n\n        # Check if there's enough time before the busy interval\n        if available_start + meeting_duration <= busy_start:\n            return f\"{minutes_to_time(available_start)}:{minutes_to_time(available_start + meeting_duration)}\"\n\n        # Move the available start time to the end of the busy interval\n        available_start = max(available_start, busy_end)\n\n    # Check if there's time after all busy intervals till end of the workday\n    if available_start + meeting_duration <= available_end:\n        return f\"{minutes_to_time(available_start)}:{minutes_to_time(available_start + meeting_duration)}\"\n\n    return None  # If no meeting time is found\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_591"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting():\n    # Define the working hours and constraints\n    working_hours = (9, 17)\n    katherine_busy = [(10, 11)]\n    alexander_busy = [(9, 11), (12, 17)]\n    \n    # Meeting duration\n    meeting_duration = 0.5  # in hours\n\n    # Checking time slots\n    for hour in range(working_hours[0], working_hours[1]):\n        for minute in [0, 30]:  # Check every half hour\n            start_time = hour + minute / 60\n            end_time = start_time + meeting_duration\n\n            # Check if the meeting fits in both schedules\n            if end_time > working_hours[1]:\n                continue  # Meeting can't extend beyond working hours\n\n            # Check if Katherine is free\n            katherine_free = True\n            for busy_start, busy_end in katherine_busy:\n                if busy_start <= start_time < busy_end or busy_start < end_time <= busy_end:\n                    katherine_free = False\n                    break\n            \n            # Check if Alexander is free\n            alexander_free = True\n            for busy_start, busy_end in alexander_busy:\n                if busy_start <= start_time < busy_end or busy_start < end_time <= busy_end:\n                    alexander_free = False\n                    break\n            \n            # If both are free, return the time\n            if katherine_free and alexander_free:\n                start_hour = int(start_time)\n                start_minute = int((start_time - start_hour) * 60)\n                end_hour = int(end_time)\n                end_minute = int((end_time - end_hour) * 60)\n                return f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\n\n# Output the proposed meeting time\nprint(schedule_meeting())\n```",
            "count": "calendar_scheduling_example_592"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "TypeError",
            "full_response": "```python\n# Define the busy schedules and preferences\nelijah_busy = [(9, 10)]\nbeverly_busy = [(9, 12.5), (13.5, 15.5), (16.5, 17)]\nelijah_preference_end = 15\n\n# Convert the busy schedules into a complete timeline of the day\ndef is_free(time, busy_times):\n    for start, end in busy_times:\n        if start <= time < end:\n            return False\n    return True\n\ndef find_meeting_time(duration, work_start, work_end):\n    for start_hour in range(work_start, work_end - duration + 1):\n        end_hour = start_hour + duration\n        if is_free(start_hour, elijah_busy) and is_free(start_hour, beverly_busy):\n            if end_hour <= elijah_preference_end:\n                return f\"{start_hour:02}:00:{end_hour:02}:00\"\n    return None\n\n# Meeting duration in hours (0.5 hours = 30 minutes)\nmeeting_duration = 0.5\n\n# Work hours in 24-hour format\nwork_start, work_end = 9, 17\n\n# Find a meeting time\nmeeting_time = find_meeting_time(meeting_duration, work_start, work_end)\n\n# Print the result\nmeeting_time\n```",
            "count": "calendar_scheduling_example_593"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(adam_schedule, roy_schedule, duration):\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Create a list of all busy times (as tuples)\n    adam_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) for start, end in adam_schedule]\n    roy_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) for start, end in roy_schedule]\n    \n    # Merge busy times and sort\n    merged_busy_times = sorted(adam_busy_times + roy_busy_times)\n    \n    # Check for gaps in the schedule\n    current_time = work_start\n    for start, end in merged_busy_times:\n        if current_time + duration <= start:\n            return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n        current_time = max(current_time, end)\n\n    # Final check for time after the last busy slot\n    if current_time + duration <= work_end:\n        return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n    \n    return None, None\n\n# Schedules for Adam and Roy\nadam_schedule = [('09:30', '10:00'), ('12:30', '13:00'), ('14:30', '15:00'), ('16:30', '17:00')]\nroy_schedule = [('10:00', '11:00'), ('11:30', '13:00'), ('13:30', '14:30'), ('16:30', '17:00')]\nmeeting_duration = timedelta(minutes=30)\n\nstart_time, end_time = find_meeting_time(adam_schedule, roy_schedule, meeting_duration)\nif start_time and end_time:\n    print(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_594"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules for Christina and Elizabeth\nchristina_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\nelizabeth_schedule = [\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Define the working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find the earliest time for a meeting\ndef find_meeting_time(christina_schedule, elizabeth_schedule, meeting_duration):\n    # Create a list of busy times\n    busy_times = christina_schedule + elizabeth_schedule\n    busy_times.sort()\n\n    # Initialize the search time\n    current_time = work_start\n\n    # Check available slots\n    for start, end in busy_times:\n        # If current_time + meeting_duration is before the start of the busy time\n        if current_time + meeting_duration <= start:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        # Move current_time to the end of the busy slot if it's busy\n        current_time = max(current_time, end)\n\n    # Check if there's time after the last busy slot until work_end\n    if current_time + meeting_duration <= work_end:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(christina_schedule, elizabeth_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_595"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "NameError",
            "full_response": "```python\ndef find_meeting_time(deborah_schedule, theresa_schedule, meeting_duration, meeting_preference):\n    from datetime import datetime, timedelta\n\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Constraint from Deborah not to meet after 12:00\n    deborah_limit = datetime.strptime(\"12:00\", \"%H:%M\")\n\n    # Create a list of free time slots from the busy schedules\n    deborah_busy = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in deborah_schedule]\n    theresa_busy = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in theresa_schedule]\n    \n    # Merge busy schedules\n    busy_times = deborah_busy + theresa_busy\n    busy_times.sort()\n\n    # Find free time slots\n    free_time_slots = []\n    last_end = work_start\n\n    for start, end in busy_times:\n        if last_end < start:\n            free_time_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    # Add the time from the last busy slot to the end of work hours\n    if last_end < work_end:\n        free_time_slots.append((last_end, work_end))\n\n    # Check for available time slots\n    for start, end in free_time_slots:\n        if start < deborah_limit and (end - start) >= meeting_duration:\n            proposed_start = start\n            if proposed_start < deborah_limit and (proposed_start + meeting_duration) <= end:\n                proposed_end = proposed_start + meeting_duration\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n# Existing schedules\ndeborah_schedule = [(\"09:00\", \"10:00\"), (\"13:00\", \"13:30\"), (\"15:00\", \"16:00\"), (\"16:30\", \"17:00\")]\ntheresa_schedule = [(\"09:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"17:00\")]\nmeeting_duration = timedelta(minutes=30)\n\n# Find meeting time\nmeeting_time = find_meeting_time(deborah_schedule, theresa_schedule, meeting_duration, None)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_596"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(roy_schedule, melissa_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Create a list of busy times\n    busy_times = []\n    for start, end in roy_schedule:\n        busy_times.append((start, end))\n    for start, end in melissa_schedule:\n        busy_times.append((start, end))\n\n    # Sort busy times and merge overlapping times\n    busy_times.sort()\n    merged_busy_times = []\n    current_start, current_end = busy_times[0]\n\n    for start, end in busy_times[1:]:\n        if start <= current_end:  # Overlapping\n            current_end = max(current_end, end)\n        else:  # No overlap\n            merged_busy_times.append((current_start, current_end))\n            current_start, current_end = start, end\n\n    merged_busy_times.append((current_start, current_end))\n\n    # Check for free slots in the work hours\n    last_end = work_start\n    for start, end in merged_busy_times:\n        if last_end + timedelta(minutes=meeting_duration) <= start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n        last_end = end\n\n    # Check after the last busy time until work end\n    if last_end + timedelta(minutes=meeting_duration) <= work_end:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n\n    return None\n\nroy_schedule = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nmelissa_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nmeeting_duration = 30  # in minutes\n\nproposed_time = find_meeting_time(roy_schedule, melissa_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_597"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\n# Define existing schedules\nsara_busy_times = [(\"10:00\", \"10:30\"), (\"13:00\", \"14:00\"), (\"16:30\", \"17:00\")]\nrandy_busy_times = [(\"09:00\", \"09:30\"), (\"10:30\", \"11:30\"), (\"12:30\", \"13:00\"), (\"14:00\", \"17:00\")]\n\n# Meeting duration\nmeeting_duration = 30  # minutes\n\n# Work hours\nstart_of_day = 9 * 60  # 9:00 AM\nend_of_day = 17 * 60    # 5:00 PM\n\n# Convert busy times to minute ranges\ndef convert_to_minutes(busy_times):\n    return [(int(start.split(\":\")[0]) * 60 + int(start.split(\":\")[1]),\n             int(end.split(\":\")[0]) * 60 + int(end.split(\":\")[1])) for start, end in busy_times]\n\nsara_busy = convert_to_minutes(sara_busy_times)\nrandy_busy = convert_to_minutes(randy_busy_times)\n\n# Combine busy times and add work hours\nbusy_times = sara_busy + randy_busy\nbusy_times.sort()\n\n# Find available time slot\ndef find_available_slot(busy_times, meeting_duration, start_of_day, end_of_day):\n    current_time = start_of_day\n    for start, end in busy_times:\n        if current_time + meeting_duration <= start:\n            return current_time\n        current_time = max(current_time, end)\n    # Check after last busy time until end of day\n    if current_time + meeting_duration <= end_of_day:\n        return current_time\n    return None\n\n# Find slot\navailable_time_start = find_available_slot(busy_times, meeting_duration, start_of_day, end_of_day)\n\n# Format output\nif available_time_start is not None:\n    available_time_end = available_time_start + meeting_duration\n    start_hour = available_time_start // 60\n    start_minute = available_time_start % 60\n    end_hour = available_time_end // 60\n    end_minute = available_time_end % 60\n    print(f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_598"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(judith_schedule, mason_schedule, meeting_duration):\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n\n    # Convert schedules to minute blocks\n    judith_busy = [(720, 840), (930, 960)]  # 12:00-14:30, 15:30-16:00 in minutes\n    mason_busy = [(570, 660), (750, 810), (840, 870), (900, 930), (990, 1020)]  # various busy times\n    \n    # Merge busy times into a single busy schedule\n    busy_times = judith_busy + mason_busy\n    busy_times.sort()\n\n    free_times = []\n    last_end = work_start\n    \n    # Identify free blocks of time\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    # Check the time after the last busy schedule until work hours end\n    if last_end + meeting_duration <= work_end:\n        free_times.append((last_end, work_end))\n\n    # Find a free block that fits the meeting duration\n    for start, end in free_times:\n        if (end - start) >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            return f\"{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}\"\n\n# Judith's and Mason's busy hours\njudith_schedule = [(720, 840), (930, 960)]  # Judith's busy time\nmason_schedule = [(570, 660), (750, 810), (840, 870), (900, 930), (990, 1020)]  # Mason's busy time\nmeeting_duration = 60  # 1 hour in minutes\n\n# Find the meeting time\nresult = find_meeting_time(judith_schedule, mason_schedule, meeting_duration)\nprint(result)\n```",
            "count": "calendar_scheduling_example_599"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Bruce's schedule\nbruce_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Jessica's schedule\njessica_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Entire Monday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Tuesday morning\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday afternoon\n]\n\n# Function to find available meeting time\ndef find_meeting_time(bruce_schedule, jessica_schedule, work_start, work_end, meeting_duration):\n    # Create a list of busy times\n    busy_times = []\n    busy_times.extend(bruce_schedule)\n    busy_times.extend(jessica_schedule)\n    \n    # Check each half hour slot in the work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (start < end_time and end > start) for start, end in busy_times):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Increment by half an hour\n    \n    return None\n\n# Find the meeting time\nmeeting_time = find_meeting_time(bruce_schedule, jessica_schedule, work_start, work_end, meeting_duration)\nprint(meeting_time)\n```\n",
            "count": "calendar_scheduling_example_600"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules for Mark and Marie\nmark_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\nmarie_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    # Tuesday\n    (work_start, work_end),  # Entire day is booked\n]\n\ndef find_available_time(schedules):\n    for start_hour in range(9, 17):  # from 09:00 to 16:00 (inclusive)\n        start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n        for day in ['Monday', 'Tuesday']:\n            if start_time >= work_start and start_time <= work_end:\n                end_time = start_time + meeting_duration\n                if end_time <= work_end:\n                    # Check against both schedules\n                    is_available = True\n                    for s in schedules:\n                        for busy_start, busy_end in s:\n                            if not (end_time <= busy_start or start_time >= busy_end):\n                                is_available = False\n                                break\n                        if not is_available:\n                            break\n                    if is_available:\n                        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    return \"No available time found\"\n\n# Combine both schedules\ncombined_schedules = [mark_schedule, marie_schedule]\n\n# Find and print the available time\navailable_time = find_available_time(combined_schedules)\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_601"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules\nanna_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\ncheryl_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\ndef find_available_slot(schedule1, schedule2, day_start, day_end):\n    current_time = day_start\n\n    while current_time + meeting_duration <= day_end:\n        # Check if current_time is free for both participants\n        slot_free = True\n        next_time = current_time + meeting_duration\n\n        for start, end in schedule1:\n            if not (next_time <= start or current_time >= end):\n                slot_free = False\n                break\n\n        if slot_free:\n            for start, end in schedule2:\n                if not (next_time <= start or current_time >= end):\n                    slot_free = False\n                    break\n\n        if slot_free:\n            return current_time, next_time\n\n        current_time += timedelta(minutes=30)  # Move to next possible slot\n\n    return None, None\n\n# Check for availability on Monday\nmonday_available_start, monday_available_end = find_available_slot(anna_schedule, cheryl_schedule, working_hours_start, working_hours_end)\n\nif monday_available_start:\n    print(f\"{monday_available_start.strftime('%H:%M')}:{monday_available_end.strftime('%H:%M')}\")\nelse:\n    print(\"No available slot found.\")\n```",
            "count": "calendar_scheduling_example_602"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Anna's availability\nanna_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\n# Margaret's availability\nmargaret_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting constraints\npreferred_start_time_tuesday = datetime.strptime(\"14:30\", \"%H:%M\")\n\n# Find available slots on Monday\ndef find_meeting_time(schedule_a, schedule_b, preferred_start_time=None):\n    # Combine schedule and find free slots\n    combined_schedule = sorted(schedule_a + schedule_b)\n    \n    # Find free time slots\n    available_slots = []\n    last_end = work_start\n    \n    for start, end in combined_schedule:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n        \n    if last_end < work_end:\n        available_slots.append((last_end, work_end))\n    \n    # Check suitable slots\n    for start, end in available_slots:\n        if end - start >= meeting_duration:\n            if preferred_start_time:\n                # On Tuesday, consider preferred time\n                if start >= preferred_start_time:\n                    return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n            else:\n                return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Check Monday availability\nmonday_meeting_time = find_meeting_time(anna_schedule, margaret_schedule)\n\n# If no suitable time on Monday, check Tuesday\nif not monday_meeting_time:\n    tuesday_meeting_time = find_meeting_time(anna_schedule, margaret_schedule, preferred_start_time_tuesday)\n    if tuesday_meeting_time:\n        print(tuesday_meeting_time)\nelse:\n    print(monday_meeting_time)\n```",
            "count": "calendar_scheduling_example_603"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours for the meeting\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nstephanie_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\nbilly_schedule_monday = [(work_start, work_end)]  # Initially consider the whole day's availability\nbilly_schedule_tuesday = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), work_end),\n]\n\n# Blocking the busy times for Billy on Monday\nbilly_schedule_monday[0] = (billy_schedule_monday[0][0], datetime.strptime(\"09:00\", \"%H:%M\"))  # until 9:00\nbilly_schedule_monday.append((datetime.strptime(\"09:00\", \"%H:%M\"), work_end))  # Whole working hours\n\n# Function to find a suitable meeting time\ndef find_meeting_time(stephanie_schedule, billy_schedule, meeting_duration, day):\n    available_times = []\n    \n    if day == \"Monday\":\n        # Merge the busy slots for Billy on Monday\n        busy_slots = billy_schedule_monday + stephanie_schedule\n    else:\n        # Merge the busy slots for Tuesday\n        busy_slots = billy_schedule_tuesday + stephanie_schedule\n\n    # Create a full list of time slots for the day\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current time is free\n        is_free = True\n        for start, end in busy_slots:\n            if current_time < end and current_time + meeting_duration > start:\n                is_free = False\n                break\n\n        if is_free:\n            available_times.append(current_time)\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n\n    if available_times:\n        # Return the first available time found\n        return available_times[0]\n    return None\n\n# Check for available times on both days\nproposed_time_monday = find_meeting_time(stephanie_schedule, billy_schedule_monday, meeting_duration, \"Monday\")\nif proposed_time_monday:\n    print(f\"{proposed_time_monday.strftime('%H:%M')}:{(proposed_time_monday + meeting_duration).strftime('%H:%M')}\")\nelse:\n    proposed_time_tuesday = find_meeting_time(stephanie_schedule, billy_schedule_tuesday, meeting_duration, \"Tuesday\")\n    if proposed_time_tuesday:\n        print(f\"{proposed_time_tuesday.strftime('%H:%M')}:{(proposed_time_tuesday + meeting_duration).strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_604"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(jesse_schedule, kenneth_schedule, duration, preferred_days):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    duration_delta = timedelta(minutes=duration)\n\n    for day in preferred_days:\n        # Check availability for Jesse\n        if day == \"Monday\":\n            jesse_busy = [\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            ]\n            kenneth_busy = [\n                (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            ]\n        \n        elif day == \"Tuesday\":\n            jesse_busy = [\n                (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n            ]\n            kenneth_busy = [\n                (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n            ]\n\n        # Combine busy times\n        busy_times = jesse_busy + kenneth_busy\n        busy_times.sort(key=lambda x: x[0])  # Sort by start time\n\n        # Check for gaps in the busy schedule\n        last_end = work_start\n        for start, end in busy_times:\n            if last_end + duration_delta <= start:  # Enough time for the meeting\n                return f\"{last_end.strftime('%H:%M')}:{(last_end + duration_delta).strftime('%H:%M')}\"\n            last_end = max(last_end, end)\n\n        # Check if there's time after the last busy period before end of work\n        if last_end + duration_delta <= work_end:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + duration_delta).strftime('%H:%M')}\"\n    \n    return None  # If no available time found\n\n# Example call\njesse_schedule = {}  # Not required for this function\nkenneth_schedule = {}  # Not required for this function\nduration = 30  # in minutes\npreferred_days = [\"Monday\", \"Tuesday\"]\n\nmeeting_time = find_meeting_time(jesse_schedule, kenneth_schedule, duration, preferred_days)\nprint(meeting_time)  # The output will be a valid time in the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_605"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(amy_schedule, denise_schedule, meeting_duration, preferred_days):\n    time_format = \"%H:%M\"\n    work_start = datetime.strptime(\"09:00\", time_format)\n    work_end = datetime.strptime(\"17:00\", time_format)\n    \n    for day in preferred_days:\n        if day == \"Monday\":\n            amy_available = [\n                (work_start, datetime.strptime(\"10:00\", time_format)),\n                (datetime.strptime(\"11:30\", time_format), datetime.strptime(\"12:00\", time_format)),\n                (datetime.strptime(\"12:30\", time_format), datetime.strptime(\"15:30\", time_format)),\n                (datetime.strptime(\"17:00\", time_format), work_end)\n            ]\n            denise_available = [\n                (work_start, datetime.strptime(\"09:30\", time_format)),\n                (datetime.strptime(\"10:30\", time_format), work_end)\n            ]\n        \n        elif day == \"Tuesday\":\n            amy_available = [\n                (work_start, datetime.strptime(\"10:00\", time_format)),\n                (datetime.strptime(\"11:30\", time_format), datetime.strptime(\"12:00\", time_format)),\n                (datetime.strptime(\"12:30\", time_format), datetime.strptime(\"13:30\", time_format)),\n                (datetime.strptime(\"14:00\", time_format), datetime.strptime(\"15:30\", time_format)),\n                (datetime.strptime(\"17:00\", time_format), work_end)\n            ]\n            denise_available = [\n                (work_start, datetime.strptime(\"10:30\", time_format)),\n                (datetime.strptime(\"12:30\", time_format), datetime.strptime(\"16:00\", time_format)),\n                (datetime.strptime(\"16:30\", time_format), work_end)\n            ]\n\n        combined_availability = []\n        for amy_time in amy_available:\n            for denise_time in denise_available:\n                start_time = max(amy_time[0], denise_time[0])\n                end_time = min(amy_time[1], denise_time[1])\n                if end_time - start_time >= meeting_duration:\n                    combined_availability.append((start_time, end_time))\n\n        # Find first valid time\n        for start, end in combined_availability:\n            if start + meeting_duration <= end:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{meeting_start.strftime(time_format)}:{meeting_end.strftime(time_format)}\"\n\n# Given constraints\namy_schedule = {\n    \"Monday\": [(\"10:00\", \"11:00\"), (\"12:00\", \"12:30\"), (\"15:30\", \"17:00\")],\n    \"Tuesday\": [(\"09:00\", \"10:00\"), (\"11:30\", \"12:00\"), (\"13:30\", \"14:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\ndenise_schedule = {\n    \"Monday\": [(\"09:00\", \"09:30\"), (\"10:00\", \"17:00\")],\n    \"Tuesday\": [(\"09:00\", \"10:30\"), (\"12:30\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\nmeeting_duration = timedelta(minutes=30)\npreferred_days = [\"Monday\"]\n\n# Get meeting time\nmeeting_time = find_meeting_time(amy_schedule, denise_schedule, meeting_duration, preferred_days)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_606"
        },
        {
            "final_program_time": "{10:00:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules as blocked time\nschedules = {\n    'Albert': {\n        'Monday': [(0, 9, 30), (1, 10, 30), (1, 11, 30), (1, 12, 30), (1, 13, 30), (1, 15, 30), (1, 16, 30)],\n        'Tuesday': [(0, 10, 30), (1, 11, 30), (1, 12, 30), (1, 13, 0), (1, 15, 0), (1, 16, 30)]\n    },\n    'Denise': {\n        'Monday': [(0, 9, 0), (1, 10, 30), (1, 12, 0), (1, 13, 30), (1, 15, 0), (1, 16, 30)],\n        'Tuesday': [(0, 9, 0), (1, 12, 30), (1, 13, 0), (1, 14, 0), (1, 16, 30)]\n    }\n}\n\n# Work hours and days\nwork_hours = {\n    'Monday': (9, 17),\n    'Tuesday': (9, 17)\n}\n\ndef convert_to_time(t):\n    return datetime(1, 1, 1, t[1], t[2])\n\ndef is_time_available(start_time, schedules, day):\n    end_time = start_time + meeting_duration\n    for participant, blocked_times in schedules.items():\n        for blocked in blocked_times[day]:\n            blocked_start = convert_to_time(blocked)\n            blocked_end = blocked_start + meeting_duration\n            if blocked_start < end_time and start_time < blocked_end:\n                return False\n    return True\n\ndef find_meeting_time(schedules):\n    for day in ['Monday', 'Tuesday']:\n        start_hour, end_hour = work_hours[day]\n        for hour in range(start_hour, end_hour):\n            for minute in [0, 30]:\n                start_time = datetime(1, 1, 1, hour, minute)\n                if is_time_available(start_time, schedules, day):\n                    return start_time.strftime('%H:%M:%H:%M')\n    return None\n\nproposed_time = find_meeting_time(schedules)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_607"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\njessica_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\ndoris_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define meeting parameters\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(jessica_schedule, doris_schedule, meeting_duration):\n    for day in [\"Monday\", \"Tuesday\"]:\n        if day == \"Monday\":\n            free_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:00\", \"%H:%M\")),\n                          (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                          (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n        else:  # Tuesday\n            free_times = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                          (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n        \n        for free_start, free_end in free_times:\n            # Check if there is enough time for the meeting within the free slots\n            if (free_end - free_start) >= meeting_duration:\n                proposed_start = free_start\n                proposed_end = proposed_start + meeting_duration\n                if proposed_end <= free_end:\n                    return proposed_start.strftime(\"%H:%M\") + ':' + proposed_end.strftime(\"%H:%M\")\n\n# Get proposed meeting time\nmeeting_time = find_meeting_time(jessica_schedule, doris_schedule, meeting_duration)\n\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_608"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check for overlap between two time intervals\ndef is_overlapping(start1, end1, start2, end2):\n    return max(start1, start2) < min(end1, end2)\n\n# Function to find a suitable meeting time\ndef find_meeting_time(emily_schedule, zachary_schedule, meeting_duration, preferred_day):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    if preferred_day == \"Monday\":\n        candidate_time_blocks = [\n            (work_hours_start, datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            (datetime.strptime(\"17:00\", \"%H:%M\"), work_hours_end)\n        ]\n    else:\n        return None  # Constraint of only Monday has been set\n\n    # Convert meeting duration to timedelta\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    # Check for a suitable time block\n    for start, end in candidate_time_blocks:\n        if (end - start) >= meeting_duration:\n            # Check if this time block is available for both Emily and Zachary\n            if not any(is_overlapping(start, start + meeting_duration, e_start, e_end) for e_start, e_end in emily_schedule['Monday']):\n                if not any(is_overlapping(start, start + meeting_duration, z_start, z_end) for z_start, z_end in zachary_schedule['Monday']):\n                    return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n\n    return None  # If no time found\n\n# Existing schedules\nemily_schedule = {\n    'Monday': [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n}\n\nzachary_schedule = {\n    'Monday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Meeting duration\nmeeting_duration = 30  # minutes\n\n# Find meeting time on Monday\nmeeting_time = find_meeting_time(emily_schedule, zachary_schedule, meeting_duration, \"Monday\")\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_609"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\ndef find_meeting_time():\n    # Define the constraints and busy times\n    work_start = time(9, 0)\n    work_end = time(17, 0)\n    \n    # Patrick's busy times on Tuesday\n    patrick_busy_times = [\n        (time(9, 30), time(10, 0)),\n        (time(11, 0), time(11, 30)),\n        (time(12, 30), time(13, 0)),\n        (time(16, 0), time(17, 0)),\n    ]\n    \n    # Richard's busy times on Tuesday\n    richard_busy_times = [\n        (time(9, 0), time(9, 30)),\n        (time(10, 0), time(11, 0)),\n        (time(11, 30), time(13, 30)),\n        (time(14, 0), time(15, 0)),\n        (time(15, 30), time(16, 0)),\n        (time(16, 30), time(17, 0)),\n    ]\n    \n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Combine busy times for both participants\n    busy_times = patrick_busy_times + richard_busy_times\n    busy_times.sort()\n    \n    # Find a slot for the meeting\n    current_time = timedelta(hours=work_start.hour, minutes=work_start.minute)\n    \n    while current_time + meeting_duration <= timedelta(hours=work_end.hour, minutes=work_end.minute):\n        end_time = current_time + meeting_duration\n        \n        # Check if current_time to end_time overlaps with busy times\n        overlap = any(\n            (start <= time(9, current_time.total_seconds() // 60 % 60) < end) or\n            (start < time(9, end_time.total_seconds() // 60 % 60) <= end)\n            for start, end in busy_times\n        )\n        \n        if not overlap:\n            return f\"{(current_time.total_seconds() // 3600):02.0f}:{(current_time.total_seconds() // 60 % 60):02.0f}:{(end_time.total_seconds() // 3600):02.0f}:{(end_time.total_seconds() // 60 % 60):02.0f}\"\n        \n        # Move to the next minute\n        current_time += timedelta(minutes=1)\n    \n    return None\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_610"
        },
        {
            "final_program_time": "{9:00:9:00}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the blocked schedules and preferences\nann_schedule = [\n    (datetime.strptime(\"2023-10-02 13:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-02 14:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-03 09:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-03 09:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-03 15:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-03 16:00\", \"%Y-%m-%d %H:%M\")),\n]\n\njoshua_schedule = [\n    (datetime.strptime(\"2023-10-02 10:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-02 11:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-02 11:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-02 12:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-02 14:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-02 16:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-03 09:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-03 10:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-03 11:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-03 12:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-03 12:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-03 14:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-03 15:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-03 15:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-03 16:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-03 17:00\", \"%Y-%m-%d %H:%M\")),\n]\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time():\n    for day in [\"2023-10-02\", \"2023-10-03\"]:\n        start_of_day = datetime.strptime(day + \" 09:00\", \"%Y-%m-%d %H:%M\")\n        end_of_day = datetime.strptime(day + \" 17:00\", \"%Y-%m-%d %H:%M\")\n\n        # Generate all potential meeting start times\n        time = start_of_day\n        while time <= end_of_day - meeting_duration:\n            meeting_end = time + meeting_duration\n            if not is_conflicting(time, meeting_end, ann_schedule, joshua_schedule):\n                return time.strftime(\"%H:%M:%H:%M\")\n            time += timedelta(minutes=30)  # Increment to the next half-hour slot\n\ndef is_conflicting(start, end, ann_schedule, joshua_schedule):\n    for blocked in ann_schedule + joshua_schedule:\n        if (start < blocked[1] and end > blocked[0]):  # Overlapping condition\n            return True\n    return False\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_611"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "IndexError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = timedelta(hours=9)\nwork_end = timedelta(hours=17)\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\njoshua_schedule = [\n    (timedelta(hours=11, minutes=30), timedelta(hours=12)),\n    (timedelta(hours=9), timedelta(hours=9, minutes=30)),\n    (timedelta(hours=14), timedelta(hours=14, minutes=30)),\n    (timedelta(hours=16), timedelta(hours=16, minutes=30))\n]\n\ndiane_schedule = [\n    (timedelta(hours=9, minutes=30), timedelta(hours=10, minutes=30)),\n    (timedelta(hours=11), timedelta(hours=14)),\n    (timedelta(hours=15), timedelta(hours=16, minutes=30)),\n    (timedelta(hours=9), timedelta(hours=10)),\n    (timedelta(hours=10, minutes=30), timedelta(hours=11)),\n    (timedelta(hours=11, minutes=30), timedelta(hours=12)),\n    (timedelta(hours=13), timedelta(hours=14, minutes=30)),\n    (timedelta(hours=15, minutes=30), timedelta(hours=16, minutes=30))\n]\n\ndef is_slot_available(slot, schedule):\n    for busy_start, busy_end in schedule:\n        if not (slot[1] <= busy_start or slot[0] >= busy_end):\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in [0, 1]:  # 0 = Monday, 1 = Tuesday\n        start_time = work_start\n        while start_time < work_end:\n            end_time = start_time + meeting_duration\n            \n            if end_time > work_end:\n                break\n            \n            if is_slot_available((start_time, end_time), joshua_schedule) and \\\n               is_slot_available((start_time, end_time), diane_schedule):\n                return f\"{str(start_time).split()[2][:5]}:{str(end_time).split()[2][:5]}\"\n            \n            start_time += timedelta(minutes=30)  # Check next slot\n\n# Output the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_612"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Define the existing schedules\nsharon_schedule = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n]\nlogan_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Function to find the available time slot\ndef find_meeting_time(day_schedule_1, day_schedule_2, duration):\n    # Merging schedules\n    busy_times = sorted(day_schedule_1 + day_schedule_2)\n    \n    # Check available slots\n    last_end = work_start\n    for start, end in busy_times:\n        if last_end + duration <= start:\n            return last_end\n        last_end = max(last_end, end)\n    \n    if last_end + duration <= work_end:\n        return last_end\n\n    return None\n\n# Meeting duration of one hour\nmeeting_duration = timedelta(hours=1)\n\n# Check for Monday and Tuesday\nfor day in ['Monday', 'Tuesday']:\n    if day == 'Monday':\n        meeting_start = find_meeting_time(sharon_schedule, logan_schedule, meeting_duration)\n    elif day == 'Tuesday':\n        # Adjust schedules for Tuesday if needed\n        sharon_schedule = [\n            (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n            (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n        ]\n        logan_schedule = [\n            (datetime.strptime('09:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n            (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n        ]\n        meeting_start = find_meeting_time(sharon_schedule, logan_schedule, meeting_duration)\n    \n    if meeting_start:\n        meeting_end = meeting_start + meeting_duration\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_613"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nralph_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n}\n\npatricia_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\ndef find_meeting_time(schedule1, schedule2, duration_minutes=30):\n    duration = timedelta(minutes=duration_minutes)\n    for day in [\"Monday\", \"Tuesday\"]:\n        # Create a list of free time slots\n        free_slots = []\n        # Create a full day to check for free slots\n        start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n        # Check for busy times\n        busy_times = sorted(schedule1.get(day, []) + schedule2.get(day, []))\n\n        # Calculate free slots\n        last_end_time = start_of_day\n        for start, end in busy_times:\n            if last_end_time < start:\n                free_slots.append((last_end_time, start))\n            last_end_time = max(last_end_time, end)\n        if last_end_time < end_of_day:\n            free_slots.append((last_end_time, end_of_day))\n\n        # Now find a slot that fits the duration\n        for start, end in free_slots:\n            if end - start >= duration:\n                meeting_start = start\n                meeting_end = start + duration\n                return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n\n    return None\n\n# Execute the function and get the proposed time\nstart_time, end_time = find_meeting_time(ralph_schedule, patricia_schedule)\nprint(f\"Proposed meeting time: {start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_614"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the working hours and meeting duration\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Raymond's schedule (Monday and Tuesday)\n    raymond_schedule = {\n        \"Monday\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        ],\n        \"Tuesday\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        ]\n    }\n\n    # Gerald's schedule (Monday and Tuesday)\n    gerald_schedule = {\n        \"Monday\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        \"Tuesday\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ]\n    }\n\n    # Function to check for a free slot\n    def is_slot_free(start_time, end_time, schedule):\n        for busy_start, busy_end in schedule:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n        return True\n\n    # Check Monday first\n    for start_hour in range(9, 17):  # 9:00 to 16:00\n        start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n        if start_time + meeting_duration <= work_hours_end:\n            end_time = start_time + meeting_duration\n            if is_slot_free(start_time, end_time, raymond_schedule[\"Monday\"]) and is_slot_free(start_time, end_time, gerald_schedule[\"Monday\"]):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # Check Tuesday as Raymond prefers to avoid more meetings on this day\n    for start_hour in range(9, 17):  # 9:00 to 16:00\n        start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n        if start_time + meeting_duration <= work_hours_end:\n            end_time = start_time + meeting_duration\n            if is_slot_free(start_time, end_time, raymond_schedule[\"Tuesday\"]) and is_slot_free(start_time, end_time, gerald_schedule[\"Tuesday\"]):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Find the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_615"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\ndef find_meeting_time():\n    # Define the schedule constraints\n    emily_busy_times = [(time(12, 30), time(13, 0)), (time(13, 30), time(14, 0)), (time(16, 30), time(17, 0))]\n    sandra_busy_times = [(time(9, 0), time(11, 0)), (time(11, 30), time(17, 0))]\n    \n    # Define the meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Work hours\n    work_start = time(9, 0)\n    work_end = time(17, 0)\n\n    # Check for available time slots for Tuesday\n    for hour in range(9, 17):\n        for minute in [0, 30]:  # Check for 0 and 30 minutes past each hour\n            proposed_start = time(hour, minute)\n            proposed_end = (datetime.combine(datetime.today(), proposed_start) + meeting_duration).time()\n\n            # Verify if the proposed time is within working hours\n            if proposed_end > work_end:\n                continue\n            \n            # Check if the proposed time conflicts with Emily's schedule\n            emily_conflict = any(start <= proposed_start < end or start < proposed_end <= end for start, end in emily_busy_times)\n            # Check if the proposed time conflicts with Sandra's schedule\n            sandra_conflict = any(start <= proposed_start < end or start < proposed_end <= end for start, end in sandra_busy_times)\n\n            if not emily_conflict and not sandra_conflict:\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n# Call the function to get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_616"
        },
        {
            "final_program_time": "{15:00:16:00}",
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and constraints\nworking_hours = {\n    'Monday': (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    'Tuesday': (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n}\n\n# Stephen's schedule\nstephen_schedule = {\n    'Monday': [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Robert's schedule\nrobert_schedule = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\ndef find_slot(day):\n    start_work, end_work = working_hours[day]\n    current_time = start_work\n\n    # Merge Stephen's and Robert's schedules\n    busy_times = stephen_schedule.get(day, []) + robert_schedule.get(day, [])\n    busy_times.sort()\n\n    # Checking through the busy times\n    for start, end in busy_times:\n        while current_time + meeting_duration <= start:\n            # Check for available slot\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time = max(current_time, end)\n\n    # Check available slot after the last busy time\n    if current_time + meeting_duration <= end_work:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Find a suitable time on either Monday or Tuesday\nfor day in ['Monday', 'Tuesday']:\n    proposed_time = find_slot(day)\n    if proposed_time:\n        print(proposed_time)\n        break\n```",
            "count": "calendar_scheduling_example_617"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define working hours\n    start_hour = 9\n    end_hour = 17\n    meeting_duration = timedelta(minutes=30)  # Meeting duration\n\n    # Schedule constraints\n    danielle_schedule = {\n        'Monday': [\n            (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        'Tuesday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ]\n    }\n\n    # Check for available slots on Monday\n    monday_slots = check_available_slots('Monday', start_hour, end_hour, danielle_schedule)\n    \n    # Check for available slots on Tuesday only if it's still an option\n    if not monday_slots:\n        tuesday_slots = check_available_slots('Tuesday', start_hour, end_hour, danielle_schedule)\n    else:\n        tuesday_slots = []\n\n    # Combine available slots\n    available_slots = monday_slots + tuesday_slots\n\n    # Create a meeting time\n    for start_time, end_time in available_slots:\n        if (end_time - start_time) >= meeting_duration:\n            meeting_start = start_time\n            meeting_end = meeting_start + meeting_duration\n            print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n            return\n\ndef check_available_slots(day, start_hour, end_hour, schedule):\n    working_start = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n    working_end = datetime.strptime(f\"{end_hour}:00\", \"%H:%M\")\n    \n    occupied_times = schedule[day]\n    \n    # Add start and end of working hours to occupied times\n    occupied_times = [(working_start, working_start)] + occupied_times + [(working_end, working_end)]\n    \n    available_slots = []\n    \n    # Iterate through the occupied times\n    for i in range(len(occupied_times) - 1):\n        free_start = occupied_times[i][1]\n        free_end = occupied_times[i + 1][0]\n        \n        if free_start < free_end:\n            available_slots.append((free_start, free_end))\n    \n    return available_slots\n\n# Run the function\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_618"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules for Sarah and Terry\nsarah_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nterry_busy = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\ndays = [\"Monday\", \"Tuesday\"]\n\n# Function to check if a time slot is available\ndef is_available(start, duration, busy_times):\n    end = start + duration\n    for busy_start, busy_end in busy_times:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Function to find the earliest available time slot\ndef find_earliest_time_slot():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_available(current_time, meeting_duration, sarah_busy) and is_available(current_time, meeting_duration, terry_busy):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check the next 30 minutes\n    return None\n\n# Get the proposed time\nproposed_time = find_earliest_time_slot()\nif proposed_time:\n    output = f\"{proposed_time[0]}:{proposed_time[1]}\"\n    print(f\"{output}\")\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_619"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the meeting duration\n    meeting_duration = timedelta(hours=1)\n\n    # Define the work hours\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n\n    # Define the schedules for both participants\n    christopher_schedule = [\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))\n    ]\n    maria_schedule = [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ]\n\n    # Iterate over Monday to find an available slot\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is free for both participants\n        end_time = current_time + meeting_duration\n        if all(not (start < end_time and current_time < finish) for start, finish in christopher_schedule) and \\\n           all(not (start < end_time and current_time < finish) for start, finish in maria_schedule):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_620"
        },
        {
            "final_program_time": "{0:00:1:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to determine available meeting times\ndef find_meeting_time(participant_availability, meeting_duration):\n    work_hours = [(9, 0), (17, 0)]\n    meeting_duration = timedelta(hours=meeting_duration)\n    \n    for day, slots in participant_availability.items():\n        # Create a list of available time slots\n        available_times = []\n        current_time = datetime.combine(day, datetime.min.time())\n        end_of_day = datetime.combine(day, datetime.min.time()) + timedelta(hours=work_hours[1][0], minutes=work_hours[1][1])\n\n        # Iterate through the times of the day\n        while current_time < end_of_day:\n            # Check if the current time conflicts with any busy slot\n            is_busy = any(start <= current_time.time() < end for start, end in slots)\n            if not is_busy:\n                available_times.append(current_time.time())\n            \n            current_time += timedelta(minutes=30)  # Check in 30-minute increments\n\n        # Look for a time slot long enough for the meeting\n        for index in range(len(available_times) - 1):\n            start_time = datetime.combine(day, available_times[index])\n            end_time = start_time + meeting_duration\n            \n            if end_time.time() in available_times or \\\n               any(time in available_times for time in (start_time.time(), end_time.time())):\n                return f\"{start_time.time().strftime('%H:%M')}:{end_time.time().strftime('%H:%M')}\"\n\n# Participants' schedules\nharold_schedule = {\n    'Monday': [(10, 30), (11, 0), (13, 30), (14, 0), (15, 30), (16, 0), (16, 30), (17, 0)],\n    'Tuesday': [(9, 30), (10, 0), (11, 30), (12, 0), (12, 30), (13, 0), (14, 0), (15, 30)]\n}\nbobby_schedule = {\n    'Monday': [(9, 30), (11, 0), (12, 0), (12, 30), (13, 0), (13, 30), (14, 0), (14, 30), (15, 30), (17, 0)],\n    'Tuesday': [(9, 30), (10, 0), (12, 30), (13, 0), (14, 0), (15, 30), (16, 0), (17, 0)]\n}\n\n# Combine the schedules\ncombined_schedule = {\n    day: sorted(harold_schedule[day] + bobby_schedule[day]) for day in harold_schedule.keys()\n}\n\n# Convert time slots to busy intervals\nparticipant_availability = {}\nfor day, busy_slots in combined_schedule.items():\n    participant_availability[datetime.strptime(day, \"%A\").date()] = [(datetime.time(datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")),\n                                                                     datetime.time(datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\"))) \n                                                                    for start, end in zip(busy_slots, busy_slots[1:])]\n\n# Meeting duration\nmeeting_duration = 1  # in hours\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(participant_availability, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_621"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules\nalexander_schedule = {\n    \"Monday\": [(\"09:30\", \"10:00\"), (\"11:30\", \"12:00\"), (\"16:30\", \"17:00\")],\n    \"Tuesday\": [(\"09:00\", \"09:30\"), (\"11:00\", \"12:00\"), (\"14:30\", \"15:00\"), (\"16:30\", \"17:00\")]\n}\n\nmarilyn_schedule = {\n    \"Monday\": [(\"09:00\", \"10:00\"), (\"11:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"17:00\")],\n    \"Tuesday\": [(\"09:00\", \"09:30\"), (\"10:00\", \"13:30\"), (\"14:00\", \"15:00\"), (\"15:30\", \"17:00\")]\n}\n\n# Meeting duration in minutes\nmeeting_duration = 60\n\n# Function to convert string time to datetime object\ndef to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to get the free time slots for a given day\ndef get_free_slots(day, busy_schedule):\n    start_of_day = to_datetime(\"09:00\")\n    end_of_day = to_datetime(\"17:00\")\n    busy_slots = [ (to_datetime(start), to_datetime(end)) for start, end in busy_schedule[day]]\n\n    free_slots = []\n    last_end = start_of_day\n\n    for start, end in busy_slots:\n        if last_end < start:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < end_of_day:\n        free_slots.append((last_end, end_of_day))\n\n    return free_slots\n\n# Function to find a time slot that fits the meeting duration\ndef find_meeting_time(day):\n    alexander_free_slots = get_free_slots(day, alexander_schedule)\n    marilyn_free_slots = get_free_slots(day, marilyn_schedule)\n\n    for a_start, a_end in alexander_free_slots:\n        for m_start, m_end in marilyn_free_slots:\n            start_time = max(a_start, m_start)\n            end_time = start_time + timedelta(minutes=meeting_duration)\n\n            if end_time <= min(a_end, m_end):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Check both days for a meeting time\nfor day in [\"Monday\", \"Tuesday\"]:\n    meeting_time = find_meeting_time(day)\n    if meeting_time:\n        print(meeting_time)\n        break\n```",
            "count": "calendar_scheduling_example_622"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for Melissa and James\nmelissa_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\njames_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to find available time slots\ndef find_meeting_time():\n    # Check both Monday and Tuesday for availability\n    for day in range(2):  # 0: Monday, 1: Tuesday\n        # Adjust work hours for Tuesday\n        if day == 1:\n            work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n            work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n        \n        free_slots = []\n        current_time = work_start\n\n        # Generate busy times including both participants for the current day\n        busy_times = melissa_schedule + james_schedule\n\n        # Create a list of busy intervals\n        busy_intervals = []\n        for start, end in busy_times:\n            # Offset the start time based on current day\n            busy_intervals.append((start if day == 0 else start.replace(day=start.day + 1), \n                                   end if day == 0 else end.replace(day=end.day + 1)))\n\n        # Sort busy intervals\n        busy_intervals.sort()\n\n        # Find free time slots\n        for start, end in busy_intervals:\n            # If current_time is before busy start, we have a free slot\n            if current_time < start:\n                available_time = start - current_time\n                if available_time >= meeting_duration:\n                    free_slots.append((current_time, start))\n            current_time = max(current_time, end)\n\n        # Check for availability until work_end\n        if current_time < work_end:\n            available_time = work_end - current_time\n            if available_time >= meeting_duration:\n                free_slots.append((current_time, work_end))\n\n        # Return the first suitable time slot if available\n        if free_slots:\n            meeting_start = free_slots[0][0]\n            return f\"{meeting_start.strftime('%H:%M')}:{(meeting_start + meeting_duration).strftime('%H:%M')}\"\n\n# Get the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_623"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting length\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant (busy times)\njames_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\nfrank_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ndef is_time_available(schedule, start_time, duration):\n    end_time = start_time + duration\n    for busy_start, busy_end in schedule:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Checking Monday for available times\nfor hour in range(work_start.hour, work_end.hour):\n    for minute in [0, 30]:\n        proposed_start = datetime.strptime(f\"{hour:02}:{minute:02}\", \"%H:%M\")\n        if proposed_start + meeting_duration <= work_end:\n            if is_time_available(james_schedule, proposed_start, meeting_duration) and \\\n               is_time_available(frank_schedule, proposed_start, meeting_duration):\n                print(f\"{proposed_start.strftime('%H:%M')}:{(proposed_start + meeting_duration).strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_624"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Constraints\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Harold's schedule\nharold_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n# Blocking specific times for Tuesday\nharold_schedule.extend([\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n])\n\n# Function to check if time slot is free\ndef is_free(start, end, schedule):\n    for (busy_start, busy_end) in schedule:\n        if not (end <= busy_start or start >= busy_end):\n            return False\n    return True\n\n# Find potential meeting time\ndef find_meeting_time():\n    # Check Monday\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        if is_free(current_time, current_time + meeting_duration, harold_schedule[:2]):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n    # Check Tuesday after 14:30\n    current_time = datetime.strptime(\"14:30\", \"%H:%M\")\n    while current_time + meeting_duration <= work_hours_end:\n        if is_free(current_time, current_time + meeting_duration, harold_schedule[2:]):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n# Output proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_625"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules\npatricia_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\njesse_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if time range is free\ndef is_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if start < busy_end and end > busy_start:  # overlaps\n            return False\n    return True\n\n# Search for available time slots\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        end_time = current_time + meeting_duration\n        if is_free(current_time, end_time, patricia_schedule) and is_free(current_time, end_time, jesse_schedule):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # check every half hour\n    return None\n\n# Execute the meeting time search\nmeeting_time = find_meeting_time()\nprint(f\"{{{meeting_time}}}\")\n```",
            "count": "calendar_scheduling_example_626"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(shirley_schedule, adam_schedule, duration):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of busy times\n    busy_times = sorted(shirley_schedule + adam_schedule)\n\n    # Generate a list of available time slots\n    available_times = []\n    \n    # Start by checking the time before the first busy slot\n    last_end_time = work_hours_start\n    \n    for start, end in busy_times:\n        if last_end_time + timedelta(minutes=duration) <= start:\n            available_times.append((last_end_time, last_end_time + timedelta(minutes=duration)))\n        last_end_time = max(last_end_time, end)\n    \n    # Check after the last busy slot until the end of work hours\n    if last_end_time + timedelta(minutes=duration) <= work_hours_end:\n        available_times.append((last_end_time, last_end_time + timedelta(minutes=duration)))\n\n    return available_times\n\ndef format_time_slot(slot):\n    start, end = slot\n    return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n\n# Shirley's and Adam's schedules\nshirley_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\nadam_schedule = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration in minutes\nduration = 30\n\n# Find available meeting slots\navailable_slots = find_meeting_time(shirley_schedule, adam_schedule, duration)\n\n# Output the first available time\nif available_slots:\n    proposed_time = format_time_slot(available_slots[0])\nelse:\n    proposed_time = \"No available time found\"\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_627"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\nsamantha_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\njoyce_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\ndef is_time_slot_free(start_time, end_time, schedule):\n    for (busy_start, busy_end) in schedule:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in range(2):  # Monday (0) and Tuesday (1)\n        start_of_day = working_hours_start\n        end_of_day = working_hours_end\n\n        while start_of_day + meeting_duration <= end_of_day:\n            end_time = start_of_day + meeting_duration\n            \n            if day == 0:  # Monday\n                if is_time_slot_free(start_of_day, end_time, samantha_schedule) and \\\n                   is_time_slot_free(start_of_day, end_time, joyce_schedule):\n                    return f\"{start_of_day.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            else:  # Tuesday\n                if start_of_day not in [s[0] for s in samantha_schedule] and \\\n                   start_of_day not in [j[0] for j in joyce_schedule]:\n                    if is_time_slot_free(start_of_day, end_time, samantha_schedule) and \\\n                       is_time_slot_free(start_of_day, end_time, joyce_schedule):\n                        return f\"{start_of_day.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            start_of_day += timedelta(minutes=30)  # Move the start time in increments\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_628"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and durations\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nmargaret_schedule = [\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), working_hours_end),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), # Tuesday\n]\n\nalexis_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), working_hours_end),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), # Tuesday\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n]\n\n# Define the function to find a suitable time\ndef find_meeting_time():\n    # Start checking from 14:30 on Tuesday\n    proposed_time = datetime.strptime('14:30', '%H:%M')\n    \n    # Check for availability for 30 minutes from proposed_time\n    while proposed_time + meeting_duration <= working_hours_end:\n        meeting_start = proposed_time\n        meeting_end = proposed_time + meeting_duration\n        \n        # Check if both participants are available\n        if all(\n            not (meeting_start < end and meeting_end > start)\n            for start, end in margaret_schedule + alexis_schedule\n        ):\n            return proposed_time.strftime('%H:%M') + ':' + (proposed_time + meeting_duration).strftime('%H:%M')\n\n        proposed_time += timedelta(minutes=1)\n    \n    return None\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_629"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nWORK_START = datetime.strptime('09:00', '%H:%M')\nWORK_END = datetime.strptime('17:00', '%H:%M')\nMEETING_DURATION = timedelta(minutes=30)\n\n# Define the schedules for Charles and Cheryl\ncheryl_schedule = {\n    'Monday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n    'Tuesday': [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ]\n}\n\ncharles_preference = {'Monday': False, 'Tuesday': True}\n\ndef find_meeting_time():\n    for day in ['Tuesday']:  # Only check Tuesday because Charles does not want Monday\n        current_time = WORK_START\n        while current_time + MEETING_DURATION <= WORK_END:\n            # Check if the current time overlaps with Cheryl's schedule\n            if all(not (start < current_time < end or start < current_time + MEETING_DURATION < end)\n                   for start, end in cheryl_schedule[day]):\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + MEETING_DURATION).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=1)  # Check the next minute\n            \n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(f\"{proposed_time}\")\n```",
            "count": "calendar_scheduling_example_630"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Define the working hours\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\n# Define the schedules\njudith_schedule = []\neric_schedule = [\n    (time(9, 0), time(12, 30)),\n    (time(13, 0), time(15, 0)),\n    (time(16, 0), time(17, 0)),\n    (time(9, 30), time(11, 30)),\n    (time(12, 0), time(13, 0)),\n    (time(13, 30), time(14, 0)),\n    (time(14, 30), time(16, 30))\n]\n\ndef is_time_available(start_time, end_time, schedule):\n    for (s, e) in schedule:\n        if start_time < e and end_time > s:\n            return False\n    return True\n\ndef find_meeting_time():\n    current_time = datetime.combine(datetime.today(), work_start)\n    end_time = datetime.combine(datetime.today(), work_end)\n\n    while current_time + meeting_duration <= end_time:\n        meeting_start = current_time.time()\n        meeting_end = (current_time + meeting_duration).time()\n\n        if is_time_available(meeting_start, meeting_end, eric_schedule):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n        current_time += timedelta(minutes=30)  # Increment by half an hour\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_631"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\n# Each entry is a tuple with start and end time\nalexis_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\nroy_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nmeeting_days = ['Tuesday']  # Alexis prefers not to meet on Monday\npreferred_timeframe = (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\n# Function to find a suitable time\ndef find_meeting_time():\n    start_time = preferred_timeframe[0]\n    end_time = preferred_timeframe[1]\n    current_time = start_time\n    \n    while current_time + meeting_duration <= end_time:\n        # Check if the current proposed time conflicts with either participant's schedule\n        proposed_end_time = current_time + meeting_duration\n        alexis_free = all(not (start < proposed_end_time and end > current_time) for start, end in alexis_schedule)\n        roy_free = all(not (start < proposed_end_time and end > current_time) for start, end in roy_schedule)\n        \n        if alexis_free and roy_free:\n            return f\"{current_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=10)  # Increment time in 10-minute intervals\n        \n    return None  # No suitable time found in the given range\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_632"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the existing schedules\nlisa_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\ncarolyn_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to check if a time slot is free\ndef is_time_slot_free(start, end, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Check for available time slots\ndef find_available_time():\n    # Check Monday and Tuesday work hours\n    for day in ['Monday', 'Tuesday']:\n        cur_time = start_time\n        while cur_time + meeting_duration <= end_time:\n            meeting_start = cur_time\n            meeting_end = cur_time + meeting_duration\n            \n            # Check availability\n            if day == 'Monday':\n                if is_time_slot_free(meeting_start, meeting_end, lisa_schedule) and \\\n                   is_time_slot_free(meeting_start, meeting_end, carolyn_schedule[:4]):  # Only check Carolyn's Monday slots\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            else:  # Tuesday\n                if is_time_slot_free(meeting_start, meeting_end, lisa_schedule) and \\\n                   is_time_slot_free(meeting_start, meeting_end, carolyn_schedule[4:]):  # Only check Carolyn's Tuesday slots\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            \n            # Move to next time slot\n            cur_time += timedelta(minutes=30)\n\n# Proposed time for the meeting\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_633"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting():\n    # Define the participants' busy schedules\n    jesse_schedule = [\n        (16, 0), (16, 30)  # Monday busy\n    ]\n    emily_schedule = [\n        (9, 0), (14, 30), (15, 0), (15, 30), (16, 0), (17, 0),  # Monday busy\n        (9, 30), (15, 0), (15, 30), (17, 0)  # Tuesday busy\n    ]\n    \n    # Define the meeting preferences\n    jesse_preference = (10, 0)  # Jesse prefers to meet before 10:00 on Tuesday\n    meeting_duration = 0.5  # Meeting duration in hours\n    \n    # Convert time to minutes for easier calculation\n    def time_to_minutes(h, m):\n        return h * 60 + m\n    \n    def minutes_to_time(minutes):\n        return divmod(minutes, 60)\n\n    # Check for availability on Monday\n    meeting_time = None\n    for start_hour in range(9, 17):\n        for start_minute in [0, 30]:\n            start_time = time_to_minutes(start_hour, start_minute)\n            end_time = start_time + int(meeting_duration * 60)\n            \n            # Check if meeting time is free for both Jesse and Emily\n            if start_hour < 16 or (start_hour == 16 and start_minute == 0):\n                if (start_time < time_to_minutes(9, 0) or\n                    end_time > time_to_minutes(17, 0) or\n                    any(start_time < time_to_minutes(h, m) < end_time for h, m in jesse_schedule) or\n                    any(start_time < time_to_minutes(h, m) < end_time for h, m in emily_schedule)):\n                    continue\n                meeting_time = (start_hour, start_minute)\n                break\n        if meeting_time:\n            break\n\n    # If not found on Monday, check Tuesday\n    if not meeting_time:\n        for start_hour in range(9, 10):  # Only look for 9:00 - 10:00\n            for start_minute in [0, 30]:\n                start_time = time_to_minutes(start_hour, start_minute)\n                end_time = start_time + int(meeting_duration * 60)\n\n                # Check if meeting time is free for both Jesse and Emily\n                if (start_time < time_to_minutes(9, 0) or\n                    end_time > time_to_minutes(17, 0) or\n                    any(start_time < time_to_minutes(h, m) < end_time for h, m in jesse_schedule) or\n                    any(start_time < time_to_minutes(h, m) < end_time for h, m in emily_schedule)):\n                    continue\n                meeting_time = (start_hour, start_minute)\n                break\n            if meeting_time:\n                break\n\n    # Output the proposed time\n    if meeting_time:\n        start_hour, start_minute = meeting_time\n        return f\"{start_hour:02}:{start_minute:02}:{{{start_hour:02}:{start_minute + 30:02}}}\"\n    \n# Call the function and print the proposed meeting time\nproposed_time = schedule_meeting()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_634"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(russell_availability, amy_availability, meeting_duration, constraints):\n    # Get the available slots for both participants on given days\n    monday_slots = [\n        (9, 0), (9, 30), (10, 30), (11, 30), (12, 30), (13, 30), (15, 0), (16, 0)\n    ]\n    tuesday_slots = [\n        (9, 30), (10, 30), (11, 30), (13, 0), (13, 30), (16, 0), (17, 0)\n    ]\n    \n    # Remove blocked times\n    for start, end in russell_availability['Monday']:\n        monday_slots = [(s, e) for s, e in monday_slots if not (start < (s, e) < end)]\n        \n    for start, end in amy_availability['Monday']:\n        monday_slots = [(s, e) for s, e in monday_slots if not (start < (s, e) < end)]\n        \n    available_time = []\n    \n    # Search for available time slots for half an hour\n    for hour, minute in monday_slots:\n        if (hour * 60 + minute) + meeting_duration <= 17 * 60:  # Ensure the meeting fits in work hours\n            available_time.append((hour, minute))\n    \n    # Add constraints for Amy\n    if constraints['Amy']['Monday']['after'] < 17:\n        available_time = [(h, m) for h, m in available_time if (h * 60 + m) <= constraints['Amy']['Monday']['after'] * 60]\n    \n    # Format the result\n    if available_time:\n        proposed_time = available_time[0]  # Get the first available slot\n        return f\"{proposed_time[0]:02}:{proposed_time[1]:02}:{proposed_time[0]:02}:{proposed_time[1] + 30:02}\"\n    else:\n        return \"No available time.\"\n\n# Define the existing schedules\nrussell_availability = {\n    'Monday': [(11*60+0, 12*60+30), (15*60+0, 15*60+30), (16*60+0, 16*60+30)],\n}\namy_availability = {\n    'Monday': [(9*60+0, 9*60+30), (10*60+30, 11*60+30), (12*60+30, 13*60+0), (13*60+30, 15*60+0)],\n}\n\n# Meeting constraints\nconstraints = {\n    'Amy': {'Monday': {'after': 13.5}},  # After 13:30\n}\n\n# Meeting duration (in minutes)\nmeeting_duration = 30 \n\n# Schedule the meeting\nprint(schedule_meeting(russell_availability, amy_availability, meeting_duration, constraints))\n```",
            "count": "calendar_scheduling_example_635"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(madison_schedule, lauren_schedule, duration, day_preference):\n    # Convert time strings to datetime objects\n    def to_datetime(time_str):\n        return datetime.strptime(time_str, '%H:%M')\n\n    work_hours = (to_datetime('09:00'), to_datetime('17:00'))\n    \n    # Blocks for Madison\n    madison_blocks = []\n    for time in madison_schedule[day_preference]:\n        start, end = time\n        madison_blocks.append((to_datetime(start), to_datetime(end)))\n\n    # Blocks for Lauren\n    lauren_blocks = []\n    for time in lauren_schedule[day_preference]:\n        start, end = time\n        lauren_blocks.append((to_datetime(start), to_datetime(end)))\n    \n    # Merge the blocks for both participants\n    combined_blocks = madison_blocks + lauren_blocks\n    combined_blocks.sort()  # Sort by start time\n    \n    # Find free slots\n    current_time = work_hours[0]\n    for start, end in combined_blocks:\n        # Check for free slot before the next block\n        if current_time + timedelta(minutes=duration) <= start:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=duration)).strftime('%H:%M')}\"\n        current_time = max(current_time, end)  # Move to the end of the current block\n\n    # Final check at the end of the work hours\n    if current_time + timedelta(minutes=duration) <= work_hours[1]:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=duration)).strftime('%H:%M')}\"\n    \n    return None\n\nmadison_schedule = {\n    'Tuesday': [('09:00', '09:30'), ('10:30', '11:00'), ('12:00', '12:30'), ('13:30', '14:30'), ('16:30', '17:00')]\n}\n\nlauren_schedule = {\n    'Tuesday': [('09:00', '09:30'), ('10:00', '10:30'), ('12:00', '13:30'), ('14:30', '15:00'), ('16:30', '17:00')]\n}\n\nmeeting_duration = 30  # minutes\npreferred_day = 'Tuesday'\n\nmeeting_time = find_meeting_time(madison_schedule, lauren_schedule, meeting_duration, preferred_day)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_636"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(cheryl_schedule, janice_schedule, meeting_duration, preferred_day):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_length = timedelta(minutes=meeting_duration)\n\n    def get_availability(day_schedule, preferred_day):\n        day_slots = []\n        current_time = work_hours_start\n\n        while current_time < work_hours_end:\n            next_time = current_time + meeting_length\n            if next_time > work_hours_end:\n                break\n            \n            if current_time not in day_schedule and next_time not in day_schedule:\n                day_slots.append(current_time)\n                \n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n        \n        return day_slots\n\n    cheryl_day_schedule = set(cheryl_schedule.get(preferred_day, []))\n    janice_day_schedule = set(janice_schedule.get(preferred_day, []))\n    \n    # Combine both schedules to find common free slots\n    combined_schedule = cheryl_day_schedule.union(janice_day_schedule)\n    \n    # Get the available slots based on both schedules\n    available_slots = get_availability(combined_schedule, preferred_day)\n\n    # Output the first available slot that fits the requirement\n    if available_slots:\n        meeting_time = available_slots[0]\n        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + meeting_length).strftime('%H:%M')}\"\n    \n    return None\n\n# Define the schedules\ncheryl_schedule = {\n    \"Monday\": [datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"),\n               datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n               datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n               datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")],\n\n    \"Tuesday\": [datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n}\n\njanice_schedule = {\n    \"Monday\": [datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n               datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n               datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")],\n\n    \"Tuesday\": [datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n}\n\n# Find a suitable meeting time\nmeeting_duration = 30  # in minutes\npreferred_day = \"Monday\"\nproposed_time = find_meeting_time(cheryl_schedule, janice_schedule, meeting_duration, preferred_day)\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_637"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(jason_schedule, deborah_schedule, meeting_duration, work_hours):\n    work_start, work_end = work_hours\n    meeting_start_time = work_start\n    \n    while meeting_start_time + meeting_duration <= work_end:\n        meeting_end_time = meeting_start_time + meeting_duration\n        \n        # Check if the time slot conflicts with Jason's schedule\n        jason_free = True\n        for busy_start, busy_end in jason_schedule:\n            if (meeting_start_time < busy_end) and (meeting_end_time > busy_start):\n                jason_free = False\n                break\n        \n        # Check if the time slot conflicts with Deborah's schedule\n        deborah_free = True\n        for busy_start, busy_end in deborah_schedule:\n            if (meeting_start_time < busy_end) and (meeting_end_time > busy_start):\n                deborah_free = False\n                break\n        \n        if jason_free and deborah_free:\n            return (meeting_start_time.strftime(\"%H:%M\"), meeting_end_time.strftime(\"%H:%M\"))\n        \n        meeting_start_time += timedelta(minutes=30)  # Check next 30 minutes\n    \n    return None\n\n# Existing schedules\njason_schedule = [\n    (datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n    (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n    (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n    (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n    (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30)),\n    (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30)),\n    (datetime(2023, 10, 3, 11, 30), datetime(2023, 10, 3, 12, 0)),\n    (datetime(2023, 10, 3, 13, 30), datetime(2023, 10, 3, 14, 0)),\n]\n\ndeborah_schedule = [\n    (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 17, 0)),\n    (datetime(2023, 10, 3, 9, 0), datetime(2023, 10, 3, 11, 0)),\n    (datetime(2023, 10, 3, 11, 30), datetime(2023, 10, 3, 13, 30)),\n    (datetime(2023, 10, 3, 14, 0), datetime(2023, 10, 3, 17, 0)),\n]\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours = (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 17, 0))\n\n# Find meeting time\nstart_time, end_time = find_meeting_time(jason_schedule, deborah_schedule, meeting_duration, work_hours)\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_638"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import timedelta, datetime\n\n# Define the meeting time duration in hours\nmeeting_duration = timedelta(hours=1)\n\n# Define work hours start and end time\nwork_start_time = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participant schedules\nmichelle_schedule = [\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\namber_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Function to find the first available time for the meeting\ndef find_meeting_time():\n    for day in range(2):  # 0 for Monday, 1 for Tuesday\n        # Define the starting and ending datetime for the day\n        current_start_time = work_start_time.replace(hour=work_start_time.hour + day * 24)\n        current_end_time = work_end_time.replace(hour=work_end_time.hour + day * 24)\n\n        # Check for available time slots\n        current_time = current_start_time\n        while current_time + meeting_duration <= current_end_time:\n            # Check if current_time does not overlap with Michelle's schedule\n            michelle_free = all(not (start < current_time < end or start < current_time + meeting_duration < end)\n                                for start, end in michelle_schedule)\n\n            # Check if current_time does not overlap with Amber's schedule\n            amber_free = all(not (start < current_time < end or start < current_time + meeting_duration < end)\n                             for start, end in amber_schedule)\n\n            if michelle_free and amber_free:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n            current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n    return None  # In case no time found (not expected from given data)\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_639"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Define the busy schedules for Bobby and Michael\nbobby_busy = [\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n]\nmichael_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n]\n\n# Define the duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\ndef is_time_free(start_time, end_time, busy_schedule):\n    for busy_start, busy_end in busy_schedule:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\ndef find_meeting_time(working_hours, bobby_busy, michael_busy, meeting_duration):\n    for start_hour, end_hour in working_hours:\n        current_time = start_hour\n        while current_time + meeting_duration <= end_hour:\n            end_time = current_time + meeting_duration\n            if is_time_free(current_time, end_time, bobby_busy) and is_time_free(current_time, end_time, michael_busy):\n                return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n            current_time += timedelta(minutes=30)  # Increment in half-hour blocks\n    return None\n\n# Find the meeting time\nmeeting_time = find_meeting_time(working_hours, bobby_busy, michael_busy)\n\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")  # Output the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_640"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(mason_schedule, gary_schedule, meeting_duration, work_hours):\n    work_start, work_end = map(lambda x: datetime.strptime(x, \"%H:%M\"), work_hours)\n    gary_busy_times = [tuple(map(lambda x: datetime.strptime(x, \"%H:%M\"), busy)) for busy in gary_schedule]\n\n    # Create a list of all possible meeting slots\n    current_time = work_start\n    meeting_slots = []\n\n    while current_time + meeting_duration <= work_end:\n        is_conflict = False\n        for busy_start, busy_end in gary_busy_times:\n            if current_time < busy_end and current_time + meeting_duration > busy_start:\n                is_conflict = True\n                break\n        if not is_conflict:\n            meeting_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    # Find the earliest available meeting time for Mason and Gary\n    if meeting_slots:\n        earliest_time = meeting_slots[0]\n        return f\"{earliest_time.strftime('%H:%M')}:{(earliest_time + meeting_duration).strftime('%H:%M')}\"\n    return None\n\n# Meeting parameters\nmason_schedule = []  # Mason has no meetings\ngary_schedule = [\n    (\"09:00\", \"14:30\"),\n    (\"16:00\", \"17:00\"),\n    (\"09:00\", \"11:00\"), \n    (\"11:30\", \"14:00\"), \n    (\"15:30\", \"16:00\"), \n    (\"16:30\", \"17:00\")\n]\nmeeting_duration = timedelta(hours=1)\nwork_hours = (\"09:00\", \"17:00\")\n\n# Calculate meeting time\nresult = find_meeting_time(mason_schedule, gary_schedule, meeting_duration, work_hours)\nprint(result)\n```",
            "count": "calendar_scheduling_example_641"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check availability of participants\ndef is_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Function to find a meeting time\ndef find_meeting_time(participants_schedules, duration, preferred_day=None):\n    day_mapping = {'Monday': [0], 'Tuesday': [1]}\n    time_slots = []\n    \n    # Convert time strings into datetime objects\n    for day, busy_times in participants_schedules.items():\n        for busy_start, busy_end in busy_times:\n            time_slots.append((day, datetime.strptime(busy_start, \"%H:%M\"), datetime.strptime(busy_end, \"%H:%M\")))\n\n    # Construct the full day schedule for 9:00 to 17:00\n    working_hours = {\n        'Monday': (datetime.strptime('09:00', \"%H:%M\"), datetime.strptime('17:00', \"%H:%M\")),\n        'Tuesday': (datetime.strptime('09:00', \"%H:%M\"), datetime.strptime('17:00', \"%H:%M\")),\n    }\n    \n    meeting_duration = timedelta(hours=duration)\n\n    for day in working_hours.keys():\n        start_of_day, end_of_day = working_hours[day]\n        current_time = start_of_day\n\n        while current_time + meeting_duration <= end_of_day:\n            time_slot_end = current_time + meeting_duration\n            busy_times = [(s, e) for d, s, e in time_slots if d == day]\n\n            if is_available(current_time, time_slot_end, busy_times):\n                # Found available time slot\n                return f\"{current_time.strftime('%H:%M')}:{time_slot_end.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return None\n\n# Existing schedules for participants\nparticipants_schedules = {\n    'Monday': [(\"09:00\", \"10:00\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:30\", \"15:00\"), (\"15:30\", \"16:00\")],\n    'Tuesday': [(\"09:00\", \"10:00\"), (\"10:30\", \"12:00\"), (\"13:00\", \"17:00\")]\n}\n\n# Find an available meeting time for one hour on Tuesday\nmeeting_time = find_meeting_time(participants_schedules, 1, preferred_day='Tuesday')\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_642"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(pauls_schedule, sophias_schedule, meeting_duration, work_hours):\n    # Prepare work hours\n    work_start, work_end = [datetime.strptime(t, '%H:%M') for t in work_hours]\n    \n    # Create a list of all minutes in the work hours\n    all_minutes = [(work_start + timedelta(minutes=i)).time() for i in range((work_end - work_start).seconds // 60)]\n    \n    # Blocked times for Paul and Sophia\n    blocked_times = []\n    for start, end in pauls_schedule:\n        blocked_times.append((start, end))\n    for start, end in sophias_schedule:\n        blocked_times.append((start, end))\n    \n    # Allow each time to have a meeting if it's not blocked\n    for start_time in all_minutes:\n        end_time = (datetime.combine(datetime.today(), start_time) + timedelta(minutes=meeting_duration)).time()\n        if end_time > work_end.time():\n            continue\n        if all(not (start < end_time and end > start_time) for start, end in blocked_times):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    return None\n\n# Paul's schedule (blocked times)\npauls_schedule = [\n    (datetime.strptime(\"10:30\", '%H:%M').time(), datetime.strptime(\"11:00\", '%H:%M').time()),\n    (datetime.strptime(\"12:00\", '%H:%M').time(), datetime.strptime(\"13:00\", '%H:%M').time()),\n    (datetime.strptime(\"14:00\", '%H:%M').time(), datetime.strptime(\"15:00\", '%H:%M').time()),\n    (datetime.strptime(\"16:00\", '%H:%M').time(), datetime.strptime(\"17:00\", '%H:%M').time())\n]\n\n# Sophia's schedule (blocked times)\nsophias_schedule = [\n    (datetime.strptime(\"09:00\", '%H:%M').time(), datetime.strptime(\"17:00\", '%H:%M').time()),\n    (datetime.strptime(\"09:30\", '%H:%M').time(), datetime.strptime(\"10:00\", '%H:%M').time()),\n    (datetime.strptime(\"14:00\", '%H:%M').time(), datetime.strptime(\"14:30\", '%H:%M').time()),\n    (datetime.strptime(\"14:30\", '%H:%M').time(), datetime.strptime(\"17:00\", '%H:%M').time())\n]\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Work hours\nwork_hours = [\"09:00\", \"17:00\"]\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(pauls_schedule, sophias_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_643"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules for Emily and Mark\nemily_schedule = {\n    \"Monday\": [(9, 0, 9, 30), (10, 0, 11, 0), (12, 0, 13, 0), \n               (13, 30, 14, 30), (16, 0, 16, 30)],\n    \"Tuesday\": [(9, 0, 9, 30), (11, 0, 11, 30), (12, 0, 13, 0), \n                (15, 30, 16, 0), (16, 30, 17, 0)],\n}\n\nmark_schedule = {\n    \"Monday\": [(9, 0, 10, 0), (10, 30, 11, 0), (12, 0, 12, 30), \n               (13, 0, 16, 30)],\n    \"Tuesday\": [(9, 30, 10, 0), (10, 30, 11, 30), (12, 0, 13, 30), \n                (14, 0, 16, 0), (16, 30, 17, 0)],\n}\n\n# Meeting requirements\nmeeting_duration = 1  # in hours\nmeeting_days = [\"Monday\", \"Tuesday\"]\n\ndef find_free_time(emily_schedule, mark_schedule, meeting_duration, meeting_days):\n    # Function to get all busy slots\n    def get_busy_slots(schedule):\n        busy_slots = []\n        for day in schedule:\n            busy_slots.extend(schedule[day])\n        return busy_slots\n\n    # Function to convert busy slots to free slots\n    def convert_to_free_slots(busy_slots, day):\n        free_slots = []\n        start_time = 9  # Work starts at 9:00\n        end_time = 17   # Work ends at 17:00\n\n        # Sort busy slots and check for free time in between\n        busy_slots = sorted(busy_slots)\n        for busy_start_hour, busy_start_min, busy_end_hour, busy_end_min in busy_slots:\n            busy_start = busy_start_hour * 60 + busy_start_min\n            busy_end = busy_end_hour * 60 + busy_end_min\n            # Before the first meeting\n            if start_time * 60 < busy_start:\n                free_slots.append((start_time, 0, busy_start_hour, busy_start_min))\n            start_time = busy_end_hour + (busy_end_min / 60)\n\n        # After the last meeting\n        if start_time < end_time:\n            free_slots.append((start_time, 0, end_time, 0))\n\n        return free_slots\n\n    busy_slots_emily = get_busy_slots(emily_schedule)\n    busy_slots_mark = get_busy_slots(mark_schedule)\n\n    # Merging busy slots\n    combined_busy_slots = busy_slots_emily + busy_slots_mark\n\n    for day in meeting_days:\n        free_slots = convert_to_free_slots(combined_busy_slots, day)\n\n        for start_hour, start_min, end_hour, end_min in free_slots:\n            if (end_hour - start_hour) + (end_min - start_min) / 60 >= meeting_duration:\n                meeting_start = f\"{int(start_hour):02}:{int(start_min):02}\"\n                meeting_end_hour = int(start_hour) + meeting_duration\n                meeting_end = f\"{int(meeting_end_hour):02}:{int(start_min):02}\"\n                return f\"{meeting_start}:{meeting_end}\"\n\n# Find meeting time\nresult = find_free_time(emily_schedule, mark_schedule, meeting_duration, meeting_days)\nprint(result)\n```",
            "count": "calendar_scheduling_example_644"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and duration for the meeting\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the participants' existing schedules\nKyle_schedule = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))\n]\n\nSharon_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Function to check if a given time slot is free for both participants\ndef is_slot_free(start, end):\n    for k_start, k_end in Kyle_schedule:\n        if (start < k_end and end > k_start):  # Overlaps Kyle's schedule\n            return False\n    for s_start, s_end in Sharon_schedule:\n        if (start < s_end and end > s_start):  # Overlaps Sharon's schedule\n            return False\n    return True\n\n# Find a suitable time slot for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_slot_free(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next 30 minutes\n    return None\n\n# Get the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_645"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(stephen_schedule, alexis_schedule, meeting_duration, work_hours):\n    # Define the work hours \n    start_time = datetime.strptime(work_hours[0], '%H:%M')\n    end_time = datetime.strptime(work_hours[1], '%H:%M')\n    \n    # Combine schedules into a list of busy times\n    busy_times = []\n    for schedule in stephen_schedule + alexis_schedule:\n        busy_times.append((datetime.strptime(schedule[0], '%H:%M'), datetime.strptime(schedule[1], '%H:%M')))\n    \n    # Check for free time slots\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        is_free = True\n        \n        for busy_start, busy_end in busy_times:\n            if (current_time < busy_end and meeting_end_time > busy_start):\n                is_free = False\n                break\n        \n        if is_free:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        # Move to the next minute\n        current_time += timedelta(minutes=1)\n\n# Existing schedules\nstephen_schedule = [\n    (\"09:30\", \"10:00\"), (\"11:00\", \"11:30\"), (\"14:00\", \"14:30\"), \n    (\"15:00\", \"15:30\"),\n    (\"10:30\", \"11:00\"), (\"12:00\", \"12:30\"), (\"14:30\", \"16:30\")\n]\n\nalexis_schedule = [\n    (\"09:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:30\", \"17:00\"),\n    (\"09:00\", \"15:30\"), (\"16:00\", \"16:30\")\n]\n\n# Meeting details\nmeeting_duration = timedelta(hours=1)\nwork_hours = (\"09:00\", \"17:00\")\n\n# Finding the meeting time\nproposed_time = find_meeting_time(stephen_schedule, alexis_schedule, meeting_duration, work_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_646"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules\nnatalie_schedule = [\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nfrances_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), work_end),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\ndef find_meeting_time(duration):\n    # Convert duration in hours to timedelta\n    meeting_duration = timedelta(hours=duration)\n    \n    # Check for both days\n    for day in [0, 1]:  # 0 for Monday, 1 for Tuesday\n        for start_hour in range(9, 17):  # 9 AM to 4 PM\n            proposed_start = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n            proposed_end = proposed_start + meeting_duration\n            \n            # Check if the proposed time is within work hours\n            if proposed_end > work_end:\n                continue\n            \n            # Check for schedule conflicts for Natalie\n            natalie_free = True\n            for start, end in natalie_schedule:\n                if proposed_start < end and proposed_end > start:\n                    natalie_free = False\n                    break\n            \n            # Check for schedule conflicts for Frances\n            frances_free = True\n            for start, end in frances_schedule:\n                if proposed_start < end and proposed_end > start:\n                    frances_free = False\n                    break\n            \n            # Check if both are free and Frances is not meeting after 13:30 on Monday\n            if natalie_free and frances_free:\n                if day == 0 and proposed_start >= datetime.strptime(\"13:30\", \"%H:%M\"):\n                    continue\n                # Return the valid meeting time\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n# Find a suitable time for a 1-hour meeting\nmeeting_time = find_meeting_time(1)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_647"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules (start, end) as tuples in (hour:minute) format\nbenjamin_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\njoe_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest time slot available for both\ndef find_meeting_time(benjamin_schedule, joe_schedule, meeting_duration):\n    # Flatten the busy times into a single list\n    busy_times = []\n    \n    # Add both schedules to busy times\n    busy_times.extend(benjamin_schedule)\n    busy_times.extend(joe_schedule)\n    \n    # Sort busy times\n    busy_times.sort()\n\n    # Check for available slots\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_working_day = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    while current_time + meeting_duration <= end_working_day:\n        # Check if current_time is available\n        is_available = True\n        for start, end in busy_times:\n            if start <= current_time < end or start < current_time + meeting_duration <= end:\n                is_available = False\n                break\n        \n        if is_available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(benjamin_schedule, joe_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_648"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\njose_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nbryan_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Define working hours and meeting duration\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Function to find available meeting slots\ndef find_meeting_time(jose_schedule, bryan_schedule, working_start, working_end, meeting_duration):\n    merged_schedule = sorted(jose_schedule + bryan_schedule)\n    \n    # Initialize the available start time\n    available_start = working_start\n    \n    for start, end in merged_schedule:\n        # Check if we can schedule the meeting before the next blocked time\n        if available_start + meeting_duration <= start:\n            return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n        # Move the available start time past the current blocked time\n        available_start = max(available_start, end)\n        \n    # Final check if there's time for a meeting at the end of the working hours\n    if available_start + meeting_duration <= working_end:\n        return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(jose_schedule, bryan_schedule, working_start, working_end, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_649"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and durations\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\nsean_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ncarol_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ndef find_meeting_time(sean_schedule, carol_schedule, start_time, end_time, meeting_duration):\n    # Check each minute in the working hours for a valid meeting time\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        \n        # Check if this time conflicts with Sean's schedule\n        sean_free = all(not (start < meeting_end_time and end > current_time) for start, end in sean_schedule)\n        \n        # Check if this time conflicts with Carol's schedule\n        carol_free = all(not (start < meeting_end_time and end > current_time) for start, end in carol_schedule)\n        \n        if sean_free and carol_free:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)\n\n# Call the function to get the meeting time\nmeeting_time = find_meeting_time(sean_schedule, carol_schedule, start_time, end_time, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_650"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(arthur_schedule, thomas_schedule, meeting_duration, days):\n    # Work Hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert the schedules to datetime objects\n    arthur_availability = []\n    thomas_availability = []\n    \n    # Process Arthur's Schedule\n    for day in days:\n        arthur_availability.append((work_start, work_end))  # Start with full availability\n        for start, end in arthur_schedule[day]:\n            # Remove blocked times from availability\n            arthur_availability[-1] = (arthur_availability[-1][0], datetime.strptime(start, \"%H:%M\"))\n            arthur_availability.append((datetime.strptime(end, \"%H:%M\"), work_end))\n    \n    # Process Thomas's Schedule\n    for day in days:\n        thomas_availability.append((work_start, work_end))  # Start with full availability\n        for start, end in thomas_schedule[day]:\n            # Remove blocked times from availability\n            thomas_availability[-1] = (thomas_availability[-1][0], datetime.strptime(start, \"%H:%M\"))\n            thomas_availability.append((datetime.strptime(end, \"%H:%M\"), work_end))\n    \n    # Find common availability\n    for arthur_time in arthur_availability:\n        for thomas_time in thomas_availability:\n            start_time = max(arthur_time[0], thomas_time[0])\n            end_time = min(arthur_time[1], thomas_time[1])\n            if end_time - start_time >= meeting_duration:\n                # Format output\n                meeting_start = start_time\n                meeting_end = meeting_start + meeting_duration\n                if meeting_end <= end_time:\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No suitable time found\"\n\n# Schedules for Arthur and Thomas\narthur_schedule = {\n    \"Monday\": [(\"14:00\", \"14:30\")],\n    \"Tuesday\": [(\"12:00\", \"13:00\"), (\"15:30\", \"16:00\")]\n}\n\nthomas_schedule = {\n    \"Monday\": [(\"10:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"17:00\")],\n    \"Tuesday\": [(\"10:00\", \"12:00\"), (\"13:00\", \"15:00\"), (\"15:30\", \"17:00\")]\n}\n\n# Meeting duration of 1 hour\nmeeting_duration = timedelta(hours=1)\n\n# Days to consider for scheduling\ndays = [\"Monday\"]\n\n# Find and print the meeting time\nprint(find_meeting_time(arthur_schedule, thomas_schedule, meeting_duration, days))\n```",
            "count": "calendar_scheduling_example_651"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\njesse_schedule = [\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n]\n\nlawrence_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Create a function to find a free slot\ndef find_meeting_time(jesse_schedule, lawrence_schedule, work_start, work_end, duration):\n    # Combine the busy times into a single list\n    busy_times = jesse_schedule + lawrence_schedule\n\n    # Sort the busy times\n    busy_times.sort()\n\n    # Start checking from the beginning of work hours\n    current_time = work_start\n\n    while current_time + duration <= work_end:\n        is_conflicted = False\n        for start, end in busy_times:\n            if (start <= current_time < end) or (start < current_time + duration <= end):\n                is_conflicted = True\n                break\n        \n        if not is_conflicted:\n            return current_time.strftime(\"%H:%M\"), (current_time + duration).strftime(\"%H:%M\")\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=15)  # Check every 15 minutes for potential slots\n\n    return None, None\n\n# Scheduling the meeting\nstart_time, end_time = find_meeting_time(jesse_schedule, lawrence_schedule, work_start, work_end, meeting_duration)\n\n# Output the proposed time\nif start_time and end_time:\n    print(f\"{start_time}:{end_time}\")\nelse:\n    print(\"No available time found\")\n```\n",
            "count": "calendar_scheduling_example_652"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Participant schedules\n    samuel_schedule = [\n        (\"09:00\", \"10:30\"), \n        (\"11:30\", \"13:30\"), \n        (\"14:00\", \"14:30\"), \n        (\"15:00\", \"16:00\"),\n        (\"16:00\", \"17:00\")\n    ]\n    \n    pamela_schedule = [\n        (\"09:00\", \"14:30\"),\n        (\"15:00\", \"17:00\")\n    ]\n    \n    # Meeting duration\n    meeting_duration = 30  # in minutes\n    \n    # Function to convert time to minutes\n    def time_to_minutes(t):\n        h, m = map(int, t.split(':'))\n        return h * 60 + m\n    \n    # Function to convert minutes to time\n    def minutes_to_time(m):\n        return f\"{m // 60:02}:{m % 60:02}\"\n    \n    # Finding available time slots\n    available_times = []\n    \n    # Create full schedule of busy times\n    busy_times = []\n    for start, end in samuel_schedule + pamela_schedule:\n        busy_times.append((time_to_minutes(start), time_to_minutes(end)))\n    \n    # Check all 30-minute slots from 9:00 to 17:00\n    for start in range(time_to_minutes(\"09:00\"), time_to_minutes(\"17:00\") - meeting_duration + 1):\n        end = start + meeting_duration\n        \n        # Check if the slot is busy\n        if all(not (start < end_busy and end > start_busy) for start_busy, end_busy in busy_times):\n            available_times.append((start, end))\n    \n    # Returning the first available time slot\n    if available_times:\n        proposed_time = available_times[0]\n        return f\"{minutes_to_time(proposed_time[0])}:{minutes_to_time(proposed_time[1])}\"\n    \n    return None\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_653"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting constraints\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Define schedules for Lisa and Janet\nlisa_schedule = [\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))  # Monday\n]\n\njanet_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))   # Tuesday\n]\n\npreferences = {\n    'lisa': {'prefer_not_after': datetime.strptime(\"15:00\", \"%H:%M\")},\n    'janet': {'avoid_more_meetings_on': 'Tuesday'}\n}\n\ndef is_time_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\ndef find_meeting_time():\n    # Check Monday\n    day = \"Monday\"\n    current_time = working_hours[0]\n\n    while current_time + meeting_duration <= working_hours[1]:\n        end_time = current_time + meeting_duration\n        if (is_time_available(current_time, end_time, lisa_schedule) and\n            is_time_available(current_time, end_time, janet_schedule)):\n            # Check Lisa's preference\n            if current_time.time() > preferences['lisa']['prefer_not_after'].time():\n                current_time += timedelta(minutes=30)  # Increment by 30 minutes if this time is not suitable\n                continue\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n        current_time += timedelta(minutes=30)\n\n    # Check Tuesday if more meetings on Tuesday should be avoided\n    if preferences['janet']['avoid_more_meetings_on'] == 'Tuesday':\n        return None  # Johnson prefers not to meet on Tuesday\n\n    current_time = working_hours[0]\n    \n    while current_time + meeting_duration <= working_hours[1]:\n        end_time = current_time + meeting_duration\n        if (is_time_available(current_time, end_time, lisa_schedule) and\n            is_time_available(current_time, end_time, janet_schedule)):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_654"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participant schedules\nkatherine_availability = [\n    (start_time, datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), end_time)\n]\n\nandrew_availability = [\n    (start_time, datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), end_time)\n]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\ndef find_meeting_time(katherine_avail, andrew_avail, duration):\n    for k_start, k_end in katherine_avail:\n        for a_start, a_end in andrew_avail:\n            # Find the intersection of available times\n            start = max(k_start, a_start)\n            end = min(k_end, a_end)\n            \n            if end - start >= duration:\n                return (start, end)\n\n# Find a suitable time for the meeting\nmeeting_start, meeting_end = find_meeting_time(katherine_availability, andrew_availability, meeting_duration)\n\n# Output the proposed time in HH:MM:HH:MM format\noutput_time = f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\nprint(output_time)\n```",
            "count": "calendar_scheduling_example_655"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nroy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\nnancy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Check available time slots for Tuesday after 13:30\ndef find_meeting_time():\n    day = \"Tuesday\"\n    \n    # Find end of the day\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Available slots for Roy and Nancy\n    roy_busy_times = roy_schedule[day]\n    nancy_busy_times = nancy_schedule[day]\n    \n    # Combine and mark busy times\n    busy_times = roy_busy_times + nancy_busy_times\n    busy_times.sort(key=lambda x: x[0])  # Sort by start time\n    \n    # Find available time\n    last_end = datetime.strptime(\"13:30\", \"%H:%M\")  # Start looking after Nancy's preference\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n    \n    # Check for time after the last busy slot\n    if last_end + meeting_duration <= end_of_day:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Output proposal\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_656"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define participant schedules and constraints\n    charles_schedule = [\n        (datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 11, 0)),\n        (datetime(2023, 10, 16, 12, 0), datetime(2023, 10, 16, 12, 30)),\n        (datetime(2023, 10, 16, 13, 30), datetime(2023, 10, 16, 14, 0)),\n        (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 15, 30)),\n        (datetime(2023, 10, 16, 16, 0), datetime(2023, 10, 16, 17, 0)),\n        (datetime(2023, 10, 17, 12, 0), datetime(2023, 10, 17, 12, 30)),\n        (datetime(2023, 10, 17, 13, 0), datetime(2023, 10, 17, 14, 0)),\n        (datetime(2023, 10, 17, 14, 30), datetime(2023, 10, 17, 15, 0)),\n        (datetime(2023, 10, 17, 16, 30), datetime(2023, 10, 17, 17, 0)),\n    ]\n    \n    jose_schedule = [\n        (datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 17, 0)),\n        (datetime(2023, 10, 17, 9, 0), datetime(2023, 10, 17, 10, 0)),\n        (datetime(2023, 10, 17, 11, 0), datetime(2023, 10, 17, 11, 30)),\n        (datetime(2023, 10, 17, 12, 0), datetime(2023, 10, 17, 15, 30)),\n    ]\n\n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Available slots for Monday and Tuesday\n    days = [datetime(2023, 10, 16), datetime(2023, 10, 17)]\n    available_slots = []\n\n    for day in days:\n        start_of_day = day.replace(hour=9, minute=0)\n        end_of_day = day.replace(hour=17, minute=0)\n        busy_times = [\n            (start_of_day, end_of_day)\n        ]\n\n        # Mark busy times for Charles\n        for start, end in charles_schedule:\n            if start.date() == day.date():\n                busy_times.append((start, end))\n\n        # Mark busy times for Jose\n        for start, end in jose_schedule:\n            if start.date() == day.date():\n                busy_times.append((start, end))\n\n        # Merge and find available slots\n        busy_times.sort()\n        merged_busy = []\n        current_start, current_end = busy_times[0]\n\n        for start, end in busy_times[1:]:\n            if start <= current_end:\n                current_end = max(current_end, end)\n            else:\n                merged_busy.append((current_start, current_end))\n                current_start, current_end = start, end\n        merged_busy.append((current_start, current_end))\n\n        last_end_time = start_of_day\n        for start, end in merged_busy:\n            if last_end_time + meeting_duration <= start:\n                available_slots.append((last_end_time, start))\n            last_end_time = end\n\n        if last_end_time + meeting_duration <= end_of_day:\n            available_slots.append((last_end_time, end_of_day))\n\n    # Filter slots based on Charles' preference to avoid meetings after 13:30 on Tuesday\n    for start, end in available_slots:\n        if (start.date() == days[1] and start.time() >= datetime(2023, 10, 17, 13, 30).time()):\n            continue\n        return (start.time(), (start + meeting_duration).time())\n\nproposed_time = find_meeting_time()\nprint(f\"{{{proposed_time[0]}:{proposed_time[1]}}}\")\n```",
            "count": "calendar_scheduling_example_657"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules\nshirley_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\nalbert_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Set meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if two time slots conflict\ndef times_conflict(start1, end1, start2, end2):\n    return start1 < end2 and start2 < end1\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in [0, 1]:  # 0 for Monday, 1 for Tuesday\n        for start_time in (work_start,):\n            # Check potential meeting times\n            end_time = start_time + meeting_duration\n            if end_time > work_end:\n                break\n            \n            # Check if time conflicts with Shirley's schedule\n            shirley_available = all(not times_conflict(start_time, end_time, s_start, s_end)\n                                    for s_start, s_end in shirley_schedule)\n            \n            if shirley_available:\n                # Check if time conflicts with Albert's schedule\n                albert_available = all(not times_conflict(start_time, end_time, a_start, a_end)\n                                       for a_start, a_end in albert_schedule)\n\n                if albert_available:\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n            start_time += timedelta(minutes=30)  # Check next half-hour slot\n\n# Output proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_658"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import timedelta, datetime\n\n# Function to convert time string to datetime objects\ndef convert_to_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to check if two time slots overlap\ndef do_times_overlap(start1, end1, start2, end2):\n    return start1 < end2 and start2 < end1\n\n# Function to find available time slots for the meeting\ndef find_meeting_time(barbara_schedule, jose_schedule, meeting_duration):\n    barbara_busy_times = []\n    jose_busy_times = []\n    \n    # Create busy time slots for Barbara\n    for busy_time in barbara_schedule:\n        start = convert_to_time(busy_time[0])\n        end = convert_to_time(busy_time[1])\n        barbara_busy_times.append((start, end))\n        \n    # Create busy time slots for Jose\n    for busy_time in jose_schedule:\n        start = convert_to_time(busy_time[0])\n        end = convert_to_time(busy_time[1])\n        jose_busy_times.append((start, end))\n    \n    work_start = convert_to_time(\"09:00\")\n    work_end = convert_to_time(\"17:00\")\n\n    # Check for available time slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        proposed_end = current_time + meeting_duration\n        \n        # Check if both are free\n        is_barbara_free = all(not do_times_overlap(current_time, proposed_end, start, end) for start, end in barbara_busy_times)\n        is_jose_free = all(not do_times_overlap(current_time, proposed_end, start, end) for start, end in jose_busy_times)\n        \n        if is_barbara_free and is_jose_free:\n            return f\"{current_time.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=30)  # Check every half hour\n    \n    return None  # If no slots found\n\n# Define schedules\nbarbara_schedule = [(\"12:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"16:00\")]\njose_schedule = [(\"09:00\", \"10:00\"), (\"11:00\", \"12:00\"), (\"12:30\", \"13:30\"), \n                 (\"14:30\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find proposed meeting time\nproposed_time = find_meeting_time(barbara_schedule, jose_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_659"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nsamantha_schedule = [\n    (\"09:30\", \"10:30\"),\n    (\"11:30\", \"12:30\"),\n    (\"13:00\", \"15:00\"),\n    (\"15:30\", \"16:00\"),\n    (\"09:00\", \"09:30\"),\n    (\"10:00\", \"10:30\"),\n    (\"11:00\", \"11:30\"),\n    (\"13:00\", \"13:30\"),\n    (\"14:30\", \"17:00\"),\n]\n\n# Convert string to datetime\ndef convert_to_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Convert datetime to string\ndef convert_to_string(time_dt):\n    return time_dt.strftime(\"%H:%M\")\n\n# Create a list of busy times for Samantha\nsamantha_busy_times = []\nfor start, end in samantha_schedule:\n    samantha_busy_times.append((convert_to_time(start), convert_to_time(end)))\n\n# Sort busy times\nsamantha_busy_times.sort()\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find gaps in schedule for Diana\ndef find_meeting_time(busy_times, meeting_duration):\n    # Working hours\n    start_of_day = convert_to_time(\"09:00\")\n    end_of_day = convert_to_time(\"17:00\")\n\n    # Check time before first meeting\n    if busy_times and busy_times[0][0] > start_of_day:\n        if busy_times[0][0] - start_of_day >= meeting_duration:\n            return (start_of_day, start_of_day + meeting_duration)\n\n    # Check gaps between meetings\n    for i in range(1, len(busy_times)):\n        prev_end = busy_times[i - 1][1]\n        curr_start = busy_times[i][0]\n        if curr_start - prev_end >= meeting_duration:\n            return (prev_end, prev_end + meeting_duration)\n\n    # Check time after last meeting\n    if busy_times and busy_times[-1][1] < end_of_day:\n        if end_of_day - busy_times[-1][1] >= meeting_duration:\n            return (busy_times[-1][1], busy_times[-1][1] + meeting_duration)\n    elif not busy_times:\n        # If no busy times, the meeting can be scheduled any time in working hours\n        return (start_of_day, start_of_day + meeting_duration)\n\n    return None\n\n# Find meeting time for Diana and Samantha\nmeeting_time = find_meeting_time(samantha_busy_times, meeting_duration)\n\nif meeting_time:\n    proposed_time = f\"{convert_to_string(meeting_time[0])}:{convert_to_string(meeting_time[1])}\"\n    print(f\"{proposed_time}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_660"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define function to check if a time range is available\ndef is_time_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Define meeting time duration\nmeeting_duration = timedelta(hours=1)\n\n# Define the participants' busy schedules\nbenjamin_busy_schedule = [\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))  # Monday busy time\n]\n\ncheryl_busy_schedule = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),  # Tuesday busy time\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Define the potential meeting times on Monday\nmonday_work_hours = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Proposed meeting time search\nfor start_time, end_time in monday_work_hours:\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_end = current_time + meeting_duration\n        \n        # Check if the proposed time is available for both\n        if is_time_available(current_time, meeting_end, benjamin_busy_schedule) and \\\n           is_time_available(current_time, meeting_end, cheryl_busy_schedule):\n            print(f\"{current_time.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n            break\n        \n        current_time += timedelta(minutes=30)\n```\n",
            "count": "calendar_scheduling_example_661"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(gary_schedule, david_schedule, meeting_duration_hours):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=meeting_duration_hours)\n\n    # Check for available time slots\n    for day in ['Monday', 'Tuesday']:\n        gary_blocks = gary_schedule[day]\n        david_blocks = david_schedule[day]\n\n        # Create a combined list of busy times\n        busy_times = gary_blocks + david_blocks\n        \n        # Create a time range for the work hours\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            # Check if current_time falls within any busy time\n            is_busy = any(start <= current_time < end for start, end in busy_times)\n            if not is_busy:\n                # Check if duration fits within the next available time\n                is_busy_for_meeting = any(start <= current_time + meeting_duration <= end for start, end in busy_times)\n                if not is_busy_for_meeting:\n                    return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Increment to check the next half hour\n\n    return \"No available time found\"\n\n# Schedules for Gary and David\ngary_schedule = {\n    'Monday': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\ndavid_schedule = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration in hours\nmeeting_duration_hours = 1\n\n# Find suitable meeting time\nmeeting_time = find_meeting_time(gary_schedule, david_schedule, meeting_duration_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_662"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration in minutes\nmeeting_duration = 30\n\n# Define the working hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Existing schedules\namber_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Helper function to check if time is free\ndef is_time_free(start_time, end_time, schedule):\n    for start, end in schedule:\n        if start_time < end and start < end_time:\n            return False\n    return True\n\n# Check potential meeting times on Tuesday after 12:00\nfor hour in range(12, 17):  # iterate from 12:00 to 17:00\n    proposed_start = datetime.strptime(f'{hour}:00', '%H:%M')\n    proposed_end = proposed_start + timedelta(minutes=meeting_duration)\n\n    if proposed_end <= work_end and is_time_free(proposed_start, proposed_end, amber_schedule):\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_663"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find available meeting time\ndef find_meeting_time(schedule_roger, schedule_logan, meeting_duration, work_hours):\n    start_work, end_work = work_hours\n    current_time = start_work\n\n    while current_time < end_work:\n        # Check if both are available\n        available_roger = all(not (start <= current_time < end) for start, end in schedule_roger)\n        available_logan = all(not (start <= current_time < end) for start, end in schedule_logan)\n\n        if available_roger and available_logan:\n            if all(not (start <= current_time < start + meeting_duration) for start, end in schedule_roger) and \\\n               all(not (start <= current_time < start + meeting_duration) for start, end in schedule_logan):\n                return current_time, current_time + meeting_duration\n        \n        current_time += timedelta(minutes=30)  # Step forward in 30min increments\n\n    return None\n\n# Schedules\nschedule_roger = [(11, 11.5), (12.5, 13.5)]  # Monday (in hours)\nschedule_logan = [(9, 9.5), (10, 13), (13.5, 16)]  # Monday (in hours)\n\n# Meeting duration setup\nmeeting_duration = 1  # 1 hour\nwork_hours = (9, 17)  # Work hours (in hours)\n\n# Find meeting time\nmeeting_start, meeting_end = find_meeting_time(schedule_roger, schedule_logan, meeting_duration, work_hours)\n\n# Format the output time\nif meeting_start and meeting_end:\n    proposed_time = f\"{int(meeting_start):02d}:{int((meeting_start % 1) * 60):02d}:{int(meeting_end):02d}:{int((meeting_end % 1) * 60):02d}\"\n    print(proposed_time)\n```\n",
            "count": "calendar_scheduling_example_664"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(sophia_schedule, laura_schedule, meeting_duration, work_hours):\n    # Unpacking the work hours\n    work_start, work_end = work_hours\n    meeting_times = []\n\n    # Check available time slots for both participants\n    for day in ['Monday', 'Tuesday']:\n        if day == 'Monday':\n            sophia_times = sophia_schedule['Monday']\n            laura_times = laura_schedule['Monday']\n        else:\n            sophia_times = sophia_schedule['Tuesday']\n            laura_times = laura_schedule['Tuesday']\n\n        # Define all busy times\n        busy_times = sophia_times + laura_times\n\n        # Create time slots for checking availability\n        current_time = datetime.strptime(work_start, '%H:%M')\n        end_time = datetime.strptime(work_end, '%H:%M')\n        while current_time < end_time:\n            next_time = current_time + timedelta(hours=meeting_duration)\n            if next_time > end_time:\n                break\n            \n            # Check if the current time slot is busy\n            if not any(start <= current_time.strftime('%H:%M') < end for start, end in busy_times):\n                meeting_times.append(current_time.strftime('%H:%M') + ':' + next_time.strftime('%H:%M'))\n\n            current_time += timedelta(minutes=30)  # Increment the check by 30 minutes\n    \n    # Return the first available meeting time\n    return meeting_times[0] if meeting_times else None\n\n# Existing schedules\nsophia_schedule = {\n    'Monday': [('09:00', '10:30'), ('11:30', '12:00'), ('12:30', '14:00'), ('16:30', '17:00')],\n    'Tuesday': [('10:30', '11:00'), ('12:30', '14:00'), ('15:00', '15:30'), ('16:30', '17:00')],\n}\n\nlaura_schedule = {\n    'Monday': [('09:30', '12:00'), ('12:30', '15:00'), ('16:30', '17:00')],\n    'Tuesday': [('09:00', '09:30'), ('10:00', '11:00'), ('12:00', '14:00'), ('14:30', '15:00'), ('15:30', '17:00')],\n}\n\n# Define meeting duration and work hours\nmeeting_duration = 1  # in hours\nwork_hours = ('09:00', '17:00')\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(sophia_schedule, laura_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_665"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participant schedules\nmatthew_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\njennifer_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Function to find available time slot\ndef find_meeting_time():\n    # Loop through the days and preferred time\n    for day in [\"Tuesday\"]:  # Only looking at Tuesday per the constraints\n        start_time = work_hours_start\n        while start_time + meeting_duration <= work_hours_end:\n            end_time = start_time + meeting_duration\n            is_available = True\n\n            # Check Matthew's schedule\n            for busy_start, busy_end in matthew_schedule[day]:\n                if (start_time < busy_end and end_time > busy_start):\n                    is_available = False\n                    break\n            \n            # Check Jennifer's schedule\n            for busy_start, busy_end in jennifer_schedule[day]:\n                if (start_time < busy_end and end_time > busy_start):\n                    is_available = False\n                    break\n\n            if is_available:\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            start_time += timedelta(minutes=1)  # Increment by 1 minute for the next slot\n\nproposed_time = find_meeting_time()\nprint(proposed_time)  # Output in HH:MM:HH:MM format\n```",
            "count": "calendar_scheduling_example_666"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for Willie and Mark\nwillie_busy = [\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\nmark_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\ndef find_meeting_time():\n    # Check Monday availability\n    for start_time in range(work_start.hour * 60 + work_start.minute, work_end.hour * 60 + work_end.minute - 30):\n        start = datetime.strptime(f\"{start_time // 60:02}:{start_time % 60:02}\", \"%H:%M\")\n        end = start + meeting_duration\n        \n        if not any(start < busy_end and end > busy_start for busy_start, busy_end in willie_busy + mark_busy):\n            return start.strftime(\"%H:%M\")\n\n    # Check Tuesday availability (same as Monday for this example)\n    for start_time in range(work_start.hour * 60 + work_start.minute, work_end.hour * 60 + work_end.minute - 30):\n        start = datetime.strptime(f\"{start_time // 60:02}:{start_time % 60:02}\", \"%H:%M\")\n        end = start + meeting_duration\n\n        if not any(start < busy_end and end > busy_start for busy_start, busy_end in willie_busy + mark_busy):\n            return start.strftime(\"%H:%M\")\n\n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nif proposed_time:\n    print(f\"{{{proposed_time}:00:00}}\")\nelse:\n    print(\"No available meeting times found.\")\n```",
            "count": "calendar_scheduling_example_667"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Existing schedules\nbeverly_schedule = {\n    'Monday': [(datetime.strptime('14:00', '%H:%M'), timedelta(minutes=30)), \n               (datetime.strptime('15:30', '%H:%M'), timedelta(minutes=30))],\n    'Tuesday': [(datetime.strptime('10:00', '%H:%M'), timedelta(minutes=30)), \n                (datetime.strptime('11:30', '%H:%M'), timedelta(minutes=30))]\n}\n\njoshua_schedule = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), timedelta(minutes=60)), \n               (datetime.strptime('10:30', '%H:%M'), timedelta(minutes=30)), \n               (datetime.strptime('11:30', '%H:%M'), timedelta(minutes=30)), \n               (datetime.strptime('13:00', '%H:%M'), timedelta(minutes=60)), \n               (datetime.strptime('14:30', '%H:%M'), timedelta(minutes=30)), \n               (datetime.strptime('15:30', '%H:%M'), timedelta(minutes=30))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), timedelta(hours=5)), \n                (datetime.strptime('14:30', '%H:%M'), timedelta(minutes=60)), \n                (datetime.strptime('16:00', '%H:%M'), timedelta(minutes=60))]\n}\n\nmeeting_duration = timedelta(hours=1)\n\ndef find_meeting_time(day):\n    # Define the ranges for potential meeting times\n    potential_meeting_times = []\n    current_time = work_hours_start\n\n    while current_time + meeting_duration <= work_hours_end:\n        potential_meeting_times.append(current_time)\n        current_time += timedelta(minutes=30)\n\n    # Blocked times for both Beverly and Joshua on the selected day\n    blocked_times = []\n    for start, duration in beverly_schedule.get(day, []):\n        blocked_times.append((start, duration))\n    for start, duration in joshua_schedule.get(day, []):\n        blocked_times.append((start, duration))\n\n    # Sort blocked times\n    blocked_times.sort(key=lambda x: x[0])\n\n    for meeting_start in potential_meeting_times:\n        meeting_end = meeting_start + meeting_duration\n        is_blocked = False\n\n        for blocked_start, blocked_duration in blocked_times:\n            blocked_end = blocked_start + blocked_duration\n            if meeting_start < blocked_end and meeting_end > blocked_start:\n                is_blocked = True\n                break\n        \n        if not is_blocked:\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Check first for Monday, then Tuesday if necessary\nmeeting_time = find_meeting_time('Monday') or find_meeting_time('Tuesday')\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_668"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Defining the working hours and meeting duration\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n    \n    # Defining the busy schedules\n    jean_busy_times = [\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n    \n    doris_busy_times_monday = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    # Doris prefers not to schedule after 14:00 on Monday\n    doris_busy_times_monday.append((datetime.strptime(\"14:00\", \"%H:%M\"), work_end))\n    \n    doris_busy_times_tuesday = [\n        (work_start, work_end),  # fully booked\n    ]\n    \n    # Merging busy times for attire days\n    schedules = {'Monday': doris_busy_times_monday, 'Tuesday': doris_busy_times_tuesday}\n    schedules['Jean'] = jean_busy_times\n    \n    # Function to check if a time slot is free\n    def is_slot_free(start_time, end_time, busy_times):\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (busy_start < end_time):\n                return False\n        return True\n\n    # Finding a free time slot\n    for day, busy_times in schedules.items():\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            meeting_end_time = current_time + meeting_duration\n            if is_slot_free(current_time, meeting_end_time, busy_times) and is_slot_free(current_time, meeting_end_time, schedules['Jean']):\n                return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # check next half hour\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_669"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\njack_schedule = {\n    'Monday': [('09:30', '10:00'), ('12:30', '13:30'), ('14:00', '15:00'), ('16:00', '16:30')],\n    'Tuesday': [('09:00', '09:30'), ('12:00', '13:30'), ('14:30', '15:00'), ('16:00', '16:30')]\n}\n\njuan_schedule = {\n    'Monday': [('10:30', '12:00'), ('13:00', '13:30'), ('14:30', '15:00'), ('15:30', '16:00'), ('16:30', '17:00')],\n    'Tuesday': [('09:30', '10:00'), ('10:30', '11:00'), ('12:00', '13:00'), ('13:30', '14:30'), ('15:30', '17:00')]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available meeting time\ndef find_meeting_time(day):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Create a list of all busy times\n    busy_times = []\n    \n    # Add Jack's busy times\n    for start, end in jack_schedule[day]:\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n    # Add Juan's busy times\n    for start, end in juan_schedule[day]:\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Find gaps in the busy times\n    last_end = start_time\n    for start, end in busy_times:\n        if last_end + meeting_duration <= start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n\n    # Check if there is time after the last busy slot until end_time\n    if last_end + meeting_duration <= end_time:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Check for meeting time on Monday (Juan cannot meet after 13:00 on Monday)\nproposed_time = find_meeting_time('Monday')\n\n# Output the proposed time\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_670"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and constraints\nAnthony_schedule = {\n    'Monday': [\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n}\n\nJacob_schedule = {\n    'Monday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find an available time slot\ndef find_available_time(schedule_a, schedule_b, day):\n    busy_slots = schedule_a[day] + schedule_b[day]\n    busy_slots.sort()\n\n    # Work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Check for gaps in busy slots\n    current_time = work_start\n\n    for start, end in busy_slots:\n        if current_time + meeting_duration <= start:\n            return current_time\n        current_time = max(current_time, end)\n\n    # Check after the last busy slot until the end of the workday\n    if current_time + meeting_duration <= work_end:\n        return current_time\n\n    return None\n\n# Check Monday for available time\nproposed_time = find_available_time(Anthony_schedule, Jacob_schedule, 'Monday')\n\n# Output the result in the required format\nif proposed_time:\n    meeting_start = proposed_time.strftime(\"%H:%M\")\n    meeting_end = (proposed_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{meeting_start}:{meeting_end}\")\n```\n",
            "count": "calendar_scheduling_example_671"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time():\n    # Work hours\n    work_start = datetime.time(9, 0)\n    work_end = datetime.time(17, 0)\n    \n    # Harold's schedule\n    harold_busy = [\n        (datetime.time(9, 30), datetime.time(10, 0)),\n        (datetime.time(12, 0), datetime.time(12, 30)),\n        (datetime.time(13, 30), datetime.time(14, 0)),\n        (datetime.time(14, 30), datetime.time(15, 30)),\n    ]\n    \n    # Donna's schedule\n    donna_busy = [\n        (datetime.time(9, 0), datetime.time(11, 0)),\n        (datetime.time(12, 30), datetime.time(16, 0)),\n    ]\n    \n    # Meeting duration\n    meeting_duration = datetime.timedelta(minutes=30)\n    \n    # Check time slots for Monday\n    for hour in range(9, 12):  # Until 12:00\n        start_time = datetime.time(hour, 0)\n        end_time = (datetime.datetime.combine(datetime.date.today(), start_time) + meeting_duration).time()\n        \n        if end_time <= work_end and not is_time_conflict(start_time, end_time, harold_busy) and not is_time_conflict(start_time, end_time, donna_busy):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    # Check time slots for Tuesday\n    for hour in range(9, 17):  # Until 17:00\n        start_time = datetime.time(hour, 0)\n        end_time = (datetime.datetime.combine(datetime.date.today(), start_time) + meeting_duration).time()\n        \n        if end_time <= work_end and not is_time_conflict(start_time, end_time, harold_busy) and not is_time_conflict(start_time, end_time, donna_busy):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\ndef is_time_conflict(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return True\n    return False\n\n# Execute the function to find a meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_672"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and constraints\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Existing schedules for James and Patricia\njames_availability = [\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('17:00', '%H:%M'), working_hours_end)\n]\n\npatricia_availability = [\n    (working_hours_start, datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), working_hours_end)\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Check availability on Tuesday\n    for start in range(9, 17):\n        start_time = datetime.strptime(f'{start:02}:00', '%H:%M')\n        end_time = start_time + meeting_duration\n\n        if end_time > working_hours_end:\n            break\n\n        for j_start, j_end in james_availability:\n            for p_start, p_end in patricia_availability:\n                if j_start <= start_time < j_end and p_start <= start_time < p_end:\n                    if j_start <= end_time <= j_end and p_start <= end_time <= p_end:\n                        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Get a proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_673"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and days\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    days = [\"Monday\", \"Tuesday\"]\n\n    # Define existing schedules for Elizabeth and Mason\n    elizabeth_schedule = {\n        'Monday': [\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        ],\n        'Tuesday': [\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        ]\n    }\n\n    mason_schedule = {\n        'Monday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        'Tuesday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        ]\n    }\n\n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Check availability for Tuesday only\n    day = 'Tuesday'\n    free_slots = []\n    \n    # Getting all busy times\n    busy_times = elizabeth_schedule[day] + mason_schedule[day]\n    busy_times.sort()\n    \n    # Finding free slots in the available work hours\n    start_time = work_start\n    while start_time + meeting_duration <= work_end:\n        end_time = start_time + meeting_duration\n        # Check if the current slot is busy\n        if all(not (start_time < busy_end and end_time > busy_start) for busy_start, busy_end in busy_times):\n            free_slots.append(start_time)\n        start_time += timedelta(minutes=1)  # Move to the next minute for checking\n\n    # Return the first available time in the desired format\n    if free_slots:\n        proposed_time = free_slots[0]\n        return f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\"\n\n# Call the function and print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_674"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules of Larry\nbusy_slots_larry = {\n    'Monday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ],\n    'Tuesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    ]\n}\n\n# Define meeting constraints\nmeeting_duration = timedelta(hours=1)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find available slots\ndef find_meeting_time(busy_slots, duration):\n    # Check for Monday and Tuesday both days\n    days = ['Monday', 'Tuesday']\n    \n    for day in days:\n        current_time = work_hours_start\n        while current_time + duration <= work_hours_end:\n            # Check if the current time slot is busy\n            is_busy = any(start <= current_time < end for start, end in busy_slots[day])\n            if not is_busy:\n                # Check if the duration fits\n                is_duration_busy = any(start < current_time + duration <= end for start, end in busy_slots[day])\n                if not is_duration_busy:\n                    # Return the available time slot in the required format\n                    return {\n                        'start': current_time.strftime('%H:%M'),\n                        'end': (current_time + duration).strftime('%H:%M')\n                    }\n            current_time += timedelta(minutes=30)  # Increment by 30 minutes to check next slot\n            \n    return None\n\n# Calculate the proposed time\navailable_time = find_meeting_time(busy_slots_larry, meeting_duration)\nif available_time:\n    print(f\"{available_time['start']}:{available_time['end']}\")\nelse:\n    print(\"No available time found.\")\n```\n",
            "count": "calendar_scheduling_example_675"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define existing schedules\nemily_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\nlawrence_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find available time slot\ndef find_meeting_time():\n    # Check Monday\n    for start_hour in range(9, 17):\n        start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if end_time <= working_hours_end:\n            # Check for conflicts\n            conflict_found = False\n            \n            for meeting in emily_schedule:\n                if (start_time < meeting[1] and end_time > meeting[0]):\n                    conflict_found = True\n                    break\n            \n            for meeting in lawrence_schedule:\n                if (start_time < meeting[1] and end_time > meeting[0]):\n                    conflict_found = True\n                    break\n            \n            if not conflict_found:\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # Check Tuesday (for completeness, though it's not required as per the task)\n    # You may uncomment the following if you wish to check Tuesday as well.\n    '''\n    for start_hour in range(9, 17):\n        start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if end_time <= working_hours_end:\n            conflict_found = False\n            \n            for meeting in emily_schedule:\n                if (start_time < meeting[1] and end_time > meeting[0]):\n                    conflict_found = True\n                    break\n            \n            for meeting in lawrence_schedule:\n                if (start_time < meeting[1] and end_time > meeting[0]):\n                    conflict_found = True\n                    break\n            \n            if not conflict_found:\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    '''",
            "count": "calendar_scheduling_example_676"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules\nlisa_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n}\n\nlauren_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find available time slot\ndef find_meeting_time(participant1_schedule, participant2_schedule, day):\n    occupied_times = []\n    \n    # Collect occupied times for both participants\n    occupied_times.extend(participant1_schedule[day])\n    occupied_times.extend(participant2_schedule[day])\n    \n    # Sort the occupied times\n    occupied_times.sort(key=lambda x: x[0])\n    \n    # Find free slots\n    start_time = working_hours_start\n    while start_time + meeting_duration <= working_hours_end:\n        end_time = start_time + meeting_duration\n        \n        # Check if the current time slot is free\n        is_free = True\n        for start, end in occupied_times:\n            if start_time < end and start < end_time:\n                is_free = False\n                break\n        \n        if is_free:\n            return start_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        \n        # Move to the next time slot\n        start_time += timedelta(minutes=30)\n\n# Schedule meeting for Lisa and Lauren on Tuesday\nproposed_time = find_meeting_time(lisa_schedule, lauren_schedule, \"Tuesday\")\nprint(proposed_time)  # Expected to output a valid time format\n```\n",
            "count": "calendar_scheduling_example_677"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nrussell_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nalexander_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\ndef find_meeting_time(russell_schedule, alexander_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Check Monday\n    day = 0\n    for start_time in range(work_start.hour * 60, work_end.hour * 60):\n        meeting_start = datetime.strptime(f\"{start_time // 60:02}:{start_time % 60:02}\", \"%H:%M\")\n        \n        # Check constraints\n        if meeting_start < datetime.strptime(\"13:30\", \"%H:%M\") and meeting_start.date().weekday() == day:\n            continue\n            \n        # Set the end time\n        meeting_end = meeting_start + meeting_duration\n        \n        # Check if the meeting end time is beyond the work hours\n        if meeting_end > work_end:\n            break\n            \n        is_available = True\n        for busy_start, busy_end in russell_schedule + alexander_schedule:\n            if meeting_start < busy_end and meeting_end > busy_start:\n                is_available = False\n                break\n        \n        if is_available:\n            return meeting_start.strftime(\"%H:%M:%H:%M\")\n\n    # Check Tuesday\n    day = 1\n    for start_time in range(work_start.hour * 60, work_end.hour * 60):\n        meeting_start = datetime.strptime(f\"{start_time // 60:02}:{start_time % 60:02}\", \"%H:%M\")\n        \n        if meeting_start < datetime.strptime(\"13:30\", \"%H:%M\") and meeting_start.date().weekday() == day:\n            continue\n        \n        meeting_end = meeting_start + meeting_duration\n        \n        if meeting_end > work_end:\n            break\n            \n        is_available = True\n        for busy_start, busy_end in russell_schedule + alexander_schedule:\n            if meeting_start < busy_end and meeting_end > busy_start:\n                is_available = False\n                break\n        \n        if is_available:\n            return meeting_start.strftime(\"%H:%M:%H:%M\")\n\n# Find the meeting time\nmeeting_time = find_meeting_time(russell_schedule, alexander_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_678"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration, preferences):\n    # Define work hours\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n\n    # Parse participant schedules\n    schedules = {}\n    for participant, times in participants.items():\n        schedule = []\n        for time in times:\n            start, end = time\n            schedule.append((datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')))\n        schedules[participant] = schedule\n\n    # Calculate available slots\n    available_slots = []\n    for participant, schedule in schedules.items():\n        free_slots = []\n        last_end = work_start\n        \n        # Find gaps in the schedule\n        for start, end in sorted(schedule):\n            if start > last_end:\n                free_slots.append((last_end, start))\n            last_end = max(last_end, end)\n        \n        # End of the day gap\n        if last_end < work_end:\n            free_slots.append((last_end, work_end))\n        \n        available_slots.append(free_slots)\n    \n    # Find common free time across participants\n    common_slots = available_slots[0]\n    for free_slots in available_slots[1:]:\n        new_common_slots = []\n        for start1, end1 in common_slots:\n            for start2, end2 in free_slots:\n                start = max(start1, start2)\n                end = min(end1, end2)\n                if start < end:\n                    new_common_slots.append((start, end))\n        common_slots = new_common_slots\n\n    # Adjust for preferences and check for meeting duration\n    for start, end in common_slots:\n        if (end - start) >= timedelta(minutes=duration):\n            # Check preferences for Martha and Adam\n            if (start >= datetime.strptime('15:00', '%H:%M') and\n                all(pref_time not in preferences['adam'] for pref_time in range(9, 15))):\n                proposed_time = start\n                return proposed_time.strftime('%H:%M:%H:%M')\n\nparticipants = {\n    'adam': [('15:30', '16:30')],\n    'martha': [\n        ('09:30', '11:00'),\n        ('11:30', '14:00'),\n        ('14:30', '16:00'),\n        ('09:00', '09:30'),\n        ('10:00', '10:30'),\n        ('11:00', '14:00'),\n        ('15:00', '15:30'),\n        ('16:00', '17:00')\n    ]\n}\n\npreferences = {\n    'adam': [],\n    'martha': ['tuesday_before_15']\n}\n\nduration = 30  # in minutes\n\nprint(find_meeting_time(participants, duration, preferences))\n```",
            "count": "calendar_scheduling_example_679"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules for Bobby and Jason (busy times)\nbobby_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))\n]\njason_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), work_end)\n]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(bobby_busy, jason_busy):\n    # Combine busy times for both participants\n    busy_times = bobby_busy + jason_busy\n    busy_times.sort(key=lambda x: x[0])  # Sort by start time\n\n    # Check each potential start time for the meeting\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time overlaps with any busy times\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        if all(not (meeting_start < end and meeting_end > start) for start, end in busy_times):\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Increment time in 30-minute slots\n\n# Call the function and print the proposed time\nproposed_time = find_meeting_time(bobby_busy, jason_busy)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_680"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\n# Define the schedules\nalbert_schedule = [\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))   # Tuesday\n]\n\ngeorge_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))   # Tuesday\n]\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Check possible times on Tuesday after 16:00\n    start_time = datetime.strptime(\"16:00\", \"%H:%M\")\n    \n    # Try to find a valid slot for the meeting\n    while start_time + meeting_duration <= working_hours[1]:\n        end_time = start_time + meeting_duration\n        \n        # Check if the time is free for both participants\n        if all(not (start_time < end and end_time > start) for start, end in albert_schedule) and \\\n           all(not (start_time < end and end_time > start) for start, end in george_schedule):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        start_time += timedelta(minutes=30)  # Increment by 30 mins for the next possible slot\n\nresult = find_meeting_time()\nprint(result)\n```",
            "count": "calendar_scheduling_example_681"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define Amanda's schedule (busy times)\namanda_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\n# Define Nathan's schedule (busy times)\nnathan_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to find a suitable meeting time on Tuesday within constraints\ndef find_meeting_time():\n    # We focus on Tuesday only because Nathan is unavailable on Monday\n    current_time = work_start\n\n    # Iterate through available times on Tuesday\n    while current_time + meeting_duration <= work_end:\n        # Check if both participants are available\n        meeting_end_time = current_time + meeting_duration\n        \n        # Check availability against Amanda's busy schedule\n        amanda_available = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in amanda_schedule)\n        \n        # Check availability against Nathan's busy schedule\n        nathan_available = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in nathan_schedule)\n\n        # Check Amanda's constraint of not meeting after 11:00\n        if amanda_available and nathan_available and current_time < datetime.strptime(\"11:00\", \"%H:%M\"):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        # Move to next time slot in 30-minute increments\n        current_time += timedelta(minutes=30)\n\n# Get the proposed time for the meeting\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_682"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedules of participants\njudith_free = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\ngary_blocks = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Gary's availability on the days\ngary_availability = {\n    \"Monday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:00', '%H:%M') + timedelta(minutes=60))], # Until 9:00\n    \"Tuesday\": [\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    for day, slots in gary_availability.items():\n        for start, end in slots:\n            if day == \"Tuesday\":\n                # Check if Judith is free during Gary's available slots on Tuesday\n                for j_start, j_end in judith_free:\n                    # Check if there's overlap\n                    if start >= j_start and end <= j_end:\n                        proposed_time_start = start\n                        proposed_time_end = proposed_time_start + meeting_duration\n                        if proposed_time_end <= end:\n                            return proposed_time_start.strftime('%H:%M') + ':' + proposed_time_end.strftime('%H:%M')\n    \n    return \"No suitable time found\"\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_683"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the working hours and the desired meeting duration\n    working_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    working_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n    \n    # Define the availability schedule for Benjamin and Mark\n    benjamin_schedule = [\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n    \n    mark_schedule = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n\n    # Set the day to Tuesday since Benjamin does not want Monday\n    day = \"Tuesday\"\n    \n    availability = []\n    \n    # Initialize the time cursor for the day\n    current_time = working_hours_start\n    \n    # Check available times for Tuesday\n    while current_time + meeting_duration <= working_hours_end:\n        is_available = True\n        \n        # Check Benjamin's schedule\n        for start, end in benjamin_schedule:\n            if start <= current_time < end or start < current_time + meeting_duration <= end:\n                is_available = False\n                break\n        \n        # Check Mark's schedule\n        for start, end in mark_schedule:\n            if start <= current_time < end or start < current_time + meeting_duration <= end:\n                is_available = False\n                break\n        \n        if is_available:\n            availability.append(current_time)\n        \n        # Move to next time slot\n        current_time += timedelta(minutes=30)\n    \n    if availability:\n        proposed_time = availability[0]\n        proposed_end_time = proposed_time + meeting_duration\n        \n        return f\"{proposed_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\"\n\n# Get the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_684"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nbilly_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n]\ngrace_schedule_monday = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\ngrace_schedule_tuesday = [\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if two time ranges overlap\ndef is_overlapping(start1, end1, start2, end2):\n    return max(start1, start2) < min(end1, end2)\n\n# Function to find a free slot\ndef find_free_slot(schedule_billy, schedule_grace, work_start, work_end):\n    available_time_slots = []\n    \n    # Get all busy time slots combined\n    busy_slots = sorted(schedule_billy + schedule_grace)\n    \n    # Check from work_start to work_end for free slots\n    last_end = work_start\n    \n    for start, end in busy_slots:\n        if last_end < start:\n            available_time_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    if last_end < work_end:\n        available_time_slots.append((last_end, work_end))\n    \n    # Find suitable 30 minutes slot\n    for start, end in available_time_slots:\n        if (end - start) >= meeting_duration:\n            proposed_start = start\n            proposed_end = proposed_start + meeting_duration\n            if proposed_start >= datetime.strptime(\"10:30\", \"%H:%M\"): # Billy's constraint\n                return proposed_start.strftime(\"%H:%M\"), proposed_end.strftime(\"%H:%M\")\n\n# Checking on Monday\nresult_monday = find_free_slot(billy_schedule, grace_schedule_monday, work_start, work_end)\n\n# Output the proposed meeting time\nif result_monday:\n    meeting_time = f\"{result_monday[0]}:{result_monday[1]}\"\n    print(meeting_time)\n```",
            "count": "calendar_scheduling_example_685"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ethan_schedule, julia_schedule, duration):\n    # Define the work hours and days\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert the schedules into busy time slots\n    ethan_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in ethan_schedule]\n    julia_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in julia_schedule]\n\n    # Merge busy times for both participants\n    busy_times = ethan_busy_times + julia_busy_times\n    busy_times.sort()\n\n    # Create a list of free time slots\n    free_times = []\n    current_time = work_hours_start\n\n    for start, end in busy_times:\n        if current_time < start:\n            free_times.append((current_time, start))\n        current_time = max(current_time, end)\n    \n    if current_time < work_hours_end:\n        free_times.append((current_time, work_hours_end))\n\n    # Find an available time slot for the meeting\n    for start, end in free_times:\n        duration_timedelta = timedelta(minutes=duration)\n        if end - start >= duration_timedelta:\n            meeting_start = start\n            meeting_end = start + duration_timedelta\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\nethan_schedule = [\n    (\"15:30\", \"16:00\"),\n    (\"16:30\", \"17:00\"),\n    (\"12:00\", \"12:30\"),\n    (\"13:00\", \"13:30\"),\n    (\"14:00\", \"14:30\"),\n    (\"15:30\", \"16:00\"),\n]\n\njulia_schedule = [\n    (\"09:00\", \"11:00\"),\n    (\"11:30\", \"14:30\"),\n    (\"15:00\", \"15:30\"),\n    (\"16:00\", \"17:00\"),\n    (\"09:00\", \"10:00\"),\n    (\"10:30\", \"12:30\"),\n    (\"13:00\", \"13:30\"),\n    (\"14:00\", \"17:00\"),\n]\n\nmeeting_time = find_meeting_time(ethan_schedule, julia_schedule, 30)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_686"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for Jerry and Edward\njerry_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nedward_schedule_monday = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nedward_schedule_tuesday = [\n    (work_start, work_end)\n]\n\n# Check availability function\ndef find_meeting_time(schedule1, schedule2, work_start, work_end, meeting_duration):\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        \n        if all(not (current_time < end and end_time > start) for start, end in schedule1) and \\\n           all(not (current_time < end and end_time > start) for start, end in schedule2):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Check for Monday\nproposed_time_monday = find_meeting_time(jerry_schedule, edward_schedule_monday, work_start, work_end, meeting_duration)\n\n# If not available on Monday, check Tuesday\nif proposed_time_monday is None:\n    proposed_time_tuesday = find_meeting_time(jerry_schedule, edward_schedule_tuesday, work_start, work_end, meeting_duration)\n    proposed_time = proposed_time_tuesday\nelse:\n    proposed_time = proposed_time_monday\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_687"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(edward_schedule, angela_schedule, meeting_duration, work_hours):\n    # Parse work hours\n    work_start, work_end = [datetime.strptime(t, \"%H:%M\") for t in work_hours.split(\" to \")]\n    \n    # Generate all possible slots within the work hours\n    current_time = work_start\n    possible_slots = []\n    while current_time + meeting_duration <= work_end:\n        possible_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # 30-minute intervals\n    \n    # Check for available slots\n    for start_time in possible_slots:\n        end_time = start_time + meeting_duration\n        if all(not (start_time < edward_end and end_time > edward_start) for edward_start, edward_end in edward_schedule) and \\\n           all(not (start_time < angela_end and end_time > angela_start) for angela_start, angela_end in angela_schedule):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Existing schedules\nedward_schedule = [\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\nangela_schedule = [\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours = \"09:00 to 17:00\"\n\n# Find meeting time\nprint(find_meeting_time(edward_schedule, angela_schedule, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_688"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participant schedules\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nhannah_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\nsteven_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\ndef is_time_slot_available(start_time, end_time, schedule):\n    for busy_start, busy_end in schedule:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\ndef find_meeting_time():\n    # Check both Monday and Tuesday for available time slots\n    for day in [\"Monday\", \"Tuesday\"]:\n        for hour in range(9, 17):\n            start_time = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n            end_time = start_time + meeting_duration\n            \n            if is_time_slot_available(start_time, end_time, hannah_schedule) and \\\n               is_time_slot_available(start_time, end_time, steven_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)  # Output in the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_689"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(doris_schedule, carol_schedule, duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=duration)\n    \n    # Merge schedules\n    all_busy_times = []\n    for start, end in doris_schedule + carol_schedule:\n        all_busy_times.append((max(start, work_start), min(end, work_end)))\n    \n    # Sort and merge busy times\n    all_busy_times.sort()\n    merged_busy_times = []\n    \n    for start, end in all_busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\n            merged_busy_times.append((start, end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n    \n    # Find free slots\n    free_slots = []\n    last_end = work_start\n    \n    for start, end in merged_busy_times:\n        if last_end + meeting_duration <= start:\n            free_slots.append((last_end, start))\n        last_end = end\n    \n    if last_end < work_end:\n        free_slots.append((last_end, work_end))\n    \n    # Return the earliest available slot that can fit the meeting\n    for start, end in free_slots:\n        if end - start >= meeting_duration:\n            return start.strftime(\"%H:%M\") + \":\" + (start + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Doris's and Carol's busy schedules\ndoris_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ncarol_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Scheduling a one-hour meeting\nproposed_time = find_meeting_time(doris_schedule, carol_schedule, 1)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_690"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for Joe and Walter\njoe_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\nwalter_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Combine schedules\nbusy_schedule = joe_schedule + walter_schedule\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(work_start, work_end, busy_schedule, meeting_duration):\n    # Create a list of time slots that are free\n    free_slots = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        is_busy = any(start < current_time + meeting_duration and end > current_time for start, end in busy_schedule)\n        if not is_busy:\n            free_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check the next half-hour slot\n\n    # Filter out the times based on preferences\n    for start_time in free_slots:\n        if start_time.time() <= datetime.strptime(\"15:30\", \"%H:%M\").time():  # Joe's preference\n            return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n\n# Find the meeting time\nmeeting_time = find_meeting_time(work_start, work_end, busy_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_691"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules\ncharlotte_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time():\n    days_to_check = [\"Tuesday\"]  # Only Tuesday as preferred by Charlotte\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    for day in days_to_check:\n        free_time_slots = []\n        \n        # Start with the full work hours\n        last_end_time = work_start\n        \n        # Find free time by checking Charlotte's schedule\n        for start, end in charlotte_schedule[day]:\n            if last_end_time < start:\n                free_time_slots.append((last_end_time, start))\n            last_end_time = end\n        \n        # Check for time after last meeting to work end\n        if last_end_time < work_end:\n            free_time_slots.append((last_end_time, work_end))\n        \n        # Look for a suitable time slot for the meeting duration\n        for start, end in free_time_slots:\n            if (end - start) >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Get proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_692"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nkeith_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nkenneth_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find suitable time slot\ndef find_meeting_time(keith_schedule, kenneth_schedule, meeting_duration):\n    for day in [\"Monday\", \"Tuesday\"]:\n        keith_availability = [slot for slot in keith_schedule]\n        kenneth_availability = [slot for slot in kenneth_schedule]\n\n        # Adjust Keith's availability for Monday\n        if day == \"Monday\":\n            keith_availability = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n        # Check for overlapping times\n        for start in keith_availability:\n            for slot in kenneth_availability:\n                # Find overlap\n                start_time = max(start[0], slot[0])\n                end_time = min(start[1], slot[1])\n                if end_time - start_time >= meeting_duration:\n                    meeting_time_start = start_time\n                    return f\"{meeting_time_start.strftime('%H:%M')}:{(meeting_time_start + meeting_duration).strftime('%H:%M')}\"\n\n# Execute function\nmeeting_time = find_meeting_time(keith_schedule, kenneth_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_693"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to parse the busy slots into a list of time tuples\ndef parse_schedule(schedule):\n    busy_slots = []\n    for time_range in schedule.split(','):\n        start, end = time_range.strip().split(' to ')\n        busy_slots.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return busy_slots\n\n# Function to find a suitable meeting time\ndef find_meeting_time(participant_schedules, meeting_duration, preferred_days):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    for day in preferred_days:\n        schedule = participant_schedules[day]\n        busy_slots = parse_schedule(schedule)\n        # Find gaps between busy slots\n        busy_slots.sort()\n        current_time = work_start\n\n        for start, end in busy_slots:\n            if current_time + meeting_duration <= start:\n                return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n            current_time = max(current_time, end)\n\n        if current_time + meeting_duration <= work_end:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n\n# Participant schedules\npatrick_schedule = \"10:00 to 10:30, 12:00 to 14:00, 14:30 to 15:30, 16:00 to 17:00\"\nlawrence_schedule = \"09:00 to 13:00, 13:30 to 16:00, 16:30 to 17:00\"\n\nparticipant_schedules = {\n    \"Monday\": patrick_schedule + ', ' + lawrence_schedule,\n    \"Tuesday\": patrick_schedule + ', ' + lawrence_schedule\n}\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Preferred days to schedule the meeting\npreferred_days = [\"Monday\", \"Tuesday\"]\n\n# Adjust Patrick's availability for Tuesday\nmeeting_time = find_meeting_time(participant_schedules, meeting_duration, preferred_days)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_694"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the availability and constraints\npeter_schedule = [(9, 0), (17, 0)]  # Available all day on Monday and Tuesday\nsamantha_schedule = {\n    'Monday': [\n        (9, 0, 10, 0),  # unavailable\n        (10, 30, 13, 0),  # unavailable\n        (15, 30, 17, 0)  # unavailable\n    ],\n    'Tuesday': [\n        (9, 0, 11, 0),  # unavailable\n        (12, 0, 12, 30),  # unavailable\n        (13, 0, 13, 30),  # unavailable\n        (14, 0, 14, 30),  # unavailable\n        (15, 0, 15, 30),  # unavailable\n        (16, 0, 17, 0)  # unavailable\n    ]\n}\n\n# Meeting duration and preferred time\nmeeting_duration = timedelta(hours=1)\n\ndef is_time_slot_free(start_hour, start_minute, end_hour, end_minute, schedule):\n    start = (start_hour, start_minute)\n    end = (end_hour, end_minute)\n    \n    for busy_start_hour, busy_start_minute, busy_end_hour, busy_end_minute in schedule:\n        busy_start = (busy_start_hour, busy_start_minute)\n        busy_end = (busy_end_hour, busy_end_minute)\n        \n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday']:\n        for hour in range(9, 17):  # from 9:00 to 17:00\n            for minute in [0]:  # check at 00 minutes\n                start_hour = hour\n                start_minute = minute\n                end_hour = hour + 1 if minute == 0 else hour\n                end_minute = (minute + 60) % 60\n\n                if is_time_slot_free(start_hour, start_minute, end_hour, end_minute, samantha_schedule[day]):\n                    # Check if Peter is free (he is always free)\n                    return f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\n\n# Generate the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_695"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the schedules for Roy and Anna\nroy_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\nanna_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a suitable time\ndef find_meeting_time(day):\n    current_start = start_time\n    while current_start + meeting_duration <= end_time:\n        current_end = current_start + meeting_duration\n        # Check for conflicts with Roy and Anna's schedules\n        if all(not (current_start < end and current_end > start) for start, end in roy_schedule) and \\\n           all(not (current_start < end and current_end > start) for start, end in anna_schedule):\n            return current_start.strftime(\"%H:%M\") + \":\" + current_end.strftime(\"%H:%M\")\n        current_start += timedelta(minutes=30)  # Increment by 30 minutes\n    return None\n\n# Try to schedule the meeting on Monday\nmonday_meeting_time = find_meeting_time(\"Monday\")\nif monday_meeting_time is None:\n    # Try on Tuesday if not found on Monday\n    tuesday_meeting_time = find_meeting_time(\"Tuesday\")\n    if tuesday_meeting_time is not None:\n        print(tuesday_meeting_time)\nelse:\n    print(monday_meeting_time)\n```",
            "count": "calendar_scheduling_example_696"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and constraints\nWORK_HOURS = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nMONDAY = \"Monday\"\nTUESDAY = \"Tuesday\"\n\n# Existing schedules for each participant\ntyler_schedule = {\n    MONDAY: [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    TUESDAY: [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n}\n\nmarie_schedule = {\n    MONDAY: [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    TUESDAY: [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Meeting duration\nMEETING_DURATION = timedelta(minutes=30)\n\ndef available_time_on_day(day, start_hour, end_hour, participant_schedules):\n    start_time = start_hour\n    end_time = end_hour\n    \n    # Combine participant schedules for the day\n    busy_slots = []\n    if day in participant_schedules:\n        busy_slots.extend(participant_schedules[day])\n    \n    # Free time slots\n    free_times = []\n    current_time = start_time\n\n    while current_time + MEETING_DURATION <= end_time:\n        # Check if current_time is within any busy slots\n        is_busy = any(start <= current_time < end for start, end in busy_slots)\n        \n        if not is_busy:\n            # Check if there is enough time for the meeting\n            if all(start > current_time + MEETING_DURATION or end < current_time for start, end in busy_slots):\n                free_times.append(current_time)\n        \n        current_time += timedelta(minutes=1)\n\n    return free_times\n\n# Check for available meeting slots\nfor day in [MONDAY, TUESDAY]:\n    if day == MONDAY and datetime.strptime(\"13:00\", \"%H:%M\") in marie_schedule[MONDAY]:\n        # Skip Monday after 13:00 for Marie\n        continue\n   \n    available_times = available_time_on_day(day, WORK_HOURS[0], WORK_HOURS[1], tyler_schedule[day] + marie_schedule[day])\n    \n    # If there's an available time, schedule it\n    if available_times:\n        meeting_time = available_times[0]  # Take the first available time\n        meeting_start = meeting_time.strftime(\"%H:%M\")\n        meeting_end = (meeting_time + MEETING_DURATION).strftime(\"%H:%M\")\n        break\n\nprint(f\"{{{meeting_start}:{meeting_end}}}\")\n```",
            "count": "calendar_scheduling_example_697"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ashley_schedule, kenneth_schedule, duration, preferred_days):\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Time slots for Monday and Tuesday\n    days = {\n        \"Monday\": [(work_start, work_end)],\n        \"Tuesday\": [(work_start, work_end)]\n    }\n    \n    # Mark busy slots for Ashley\n    for busy_start, busy_end in ashley_schedule:\n        for day in preferred_days:\n            day_slots = days[day]\n            new_slots = []\n            for start, end in day_slots:\n                if busy_end <= start or busy_start >= end:\n                    new_slots.append((start, end))\n                else:\n                    if busy_start > start:\n                        new_slots.append((start, busy_start))\n                    if busy_end < end:\n                        new_slots.append((busy_end, end))\n            days[day] = new_slots\n    \n    # Mark busy slots for Kenneth\n    for busy_start, busy_end in kenneth_schedule:\n        for day in preferred_days:\n            day_slots = days[day]\n            new_slots = []\n            for start, end in day_slots:\n                if busy_end <= start or busy_start >= end:\n                    new_slots.append((start, end))\n                else:\n                    if busy_start > start:\n                        new_slots.append((start, busy_start))\n                    if busy_end < end:\n                        new_slots.append((busy_end, end))\n            days[day] = new_slots\n    \n    # Find the first available time slot for the meeting duration\n    for day in preferred_days:\n        for start, end in days[day]:\n            if (end - start) >= duration:\n                return f\"{start.strftime('%H:%M')}:{(start + duration).strftime('%H:%M')}\"\n    \n    return \"No available time found.\"\n\n\nashley_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                   (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                   (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))]\n\nkenneth_schedule = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\nmeeting_duration = timedelta(minutes=30)\npreferred_days = [\"Monday\"]\n\nprint(find_meeting_time(ashley_schedule, kenneth_schedule, meeting_duration, preferred_days))\n```",
            "count": "calendar_scheduling_example_698"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define working hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n    \n    # Anna's schedule\n    anna_schedule = [(datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n    \n    # Mary's schedule\n    mary_schedule = [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    # Find available time on Tuesday\n    current_time = work_start\n    while current_time <= work_end - meeting_duration:\n        # Check if Anna and Mary are both available\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        # Check Anna's availability\n        if any(start < meeting_end and end > meeting_start for start, end in anna_schedule):\n            current_time += timedelta(minutes=30)\n            continue\n        \n        # Check Mary's availability\n        if any(start < meeting_end and end > meeting_start for start, end in mary_schedule):\n            current_time += timedelta(minutes=30)\n            continue\n        \n        # If we reach here, both are available\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_699"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nmelissa_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\nruth_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available time\ndef find_available_time(melissa_schedule, ruth_schedule, day):\n    busy_times = melissa_schedule.get(day, []) + ruth_schedule.get(day, [])\n    \n    # Add work hours as busy times\n    busy_times.append((work_hours_start, work_hours_end))\n    \n    # Sort by start time\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Find gaps in the busy schedule\n    available_start = work_hours_start\n    for start, end in busy_times:\n        if available_start + meeting_duration <= start:\n            return available_start, available_start + meeting_duration\n        # Move available_start if it's within a busy interval\n        available_start = max(available_start, end)\n    \n    # No available time found within the work hours\n    return None\n\n# Checking for availability on Monday\nday = \"Monday\"\navailable_time = find_available_time(melissa_schedule, ruth_schedule, day)\n\nif available_time:\n    start_time, end_time = available_time\n    print(f\"{{{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}}}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_700"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the work hours and the duration of the meeting\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Schedule constraints\n    albert_busy_times = [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ]\n\n    patricia_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n    \n    # Check available slots on Monday and Tuesday\n    days = [\"Monday\", \"Tuesday\"]\n    \n    for day in days:\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            meeting_start = current_time\n            meeting_end = current_time + meeting_duration\n            \n            # Flag to check if meeting can be scheduled\n            can_schedule = True\n            \n            # Check if there is any overlap in Albert's busy times\n            for start, end in albert_busy_times:\n                if (meeting_start < end and meeting_end > start):\n                    can_schedule = False\n                    break\n            \n            # Check if there is any overlap in Patricia's busy times\n            for start, end in patricia_busy_times:\n                if (meeting_start < end and meeting_end > start):\n                    can_schedule = False\n                    break\n            \n            if can_schedule:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Increment by meeting duration for next slot\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_701"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nimport datetime\n\n# Define the working hours and meeting duration\nworking_hours = (datetime.time(9, 0), datetime.time(17, 0))\nmeeting_duration = datetime.timedelta(minutes=30)\n\n# Define the existing schedules\nrobert_schedule = {\n    \"Monday\": [(datetime.time(11, 0), datetime.time(11, 30)),\n               (datetime.time(14, 0), datetime.time(14, 30)),\n               (datetime.time(15, 30), datetime.time(16, 0))],\n    \"Tuesday\": [(datetime.time(10, 30), datetime.time(11, 0)),\n                (datetime.time(15, 0), datetime.time(15, 30))],\n    \"Wednesday\": [(datetime.time(10, 0), datetime.time(11, 0)),\n                  (datetime.time(11, 30), datetime.time(12, 0)),\n                  (datetime.time(12, 30), datetime.time(13, 0)),\n                  (datetime.time(13, 30), datetime.time(14, 0)),\n                  (datetime.time(15, 0), datetime.time(15, 30)),\n                  (datetime.time(16, 0), datetime.time(16, 30))]\n}\n\nralph_schedule = {\n    \"Monday\": [(datetime.time(10, 0), datetime.time(13, 30)),\n               (datetime.time(14, 0), datetime.time(14, 30)),\n               (datetime.time(15, 0), datetime.time(17, 0))],\n    \"Tuesday\": [(datetime.time(9, 0), datetime.time(9, 30)),\n                (datetime.time(10, 0), datetime.time(10, 30)),\n                (datetime.time(11, 0), datetime.time(11, 30)),\n                (datetime.time(12, 0), datetime.time(13, 0)),\n                (datetime.time(14, 0), datetime.time(15, 30)),\n                (datetime.time(16, 0), datetime.time(17, 0))],\n    \"Wednesday\": [(datetime.time(10, 30), datetime.time(11, 0)),\n                  (datetime.time(11, 30), datetime.time(12, 0)),\n                  (datetime.time(13, 0), datetime.time(14, 30)),\n                  (datetime.time(16, 30), datetime.time(17, 0))]\n}\n\n# Find available time slots for the meeting\ndef find_meeting_time(robert_schedule, ralph_schedule, working_hours, meeting_duration):\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    available_slots = {}\n\n    for day in days:\n        # Get the busy times\n        robert_busy = robert_schedule[day]\n        ralph_busy = ralph_schedule[day]\n\n        # Combine the busy times\n        all_busy_times = robert_busy + ralph_busy\n\n        # Create a list of free slots\n        free_slots = []\n        current_time = working_hours[0]\n\n        # Check each minute in working hours\n        while current_time < working_hours[1]:\n            is_busy = any(start <= current_time < end for start, end in all_busy_times)\n            if not is_busy:\n                free_slots.append(current_time)\n\n            # Move to the next minute\n            current_time = (datetime.datetime.combine(datetime.date.today(), current_time) + datetime.timedelta(minutes=1)).time()\n\n        # Check for available meeting times\n        for start_time in free_slots:\n            end_time = (datetime.datetime.combine(datetime.date.today(), start_time) + meeting_duration).time()\n            if end_time <= working_hours[1]:\n                # Ensure the end_time is free\n                is_end_busy = any(start <= end_time <= end for start, end in all_busy_times)\n                if not is_end_busy:\n                    available_slots[day] = start_time\n                    break  # Take the first available slot\n\n    return available_slots\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(robert_schedule, ralph_schedule, working_hours, meeting_duration)\n\n# Format the output\nif proposed_time:\n    day, start_time = next(iter(proposed_time.items()))\n    end_time = (datetime.datetime.combine(datetime.date.today(), start_time) + meeting_duration).time()\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time slots found.\")\n```",
            "count": "calendar_scheduling_example_702"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start_time = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules in (start, end) tuples\nstephanie_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\nbetty_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\n# Add the constraints for Tuesday\nbetty_schedule.extend([\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n])\n\n# Combine schedules based on the days\ncombined_schedule = {\n    \"Monday\": stephanie_schedule + betty_schedule,\n    \"Tuesday\": betty_schedule,\n    \"Wednesday\": []\n}\n\n# Search for an available time slot\ndef find_meeting_time():\n    for day, schedules in combined_schedule.items():\n        current_time = work_start_time\n        while current_time + meeting_duration <= work_end_time:\n            # Check for conflicts\n            end_time = current_time + meeting_duration\n            conflict = False\n            for start, end in schedules:\n                if (current_time < end and end_time > start):\n                    conflict = True\n                    break\n                    \n            if not conflict:\n                return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n                \n            current_time += timedelta(minutes=30)  # Check next slot\n            \n    return None\n\n# Get the proposed time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_703"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define schedules\nschedules = {\n    'Larry': [(start_time, end_time)],\n    'Samuel': [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\n# Function to find the earliest available slot\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        proposed_start = start_time\n        while proposed_start + meeting_duration <= end_time:\n            proposed_end = proposed_start + meeting_duration\n            is_available = True\n            \n            for participant, busy_slots in schedules.items():\n                for busy_start, busy_end in busy_slots:\n                    if proposed_start < busy_end and proposed_end > busy_start:\n                        is_available = False\n                        break\n            \n            if is_available:\n                if day == 'Tuesday' and (proposed_start < datetime.strptime(\"12:00\", \"%H:%M\") or proposed_end > datetime.strptime(\"15:30\", \"%H:%M\")):\n                    return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n                elif day == 'Wednesday':\n                    continue\n                else:\n                    return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n                    \n            proposed_start += timedelta(minutes=30)\n\n# Generate proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_704"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(scott_schedule, jeffrey_schedule, duration):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of potential meeting times\n    potential_times = []\n    \n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        if day == \"Monday\":\n            jeffrey_busy_times = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                                  (datetime.strptime(\"16:30\", \"%H:%M\"), work_hours_end)]\n        elif day == \"Tuesday\":\n            jeffrey_busy_times = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n        else: # Wednesday\n            jeffrey_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                                  (datetime.strptime(\"12:00\", \"%H:%M\"), work_hours_end)]\n        \n        current_time = work_hours_start\n        \n        # Check for available slots\n        for busy_start, busy_end in jeffrey_busy_times:\n            # Check free time before busy time\n            if current_time < busy_start:\n                if (busy_start - current_time) >= timedelta(hours=duration):\n                    potential_times.append((current_time, busy_start))\n            current_time = busy_end\n            \n        # End of the day check\n        if current_time < work_hours_end:\n            potential_times.append((current_time, work_hours_end))\n    \n    # Find a slot that fits the duration\n    for start, end in potential_times:\n        if (end - start) >= timedelta(hours=duration):\n            meeting_time = start.strftime(\"%H:%M\") + ':' + (start + timedelta(hours=duration)).strftime(\"%H:%M\")\n            return meeting_time\n    \n    return \"No available time found\"\n\nscott_schedule = {}\njeffrey_schedule = {}\nmeeting_duration = 1  # in hours\n\nprint(find_meeting_time(scott_schedule, jeffrey_schedule, meeting_duration))\n```",
            "count": "calendar_scheduling_example_705"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define the busy schedules for Gregory and Patricia\ngregory_schedule = {\n    'Monday': [(time(15, 30), time(16, 30))],\n    'Tuesday': [(time(9, 0), time(9, 30)), (time(11, 30), time(12, 0)), \n                (time(14, 0), time(14, 30)), (time(15, 0), time(16, 0)), \n                (time(16, 30), time(17, 0))],\n    'Wednesday': [(time(9, 0), time(9, 30)), (time(10, 0), time(11, 0)), \n                  (time(11, 30), time(13, 0)), (time(13, 30), time(14, 30))]\n}\n\npatricia_schedule = {\n    'Monday': [(time(9, 0), time(9, 30)), (time(10, 0), time(10, 30)), \n               (time(11, 30), time(15, 0))],\n    'Tuesday': [(time(9, 0), time(10, 30)), (time(11, 0), time(11, 30)), \n                (time(12, 0), time(14, 30)), (time(15, 0), time(15, 30)), \n                (time(16, 30), time(17, 0))],\n    'Wednesday': [(time(9, 0), time(9, 30)), (time(10, 0), time(12, 30)), \n                  (time(13, 30), time(16, 0)), (time(16, 30), time(17, 0))]\n}\n\n# Duration of the meeting\nmeeting_duration = timedelta(hours=1)\n\n# Function to check if there is available time slot for the meeting\ndef find_meeting_time():\n    working_hours_start = time(9, 0)\n    working_hours_end = time(17, 0)\n    \n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        # Find busy times for both participants\n        busy_times = gregory_schedule[day] + patricia_schedule[day]\n        \n        # Sort busy times\n        busy_times.sort(key=lambda x: x[0])\n        \n        # Check for available slots\n        current_start = working_hours_start\n        \n        for busy_start, busy_end in busy_times:\n            if current_start + meeting_duration <= busy_start:\n                # Check if the current start time plus meeting duration is before the busy start\n                return f'{current_start.hour:02}:{current_start.minute:02}:{(current_start + meeting_duration).hour:02}:{(current_start + meeting_duration).minute:02}'\n            # Move current start to the end of the busy time\n            current_start = max(current_start, busy_end)\n        \n        # Check if there is time after the last busy period until the end of work hours\n        if current_start + meeting_duration <= working_hours_end:\n            return f'{current_start.hour:02}:{current_start.minute:02}:{(current_start + meeting_duration).hour:02}:{(current_start + meeting_duration).minute:02}'\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_706"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nryan_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n]\nadam_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find a suitable time\ndef find_meeting_time(ryan_schedule, adam_schedule, meeting_duration):\n    for day in ['Monday', 'Tuesday']:\n        time_slots = []\n        \n        # Generate free time slots for Ryan and Adam\n        current_start = work_hours_start\n        while current_start < work_hours_end:\n            current_end = current_start + meeting_duration\n            \n            if (current_end > work_hours_end):\n                break\n            \n            # Check if the slot is free for both\n            ryan_free = all(not (current_start < end and current_end > start) for start, end in ryan_schedule)\n            adam_free = all(not (current_start < end and current_end > start) for start, end in adam_schedule)\n            \n            if ryan_free and adam_free:\n                time_slots.append((current_start, current_end))\n\n            current_start += timedelta(minutes=30)  # Increment by 30 minutes for next slot\n        \n        # Check preferences\n        if day == 'Monday':\n            for start, end in time_slots:\n                if start >= datetime.strptime('14:30', '%H:%M'):\n                    return start.strftime('%H:%M') + ':' + end.strftime('%H:%M')\n        else:  # For Tuesday, allow any available slot\n            if time_slots:\n                start, end = time_slots[0]\n                return start.strftime('%H:%M') + ':' + end.strftime('%H:%M')\n    \n    return None  # In case no time slot is found\n\nproposed_time = find_meeting_time(ryan_schedule, adam_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_707"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and days\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the blocked schedules for Billy and Jean\nbilly_busy_slots = [\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))  # Monday\n]\njean_busy_slots = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (work_hours_start, work_hours_end)  # 9:00 to 17:00 is fully busy\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), work_hours_end)  # 9:30 to 17:00\n    ]\n}\n\n# Meeting time generation function\ndef find_meeting_slot():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    for day in days:\n        if day == \"Monday\" and datetime.strptime(\"13:30\", \"%H:%M\") < work_hours_end:\n            # Check slots for Monday after 13:30\n            start_time = datetime.strptime(\"13:30\", \"%H:%M\")\n        else:\n            start_time = work_hours_start\n        \n        while start_time + meeting_duration <= work_hours_end:            \n            # Check if the current slot is available\n            is_available = True\n            \n            # Check Billy's busy slots\n            for busy_start, busy_end in billy_busy_slots:\n                if start_time < busy_end and (start_time + meeting_duration) > busy_start:\n                    is_available = False\n                    break\n            \n            # Check Jean's busy slots for the current day\n            for busy_start, busy_end in jean_busy_slots[day]:\n                if start_time < busy_end and (start_time + meeting_duration) > busy_start:\n                    is_available = False\n                    break\n            \n            if is_available:\n                return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n            \n            start_time += timedelta(minutes=30)  # Increment to check the next potential start time\n    \n    return \"No available slot\"\n\n# Find and print the meeting slot\nmeeting_slot = find_meeting_slot()\nprint(meeting_slot)\n```",
            "count": "calendar_scheduling_example_708"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": "AttributeError",
            "full_response": "```python\ndef find_meeting_time():\n    # Define the participants' schedules\n    henry_schedule = {\n        'Monday': [(11, 30), (12, 30), (16, 0)],\n        'Tuesday': [(9, 30), (10, 0), (11, 0), (14, 0), (16, 0)],\n        'Wednesday': [(11, 30), (12, 0), (13, 0), (16, 0)]\n    }\n    \n    jerry_schedule = {\n        'Monday': [(9, 0), (11, 30), (12, 30), (13, 30), (15, 30), (16, 0)],\n        'Tuesday': [(9, 0), (9, 30), (11, 0), (12, 30), (14, 0), (15, 0), (16, 0)],\n        'Wednesday': [(9, 0), (10, 0), (12, 0), (14, 30), (15, 0)]\n    }\n    \n    # Meeting duration\n    meeting_duration = 60  # in minutes\n    \n    # Create a function to generate available slots\n    def get_available_slots(schedule):\n        available_slots = []\n        work_start = 9 * 60  # 9:00 in minutes\n        work_end = 17 * 60  # 17:00 in minutes\n\n        # Convert schedule to blocked minutes\n        blocked_times = []\n        for day, times in schedule.items():\n            for start, end in times:\n                start_time = start * 60\n                end_time = end * 60\n                blocked_times.append((start_time, end_time))\n        \n        # Check for available time slots\n        current_end = work_start\n        for start, end in sorted(blocked_times):\n            if current_end + meeting_duration <= start:\n                available_slots.append((current_end, current_end + meeting_duration))\n            current_end = max(current_end, end)\n\n        if current_end + meeting_duration <= work_end:\n            available_slots.append((current_end, current_end + meeting_duration))\n        \n        return available_slots\n    \n    # Find common available slots for Tuesday and Wednesday\n    henry_available_slots_tuesday = get_available_slots(henry_schedule['Tuesday'])\n    jerry_available_slots_tuesday = get_available_slots(jerry_schedule['Tuesday'])\n    \n    # Check for overlaps\n    for slot in henry_available_slots_tuesday:\n        for j_slot in jerry_available_slots_tuesday:\n            if slot[0] < j_slot[1] and j_slot[0] < slot[1]:  # Check for overlap\n                return f\"{slot[0] // 60:02}:{slot[0] % 60:02}:{slot[1] // 60:02}:{slot[1] % 60:02}\"\n    \n    # If no availability on Tuesday, check Wednesday\n    henry_available_slots_wednesday = get_available_slots(henry_schedule['Wednesday'])\n    jerry_available_slots_wednesday = get_available_slots(jerry_schedule['Wednesday'])\n\n    # Check for overlaps\n    for slot in henry_available_slots_wednesday:\n        for j_slot in jerry_available_slots_wednesday:\n            if slot[0] < j_slot[1] and j_slot[0] < slot[1]:  # Check for overlap\n                return f\"{slot[0] // 60:02}:{slot[0] % 60:02}:{slot[1] // 60:02}:{slot[1] % 60:02}\"\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_709"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules (busy times)\ncheryl_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\nkyle_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if time slot is free for both\ndef is_free(start, end):\n    for busy_start, busy_end in cheryl_busy:\n        if start < busy_end and end > busy_start:\n            return False\n    for busy_start, busy_end in kyle_busy:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find a suitable time on Monday or Tuesday\ndef find_meeting_time():\n    day = [\"Monday\", \"Tuesday\"]\n    for d in day:\n        current_start = work_start\n        while current_start + meeting_duration <= work_end:\n            current_end = current_start + meeting_duration\n            if is_free(current_start, current_end):\n                return f\"{current_start.strftime('%H:%M')}:{current_end.strftime('%H:%M')}\"\n            current_start += timedelta(minutes=30)  # Check next half-hour slot\n\n# Print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_710"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find available slots for a meeting\ndef find_meeting_slot(mason_schedule, nicole_schedule, meeting_duration):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Iterate through Monday, Tuesday, and Wednesday\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        # Get the specific schedule for the day\n        mason_times = mason_schedule.get(day, [])\n        nicole_times = nicole_schedule.get(day, [])\n        \n        # Convert blocked times to datetime objects\n        blocked_times = []\n        for time in mason_times + nicole_times:\n            start, end = (datetime.strptime(t, \"%H:%M\") for t in time)\n            blocked_times.append((start, end))\n        \n        # Find available slots during work hours\n        current_time = work_hours_start\n        while current_time < work_hours_end:\n            # Check if the time is free for the meeting\n            meeting_end = current_time + timedelta(hours=meeting_duration)\n            if meeting_end > work_hours_end:\n                break\n            \n            is_free = True\n            for start, end in blocked_times:\n                if current_time < end and meeting_end > start:\n                    is_free = False\n                    break\n            \n            if is_free:\n                return f\"{current_time.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Check every 30 mins\n            \n    return None\n\n# Existing schedules\nmason_schedule = {\n    'Monday': [(\"09:30\", \"10:00\"), (\"10:30\", \"11:00\")],\n    'Tuesday': [(\"09:30\", \"10:00\"), (\"14:00\", \"14:30\")],\n    'Wednesday': [(\"14:30\", \"15:00\"), (\"15:30\", \"16:00\")]\n}\n\nnicole_schedule = {\n    'Monday': [(\"09:00\", \"17:00\")],\n    'Tuesday': [(\"09:00\", \"17:00\")],\n    'Wednesday': [(\"09:00\", \"09:30\"), (\"11:00\", \"14:30\"), (\"15:00\", \"16:00\")]\n}\n\n# Meeting duration in hours\nmeeting_duration = 1\n\n# Find and print the meeting slot\navailable_slot = find_meeting_slot(mason_schedule, nicole_schedule, meeting_duration)\nprint(available_slot)\n```",
            "count": "calendar_scheduling_example_711"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Define blocked times for Gerald\ngerald_schedule = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Define blocked times for Adam\nadam_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # whole day\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to check if time is blocked\ndef is_time_blocked(start, end, schedule):\n    for block_start, block_end in schedule:\n        if (start < block_end) and (end > block_start):\n            return True\n    return False\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        if day == 'Monday':\n            start_time = work_start\n            end_time = work_end\n        elif day == 'Tuesday':\n            start_time = work_start\n            end_time = work_end\n        elif day == 'Wednesday':\n            start_time = work_start\n            end_time = datetime.strptime('14:30', '%H:%M')\n\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            if not (is_time_blocked(current_time, current_time + meeting_duration, gerald_schedule) or\n                    is_time_blocked(current_time, current_time + meeting_duration, adam_schedule)):\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n    \n    return None  # Should not happen as per the task\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_712"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(martha_schedule, carol_schedule, meeting_duration, work_hours):\n    # Work hours\n    start_hour, end_hour = [datetime.strptime(x, \"%H:%M\") for x in work_hours]\n    \n    # Generate available time slots\n    available_slots = []\n    \n    # Check each day of available schedules\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Determine the schedule for each participant\n        martha_times = martha_schedule.get(day, [])\n        carol_times = carol_schedule.get(day, [])\n        \n        # Merge the schedules and find free slots\n        merged_schedule = martha_times + carol_times\n        merged_schedule.sort()\n        \n        # Check for available time slots\n        current_time = start_hour\n        for start, end in merged_schedule:\n            if current_time < start:\n                # Check if the available time is enough for the meeting duration\n                if (start - current_time) >= meeting_duration:\n                    available_slots.append((current_time, start))\n            # Move current time past the end of the busy slot\n            current_time = max(current_time, end)\n\n        # Check available time after last meeting until end of work hours\n        if current_time < end_hour:\n            available_slots.append((current_time, end_hour))\n    \n    # Find the first available slot that fits the meeting duration\n    for start, end in available_slots:\n        if (end - start) >= meeting_duration:\n            return start.strftime(\"%H:%M\") + \":\" + (start + meeting_duration).strftime(\"%H:%M\")\n    \n    return \"No available time.\"\n\n# Participant schedules\nmartha_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Tuesday\": [],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\"))]\n}\n\ncarol_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ]\n}\n\n# Meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_hours = [\"09:00\", \"17:00\"]\n\n# Execute function to find the meeting time\nmeeting_time = find_meeting_time(martha_schedule, carol_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_713"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules\nzachary_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n]\n\ndebra_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to calculate available time slot\ndef find_meeting_time(zachary_schedule, debra_schedule):\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        current_time = working_hours_start\n        \n        while current_time + meeting_duration <= working_hours_end:\n            end_time = current_time + meeting_duration\n            \n            # Check if the current time slot is free for both participants\n            is_free = True\n            \n            for start, end in zachary_schedule:\n                if (current_time < end) and (end_time > start):\n                    is_free = False\n                    break\n            \n            for start, end in debra_schedule:\n                if (current_time < end) and (end_time > start):\n                    is_free = False\n                    break\n\n            if is_free:\n                return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n            \n            current_time += timedelta(minutes=30)  # Check the next half-hour slot\n\n    return None\n\n# Calculate a proposed time\nproposed_time = find_meeting_time(zachary_schedule, debra_schedule)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_714"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\ndenise_schedule = {\n    \"Monday\": [\n        (\"09:00\", \"09:30\"),\n        (\"10:00\", \"11:00\"),\n        (\"11:30\", \"12:00\"),\n        (\"13:00\", \"17:00\")\n    ],\n    \"Tuesday\": [\n        (\"09:30\", \"10:00\"),\n        (\"11:00\", \"11:30\"),\n        (\"13:30\", \"14:00\"),\n        (\"15:00\", \"16:30\")\n    ],\n    \"Wednesday\": [\n        (\"09:30\", \"11:00\"),\n        (\"11:30\", \"12:00\"),\n        (\"12:30\", \"13:00\"),\n        (\"14:30\", \"15:30\"),\n        (\"16:00\", \"16:30\")\n    ]\n}\n\n# Meeting constraints\nwork_hours_start = \"09:00\"\nwork_hours_end = \"17:00\"\nmeeting_duration = timedelta(hours=1)\navailable_days = [\"Tuesday\", \"Wednesday\"]\n\n# Convert string time to datetime\ndef convert_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Find the earliest available time for the meeting\ndef find_meeting_time():\n    for day in available_days:\n        day_schedule = denise_schedule[day]\n        \n        # Initialize the start of the work day\n        current_time = convert_time(work_hours_start)\n\n        # Work hours end time\n        work_end_time = convert_time(work_hours_end)\n\n        # Check for gaps in the schedule\n        for blocked_start, blocked_end in day_schedule:\n            blocked_start_time = convert_time(blocked_start)\n            blocked_end_time = convert_time(blocked_end)\n\n            # Continue searching for a time slot until blocked_start_time\n            while current_time + meeting_duration <= blocked_start_time and current_time < work_end_time:\n                meeting_start = current_time\n                meeting_end = meeting_start + meeting_duration\n\n                # If meeting ends in work hours and before the next blocked time\n                if meeting_end <= work_end_time:\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n                \n                # Move to the next time slot\n                current_time = blocked_end_time\n\n            # Move current time to the end of the blocked period if it's not already\n            if current_time < blocked_end_time:\n                current_time = blocked_end_time\n\n        # If we reach the end of the day, check if we can schedule at the very end\n        if current_time + meeting_duration <= work_end_time:\n            meeting_start = current_time\n            meeting_end = meeting_start + meeting_duration\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Call the function to find the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_715"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules as busy time ranges\ndebra_busy_times = [\n    (\"Tuesday\", \"10:30\", \"11:00\"),\n    (\"Tuesday\", \"13:00\", \"13:30\"),\n    (\"Wednesday\", \"09:30\", \"10:00\"),\n    (\"Wednesday\", \"11:30\", \"12:00\")\n]\n\nkeith_busy_times = [\n    (\"Monday\", \"09:00\", \"17:00\"),\n    (\"Tuesday\", \"09:00\", \"11:30\"),\n    (\"Tuesday\", \"12:00\", \"13:00\"),\n    (\"Tuesday\", \"13:30\", \"17:00\"),\n    (\"Wednesday\", \"09:00\", \"09:30\"),\n    (\"Wednesday\", \"10:00\", \"13:00\"),\n    (\"Wednesday\", \"13:30\", \"14:00\"),\n    (\"Wednesday\", \"14:30\", \"16:00\"),\n    (\"Wednesday\", \"16:30\", \"17:00\")\n]\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n# Create a function to check for overlapping busy times\ndef is_time_available(day, start_time, duration):\n    busy_times = []\n    \n    for busy_day, start, end in debra_busy_times + keith_busy_times:\n        if busy_day == day:\n            busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    \n    meeting_start = datetime.strptime(start_time, \"%H:%M\")\n    meeting_end = meeting_start + duration\n\n    for start, end in busy_times:\n        if (meeting_start < end) and (meeting_end > start):\n            return False  # Time is not available\n\n    return True  # Time is available\n\n# Try to find a suitable time slot\ndef schedule_meeting():\n    for day in work_days:\n        for hour in range(9, 17):  # Work hours from 9 to 17\n            start_time = f\"{hour:02}:00\"\n            if is_time_available(day, start_time, meeting_duration):\n                return f\"{start_time}:{(datetime.strptime(start_time, '%H:%M') + meeting_duration).strftime('%H:%M')}\"\n    return \"No available time\"\n\nproposed_time = schedule_meeting()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_716"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nevelyn_schedule = {\n    \"Monday\": [(9, 10), (11, 11.5), (12.5, 14.5), (15, 15.5), (16, 17)],\n    \"Tuesday\": [(9.5, 10), (12.5, 13), (14, 15), (15.5, 16)],\n    \"Wednesday\": [(9, 9.5), (11.5, 12), (14, 14.5)]\n\n}\njulia_schedule = {\n    \"Monday\": [(9, 10), (10.5, 15), (15.5, 17)],\n    \"Tuesday\": [(9, 15.5), (16, 17)],\n    \"Wednesday\": [(9, 13), (13.5, 17)]\n}\n\n# Meeting duration\nmeeting_duration = 0.5  # 30 minutes\n\n# Function to find available time slots\ndef find_available_slot(schedule1, schedule2, day):\n    # Get existing busy slots\n    busy_slots = schedule1[day] + schedule2[day]\n    busy_slots.sort()\n    \n    # Create a full day time range to check for availability\n    start_of_day = 9  # 9:00 AM\n    end_of_day = 17   # 5:00 PM\n    \n    # Create a free slots list\n    free_slots = []\n    last_end = start_of_day\n    \n    # Find free slots between busy slots\n    for slot in busy_slots:\n        if last_end < slot[0]:\n            free_slots.append((last_end, slot[0]))\n        last_end = max(last_end, slot[1])\n    \n    # Check for free time after the last busy slot\n    if last_end < end_of_day:\n        free_slots.append((last_end, end_of_day))\n    \n    # Filter for available slots based on meeting duration\n    available_slots = [(start, end) for start, end in free_slots if end - start >= meeting_duration]\n    \n    return available_slots\n\n# Check each day for available slots\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\nfirst_available = None\n\nfor day in days:\n    available_slots = find_available_slot(evelyn_schedule, julia_schedule, day)\n    if available_slots:\n        first_available = available_slots[0]\n        break\n\n# Output the first available time\nstart_time = int(first_available[0])\nend_time = start_time + meeting_duration\n\nstart_hour = int(start_time)\nstart_minute = int((start_time - start_hour) * 60)\nend_hour = int(end_time)\nend_minute = int((end_time - end_hour) * 60)\n\noutput = f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_717"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\njesse_busy_times = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\nmartha_busy_times = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Check for available slots\ndef is_time_available(start_time, end_time, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\n# Search for an available time slot\ndef find_meeting_time():\n    for day in [0, 1, 2]:  # Monday, Tuesday, Wednesday\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            next_time = current_time + meeting_duration\n            if day == 0 and is_time_available(current_time, next_time, jesse_busy_times) and is_time_available(current_time, next_time, martha_busy_times):\n                return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n            elif day == 1 and is_time_available(current_time, next_time, jesse_busy_times) and is_time_available(current_time, next_time, martha_busy_times):\n                return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n            elif day == 2 and is_time_available(current_time, next_time, jesse_busy_times) and is_time_available(current_time, next_time, martha_busy_times):\n                return f\"{current_time.strftime('%H:%M')}:{next_time.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)\n    return None\n\n# Execute the function\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_718"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Parse the existing schedules\n    teresa_schedule = {\n        'Monday': [\n            (9, 11), (12, 14.5), (15, 17)\n        ],\n        'Tuesday': [\n            (9, 17)\n        ],\n        'Wednesday': [\n            (9, 12), (12.5, 14), (14.5, 16.5)\n        ]\n    }\n    \n    meeting_duration = 1  # in hours\n    work_hours = (9, 17)  # 9:00 to 17:00\n\n    # Convert the schedules to free time slots\n    def get_free_time_slots(schedule):\n        free_slots = []\n        current_start = work_hours[0]\n        \n        for start, end in schedule:\n            if current_start < start:\n                free_slots.append((current_start, start))\n            current_start = max(current_start, end)\n        \n        if current_start < work_hours[1]:\n            free_slots.append((current_start, work_hours[1]))\n        \n        return free_slots\n\n    teresa_free_slots = get_free_time_slots(teresa_schedule['Monday']) + \\\n                        get_free_time_slots(teresa_schedule['Tuesday']) + \\\n                        get_free_time_slots(teresa_schedule['Wednesday'])\n\n    # Find a suitable time slot for the meeting\n    for start, end in teresa_free_slots:\n        if end - start >= meeting_duration:\n            proposed_start = start\n            proposed_end = proposed_start + meeting_duration\n            return f\"{int(proposed_start):02}:{int((proposed_start % 1) * 60):02}:{int(proposed_end):02}:{int((proposed_end % 1) * 60):02}\"\n\n# Get the proposed meeting time\nscheduled_time = find_meeting_time()\nprint(scheduled_time)\n```",
            "count": "calendar_scheduling_example_719"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules\ncatherine_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), work_end),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), work_end),\n    ]\n}\n\n# Function to find the earliest time slot for a meeting\ndef find_meeting_time():\n    for day in [\"Monday\", \"Wednesday\"]:  # Exclude Tuesday as per Mary's preference\n        free_slots = []\n        start_time = work_start\n        \n        for busy_start, busy_end in catherine_schedule[day]:\n            if start_time + meeting_duration <= busy_start:\n                free_slots.append((start_time, busy_start))\n            start_time = max(start_time, busy_end)\n        \n        # Check if there's free time at the end of the day\n        if start_time + meeting_duration <= work_end:\n            free_slots.append((start_time, work_end))\n        \n        # Find the earliest available slot\n        for free_start, free_end in free_slots:\n            if free_end - free_start >= meeting_duration:\n                meeting_start = free_start\n                meeting_end = free_start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Schedule the meeting\nresult = find_meeting_time()\nprint(result)\n```",
            "count": "calendar_scheduling_example_720"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef find_meeting_time():\n    # Define the work hours and the constraints for each participant\n    work_hours = {\n        'Monday': [(9, 0), (17, 0)],\n        'Tuesday': [(9, 0), (17, 0)],\n        'Wednesday': [(9, 0), (17, 0)]\n    }\n\n    # Jessica's busy schedules\n    jessica_schedule = {\n        'Monday': [(9, 30), (10, 0), (11, 30), (12, 30)],\n        'Tuesday': [(9, 30), (10, 0), (11, 0), (11, 30), (12, 0), (14, 30), (15, 30), (16, 0)],\n        'Wednesday': [(12, 0), (12, 30), (13, 30), (14, 30)],\n    }\n\n    # Carol's busy schedules\n    carol_schedule = {\n        'Monday': [(9, 0), (11, 30), (12, 0), (13, 30), (14, 0), (14, 30), (15, 0), (16, 30)],\n        'Tuesday': [(9, 30), (10, 0), (11, 30), (12, 30), (14, 0), (14, 30), (15, 0), (15, 30), (16, 0), (16, 30)],\n        'Wednesday': [(9, 30), (10, 30), (12, 0), (15, 0), (15, 30), (16, 0), (16, 30)],\n    }\n    \n    # Meeting duration is 1 hour\n    meeting_duration = 60  # minutes\n\n    # Function to convert hours and minutes to minutes from start of day\n    def to_minutes(h, m):\n        return h * 60 + m\n\n    # Check for possible meeting slots\n    for day in ['Monday', 'Wednesday']:\n        # Get work hours for the day\n        start_hour, end_hour = work_hours[day]\n        start_time = to_minutes(start_hour, 0)\n        end_time = to_minutes(end_hour, 0)\n        \n        # Create the busy time slots for both Jessica and Carol\n        busy_times = []\n        for participant_schedule in [jessica_schedule, carol_schedule]:\n            for busy_time in participant_schedule[day]:\n                busy_times.append(to_minutes(*busy_time))\n        \n        busy_times.sort()\n        \n        # Merge busy times into time slots\n        merged_busy_times = []\n        current_start = None\n        \n        for time in busy_times:\n            if current_start is None:\n                current_start = time\n            elif time > current_start + meeting_duration:\n                merged_busy_times.append((current_start, time))\n                current_start = None\n            else:\n                current_start = max(current_start, time)\n        \n        # Check for the free time slot between busy times\n        current_free_start = start_time\n        \n        for busy_start, busy_end in merged_busy_times:\n            if current_free_start + meeting_duration <= busy_start:\n                # Found a suitable time slot\n                return f\"{current_free_start // 60:02}:{current_free_start % 60:02}:{current_free_start + meeting_duration // 60:02}:{(current_free_start + meeting_duration) % 60:02}\"\n            current_free_start = max(current_free_start, busy_end)\n        \n        # Check the end of the work period\n        if current_free_start + meeting_duration <= end_time:\n            return f\"{current_free_start // 60:02}:{current_free_start % 60:02}:{current_free_start + meeting_duration // 60:02}:{(current_free_start + meeting_duration) % 60:02}\"\n\n# Call the function and print the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_721"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules\nelijah_schedule = [\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))   # Wednesday\n]\n\nzachary_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),   # Monday\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),   # Tuesday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))   # Wednesday\n]\n\n# Function to check if time range is free for both participants\ndef is_time_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Find possible meeting slots\ndef find_meeting_time():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    for day in days:\n        # Check time slots in scheduled working hours\n        current_time = working_hours_start\n        \n        while current_time + meeting_duration <= working_hours_end:\n            potential_start = current_time\n            potential_end = current_time + meeting_duration\n            \n            if is_time_free(potential_start, potential_end, elijah_schedule) and is_time_free(potential_start, potential_end, zachary_schedule):\n                if day == \"Tuesday\":  # Skip if it's Tuesday to avoid Zachary's preference\n                    current_time += timedelta(minutes=30)  # Increment time to skip\n                    continue\n                \n                return f\"{potential_start.strftime('%H:%M')}:{potential_end.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Increment time for the next slot\n    \n    return None\n\n# Output the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)  # Output format: HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_722"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if time slots are available for both participants\ndef is_available(start_a, end_a, start_m, end_m):\n    return max(start_a, start_m) < min(end_a, end_m)\n\n# Function to find the earliest common time slot for the meeting\ndef find_meeting_slot(arthur_schedule, michael_schedule, meeting_duration):\n    # Define working hours\n    working_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    working_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Meeting times in minutes\n    meeting_duration_minutes = meeting_duration.total_seconds() / 60\n\n    # Check availability for Monday\n    for start_a, end_a in arthur_schedule['Monday']:\n        for start_m, end_m in michael_schedule['Monday']:\n            if is_available(start_a, end_a, start_m, end_m):\n                common_start = max(start_a, start_m)\n                common_end = min(end_a, end_m)\n                if (common_end - common_start).total_seconds() / 60 >= meeting_duration_minutes and common_start >= working_hours_start and common_end <= working_hours_end:\n                    return common_start.strftime(\"%H:%M\") + \":\" + (common_start + meeting_duration).strftime(\"%H:%M\")\n\n    # Check availability for Wednesday\n    for start_a, end_a in arthur_schedule['Wednesday']:\n        for start_m, end_m in michael_schedule['Wednesday']:\n            if is_available(start_a, end_a, start_m, end_m):\n                common_start = max(start_a, start_m)\n                common_end = min(end_a, end_m)\n                if (common_end - common_start).total_seconds() / 60 >= meeting_duration_minutes and common_start >= working_hours_start and common_end <= working_hours_end:\n                    return common_start.strftime(\"%H:%M\") + \":\" + (common_start + meeting_duration).strftime(\"%H:%M\")\n\n# Participant schedules\narthur_schedule = {\n    'Monday': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nmichael_schedule = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))]\n}\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Find and print the proposed time for the meeting\nproposed_time = find_meeting_slot(arthur_schedule, michael_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_723"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Define the working hours\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Define the busy times for Tyler and Ruth\n    tyler_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    ruth_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Check time slots for possible meeting\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        current_time = start_time\n        \n        while current_time + meeting_duration <= end_time:\n            meeting_end_time = current_time + meeting_duration\n            \n            # Check if both Tyler and Ruth are free for the current time slot\n            is_tyler_free = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in tyler_busy_times)\n            is_ruth_free = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in ruth_busy_times)\n            \n            if is_tyler_free and is_ruth_free:\n                # If Tyler wants to avoid meetings before 16:00 on Monday\n                if day == 'Monday' and current_time < datetime.strptime(\"16:00\", \"%H:%M\"):\n                    current_time = datetime.strptime(\"16:00\", \"%H:%M\")\n                    continue\n                \n                # If suitable time is found, return it in the specified format\n                return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n            \n            # Increment current time by 30 minutes\n            current_time += timedelta(minutes=30)\n\n# Run the function to get the suitable meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_724"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for Brittany and Bruce\nbrittany_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Wednesday\n]\n\nbruce_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Wednesday\n]\n\ndef find_meeting_time(brittany_schedule, bruce_schedule):\n    # Combine schedules for easier checking\n    combined_schedule = brittany_schedule + bruce_schedule\n    \n    # Sort the combined schedule by start time\n    combined_schedule.sort(key=lambda x: x[0])\n    \n    # Check for available meeting time\n    current_time = work_hours_start\n    \n    while current_time + meeting_duration <= work_hours_end:\n        end_time = current_time + meeting_duration\n        # Check for conflicts\n        conflict = any(start < end_time and current_time < finish for start, finish in combined_schedule)\n        \n        if not conflict:\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        # Move to the next minute\n        current_time += timedelta(minutes=1)\n\nmeeting_time = find_meeting_time(brittany_schedule, bruce_schedule)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_725"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(frank_schedule, judy_schedule, meeting_duration, work_start, work_end, preferred_days):\n    work_start_time = datetime.strptime(work_start, \"%H:%M\")\n    work_end_time = datetime.strptime(work_end, \"%H:%M\")\n\n    # Convert schedule ranges into datetime tuples\n    frank_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in frank_schedule]\n    judy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in judy_schedule]\n\n    # Create blocks for both Frank and Judy\n    busy_times = []\n    for start, end in frank_times + judy_times:\n        busy_times.append((max(start, work_start_time), min(end, work_end_time)))\n\n    busy_times.sort()  # Sort the busy times\n\n    # Find available slots\n    available_slots = []\n    last_end = work_start_time\n\n    for start, end in busy_times:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < work_end_time:\n        available_slots.append((last_end, work_end_time))\n\n    # Find a suitable time for the meeting\n    for start, end in available_slots:\n        if (end - start) >= meeting_duration:\n            proposed_start = start\n            proposed_end = start + meeting_duration\n            # Return time as required\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n# Participants schedules\nfrank_schedule = [\n    (\"09:30\", \"10:00\"), (\"16:30\", \"17:00\"),\n    (\"09:00\", \"10:30\"), (\"15:00\", \"15:30\")\n]\njudy_schedule = [\n    (\"09:00\", \"14:30\"), (\"15:00\", \"16:30\"),\n    (\"10:00\", \"10:30\"), (\"11:30\", \"13:00\"),\n    (\"14:00\", \"14:30\"), (\"15:00\", \"15:30\"),\n    (\"16:30\", \"17:00\"), (\"09:00\", \"09:30\"),\n    (\"10:30\", \"12:00\"), (\"16:00\", \"16:30\")\n]\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = \"09:00\"\nwork_end = \"17:00\"\npreferred_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time(frank_schedule, judy_schedule, meeting_duration, work_start, work_end, preferred_days)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_726"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and constraints\nwork_hours = (9, 17)  # 9:00 to 17:00\nmeeting_duration = 30  # minutes\n\n# Define existing schedules\ngeorge_schedule = {\n    'Monday': [(9, 30, 10, 0), (10, 30, 11, 0)],\n    'Tuesday': [(9, 0, 10, 0), (13, 0, 14, 0), (15, 0, 15, 30)],\n    'Wednesday': [(10, 0, 11, 0), (12, 0, 12, 30), (14, 30, 15, 0), (16, 0, 16, 30)]\n}\n\njose_schedule = {\n    'Monday': [(9, 0, 10, 30), (11, 0, 12, 30), (13, 0, 13, 30), (14, 30, 15, 0), (16, 0, 17, 0)],\n    'Tuesday': [(9, 0, 10, 0), (11, 0, 12, 0), (12, 30, 13, 0), (15, 0, 15, 30), (16, 30, 17, 0)],\n    'Wednesday': [(10, 0, 11, 0), (12, 30, 14, 0), (14, 30, 15, 0), (15, 30, 17, 0)]\n}\n\n# Define the days to check\ndays_to_check = ['Tuesday', 'Wednesday']\n\n# Create function to get free time slots\ndef get_free_time_slots(schedule, day):\n    busy_slots = schedule[day]\n    free_slots = []\n    start_time = work_hours[0]\n    end_time = work_hours[1]\n\n    # Create a list of minutes for the work day\n    minutes = []\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, 30):  # Every 30 minutes\n            minutes.append((hour, minute))\n\n    # Mark busy times\n    for (start_hour, start_minute, end_hour, end_minute) in busy_slots:\n        start = (start_hour, start_minute)\n        end = (end_hour, end_minute)\n        for time in minutes:\n            if start <= time < end:\n                minutes.remove(time)\n\n    # Now minutes is the list of free slots\n    for i in range(len(minutes) - 1):\n        if (minutes[i + 1][0] == minutes[i][0] and\n                minutes[i + 1][1] - minutes[i][1] == meeting_duration):\n            free_slots.append(minutes[i])\n\n    return free_slots\n\n# Check each day and find a suitable slot\nfor day in days_to_check:\n    george_free_slots = get_free_time_slots(george_schedule, day)\n    jose_free_slots = get_free_time_slots(jose_schedule, day)\n\n    # Find common free slots for both participants\n    common_slots = set(george_free_slots).intersection(set(jose_free_slots))\n    if common_slots:\n        # Get the first available slot\n        proposed_time = common_slots.pop()\n        print(f\"{proposed_time[0]:02d}:{proposed_time[1]:02d}:{proposed_time[0]:02d}:{proposed_time[1] + meeting_duration:02d}\")\n        break\n```",
            "count": "calendar_scheduling_example_727"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define working hours\n    working_hours = {\n        'Monday': [(9, 17)],\n        'Tuesday': [(9, 17)],\n        'Wednesday': [(9, 17)]\n    }\n    \n    # Define busy schedules\n    schedules = {\n        'Abigail': {\n            'Monday': [(9, 10), (11, 12), (12.5, 13), (14.5, 15)],\n            'Tuesday': [(12.5, 13)],\n            'Wednesday': [(14, 14.5)]\n        },\n        'Albert': {\n            'Monday': [(9, 9.5), (10, 11), (12, 14.5), (15, 15.5), (16.5, 17)],\n            'Tuesday': [(10.5, 12), (12.5, 13), (14, 15), (16.5, 17)],\n            'Wednesday': [(9.5, 10.5), (12, 13.5), (14.5, 15.5)]\n        }\n    }\n    \n    # Meeting duration\n    meeting_duration = 0.5  # 30 minutes\n\n    # Find a suitable time respecting preferences\n    for day in ['Tuesday', 'Wednesday']:  # Preferred days\n        available_slots = []\n        \n        # Determine busy times and available slots for the day\n        busy_times = []\n        for name in schedules:\n            busy_times.extend(schedules[name].get(day, []))\n        \n        # Sort busy times\n        busy_times.sort()\n        \n        # Generate available slots\n        last_end = working_hours[day][0][0]\n        for start, end in busy_times:\n            if last_end + meeting_duration <= start:\n                available_slots.append((last_end, start))\n            last_end = max(last_end, end)\n        \n        if last_end < working_hours[day][0][1]:\n            available_slots.append((last_end, working_hours[day][0][1]))\n        \n        # Find the first available slot that can accommodate the meeting\n        for start, end in available_slots:\n            if (end - start) >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{int(meeting_start)}:{int((meeting_start % 1) * 60):02d}:{int(meeting_end)}:{int((meeting_end % 1) * 60):02d}\"\n\n# Call the function to find the meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_728"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(heather_schedule, dennis_schedule, meeting_duration, work_hours):\n    # Set the work hours\n    work_start, work_end = work_hours\n    \n    # Convert time to datetime objects for comparison\n    work_start_dt = datetime.strptime(work_start, '%H:%M')\n    work_end_dt = datetime.strptime(work_end, '%H:%M')\n    \n    # Define free times for Heather and Dennis\n    heather_free_times = [(work_start_dt, work_end_dt)]\n    dennis_free_times = []\n    \n    # Populate Dennis's free times\n    dennis_busy_times = []\n    for busy in dennis_schedule:\n        start, end = busy\n        dennis_busy_times.append((datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')))\n    \n    # Create free times based on busy times\n    last_end = work_start_dt\n    for start, end in sorted(dennis_busy_times):\n        if last_end < start:\n            dennis_free_times.append((last_end, start))\n        last_end = max(last_end, end)\n    if last_end < work_end_dt:\n        dennis_free_times.append((last_end, work_end_dt))\n    \n    # Find common free times for Heather and Dennis\n    common_free_times = []\n    for h_start, h_end in heather_free_times:\n        for d_start, d_end in dennis_free_times:\n            start_max = max(h_start, d_start)\n            end_min = min(h_end, d_end)\n            if start_max < end_min:  # There's an overlap\n                common_free_times.append((start_max, end_min))\n    \n    # Check for meeting duration in common free times\n    for start, end in common_free_times:\n        if (end - start) >= meeting_duration:\n            proposed_end = start + meeting_duration\n            return f\"{start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Define the participants' schedules\nheather_schedule = []\ndennis_schedule = [\n    ('09:00', '17:00'),\n    ('09:00', '11:30'),\n    ('13:00', '13:30'),\n    ('14:00', '15:30'),\n    ('16:00', '17:00'),\n    ('09:00', '09:30'),\n    ('10:00', '17:00')\n]\n\n# Define meeting duration and work hours\nmeeting_duration = timedelta(hours=1)\nwork_hours = ('09:00', '17:00')\n\n# Execute the function\nmeeting_time = find_meeting_time(heather_schedule, dennis_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_729"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\ngrace_schedule = {\n    \"Monday\": [(9, 30)],\n    \"Wednesday\": [(16, 30)]\n}\n\ndennis_schedule = {\n    \"Monday\": [(9, 11), (11, 12), (12, 13), (13, 15), (16, 17)],\n    \"Tuesday\": [(9, 10.5), (11, 11.5), (12, 14), (14.5, 16)],\n    \"Wednesday\": [(9, 10), (10.5, 12.5), (14, 16), (16.5, 17)]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find available time\ndef find_available_time(grace_schedule, dennis_schedule, duration, days):\n    for day in days:\n        # Grace's schedule\n        grace_busy_times = grace_schedule.get(day, [])\n        # Dennis's schedule\n        dennis_busy_times = dennis_schedule.get(day, [])\n        \n        # Combine busy times\n        busy_times = grace_busy_times + dennis_busy_times\n        busy_times.sort()\n        \n        # Initialize the start of the working hours\n        start_of_workday = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_of_workday = datetime.strptime(\"17:00\", \"%H:%M\")\n\n        # Check for available time slots\n        current_time = start_of_workday \n        for start, end in busy_times:\n            start_busy = datetime.strptime(f\"{day} {start}:00\", \"%A %H:%M:%S\")\n            end_busy = datetime.strptime(f\"{day} {end}:00\", \"%A %H:%M:%S\")\n\n            # Check if there is time before the busy slot\n            if current_time + duration <= start_busy:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + duration).strftime('%H:%M')}\"\n\n            # Move current time past the busy slot\n            current_time = max(current_time, end_busy)\n        \n        # Finally check the time after the last busy slot until the end of the workday\n        if current_time + duration <= end_of_workday:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + duration).strftime('%H:%M')}\"\n\n# Define the days we will check for meeting\navailable_days = [\"Monday\", \"Tuesday\"]\n\n# Find available time for the meeting\navailable_time_slot = find_available_time(grace_schedule, dennis_schedule, meeting_duration, available_days)\nprint(available_time_slot)\n```",
            "count": "calendar_scheduling_example_730"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define Randy's schedule\nrandy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find the first available slot for a meeting\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Start checking from the work start time\n        start_time = work_start\n        day_schedule = randy_schedule[day]\n        day_schedule.sort()  # Sort the schedule by start time\n        \n        # Check against the scheduled times\n        for start, end in day_schedule:\n            # If there's available time before the next scheduled meeting\n            if start_time < start:\n                if start_time + meeting_duration <= start:  # Check if the meeting can fit\n                    return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n            # Move start_time to the end of the booked slot\n            start_time = max(start_time, end)\n        \n        # Check if there is available space after the last scheduled meeting till work end\n        if start_time + meeting_duration <= work_end:\n            return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n    \n    return None  # In case there's no available time, but in this case, there should be\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_731"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nchristine_schedule = {\n    'Monday': [(15, 0, 15, 30), (16, 0, 16, 30)],\n    'Tuesday': [(9, 30, 10, 0)],\n    'Wednesday': [(12, 0, 12, 30), (13, 30, 14, 0), (15, 30, 16, 0)],\n}\n\njose_schedule = {\n    'Monday': [(9, 0, 10, 30), (11, 0, 11, 30), (12, 30, 14, 30), (15, 0, 17, 0)],\n    'Tuesday': [(9, 30, 13, 30), (14, 0, 16, 0), (16, 30, 17, 0)],\n    'Wednesday': [(10, 0, 10, 30), (11, 0, 13, 30), (14, 0, 14, 30), (15, 0, 15, 30), (16, 30, 17, 0)],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find earliest available time\ndef find_earliest_meeting_time(christine_schedule, jose_schedule, meeting_duration):\n    work_hours_start = datetime.strptime('09:00', '%H:%M')\n    work_hours_end = datetime.strptime('17:00', '%H:%M')\n\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        busy_times = []\n        \n        # Combine busy times of both participants\n        busy_times.extend(christine_schedule.get(day, []))\n        busy_times.extend(jose_schedule.get(day, []))\n\n        # Convert busy times to datetime\n        busy_slots = []\n        for start_h, start_m, end_h, end_m in busy_times:\n            busy_slots.append((datetime(day + ' 09:00', '%A %H:%M') + timedelta(hours=start_h, minutes=start_m),\n                                datetime(day + ' 09:00', '%A %H:%M') + timedelta(hours=end_h, minutes=end_m)))\n\n        busy_slots.sort()\n\n        # Check for free slots\n        current_time = work_hours_start\n        for start, end in busy_slots:\n            # Check for free time before the busy slot\n            if current_time + meeting_duration <= start:\n                return f'{current_time.strftime(\"%H:%M\")}:{(current_time + meeting_duration).strftime(\"%H:%M\")}'\n            current_time = max(current_time, end)\n\n        # Check for remaining time after the last busy slot\n        if current_time + meeting_duration <= work_hours_end:\n            return f'{current_time.strftime(\"%H:%M\")}:{(current_time + meeting_duration).strftime(\"%H:%M\")}'\n\n    return None\n\n# Finding the earliest meeting time\nearliest_meeting = find_earliest_meeting_time(christine_schedule, jose_schedule, meeting_duration)\nprint(earliest_meeting)\n```",
            "count": "calendar_scheduling_example_732"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and days\nwork_hours = (9, 17)  # 9 AM to 5 PM\navailable_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n# Define existing schedules for George and Carl\ngeorge_schedule = {\n    \"Monday\": [(10, 30), (12, 0), (13, 30), (15, 0)],\n    \"Tuesday\": [(10, 30), (13, 30)],\n    \"Wednesday\": [(9, 30), (10, 0), (13, 30), (15, 30)]\n}\ncarl_schedule = {\n    \"Monday\": [(10, 30), (11, 30), (13, 0), (16, 30)],\n    \"Tuesday\": [(9, 30), (10, 30), (11, 0), (13, 30), (15, 30)],\n    \"Wednesday\": [(9, 30), (11, 0), (14, 0), (16, 30)]\n}\n\n# Set the constraints\ngeorge_constraints = {\n    \"Monday\": [(12, 30)],  # Not available after 12:30 PM on Monday\n    \"Tuesday\": [],\n    \"Wednesday\": []\n}\ncarl_constraints = {\n    \"Monday\": [],\n    \"Tuesday\": [],  # Avoid more meetings on Tuesday\n    \"Wednesday\": []\n}\n\nmeeting_duration = 30  # Meeting duration in minutes\n\ndef find_meeting_time():\n    for day in available_days:\n        # Combine schedules and constraints\n        blocked_times = george_schedule.get(day, []) + carl_schedule.get(day, [])\n        blocked_times += george_constraints.get(day, []) + carl_constraints.get(day, [])\n\n        # Add working hours at the beginning and end\n        blocked_times.append((work_hours[0], 0))  # Start of work hours\n        blocked_times.append((work_hours[1], 0))  # End of work hours\n        \n        # Normalize blocked times and merge overlaps\n        blocked_times = sorted(blocked_times)\n        merged_times = []\n        \n        for start, end in blocked_times:\n            if not merged_times or merged_times[-1][1] < start:\n                merged_times.append([start, end])\n            else:\n                merged_times[-1][1] = max(merged_times[-1][1], end)\n\n        # Find available slots\n        for i in range(len(merged_times) - 1):\n            start_free = merged_times[i][1]\n            end_free = merged_times[i + 1][0]\n            \n            # Check if the gap is sufficient for a meeting\n            if end_free - start_free >= meeting_duration:\n                return f\"{start_free:02d}:00:{start_free + meeting_duration // 60:02d}:{meeting_duration % 60:02d}\"\n\n    return \"No available meeting time found\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_733"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules as busy time intervals\nnancy_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    # Tuesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    # Wednesday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ntyler_schedule = [\n    # Monday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    # Tuesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    # Wednesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if a proposed time slot is free for both participants\ndef is_time_slot_free(start, end):\n    for busy_start, busy_end in nancy_schedule + tyler_schedule:\n        if (start < busy_end and end > busy_start):  # Overlap condition\n            return False\n    return True\n\n# Search for a free time slot on Monday, Tuesday, and Wednesday\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        meeting_end_time = current_time + meeting_duration\n        if is_time_slot_free(current_time, meeting_end_time):\n            # Skip Tuesday due to Tyler's preference\n            if day == \"Tuesday\":\n                current_time += timedelta(minutes=30)  # Increment by 30 mins\n                continue\n            print(f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\")\n            break\n        current_time += timedelta(minutes=30)  # Increment by 30 mins\n```\n",
            "count": "calendar_scheduling_example_734"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ronald_schedule, amber_schedule, meeting_duration, work_hours):\n    # Convert time strings to datetime objects\n    def time_to_datetime(time_str):\n        return datetime.strptime(time_str, '%H:%M')\n\n    # Create a list of all possible time slots within work hours\n    start_time = time_to_datetime(work_hours[0])\n    end_time = time_to_datetime(work_hours[1])\n    \n    possible_slots = []\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        possible_slots.append(current_time)\n        current_time += timedelta(minutes=1)  # Increment by minute for checking\n\n    # Check each slot for availability\n    for slot in possible_slots:\n        slot_end = slot + meeting_duration\n\n        # Check if Ronald is free\n        ronald_free = all(not (slot < r_start < slot_end or slot < r_end < slot_end) \n                          for (r_start, r_end) in ronald_schedule)\n\n        # Check if Amber is free\n        amber_free = all(not (slot < a_start < slot_end or slot < a_end < slot_end) \n                         for (a_start, a_end) in amber_schedule)\n\n        if ronald_free and amber_free:\n            return f\"{slot.strftime('%H:%M')}:{(slot + meeting_duration).strftime('%H:%M')}\"\n\n# Define the schedules and constraints\nronald_schedule = [\n    (time_to_datetime(\"10:30\"), time_to_datetime(\"11:00\")),\n    (time_to_datetime(\"12:00\"), time_to_datetime(\"12:30\")),\n    (time_to_datetime(\"15:30\"), time_to_datetime(\"16:00\")),\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"12:00\"), time_to_datetime(\"12:30\")),\n    (time_to_datetime(\"15:30\"), time_to_datetime(\"16:30\")),\n    (time_to_datetime(\"09:30\"), time_to_datetime(\"10:30\")),\n    (time_to_datetime(\"11:00\"), time_to_datetime(\"12:00\")),\n    (time_to_datetime(\"12:30\"), time_to_datetime(\"13:00\")),\n    (time_to_datetime(\"13:30\"), time_to_datetime(\"14:00\")),\n    (time_to_datetime(\"16:30\"), time_to_datetime(\"17:00\")),\n]\n\namber_schedule = [\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"10:00\"), time_to_datetime(\"10:30\")),\n    (time_to_datetime(\"11:30\"), time_to_datetime(\"12:00\")),\n    (time_to_datetime(\"12:30\"), time_to_datetime(\"14:00\")),\n    (time_to_datetime(\"14:30\"), time_to_datetime(\"15:00\")),\n    (time_to_datetime(\"15:30\"), time_to_datetime(\"17:00\")),\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"10:00\"), time_to_datetime(\"11:30\")),\n    (time_to_datetime(\"12:00\"), time_to_datetime(\"12:30\")),\n    (time_to_datetime(\"13:30\"), time_to_datetime(\"15:30\")),\n    (time_to_datetime(\"16:30\"), time_to_datetime(\"17:00\")),\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"10:00\"), time_to_datetime(\"10:30\")),\n    (time_to_datetime(\"11:00\"), time_to_datetime(\"13:30\")),\n    (time_to_datetime(\"15:00\"), time_to_datetime(\"15:30\")),\n]\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours = [\"09:00\", \"17:00\"]\n\n# Find the meeting time\nmeeting_time = find_meeting_time(ronald_schedule, amber_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_735"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nwayne_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\njanet_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours and the days\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time(wayne_schedule, janet_schedule):\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            clash = False\n            \n            # Check Wayne's availability\n            for start, end in wayne_schedule:\n                if start <= current_time < end or start < current_time + meeting_duration <= end:\n                    clash = True\n                    break\n            \n            # Check Janet's availability\n            for start, end in janet_schedule:\n                if start <= current_time < end or start < current_time + meeting_duration <= end:\n                    clash = True\n                    break\n\n            if not clash:  # If no clash, we found a suitable time\n                return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n            \n            current_time += timedelta(minutes=30)  # Check the next half-hour slot\n    return None\n\n# Retrieve a proposed time for the meeting\nmeeting_time_start, meeting_time_end = find_meeting_time(wayne_schedule, janet_schedule)\n\n# Output the result in the specified format\nif meeting_time_start and meeting_time_end:\n    print(f\"{meeting_time_start}:{meeting_time_end}\")\n```\n",
            "count": "calendar_scheduling_example_736"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to generate available meeting slots\ndef find_meeting_time(participant_availability, meeting_duration, restrictions):\n    # Prepare to check for time slots\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    meeting_slots = []\n\n    for day in days:\n        if day in participant_availability:\n            # Get the range of working hours\n            work_start = datetime.strptime(\"09:00\", \"%H:%M\").time()\n            work_end = datetime.strptime(\"17:00\", \"%H:%M\").time()\n            current_time = datetime.combine(datetime.today(), work_start)\n\n            # Generate time intervals for checking\n            while current_time.time() < work_end:\n                meeting_start = current_time.time()\n                meeting_end = (datetime.combine(datetime.today(), meeting_start) + timedelta(minutes=meeting_duration)).time()\n\n                # Check if within the range and there are no restrictions\n                if (meeting_end <= work_end and\n                    all(not (meeting_start >= busy_start and meeting_end <= busy_end) for busy_start, busy_end in participant_availability[day]) and\n                    (day != 'Monday' or restrictions['Lisa']['Monday']) and\n                    (day != 'Wednesday' or restrictions['Lisa']['Wednesday'] and meeting_start >= datetime.strptime(\"13:30\", \"%H:%M\").time())):\n                    meeting_slots.append(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n\n                # Increment the time by 30 minutes\n                current_time += timedelta(minutes=30)\n\n    return meeting_slots\n\n# Existing schedules for each participant\nparticipant_availability = {\n    'Monday': [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"10:00\", \"%H:%M\").time()),\n               (datetime.strptime(\"10:30\", \"%H:%M\").time(), datetime.strptime(\"11:00\", \"%H:%M\").time()),\n               (datetime.strptime(\"12:00\", \"%H:%M\").time(), datetime.strptime(\"12:30\", \"%H:%M\").time()),\n               (datetime.strptime(\"13:00\", \"%H:%M\").time(), datetime.strptime(\"14:30\", \"%H:%M\").time()),\n               (datetime.strptime(\"16:30\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    'Tuesday': [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"10:00\", \"%H:%M\").time()),\n                (datetime.strptime(\"12:30\", \"%H:%M\").time(), datetime.strptime(\"13:30\", \"%H:%M\").time()),\n                (datetime.strptime(\"14:30\", \"%H:%M\").time(), datetime.strptime(\"16:00\", \"%H:%M\").time()),\n                (datetime.strptime(\"16:30\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    'Wednesday': [(datetime.strptime(\"10:30\", \"%H:%M\").time(), datetime.strptime(\"11:00\", \"%H:%M\").time()),\n                  (datetime.strptime(\"11:30\", \"%H:%M\").time(), datetime.strptime(\"12:30\", \"%H:%M\").time()),\n                  (datetime.strptime(\"14:30\", \"%H:%M\").time(), datetime.strptime(\"15:30\", \"%H:%M\").time()),\n                  (datetime.strptime(\"16:00\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n}\n# Restrictions\nrestrictions = {\n    'Lisa': {\n        'Monday': False,\n        'Wednesday': True,\n    },\n    'Jerry': {\n        'Monday': True,\n        'Wednesday': True,\n    },\n}\n\n# Find a suitable meeting time\nmeeting_duration = 30  # 30 minutes\navailable_slots = find_meeting_time(participant_availability, meeting_duration, restrictions)\nprint(available_slots)\n```",
            "count": "calendar_scheduling_example_737"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nsara_schedule = {\n    \"Monday\": [(9, 10), (11, 11.5), (13, 14.5), (15.5, 16)],\n    \"Tuesday\": [(9.5, 10), (10.5, 11), (11.5, 12), (14, 14.5), (16, 16.5)],\n    \"Wednesday\": [(9.5, 10), (12, 12.5), (14, 14.5), (15.5, 17)]\n}\n\npamela_schedule = {\n    \"Monday\": [(9, 13), (14.5, 15.5), (16.5, 17)],\n    \"Tuesday\": [(9, 9.5), (10, 10.5), (11.5, 13), (13.5, 14), (16, 16.5)],\n    \"Wednesday\": [(9, 11), (12, 14), (16, 17)]\n}\n\n# Meeting constraints\nmeeting_duration = 0.5  # Duration in hours\navailable_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\navoid_days_for_sara = [\"Wednesday\"]\navoid_days_for_pamela = [\"Monday\", \"Tuesday\"]\n\n# Function to check if a time slot is free for both participants\ndef is_slot_available(start, end):\n    for day in available_days:\n        for start1, end1 in sara_schedule[day]:\n            if start < end1 and end > start1:  # Check collision\n                return False\n        for start2, end2 in pamela_schedule[day]:\n            if start < end2 and end > start2:  # Check collision\n                return False\n    return True\n\n# Generate suitable time slot\nfor day in available_days:\n    if day in avoid_days_for_sara and day == \"Wednesday\":\n        continue\n    if day in avoid_days_for_pamela and (day == \"Monday\" or day == \"Tuesday\"):\n        continue\n    \n    # Check time slots in the day\n    working_hours = [(9, 17)]  # Define work hours\n    for start_hour in range(9, 17):\n        start = start_hour\n        end = start + meeting_duration\n        if end > 17:  # Ensure end time is within working hours\n            break\n        while end <= 17:\n            if is_slot_available(start, end):\n                print(f\"{int(start):02d}:{int((start % 1) * 60):02d}:{int(end):02d}:{int((end % 1) * 60):02d}\")\n                exit()  # Stop after finding one suitable time slot\n            start += 0.5\n            end = start + meeting_duration\n```",
            "count": "calendar_scheduling_example_738"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the participants' schedules and constraints\njordan_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n]\n\nbobby_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Bans\nbans_bobby = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nbans_jordan = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n]\n\n# Combine schedules with bans\ndef is_time_available(start, end):\n    for busy_start, busy_end in jordan_schedule + bobby_schedule + bans_jordan + bans_bobby:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Attempt to find a suitable meeting time\nfor day in ['Monday', 'Tuesday', 'Wednesday']:\n    for hour in range(9, 17):\n        start_time = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if start_time >= work_start and end_time <= work_end and is_time_available(start_time, end_time):\n            if not (day == 'Tuesday' or (day == 'Monday' and bobby_schedule)):\n                print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_739"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the blocked times for Willie and Dorothy\nwillie_schedule = {\n    \"Monday\": [(datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\"))]\n}\n\ndorothy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [(work_start, work_end)],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), work_end),\n    ]\n}\n\n# Function to find available time for a meeting\ndef find_meeting_time():\n    for day in [\"Tuesday\", \"Wednesday\"]:  # Start from Tuesday to accommodate Dorothy's preference\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            end_time = current_time + meeting_duration\n            is_free = True\n            \n            # Check Willie\u2019s schedule\n            willie_busy_times = willie_schedule.get(day, [])\n            for start, end in willie_busy_times:\n                if (current_time < end) and (start < end_time):\n                    is_free = False\n                    break\n            \n            # Check Dorothy\u2019s schedule\n            dorothy_busy_times = dorothy_schedule.get(day, [])\n            for start, end in dorothy_busy_times:\n                if (current_time < end) and (start < end_time):\n                    is_free = False\n                    break\n            \n            if is_free:\n                return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Get a proposed meeting time\nproposed_meeting_time = find_meeting_time()\nprint(proposed_meeting_time)\n```",
            "count": "calendar_scheduling_example_740"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy schedules for Donna and Cynthia (as lists of tuples with start and end times)\ndonna_busy = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\ncynthia_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Preferences\ndonna_preference = 'Tuesday'  # Would rather not meet on Tuesday\ncynthia_preference = 'Monday'   # Would not want to meet on Monday\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available slots\ndef find_available_slot(day):\n    # Initialize start of the workday\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        # Check if the current time is free for both Donna and Cynthia\n        slot_start = current_time\n        slot_end = current_time + meeting_duration\n        \n        # Check if Donna is available\n        donna_free = not any(start < slot_end and end > slot_start for start, end in donna_busy)\n        # Check if Cynthia is available\n        cynthia_free = not any(start < slot_end and end > slot_start for start, end in cynthia_busy)\n\n        if donna_free and cynthia_free:\n            return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    return None\n\n# Check availability on preferred days\nif cynthia_preference == 'Monday':\n    cynthia_preference = None # Exclude Monday\nif donna_preference == 'Tuesday':\n    donna_preference = None # Exclude Tuesday\n\n# Check availability on Wednesday as the only preferred option\nproposed_time = find_available_slot('Wednesday')\n\n# Output the proposed time if found\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_741"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_hours = [(9, 0), (17, 0)]\n\n# Define busy times for Philip and Randy\nphilip_schedule = [\n    (9, 0, 9, 30), (12, 0, 12, 30), (13, 0, 14, 0), \n    (15, 0, 15, 30), (16, 0, 16, 30),\n    # Tuesday\n    (11, 30, 13, 0), (14, 0, 15, 0),\n    # Wednesday\n    (9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 11, 30), \n    (12, 30, 13, 0), (14, 0, 14, 30), (15, 0, 15, 30), \n    (16, 0, 16, 30)\n]\n\nrandy_schedule = [\n    # Monday\n    (9, 0, 14, 0), (14, 30, 17, 0),\n    # Tuesday\n    (9, 0, 14, 0), (14, 30, 17, 0),\n    # Wednesday\n    (10, 0, 17, 0)\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest time to schedule the meeting\ndef find_meeting_time():\n    for day in range(3):  # 0 for Monday, 1 for Tuesday, 2 for Wednesday\n        start_hour, start_minute = work_hours[0]\n        end_hour, end_minute = work_hours[1]\n\n        # Create a list of busy times for the specific day\n        busy_times = []\n\n        if day == 0:  # Monday\n            busy_times = philip_schedule[:5] + randy_schedule[:2]\n        elif day == 1:  # Tuesday\n            busy_times = philip_schedule[5:7] + randy_schedule[2:4]\n        elif day == 2:  # Wednesday\n            busy_times = philip_schedule[7:] + randy_schedule[4:]\n\n        # Check for free slots\n        busy_times = [(datetime(2023, 10, 1 + day, start, minute), datetime(2023, 10, 1 + day, end, minute)) for start, minute, end, minute in busy_times]\n        busy_times.sort()\n\n        current_start = datetime(2023, 10, 1 + day, start_hour, start_minute)\n\n        for busy_start, busy_end in busy_times:\n            # Check available time before the next busy slot\n            if busy_start >= current_start + meeting_duration:\n                return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n            current_start = max(current_start, busy_end)\n\n        # Check if there's time after the last busy slot\n        end_of_day = datetime(2023, 10, 1 + day, end_hour, end_minute)\n        if end_of_day >= current_start + meeting_duration:\n            return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None  # If no time is found, although the task guarantees there is one\n\n# Find the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_742"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=1)\n\n    # Define the busy schedules\n    timothy_busy = [\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    ]\n    \n    paul_busy = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n\n    # Merge and handle overlapping busy times\n    busy_times = timothy_busy + paul_busy\n\n    # Simplify busy times (merge overlaps)\n    busy_times.sort()\n    merged_busy_times = []\n    for start, end in busy_times:\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\n            merged_busy_times.append((start, end))\n        else:\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n    # Find a meeting slot\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (start < end_time and current_time < end) for start, end in merged_busy_times):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return \"No available slot found\"\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_743"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the existing schedules\nanthony_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n}\n\ngerald_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef find_meeting_time(anthony_schedule, gerald_schedule, days):\n    for day in days:\n        anthony_busy_times = anthony_schedule[day]\n        gerald_busy_times = gerald_schedule[day]\n\n        busy_times = anthony_busy_times + gerald_busy_times\n        busy_times.sort()\n\n        current_time = work_hours_start\n        \n        for start, end in busy_times:\n            while current_time + meeting_duration <= start:\n                if current_time >= work_hours_start and current_time + meeting_duration <= work_hours_end:\n                    return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n                current_time += timedelta(minutes=30)\n            current_time = max(current_time, end)\n\n        if current_time + meeting_duration <= work_hours_end:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n    return None\n\n# Monday, Tuesday, or Wednesday\navailable_days = [\"Monday\", \"Wednesday\"]\nmeeting_time = find_meeting_time(anthony_schedule, gerald_schedule, available_days)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_744"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nmatthew_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n}\n\nrandy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Find suitable time slot\ndef find_meeting_time():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    for day in days:\n        if day == \"Monday\":\n            continue  # Randy cannot meet on Monday\n        if day == \"Wednesday\":\n            # Skip Wednesday as Matthew prefers not to meet then\n            continue\n        \n        # Initialize available slots for the day\n        available_slots = []\n        current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n        \n        # Create a list of busy times\n        busy_times = sorted(matthew_schedule[day] + randy_schedule[day])\n        \n        # Build available slots\n        last_end_time = current_time\n        \n        for start, end in busy_times:\n            if last_end_time + meeting_duration <= start:\n                available_slots.append((last_end_time, start))\n            last_end_time = max(last_end_time, end)\n\n        if last_end_time + meeting_duration <= end_time:\n            available_slots.append((last_end_time, end_time))\n            \n        # Check for the first available meeting time\n        for start, end in available_slots:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_745"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participant preferences\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define Jeffrey's existing schedule for Monday, Tuesday, and Wednesday\njeffrey_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Function to find the earliest available slot on a given day\ndef find_earliest_slot(day):\n    blocked_times = jeffrey_schedule[day]\n    current_time = work_hours_start\n\n    while current_time + meeting_duration <= work_hours_end:\n        available = True\n\n        for start, end in blocked_times:\n            if current_time < end and current_time + meeting_duration > start:\n                available = False\n                break\n\n        if available:\n            return current_time\n        \n        current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n\n    return None\n\n# Checking for available slots on Tuesday and Wednesday\nearliest_meeting_time = None\nfor day in [\"Tuesday\", \"Wednesday\"]:\n    slot = find_earliest_slot(day)\n    if slot and (earliest_meeting_time is None or slot < earliest_meeting_time):\n        earliest_meeting_time = slot\n\n# Output the proposed meeting time\nif earliest_meeting_time:\n    meeting_start = earliest_meeting_time.strftime(\"%H:%M\")\n    meeting_end = (earliest_meeting_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{{{meeting_start}:{meeting_end}}}\")\n```",
            "count": "calendar_scheduling_example_746"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Define schedules for participants\nmegan_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n]\njacqueline_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find the earliest available time\ndef find_earliest_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Get Jacqueline's availability for the day\n        busy_times = jacqueline_schedule[day]\n        busy_intervals = []\n\n        # Adding Megan's busy times to Jacqueline's busy intervals\n        busy_intervals.extend(megan_schedule)\n        busy_intervals.extend(busy_times)\n\n        # Sort all busy intervals\n        busy_intervals.sort()\n\n        # Check for available time slots\n        current_time = working_hours[0]\n        while current_time + meeting_duration <= working_hours[1]:\n            # Check if current_time is busy\n            is_busy = False\n            for start, end in busy_intervals:\n                if start <= current_time < end or start < current_time + meeting_duration <= end:\n                    is_busy = True\n                    break\n            if not is_busy:\n                return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n            current_time += timedelta(minutes=30)  # Increment to next possible time slot\n\n# Get the proposed time\nstart_time, end_time = find_earliest_meeting_time()\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_747"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:12:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define schedules\nrobert_schedule = {\n    \"Monday\": [(10, 0, 11, 0), (11, 30, 12, 0), (14, 30, 16, 0)],\n    \"Tuesday\": [(9, 0, 9, 30), (10, 0, 13, 0), (13, 30, 14, 30), (15, 0, 16, 0), (16, 30, 17, 0)],\n    \"Wednesday\": [(10, 30, 11, 0), (12, 0, 12, 30), (13, 30, 14, 0), (15, 0, 15, 30)],\n}\n\nbruce_schedule = {\n    \"Monday\": [(11, 0, 11, 30), (12, 0, 12, 30), (13, 0, 14, 0), (14, 30, 15, 30), (16, 0, 16, 30)],\n    \"Tuesday\": [(9, 0, 10, 30), (11, 0, 12, 30), (13, 0, 14, 0), (14, 30, 15, 0), (16, 0, 17, 0)],\n    \"Wednesday\": [(9, 0, 10, 30), (12, 0, 12, 30), (13, 0, 13, 30), (15, 0, 16, 0), (16, 30, 17, 0)],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find free time slot\ndef find_free_time(schedule, start_time, end_time):\n    free_times = []\n    current_time = start_time\n\n    while current_time < end_time:\n        busy = False\n        for start, end in schedule:\n            busy_start = datetime(current_time.year, current_time.month, current_time.day, start, 0)\n            busy_end = datetime(current_time.year, current_time.month, current_time.day, end, 0)\n            if busy_start <= current_time < busy_end:\n                busy = True\n                current_time = busy_end\n                break\n        if not busy:\n            free_end_time = current_time + meeting_duration\n            if free_end_time <= end_time:\n                free_times.append((current_time, free_end_time))\n                current_time = free_end_time\n            else:\n                break\n    return free_times\n\n# Check for scheduling options\nwork_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\nstart_work_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_work_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Variable to hold the proposed time\nproposed_time = None\n\nfor day in work_days:\n    robert_free_times = find_free_time(robert_schedule[day], start_work_time, end_work_time)\n    bruce_free_times = find_free_time(bruce_schedule[day], start_work_time, end_work_time)\n\n    # Looking for conflicting free time slots\n    for robert_time in robert_free_times:\n        for bruce_time in bruce_free_times:\n            if (robert_time[0] < bruce_time[1]) and (bruce_time[0] < robert_time[1]):\n                proposed_time = robert_time[0]\n                proposed_time_str = proposed_time.strftime(\"%H:%M\")\n                break\n        if proposed_time:\n            break\n    if proposed_time:\n        break\n\n# Output the proposed time in the desired format\nif proposed_time:\n    print(f\"{{{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}}}\")\n```",
            "count": "calendar_scheduling_example_748"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define Anthony's schedule as tuples of (start, end)\nanthony_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to check for free time slots\ndef find_meeting_time():\n    # Check Tuesday slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if all(not (start < current_time + meeting_duration and end > current_time) for start, end in anthony_schedule if (start.date() == current_time.date())):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n    # Check Wednesday slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if all(not (start < current_time + meeting_duration and end > current_time) for start, end in anthony_schedule if (start.date() == current_time.date())):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_749"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find available meeting time\ndef find_meeting_time():\n    # Define the participants' busy schedules\n    timothy_busy = [\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Tuesday\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Wednesday\n    ]\n\n    mark_busy = [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),    # Monday\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),   # Monday\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),   # Monday\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),   # Monday\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),    # Tuesday\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),    # Tuesday\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),    # Tuesday\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),    # Wednesday\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),    # Wednesday\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),    # Wednesday\n    ]\n\n    # Define work hours and meeting duration\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Meeting preferences\n    timothy_preference = (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))  # Tuesday\n    mark_preference = (work_hours_start, work_hours_end)  # No specific time\n\n    # Combine the busy schedules\n    busy_times = timothy_busy + mark_busy\n\n    # Check for available time slots\n    for day in range(3):  # 0 = Monday, 1 = Tuesday, 2 = Wednesday\n        for start in range(0, 8 * 60):  # every 30 minutes block during work hours\n            start_time = work_hours_start + timedelta(minutes=start)\n            end_time = start_time + meeting_duration\n            \n            if end_time > work_hours_end:\n                break\n            \n            # Check for busy times, skip if any participant is busy\n            is_busy = False\n            for busy_start, busy_end in busy_times:\n                if (start_time < busy_end and end_time > busy_start):  # Overlap\n                    is_busy = True\n                    break\n            \n            # Check Timothy's preference on Tuesday\n            if day == 1 and start_time < timothy_preference[0]:\n                is_busy = True\n            \n            if not is_busy:\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\n# Find and print the meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_750"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours = (9, 17)  # 9:00 to 17:00\nmeeting_duration = timedelta(minutes=30)\n\n# Define busy times for Edward and Charlotte\nedward_busy_times = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")) \n]\n\ncharlotte_busy_times = [\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\n# Function to check if two times overlap\ndef times_overlap(start1, end1, start2, end2):\n    return start1 < end2 and start2 < end1\n\n# Function to find the next available time slot\ndef find_meeting_time():\n    current_date = datetime.now()\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        day_offset = ([\"Monday\", \"Tuesday\", \"Wednesday\"].index(day) - current_date.weekday() + 7) % 7\n        meeting_day = current_date + timedelta(days=day_offset)\n        \n        # Check within working hours\n        start_time = meeting_day.replace(hour=working_hours[0], minute=0)\n        end_time = meeting_day.replace(hour=working_hours[1], minute=0)\n        \n        proposed_start = start_time\n        proposed_end = start_time + meeting_duration\n\n        while proposed_end <= end_time:\n            # Check for overlaps with Edward's busy times\n            edward_busy = any(times_overlap(proposed_start, proposed_end, start, end) for start, end in edward_busy_times)\n            # Check for overlaps with Charlotte's busy times\n            charlotte_busy = any(times_overlap(proposed_start, proposed_end, start, end) for start, end in charlotte_busy_times)\n\n            if not edward_busy and not charlotte_busy:\n                return proposed_start.strftime(\"%H:%M\"), proposed_end.strftime(\"%H:%M\")\n\n            proposed_start += timedelta(minutes=1)\n            proposed_end = proposed_start + meeting_duration\n            \n    return None, None  # If no time slot is found\n\nstart, end = find_meeting_time()\nprint(f\"{{{start}:{end}}}\")\n```",
            "count": "calendar_scheduling_example_751"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if two time slots overlap\ndef is_overlapping(start1, end1, start2, end2):\n    return max(start1, start2) < min(end1, end2)\n\n# Define the work hours and meeting duration\nwork_hours = (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\nmeeting_duration = timedelta(hours=1)\n\n# James' schedule\njames_schedule = {\n    'Monday': [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ],\n    'Tuesday': [\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ],\n    'Wednesday': [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    ]\n}\n\n# Diane's schedule\ndiane_schedule = {\n    'Monday': [\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ],\n    'Tuesday': [\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    ],\n    'Wednesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedule1, schedule2):\n    for day in schedule1.keys():\n        available_start = work_hours[0]\n        while available_start + meeting_duration <= work_hours[1]:\n            available_end = available_start + meeting_duration\n            \n            busy = False\n            # Check James' schedule\n            for start, end in schedule1[day]:\n                if is_overlapping(available_start, available_end, start, end):\n                    busy = True\n                    break\n            \n            # Check Diane's schedule if James is free\n            if not busy:\n                for start, end in schedule2[day]:\n                    if is_overlapping(available_start, available_end, start, end):\n                        busy = True\n                        break\n            \n            if not busy:\n                return f\"{available_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\"\n            \n            available_start += timedelta(minutes=30)  # Check next available slot\n        \n    return None\n\n# Find and print the solution\nproposed_time = find_meeting_time(james_schedule, diane_schedule)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_752"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(laura_schedule, megan_schedule, meeting_duration, working_hours, days):\n    for day in days:\n        laura_busy_times = laura_schedule[day]\n        megan_busy_times = megan_schedule[day]\n\n        # create complete time slots for the day\n        start_working_time = datetime.strptime(working_hours[0], \"%H:%M\")\n        end_working_time = datetime.strptime(working_hours[1], \"%H:%M\")\n        \n        time_slots = []\n        \n        current_time = start_working_time\n        while current_time + meeting_duration <= end_working_time:\n            time_slots.append(current_time)\n            current_time += timedelta(minutes=30)  # check every 30 minutes\n        \n        for start_time in time_slots:\n            end_time = start_time + meeting_duration\n            \n            # check if the time slot conflicts with Laura's schedule\n            laura_conflict = any(start_time < laura_end and end_time > laura_start for laura_start, laura_end in laura_busy_times)\n            # check if the time slot conflicts with Megan's schedule\n            megan_conflict = any(start_time < megan_end and end_time > megan_start for megan_start, megan_end in megan_busy_times)\n            \n            if not laura_conflict and not megan_conflict:\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    return None\n\nlaura_schedule = {\n    \"Monday\": [(10, 30), (11, 30), (16, 30)],\n    \"Tuesday\": [(12, 30), (16, 30)],\n    \"Wednesday\": [(12, 0), (15, 30)],\n}\n\nmegan_schedule = {\n    \"Monday\": [(9, 0), (10, 30), (13, 30)],\n    \"Tuesday\": [(9, 0), (12, 0)],\n    \"Wednesday\": [(9, 0)],\n}\n\nmeeting_duration = timedelta(hours=1)\nworking_hours = [\"09:00\", \"17:00\"]\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\nproposed_time = find_meeting_time(laura_schedule, megan_schedule, meeting_duration, working_hours, days)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_753"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nnatalie_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\ndylan_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef find_meeting_time(natalie_schedule, dylan_schedule, meeting_duration):\n    for day in [\"Monday\", \"Tuesday\"]:\n        # Checking available slots for both participants\n        combined_schedule = natalie_schedule + dylan_schedule\n        \n        # Generate available time slots\n        current_time = work_hours_start\n        \n        while current_time + meeting_duration <= work_hours_end:\n            end_time = current_time + meeting_duration\n            is_conflict = False\n            \n            for start, end in combined_schedule:\n                if (current_time < end) and (start < end_time):\n                    is_conflict = True\n                    break\n            \n            if not is_conflict:\n                return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=15)  # Check next 15 minutes\n            \n    return None\n\n# Call to find the meeting time\nmeeting_time = find_meeting_time(natalie_schedule, dylan_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_754"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration in minutes\nmeeting_duration = 30\n\n# Define the participants' busy schedules\nschedules = {\n    \"Gary\": {\n        \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n        \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n        \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                      (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n    },\n    \"Jerry\": {\n        \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                      (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                      (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                      (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n    }\n}\n\n# Define available time slots function\ndef get_available_slots(day):\n    available_slots = []\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Merge both participants' busy schedules\n    busy_times = []\n    for participant in schedules:\n        busy_times.extend(schedules[participant][day])\n    \n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    \n    # Find gaps in the busy schedule\n    last_end_time = start_of_day\n    for start, end in busy_times:\n        if last_end_time < start:\n            available_slots.append((last_end_time, start))\n        last_end_time = max(last_end_time, end)\n    \n    if last_end_time < end_of_day:\n        available_slots.append((last_end_time, end_of_day))\n    \n    return available_slots\n\n# Checking available slots on Monday, Tuesday, and Wednesday\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n    available_slots = get_available_slots(day)\n    for start, end in available_slots:\n        if (end - start).total_seconds() >= meeting_duration * 60:\n            meeting_start = start\n            meeting_end = start + timedelta(minutes=meeting_duration)\n            print(f\"{{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}}\")\n            break\n```\n",
            "count": "calendar_scheduling_example_755"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(bryan_schedule, doris_schedule):\n    # Meeting constraints\n    meeting_duration = timedelta(minutes=30)\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Convert schedules to datetime objects\n    bryan_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in bryan_schedule]\n    doris_busy_times = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in doris_schedule]\n\n    # Check time slots\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        current_time = work_hours_start\n        while current_time + meeting_duration <= work_hours_end:\n            meeting_end_time = current_time + meeting_duration\n            \n            # Check if current_time overlaps with Bryan's or Doris's schedule\n            bryan_available = all(not (start < meeting_end_time and end > current_time) for start, end in bryan_busy_times)\n            doris_available = all(not (start < meeting_end_time and end > current_time) for start, end in doris_busy_times)\n            \n            # Conditions for Doris on Tuesday\n            if day == 'Tuesday' and current_time >= datetime.strptime(\"12:00\", \"%H:%M\"):\n                break\n\n            # If both are available, return the time\n            if bryan_available and doris_available:\n                return current_time.strftime(\"%H:%M\") + ':' + meeting_end_time.strftime(\"%H:%M\")\n            \n            current_time += timedelta(minutes=30)  # Check the next slot\n\n    return None  # If no time found\n\n# Existing schedules\nbryan_schedule = [('13:00', '13:30'), ('09:00', '09:30'), ('11:30', '12:00'), ('16:00', '16:30')]\ndoris_schedule = [('09:00', '17:00'), ('09:00', '10:30'), ('11:00', '16:00'), ('16:30', '17:00')]\n\n# Finding a suitable time\nmeeting_time = find_meeting_time(bryan_schedule, doris_schedule)\nprint(meeting_time)  # Example Output: '12:00:12:30'\n```",
            "count": "calendar_scheduling_example_756"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_hours = (9, 17)  # 9 AM to 5 PM\n    meeting_duration = 1  # in hours (1 hour meeting)\n    \n    # Meeting days\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    # Existing schedules for Noah and Justin\n    noah_schedule = {\n        \"Monday\": [(9.5, 10), (15, 15.5), (16, 16.5)],\n        \"Tuesday\": [(9.5, 10.5), (16, 16.5)],\n        \"Wednesday\": [(9, 9.5), (12, 12.5)]\n    }\n\n    justin_schedule = {\n        \"Monday\": [(9.5, 11.5), (12.5, 13.5), (15, 16), (16.5, 17)],\n        \"Tuesday\": [(9, 13.5), (14, 17)],\n        \"Wednesday\": [(10, 11), (12, 14.5), (15, 15.5)]\n    }\n    \n    # Function to convert time to hours\n    def is_free(start, end, schedule):\n        for s, e in schedule:\n            if not (end <= s or start >= e):\n                return False\n        return True\n    \n    def find_time(day):\n        start_hour, end_hour = work_hours\n        for hour in range(start_hour, end_hour - meeting_duration + 1):\n            start = hour\n            end = hour + meeting_duration\n            \n            if is_free(start, end, noah_schedule.get(day, [])) and is_free(start, end, justin_schedule.get(day, [])):\n                return f\"{start:02}:00:{end:02}:00\"  # Format HH:MM:HH:MM\n        return None\n\n    # Check available times on preferred days\n    for day in days:\n        if day == \"Monday\":\n            continue  # Skip Monday for Justin\n        time = find_time(day)\n        if time:\n            return time\n\n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)  # Uncomment for function call in testing\n```",
            "count": "calendar_scheduling_example_757"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours for the meeting\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define Debra's schedule\ndebra_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n}\n\n# Define Maria's schedule\nmaria_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\ndef find_meeting_time(debra_schedule, maria_schedule):\n    for day in debra_schedule.keys():\n        # Get the busy times for the day\n        debra_busy_times = debra_schedule[day]\n        maria_busy_times = maria_schedule[day]\n\n        # Combine busy times\n        busy_times = debra_busy_times + maria_busy_times\n        busy_times.sort(key=lambda x: x[0])  # Sort by start time\n        \n        available_start = working_hours_start\n        for start, end in busy_times:\n            if available_start + meeting_duration <= start:  # Check if there's space before the next meeting\n                return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n            available_start = max(available_start, end)  # Move to the next available start time\n\n        # Final check for the remaining time after the last meeting\n        if available_start + meeting_duration <= working_hours_end:\n            return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None  # If no time is found\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time(debra_schedule, maria_schedule)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_758"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and availability for each participant\nworking_hours_start = 9  # 9:00 AM\nworking_hours_end = 17    # 5:00 PM\nmeeting_duration = timedelta(minutes=30)\n\nkathryn_schedule = [\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Wednesday\n]\n\njason_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Wednesday\n]\n\ndef find_meeting_time():\n    # We check time slots for Monday, Tuesday, and Wednesday\n    for day in range(3):  # 0 - Monday, 1 - Tuesday, 2 - Wednesday\n        start_time = datetime.strptime(f\"{working_hours_start}:00\", \"%H:%M\")\n        end_time = datetime.strptime(f\"{working_hours_end}:00\", \"%H:%M\")\n\n        while start_time + meeting_duration <= end_time:\n            meeting_start = start_time\n            meeting_end = start_time + meeting_duration\n            \n            # Check if this time is available for both participants\n            kathryn_busy = any(start <= meeting_end and meeting_start <= end for start, end in kathryn_schedule)\n            jason_busy = any(start <= meeting_end and meeting_start <= end for start, end in jason_schedule)\n            \n            if not kathryn_busy and not jason_busy:\n                # found a time\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            \n            start_time += timedelta(minutes=30)  # Check the next slot\n    \n    return \"No available time found\"\n\n# Get a meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)  # Output the meeting time in desired format\n```",
            "count": "calendar_scheduling_example_759"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time slots for each participant\njennifer_schedule = {\n    'Monday': [('09:00', '12:30'), ('13:00', '14:30'), ('15:00', '16:00'), ('16:30', '17:00')],\n    'Tuesday': [('09:00', '12:30'), ('13:00', '17:00')],\n    'Wednesday': [('09:00', '12:30'), ('13:00', '15:30'), ('16:00', '17:00')],\n}\n\nchristine_schedule = {\n    'Monday': [('09:00', '10:00'), ('11:00', '12:00'), ('14:30', '16:00'), ('16:30', '17:00')],\n    'Tuesday': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('13:00', '13:30'), ('15:30', '16:00'), ('16:30', '17:00')],\n    'Wednesday': [('09:00', '09:30'), ('10:30', '11:30'), ('13:30', '14:00'), ('15:30', '16:00'), ('17:00', '17:00')],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\ndef find_earliest_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        jennifer_slots = jennifer_schedule[day]\n        christine_slots = christine_schedule[day]\n        \n        for j_start, j_end in jennifer_slots:\n            j_start_time = datetime.strptime(j_start, '%H:%M')\n            j_end_time = datetime.strptime(j_end, '%H:%M')\n            \n            for c_start, c_end in christine_slots:\n                c_start_time = datetime.strptime(c_start, '%H:%M')\n                c_end_time = datetime.strptime(c_end, '%H:%M')\n\n                # Find overlapping time slot\n                start = max(j_start_time, c_start_time)\n                end = min(j_end_time, c_end_time)\n\n                if end - start >= meeting_duration:\n                    meeting_start = start\n                    meeting_end = start + meeting_duration\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Output the proposed meeting time\nprint(find_earliest_meeting_time())\n```",
            "count": "calendar_scheduling_example_760"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting requirements\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the busy schedules\nkathleen_busy = [\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))\n]\nalbert_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  \n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Function to check if the time slot is available\ndef is_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Try to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        if day == \"Monday\":\n            available_time = (work_start, work_end)\n        elif day == \"Tuesday\":\n            available_time = (work_start, work_end)\n        elif day == \"Wednesday\":\n            available_time = (datetime.strptime(\"15:00\", \"%H:%M\"), work_end)\n\n        start = available_time[0]\n        while start + meeting_duration <= available_time[1]:\n            end = start + meeting_duration\n            if is_available(start, end, kathleen_busy) and is_available(start, end, albert_busy):\n                return start.strftime(\"%H:%M\") + \":\" + end.strftime(\"%H:%M\")\n            start += timedelta(minutes=10)  # Check every 10 minutes\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(f'{{{proposed_time}}}')\n```",
            "count": "calendar_scheduling_example_761"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and days\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\ndays = ['Monday', 'Tuesday', 'Wednesday']\n\n# Define schedules\njacob_schedule = {\n    'Monday': [\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ],\n    'Tuesday': [\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))\n    ],\n    'Wednesday': [\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))\n    ]\n}\n\nrandy_schedule = {\n    'Monday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ],\n    'Tuesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ],\n    'Wednesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ]\n}\n\ndef find_meeting_time(jacob_schedule, randy_schedule, duration=1):\n    meeting_duration = timedelta(hours=duration)\n    \n    for day in days:\n        jacob_busy = jacob_schedule.get(day, [])\n        randy_busy = randy_schedule.get(day, [])\n        \n        # Finding all busy time in one list\n        busy_times = jacob_busy + randy_busy\n        \n        # Create a list of available time slots\n        available_slots = []\n        current_time = work_hours_start\n        \n        while current_time + meeting_duration <= work_hours_end:\n            # Check if current_time is busy\n            busy = False\n            for start, end in busy_times:\n                if current_time < end and current_time + meeting_duration > start:\n                    busy = True\n                    break\n            \n            if not busy:\n                available_slots.append(current_time)\n            \n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n            \n        if available_slots:\n            return available_slots[0].strftime('%H:%M'), (available_slots[0] + meeting_duration).strftime('%H:%M')\n    \n    return None\n\nproposed_start, proposed_end = find_meeting_time(jacob_schedule, randy_schedule)\nprint(f'{{{proposed_start}:{proposed_end}}}')\n```",
            "count": "calendar_scheduling_example_762"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Scott's blocked times\n    scott_schedule = {\n        \"Monday\": [\n            (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        \"Tuesday\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        \"Wednesday\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n    }\n\n    # Check each day for available time slots\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            # Check if current_time overlaps with any of Scott's blocked times\n            blocked = False\n            for start, end in scott_schedule[day]:\n                if (current_time < end and (current_time + meeting_duration) > start):\n                    blocked = True\n                    break\n            \n            # If not blocked, return the available time\n            if not blocked:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            \n            # Increment time by 30 minutes\n            current_time += timedelta(minutes=30)\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_763"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\ndiana_busy = {\n    'Monday': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\ndenise_busy = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest possible meeting time\ndef find_earliest_meeting(diana_busy, denise_busy):\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    # Check availability for each day\n    for day in days:\n        busy_slots = diana_busy[day] + denise_busy[day]\n        busy_slots.sort(key=lambda x: x[0])  # Sort by start time\n\n        # Check open slots\n        current_time = start_time\n        for start, end in busy_slots:\n            if current_time + meeting_duration <= start:  # If there's time before the busy slot\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time = max(current_time, end)  # Move to the end of the current busy slot\n        \n        # Check after the last busy slot until end of the workday\n        if current_time + meeting_duration <= end_time:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Find and print the meeting time\nmeeting_time = find_earliest_meeting(diana_busy, denise_busy)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_764"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define busy schedules for Joshua and Joyce\njoshua_busy = [\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Tuesday\n]\n\njoyce_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Wednesday\n]\n\n# Define the working hours and duration of the meeting\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a proposed time is free for both\ndef is_time_free(start_time, duration, joshua_busy, joyce_busy):\n    end_time = start_time + duration\n    for busy_time in joshua_busy + joyce_busy:\n        if start_time < busy_time[1] and end_time > busy_time[0]:\n            return False\n    return True\n\n# Find a suitable time on Monday\nproposed_time = None\nfor day in range(5):  # 0=Monday, 1=Tuesday, 2=Wednesday\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        if day == 0 and current_time >= datetime.strptime(\"12:00\", \"%H:%M\"):  # Monday constraint for Joyce\n            if is_time_free(current_time, meeting_duration, joshua_busy, joyce_busy):\n                proposed_time = current_time\n                break\n        elif day == 1:\n            if is_time_free(current_time, meeting_duration, joshua_busy, joyce_busy):\n                proposed_time = current_time\n                break\n        elif day == 2:\n            if is_time_free(current_time, meeting_duration, joshua_busy, joyce_busy):\n                proposed_time = current_time\n                break     \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Output the proposed time\nif proposed_time:\n    print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_765"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours = {\n    \"Monday\": (9, 17),\n    \"Tuesday\": (9, 17),\n    \"Wednesday\": (9, 17)\n}\n\n# Define the busy schedules in terms of tuples (start_hour, end_hour)\ngrace_busy = {\n    \"Tuesday\": [(13, 30)],\n    \"Wednesday\": [(14, 30)]\n}\n\ndebra_busy = {\n    \"Monday\": [(9, 10), (11, 30), (15, 16), (16, 30)],\n    \"Tuesday\": [(9, 11), (11, 14), (14, 15), (15, 17)],\n    \"Wednesday\": [(10, 15), (15, 17)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest available time for the meeting\ndef find_meeting_time(working_hours, grace_busy, debra_busy):\n    for day, (start_hour, end_hour) in working_hours.items():\n        # Create a full schedule of busy times\n        busy_times = grace_busy.get(day, []) + debra_busy.get(day, [])\n        busy_times.sort()\n\n        # Check for free time slots\n        current_time = datetime.strptime(f\"{day} {start_hour}:00\", \"%A %H:%M\")\n        end_time = datetime.strptime(f\"{day} {end_hour}:00\", \"%A %H:%M\")\n\n        for busy_start, busy_end in busy_times:\n            busy_start_time = datetime.strptime(f\"{day} {busy_start}:00\", \"%A %H:%M\")\n            busy_end_time = datetime.strptime(f\"{day} {busy_end}:00\", \"%A %H:%M\")\n\n            # Check for available slot before the busy time\n            if current_time + meeting_duration <= busy_start_time:\n                return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n\n            # Move current_time to the end of the busy time\n            if current_time < busy_end_time:\n                current_time = busy_end_time\n\n        # Check for available slot at the end of the working hours\n        if current_time + meeting_duration <= end_time:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n\n# Find the meeting time\nmeeting_time = find_meeting_time(working_hours, grace_busy, debra_busy)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_766"
        },
        {
            "final_program_time": "{15:30:16:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(martha_schedule, beverly_schedule, meeting_duration):\n    work_hours = [(9, 17)]\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    for day in days:\n        day_start = datetime.strptime(f\"{day} 09:00\", '%A %H:%M')\n        day_end = datetime.strptime(f\"{day} 17:00\", '%A %H:%M')\n        \n        # Create blocks for Martha and Beverly\n        martha_blocks = martha_schedule.get(day, [])\n        beverly_blocks = beverly_schedule.get(day, [])\n        \n        # Create a list of all blocked times\n        all_blocks = martha_blocks + beverly_blocks\n        all_blocks.sort()\n\n        # Check for available slots\n        free_time_start = day_start\n        \n        for block in all_blocks:\n            block_start = block[0]\n            block_end = block[1]\n            \n            if free_time_start + timedelta(hours=meeting_duration) <= block_start:\n                # Found a suitable time\n                meeting_start = free_time_start\n                meeting_end = meeting_start + timedelta(hours=meeting_duration)\n                if meeting_end <= block_start:  # Check that the meeting ends before the block starts\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n                \n            # Move free time start to the end of the current block\n            free_time_start = max(free_time_start, block_end)\n        \n        # Check if there is available time after the last block till day end\n        if free_time_start + timedelta(hours=meeting_duration) <= day_end:\n            meeting_start = free_time_start\n            meeting_end = meeting_start + timedelta(hours=meeting_duration)\n            if meeting_end <= day_end:  # Check that the meeting ends before the workday ends\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None  # In case no suitable time found\n\nmartha_schedule = {\n    \"Monday\": [(datetime.strptime(\"16:00\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime(\"15:00\", '%H:%M'), datetime.strptime(\"15:30\", '%H:%M'))],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", '%H:%M'), datetime.strptime(\"11:00\", '%H:%M')),\n        (datetime.strptime(\"14:00\", '%H:%M'), datetime.strptime(\"14:30\", '%H:%M'))\n    ]\n}\n\nbeverly_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", '%H:%M'), datetime.strptime(\"13:30\", '%H:%M')),\n        (datetime.strptime(\"14:00\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))\n    ],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", '%H:%M'), datetime.strptime(\"15:30\", '%H:%M')),\n        (datetime.strptime(\"16:30\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))\n    ]\n}\n\nmeeting_duration = 1  # in hours\nprint(find_meeting_time(martha_schedule, beverly_schedule, meeting_duration))\n```",
            "count": "calendar_scheduling_example_767"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define participant schedules\n    denise_busy_slots = [\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ]\n\n    keith_busy_slots = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n\n    meeting_duration = timedelta(minutes=30)\n\n    # Define work hours\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Check for available time slots on Tuesday and Wednesday\n    for day in [\"Tuesday\", \"Wednesday\"]:\n        current_time = start_time\n        \n        while current_time + meeting_duration <= end_time:\n            # Check if the time slot collides with either participant's busy schedule\n            end_slot = current_time + meeting_duration\n            is_available = True\n            \n            for start, end in denise_busy_slots + keith_busy_slots:\n                if current_time < end and end_slot > start:\n                    is_available = False\n                    break\n            \n            # Check constraints for Denise and Keith\n            if is_available:\n                if day == \"Wednesday\" and current_time > datetime.strptime(\"11:30\", \"%H:%M\"):\n                    break  # Denise does not want to meet after 11:30\n\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n            current_time += timedelta(minutes=30)\n    \n    return \"No available time found\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_768"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' schedules\nwilliam_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Constraints for Diana\ndiana_not_after = datetime.strptime(\"13:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        current_time = working_hours_start\n        while current_time + meeting_duration <= working_hours_end:\n            # Check if the time is suitable for William\n            is_free = True\n            for start, end in william_schedule:\n                if current_time < end and current_time + meeting_duration > start:\n                    is_free = False\n                    break\n            # Check if it's suitable for Diana's constraints\n            if is_free and current_time <= diana_not_after:\n                # Return the proposed meeting time in the required format\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Check next time slot\n    return None\n\n# Output the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_769"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and days\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Constraints for each participant\narthur_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\neric_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ndef is_free(time_slot, busy_slots):\n    for start, end in busy_slots:\n        if time_slot[0] < end and time_slot[1] > start:  # Check for overlap\n            return False\n    return True\n\n# Try to find a time slot\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n    # Create possible time slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        time_slot = (current_time, current_time + meeting_duration)\n        if is_free(time_slot, arthur_busy) and is_free(time_slot, eric_busy):\n            print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n            break  # End the search after finding the first available slot\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n```\n",
            "count": "calendar_scheduling_example_770"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Define working hours\n    working_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    working_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Ann's schedule (busy times)\n    ann_schedule = [\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))  # Tuesday cut-off\n    ]\n\n    # Susan's schedule (busy times)\n    susan_schedule = [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        # Tuesday\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        # Wednesday\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n\n    # Merge the schedules\n    busy_times = ann_schedule + susan_schedule\n\n    # Check available slots within the working hours\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        current_time = working_hours_start\n\n        while current_time + meeting_duration <= working_hours_end:\n            slot_end = current_time + meeting_duration\n            is_busy = any(start < slot_end and end > current_time for start, end in busy_times)\n\n            # Check if day is suitable for both participants\n            if not is_busy and (day != \"Monday\" or day == \"Tuesday\" or current_time >= datetime.strptime(\"12:30\", \"%H:%M\")):\n                return f\"{current_time.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n\n            current_time += timedelta(minutes=30)\n\n    return None\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_771"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nwalter_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"))]\n}\n\neugene_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Get busy times for both participants\n        busy_times = walter_schedule.get(day, []) + eugene_schedule.get(day, [])\n        \n        # Initialize the start of the free period\n        current_time = work_hours_start\n\n        # Sort busy times\n        busy_times.sort(key=lambda x: x[0])\n        \n        for start, end in busy_times:\n            # Check if there is free time before the next busy period\n            if current_time + meeting_duration <= start:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            # Move current time to the end of the busy period\n            current_time = max(current_time, end)\n\n        # Check if there's time left after the last busy period\n        if current_time + meeting_duration <= work_hours_end:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_772"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules\nroy_schedule = {\n    \"Monday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\ndef find_meeting_time(schedule, work_hours_start, work_hours_end, meeting_duration):\n    # Check each day's schedule\n    for day, busy_times in schedule.items():\n        current_start = work_hours_start\n        for busy_start, busy_end in busy_times:\n            # Check for available slot before the busy time\n            if current_start + meeting_duration <= busy_start:\n                return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n            current_start = busy_end\n        \n        # Check the time slot after the last busy time on that day\n        if current_start + meeting_duration <= work_hours_end:\n            return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Try to find meeting time during the available work days for Roy\nmeeting_time = find_meeting_time(roy_schedule, work_hours_start, work_hours_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_773"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours = (9, 17)  # 9:00 to 17:00\nmeeting_duration = timedelta(hours=1)\n\n# Define the already busy schedules in hours for Diana and Rachel\ndiana_schedule = [\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\nrachel_schedule = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find available meeting time\ndef find_available_time(diana_schedule, rachel_schedule):\n    # Create a list of busy slots\n    busy_slots = diana_schedule + rachel_schedule\n    busy_slots.sort()\n\n    # Loop through each hour in the working hours\n    for hour in range(working_hours[0], working_hours[1]):\n        start_time = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        # Check if the meeting can fit in the schedule\n        conflict = False\n        for busy_start, busy_end in busy_slots:\n            # Check if the busy slot overlaps with the meeting time\n            if (start_time < busy_end) and (end_time > busy_start):\n                conflict = True\n                break\n        \n        if not conflict:\n            return start_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n    \n    return None\n\n# Get the proposed meeting time\nstart_time, end_time = find_available_time(diana_schedule, rachel_schedule)\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_774"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedule constraints\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Kathryn's availability\nkathryn_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('17:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Denise's availability\ndenise_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(k_schedule, d_schedule, duration):\n    for k_start, k_end in k_schedule:\n        for d_start, d_end in d_schedule:\n            # Find overlapping time for meeting\n            start = max(k_start, d_start)\n            end = min(k_end, d_end)\n            if start + duration <= end:\n                return start.strftime('%H:%M') + ':' + (start + duration).strftime('%H:%M')\n    return None\n\n# Adjusting the schedules to work with Monday, Tuesday and Wednesday\nsuitable_time = find_meeting_time(kathryn_schedule, denise_schedule, meeting_duration)\nprint(suitable_time)\n```",
            "count": "calendar_scheduling_example_775"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the schedules (as lists of tuples with start and end times)\njennifer_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_available_time(jennifer_schedule, work_start, work_end, meeting_duration):\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        # Check if there's a conflict with Jennifer's schedule\n        conflict = False\n        for start, end in jennifer_schedule:\n            if current_time < end and meeting_end > start:\n                conflict = True\n                break\n        \n        if not conflict:\n            return current_time.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    \n    return None, None\n\n# Find a suitable time for the meeting\nstart_time, end_time = find_available_time(jennifer_schedule, work_start, work_end, meeting_duration)\n\nif start_time and end_time:\n    print(f\"{{{start_time}:{end_time}}}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_776"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Schedule for Brandon (busy times)\nbrandon_busy = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n]\n\n# Schedule for Olivia (busy times)\nolivia_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Combine and find the earliest available time\ndef is_busy(time_start, time_end, busy_times):\n    for start, end in busy_times:\n        if not (time_end <= start or time_start >= end):\n            return True\n    return False\n\ndef find_available_time():\n    for hour in range(9, 17):\n        for minute in [0, 30]:  # Check the start of each half hour\n            proposed_start = datetime.strptime(f\"{hour:02d}:{minute:02d}\", \"%H:%M\")\n            proposed_end = proposed_start + meeting_duration\n\n            if working_hours_start <= proposed_start < working_hours_end and not (\n                is_busy(proposed_start, proposed_end, brandon_busy) or\n                is_busy(proposed_start, proposed_end, olivia_busy)\n            ):\n                return proposed_start.strftime(\"%H:%M\"), proposed_end.strftime(\"%H:%M\")\n\nmeeting_time = find_available_time()\nprint(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\n```",
            "count": "calendar_scheduling_example_777"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules as occupied time slots\nsusan_schedule = [\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nsandra_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Check Monday\n    for hour in range(9, 17):\n        slot_start = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n        slot_end = slot_start + meeting_duration\n\n        if slot_end <= work_end:\n            occupied = any(\n                (slot_start < end and slot_end > start) for start, end in susan_schedule + sandra_schedule\n            )\n            if not occupied:\n                return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n\n    # Check Tuesday (skip due to preferences)\n    \n    # Check Wednesday\n    for hour in range(9, 17):\n        slot_start = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n        slot_end = slot_start + meeting_duration\n\n        if slot_end <= work_end:\n            occupied = any(\n                (slot_start < end and slot_end > start) for start, end in susan_schedule + sandra_schedule\n            )\n            if not occupied:\n                return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_778"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participant schedules\nschedules = {\n    'Austin': {\n        'Monday': [\n            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n            (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n            (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))\n        ],\n        'Tuesday': [\n            (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n            (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n            (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))\n        ],\n        'Wednesday': [\n            (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n            (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n            (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n        ]\n    },\n    'Madison': {\n        'Monday': [\n            (datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n            (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n        ],\n        'Tuesday': [\n            (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n            (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n            (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n        ],\n        'Wednesday': [\n            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n            (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))\n        ]\n    }\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time\ndef find_meeting_time(schedules):\n    days = ['Monday', 'Wednesday']  # Tuesday is not preferred by Austin\n    available_time_slots = {}\n\n    for day in days:\n        austin_availability = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n        madison_availability = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n        # Subtract busy times from Austin's availability\n        for start, end in schedules['Austin'][day]:\n            new_availability = []\n            for available_start, available_end in austin_availability:\n                if end <= available_start or start >= available_end:\n                    new_availability.append((available_start, available_end))\n                else:\n                    if available_start < start:\n                        new_availability.append((available_start, start))\n                    if available_end > end:\n                        new_availability.append((end, available_end))\n            austin_availability = new_availability\n\n        # Subtract busy times from Madison's availability\n        for start, end in schedules['Madison'][day]:\n            new_availability = []\n            for available_start, available_end in madison_availability:\n                if end <= available_start or start >= available_end:\n                    new_availability.append((available_start, available_end))\n                else:\n                    if available_start < start:\n                        new_availability.append((available_start, start))\n                    if available_end > end:\n                        new_availability.append((end, available_end))\n            madison_availability = new_availability\n\n        # Find overlapping time slots\n        for austin_start, austin_end in austin_availability:\n            for madison_start, madison_end in madison_availability:\n                start_time = max(austin_start, madison_start)\n                end_time = min(austin_end, madison_end)\n                if end_time - start_time >= meeting_duration:\n                    available_time_slots[day] = (start_time, start_time + meeting_duration)\n                    break\n\n    # Return the first available time slot\n    if available_time_slots:\n        day, (start, end) = list(available_time_slots.items())[0]\n        return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\n# Find and print the meeting time\nprint(find_meeting_time(schedules))\n```",
            "count": "calendar_scheduling_example_779"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules\nlogans_availability = {\n    \"Monday\": [(9, 14, 30), (15, 0, 17, 0)],\n    \"Tuesday\": [(9, 0, 11, 30), (12, 0, 13, 30), (14, 30, 17, 0)],\n    \"Wednesday\": [(9, 0, 16, 0), (16, 30, 17, 0)]\n}\n\nloris_availability = {\n    \"Monday\": [],\n    \"Tuesday\": [(9, 0, 13, 0), (13, 30, 14, 30), (15, 0, 17, 0)],\n    \"Wednesday\": [(9, 0, 12, 30), (14, 0, 15, 0), (15, 30, 17, 0)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable meeting time\ndef find_meeting_time(logan_schedule, lori_schedule):\n    for day in ['Tuesday', 'Wednesday']:\n        logan_slots = logan_schedule[day]\n        lori_slots = lori_schedule[day]\n\n        for start_hour, start_minute in logan_slots:\n            start_time = datetime.strptime(f\"{day} {start_hour}:{start_minute}\", \"%A %H:%M\")\n            end_time = start_time + meeting_duration\n            \n            if any(start_time.time() < datetime.strptime(f\"{day} {end_hour}:{end_minute}\").time() and\n                   end_time.time() > datetime.strptime(f\"{day} {start_hour}:{start_minute}\").time() \n                   for end_hour, end_minute in lori_slots):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(logans_availability, loris_availability)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_780"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and duration of the meeting\nworking_hours = {\n    'Monday': (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    'Tuesday': (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    'Wednesday': (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\namy_schedule = {\n    'Monday': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\nkevin_schedule = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(working_hours, amy_schedule, kevin_schedule, meeting_duration):\n    for day in ['Tuesday', 'Wednesday']:  # Amy prefers to avoid Monday\n        start, end = working_hours[day]\n        busy_times = amy_schedule[day] + kevin_schedule[day]\n        busy_times.sort()\n\n        # Check for free slots\n        current_time = start\n        for busy_start, busy_end in busy_times:\n            # If there's a gap before the next busy time\n            if current_time + meeting_duration <= busy_start:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time = max(current_time, busy_end)\n\n        # Check for a slot after the last busy time until the end of the working day\n        if current_time + meeting_duration <= end:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n    return None  # No available time found\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(working_hours, amy_schedule, kevin_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_781"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participant_schedules, duration, preferences):\n    work_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    # Set preferences to avoid\n    avoid_days = [day for day in days if day not in preferences]\n    \n    available_times = {}\n    \n    for day in days:\n        if day in avoid_days:\n            continue\n            \n        # Time slots in minutes\n        slots = []\n        \n        # Define the blocked time ranges for this day\n        blocked_times = [\n            (datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\"))\n            for participant in participant_schedules\n            for start, end in participant_schedules[participant].get(day, [])\n        ]\n        \n        # Calculate available slots\n        current_time = work_hours[0]\n        \n        while current_time + timedelta(minutes=duration) <= work_hours[1]:\n            is_free = True\n            next_time = current_time + timedelta(minutes=duration)\n            \n            for start, end in blocked_times:\n                if (current_time < end) and (next_time > start):\n                    is_free = False\n                    break\n            \n            # If the current slot is free, add it\n            if is_free:\n                slots.append((current_time, next_time))\n            \n            # Move to the next minute\n            current_time += timedelta(minutes=1)\n        \n        # Store available times for the day\n        available_times[day] = slots\n    \n    # Find the first available time slot\n    for day, slots in available_times.items():\n        if slots:\n            return f\"{slots[0][0].strftime('%H:%M')}:{slots[0][1].strftime('%H:%M')}\"\n    \n    return None\n\n# Existing schedules for each participant\nschedules = {\n    \"Denise\": {\n        \"Monday\": [(\"13:00\", \"13:30\"), (\"15:00\", \"15:30\")],\n        \"Tuesday\": [],\n        \"Wednesday\": [(\"11:30\", \"12:00\")]\n    },\n    \"Deborah\": {\n        \"Monday\": [(\"09:00\", \"09:30\"), (\"10:30\", \"12:00\"), (\"12:30\", \"15:00\")],\n        \"Tuesday\": [(\"09:00\", \"13:30\"), (\"14:30\", \"17:00\")],\n        \"Wednesday\": [(\"09:00\", \"10:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:30\"), (\"14:30\", \"15:00\"), (\"15:30\", \"16:00\")]\n    }\n}\n\n# Meeting duration\nduration = 60  # in minutes\n\n# Preferences for meeting days\npreferences = [\"Tuesday\"]\n\n# Get the meeting time\nmeeting_time = find_meeting_time(schedules, duration, preferences)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_782"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\n# Define the existing schedules for Danielle and Barbara\r\ndanielle_schedule = {\r\n    'Monday': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\r\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\r\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\r\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\r\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\r\n                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\r\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\r\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\r\n                  (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\r\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\r\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\r\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\r\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\r\n}\r\n\r\nbarbara_schedule = {\r\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\r\n               (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\r\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\r\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\r\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\r\n    'Tuesday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\r\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\r\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\r\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\r\n    'Wednesday': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\r\n                  (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\r\n                  (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\r\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\r\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\r\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\r\n}\r\n\r\ndef find_meeting_time(danielle_schedule, barbara_schedule, duration_minutes=30):\r\n    # Define the meeting duration\r\n    duration = timedelta(minutes=duration_minutes)\r\n    \r\n    # Define preferred days\r\n    preferred_days = ['Tuesday', 'Wednesday']\r\n\r\n    meeting_time = None\r\n\r\n    for day in preferred_days:\r\n        danielle_busy = danielle_schedule[day]\r\n        barbara_busy = barbara_schedule[day]\r\n\r\n        # Create a list of busy times\r\n        busy_times = danielle_busy + barbara_busy\r\n        busy_times.sort()\r\n\r\n        # Find the gaps in the day's schedule\r\n        start_of_day = datetime.strptime('09:00', '%H:%M')\r\n        end_of_day = datetime.strptime('17:00', '%H:%M')\r\n\r\n        current_time = start_of_day\r\n\r\n        for start, end in busy_times:\r\n            if current_time + duration <= start:\r\n                meeting_time = (current_time, current_time + duration)\r\n                break\r\n            current_time = max(current_time, end)\r\n\r\n        # Check for any available time at the end of the workday\r\n        if meeting_time is None and current_time + duration <= end_of_day:\r\n            meeting_time = (current_time, current_time + duration)\r\n\r\n        if meeting_time:\r\n            break\r\n\r\n    return meeting_time\r\n\r\n# Find a suitable time for the meeting\r\nmeeting = find_meeting_time(danielle_schedule, barbara_schedule)\r\nif meeting:\r\n    print(f\"{meeting[0].strftime('%H:%M')}:{meeting[1].strftime('%H:%M')}\")\r\n```",
            "count": "calendar_scheduling_example_783"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define participants' existing schedules\n    judith_schedule = [\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))   # Wednesday\n    ]\n    \n    timothy_schedule = [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Tuesday\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Tuesday\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))   # Wednesday\n    ]\n    \n    # Meeting duration\n    meeting_duration = timedelta(hours=1)\n    \n    # Check available times\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    for day in days:\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            meeting_start = current_time\n            meeting_end = current_time + meeting_duration\n            \n            # If meeting is on Monday, check Judith's preferences\n            if day == 'Monday' and (meeting_start < datetime.strptime(\"12:00\", \"%H:%M\")):\n                current_time = meeting_start.replace(hour=current_time.hour + 1)\n                continue\n            \n            # Check if this slot overlaps with any existing schedules\n            overlap = False\n            for start, end in judith_schedule:\n                if not (meeting_end <= start or meeting_start >= end):\n                    overlap = True\n                    break\n            \n            if not overlap:\n                for start, end in timothy_schedule:\n                    if not (meeting_end <= start or meeting_start >= end):\n                        overlap = True\n                        break\n            \n            if not overlap:\n                return f'{meeting_start.strftime(\"%H:%M\")}:{meeting_end.strftime(\"%H:%M\")}'\n            \n            current_time += timedelta(minutes=30)  # Check next half an hour\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_784"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nlarry_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\nphilip_schedule = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ndef find_meeting_time(larry_schedule, philip_schedule, duration_minutes, work_start, work_end):\n    # Create a list of all blocks from both schedules\n    all_blocks = larry_schedule + philip_schedule\n    all_blocks.sort()\n\n    # Create a list of available time slots\n    available_slots = []\n    current_time = work_start\n\n    for start, end in all_blocks:\n        if current_time < start:\n            available_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Add any remaining time after the last block\n    if current_time < work_end:\n        available_slots.append((current_time, work_end))\n\n    # Check for available time slots\n    for start, end in available_slots:\n        if (end - start) >= timedelta(minutes=duration_minutes):\n            meeting_start = start\n            meeting_end = start + timedelta(minutes=duration_minutes)\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\n# Meeting Parameters\nmeeting_duration = 30  # in minutes\nwork_start_time = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Finding Meeting Time\nmeeting_time = find_meeting_time(larry_schedule, philip_schedule, meeting_duration, work_start_time, work_end_time)\n\n# Output Result\nif meeting_time:\n    print(f'{{{meeting_time[0]}:{meeting_time[1]}}}')\nelse:\n    print(\"No available time found\")\n```",
            "count": "calendar_scheduling_example_785"
        },
        {
            "final_program_time": "{16:30:16:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\namy_busy = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\npamela_busy = {\n    'Monday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Wednesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is available\ndef is_available(start, end, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        if day == 'Monday' and pamela_busy[day] == [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                                                       (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]:\n            continue  # Avoid more meetings on Monday\n        \n        start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n        \n        while start_time + meeting_duration <= end_time:\n            if day == 'Monday':\n                if is_available(start_time, start_time + meeting_duration, pamela_busy['Monday']) and \\\n                   is_available(start_time, start_time + meeting_duration, amy_busy):\n                    return start_time.strftime(\"%H:%M:%H:%M\")\n            elif day == 'Tuesday':\n                if start_time >= datetime.strptime(\"16:00\", \"%H:%M\"):  # Avoid before 16:00\n                    if is_available(start_time, start_time + meeting_duration, pamela_busy['Tuesday']) and \\\n                       is_available(start_time, start_time + meeting_duration, amy_busy):\n                        return start_time.strftime(\"%H:%M:%H:%M\")\n            elif day == 'Wednesday':\n                if start_time >= datetime.strptime(\"16:00\", \"%H:%M\"):  # Avoid before 16:00\n                    if is_available(start_time, start_time + meeting_duration, pamela_busy['Wednesday']) and \\\n                       is_available(start_time, start_time + meeting_duration, amy_busy):\n                        return start_time.strftime(\"%H:%M:%H:%M\")\n            start_time += timedelta(minutes=30)\n    \n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_786"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(arthur_busy, robert_busy, meeting_duration):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        day_busy_times = arthur_busy[day] + robert_busy[day]\n        day_busy_times.sort()\n        \n        current_time = work_hours_start\n        for start, end in day_busy_times:\n            while current_time < start:\n                available_end = current_time + meeting_duration\n                if available_end <= start:\n                    return current_time.strftime(\"%H:%M\") + ':' + available_end.strftime(\"%H:%M\")\n                current_time = available_end\n            current_time = max(current_time, end)\n        \n        while current_time + meeting_duration <= work_hours_end:\n            available_end = current_time + meeting_duration\n            return current_time.strftime(\"%H:%M\") + ':' + available_end.strftime(\"%H:%M\")\n    \n    return None\n\narthur_busy = {\n    'Monday': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nrobert_busy = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = timedelta(hours=1)\nproposed_time = find_meeting_time(arthur_busy, robert_busy, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_787"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' schedules\nkimberly_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\ndiane_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find available slots\ndef find_available_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        meeting_end = current_time + meeting_duration\n        \n        # Check Kimberly's schedule\n        if any(start < meeting_end and end > current_time for start, end in kimberly_schedule):\n            current_time += timedelta(minutes=1)\n            continue\n        \n        # Check Diane's schedule\n        if any(start < meeting_end and end > current_time for start, end in diane_schedule):\n            current_time += timedelta(minutes=1)\n            continue\n        \n        # No overlaps, found a slot\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Output proposed time\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_788"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    meeting_duration = timedelta(minutes=30)\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Day schedules for Brenda and Bruce\n    brenda_schedule = {\n        \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n        \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n        \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n    }\n\n    bruce_schedule = {\n        \"Monday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \"Tuesday\": [(work_start, work_end)],\n        \"Wednesday\": [(work_start, work_end)]\n    }\n\n    # Time preferences\n    bruce_preference_end = datetime.strptime(\"13:30\", \"%H:%M\")\n\n    # Check for available slots\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        start_time = work_start\n        \n        while start_time + meeting_duration <= work_end:\n            end_time = start_time + meeting_duration\n            \n            # Check if time is free for both Brenda and Bruce\n            is_free_for_brenda = all(not (start_time < end_time_slot[1] and end_time > end_time_slot[0]) \n                                      for end_time_slot in brenda_schedule.get(day, []))\n            is_free_for_bruce = all(not (start_time < end_time_slot[1] and end_time > end_time_slot[0]) \n                                     for end_time_slot in bruce_schedule.get(day, []))\n            \n            # Check Bruce's preference for Monday\n            is_free_for_bruce_pref = day != \"Monday\" or start_time <= bruce_preference_end\n            \n            if is_free_for_brenda and is_free_for_bruce and is_free_for_bruce_pref:\n                return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n            \n            start_time += timedelta(minutes=30)  # Increment checking time by 30 minutes\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_789"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Define participants' schedules\nbarbara_schedule = {\n    'Monday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    ],\n    'Tuesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    ],\n    'Wednesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ]\n}\n\njason_schedule = {\n    'Monday': [\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    ],\n    'Tuesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    ],\n    'Wednesday': [\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ]\n}\n\ndef find_meeting_time(duration=1):\n    duration_delta = timedelta(hours=duration)\n\n    # Check time slots on Monday (but skip Tuesday as per preference)\n    for day in ['Monday', 'Wednesday']:\n        # Get the free time slots\n        free_slots = []\n        jason_time = jason_schedule[day]\n        barbara_time = barbara_schedule[day]\n        \n        # Combine all busy times and sort\n        busy_times = sorted(barbara_time + jason_time)\n        \n        # Find free time slots\n        last_end_time = work_hours_start\n        for start, end in busy_times:\n            # If there is a gap between the last busy time and the current busy time\n            if last_end_time < start:\n                free_slots.append((last_end_time, start))\n            last_end_time = max(last_end_time, end)\n        \n        # Add the time after the last busy time until work hours end\n        if last_end_time < work_hours_end:\n            free_slots.append((last_end_time, work_hours_end))\n        \n        # Check free slots for availability of the meeting duration\n        for start, end in free_slots:\n            if end - start >= duration_delta:\n                proposed_start = start\n                proposed_end = proposed_start + duration_delta\n                return f'{proposed_start.strftime(\"%H:%M\")}:{proposed_end.strftime(\"%H:%M\")}'\n    \n    return None\n\n# Call the function to find the meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_790"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nnicole_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nruth_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to check if a time slot is free for both participants\ndef is_time_free(start, end):\n    for busy_start, busy_end in nicole_schedule + ruth_schedule:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Try to find a suitable time slot on Monday, Tuesday or Wednesday\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n    current_time = working_hours[0]\n    end_time = working_hours[1]\n\n    while current_time + meeting_duration <= end_time:\n        if is_time_free(current_time, current_time + meeting_duration):\n            if day == \"Wednesday\" and current_time > datetime.strptime(\"13:30\", \"%H:%M\"):\n                break  # Do not schedule after 13:30 on Wednesday\n            print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n            break\n        current_time += timedelta(minutes=30)  # Check the next possible time slot\n```",
            "count": "calendar_scheduling_example_791"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Define the working hours and days\n    working_hours = {\n        'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        'Wednesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    }\n\n    # Define existing schedules\n    pamela_schedule = {\n        'Monday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        ],\n        'Tuesday': [\n            (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        'Wednesday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ]\n    }\n\n    judith_schedule = {\n        'Monday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ],\n        'Tuesday': [\n            (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        ],\n        'Wednesday': [\n            (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        ]\n    }\n\n    meeting_duration = timedelta(hours=1)\n    \n    # Find available meeting time\n    for day in ['Monday', 'Wednesday']:\n        if day not in working_hours:\n            continue\n        \n        available_slots = []\n        for start, end in working_hours[day]:\n            available_slots.append((start, end))\n        \n        for pam_start, pam_end in pamela_schedule[day]:\n            available_slots = [(s, e) for s, e in available_slots if not (s < pam_end and pam_start < e)]\n        \n        for jud_start, jud_end in judith_schedule[day]:\n            available_slots = [(s, e) for s, e in available_slots if not (s < jud_end and jud_start < e)]\n        \n        for start, end in available_slots:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No suitable time found\"\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_792"
        },
        {
            "final_program_time": "{9:10:9:40}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = 9 * 60  # 9:00 in minutes\nworking_hours_end = 17 * 60    # 17:00 in minutes\nmeeting_duration = 30           # 30 minutes\n\n# Define the schedules for Thomas and Stephen\nthomas_schedule = {\n    'Monday': [(540, 630), (660, 840), (870, 990)], # timings in minutes\n    'Tuesday': [(660, 670), (840, 850), (960, 1020)],\n    'Wednesday': [(570, 600), (720, 730), (840, 900)]\n}\n\nstephen_schedule = {\n    'Monday': [(540, 630), (660, 720), (750, 1020)],\n    'Tuesday': [(540, 550), (600, 630), (660, 1020)],\n    'Wednesday': [(540, 1020)]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    days_to_check = ['Tuesday', 'Wednesday']\n    \n    for day in days_to_check:\n        thomas_free_times = get_free_times(thomas_schedule[day])\n        stephen_free_times = get_free_times(stephen_schedule[day])\n        \n        # Find intersection of free times\n        for thomas_time in thomas_free_times:\n            for stephen_time in stephen_free_times:\n                if thomas_time[0] < stephen_time[1] and stephen_time[0] < thomas_time[1]:\n                    meeting_start = max(thomas_time[0], stephen_time[0])\n                    meeting_end = meeting_start + meeting_duration\n                    if meeting_end <= min(thomas_time[1], stephen_time[1]):\n                        return to_time_format(meeting_start, meeting_end)\n\ndef get_free_times(schedule):\n    free_times = []\n    last_end = working_hours_start\n    \n    for start, end in schedule:\n        if start > last_end:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n        \n    if last_end < working_hours_end:\n        free_times.append((last_end, working_hours_end))\n    \n    return free_times\n\ndef to_time_format(start, end):\n    start_time = f\"{start // 60:02}:{start % 60:02}\"\n    end_time = f\"{end // 60:02}:{end % 60:02}\"\n    return f\"{start_time}:{end_time}\"\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_793"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define Jesse's schedule\njesse_schedule = [\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Denotes Monday as 0, Tuesday as 1, Wednesday as 2\ndays_to_schedule = [1, 2]  # Tuesday and Wednesday\n\ndef is_time_free(start, end):\n    for busy_start, busy_end in jesse_schedule:\n        if (start < busy_end) and (end > busy_start):  # If the times overlap\n            return False\n    return True\n\n# Looking for earliest time on Tuesday\nfor day in days_to_schedule:\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        if is_time_free(current_time, current_time + meeting_duration):\n            print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n            break\n        current_time += timedelta(minutes=30)\n    else:\n        continue\n    break\n```",
            "count": "calendar_scheduling_example_794"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nwalter_schedule = {\n    \"Tuesday\": [(9, 30, 11), (12, 0, 12, 30), (14, 0, 14, 30)],\n    \"Wednesday\": [(11, 30, 12, 30), (13, 0, 13, 30), (14, 0, 14, 30), (15, 0, 15, 30)]\n}\n\njanice_schedule = {\n    \"Monday\": [(9, 0, 10, 30), (11, 30, 12, 0), (12, 30, 14, 0), (14, 30, 15, 0), (16, 0, 17)],\n    \"Tuesday\": [(10, 0, 10, 30), (11, 0, 12, 0), (12, 30, 13, 0), (13, 30, 15, 0), (15, 30, 16, 30)],\n    \"Wednesday\": [(11, 0, 12, 0), (13, 30, 14, 30), (16, 0, 16, 30)]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Create a function to find the earliest time slot\ndef find_meeting_time():\n    # Iterate over the potential days for scheduling\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Define the work hours\n        work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n        work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n        \n        # Create a list of busy times\n        busy_times = walter_schedule.get(day, []) + janice_schedule.get(day, [])\n        busy_intervals = []\n        \n        # Convert busy times to datetime intervals\n        for start_hour, start_min, end_hour, end_min in busy_times:\n            busy_intervals.append((datetime(year=2023, month=10, day=1, hour=start_hour, minute=start_min),\n                                    datetime(year=2023, month=10, day=1, hour=end_hour, minute=end_min)))\n\n        # Sort busy intervals\n        busy_intervals.sort()\n        \n        # Create a list of free time slots\n        free_times = []\n        \n        # Check for free time before first busy interval\n        if busy_intervals:\n            if work_start < busy_intervals[0][0]:\n                free_times.append((work_start, busy_intervals[0][0]))\n        \n            # Check for gaps between busy intervals\n            for i in range(len(busy_intervals) - 1):\n                if busy_intervals[i][1] < busy_intervals[i + 1][0]:\n                    free_times.append((busy_intervals[i][1], busy_intervals[i + 1][0]))\n        \n            # Check if there's free time after the last busy interval until work end\n            if busy_intervals[-1][1] < work_end:\n                free_times.append((busy_intervals[-1][1], work_end))\n        else:\n            # If no busy intervals, the entire work day is free\n            free_times.append((work_start, work_end))\n        \n        # Look for a suitable free slot for the meeting\n        for start, end in free_times:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n# Find the meeting time\navailable_time = find_meeting_time()\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_795"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define the schedules\n    michelle_schedule = [\n        (\"09:30\", \"10:00\"),\n        (\"11:30\", \"12:00\"),\n        (\"13:00\", \"14:00\"),\n        (\"14:30\", \"15:00\"),\n    ]\n    \n    joshua_schedule = [\n        (\"09:00\", \"13:00\"),\n        (\"13:30\", \"17:00\"),\n        (\"09:00\", \"12:30\"),\n        (\"13:00\", \"15:30\"),\n        (\"16:00\", \"17:00\"),\n        (\"09:00\", \"10:30\"),\n        (\"11:30\", \"13:30\"),\n        (\"14:30\", \"16:30\"),\n    ]\n\n    # Define work hours\n    work_hours = (\"09:00\", \"17:00\")\n    \n    # Function to check if a time is available\n    def is_time_available(start, end, schedule):\n        for busy_start, busy_end in schedule:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n        return True\n    \n    # Find time slots for one hour\n    for hour in range(9, 17):\n        for minute in (0, 30):  # Check on the hour and half hour\n            start_time = f\"{hour:02}:{minute:02}\"\n            end_time = f\"{hour:02}:{minute:02}\"\n            end_hour = hour + 1 if minute == 0 else hour + 1\n            end_time = f\"{end_hour:02}:{00:02}\"\n\n            if is_time_available(start_time, end_time, michelle_schedule) and is_time_available(start_time, end_time, joshua_schedule):\n                return f\"{start_time}:{end_time}\"\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_796"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participant schedules\nmargaret_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ntyler_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Exclude Monday for Tyler\navailable_times = []\n\n# Check Tuesday\nif True:\n    time = start_time\n    while time + meeting_duration <= end_time:\n        # Check if the time slot is available for both\n        meeting_start = time\n        meeting_end = time + meeting_duration\n        \n        margaret_free = all(not (m_start < meeting_end and m_end > meeting_start) for m_start, m_end in margaret_schedule)\n        tyler_free = all(not (t_start < meeting_end and t_end > meeting_start) for t_start, t_end in tyler_schedule)\n\n        if margaret_free and tyler_free:\n            available_times.append((meeting_start, meeting_end))\n            break  # As we want the earliest availability\n        \n        time += timedelta(minutes=30)\n\n# Convert available time to requested format\nif available_times:\n    start, end = available_times[0]\n    print(f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_797"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(nancy_schedule, jose_schedule, meeting_duration, days):\n    for day in days:\n        nancy_busy_times = nancy_schedule[day]\n        jose_busy_times = jose_schedule[day]\n\n        # Merge busy times and find free time slots\n        all_busy_times = nancy_busy_times + jose_busy_times\n        all_busy_times.sort()\n        \n        # Calculate free time slots\n        free_slots = []\n        start_of_day = datetime.strptime('09:00', '%H:%M')\n        end_of_day = datetime.strptime('17:00', '%H:%M')\n\n        last_end = start_of_day\n        \n        for busy_start, busy_end in all_busy_times:\n            if last_end < busy_start:\n                free_slots.append((last_end, busy_start))\n            last_end = max(last_end, busy_end)\n        \n        if last_end < end_of_day:\n            free_slots.append((last_end, end_of_day))\n\n        # Check for suitable meeting slot\n        for start, end in free_slots:\n            if (end - start) >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n    return None\n\n# Existing schedules\nnancy_schedule = {\n    'Monday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n}\n\njose_schedule = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Possible days\ndays = ['Monday', 'Tuesday', 'Wednesday']\n\n# Find and output meeting time\nmeeting_time = find_meeting_time(nancy_schedule, jose_schedule, meeting_duration, days)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_798"
        },
        {
            "final_program_time": "{9:00:9:00}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the unavailable times for Albert (Tuesday and Wednesday)\nalbert_busy_times = {\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n    ]\n}\n\n# Define the unavailable times for Marie (Monday, Tuesday, and Wednesday)\nmarie_busy_times = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), work_end)\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), work_end)\n    ],\n    \"Wednesday\": [\n        (work_start, work_end)\n    ]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    for day in days:\n        current_time = work_start\n        \n        # Create a list of busy times for both participants\n        busy_times = albert_busy_times.get(day, []) + marie_busy_times.get(day, [])\n        \n        # Check for available slots\n        while current_time + meeting_duration <= work_end:\n            # Check if current time overlaps with busy times\n            if not any(start <= current_time < end for start, end in busy_times):\n                return current_time.strftime(\"%H:%M:%H:%M\")\n            current_time += timedelta(minutes=30)  # Move to the next half hour\n            \n    return None\n\n# Get the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_799"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\njoshua_schedule = {\n    \"Monday\": [(11, 0, 11, 30), (13, 0, 13, 30), (15, 30, 16, 0)],\n    \"Tuesday\": [(12, 30, 13, 30)],\n    \"Wednesday\": [(12, 30, 13, 0)],\n    \"Thursday\": [(11, 30, 12, 0), (15, 0, 15, 30)]\n}\n\ndonald_schedule = {\n    \"Monday\": [(9, 0, 9, 30), (10, 0, 11, 30), (12, 0, 13, 0), (13, 30, 14, 0), (15, 0, 17, 0)],\n    \"Tuesday\": [(9, 0, 10, 30), (12, 30, 14, 30), (16, 30, 17, 0)],\n    \"Wednesday\": [(10, 30, 11, 30), (12, 0, 12, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n    \"Thursday\": [(9, 0, 9, 30), (10, 0, 11, 30), (12, 0, 12, 30), (13, 0, 14, 0), (15, 30, 17, 0)]\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\ndef is_time_free(start_time, duration, schedule):\n    end_time = start_time + timedelta(minutes=duration)\n    for busy_start, busy_end in schedule:\n        busy_start_time = datetime.strptime(f\"{busy_start[0]}:{busy_start[1]}\", '%H:%M')\n        busy_end_time = datetime.strptime(f\"{busy_end[0]}:{busy_end[1]}\", '%H:%M')\n        if (start_time < busy_end_time and end_time > busy_start_time):\n            return False\n    return True\n\ndef find_time_slot():\n    work_hours = [(9, 0), (17, 0)]  # 9:00 to 17:00\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n    \n    for day in days:\n        joshua_busy = joshua_schedule.get(day, [])\n        donald_busy = donald_schedule.get(day, [])\n        combined_schedule = joshua_busy + donald_busy\n\n        # Convert busy times to datetime objects\n        combined_busy_schedule = []\n        for start_hour, start_minute, end_hour, end_minute in combined_schedule:\n            combined_busy_schedule.append((\n                datetime.strptime(f\"{start_hour}:{start_minute}\", '%H:%M'),\n                datetime.strptime(f\"{end_hour}:{end_minute}\", '%H:%M')\n            ))\n\n        for hour in range(work_hours[0][0], work_hours[1][0]):\n            for minute in range(0, 60, 30):\n                start_time = datetime.strptime(f\"{hour}:{minute:02}\", '%H:%M')\n                if is_time_free(start_time, meeting_duration, combined_busy_schedule):\n                    # Take into account Joshua's preference\n                    if day == \"Tuesday\" and start_time < datetime.strptime(\"13:00\", '%H:%M'):\n                        continue\n                    return start_time\n\n# Find the suitable time slot\nselected_time = find_time_slot()\nif selected_time:\n    print(f\"{selected_time.strftime('%H:%M')}:{(selected_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_800"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and the participants' schedules\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' blocked schedules\nschedules = {\n    'Sarah': [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Peter': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedules, work_hours, meeting_duration):\n    work_start, work_end = work_hours\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        is_available = True\n\n        for busy_time in schedules['Sarah']:\n            if busy_time[0] <= current_time < busy_time[1]:\n                is_available = False\n                break\n        \n        for busy_time in schedules['Peter']:\n            if busy_time[0] <= current_time < busy_time[1]:\n                is_available = False\n                break\n        \n        if is_available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n\n        current_time += timedelta(minutes=1)  # Check the next minute\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, work_hours, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_801"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n\n    # Define the participant schedules as blocks of time\n    abigail_schedule = {\n        \"Monday\": [(\"09:00\", \"09:30\"), (\"11:00\", \"11:30\"), (\"15:30\", \"16:00\")],\n        \"Wednesday\": [(\"09:30\", \"10:00\"), (\"10:30\", \"11:00\")],\n        \"Thursday\": [(\"09:00\", \"09:30\"), (\"12:30\", \"13:30\")]\n    }\n    \n    charlotte_schedule = {\n        \"Monday\": [(\"09:30\", \"10:00\"), (\"10:30\", \"11:00\"), (\"13:00\", \"13:30\"), (\"15:00\", \"17:00\")],\n        \"Tuesday\": [(\"10:30\", \"12:00\"), (\"12:30\", \"13:30\"), (\"14:30\", \"15:00\"), (\"16:30\", \"17:00\")],\n        \"Wednesday\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:30\"), (\"12:00\", \"13:30\"), (\"14:00\", \"15:30\"), (\"16:30\", \"17:00\")],\n        \"Thursday\": [(\"09:00\", \"12:00\"), (\"14:00\", \"14:30\"), (\"16:00\", \"17:00\")]\n    }\n\n    # Availability list excluding blocked times\n    availability = []\n\n    # Check Tuesday and Wednesday (Monday not preferred by Charlotte and Tuesday not preferred by Abigail)\n    for day in [\"Wednesday\", \"Thursday\"]:\n        current_time = work_hours_start\n        while current_time + meeting_duration <= work_hours_end:\n            # Convert current_time to string for comparison\n            start_time_str = current_time.strftime(\"%H:%M\")\n            end_time_str = (current_time + meeting_duration).strftime(\"%H:%M\")\n            \n            # Check if current time is in their schedules\n            abigail_free = all(\n                not (start <= start_time_str < end or start < end_time_str <= end)\n                for start, end in abigail_schedule.get(day, [])\n            )\n            charlotte_free = all(\n                not (start <= start_time_str < end or start < end_time_str <= end)\n                for start, end in charlotte_schedule.get(day, [])\n            )\n\n            # If both are free, return the time\n            if abigail_free and charlotte_free:\n                return f\"{start_time_str}:{end_time_str}\"\n            \n            # Move to next half hour\n            current_time += timedelta(minutes=30)\n    \n    return None\n\n# Call the function to find meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_802"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participants' schedules\nelijah_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\ngary_schedule = {\n    \"Monday\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\ndef find_meeting_time():\n    # Preferred days for meeting\n    days = [\"Tuesday\", \"Wednesday\", \"Thursday\"]\n    \n    for day in days:\n        # Initialize available time slots\n        available_slots = []\n        \n        # Create a time range for the day\n        current_time = work_start\n        \n        while current_time + meeting_duration <= work_end:\n            busy = False\n            \n            # Check Elijah's busy schedule\n            for start, end in elijah_schedule[day]:\n                if start <= current_time < end or start < current_time + meeting_duration <= end:\n                    busy = True\n                    break\n            \n            # Check Gary's busy schedule\n            if not busy:\n                for start, end in gary_schedule[day]:\n                    if start <= current_time < end or start < current_time + meeting_duration <= end:\n                        busy = True\n                        break\n            \n            # If both are free\n            if not busy:\n                available_slots.append((current_time, current_time + meeting_duration))\n            \n            current_time += timedelta(minutes=30)  # Increment by 30 minutes\n            \n        # Return the first available slot\n        if available_slots:\n            return available_slots[0]\n\nmeeting_start, meeting_end = find_meeting_time()\nprint(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_803"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules for Natalie and Stephen\nnatalie_schedule = {\n    \"Monday\": [(11, 0, 11, 30), (16, 0, 16, 30)],\n    \"Tuesday\": [(10, 0, 10, 30), (15, 0, 15, 30)],\n    \"Wednesday\": [(10, 0, 10, 30), (11, 0, 11, 30), (13, 30, 14, 0), (15, 0, 15, 30)],\n    \"Thursday\": [(11, 30, 12, 0), (15, 30, 16, 0)]\n}\n\nstephen_schedule = {\n    \"Monday\": [(9, 0, 9, 30), (11, 0, 13, 30), (14, 0, 15, 0), (15, 30, 16, 0)],\n    \"Tuesday\": [(9, 0, 10, 0), (10, 30, 11, 30), (12, 30, 14, 0)],\n    \"Wednesday\": [(9, 0, 9, 30), (10, 0, 12, 30), (13, 0, 13, 30), (14, 30, 15, 0), (15, 30, 16, 30)],\n    \"Thursday\": [(9, 30, 10, 0), (13, 30, 15, 0), (16, 0, 17, 0)]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_hours = (9, 17)  # 9 AM to 5 PM\ndays_to_consider = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\ndef find_available_time(start_hour, end_hour):\n    # Generate time slots in minutes\n    available_slots = []\n    for hour in range(start_hour, end_hour):\n        available_slots.append((hour, 0))\n        available_slots.append((hour, 30))\n    return available_slots\n\ndef check_availability(day, start_time, end_time):\n    # Check if a time slot is available in both schedules\n    nat_slots = natalie_schedule.get(day, [])\n    ste_slots = stephen_schedule.get(day, [])\n    \n    for nat_start, nat_end in nat_slots:\n        nat_range = range(nat_start * 60 + nat_end[0], nat_end[0] * 60 + nat_end[1])\n        if start_time in nat_range or end_time in nat_range or (start_time < nat_range.stop and end_time > nat_range.start):\n            return False\n        \n    for ste_start, ste_end in ste_slots:\n        ste_range = range(ste_start * 60 + ste_end[0], ste_end[0] * 60 + ste_end[1])\n        if start_time in ste_range or end_time in ste_range or (start_time < ste_range.stop and end_time > ste_range.start):\n            return False\n            \n    return True\n\n# Finding a suitable time for the meeting\nfor day in days_to_consider:\n    time_slots = find_available_time(work_hours[0], work_hours[1])\n    \n    for start_hour, start_minute in time_slots:\n        start_time = start_hour * 60 + start_minute\n        end_time = start_time + (meeting_duration.total_seconds() / 60)\n        \n        if check_availability(day, start_time, end_time):\n            # Convert to HH:MM format\n            meeting_start = f\"{start_hour:02}:{start_minute:02}\"\n            meeting_end_hour = int(end_time // 60)\n            meeting_end_minute = int(end_time % 60)\n            meeting_end = f\"{meeting_end_hour:02}:{meeting_end_minute:02}\"\n            print(f\"{meeting_start}:{meeting_end}\")\n            break\n    else:\n        continue\n    break\n```",
            "count": "calendar_scheduling_example_804"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:12:00}",
            "type_error": "AttributeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(dorothy_schedule, judith_schedule, duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of possible meeting times\n    possible_times = []\n    \n    # Check each hour in the workday\n    current_time = work_start\n    while current_time + duration <= work_end:\n        possible_times.append(current_time)\n        current_time += timedelta(minutes=30)  # Move in 30-minute increments\n\n    # Convert the schedules into a list of busy times\n    busy_times = []\n    for time in dorothy_schedule + judith_schedule:\n        busy_times.append((datetime.strptime(time[0], \"%H:%M\"), datetime.strptime(time[1], \"%H:%M\")))\n\n    # Find a suitable time\n    for time in possible_times:\n        end_time = time + duration\n        if all(not (start < end_time and end > start) for start, end in busy_times):\n            return time\n\n# Participant Schedules\ndorothy_schedule = [(\"10:00\", \"10:30\"), (\"16:30\", \"17:00\")]\njudith_schedule = [(\"09:00\", \"17:00\"), (\"09:00\", \"17:00\"), (\"09:00\", \"11:00\"), (\"12:00\", \"17:00\"), (\"09:00\", \"10:00\"), (\"10:30\", \"14:30\"), (\"15:00\", \"17:00\")]\n\n# Duration of meeting\nmeeting_duration = timedelta(hours=1)\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(dorothy_schedule, judith_schedule, meeting_duration)\n\n# Format the output\noutput = f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + meeting_duration).strftime('%H:%M')}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_805"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules in a dictionary\nschedules = {\n    \"Tyler\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))\n    ],\n    \"Jack\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest available time for a meeting\ndef find_earliest_meeting_time(schedules, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    all_busy_times = []\n\n    # Combine busy times for both participants\n    for busy_times in schedules.values():\n        all_busy_times.extend(busy_times)\n\n    # Sort busy times\n    all_busy_times.sort(key=lambda x: x[0])\n\n    # Create a list of free times in the work hours\n    free_times = []\n    previous_end = work_start\n\n    for start, end in all_busy_times:\n        if previous_end < start:\n            free_times.append((previous_end, start))\n        previous_end = max(previous_end, end)\n\n    if previous_end < work_end:\n        free_times.append((previous_end, work_end))\n\n    # Find an available slot for the meeting\n    for start, end in free_times:\n        duration = end - start\n        if duration >= meeting_duration:\n            meeting_start = start\n            meeting_end = meeting_start + meeting_duration\n            return meeting_start.strftime(\"%H:%M\") + \":\" + meeting_end.strftime(\"%H:%M\")\n\n# Calculate the proposed time for the meeting\nproposed_time = find_earliest_meeting_time(schedules, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_806"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(jonathan_schedule, natalie_schedule, meeting_duration):\n    work_hours = [(9, 17)]\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    \n    # Transform existing schedules into a formatted list of busy periods\n    busy_periods = {\n        'Jonathan': jonathan_schedule,\n        'Natalie': natalie_schedule\n    }\n    \n    # Go through each workday\n    for day in days:\n        start_of_day = datetime.strptime(f\"{day} 09:00\", \"%A %H:%M\")\n        end_of_day = datetime.strptime(f\"{day} 17:00\", \"%A %H:%M\")\n        \n        # Create a list of free time slots within the work hours\n        free_slots = []\n        current_time = start_of_day\n        \n        while current_time < end_of_day:\n            # Check busy slots\n            is_busy = False\n            for person, busy_times in busy_periods.items():\n                for start, end in busy_times[day]:\n                    if current_time < end and current_time + meeting_duration > start:\n                        is_busy = True\n                        break\n                if is_busy:\n                    break\n            \n            if not is_busy:\n                free_slots.append(current_time)\n\n            current_time += timedelta(minutes=30)  # Check every 30 minutes for potential start times\n            \n        # Now check if any free slots can accommodate the meeting duration\n        for start_time in free_slots:\n            if start_time + meeting_duration <= end_of_day:\n                # Avoid scheduling beyond the preferred time\n                if day == 'Monday' and start_time.time() >= datetime.strptime('15:00', \"%H:%M\").time():\n                    continue\n                # Natalie prefers not to meet on Thursday\n                if day == 'Thursday':\n                    continue\n                \n                # If both conditions are satisfied, we have a meeting time\n                end_time = start_time + meeting_duration\n                return start_time.strftime(\"%H:%M\") + ':' + end_time.strftime(\"%H:%M\")\n    \n    return None\n\n# Existing schedules for Jonathan and Natalie\njonathan_schedule = {\n    'Monday': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Thursday': [(datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n}\n\nnatalie_schedule = {\n    'Monday': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Thursday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\nmeeting_duration = timedelta(hours=1)\nmeeting_time = find_meeting_time(jonathan_schedule, natalie_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_807"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules for Michelle and Laura\nmichelle_busy_times = [\n    (datetime.strptime(\"2023-10-23 13:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-23 14:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-23 14:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-23 15:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 10:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 12:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 12:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 13:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 14:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 15:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 16:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 17:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-25 09:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-25 10:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-25 14:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-25 14:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-25 16:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-25 16:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-26 10:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-26 10:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-26 11:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-26 12:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-26 13:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-26 13:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-26 15:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-26 15:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-26 16:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-26 17:00\", \"%Y-%m-%d %H:%M\")),\n]\n\nlaura_busy_times = [\n    (datetime.strptime(\"2023-10-23 09:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-23 10:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-23 10:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-23 13:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-23 14:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-23 15:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-23 16:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-23 16:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 09:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 10:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 11:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 12:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 12:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 14:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-24 15:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-24 17:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-25 09:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-25 11:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-25 12:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-25 13:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-25 14:30\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-25 15:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-25 16:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-25 17:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-26 09:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-26 12:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-26 13:00\", \"%Y-%m-%d %H:%M\"), \n     datetime.strptime(\"2023-10-26 17:00\", \"%Y-%m-%d %H:%M\")),\n]\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_start_time = datetime.strptime(\"09:00\", \"%H:%M\").time()\nwork_end_time = datetime.strptime(\"17:00\", \"%H:%M\").time()\ndays_available = [0, 1, 2, 3]  # Monday to Thursday\n\n# Function to find free slot\ndef find_free_time():\n    for day in days_available:\n        for hour in range(work_start_time.hour, work_end_time.hour):\n            start_time = datetime.strptime(f\"2023-10-23 {hour}:00\", \"%Y-%m-%d %H:%M\")\n            while start_time.time() < work_end_time:\n                end_time = start_time + meeting_duration\n                if end_time.time() > work_end_time:\n                    break\n\n                # Check if this time is busy for either participant\n                is_busy = False\n                for busy_start, busy_end in michelle_busy_times + laura_busy_times:\n                    if (start_time < busy_end) and (end_time > busy_start):\n                        is_busy = True\n                        break\n                \n                if not is_busy:\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n                \n                start_time += timedelta(minutes=30)  # Check next half hour slot\n\nproposed_time = find_free_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_808"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting preferences\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define participants' existing schedules\ndouglas_schedule = {\n    'Wednesday': [(datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))],\n    'Thursday': [(datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'))]\n}\n\nzachary_schedule = {\n    'Monday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ],\n    'Tuesday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))\n    ],\n    'Wednesday': [\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))\n    ],\n    'Thursday': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Check only Tuesday and Wednesday based on preferences\n    days_to_check = ['Tuesday', 'Wednesday']\n    \n    for day in days_to_check:\n        day_start = work_hours_start\n        day_end = work_hours_end\n        \n        while day_start + meeting_duration <= day_end:\n            meeting_end = day_start + meeting_duration\n            conflict = False\n            \n            # Check Douglas's schedule\n            if day in douglas_schedule:\n                for start, end in douglas_schedule[day]:\n                    if (day_start < end and meeting_end > start):\n                        conflict = True\n                        break\n            \n            # Check Zachary's schedule\n            if day in zachary_schedule:\n                for start, end in zachary_schedule[day]:\n                    if (day_start < end and meeting_end > start):\n                        conflict = True\n                        break\n            \n            if not conflict:\n                return f\"{day_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            \n            day_start += timedelta(minutes=1)  # Increment time by one minute\n            \n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_809"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(joe_free, nicole_busy, duration):\n    # Define the work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Day constraints (considering Monday, Tuesday, Wednesday, Thursday)\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    \n    # Initialize a dictionary to hold the busy times for Nicole by day\n    nicole_schedule = {\n        'Monday': [\n            (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n        ],\n        'Tuesday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n        ],\n        'Wednesday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n            (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n        ],\n        'Thursday': [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n            (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n            (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n        ]\n    }\n\n    # Check each day's availability for scheduling\n    for day in days:\n        if day == 'Tuesday':  # Nicole prefers not to meet on Tuesday\n            continue\n        if day == 'Thursday' and joe_free == 'avoid':  # Joe prefers to avoid Thursday\n            continue\n\n        # Get Nicole's busy schedule\n        busy_times = nicole_schedule[day]\n        meeting_start_time = work_start\n\n        while meeting_start_time + timedelta(hours=duration) <= work_end:\n            # Check if this time slot is free\n            is_free = True\n            for busy_start, busy_end in busy_times:\n                if meeting_start_time < busy_end and meeting_start_time + timedelta(hours=duration) > busy_start:\n                    is_free = False\n                    break\n                \n            if is_free:\n                return f\"{meeting_start_time.strftime('%H:%M')}:{(meeting_start_time + timedelta(hours=duration)).strftime('%H:%M')}\"\n            meeting_start_time += timedelta(minutes=30)  # Increment time by 30 minutes\n\n# Scheduling the meeting with given constraints\nresult = find_meeting_time('free', 'busy', 1)\nprint(result)\n```",
            "count": "calendar_scheduling_example_810"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\ntheresa_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n]\n\nemily_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n]\n\n# Time constraints\nmeeting_duration = timedelta(minutes=30)\nmeeting_days = ['Tuesday', 'Wednesday']\n\ndef find_time(schedule1, schedule2, duration):\n    # Work hours\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    for start in range(9, 17):  # 9 to 16 (end hour is not inclusive)\n        for minute in (0, 30):  # Check each half hour slot\n            proposed_start = datetime.strptime(f\"{start}:{minute:02d}\", '%H:%M')\n            proposed_end = proposed_start + duration\n            \n            if proposed_start < work_start or proposed_end > work_end:\n                continue\n            \n            # Check if the time slot is free for both participants\n            free_for_theresa = all(not (proposed_start < end and proposed_end > start) for start, end in thera_schedule)\n            free_for_emily = all(not (proposed_start < end and proposed_end > start) for start, end in emily_schedule)\n\n            if free_for_theresa and free_for_emily:\n                return (proposed_start, proposed_end)\n\n# Adjusting schedules per availability\ntheresa_free_time = find_time(theresa_schedule, emily_schedule, meeting_duration)\nif theresa_free_time:\n    print(f\"{theresa_free_time[0].strftime('%H:%M')}:{theresa_free_time[1].strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_811"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules for Mary and Alexis\nmary_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n]\n\nalexis_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find the earliest available time slot\ndef find_earliest_slot(mary_schedule, alexis_schedule, work_start, work_end, meeting_duration):\n    # Combine and sort the schedules\n    busy_times = sorted(mary_schedule + alexis_schedule)\n    \n    # Start checking from the beginning of the work day\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is free\n        is_busy = any(start <= current_time < end for start, end in busy_times)\n        if not is_busy:\n            is_busy = any(start < current_time + meeting_duration <= end for start, end in busy_times)\n        \n        if not is_busy:\n            return (current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"))\n        \n        current_time += timedelta(minutes=15)  # Check the next 15-min interval\n\n    return None\n\n# Find the earliest available time slot\ntime_slot = find_earliest_slot(mary_schedule, alexis_schedule, work_start, work_end, meeting_duration)\n\n# Output the result\noutput = f\"{time_slot[0]}:{time_slot[1]}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_812"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nbrenda_schedule = [(\"09:00\", \"17:00\")]  # No meetings at all\njustin_schedule = [\n    (\"09:30\", \"10:00\"),\n    (\"11:00\", \"12:00\"),\n    (\"13:00\", \"14:00\"),\n    (\"14:30\", \"15:30\"),\n    (\"16:00\", \"17:00\"),\n    (\"09:30\", \"10:00\"),\n    (\"10:30\", \"11:00\"),\n    (\"12:30\", \"14:30\"),\n    (\"15:00\", \"15:30\"),\n    (\"16:30\", \"17:00\"),\n    (\"09:00\", \"09:30\"),\n    (\"10:00\", \"10:30\"),\n    (\"11:00\", \"11:30\"),\n    (\"12:30\", \"13:00\"),\n    (\"14:00\", \"15:30\"),\n    (\"16:30\", \"17:00\"),\n    (\"09:00\", \"10:00\"),\n    (\"10:30\", \"11:00\"),\n    (\"12:30\", \"14:00\"),\n    (\"15:00\", \"15:30\")\n]\n\nmeeting_duration = timedelta(hours=1)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef find_meeting_time(brenda_schedule, justin_schedule, meeting_duration):\n    # Convert schedules to datetime\n    busy_times = []\n    for start, end in justin_schedule:\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n    # Check available time slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        # Check if this time conflicts with Justin's schedule\n        if not any(busy_start < meeting_end and busy_end > meeting_start for busy_start, busy_end in busy_times):\n            return meeting_start.strftime(\"%H:%M:%S\") + \":\" + meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n# Find and print the meeting time\nproposed_time = find_meeting_time(brenda_schedule, justin_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_813"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Defining the meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules for Evelyn and Mark\nevelyn_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\nmark_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\ndef find_earliest_meeting_time():\n    days_to_check = [\"Monday\", \"Tuesday\", \"Thursday\"]  # Skipping Wednesday\n    for day in days_to_check:\n        current_time = work_hours_start\n        # Combine and sort unavailable times from both participants\n        blocked_times = sorted(evelyn_schedule[day] + mark_schedule[day], key=lambda x: x[0])\n        \n        # Check available slots between blocked times\n        for start, end in blocked_times:\n            if current_time + meeting_duration <= start:  # Check if we can schedule before the next blocked time\n                return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n            current_time = max(current_time, end)  # Move current_time to the end of the blocked time\n        \n        # Check if we can schedule after the last blocked time, but still within work hours\n        if current_time + meeting_duration <= work_hours_end:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n    \n    return \"No available slot found\"\n\n# Finding and printing the earliest meeting time\nprint(find_earliest_meeting_time())\n```",
            "count": "calendar_scheduling_example_814"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Define the participant schedules (busy times)\ntimothy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Function to find the next available meeting time\ndef find_meeting_time():\n    for day in ['Monday', 'Wednesday', 'Thursday']:  # Exclude Tuesday\n        busy_times = timothy_schedule[day]\n        available_start = work_start\n\n        for busy_start, busy_end in busy_times:\n            if available_start + meeting_duration <= busy_start:\n                return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n            available_start = max(available_start, busy_end)\n\n        # Check remaining time after the last busy slot\n        if available_start + meeting_duration <= work_end:\n            return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_815"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and constraints\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define schedules\nmelissa_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n}\n\ndiane_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [(working_hours_start, working_hours_end)],\n    \"Wednesday\": [(working_hours_start, working_hours_end)],\n    \"Thursday\": [(working_hours_start, working_hours_end)],\n}\n\n# Finding a suitable time\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        free_slots = []\n        \n        # Finding free slots for Melissa\n        melissa_free = []\n        last_end = working_hours_start\n        \n        for start, end in melissa_schedule[day]:\n            if last_end < start:\n                melissa_free.append((last_end, start))\n            last_end = max(last_end, end)\n        \n        if last_end < working_hours_end:\n            melissa_free.append((last_end, working_hours_end))\n        \n        # Finding free slots for Diane\n        diane_free = []\n        last_end = working_hours_start\n        \n        for start, end in diane_schedule[day]:\n            if last_end < start:\n                diane_free.append((last_end, start))\n            last_end = max(last_end, end)\n        \n        if last_end < working_hours_end:\n            diane_free.append((last_end, working_hours_end))\n        \n        # Finding common available time slots for both\n        for mel_start, mel_end in melissa_free:\n            for dian_start, dian_end in diane_free:\n                start_time = max(mel_start, dian_start)\n                end_time = min(mel_end, dian_end)\n                \n                if end_time - start_time >= meeting_duration:\n                    # Check if we can meet after 16:00 on Monday\n                    if day == \"Monday\" and start_time < datetime.strptime(\"16:00\", \"%H:%M\"):\n                        continue\n                    return start_time.strftime(\"%H:%M\") + \":\" + (start_time + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\nmeeting_time = find_meeting_time()\nprint(f\"Proposed meeting time: {{{meeting_time}}}\")\n```",
            "count": "calendar_scheduling_example_816"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours = {\n    'Monday': (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    'Tuesday': (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    'Wednesday': (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    'Thursday': (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nann_schedule = {\n    'Monday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                  (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Thursday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\njeremy_schedule = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Thursday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                 (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\n# Get common time slots\ndef get_free_time_slots(schedule, working_hours):\n    free_time_slots = []\n    for day, (start, end) in working_hours.items():\n        current_time = start\n        occupied_times = schedule.get(day, [])\n        \n        for occupied_start, occupied_end in occupied_times:\n            if current_time < occupied_start:\n                free_time_slots.append((current_time, occupied_start))\n            current_time = max(current_time, occupied_end)\n            \n        if current_time < end:\n            free_time_slots.append((current_time, end))\n    return free_time_slots\n\nann_free_slots = get_free_time_slots(ann_schedule, working_hours)\njeremy_free_slots = get_free_time_slots(jeremy_schedule, working_hours)\n\n# Find common free slots for both\ndef find_common_slots(ann_slots, jeremy_slots):\n    common_slots = []\n    for a_start, a_end in ann_slots:\n        for j_start, j_end in jeremy_slots:\n            start_max = max(a_start, j_start)\n            end_min = min(a_end, j_end)\n            if start_max < end_min:\n                common_slots.append((start_max, end_min))\n    return common_slots\n\ncommon_free_slots = find_common_slots(ann_free_slots, jeremy_free_slots)\n\n# Get the first available time slot that can accommodate the meeting duration\nfor start, end in common_free_slots:\n    if end - start >= meeting_duration:\n        proposed_start = start.strftime('%H:%M')\n        proposed_end = (start + meeting_duration).strftime('%H:%M')\n        print(f'{{{proposed_start}:{proposed_end}}}')\n        break\n```",
            "count": "calendar_scheduling_example_817"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\ncharles_schedule = {\n    'Monday': [(16, 30, 17, 0)],\n    'Tuesday': [(9, 0, 9, 30)],\n    'Wednesday': [(12, 0, 12, 30), (14, 0, 14, 30)],\n    'Thursday': [(10, 30, 11, 0), (15, 0, 15, 30)]\n}\n\nbetty_schedule = {\n    'Monday': [(9, 0, 9, 30), (10, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 0), (15, 30, 17, 0)],\n    'Tuesday': [(9, 30, 10, 30), (11, 30, 12, 30), (13, 30, 14, 0), (14, 30, 15, 30)],\n    'Wednesday': [(9, 0, 9, 30), (10, 0, 11, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 17, 0)],\n    'Thursday': [(9, 0, 10, 30), (12, 30, 13, 30), (14, 0, 15, 30), (16, 0, 16, 30)]\n}\n\nwork_hours = (9, 0, 17, 0)\nmeeting_duration = timedelta(hours=1)\ndays_to_consider = ['Wednesday', 'Thursday']\n\ndef convert_to_time_slots(schedule):\n    time_slots = []\n    for busy_period in schedule:\n        start_time = datetime(2000, 1, 1, busy_period[0], busy_period[1])\n        end_time = datetime(2000, 1, 1, busy_period[2], busy_period[3])\n        time_slots.append((start_time, end_time))\n    return time_slots\n\ndef find_available_time(charles_schedule, betty_schedule, meeting_duration, work_hours, days_to_consider):\n    for day in days_to_consider:\n        charles_slots = convert_to_time_slots(charles_schedule.get(day, []))\n        betty_slots = convert_to_time_slots(betty_schedule.get(day, []))\n        \n        # Generate the full day time slots\n        day_start = datetime(2000, 1, 1, work_hours[0], work_hours[1])\n        day_end = datetime(2000, 1, 1, work_hours[2], work_hours[3])\n        all_slots = [(day_start, day_end)]\n        \n        # Subtract busy slots\n        for start, end in charles_slots + betty_slots:\n            new_slots = []\n            for all_start, all_end in all_slots:\n                if end <= all_start or start >= all_end:\n                    new_slots.append((all_start, all_end))\n                else:\n                    if all_start < start:\n                        new_slots.append((all_start, start))\n                    if all_end > end:\n                        new_slots.append((end, all_end))\n            all_slots = new_slots\n        \n        # Check for available meeting time\n        for start, end in all_slots:\n            if (end - start) >= meeting_duration:\n                meeting_start = start\n                meeting_end = meeting_start + meeting_duration\n                return (meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\"))\n    \n    return None\n\n# Call the function to find an available time\nmeeting_time = find_available_time(charles_schedule, betty_schedule, meeting_duration, work_hours, days_to_consider)\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\n```",
            "count": "calendar_scheduling_example_818"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules\njulie_schedule = []\nruth_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Monday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Tuesday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Wednesday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),  # Thursday\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),  # Thursday\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))   # Thursday\n]\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find a suitable meeting time\ndef find_meeting_time(julie_schedule, ruth_schedule, work_hours_start, work_hours_end, meeting_duration):\n    # Check preferred day (Thursday) first between 11:30 and 14:30\n    preferred_start = datetime.strptime('11:30', '%H:%M')\n    preferred_end = datetime.strptime('14:30', '%H:%M')\n\n    def is_time_slot_available(start, end):\n        for busy_start, busy_end in ruth_schedule:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n        return True\n\n    proposed_start = preferred_start\n    proposed_end = proposed_start + meeting_duration\n\n    while proposed_end <= preferred_end:\n        if is_time_slot_available(proposed_start, proposed_end):\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n        proposed_start += timedelta(minutes=1)\n        proposed_end = proposed_start + meeting_duration\n    \n    # If no preferred time found, fallback to any available time within work hours\n    proposed_start = work_hours_start\n    while proposed_start + meeting_duration <= work_hours_end:\n        proposed_end = proposed_start + meeting_duration\n        if is_time_slot_available(proposed_start, proposed_end):\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n        proposed_start += timedelta(minutes=1)\n\n# Get the meeting time\nmeeting_time = find_meeting_time(julie_schedule, ruth_schedule, work_hours_start, work_hours_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_819"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "NameError",
            "full_response": "```python\ndef find_meeting_time(evelyn_schedule, nancy_schedule, meeting_duration, work_hours):\n    from datetime import datetime, timedelta\n\n    work_start, work_end = work_hours\n    work_start = datetime.strptime(work_start, '%H:%M')\n    work_end = datetime.strptime(work_end, '%H:%M')\n    \n    # Create a time range for the work hours\n    time_slots = []\n    current_time = work_start\n    while current_time + timedelta(hours=meeting_duration) <= work_end:\n        time_slots.append(current_time.time())\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    \n    # Convert schedules to time ranges\n    def convert_schedule_to_ranges(schedule):\n        busy_times = []\n        for day, times in schedule.items():\n            for start, end in times:\n                busy_times.append((day, start, end))\n        return busy_times\n\n    evelyn_busy_times = convert_schedule_to_ranges(evelyn_schedule)\n    nancy_busy_times = convert_schedule_to_ranges(nancy_schedule)\n\n    # Filter time_slots by checking availability\n    for slot_start in time_slots:\n        slot_end = (datetime.combine(datetime.today(), slot_start) + timedelta(hours=meeting_duration)).time()\n        \n        # Check if slot_start and slot_end is free for both\n        is_free = True\n        for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday']:\n            for busy_time in evelyn_busy_times:\n                if busy_time[0] == day:\n                    if (slot_start >= busy_time[1] and slot_start < busy_time[2]) or \\\n                       (slot_end > busy_time[1] and slot_end <= busy_time[2]) or \\\n                       (slot_start <= busy_time[1] and slot_end >= busy_time[2]):\n                        is_free = False\n                        break\n            \n            for busy_time in nancy_busy_times:\n                if busy_time[0] == day:\n                    if (slot_start >= busy_time[1] and slot_start < busy_time[2]) or \\\n                       (slot_end > busy_time[1] and slot_end <= busy_time[2]) or \\\n                       (slot_start <= busy_time[1] and slot_end >= busy_time[2]):\n                        is_free = False\n                        break\n\n            if not is_free:\n                break\n        \n        if is_free:\n            return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n\n# Define the schedules and the parameters for the meeting\nevelyn_schedule = {\n    'Monday': [(datetime.strptime('10:00', '%H:%M').time(), datetime.strptime('10:30', '%H:%M').time()),\n               (datetime.strptime('11:00', '%H:%M').time(), datetime.strptime('11:30', '%H:%M').time()),\n               (datetime.strptime('13:00', '%H:%M').time(), datetime.strptime('14:00', '%H:%M').time()),\n               (datetime.strptime('14:30', '%H:%M').time(), datetime.strptime('16:00', '%H:%M').time()),\n               (datetime.strptime('16:30', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n               \n    'Tuesday': [(datetime.strptime('10:30', '%H:%M').time(), datetime.strptime('11:00', '%H:%M').time()),\n                (datetime.strptime('12:30', '%H:%M').time(), datetime.strptime('13:00', '%H:%M').time()),\n                (datetime.strptime('14:30', '%H:%M').time(), datetime.strptime('15:30', '%H:%M').time())],\n                \n    'Wednesday': [(datetime.strptime('10:00', '%H:%M').time(), datetime.strptime('10:30', '%H:%M').time()),\n                  (datetime.strptime('13:30', '%H:%M').time(), datetime.strptime('14:30', '%H:%M').time()),\n                  (datetime.strptime('16:30', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n                  \n    'Thursday': [(datetime.strptime('10:00', '%H:%M').time(), datetime.strptime('10:30', '%H:%M').time()),\n                 (datetime.strptime('11:30', '%H:%M').time(), datetime.strptime('12:00', '%H:%M').time()),\n                 (datetime.strptime('12:30', '%H:%M').time(), datetime.strptime('13:30', '%H:%M').time())]\n}\n\nnancy_schedule = {\n    'Monday': [(datetime.strptime('09:30', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('09:30', '%H:%M').time()),\n                (datetime.strptime('10:00', '%H:%M').time(), datetime.strptime('12:30', '%H:%M').time()),\n                (datetime.strptime('13:00', '%H:%M').time(), datetime.strptime('14:00', '%H:%M').time()),\n                (datetime.strptime('14:30', '%H:%M').time(), datetime.strptime('15:00', '%H:%M').time()),\n                (datetime.strptime('15:30', '%H:%M').time(), datetime.strptime('16:30', '%H:%M').time())],\n    'Wednesday': [(datetime.strptime('09:30', '%H:%M').time(), datetime.strptime('10:00', '%H:%M').time()),\n                  (datetime.strptime('10:30', '%H:%M').time(), datetime.strptime('11:00', '%H:%M').time()),\n                  (datetime.strptime('13:00', '%H:%M').time(), datetime.strptime('13:30', '%H:%M').time()),\n                  (datetime.strptime('14:00', '%H:%M').time(), datetime.strptime('15:30', '%H:%M').time()),\n                  (datetime.strptime('16:30', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n                  \n    'Thursday': [(datetime.strptime('09:30', '%H:%M').time(), datetime.strptime('10:00', '%H:%M').time()),\n                 (datetime.strptime('11:00', '%H:%M').time(), datetime.strptime('14:00', '%H:%M').time()),\n                 (datetime.strptime('15:00', '%H:%M').time(), datetime.strptime('15:30', '%H:%M').time()),\n                 (datetime.strptime('16:00', '%H:%M').time(), datetime.strptime('16:30', '%H:%M').time())]\n}\n\nmeeting_duration = 1  # One hour\nwork_hours = ('09:00', '17:00')\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(evelyn_schedule, nancy_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_820"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and days\nworking_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Define the schedules as lists of busy time slots (start, end)\nwaynes_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M'))\n]\n\nronalds_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the next available time slot\ndef find_meeting_time(waynes_schedule, ronalds_schedule):\n    for day in working_days:\n        current_day_start = working_hours_start\n        current_day_end = working_hours_end\n        \n        # Create the unavailable time slots\n        unavailable_slots = waynes_schedule + ronalds_schedule\n        \n        # Sort the unavailable slots\n        unavailable_slots.sort()\n        \n        # Checking for available slots\n        for start, end in unavailable_slots:\n            if start > current_day_start:\n                if (start - current_day_start) >= meeting_duration:\n                    return current_day_start.strftime('%H:%M'), start.strftime('%H:%M')\n            current_day_start = max(current_day_start, end)\n        \n        # Check for remaining time at the end of the day\n        if (current_day_end - current_day_start) >= meeting_duration:\n            return current_day_start.strftime('%H:%M'), (current_day_start + meeting_duration).strftime('%H:%M')\n\nmeeting_start, meeting_end = find_meeting_time(waynes_schedule, ronalds_schedule)\nprint(f'{{{meeting_start}:{meeting_end}}}')\n```",
            "count": "calendar_scheduling_example_821"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant availability\ndef is_available(start, end, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\ndef find_meeting_time(available_slots, meeting_duration):\n    for start_time, end_time in available_slots:\n        if end_time - start_time >= meeting_duration:\n            return (start_time, start_time + meeting_duration)\n    return None\n\ndef main():\n    # Define busy schedules in (start_time, end_time) format\n    amy_busy_times = [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n    \n    michelle_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    # Meeting duration of 1 hour\n    meeting_duration = timedelta(hours=1)\n\n    # Define available time slots for each day\n    available_slots = [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Thursday\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    ]\n\n    # Filter out busy slots\n    filtered_slots = [slot for slot in available_slots if is_available(slot[0], slot[1], amy_busy_times) and is_available(slot[0], slot[1], michelle_busy_times)]\n\n    # Find meeting time\n    meeting_time = find_meeting_time(filtered_slots, meeting_duration)\n    \n    if meeting_time:\n        print(f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\")\n    else:\n        print(\"No suitable meeting time found.\")\n\nmain()\n```",
            "count": "calendar_scheduling_example_822"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(natalie_availability, christian_availability, duration):\n    work_hours = [(9, 17)]  # Work hours from 9:00 to 17:00\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n    for day in days:\n        for start_hour in range(work_hours[0][0], work_hours[0][1]):\n            start_time = datetime.strptime(f'{day} {start_hour}:00', '%A %H:%M')\n            end_time = start_time + timedelta(hours=duration)\n\n            if end_time.hour < work_hours[0][1]:  # Check if end time is still within work hours\n                # Check if Christian is free during this time\n                if is_time_slot_free(start_time, end_time, christian_availability):\n                    return start_time.strftime('%H:%M:%H:%M')\n    \n    return None  # Return None if no time found\n\ndef is_time_slot_free(start_time, end_time, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if not (end_time <= busy_start or start_time >= busy_end):\n            return False  # Overlap\n    return True  # No overlap\n\n# Define the constraints\nnatalie_availability = [(9, 17)]  # Entire week free\nchristian_availability = [\n    (9, 9.5), (10, 14.5), (15, 16), (16.5, 17),  # Monday\n    (9.5, 14.5), (15.5, 17),                   # Tuesday\n    (9.5, 10), (10.5, 16.5),                    # Wednesday\n    (9, 9.5), (10, 10.5), (11, 11.5), (12, 12.5), (13.5, 14.5), (15.5, 17)  # Thursday\n]\nduration = 1  # 1 hour meeting\n\n# Find a suitable time\nmeeting_time = find_meeting_time(natalie_availability, christian_availability, duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_823"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and days\nworking_hours = {\n    'Monday': [(9, 0), (17, 0)],\n    'Tuesday': [(9, 0), (17, 0)],\n    'Wednesday': [(9, 0), (17, 0)],\n    'Thursday': [(9, 0), (17, 0)]\n}\n\n# Define Timothy's blocked time slots\ntimothy_schedule = {\n    'Monday': [\n        (9, 0, 9, 30), (10, 0, 11, 30), (12, 30, 13, 30),\n        (15, 0, 15, 30), (16, 0, 17, 0)\n    ],\n    'Tuesday': [\n        (9, 30, 10, 30), (11, 30, 13, 0), (13, 30, 14, 30),\n        (15, 30, 16, 0)\n    ],\n    'Wednesday': [\n        (9, 0, 9, 30), (10, 0, 11, 0), (11, 30, 16, 0),\n        (16, 30, 17, 0)\n    ],\n    'Thursday': [\n        (9, 0, 17, 0)\n    ]\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(hours=1)\navoid_meeting_after = [(13, 30)]\n\n# Function to check if a time slot is free\ndef is_time_slot_free(day, start_hour, end_hour):\n    for start_h, start_m, end_h, end_m in timothy_schedule.get(day, []):\n        busy_start = datetime(2023, 10, 1, start_h, start_m)\n        busy_end = datetime(2023, 10, 1, end_h, end_m)\n        desired_start = datetime(2023, 10, 1, start_hour, 0)\n        desired_end = desired_start + meeting_duration\n        if (desired_start < busy_end) and (desired_end > busy_start):\n            return False\n    return True\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in working_hours.keys():\n        for hour in range(working_hours[day][0][0], working_hours[day][0][1]):\n            for minute in range(0, 60):  # Check each minute of the hour\n                if (hour, minute) > (13, 30):  # Avoid late meeting on Monday\n                    continue\n                if is_time_slot_free(day, hour, hour + 1):  # Check if 1 hour slot is free\n                    return f\"{hour:02}:{minute:02}:{hour+1:02}:{minute:02}\"\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(f\"Proposed Meeting Time: {{{proposed_time}}}\")\n```",
            "count": "calendar_scheduling_example_824"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\n# Meeting Scheduler\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nlaura_schedule = {\n    \"Monday\": [(10, 30, 11, 0), (12, 30, 13, 0), (14, 30, 15, 30), (16, 0, 17, 0)],\n    \"Tuesday\": [(9, 30, 10, 0), (11, 0, 11, 30), (13, 0, 13, 30), (14, 30, 15, 0), (16, 0, 17, 0)],\n    \"Wednesday\": [(11, 30, 12, 0), (12, 30, 13, 0), (15, 30, 16, 30)],\n    \"Thursday\": [(10, 30, 11, 0), (12, 0, 13, 30), (15, 0, 15, 30), (16, 0, 16, 30)]\n}\n\nphilip_schedule = {\n    \"Monday\": [(9, 0, 17, 0)],\n    \"Tuesday\": [(9, 0, 11, 0), (11, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 0, 16, 30)],\n    \"Wednesday\": [(9, 0, 10, 0), (11, 0, 12, 0), (12, 30, 17, 0)],\n    \"Thursday\": [(9, 0, 10, 30), (11, 0, 12, 30), (13, 0, 17, 0)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find free time slots\ndef find_free_time_slots(schedule):\n    work_start = (9, 0)\n    work_end = (17, 0)\n    \n    free_slots = []\n    \n    for day, busy_times in schedule.items():\n        # Convert busy times to datetime objects\n        busy_periods = [datetime.strptime(f\"{day} {start[0]}:{start[1]}\", \"%A %H:%M\") \n                        for start in busy_times]\n        \n        busy_periods.sort()\n        \n        current_start = datetime.strptime(f\"{day} {work_start[0]}:{work_start[1]}\", \"%A %H:%M\")\n        end_of_workday = datetime.strptime(f\"{day} {work_end[0]}:{work_end[1]}\", \"%A %H:%M\")\n        \n        # Check for free slots in between busy times\n        for busy_start, busy_end in zip(busy_periods, busy_periods[1:]):\n            if current_start + meeting_duration <= busy_start:\n                free_slots.append((current_start, busy_start))\n            current_start = max(current_start, busy_end)\n        \n        # Check end of workday\n        if current_start + meeting_duration <= end_of_workday:\n            free_slots.append((current_start, end_of_workday))\n    \n    return free_slots\n\n# Find free slots for Laura and Philip\nlaura_free_slots = find_free_time_slots(laura_schedule)\nphilip_free_slots = find_free_time_slots(philip_schedule)\n\n# Find overlapping free slots\nfor day in laura_schedule.keys():\n    for laura_slot in laura_free_slots:\n        if laura_slot[0].strftime(\"%A\") == day:\n            for philip_slot in philip_free_slots:\n                if philip_slot[0].strftime(\"%A\") == day:\n                    # Check for overlap\n                    start_time = max(laura_slot[0], philip_slot[0])\n                    end_time = min(laura_slot[1], philip_slot[1])\n                    if start_time + meeting_duration <= end_time:\n                        proposed_time = f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n                        print(f\"{proposed_time}\")\n                        break\n```",
            "count": "calendar_scheduling_example_825"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# James's schedule\njames_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n}\n\n# Function to check for available meeting times\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Thursday\"]:  # Exclude Wednesday\n        busy_times = james_schedule[day]\n        current_time = work_hours_start\n        \n        while current_time + meeting_duration <= work_hours_end:\n            # Check if current_time is available\n            is_available = True\n            \n            for start, end in busy_times:\n                if current_time < end and current_time + meeting_duration > start:\n                    is_available = False\n                    break\n            \n            if is_available:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Move to the next possible start time\n            \n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_826"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nangela_schedule = {\n    \"Monday\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"))],\n    \"Wednesday\": [],\n    \"Thursday\": [(datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n}\n\npatrick_schedule = {\n    \"Monday\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(durations_minutes=30):\n    meeting_duration = timedelta(minutes=durations_minutes)\n    days = [\"Tuesday\", \"Wednesday\", \"Thursday\"]\n    \n    for day in days:\n        angela_free_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n        patrick_free_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n        # Check Angela's occupied slots\n        for start, end in angela_schedule[day]:\n            new_slots = []\n            for free_start, free_end in angela_free_slots:\n                if free_start < start < free_end:\n                    new_slots.append((free_start, start))\n                if free_start < end < free_end:\n                    new_slots.append((end, free_end))\n                if start <= free_start and free_end <= end:\n                    continue\n                new_slots.append((free_start, free_end))\n            angela_free_slots = new_slots\n\n        # Check Patrick's occupied slots\n        for start, end in patrick_schedule[day]:\n            new_slots = []\n            for free_start, free_end in patrick_free_slots:\n                if free_start < start < free_end:\n                    new_slots.append((free_start, start))\n                if free_start < end < free_end:\n                    new_slots.append((end, free_end))\n                if start <= free_start and free_end <= end:\n                    continue\n                new_slots.append((free_start, free_end))\n            patrick_free_slots = new_slots\n        \n        # Find overlapping slots\n        for a_start, a_end in angela_free_slots:\n            for p_start, p_end in patrick_free_slots:\n                start = max(a_start, p_start)\n                end = min(a_end, p_end)\n                if end - start >= meeting_duration:\n                    meeting_start = start\n                    meeting_end = start + meeting_duration\n                    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Call the function to find meeting time\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_827"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(frances_schedule, christina_schedule, meeting_duration, preferred_days):\n    # Convert string schedules into datetime objects\n    def parse_schedule(schedule):\n        busy_times = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            busy_times.append((datetime.strptime(start_time, '%H:%M'), datetime.strptime(end_time, '%H:%M')))\n        return busy_times\n\n    frances_busy = parse_schedule(frances_schedule)\n    christina_busy = parse_schedule(christina_schedule)\n\n    # Define working hours\n    working_hours = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    \n    # Generate all possible meeting times\n    possible_times = []\n    for day in preferred_days:\n        for start in range(working_hours[0][0].hour, working_hours[0][1].hour):\n            start_datetime = datetime.strptime(f'{start}:00', '%H:%M')\n            # Check if the meeting can fit in the times\n            end_datetime = start_datetime + timedelta(minutes=meeting_duration)\n\n            if end_datetime <= working_hours[0][1]:\n                possible_times.append((start_datetime, end_datetime))\n    \n    # Find the first available time for both Frances and Christina\n    for start, end in possible_times:\n        if not any(start < busy_end and end > busy_start for busy_start, busy_end in frances_busy) and \\\n           not any(start < busy_end and end > busy_start for busy_start, busy_end in christina_busy) and \\\n           start.strftime('%A') != 'Wednesday':  # Avoid Wednesday for Frances\n            return f'{start.strftime(\"%H:%M\")}:{end.strftime(\"%H:%M\")}'\n    \n    return None\n\n# define the schedules\nfrances_schedule = [\n    '10:00 to 10:30',\n    '13:30 to 14:00',\n    '14:30 to 15:00',\n    '10:00 to 10:30',\n    '13:00 to 13:30',\n    '14:00 to 14:30',\n    '11:30 to 12:00',\n    '13:00 to 13:30',\n    '14:30 to 15:00',\n    '16:30 to 17:00'\n]\n\nchristina_schedule = [\n    '09:00 to 09:30',\n    '10:00 to 10:30',\n    '12:30 to 14:30',\n    '15:30 to 17:00',\n    '09:00 to 11:30',\n    '12:00 to 12:30',\n    '13:00 to 15:30',\n    '16:00 to 17:00',\n    '09:30 to 10:00',\n    '10:30 to 11:00',\n    '13:00 to 13:30',\n    '15:00 to 15:30',\n    '16:00 to 17:00',\n    '09:00 to 10:00',\n    '10:30 to 12:00',\n    '14:30 to 15:00'\n]\n\n# desired meeting duration and days\nmeeting_duration = 30  # in minutes\npreferred_days = ['Monday', 'Tuesday', 'Thursday']  # No meetings on Wednesday\n\n# find and print the meeting time\nmeeting_time = find_meeting_time(frances_schedule, christina_schedule, meeting_duration, preferred_days)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_828"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and constraints\nwork_hours = [\n    (\"Monday\", (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))),\n    (\"Tuesday\", (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))),\n    (\"Wednesday\", (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))),\n    (\"Thursday\", (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))),\n]\n\n# Rachel's schedule\nrachel_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Carolyn's schedule\ncarolyn_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find a suitable time\ndef find_meeting_time():\n    for day, (start, end) in work_hours:\n        # Skip Mondays as Rachel can't meet on Monday\n        if day == \"Monday\":\n            continue\n        \n        # Calculate free slots\n        blocked_times = []\n        if day in rachel_schedule:\n            blocked_times.extend(rachel_schedule[day])\n        if day in carolyn_schedule:\n            blocked_times.extend(carolyn_schedule[day])\n        \n        # Create a list of times to check for free slots\n        blocked_times.sort()\n        free_slots = []\n        current_time = start\n        \n        for blocked_start, blocked_end in blocked_times:\n            while current_time + meeting_duration <= blocked_start:\n                free_slots.append((current_time, current_time + meeting_duration))\n                current_time += timedelta(minutes=30)  # Check next half hour slot\n            \n            current_time = max(current_time, blocked_end)\n        \n        # Check until the end of the work hours\n        while current_time + meeting_duration <= end:\n            free_slots.append((current_time, current_time + meeting_duration))\n            current_time += timedelta(minutes=30)\n        \n        # Return the first available time\n        if free_slots:\n            meeting_time = free_slots[0]\n            return f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\"\n    \n    return None\n\n# Generate proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_829"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(larry_schedule, marilyn_schedule, meeting_duration):\n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of all possible time slots\n    possible_times = []\n    \n    # Check each day for valid meeting times\n    for day in larry_schedule.keys():\n        larry_busy_slots = larry_schedule[day]\n        marilyn_busy_slots = marilyn_schedule[day]\n        \n        # Merge busy slots for both participants\n        busy_slots = larry_busy_slots + marilyn_busy_slots\n        busy_slots.sort()\n        \n        # Check time slots between busy intervals\n        current_time = work_start\n        for start, end in busy_slots:\n            while current_time + timedelta(hours=meeting_duration) <= start:\n                possible_times.append(current_time)\n                current_time += timedelta(minutes=30)  # Increment by 30 minutes\n            current_time = max(current_time, end)\n        \n        # Check remaining time after the last busy slot\n        if current_time + timedelta(hours=meeting_duration) <= work_end:\n            possible_times.append(current_time)\n    \n    # Filter possible times against preferences\n    preferred_times = [time for time in possible_times if time.time() < datetime.strptime(\"14:00\", \"%H:%M\").time() or (day != \"Wednesday\")]\n    \n    if preferred_times:\n        meeting_time = preferred_times[0]  # Take the first valid time\n        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(hours=meeting_duration)).strftime('%H:%M')}\"\n    \n    return \"No available meeting times found\"\n\n# Existing schedules\nlarry_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmarilyn_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration in hours\nmeeting_duration = 1\n\n# Find meeting time\nmeeting_time = find_meeting_time(larry_schedule, marilyn_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_830"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules of participants\nkayla_schedule = [\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Thursday\n]\n\nmatthew_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Thursday\n]\n\n# Meeting Duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a free time slot\ndef find_meeting_time(kayla_schedule, matthew_schedule, meeting_duration):\n    work_days = ['Monday', 'Tuesday', 'Thursday']\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    for day in work_days:\n        # Create the unavailable blocks for each participant\n        unavailable = []\n        if day == 'Monday':\n            unavailable += kayla_schedule[:1] + matthew_schedule[:1]\n        elif day == 'Tuesday':\n            unavailable += kayla_schedule[1:4] + matthew_schedule[1:5]\n        elif day == 'Thursday':\n            unavailable += kayla_schedule[7:11] + matthew_schedule[8:11]\n        \n        # Find free slots\n        current_time = start_of_day\n        unavailable.sort()  # Sort the unavailable times\n        \n        for start, end in unavailable:\n            while current_time + meeting_duration <= end_of_day and current_time + meeting_duration <= start:\n                if all(not (current_time < end and current_time + meeting_duration > start) for start, end in unavailable):\n                    return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n                current_time += timedelta(minutes=30)\n            current_time = max(current_time, end)\n        \n        # Final check at the end of day\n        if current_time + meeting_duration <= end_of_day:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n# Proposed meeting time\nproposed_time = find_meeting_time(kayla_schedule, matthew_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_831"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration and work hours\nmeeting_duration = timedelta(hours=1)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define busy schedules for Jose and Judith\njose_busy = [\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))   # Thursday\n]\n\njudith_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))   # Thursday\n]\n\n# Combine and sort all busy intervals\nbusy_intervals = jose_busy + judith_busy\nbusy_intervals.sort(key=lambda x: x[0])\n\n# Function to find an available slot\ndef find_meeting_slot():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check if the proposed time conflicts with any busy intervals\n        conflict = False\n        for start, end in busy_intervals:\n            if (meeting_start < end and meeting_end > start):  # There is an overlap\n                conflict = True\n                break\n        \n        # Return the time if no conflict exists\n        if not conflict:\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    \n    return None  # If no slot found\n\n# Get and print the proposed time for the meeting\nproposed_time = find_meeting_slot()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_832"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(frances_schedule, hannah_schedule, duration, constraints):\n    work_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    \n    # Convert schedules to a list of busy intervals\n    busy_intervals = []\n    for start, end in frances_schedule + hannah_schedule:\n        busy_intervals.append((start, end))\n\n    # Sort intervals by start time\n    busy_intervals.sort(key=lambda x: x[0])\n\n    # Create a time range for the meeting based on constraints\n    available_times = []\n    current_time = constraints['start']\n\n    while current_time + duration <= work_hours[1]:\n        next_time = current_time + duration\n        \n        # Check if current_time to next_time is free\n        if all(not (current_time < end and next_time > start) for start, end in busy_intervals):\n            available_times.append((current_time, next_time))\n        \n        current_time += timedelta(minutes=1)\n        \n        # Break if we have found a suitable time\n        if available_times:\n            break\n\n    # Return the first valid meeting time found in required format\n    if available_times:\n        start_time = available_times[0][0].strftime(\"%H:%M\")\n        end_time = available_times[0][1].strftime(\"%H:%M\")\n        return f\"{start_time}:{end_time}\"\n\n# Participant schedules\nfrances_schedule = [\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\nhannah_schedule = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nduration = timedelta(minutes=30)\n\n# Constraints\nconstraints = {\n    'start': datetime.strptime(\"09:00\", \"%H:%M\"),\n    'end': datetime.strptime(\"15:00\", \"%H:%M\")\n}\n\n# Get the meeting time proposal\nmeeting_time = find_meeting_time(frances_schedule, hannah_schedule, duration, constraints)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_833"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time range for the meeting and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Joseph's schedule\njoseph_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    # ... (same for Tuesday, Wednesday, Thursday)\n}\n\n# Donna's schedule\ndonna_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    # ... (same for Tuesday, Wednesday, Thursday)\n}\n\n# Combine schedules for both participants\ndef is_time_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        start = work_start\n        while start + meeting_duration <= work_end:\n            end = start + meeting_duration\n            if (is_time_available(start, end, joseph_schedule[day]) and\n                is_time_available(start, end, donna_schedule[day])):\n                return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n            start += timedelta(minutes=30)  # Check next half-hour slot\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```\n",
            "count": "calendar_scheduling_example_834"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time():\n    # Define the work hours and meeting duration\n    work_hours = (9, 17)\n    meeting_duration = 0.5  # in hours\n\n    # Existing schedules for Virginia and Ruth\n    virginia_schedule = {\n        'Monday': [(9, 10), (12, 13), (15, 15.5), (16.5, 17)],\n        'Tuesday': [(10.5, 11.5), (13.5, 14), (14.5, 15)],\n        'Wednesday': [(10.5, 11), (13.5, 14.5), (15, 15.5), (16.5, 17)],\n        'Thursday': [(9, 10), (10.5, 12), (13, 14), (15, 17)]\n    }\n\n    ruth_schedule = {\n        'Monday': [(9, 9.5), (10, 10.5), (11, 12.5), (13.5, 14), (14.5, 17)],\n        'Tuesday': [(9, 9.5), (11.5, 13), (13.5, 15), (15.5, 16)],\n        'Wednesday': [(9, 10), (10.5, 13.5), (14, 14.5), (15, 15.5), (16, 17)],\n        'Thursday': [(9, 10), (10.5, 11), (12, 13.5), (14, 15), (16.5, 17)]\n    }\n\n    available_times = []\n\n    # Check only Tuesday and Wednesday for availability\n    days_to_check = ['Tuesday', 'Wednesday']\n    \n    for day in days_to_check:\n        virginia_free_times = [(work_hours[0], work_hours[1])]  # start with full availability\n        \n        # Subtract Virginia's blocked times\n        for start, end in virginia_schedule[day]:\n            virginia_free_times = [t for time in virginia_free_times for t in [(time[0], start), (end, time[1])] if time[0] < start and end < time[1]] \n        \n        ruth_free_times = [(work_hours[0], work_hours[1])]  # start with full availability\n        \n        # Subtract Ruth's blocked times\n        for start, end in ruth_schedule[day]:\n            ruth_free_times = [t for time in ruth_free_times for t in [(time[0], start), (end, time[1])] if time[0] < start and end < time[1]] \n\n        # Find common free times for both participants\n        for v_start, v_end in virginia_free_times:\n            for r_start, r_end in ruth_free_times:\n                start = max(v_start, r_start)\n                end = min(v_end, r_end)\n                if end - start >= meeting_duration:\n                    available_times.append((day, start))\n\n    # Get the earliest available time\n    earliest_time = min(available_times, key=lambda x: x[1])\n    meeting_start = earliest_time[1]\n    meeting_end = meeting_start + meeting_duration\n\n    # Convert the times to HH:MM format\n    meeting_start_hour = int(meeting_start)\n    meeting_start_minute = int((meeting_start - meeting_start_hour) * 60)\n    meeting_end_hour = int(meeting_end)\n    meeting_end_minute = int((meeting_end - meeting_end_hour) * 60)\n\n    return f\"{meeting_start_hour:02}:{meeting_start_minute:02}:{meeting_end_hour:02}:{meeting_end_minute:02}\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_835"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' time blocks\nmelissa_schedule = {\n    'Monday': [(11, 0, 11, 30), (13, 0, 13, 30), (14, 30, 15, 0), (15, 30, 16, 30)],\n    'Tuesday': [(9, 30, 10, 0), (11, 30, 12, 0), (13, 0, 13, 30), (15, 0, 15, 30)],\n    'Wednesday': [(13, 30, 14, 0), (14, 30, 15, 0)],\n    'Thursday': [(9, 0, 9, 30), (10, 30, 11, 0), (13, 0, 13, 30), (15, 30, 16, 0), (16, 30, 17, 0)],\n}\n\nrichard_schedule = {\n    'Monday': [(9, 0, 10, 30), (11, 0, 12, 30), (13, 0, 13, 30), (14, 0, 15, 0), (16, 0, 17, 0)],\n    'Tuesday': [(9, 30, 10, 0), (10, 30, 12, 30), (13, 30, 14, 0), (14, 30, 15, 0), (15, 30, 17, 0)],\n    'Wednesday': [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 13, 0), (14, 0, 15, 0), (16, 0, 16, 30)],\n    'Thursday': [(9, 0, 10, 0), (10, 30, 11, 0), (11, 30, 13, 0), (13, 30, 15, 0), (15, 30, 17, 0)],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a suitable time\ndef find_meeting_time(melissa_schedule, richard_schedule, meeting_duration):\n    for day in melissa_schedule.keys():\n        melissa_busy = melissa_schedule[day]\n        richard_busy = richard_schedule[day]\n\n        # Combine busy times for both participants\n        busy_times = melissa_busy + richard_busy\n        busy_times.sort()\n\n        # Work hours for meeting\n        start_of_day = datetime.strptime('09:00', '%H:%M')\n        end_of_day = datetime.strptime('17:00', '%H:%M')\n\n        # Check for available slots\n        last_end_time = start_of_day\n        for start_h, start_m, end_h, end_m in busy_times:\n            current_start = datetime(year=2023, month=10, day=1, hour=start_h, minute=start_m)\n            current_end = datetime(year=2023, month=10, day=1, hour=end_h, minute=end_m)\n\n            # Check if there's enough time before the next busy period\n            if last_end_time + meeting_duration <= current_start:\n                return last_end_time.strftime('%H:%M') + ':' + (last_end_time + meeting_duration).strftime('%H:%M')\n\n            # Update the last end time\n            if current_end > last_end_time:\n                last_end_time = current_end\n\n        # Check end of day availability\n        if last_end_time + meeting_duration <= end_of_day:\n            return last_end_time.strftime('%H:%M') + ':' + (last_end_time + meeting_duration).strftime('%H:%M')\n\n# Execute the function\nproposed_time = find_meeting_time(melissa_schedule, richard_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_836"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' schedules\nscott_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nhenry_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_available_time(start, end):\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        blocked_times = []\n        if day == \"Monday\":\n            blocked_times = scott_schedule[:2] + henry_schedule[:6]  # Only first 6 of Henry's schedule\n        elif day == \"Tuesday\":\n            blocked_times = scott_schedule[2:] + henry_schedule  # All of Scott's following schedule + all of Henry's\n        elif day == \"Wednesday\":\n            blocked_times = scott_schedule[4:] + henry_schedule[0:7]  # All of Scott's following schedule + all of Henry's except the last two\n        elif day == \"Thursday\":\n            blocked_times = scott_schedule[5:] + henry_schedule[0:10]  # All of Scott's following schedule + all of Henry's except for the last\n\n        # Calculate possible time slots\n        current_time = start\n        while current_time + meeting_duration <= end:\n            if all(not (current_time < end_time and current_time + meeting_duration > start_time)\n               for start_time, end_time in blocked_times):\n                return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n            \n    return None\n\n# Find the available time\nmeeting_start, meeting_end = find_available_time(start_time, end_time)\nprint(f\"{meeting_start}:{meeting_end}\")\n```",
            "count": "calendar_scheduling_example_837"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the busy schedules for Laura and Marie\nlaura_busy_times = [\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\nmarie_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    # Loop through Tuesday and Wednesday\n    for day in [\"Tuesday\", \"Wednesday\"]:\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            end_time = current_time + meeting_duration\n            \n            # Check if current time overlaps with any busy time for Laura or Marie\n            if all(not (busy_start < end_time and busy_end > current_time) for busy_start, busy_end in laura_busy_times) and \\\n               all(not (busy_start < end_time and busy_end > current_time) for busy_start, busy_end in marie_busy_times):\n                # Found a suitable time\n                return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Increment to find the next slot\n            \n    return None  # If no suitable time found\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_838"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nwork_start_time = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define schedules for Alan and Shirley\nalan_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nshirley_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Combine schedules\ndef is_time_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\ndef find_meeting_time():\n    current_time = work_start_time\n    while current_time + meeting_duration <= work_end_time:\n        proposed_end_time = current_time + meeting_duration\n\n        if (is_time_available(current_time, proposed_end_time, alan_schedule) and \n            is_time_available(current_time, proposed_end_time, shirley_schedule)):\n            return f\"{current_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')}\"\n\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\nresult = find_meeting_time()\nprint(result)\n```",
            "count": "calendar_scheduling_example_839"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules as a list of tuples (start_time, end_time)\nscott_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nsteven_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nmeeting_duration = timedelta(hours=1)\n\n# Define working hours and days\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nworking_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\n# Function to find a suitable time\ndef find_meeting_time(scott_schedule, steven_schedule, meeting_duration):\n    day_slots = []\n    for day in working_days:\n        start_of_day = working_hours[0]\n        end_of_day = working_hours[1]\n\n        # Merge Scott's and Steven's schedules and find available slots\n        busy_times = scott_schedule + steven_schedule\n        \n        # Sorting busy times\n        busy_times.sort()\n\n        # Finding free slots\n        current_time = start_of_day\n        for start, end in busy_times:\n            if current_time + meeting_duration <= start:\n                available_until = start\n                while current_time + meeting_duration <= available_until:\n                    # Check if the meeting fits in the current available slot\n                    if current_time + meeting_duration <= busy_times[0][0]:\n                        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n                    current_time += meeting_duration\n            current_time = max(current_time, end)\n        \n        # After checking all busy times, check till the end of the day\n        if current_time + meeting_duration <= end_of_day:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n# Calling the function to find a meeting time\nscheduled_time = find_meeting_time(scott_schedule, steven_schedule, meeting_duration)\nprint(scheduled_time)\n```",
            "count": "calendar_scheduling_example_840"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Susan's blocked times\nsusan_schedule = [\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), working_hours_end)\n]\n\n# Aaron's blocked times\naaron_schedule = [\n    (working_hours_start, datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), working_hours_end)\n]\n\n# Function to find available meeting time\ndef find_meeting_time():\n    for hour in range(working_hours_start.hour, working_hours_end.hour):\n        for minute in [0, 30]:\n            proposed_start = datetime.strptime(f'{hour:02}:{minute:02}', '%H:%M')\n            proposed_end = proposed_start + meeting_duration\n            \n            if proposed_end > working_hours_end:\n                continue\n            \n            # Check if the proposed time conflicts with Susan's schedule\n            if any(start < proposed_end and proposed_start < end for start, end in susan_schedule):\n                continue\n            \n            # Check if the proposed time conflicts with Aaron's schedule\n            if any(start < proposed_end and proposed_start < end for start, end in aaron_schedule):\n                continue\n            \n            # Ensure Susan prefers not to meet after 11:00 on Monday\n            if proposed_start.weekday() == 0 and proposed_start > datetime.strptime('11:00', '%H:%M'):\n                continue\n            \n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    \n    return \"No suitable time found\"\n\n# Run the function and print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_841"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nashley_schedule = {\n    \"Monday\": [(9, 0, 9, 30), (10, 0, 11, 30), (13, 30, 14, 0), (15, 0, 15, 30), (16, 0, 16, 30)],\n    \"Tuesday\": [(9, 30, 11, 0), (14, 0, 14, 30), (16, 30, 17, 0)],\n    \"Wednesday\": [(9, 0, 10, 0), (11, 0, 12, 30), (13, 0, 13, 30), (14, 30, 15, 0), (15, 30, 16, 30)],\n    \"Thursday\": [(9, 0, 10, 0), (12, 30, 13, 30), (14, 30, 15, 0)]\n}\n\ngloria_schedule = {\n    \"Monday\": [(9, 0, 17, 0)],\n    \"Tuesday\": [(10, 0, 11, 0), (11, 30, 12, 0), (13, 0, 16, 0), (16, 30, 17, 0)],\n    \"Wednesday\": [(9, 0, 10, 0), (11, 0, 11, 30), (12, 0, 12, 30), (13, 30, 16, 30)],\n    \"Thursday\": [(9, 0, 11, 0), (12, 0, 14, 0), (14, 30, 16, 0), (16, 30, 17, 0)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Work hours\nwork_hours_start = 9\nwork_hours_end = 17\n\ndef find_time(slot1, slot2):\n    for start1, end1 in slot1:\n        for start2, end2 in slot2:\n            start_time = max(datetime(2023, 10, 2, start1), datetime(2023, 10, 2, start2))  # Example date given\n            end_time = start_time + meeting_duration\n            \n            if end_time.time() <= datetime(2023, 10, 2, min(end1, end2)).time():\n                return start_time.time(), end_time.time()\n    return None, None\n\n# Find the earliest available time\nearliest_time = None\n\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n    ashley_slots = ashley_schedule[day]\n    gloria_slots = gloria_schedule[day]\n    \n    start_time, end_time = find_time(ashley_slots, gloria_slots)\n    \n    if start_time is not None:\n        if earliest_time is None or start_time < earliest_time[0]:\n            earliest_time = (start_time, end_time)\n\n# Output the earliest available time\nif earliest_time:\n    print(f\"{earliest_time[0]:%H:%M}:{earliest_time[1]:%H:%M}\")\n```",
            "count": "calendar_scheduling_example_842"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the participants' schedules\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\ncynthia_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Thursday\n]\n\nwillie_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Thursday\n]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in range(4):  # Monday to Thursday\n        current_time = work_hours_start\n        while current_time + meeting_duration <= work_hours_end:\n            meeting_start = current_time\n            meeting_end = current_time + meeting_duration\n            \n            # Check if the time conflicts with Cynthia's schedule\n            cynthia_busy = any(start < meeting_end and end > meeting_start for start, end in cynthia_schedule)\n            # Check if the time conflicts with Willie's schedule\n            willie_busy = any(start < meeting_end and end > meeting_start for start, end in willie_schedule)\n            \n            if not cynthia_busy and not willie_busy:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Increment by 30 minutes\n            \n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_843"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participant_schedules, meeting_duration):\n    work_hours = (9, 17)\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n    available_slots = {}\n\n    # Initialize available slots for each day\n    for day in days:\n        available_slots[day] = []\n\n    # Convert the time slots into datetime objects for easier manipulation\n    for day, schedule in participant_schedules.items():\n        schedule.sort()  # Sort the existing meetings\n        current_start_time = datetime.strptime(f\"{day} {work_hours[0]}:00\", \"%A %H:%M\")\n\n        # Check for gaps between existing meeting times\n        for start, end in schedule:\n            # If there is a gap before the first meeting\n            if current_start_time < start:\n                available_slots[day].append((current_start_time, start))\n            # Move the current time to end of the current meeting\n            current_start_time = max(current_start_time, end)\n\n        # Check if there's time after the last meeting until work end\n        end_of_work = datetime.strptime(f\"{day} {work_hours[1]}:00\", \"%A %H:%M\")\n        if current_start_time < end_of_work:\n            available_slots[day].append((current_start_time, end_of_work))\n\n    # Find a common time slot that works for all participants\n    for day in days:\n        for start, end in available_slots[day]:\n            if (end - start) >= meeting_duration:\n                proposed_start = start\n                proposed_end = start + meeting_duration\n                return proposed_start.strftime(\"%H:%M\") + \":\" + proposed_end.strftime(\"%H:%M\")\n\nmeeting_duration = timedelta(hours=1)\n\nparticipant_schedules = {\n    \"Monday\": [\n        (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 15:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"Thursday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 11:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 16:30\", \"%A %H:%M\")),\n    ]\n}\n\n# Deborah's schedule\ndeborah_schedule = {\n    \"Monday\": [(datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\"))],\n    \"Tuesday\": [\n        (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 15:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"Thursday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 10:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 13:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 16:30\", \"%A %H:%M\")),\n    ]\n}\n\n# Combine schedules\nfor day in deborah_schedule:\n    if day in participant_schedules:\n        participant_schedules[day].extend(deborah_schedule[day])\n\n# Find meeting time\nresult = find_meeting_time(participant_schedules, meeting_duration)\nprint(result)\n```",
            "count": "calendar_scheduling_example_844"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(anna_schedule, christian_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=meeting_duration)\n\n    # Create a time slot for each participant\n    full_day_slots = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        full_day_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every 30 minutes slot\n\n    # Check for overlapping free time slots\n    for start_time in full_day_slots:\n        end_time = start_time + meeting_duration\n\n        # Check Anna's schedule restrictions\n        if any((start_time < a[1] and end_time > a[0]) for a in anna_schedule):\n            continue  # Anna is busy in this time slot\n\n        # Check Christian's schedule restrictions\n        if any((start_time < c[1] and end_time > c[0]) for c in christian_schedule):\n            continue  # Christian is busy in this time slot\n\n        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Participant schedules\nanna_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nchristian_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration: 1 hour\nmeeting_duration = 1\n\n# Find suitable meeting time\nproposed_time = find_meeting_time(anna_schedule, christian_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_845"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the available time frame\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define busy times for Jesse\njesse_busy_times = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\n# Define busy times for Raymond\nraymond_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if two time periods overlap\ndef is_overlapping(start1, end1, start2, end2):\n    return max(start1, start2) < min(end1, end2)\n\n# Function to check if a time slot is available\ndef is_available(start, duration, busy_times):\n    end = start + duration\n    for busy_start, busy_end in busy_times:\n        if is_overlapping(start, end, busy_start, busy_end):\n            return False\n    return True\n\n# Finding available meeting time\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if (is_available(current_time, meeting_duration, jesse_busy_times) and\n            is_available(current_time, meeting_duration, raymond_busy_times)):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_846"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(bradley_schedule, bruce_schedule, duration):\n    # Work hours\n    work_hours = {\n        \"Monday\": [(9, 17)],\n        \"Tuesday\": [(9, 17)],\n        \"Wednesday\": [(9, 17)],\n        \"Thursday\": [(9, 17)],\n    }\n    \n    # Merge schedules into a unified timeline\n    blocked_times = {day: [] for day in work_hours.keys()}\n    for day in blocked_times.keys():\n        # Placeholder for availability\n        available_times = []\n        start_time = work_hours[day][0][0]\n        end_time = work_hours[day][0][1]\n        \n        # Bradley's schedule\n        for start, end in bradley_schedule.get(day, []):\n            blocked_times[day].append((start, end))\n        \n        # Bruce's schedule\n        for start, end in bruce_schedule.get(day, []):\n            blocked_times[day].append((start, end))\n        \n        # Sort blocked times\n        blocked_times[day].sort()\n        \n        # Calculate available slots\n        last_end = start_time\n        for start, end in blocked_times[day]:\n            if last_end + duration <= start:\n                available_times.append((last_end, start))\n            last_end = max(last_end, end)\n\n        if last_end < end_time:\n            available_times.append((last_end, end_time))\n        \n        if available_times:\n            return f\"{available_times[0][0]}:00:{available_times[0][0] + duration}:00\" # Assuming duration is in hours\n            \n    return None\n\n\n# Existing schedules\nbradley_schedule = {\n    \"Monday\": [(9, 9.5), (10.5, 11), (12, 13), (14, 14.5)],\n    \"Tuesday\": [(9.5, 10), (11, 11.5), (13.5, 14), (16, 16.5)],\n    \"Wednesday\": [(11, 11.5), (12, 12.5), (13, 14), (16, 16.5)],\n    \"Thursday\": [(9, 9.5), (10, 11), (11.5, 12), (12.5, 13), (14.5, 17)],\n}\n\nbruce_schedule = {\n    \"Monday\": [(9, 9.5), (10, 17)],\n    \"Tuesday\": [(9.5, 14), (15, 17)],\n    \"Wednesday\": [(10, 10.5), (12.5, 13.5), (14.5, 16), (16.5, 17)],\n    \"Thursday\": [(12.5, 14.5), (15, 15.5), (16, 17)],\n}\n\n# Meeting duration is 1 hour\nduration = 1\n\n# Finding a suitable time\nmeeting_time = find_meeting_time(bradley_schedule, bruce_schedule, duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_847"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define busy schedules\nlarry_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\nkenneth_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (work_start, work_end),  # Kenneth is available all day\n    ],\n}\n\n# Constraints\nlarry_constraints = {\n    \"Monday\": False,\n    \"Tuesday\": True,\n    \"Wednesday\": False,\n    \"Thursday\": True,\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time():\n    for day in larry_constraints:\n        if not larry_constraints[day]:\n            continue\n\n        larry_busy_times = larry_schedule[day]\n        kenneth_busy_times = kenneth_schedule[day]\n        \n        # Create a list of combined busy times\n        combined_busy_times = larry_busy_times + kenneth_busy_times\n        combined_busy_times.sort()\n\n        # Check for available time slots\n        last_end_time = work_start\n        for start, end in combined_busy_times:\n            # If there is enough time between last_end_time and start of busy time\n            if last_end_time + meeting_duration <= start:\n                return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\n            last_end_time = max(last_end_time, end)\n        \n        # Check time after the last busy time until the end of work\n        if last_end_time + meeting_duration <= work_end:\n            return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_848"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(janice_schedule, sharon_schedule):\n    # Define work hours\n    work_hours = [(9, 17)]\n    # Define the days to check\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    \n    # Generate busy times\n    busy_times = {}\n    for day in days:\n        busy_times[day] = []\n        busy_times[day].extend(janice_schedule[day])\n        busy_times[day].extend(sharon_schedule[day])\n\n    # Check for potential meeting slots\n    meeting_duration = 30  # in minutes\n    for day in days:\n        day_busy_times = busy_times[day]\n        # Sort busy times by start time\n        day_busy_times.sort(key=lambda x: x[0])\n        \n        # Work through the day to find free slots\n        current_start = 9 * 60  # Starting at 9:00 AM in minutes\n        for start, end in day_busy_times:\n            start_time = start[0] * 60 + start[1]\n            end_time = end[0] * 60 + end[1]\n            \n            # Check if there's space between the current_start and the busy time\n            if start_time >= current_start + meeting_duration:\n                return f\"{current_start // 60:02}:{current_start % 60:02}:{(current_start + meeting_duration) // 60:02}:{(current_start + meeting_duration) % 60:02}\"\n            \n            # Move current start to the end of busy time\n            current_start = max(current_start, end_time)\n        \n        # Check at the end of the day if there's time for the meeting\n        if (17 * 60) >= current_start + meeting_duration:\n            return f\"{current_start // 60:02}:{current_start % 60:02}:{(current_start + meeting_duration) // 60:02}:{(current_start + meeting_duration) % 60:02}\"\n\n    return None  # No suitable time found\n\n\njanice_schedule = {\n    'Monday': [((10, 0), (10, 30)), ((11, 30), (12, 0)), ((14, 30), (15, 30)), ((16, 30), (17, 0))],\n    'Tuesday': [((10, 30), (11, 0)), ((13, 0), (13, 30)), ((14, 0), (14, 30)), ((16, 30), (17, 0))],\n    'Wednesday': [((9, 30), (10, 30))],\n    'Thursday': [((9, 0), (9, 30)), ((11, 0), (11, 30)), ((16, 0), (16, 30))]\n}\n\nsharon_schedule = {\n    'Monday': [((9, 0), (9, 30)), ((10, 0), (10, 30)), ((11, 0), (15, 0)), ((15, 30), (17, 0))],\n    'Tuesday': [((9, 30), (10, 30)), ((11, 0), (12, 0)), ((12, 30), (13, 30)), ((15, 0), (16, 0)), ((16, 30), (17, 0))],\n    'Wednesday': [((9, 0), (11, 0)), ((11, 30), (12, 0)), ((13, 0), (15, 0)), ((15, 30), (17, 0))],\n    'Thursday': [((9, 0), (17, 0))]\n}\n\n# Get the meeting time\nmeeting_time = find_meeting_time(janice_schedule, sharon_schedule)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_849"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participant's available time slots\nnicholas_availability = {\n    'Monday': [(9, 0, 9, 30), (14, 30, 14, 30)],\n    'Tuesday': [(9, 0, 17, 0)],\n    'Wednesday': [(9, 0, 17, 0)],\n    'Thursday': [(10, 0, 11, 30), (12, 0, 13, 0), (13, 30, 16, 30)]\n}\n\nvirginia_availability = {\n    'Monday': [(10, 30, 11, 0), (12, 30, 14, 0), (16, 30, 17, 0)],\n    'Tuesday': [(11, 0, 11, 30)],\n    'Wednesday': [(9, 0, 17, 0)],\n    'Thursday': [(9, 0, 17, 0)]\n}\n\ndef get_available_time_slots(availability):\n    time_slots = []\n    for day, slots in availability.items():\n        for start_hour, start_minute, end_hour, end_minute in slots:\n            time_slots.append((day, datetime(1, 1, 1, start_hour, start_minute), \n                               datetime(1, 1, 1, end_hour, end_minute)))\n    return time_slots\n\ndef find_meeting_time(nicholas_slots, virginia_slots, duration_minutes=30):\n    for day, nicholas_start, nicholas_end in nicholas_slots:\n        for virginia_start, virginia_end in virginia_slots:\n            if day == virginia_start.date().strftime(\"%A\"):  # Make sure the day matches\n                start = max(nicholas_start, virginia_start)\n                end = min(nicholas_end, virginia_end)\n                if (end - start) >= timedelta(minutes=duration_minutes):\n                    meeting_start = start\n                    meeting_end = meeting_start + timedelta(minutes=duration_minutes)\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Get available time slots\nnicholas_slots = get_available_time_slots(nicholas_availability)\nvirginia_slots = get_available_time_slots(virginia_availability)\n\n# Find suitable meeting time\nproposed_time = find_meeting_time(nicholas_slots, virginia_slots)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_850"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\ndef find_meeting_time():\r\n    # Define parameters\r\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\r\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\r\n    meeting_duration = timedelta(minutes=30)\r\n    \r\n    # Define busy times for Thomas\r\n    thomas_busy_times = [\r\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\r\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\r\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\r\n    ]\r\n    \r\n    # Define busy times for Gary\r\n    gary_busy_times = [\r\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\r\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\r\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\r\n    ]\r\n\r\n    # Combine Thomas' and Gary's busy times\r\n    busy_times = thomas_busy_times + gary_busy_times\r\n    \r\n    # Merge overlapping busy times\r\n    busy_times.sort()\r\n    merged_busy_times = []\r\n    for start, end in busy_times:\r\n        if not merged_busy_times or merged_busy_times[-1][1] < start:\r\n            merged_busy_times.append((start, end))\r\n        else:\r\n            merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\r\n    \r\n    # Find a time slot for the meeting\r\n    current_time = work_hours_start\r\n    while current_time + meeting_duration <= work_hours_end:\r\n        meeting_start = current_time\r\n        meeting_end = current_time + meeting_duration\r\n        \r\n        # Check if the proposed meeting time overlaps with any busy times\r\n        if all(not (meeting_start < end and meeting_end > start) for start, end in merged_busy_times):\r\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\r\n\r\n        current_time += timedelta(minutes=15)  # Increment by 15 minutes for the next possible slot\r\n\r\n# Get the proposed meeting time\r\nproposed_time = find_meeting_time()\r\nprint(proposed_time)\r\n```",
            "count": "calendar_scheduling_example_851"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the day limits for the work hours\nstart_time = timedelta(hours=9)   # 09:00\nend_time = timedelta(hours=17)     # 17:00\n\n# Define the busy times for Randy and Maria\nrandy_busy = {\n    \"Monday\": [(timedelta(hours=10), timedelta(hours=10, minutes=30)),\n               (timedelta(hours=11), timedelta(hours=11, minutes=30)),\n               (timedelta(hours=12), timedelta(hours=13)),\n               (timedelta(hours=13, minutes=30), timedelta(hours=14, minutes=30)),\n               (timedelta(hours=16), timedelta(hours=16, minutes=30))],\n    \"Tuesday\": [(timedelta(hours=10), timedelta(hours=11, minutes=30)),\n                (timedelta(hours=12, minutes=30), timedelta(hours=13)),\n                (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n                (timedelta(hours=16), timedelta(hours=17))],\n    \"Wednesday\": [(timedelta(hours=10, minutes=30), timedelta(hours=11)),\n                  (timedelta(hours=11, minutes=30), timedelta(hours=12)),\n                  (timedelta(hours=13), timedelta(hours=13, minutes=30)),\n                  (timedelta(hours=15, minutes=30), timedelta(hours=16))],\n    \"Thursday\": [(timedelta(hours=9, minutes=30), timedelta(hours=10)),\n                 (timedelta(hours=10, minutes=30), timedelta(hours=11)),\n                 (timedelta(hours=12), timedelta(hours=13, minutes=30)),\n                 (timedelta(hours=16, minutes=30), timedelta(hours=17))]\n}\n\nmaria_busy = {\n    \"Monday\": [(timedelta(hours=9), timedelta(hours=10)),\n               (timedelta(hours=11), timedelta(hours=13, minutes=30)),\n               (timedelta(hours=14), timedelta(hours=14, minutes=30)),\n               (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n               (timedelta(hours=16), timedelta(hours=17))],\n    \"Tuesday\": [(timedelta(hours=9), timedelta(hours=17))],\n    \"Wednesday\": [(timedelta(hours=9, minutes=30), timedelta(hours=10)),\n                  (timedelta(hours=10, minutes=30), timedelta(hours=12)),\n                  (timedelta(hours=14, minutes=30), timedelta(hours=15, minutes=30)),\n                  (timedelta(hours=16), timedelta(hours=17))],\n    \"Thursday\": [(timedelta(hours=9, minutes=30), timedelta(hours=10)),\n                 (timedelta(hours=11, minutes=30), timedelta(hours=12, minutes=30)),\n                 (timedelta(hours=13, minutes=30), timedelta(hours=15)),\n                 (timedelta(hours=16, minutes=30), timedelta(hours=17))]\n}\n\n# Define a function to find a suitable time for a meeting\ndef find_meeting_time(randy_busy, maria_busy):\n    meeting_duration = timedelta(minutes=30)\n    \n    for day in [\"Tuesday\", \"Thursday\"]:  # Skipping Monday and Wednesday due to constraints\n        busy_times = sorted(randy_busy[day] + maria_busy[day])  # Combine busy times\n        free_times = []\n        \n        # Find free slots in the day's schedule\n        previous_end = start_time\n\n        for start, end in busy_times:\n            if previous_end + meeting_duration <= start:\n                free_times.append((previous_end, start))\n            previous_end = max(previous_end, end)\n\n        if previous_end < end_time:\n            free_times.append((previous_end, end_time))\n        \n        # Find a suitable slot of required duration\n        for start, end in free_times:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{(meeting_start.seconds // 3600):02}:{(meeting_start.seconds // 60) % 60:02}:{(meeting_end.seconds // 3600):02}:{(meeting_end.seconds // 60) % 60:02}\"\n\n# Calling the function for scheduling\nproposed_time = find_meeting_time(randy_busy, maria_busy)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_852"
        },
        {
            "final_program_time": "{15:00:15:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the available slots for James and Gabriel\njames_schedule = {\n    \"Monday\": [(10, 11.5), (12, 13), (15, 15.5), (16.5, 17)],\n    \"Tuesday\": [(9, 13), (13.5, 15)],\n    \"Wednesday\": [(9.5, 10.5), (11, 14), (15, 15.5), (16.5, 17)],\n    \"Thursday\": [(9, 10), (10.5, 11), (12, 14), (15, 16), (16.5, 17)]\n}\n\ngabriel_schedule = {\n    \"Monday\": [(14.5, 17)],\n    \"Tuesday\": [(9, 15), (15.5, 17)],\n    \"Wednesday\": [],\n    \"Thursday\": [(9.5, 13.5), (14, 17)]\n}\n\n# Meeting duration in hours and constraints\nmeeting_duration = 0.5\nmeeting_days = [\"Monday\", \"Wednesday\", \"Thursday\"]\nnot_preferred_days = [\"Tuesday\"]\nnot_preferred_times_gabriel = [(9, 11)]\n\ndef find_meeting_time():\n    for day in meeting_days:\n        if day == \"Tuesday\":\n            continue\n        for start_time in james_schedule[day]:\n            for gabriel_time in gabriel_schedule[day]:\n                # Find overlapping availability\n                start_james = start_time[0]\n                end_james = start_time[1] - meeting_duration\n                \n                start_gabriel = gabriel_time[0]\n                end_gabriel = gabriel_time[1] - meeting_duration\n\n                if end_james >= start_gabriel and start_james <= end_gabriel:\n                    meeting_start = max(start_james, start_gabriel)\n                    meeting_end = meeting_start + meeting_duration\n                    # Check if Gabriel prefers meeting time\n                    if not (day == \"Thursday\" and meeting_start < 11):\n                        return f\"{int(meeting_start)}:00:{int(meeting_end)}:00\"\n\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```\n",
            "count": "calendar_scheduling_example_853"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nmichelle_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nsara_schedule = {\n    \"Monday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest suitable meeting time\ndef find_meeting_time(michelle_schedule, sara_schedule, days):\n    for day in days:\n        michelle_free_times = get_free_times(michelle_schedule[day])\n        sara_free_times = get_free_times(sara_schedule[day])\n        common_free_times = find_common_free_times(michelle_free_times, sara_free_times)\n        \n        # Check for the earliest time that can accommodate the meeting\n        for start, end in common_free_times:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return (meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\"))\n\ndef get_free_times(schedule):\n    # Define the entire work day\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    free_times = []\n    last_end = work_start\n\n    # Check each busy interval to find free times\n    for busy_start, busy_end in sorted(schedule):\n        if last_end < busy_start:\n            free_times.append((last_end, busy_start))\n        last_end = max(last_end, busy_end)\n    \n    if last_end < work_end:\n        free_times.append((last_end, work_end))\n    \n    return free_times\n\ndef find_common_free_times(michelle_free_times, sara_free_times):\n    common_free_times = []\n    for m_start, m_end in michelle_free_times:\n        for s_start, s_end in sara_free_times:\n            # Find the overlap between Michelle's and Sara's free times\n            start = max(m_start, s_start)\n            end = min(m_end, s_end)\n            if start < end:\n                common_free_times.append((start, end))\n    return common_free_times\n\n# Specifying the days to attempt scheduling\ndays_to_check = [\"Tuesday\", \"Wednesday\", \"Thursday\"]\n\nproposed_time = find_meeting_time(michelle_schedule, sara_schedule, days_to_check)\nprint(f\"Proposed meeting time: {proposed_time[0]}:{proposed_time[1]}\")\n```",
            "count": "calendar_scheduling_example_854"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nandrea_schedule = {\n    \"Monday\": [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))],\n    \"Wednesday\": [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                  (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Thursday\": [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\nrussell_schedule = {\n    \"Monday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Wednesday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                  (datetime.strptime('11:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                  (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Thursday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Proposed meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Iterate through the available days\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n    if day == \"Tuesday\":  # Russell does not want to meet on Tuesday\n        continue\n    \n    # Define available time slots for both Andrea and Russell\n    andrea_times = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    russell_times = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    \n    # Remove busy times from Andrea's schedule\n    for start, end in andrea_schedule[day]:\n        andrea_times = [(start_time, end_time) for start_time, end_time in andrea_times if \n                        end_time <= start or start_time >= end]\n    \n    # Remove busy times from Russell's schedule\n    for start, end in russell_schedule[day]:\n        russell_times = [(start_time, end_time) for start_time, end_time in russell_times if \n                         end_time <= start or start_time >= end]\n    \n    # Check for overlapping times\n    for start_a, end_a in andrea_times:\n        for start_r, end_r in russell_times:\n            start_meeting = max(start_a, start_r)\n            end_meeting = start_meeting + meeting_duration\n            \n            if end_meeting <= end_a and end_meeting <= end_r:\n                print(f\"{start_meeting.strftime('%H:%M')}:{end_meeting.strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_855"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participant schedules\ndennis_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nwilliam_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\n# Function to check if a proposed meeting time conflicts with schedules\ndef is_time_free(start, end, schedules):\n    for busy_start, busy_end in schedules:\n        if start < busy_end and end > busy_start:  # overlap check\n            return False\n    return True\n\n# Function to find free time slots\ndef find_meeting_time():\n    current_time = start_time\n    \n    while current_time + meeting_duration <= end_time:\n        meeting_end_time = current_time + meeting_duration\n        \n        if (is_time_free(current_time, meeting_end_time, dennis_schedule) and\n                is_time_free(current_time, meeting_end_time, william_schedule)):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=30)  # Check next slot in 30-minute intervals\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_856"
        },
        {
            "final_program_time": "{9:31:10:01}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nedward_schedule = {\n    \"Monday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Wednesday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    \"Thursday\": [(datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\nzachary_schedule = {\n    \"Monday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Wednesday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Thursday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Function to find the earliest time for the meeting\ndef find_meeting_time(edward_schedule, zachary_schedule):\n    for day in ['Monday', 'Wednesday', 'Thursday']:\n        edward_free_times = get_free_times(edward_schedule[day])\n        zachary_free_times = get_free_times(zachary_schedule[day])\n        meeting_time = find_overlap(edward_free_times, zachary_free_times)\n        if meeting_time:\n            return meeting_time\n    return None\n\n# Get free times based on occupied schedules\ndef get_free_times(occupied_times):\n    free_times = []\n    start = work_start\n    while start < work_end:\n        end = start + meeting_duration\n        if all(not (start < o_end and end > o_start) for o_start, o_end in occupied_times):\n            free_times.append((start, end))\n        start += timedelta(minutes=1)  # Check every minute\n    return free_times\n\n# Find overlap between free times\ndef find_overlap(edward_free_times, zachary_free_times):\n    for ed_start, ed_end in edward_free_times:\n        for za_start, za_end in zachary_free_times:\n            if ed_start < za_end and za_start < ed_end:  # There's an overlap\n                return f\"{ed_start.strftime('%H:%M')}:{(ed_start + meeting_duration).strftime('%H:%M')}\"\n    return None\n\n# Find proposed meeting time\nproposed_time = find_meeting_time(edward_schedule, zachary_schedule)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_857"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert busy time blocks to a list of unavailable time intervals\ndef get_busy_intervals(busy_times):\n    busy_intervals = []\n    for times in busy_times:\n        start_time = datetime.strptime(times[0], \"%H:%M\")\n        end_time = datetime.strptime(times[1], \"%H:%M\")\n        busy_intervals.append((start_time, end_time))\n    return busy_intervals\n\n# Function to find available time slots\ndef find_available_slot(carl_busy, margaret_busy, meeting_duration, work_start, work_end):\n    # Merge both busy schedules\n    all_busy = carl_busy + margaret_busy\n    all_busy.sort(key=lambda x: x[0])  # Sort by start time\n    \n    # Find available slots\n    available_slots = []\n    current_start = work_start\n\n    for start, end in all_busy:\n        if current_start < start:\n            available_slots.append((current_start, start))\n        current_start = max(current_start, end)\n\n    # Add the last slot if there's time left\n    if current_start < work_end:\n        available_slots.append((current_start, work_end))\n\n    # Check for meeting duration in available slots\n    for start, end in available_slots:\n        if (end - start) >= meeting_duration:\n            return start\n\n    return None\n\n# Define the busy times for Carl and Margaret\ncarl_busy_times = [(\"11:00\", \"11:30\"), (\"14:30\", \"15:00\"), (\"13:30\", \"14:00\"), (\"16:00\", \"16:30\")]\nmargaret_busy_times = [(\"09:00\", \"10:30\"), (\"11:00\", \"17:00\"), (\"09:30\", \"12:00\"), (\"13:30\", \"14:00\"),\n                       (\"15:30\", \"17:00\"), (\"09:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:30\"),\n                       (\"15:00\", \"17:00\"), (\"10:00\", \"12:00\"), (\"12:30\", \"14:00\"), (\"14:30\", \"17:00\")]\n\n# Convert busy times to datetime objects\ncarl_busy = get_busy_intervals(carl_busy_times)\nmargaret_busy = get_busy_intervals(margaret_busy_times)\n\n# Meeting duration and working hours\nmeeting_duration = timedelta(hours=1)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find available slot\navailable_start = find_available_slot(carl_busy, margaret_busy, meeting_duration, work_start, work_end)\n\nif available_start:\n    proposed_time = available_start.strftime('%H:%M') + ':' + (available_start + meeting_duration).strftime('%H:%M')\n    print(f\"{proposed_time}\")\nelse:\n    print(\"No available slot found.\")\n```",
            "count": "calendar_scheduling_example_858"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(randy_schedule, george_schedule, meeting_duration):\n    work_hours = (9, 17)  # 9:00 to 17:00 in hours\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    \n    # Duration of the meeting in minutes\n    duration_minutes = meeting_duration\n    \n    # Convert schedules into a list of busy intervals\n    randy_busy_times = parse_schedule(randy_schedule)\n    george_busy_times = parse_schedule(george_schedule)\n    \n    # Find available time slots\n    for day in days:\n        for hour in range(work_hours[0], work_hours[1]):\n            for minute in (0, 30):\n                start_time = datetime.strptime(f\"{day} {hour}:{minute:02d}\", \"%A %H:%M\")\n                end_time = start_time + timedelta(minutes=duration_minutes)\n                \n                # Check if both are available in this time slot\n                if is_time_slot_available(start_time, end_time, randy_busy_times) and \\\n                   is_time_slot_available(start_time, end_time, george_busy_times):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\ndef parse_schedule(schedule):\n    busy_times = []\n    for time_range in schedule:\n        start, end = time_range\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return busy_times\n\ndef is_time_slot_available(start_time, end_time, busy_times):\n    for busy_start, busy_end in busy_times:\n        if not (end_time <= busy_start or start_time >= busy_end):\n            return False\n    return True\n\n# Schedules\nrandy_schedule = [(\"12:00\", \"12:30\"), (\"14:30\", \"15:00\")]\ngeorge_schedule = [\n    (\"09:30\", \"10:00\"), (\"11:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"17:00\"),\n    (\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"11:00\", \"14:00\"), (\"14:30\", \"17:00\"),\n    (\"09:00\", \"11:00\"), (\"12:00\", \"12:30\"), (\"13:00\", \"15:00\"), (\"16:00\", \"16:30\"),\n    (\"10:00\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:30\", \"14:00\"), (\"15:00\", \"15:30\"), \n    (\"16:00\", \"16:30\")\n]\n\nmeeting_duration = 30  # 30 minutes\nmeeting_time = find_meeting_time(randy_schedule, george_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_859"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules in terms of time blocks\nmark_busy = [\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n]\nhelen_busy = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Convert busy schedules to a single list\nbusy_times = []\nfor start, end in mark_busy + helen_busy:\n    busy_times.append((start, end))\n\n# Define working hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Helper function to check if time block is available\ndef is_time_available(start_time, duration):\n    end_time = start_time + duration\n    for busy_start, busy_end in busy_times:\n        if (busy_start < end_time and busy_end > start_time):\n            return False\n    return True\n\n# Try to find an available slot for the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_available(current_time, meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Check every 30 minutes\n```",
            "count": "calendar_scheduling_example_860"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\namber_schedule = {\n    'Monday': [(11, 0, 11, 30), (12, 0, 13, 30), (14, 0, 14, 30)],\n    'Tuesday': [(10, 0, 11, 0), (14, 0, 14, 30)],\n    'Wednesday': [(9, 0, 9, 30), (10, 0, 10, 30), (12, 0, 13, 0), (14, 0, 15, 30), (16, 0, 16, 30)],\n    'Thursday': [(9, 30, 10, 30), (11, 0, 11, 30), (12, 30, 13, 0), (14, 0, 15, 0), (15, 30, 16, 30)]\n}\n\nraymond_schedule = {\n    'Monday': [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 11, 30), (12, 0, 17, 0)],\n    'Tuesday': [(9, 0, 12, 0), (12, 30, 17, 0)],\n    'Wednesday': [(9, 0, 10, 30), (11, 0, 11, 30), (12, 0, 12, 30), (13, 0, 17, 0)],\n    'Thursday': [(9, 0, 13, 0), (13, 30, 17, 0)]\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nworking_hours_start = 9\nworking_hours_end = 17\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\ndef is_time_slot_available(start_hour, start_minute, end_hour, end_minute, schedule):\n    for busy_slot in schedule:\n        busy_start = busy_slot[0] * 60 + busy_slot[1]\n        busy_end = busy_slot[2] * 60 + busy_slot[3]\n        proposed_start = start_hour * 60 + start_minute\n        proposed_end = end_hour * 60 + end_minute\n        if proposed_start < busy_end and proposed_end > busy_start:\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in days:\n        for hour in range(working_hours_start, working_hours_end):\n            for minute in range(0, 60, 30):  # Check every half hour\n                end_time = (hour * 60 + minute) + meeting_duration.total_seconds() / 60\n                end_hour = int(end_time // 60)\n                end_minute = int(end_time % 60)\n                if end_hour < working_hours_end and is_time_slot_available(hour, minute, end_hour, end_minute, amber_schedule[day]) and is_time_slot_available(hour, minute, end_hour, end_minute, raymond_schedule[day]):\n                    return f\"{hour:02}:{minute:02}:{end_hour:02}:{end_minute:02}\"\n\n# Proposed time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_861"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\nann_schedule = [\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))\n]\n\namanda_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\ndef find_available_time(ann, amanda):\n    for start_hour in range(9, 17):  # Check every hour from 9 to 16\n        meeting_start = datetime.strptime(f'{start_hour}:00', '%H:%M')\n        meeting_end = meeting_start + meeting_duration\n        \n        if meeting_end > work_end:\n            continue\n        \n        ann_free = all(not (meeting_start < end and meeting_end > start) for start, end in ann)\n        amanda_free = all(not (meeting_start < end and meeting_end > start) for start, end in amanda)\n        \n        if ann_free and amanda_free:\n            return meeting_start.strftime('%H:%M') + ':' + meeting_end.strftime('%H:%M')\n    \n    return None\n\navailable_time = find_available_time(ann_schedule, amanda_schedule)\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_862"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if the time slot is available for both participants.\ndef is_time_slot_available(start_time, end_time, abigail_schedule, sara_schedule):\n    for start, end in abigail_schedule:\n        if start_time < end and end_time > start:\n            return False\n    for start, end in sara_schedule:\n        if start_time < end and end_time > start:\n            return False\n    return True\n\n# Abigail and Sara's schedules\nabigail_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    # Wednesday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    # Thursday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nsara_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    # Wednesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    # Thursday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Duration of the meeting\nmeeting_duration = timedelta(hours=1)\n\n# Work hours and days\nwork_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\n# Finding a suitable time\nfor hour in range(work_hours[0].hour, work_hours[1].hour):\n    for minute in [0, 30]:\n        start_time = datetime.strptime(f\"{hour}:{minute:02}\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if is_time_slot_available(start_time, end_time, abigail_schedule, sara_schedule):\n            print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_863"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Schedule constraints for Bruce and Amy\nbruce_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\namy_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Combine schedules for overlap and check available slots\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Thursday\"]:  # Exclude Wednesday\n        combined_schedule = []\n        combined_schedule.extend(bruce_schedule[day])\n        combined_schedule.extend(amy_schedule[day])\n\n        # Sort combined schedule and determine free intervals\n        combined_schedule.sort()\n\n        # Consider free times\n        last_end = start_time\n        for start, end in combined_schedule:\n            if last_end + meeting_duration <= start:  # Free time found\n                return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n            last_end = max(last_end, end)\n\n        # Check if there's time after the last meeting until end_time\n        if last_end + meeting_duration <= end_time:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_864"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(megan_schedule, daniel_schedule, duration):\n    working_hours = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n    # Convert schedules to time ranges\n    megan_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) \n                        for start, end in megan_schedule]\n    daniel_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) \n                          for start, end in daniel_schedule]\n\n    for day in days:\n        for start_time, end_time in working_hours:\n            current_time = start_time\n            \n            while current_time + timedelta(hours=duration) <= end_time:\n                meeting_end_time = current_time + timedelta(hours=duration)\n                \n                megan_free = all(not (open_start < meeting_end_time and open_end > current_time) \n                                 for open_start, open_end in megan_busy_times)\n                daniel_free = all(not (open_start < meeting_end_time and open_end > current_time) \n                                  for open_start, open_end in daniel_busy_times)\n\n                if megan_free and daniel_free:\n                    return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n                \n                current_time += timedelta(minutes=30)  # Check every half hour\n\n# Megan's schedule (start, end)\nmegan_schedule = [\n    ('13:00', '13:30'), ('14:00', '15:30'),\n    ('09:00', '09:30'), ('12:00', '12:30'), ('16:00', '17:00'),\n    ('09:30', '10:00'), ('10:30', '11:30'), ('12:30', '14:00'),\n    ('16:00', '16:30'), ('13:30', '14:30'), ('15:00', '15:30')\n]\n\n# Daniel's schedule (start, end)\ndaniel_schedule = [\n    ('10:00', '11:30'), ('12:30', '15:00'),\n    ('09:00', '10:00'), ('10:30', '17:00'),\n    ('09:00', '10:00'), ('10:30', '11:30'), ('12:00', '17:00'),\n    ('09:00', '12:00'), ('12:30', '14:30'), ('15:00', '15:30'), ('16:00', '17:00')\n]\n\n# Meeting duration in hours\nduration = 1\n\nproposed_time = find_meeting_time(megan_schedule, daniel_schedule, duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_865"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the availability of the participants\ncatherine_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\npeter_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Check for available slots\ndef find_meeting_time():\n    for day in [\"Tuesday\", \"Wednesday\"]:\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            end_time = current_time + meeting_duration\n            \n            # Check if this slot is free for both\n            if all(not (busy_start < end_time and busy_end > current_time) for busy_start, busy_end in catherine_busy) and \\\n               all(not (busy_start < end_time and busy_end > current_time) for busy_start, busy_end in peter_busy):\n                return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=15)  # Increment by 15 minutes\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_866"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(betty_schedule, scott_schedule, duration, constraints):\n    work_hours_start = datetime.strptime('09:00', '%H:%M')\n    work_hours_end = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = timedelta(minutes=duration)\n\n    # Constraints on days to check\n    available_days = constraints['available_days']\n    \n    # Combined schedule availability\n    for day in available_days:\n        for hour in range(work_hours_start.hour, work_hours_end.hour):\n            start_time = datetime.strptime(f'{hour}:00', '%H:%M')\n            end_time = start_time + meeting_duration\n            \n            # Check if the proposed meeting time fits within the schedules\n            if end_time.time() <= work_hours_end.time() and (start_time.time() >= work_hours_start.time()):\n                if (start_time not in betty_schedule and end_time not in betty_schedule) and \\\n                   (start_time not in scott_schedule and end_time not in scott_schedule):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Betty's busy schedule\nbetty_schedule = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    \n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    \n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    \n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Scott's busy schedule\nscott_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    \n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    \n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Meeting constraints\nconstraints = {\n    'available_days': ['Tuesday', 'Wednesday', 'Thursday']\n}\n\n# Find meeting time\nresult = find_meeting_time(betty_schedule, scott_schedule, 30, constraints)\nprint(result)\n```",
            "count": "calendar_scheduling_example_867"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules\nschedules = {\n    \"Megan\": {\n        \"Monday\": [(10, 30), (13, 0), (14, 30), (16, 0)],\n        \"Tuesday\": [(10, 30)],\n        \"Wednesday\": [(16, 0)],\n    },\n    \"Beverly\": {\n        \"Monday\": [(9, 0), (10, 30), (11, 0), (12, 30), (14, 30), (16, 30)],\n        \"Tuesday\": [(9, 0), (10, 0), (10, 30)],\n        \"Wednesday\": [(9, 0), (10, 30), (12, 0), (14, 0), (16, 0)],\n        \"Thursday\": [(10, 30), (12, 30), (14, 0), (15, 30)],\n    }\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_hours = { \"start\": 9, \"end\": 17 }\n\n# Function to find a free time\ndef find_free_time(schedules, meeting_duration):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n    free_times = []\n\n    for day in days:\n        busy_slots = []\n        \n        # Combine busy times for both participants\n        for participant in schedules:\n            busy_slots.extend(schedules[participant].get(day, []))\n        \n        # Check the day for free times\n        busy_slots.sort()  # Sort by start times\n        current_time = (work_hours[\"start\"], 0)\n\n        for start_hour, start_minute in busy_slots:\n            busy_start = (start_hour, start_minute)\n            # Check for free time before the busy slot\n            if current_time < busy_start:  # There is free time\n                # Calculate the end of the free time\n                free_end = (start_hour, start_minute)\n                \n                while current_time < free_end:\n                    # Check if the free time is enough for the meeting duration\n                    meeting_start = datetime.strptime(f\"{current_time[0]}:{current_time[1]}\", \"%H:%M\")\n                    meeting_end = meeting_start + meeting_duration\n\n                    if meeting_end.hour < work_hours[\"end\"]:  # Check if meeting ends within work hours\n                        free_times.append((meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")))\n                    \n                    # Increment current time by 30 minutes\n                    current_time = (current_time[0], current_time[1] + 30)\n                    if current_time[1] == 60:\n                        current_time = (current_time[0] + 1, 0)\n\n            current_time = (start_hour, start_minute)\n        \n        # After the last busy slot, check till the end of work hours\n        end_of_day = (work_hours[\"end\"], 0)\n        while current_time < end_of_day:\n            meeting_start = datetime.strptime(f\"{current_time[0]}:{current_time[1]}\", \"%H:%M\")\n            meeting_end = meeting_start + meeting_duration\n            \n            if meeting_end.hour < work_hours[\"end\"]:  # Check if meeting ends within work hours\n                free_times.append((meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")))\n                \n            current_time = (current_time[0], current_time[1] + 30)\n            if current_time[1] == 60:\n                current_time = (current_time[0] + 1, 0)\n\n    # Assuming there's at least one suitable time in free_times as mentioned in the task\n    return free_times[0]\n\nproposed_time = find_free_time(schedules, meeting_duration)\nprint(f\"{proposed_time[0]}:{proposed_time[1]}\")\n```",
            "count": "calendar_scheduling_example_868"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and constraints\nphilip_schedule = {\n    \"Monday\": [(10, 30), (11, 30), (13, 30), (15, 0), (17, 0)],\n    \"Tuesday\": [(10, 30), (12, 30), (14, 0), (16, 0)],\n    \"Wednesday\": [(9, 0), (10, 0), (11, 0), (13, 30)],\n    \"Thursday\": [(9, 30), (11, 30), (14, 0), (15, 30), (17, 0)]\n}\n\nroy_schedule = {\n    \"Monday\": [(9, 0), (10, 30), (11, 0), (14, 30), (15, 0), (16, 30)],\n    \"Tuesday\": [(9, 0), (17, 0)],\n    \"Wednesday\": [(10, 0), (11, 0), (12, 30), (14, 30), (16, 30)],\n    \"Thursday\": [(9, 0), (12, 30), (13, 0), (17, 0)]\n}\n\nwork_hours = {\n    \"Monday\": (9, 0, 17, 0),\n    \"Tuesday\": (9, 0, 17, 0),\n    \"Wednesday\": (9, 0, 17, 0),\n    \"Thursday\": (9, 0, 17, 0)\n}\n\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time():\n    # Iterate through potential days for the meeting\n    for day in [\"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        # Get busy times for both individuals\n        busy_times = [\n            *philip_schedule[day],\n            *roy_schedule[day]\n        ]\n        \n        # Start and end of work hours\n        start_hour, start_minute, end_hour, end_minute = work_hours[day]\n        start_time = datetime(2023, 10, 1, start_hour, start_minute)\n        end_time = datetime(2023, 10, 1, end_hour, end_minute)\n\n        # Create a list of occupied time slots\n        occ_slots = []\n        for start, duration in busy_times:\n            occ_slots.append((datetime(2023, 10, 1, start, 0), timedelta(hours=duration, minutes=0)))\n        \n        # Check for available time slots\n        time_cursor = start_time\n        \n        while time_cursor + meeting_duration <= end_time:\n            is_free = True\n            \n            for occ_start, occ_duration in occ_slots:\n                occ_end = occ_start + occ_duration\n                if time_cursor < occ_end and time_cursor + meeting_duration > occ_start:\n                    is_free = False\n                    break\n            \n            if is_free:\n                return time_cursor.strftime(\"%H:%M\") + ':' + (time_cursor + meeting_duration).strftime(\"%H:%M\")\n            \n            time_cursor += timedelta(minutes=30)  # Check next half-hour\n        \n    return \"No available slots\"\n\n# Generate a meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_869"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\n# Define the existing schedules\r\ndoris_schedule = {\r\n    'Monday': [(11, 30, 12, 0)],\r\n    'Wednesday': [(9, 0, 9, 30), (11, 0, 11, 30)],\r\n    'Thursday': [(10, 30, 11, 0)]\r\n}\r\n\r\njeremy_schedule = {\r\n    'Monday': [(9, 0, 9, 30), (12, 30, 13, 30), (14, 30, 15, 0), (15, 30, 16, 30)],\r\n    'Tuesday': [(9, 0, 9, 30), (10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 14, 0), (14, 30, 15, 30), (16, 0, 17, 0)],\r\n    'Wednesday': [(9, 0, 10, 30), (11, 0, 17, 0)],\r\n    'Thursday': [(9, 0, 12, 30), (13, 0, 15, 0), (15, 30, 16, 30)]\r\n}\r\n\r\n# Meeting duration\r\nmeeting_duration = timedelta(minutes=30)\r\n\r\n# Function to find a suitable meeting time\r\ndef find_meeting_time(doris_schedule, jeremy_schedule, meeting_duration):\r\n    # Iterate over the possible meeting days\r\n    for day in ['Wednesday']:\r\n        doris_times = doris_schedule.get(day, [])\r\n        jeremy_times = jeremy_schedule.get(day, [])\r\n        \r\n        # Flatten the busy times into a single timeline\r\n        busy_slots = []\r\n        for start_hour, start_minute, end_hour, end_minute in doris_times + jeremy_times:\r\n            busy_slots.append((datetime(day, start_hour, start_minute), datetime(day, end_hour, end_minute)))\r\n\r\n        # Sort the busy slots\r\n        busy_slots.sort()\r\n        \r\n        # Check for available time slots in the day\r\n        last_end_time = datetime(day.year, day.month, day.day, 9, 0)  # Start of work hours\r\n        for start_time, end_time in busy_slots:\r\n            # Calculate the end of the current busy period\r\n            if last_end_time + meeting_duration <= start_time:\r\n                return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\r\n            last_end_time = max(last_end_time, end_time)\r\n        \r\n        # Check for a slot after the last busy time until the end of work hours\r\n        end_of_work = datetime(day.year, day.month, day.day, 17, 0)\r\n        if last_end_time + meeting_duration <= end_of_work:\r\n            return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')}\"\r\n\r\n# Schedule the meeting\r\nproposed_time = find_meeting_time(doris_schedule, jeremy_schedule, meeting_duration)\r\nprint(proposed_time)\r\n```",
            "count": "calendar_scheduling_example_870"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define Joseph's schedule\njoseph_schedule = [\n    ('Monday', [(\"10:30\", \"11:00\"), (\"12:30\", \"13:30\"), (\"14:00\", \"15:00\")]),\n    ('Tuesday', [(\"09:00\", \"10:00\"), (\"10:30\", \"12:30\"), (\"13:00\", \"14:00\"), (\"14:30\", \"16:00\"), (\"16:30\", \"17:00\")]),\n    ('Wednesday', [(\"09:00\", \"09:30\"), (\"10:00\", \"11:30\"), (\"13:00\", \"16:00\"), (\"16:30\", \"17:00\")]),\n    ('Thursday', [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:00\", \"15:00\"), (\"16:30\", \"17:00\")])\n]\n\n# Function to find the earliest available time slot\ndef find_meeting_time():\n    # Check for Tuesday and Wednesday as preferred days\n    for day in ['Tuesday', 'Wednesday']:\n        day_schedule = [time for d, times in joseph_schedule if d == day for time in times]\n        day_schedule = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in day_schedule]\n\n        current_time = working_hours_start\n        while current_time < working_hours_end:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time > working_hours_end:\n                break\n\n            if all(not (current_time < end and meeting_end_time > start) for start, end in day_schedule):\n                return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n            current_time += timedelta(minutes=1)\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_871"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Define existing schedules\njacob_schedule = {\n    'Monday': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \n    'Tuesday': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \n    'Wednesday': [],\n    \n    'Thursday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\nbeverly_schedule = {\n    'Monday': [(work_hours_start, work_hours_end)],  # All day busy\n    'Tuesday': [(work_hours_start, datetime.strptime('15:30', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), work_hours_end)],\n    \n    'Wednesday': [(work_hours_start, datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                  (datetime.strptime('16:30', '%H:%M'), work_hours_end)],\n    \n    'Thursday': [(work_hours_start, datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), work_hours_end)]\n}\n\n# Function to find available meeting time\ndef find_meeting_time(jacob_schedule, beverly_schedule, work_days):\n    for day in work_days:\n        # Get busy slots\n        jacob_busy_slots = jacob_schedule.get(day, [])\n        beverly_busy_slots = beverly_schedule.get(day, [])\n        \n        # Merge busy time slots\n        busy_slots = jacob_busy_slots + beverly_busy_slots\n        \n        # Sort busy slots by start time\n        busy_slots.sort(key=lambda x: x[0])\n        \n        # Check the time slots available\n        start_current = work_hours_start\n        \n        for start, end in busy_slots:\n            if start_current < start:\n                end_time = start_current + meeting_duration\n                if end_time <= start:\n                    return f\"{start_current.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            start_current = max(start_current, end)\n        \n        # Final check after all busy slots\n        if start_current + meeting_duration <= work_hours_end:\n            return f\"{start_current.strftime('%H:%M')}:{(start_current + meeting_duration).strftime('%H:%M')}\"\n    \n    return \"No available time slots\"\n\n# Work days to consider\nwork_days = ['Monday', 'Tuesday', 'Wednesday']\nproposed_time = find_meeting_time(jacob_schedule, beverly_schedule, work_days)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_872"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Constants\nWORK_HOURS_START = 9\nWORK_HOURS_END = 17\nMEETING_DURATION = timedelta(hours=1)\n\n# Existing schedules\njohn_schedule = {\n    \"Monday\": [(9, 15), (15.5, 17)],\n    \"Tuesday\": [(9, 13.5), (14, 15.5), (16, 17)],\n    \"Wednesday\": [(9, 11), (11.5, 12), (13.5, 16), (16.5, 17)],\n    \"Thursday\": [(9, 9.5), (10, 13.5), (14, 17)]\n}\n\n# Convert time to minutes for easier comparison\ndef convert_to_minutes(hour, minute=0):\n    return hour * 60 + minute\n\n# Check if meeting can be scheduled in the available slots\ndef find_meeting_time(schedule):\n    for day, slots in schedule.items():\n        # Insert work hours into the available slots\n        available_slots = []\n        last_end = WORK_HOURS_START * 60\n        \n        for start, end in slots:\n            start_minutes = convert_to_minutes(*divmod(start * 60, 60))\n            end_minutes = convert_to_minutes(*divmod(end * 60, 60))\n            if last_end < start_minutes:\n                available_slots.append((last_end, start_minutes))\n            last_end = end_minutes\n        \n        # Check end of work hours\n        if last_end < WORK_HOURS_END * 60:\n            available_slots.append((last_end, WORK_HOURS_END * 60))\n\n        # Look for a suitable meeting time\n        for start, end in available_slots:\n            if (end - start) >= MEETING_DURATION.total_seconds() / 60:\n                meeting_start = start\n                meeting_end = start + 60  # 60 minutes\n                return f\"{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}\"\n\n# Find and print the proposed meeting time\nproposed_meeting_time = find_meeting_time(john_schedule)\nprint(proposed_meeting_time)\n```",
            "count": "calendar_scheduling_example_873"
        },
        {
            "final_program_time": "{14:30:0:15}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nsamuel_schedule = {\n    \"Monday\": [\n        (\"10:30\", \"11:30\"),\n        (\"12:30\", \"13:30\"),\n        (\"15:00\", \"15:30\"),\n    ],\n    \"Tuesday\": [\n        (\"09:30\", \"10:00\"),\n        (\"10:30\", \"11:00\"),\n        (\"12:00\", \"12:30\"),\n        (\"13:30\", \"14:00\"),\n        (\"16:30\", \"17:00\"),\n    ],\n    \"Wednesday\": [\n        (\"14:00\", \"14:30\"),\n        (\"16:00\", \"16:30\"),\n    ],\n    \"Thursday\": [\n        (\"11:30\", \"12:00\"),\n        (\"12:30\", \"13:00\"),\n        (\"15:00\", \"15:30\"),\n        (\"16:00\", \"16:30\"),\n    ],\n}\n\nkimberly_schedule = {\n    \"Monday\": [\n        (\"09:30\", \"10:30\"),\n        (\"11:30\", \"13:30\"),\n        (\"14:00\", \"14:30\"),\n        (\"15:00\", \"16:30\"),\n    ],\n    \"Tuesday\": [\n        (\"09:00\", \"09:30\"),\n        (\"10:00\", \"13:30\"),\n        (\"14:00\", \"14:30\"),\n        (\"15:30\", \"17:00\"),\n    ],\n    \"Wednesday\": [\n        (\"09:30\", \"11:30\"),\n        (\"12:30\", \"13:00\"),\n        (\"13:30\", \"14:00\"),\n        (\"16:00\", \"17:00\"),\n    ],\n    \"Thursday\": [\n        (\"09:00\", \"10:00\"),\n        (\"10:30\", \"12:30\"),\n        (\"13:00\", \"17:00\"),\n    ],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Finding available time slot\ndef find_available_time():\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n    for day in work_days:\n        samuel_busy_slots = samuel_schedule[day]\n        kimberly_busy_slots = kimberly_schedule[day]\n\n        # Merging schedules\n        busy_slots = samuel_busy_slots + kimberly_busy_slots\n        busy_slots.sort(key=lambda x: datetime.strptime(x[0], \"%H:%M\"))\n\n        available_start = datetime.strptime(\"09:00\", \"%H:%M\")\n        available_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n        for start, end in busy_slots:\n            start_time = datetime.strptime(start, \"%H:%M\")\n            end_time = datetime.strptime(end, \"%H:%M\")\n            \n            if available_start + meeting_duration <= start_time:\n                return f\"{available_start.time()}:{(available_start + meeting_duration).time()}\"\n            available_start = max(available_start, end_time)\n\n        if available_start + meeting_duration <= available_end:\n            return f\"{available_start.time()}:{(available_start + meeting_duration).time()}\"\n\n# Call find_available_time function to get the proposed time\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_874"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and schedule of each participant\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nnatalie_schedule = [\n    (\"09:00\", \"09:30\"), (\"10:00\", \"12:00\"), (\"12:30\", \"13:00\"),\n    (\"14:00\", \"14:30\"), (\"15:00\", \"16:30\"), (\"16:30\", \"17:00\")\n]\nwilliam_schedule = [\n    (\"09:30\", \"11:00\"), (\"11:30\", \"17:00\"), (\"09:00\", \"13:00\"),\n    (\"13:30\", \"16:00\"), (\"09:00\", \"12:30\"), (\"13:00\", \"14:30\"),\n    (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")\n]\n\n# Convert schedules to datetime\ndef convert_schedule(schedule):\n    return [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in schedule]\n\nnatalie_busy = convert_schedule(natalie_schedule)\nwilliam_busy = convert_schedule(william_schedule)\n\n# Check if a time slot is free for both\ndef is_free(start, end):\n    for s, e in natalie_busy + william_busy:\n        if start < e and end > s:  # There is a conflict\n            return False\n    return True\n\n# Find a time slot for the meeting\ndef find_meeting_time():\n    for hour in range(work_hours[0].hour, work_hours[1].hour):\n        for minute in [0, 30]:  # Check both 00 and 30 minutes\n            start_time = datetime.strptime(f\"{hour:02}:{minute:02}\", \"%H:%M\")\n            end_time = start_time + timedelta(hours=1)\n            if end_time <= work_hours[1] and is_free(start_time, end_time):\n                return start_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n    return None\n\nmeeting_time = find_meeting_time()\n\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_875"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules of Ethan and Henry\nethan_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nhenry_schedule = [\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the days to check: Monday (0), Tuesday (1), Wednesday (2), Thursday (3)\ndays_to_check = [0, 1, 2, 3]\n\n# Function to check if a time slot is available\ndef is_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Finding the earliest meeting time\nfor day in days_to_check:\n    current_date = datetime.now() + timedelta(days=(day - datetime.now().weekday() + 7) % 7)\n    for hour in range(work_start.hour, work_end.hour):\n        proposed_start = current_date.replace(hour=hour, minute=0)\n        proposed_end = proposed_start + meeting_duration\n        \n        if proposed_end.time() <= work_end.time():  # Ensure it ends within work hours\n            if is_available(proposed_start, proposed_end, ethan_schedule) and is_available(proposed_start, proposed_end, henry_schedule):\n                print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_876"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nWORK_START = datetime.strptime('09:00', '%H:%M')\nWORK_END = datetime.strptime('17:00', '%H:%M')\nMEETING_DURATION = timedelta(hours=1)\n\n# Define participant schedules\ndaniel_schedule = {\n    \"Monday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    \"Wednesday\": [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                  (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    \"Thursday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n}\n\ndorothy_schedule = {\n    \"Monday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n               (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Wednesday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    \"Thursday\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedule1, schedule2, day):\n    busy_times = schedule1[day] + schedule2[day]\n    \n    # Create a list of all busy time slots\n    busy_slots = []\n    start_time = WORK_START\n    end_time = WORK_END\n    \n    # Mark all busy time slots\n    for start, end in busy_times:\n        busy_slots.append((start, end))\n\n    # Find gaps in the busy schedule\n    current_time = start_time\n    while current_time + MEETING_DURATION <= end_time:\n        is_busy = any(start <= current_time < end for start, end in busy_slots)\n        if not is_busy:\n            return current_time\n            \n        # Move to the next time slot\n        next_busy_time = min((end for start, end in busy_slots if start > current_time), default=end_time)\n        current_time = next_busy_time\n        \n    return None\n\n# Check for each day\nfor day in [\"Monday\", \"Tuesday\", \"Thursday\"]:\n    if day == \"Tuesday\":\n        continue # Dorothy can not meet on Tuesday before 14:30\n    \n    meeting_time = find_meeting_time(daniel_schedule, dorothy_schedule, day)\n    \n    if meeting_time:\n        end_time = meeting_time + MEETING_DURATION\n        print(f\"{meeting_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_877"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the existing schedules for Janet and Alan\njanet_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n}\n\nalan_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Set meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Time slots to check\npossible_days = [\"Tuesday\", \"Wednesday\", \"Thursday\"]\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free for both participants\ndef is_slot_free(start, end, participant_schedule):\n    for busy_start, busy_end in participant_schedule:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Search for a time slot\nfor day in possible_days:\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        if is_slot_free(current_time, current_time + meeting_duration, janet_schedule[day]) and \\\n           is_slot_free(current_time, current_time + meeting_duration, alan_schedule[day]):\n            print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n            break\n        current_time += timedelta(minutes=30)\n```\n",
            "count": "calendar_scheduling_example_878"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define function to find a meeting time\ndef find_meeting_time():\n    # Participants' schedules in terms of busy intervals\n    jack_busy_slots = [\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))\n    ]\n    \n    gerald_busy_slots = [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n    ]\n\n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n    \n    # Define work hours (9:00 to 17:00)\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n\n    # Function to check if a time slot is available\n    def is_slot_available(start, end):\n        for busy_start, busy_end in jack_busy_slots + gerald_busy_slots:\n            if start < busy_end and end > busy_start:\n                return False\n        return True\n\n    # Find earliest available slot for the meeting\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        if is_slot_available(current_time, current_time + meeting_duration):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=15)  # Check every 15 minutes\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_879"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and days\nwork_hours = {\n    \"Monday\": [(9, 0), (17, 0)],\n    \"Tuesday\": [(9, 0), (17, 0)],\n    \"Wednesday\": [(9, 0), (17, 0)],\n    \"Thursday\": [(9, 0), (17, 0)],\n}\n\n# Define existing schedules for Anna and Billy\nanna_schedule = {\n    \"Monday\": [(10, 0, 10, 30), (14, 0, 15, 0)],\n    \"Tuesday\": [(9, 30, 10, 0), (14, 0, 15, 0), (16, 30, 17, 0)],\n    \"Wednesday\": [(9, 30, 10, 30), (13, 30, 14, 0)],\n    \"Thursday\": [(9, 30, 10, 0), (11, 30, 12, 0), (13, 30, 14, 0), (16, 30, 17, 0)],\n}\n\nbilly_schedule = {\n    \"Monday\": [(9, 0, 10, 30), (11, 0, 15, 30), (16, 0, 16, 30)],\n    \"Tuesday\": [(9, 0, 17, 0)],\n    \"Wednesday\": [(9, 0, 13, 30), (14, 0, 14, 30), (15, 30, 17, 0)],\n    \"Thursday\": [(9, 0, 14, 30), (16, 0, 16, 30)],\n}\n\n# Duration of the meeting in hours and minutes\nmeeting_duration = timedelta(hours=1)\n\ndef get_free_time(day):\n    # Merge Anna's and Billy's schedules\n    busy_times = []\n    \n    # Appending Anna's busy times\n    for start_hour, start_minute, end_hour, end_minute in anna_schedule[day]:\n        busy_times.append((datetime(year=2023, month=1, day=1, hour=start_hour, minute=start_minute),\n                           datetime(year=2023, month=1, day=1, hour=end_hour, minute=end_minute)))\n    \n    # Appending Billy's busy times\n    for start_hour, start_minute, end_hour, end_minute in billy_schedule[day]:\n        busy_times.append((datetime(year=2023, month=1, day=1, hour=start_hour, minute=start_minute),\n                           datetime(year=2023, month=1, day=1, hour=end_hour, minute=end_minute)))\n    \n    # Sort busy times\n    busy_times.sort()\n\n    # Create a list of free time slots\n    free_times = []\n    current_time = datetime(year=2023, month=1, day=1, hour=work_hours[day][0][0], minute=work_hours[day][0][1])\n\n    for start, end in busy_times:\n        if current_time < start:\n            free_times.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check the time after the last busy time until the end of work hours\n    end_work_hour = datetime(year=2023, month=1, day=1, hour=work_hours[day][1][0], minute=work_hours[day][1][1])\n    if current_time < end_work_hour:\n        free_times.append((current_time, end_work_hour))\n\n    return free_times\n\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        free_times = get_free_time(day)\n        for start, end in free_times:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = meeting_start + meeting_duration\n                if day == \"Wednesday\":\n                    continue  # Avoid scheduling on Wednesday if possible\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_880"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(evelyn_schedule, dylan_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert schedule into time intervals\n    def convert_to_intervals(schedule):\n        intervals = []\n        for day, busy_times in schedule.items():\n            for start, end in busy_times:\n                intervals.append((day, start, end))\n        return intervals\n\n    evelyn_intervals = convert_to_intervals(evelyn_schedule)\n    dylan_intervals = convert_to_intervals(dylan_schedule)\n\n    # Create a list for all busy periods\n    busy_periods = []\n    for day in set(schedule for (schedule, _, _) in evelyn_intervals).union(\n            set(schedule for (schedule, _, _) in dylan_intervals)):\n        busy_periods.append((day, work_start, work_end))\n\n    # Function to check if the meeting fits in between busy periods\n    def can_schedule_meeting(day, start_time, duration):\n        end_time = start_time + timedelta(minutes=duration)\n        for (busy_day, busy_start, busy_end) in busy_periods:\n            if busy_day == day and not (end_time <= busy_start or start_time >= busy_end):\n                return False\n        return True\n\n    # Try finding a half-hour slot for a meeting\n    for day in busy_periods:\n        current_time = work_start\n        while current_time + timedelta(minutes=meeting_duration) <= work_end:\n            if can_schedule_meeting(day[0], current_time, meeting_duration):\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Increment by 30 minutes\n            \n    return None\n\nevelyn_schedule = {\n    \"Monday\": [(\"09:30\", \"10:00\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"13:00\", \"15:00\")],\n    \"Tuesday\": [(\"10:00\", \"11:00\"), (\"12:00\", \"14:00\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    \"Wednesday\": [(\"09:00\", \"10:30\"), (\"13:30\", \"16:00\")],\n    \"Thursday\": [(\"09:30\", \"10:00\"), (\"11:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"15:30\", \"16:30\")],\n}\n\ndylan_schedule = {\n    \"Monday\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"13:00\", \"13:30\"), (\"14:00\", \"14:30\"), (\"15:30\", \"16:30\")],\n    \"Tuesday\": [(\"09:00\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"17:00\")],\n    \"Wednesday\": [(\"09:00\", \"10:30\"), (\"11:00\", \"12:30\"), (\"13:00\", \"14:00\"), (\"14:30\", \"15:00\")],\n    \"Thursday\": [(\"09:30\", \"10:30\"), (\"11:30\", \"12:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"17:00\")],\n}\n\nmeeting_duration = 30  # Meeting duration in minutes\n\n# Find and print the proposed meeting time\nprint(find_meeting_time(evelyn_schedule, dylan_schedule, meeting_duration))\n```",
            "count": "calendar_scheduling_example_881"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules in terms of busy times\nvirginia_busy = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\nkayla_busy = [\n    (datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('9:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Available time slots (9:00 to 17:00)\navailable_start = datetime.strptime('09:00', '%H:%M')\navailable_end = datetime.strptime('17:00', '%H:%M')\nwork_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n# Function to check if the time slot is available\ndef is_time_slot_available(start_time, duration):\n    end_time = start_time + duration\n    for busy in virginia_busy + kayla_busy:\n        if (start_time < busy[1] and end_time > busy[0]):\n            return False\n    return True\n\n# Finding the earliest available time slot within constraints\ndef find_earliest_meeting_time():\n    for day in work_days:\n        current_time = available_start\n        while current_time + meeting_duration <= available_end:\n            if is_time_slot_available(current_time, meeting_duration):\n                return current_time, current_time + meeting_duration\n            current_time += timedelta(minutes=30)  # Check next 30 mins\n    return None\n\nmeeting_time = find_earliest_meeting_time()\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_882"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nelijah_schedule = {\n    \"Monday\": [(11, 0), (13, 0)],\n    \"Tuesday\": [(9, 0), (10, 0), (14, 0), (15, 30), (16, 0), (16, 30)],\n    \"Wednesday\": [(9, 0), (10, 0), (10, 30), (12, 0), (15, 30), (16, 0), (16, 30)],\n    \"Thursday\": [(9, 0), (9, 30), (10, 0), (10, 30), (14, 30), (15, 30)],\n}\n\ndebra_schedule = {\n    \"Monday\": [(9, 0), (9, 30), (10, 30), (11, 30), (17, 0)],\n    \"Tuesday\": [(9, 0), (15, 30), (16, 0), (17, 0)],\n    \"Wednesday\": [(9, 0), (17, 0)],\n    \"Thursday\": [(9, 0), (9, 30), (10, 30), (11, 0), (14, 30), (15, 0), (15, 30), (16, 0), (16, 30)],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check availability\ndef is_time_available(start_time, end_time, schedule):\n    for busy_start, busy_end in schedule:\n        busy_start_time = datetime.combine(start_time.date(), datetime.time(busy_start[0], busy_start[1]))\n        busy_end_time = datetime.combine(start_time.date(), datetime.time(busy_end[0], busy_end[1]))\n        if (start_time < busy_end_time and end_time > busy_start_time):\n            return False\n    return True\n\n# Find a suitable meeting time\nfor day in [\"Monday\", \"Wednesday\", \"Thursday\"]:\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if is_time_available(current_time, end_time, elijah_schedule[day]) and is_time_available(current_time, end_time, debra_schedule[day]):\n            print(f\"{{{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}}}\")\n            break\n        current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_883"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if the proposed time is available for both participants\ndef time_available(start_time, duration, jason_schedule, lori_schedule):\n    end_time = start_time + timedelta(minutes=duration)\n    for busy_start, busy_end in jason_schedule:\n        if (start_time < busy_end) and (end_time > busy_start):\n            return False\n    for busy_start, busy_end in lori_schedule:\n        if (start_time < busy_end) and (end_time > busy_start):\n            return False\n    return True\n\n# Schedules\njason_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\nlori_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting details\nmeeting_duration = 30  # in minutes\navailable_days = [\"Monday\", \"Tuesday\", \"Thursday\"]\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Trying to find the earliest time for the meeting\nfor hour in range(9, 17):\n    for minute in [0, 30]:\n        proposed_time = start_time.replace(hour=hour, minute=minute)\n        if (proposed_time.date().strftime(\"%A\") in available_days) and time_available(proposed_time, meeting_duration, jason_schedule, lori_schedule):\n            print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\")\n            break\n    else:\n        continue\n    break\n```",
            "count": "calendar_scheduling_example_884"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Jerry's schedule\njerry_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n}\n\n# Function to check if a time slot is free\ndef is_time_slot_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Function to find a time slot for the meeting\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            meeting_end_time = current_time + meeting_duration\n            if is_time_slot_free(current_time, meeting_end_time, jerry_schedule[day]):\n                return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)\n    return None\n\n# Get the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_885"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_hour = 9\nend_hour = 17\nmeeting_duration = timedelta(hours=1)\n\n# Workdays\nworkdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n# Define blocked times for Jesse and Robert\njesse_schedule = {\n    'Monday': [(9, 30, 10, 0)],\n    'Tuesday': [(9, 0, 10, 0), (13, 30, 14, 0), (15, 30, 16, 0), (16, 30, 17, 0)],\n    'Wednesday': [(11, 30, 12, 30), (13, 0, 13, 30), (15, 30, 16, 0)],\n    'Thursday': [(12, 0, 12, 30), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0)]\n}\n\nrobert_schedule = {\n    'Monday': [(10, 0, 11, 0), (12, 0, 13, 30), (14, 0, 14, 30), (15, 0, 16, 0)],\n    'Tuesday': [(9, 0, 17, 0)],\n    'Wednesday': [(9, 0, 13, 30), (14, 0, 17, 0)],\n    'Thursday': [(9, 30, 11, 0), (11, 30, 15, 0), (15, 30, 17, 0)]\n}\n\ndef get_free_slots(schedule):\n    free_slots = []\n    for day in workdays:\n        busy_times = schedule.get(day, [])\n        busy_times.sort()\n        free_times = []\n\n        # Start from the beginning of the workday\n        current_start = start_hour\n\n        for start, end in busy_times:\n            if current_start < start:\n                free_times.append((current_start, start))\n            current_start = max(current_start, end)\n        \n        # After the last busy time until workday end\n        if current_start < end_hour:\n            free_times.append((current_start, end_hour))\n\n        free_slots.append((day, free_times))\n\n    return free_slots\n\ndef find_meeting_time(jesse_slots, robert_slots):\n    for day in workdays:\n        jesse_free = dict(jesse_slots)[day]\n        robert_free = dict(robert_slots)[day]\n\n        for jesse_start, jesse_end in jesse_free:\n            for robert_start, robert_end in robert_free:\n                latest_start = max(jesse_start, robert_start)\n                earliest_end = min(jesse_end, robert_end)\n\n                if earliest_end - latest_start >= meeting_duration:\n                    return day, latest_start\n\n# Get free slots for both participants\njesse_free_slots = get_free_slots(jesse_schedule)\nrobert_free_slots = get_free_slots(robert_schedule)\n\n# Find a mutual meeting time\nmeeting_day, meeting_time = find_meeting_time(jesse_free_slots, robert_free_slots)\n\n# Convert time to required format\nstart_time = f\"{meeting_time:02}:00\"\nend_time = f\"{meeting_time + 1:02}:00\"\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_886"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define constraints for Nancy and Theresa\nnancy_schedule = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\ntheresa_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find the earliest available time slot for a meeting\ndef find_meeting_time(nancy_schedule, theresa_schedule, work_start, work_end, meeting_duration):\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        meeting_end_time = current_time + meeting_duration\n        \n        nancy_free = all(not (start < meeting_end_time and end > current_time) for start, end in nancy_schedule)\n        theresa_free = all(not (start < meeting_end_time and end > current_time) for start, end in theresa_schedule)\n        \n        if nancy_free and theresa_free:\n            return current_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Check the next half-hour slot\n\n# Get the proposed meeting time\nproposed_meeting_time = find_meeting_time(nancy_schedule, theresa_schedule, work_start, work_end, meeting_duration)\nprint(proposed_meeting_time)\n```\n",
            "count": "calendar_scheduling_example_887"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Convert schedule into a list of busy slots for Vincent\nvincent_busy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\ndef find_meeting_time():\n    # Meeting days to consider based on constraints\n    days_to_consider = [\"Tuesday\", \"Thursday\"]\n    \n    for day in days_to_consider:\n        current_time = start_time\n        busy_times = vincent_busy_schedule[day]\n        \n        while current_time + meeting_duration <= end_time:\n            # Check if the current time slot is free\n            is_free = True\n            for start, end in busy_times:\n                if current_time < end and current_time + meeting_duration > start:\n                    is_free = False\n                    break\n            \n            # If free, return the time in the required format\n            if is_free:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            \n            # Move to the next half hour\n            current_time += timedelta(minutes=30)\n    \n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_888"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the work hours and days\n    work_hours = (9, 17)\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    \n    # Participants' schedules\n    danielle_schedule = {\n        'Monday': [(9, 9.5), (13.5, 14), (14.5, 15.5), (16, 16.5)],\n        'Tuesday': [(10.5, 11), (12, 12.5)],\n        'Wednesday': [(11.5, 12), (13.5, 14), (15, 15.5)],\n        'Thursday': [(9, 10), (11.5, 12), (16.5, 17)]\n    }\n    \n    angela_schedule = {\n        'Monday': [(9, 16)],\n        'Tuesday': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 17)],\n        'Wednesday': [(9, 12.5), (13, 13.5), (14.5, 16)],\n        'Thursday': [(9, 10.5), (11, 16.5)]\n    }\n\n    # Meeting duration in hours\n    meeting_duration = 0.5\n    \n    # Constraints\n    no_meeting_days = ['Wednesday']\n    angela_preferred_days = ['Monday', 'Thursday']  # Angela's preference\n    danielle_preferred_days = ['Monday', 'Tuesday', 'Thursday']  # Danielle's preference\n    \n    # Check each day\n    for day in days:\n        if day in no_meeting_days:\n            continue\n        if day not in angela_preferred_days or day not in danielle_preferred_days:\n            continue\n        \n        # Iterate through possible time slots\n        start_time = work_hours[0]  # 9:00\n        end_time = work_hours[1]  # 17:00\n        \n        # Create a list of busy slots for both participants\n        busy_slots = []\n        for start, end in danielle_schedule.get(day, []):\n            busy_slots.append((start, end))\n        for start, end in angela_schedule.get(day, []):\n            busy_slots.append((start, end))\n        \n        # Sort busy slots by start time\n        busy_slots.sort()\n        \n        # Find available time slots\n        last_end = start_time\n        for start, end in busy_slots:\n            if last_end + meeting_duration <= start:\n                return f\"{int(last_end)}:00:{int(last_end + meeting_duration)}:00\"\n            last_end = max(last_end, end)\n        \n        # Final check for time after last busy slot until end of work hours\n        if last_end + meeting_duration <= end_time:\n            return f\"{int(last_end)}:00:{int(last_end + meeting_duration)}:00\"\n    \n    return \"No suitable time found\"\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_889"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(adam_schedule, sandra_schedule, meeting_duration, work_hours):\n    # Convert schedules to time slots\n    def get_free_slots(schedule, work_hours):\n        free_slots = []\n        start_work, end_work = work_hours\n        current_time = start_work\n\n        # Check until the end of the workday\n        while current_time < end_work:\n            is_busy = any(start <= current_time < end for start, end in schedule)\n            if not is_busy:\n                free_slots.append(current_time)\n            current_time += 30  # Check every 30 minutes\n\n        return free_slots\n\n    adam_free_slots = get_free_slots(adam_schedule, work_hours)\n    sandra_free_slots = get_free_slots(sandra_schedule, work_hours)\n\n    # Find overlapping time slots that can accommodate the meeting duration\n    meeting_time_slots = []\n    for time in adam_free_slots:\n        if time in sandra_free_slots:\n            meeting_time_slots.append(time)\n\n    # Filter the time slots based on the meeting duration\n    for time in meeting_time_slots:\n        meeting_end = time + meeting_duration\n        if meeting_end <= work_hours[1] and meeting_end in adam_free_slots and meeting_end in sandra_free_slots:\n            return f\"{time:02d}:00:{meeting_end:02d}:00\"\n\n    return \"No available slot found\"\n\n\n# Participant schedules (start, end)\nadam_schedule = [\n    (9, 9.5), (10.5, 11), (12, 12.5), (13, 14), \n    (14.5, 15)\n]  # Meetings in hours (9.5 = 9:30, 10.5 = 10:30, 14.5 = 14:30)\n\nsandra_schedule = [\n    (9, 17), (9, 14), (14.5, 16.5),\n    (9, 10.5), (11, 11.5), (12, 12.5), \n    (13, 13.5), (15, 17), (9, 11.5), \n    (12.5, 17)\n]\n\nmeeting_duration = 0.5  # 30 minutes\nwork_hours = (9, 17)  # from 9:00 to 17:00 \n\nproposed_time = find_meeting_time(adam_schedule, sandra_schedule, meeting_duration, work_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_890"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nmaria_schedule = {\n    'Monday': [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    'Wednesday': [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Thursday': [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\nmargaret_schedule = {\n    'Monday': [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Wednesday': [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    'Thursday': [\n        (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n}\n\n# Desired meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time\ndef find_meeting_time():\n    days = ['Wednesday', 'Thursday']  # Excluding Monday and Tuesday for Maria\n    for day in days:\n        mar_schedule = maria_schedule[day]\n        marg_schedule = margaret_schedule[day]\n\n        # Create a list of time slots for available times\n        mar_free_slots = []\n        marg_free_slots = []\n\n        # Define work hours\n        work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n        work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n        # Calculate free slots for Maria\n        current_time = work_start\n        while current_time < work_end:\n            next_time = current_time + meeting_duration\n            if not any(start <= current_time < end for start, end in mar_schedule) and next_time <= work_end:\n                mar_free_slots.append((current_time, next_time))\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n        # Calculate free slots for Margaret\n        current_time = work_start\n        while current_time < work_end:\n            next_time = current_time + meeting_duration\n            if not any(start <= current_time < end for start, end in marg_schedule) and next_time <= work_end:\n                marg_free_slots.append((current_time, next_time))\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n        \n        # Find overlapping slots\n        for start_time, end_time in mar_free_slots:\n            for marg_start, marg_end in marg_free_slots:\n                if start_time < marg_end and marg_start < end_time:  # Checking for overlap\n                    return start_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")  # Format HH:MM:HH:MM\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_891"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nmeeting_duration = timedelta(hours=1)\n\n# Define existing schedules for Willie and Michael\nwillie_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\nmichael_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Check for available time slots\ndef find_meeting_time():\n    current_time = working_hours[0]\n    \n    while current_time + meeting_duration <= working_hours[1]:\n        end_time = current_time + meeting_duration\n        is_conflict = False\n        \n        # Check Willie\u2019s schedule\n        for start, end in willie_schedule:\n            if (current_time < end) and (start < end_time):\n                is_conflict = True\n                break\n        \n        # Check Michael\u2019s schedule\n        if not is_conflict:\n            for start, end in michael_schedule:\n                if (current_time < end) and (start < end_time):\n                    is_conflict = True\n                    break\n\n        # If no conflict, return the proposed meeting time\n        if not is_conflict:\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        \n        # Move to the next time slot (in 30 minutes increments)\n        current_time += timedelta(minutes=30)\n\n    return None\n\n# Finding a suitable time to meet\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_892"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define blocked schedules\nmichelle_schedule = {\n    'Monday': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \n    'Tuesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n\n    'Wednesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n\n    'Thursday': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\njulie_schedule = {\n    'Monday': [(start_time, end_time)],\n    \n    'Tuesday': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), end_time)],\n    \n    'Wednesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), end_time)],\n    \n    'Thursday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), end_time)],\n}\n\n# Function to find available time slot\ndef find_meeting_time(michelle_schedule, julie_schedule):\n    # Check days of interest\n    days = ['Monday', 'Wednesday', 'Thursday']\n    for day in days:\n        michelle_free_times = [\n            (start_time, end_time)\n        ]\n        # Remove blocked times\n        for start, end in michelle_schedule[day]:\n            new_free_times = []\n            for free_start, free_end in michelle_free_times:\n                if free_start < start:\n                    new_free_times.append((free_start, start))\n                if free_end > end:\n                    new_free_times.append((end, free_end))\n            michelle_free_times = new_free_times\n\n        julie_free_times = [\n            (start_time, end_time)\n        ]\n        # Remove blocked times\n        for start, end in julie_schedule[day]:\n            new_free_times = []\n            for free_start, free_end in julie_free_times:\n                if free_start < start:\n                    new_free_times.append((free_start, start))\n                if free_end > end:\n                    new_free_times.append((end, free_end))\n            julie_free_times = new_free_times\n        \n        # Find common times\n        for michelle_start, michelle_end in michelle_free_times:\n            for julie_start, julie_end in julie_free_times:\n                common_start = max(michelle_start, julie_start)\n                common_end = min(michelle_end, julie_end)\n                if common_end - common_start >= meeting_duration:\n                    return common_start.strftime(\"%H:%M\") + \":\" + (common_start + meeting_duration).strftime(\"%H:%M\")\n\n# Call the function to get the proposed meeting time\navailable_time = find_meeting_time(michelle_schedule, julie_schedule)\nprint(available_time)\n```",
            "count": "calendar_scheduling_example_893"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules\nlisa_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\njean_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find available meeting time\ndef find_meeting_time(lisa_schedule, jean_schedule, meeting_duration):\n    for day in [\"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        lisa_busy = lisa_schedule[day]\n        jean_busy = jean_schedule[day]\n        \n        # Create a combined busy schedule for the day\n        busy_times = sorted(lisa_busy + jean_busy, key=lambda x: x[0])\n        \n        # Check for available time slots\n        available_start = work_start\n        for start, end in busy_times:\n            if available_start + meeting_duration <= start:\n                return available_start.strftime(\"%H:%M\") + \":\" + (available_start + meeting_duration).strftime(\"%H:%M\")\n            available_start = max(available_start, end)\n        \n        # Check time after the last busy slot till work end\n        if available_start + meeting_duration <= work_end:\n            return available_start.strftime(\"%H:%M\") + \":\" + (available_start + meeting_duration).strftime(\"%H:%M\")\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(lisa_schedule, jean_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_894"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the existing schedules\nalexander_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\nvictoria_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to check if a time slot is free\ndef is_time_free(schedule, day, start, duration):\n    end = start + duration\n    for busy_start, busy_end in schedule.get(day, []):\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    for day in [\"Wednesday\", \"Thursday\"]:  # Skipping Monday and Tuesday\n        time = start_time\n        while time + meeting_duration <= end_time:\n            if is_time_free(alexander_schedule, day, time, meeting_duration) and \\\n               is_time_free(victoria_schedule, day, time, meeting_duration):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n            time += timedelta(minutes=30)  # checking at 30 min intervals\n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)  # Output the result\n```",
            "count": "calendar_scheduling_example_895"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define participants' schedules and constraints\nann_busy_times = [\n    (time(11, 30), time(12, 0)),\n    (time(13, 0), time(13, 30)),\n    (time(16, 0), time(17, 0)),\n]\n\nsharon_busy_times = [\n    (time(9, 0), time(10, 30)),\n    (time(11, 30), time(12, 0)),\n    (time(13, 0), time(13, 30)),\n    (time(14, 0), time(15, 30)),\n    (time(16, 0), time(17, 0)),\n    (time(9, 30), time(10, 0)),\n    (time(10, 30), time(11, 30)),\n    (time(12, 0), time(13, 0)),\n    (time(14, 0), time(15, 30)),\n    (time(16, 30), time(17, 0)),\n]\n\n# Define meeting preferences\npreferred_days = ['Wednesday']\nmeeting_duration = timedelta(hours=1)\n\ndef is_time_available(time_slot, busy_times):\n    for start, end in busy_times:\n        if start < time_slot < end or \\\n           start < (time_slot + meeting_duration) < end or \\\n           time_slot < start < (time_slot + meeting_duration):\n            return False\n    return True\n\ndef find_meeting_time():\n    start_of_work = time(9, 0)\n    end_of_work = time(17, 0)\n    \n    for day in preferred_days:\n        for hour in range(start_of_work.hour, end_of_work.hour):\n            meeting_start = time(hour)\n            if is_time_available(meeting_start, ann_busy_times) and is_time_available(meeting_start, sharon_busy_times):\n                return f\"{meeting_start.strftime('%H:%M')}:{(meeting_start.hour + 1) % 24}:{meeting_start.strftime('%M')}\"\n\n# Get proposed meeting time\nproposed_meeting_time = find_meeting_time()\nprint(proposed_meeting_time)\n```",
            "count": "calendar_scheduling_example_896"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\n# Define the busy schedule for Gabriel and Cynthia\ngabriel_busy_times = {\n    \"Monday\": [(9, 30, 10, 30), (12, 30, 14, 0), (15, 0, 15, 30)],\n    \"Tuesday\": [(11, 0, 11, 30), (12, 0, 12, 30)],\n    \"Wednesday\": [(9, 30, 10, 0), (12, 0, 12, 30)],\n    \"Thursday\": [(10, 0, 11, 0), (11, 30, 12, 0), (16, 30, 17, 0)]\n}\n\ncynthia_busy_times = {\n    \"Monday\": [(9, 0, 12, 30), (13, 0, 13, 30), (14, 0, 17, 0)],\n    \"Tuesday\": [(9, 0, 17, 0)],\n    \"Wednesday\": [(9, 0, 10, 0), (11, 0, 13, 0), (13, 30, 17, 0)],\n    \"Thursday\": [(9, 0, 16, 0), (16, 30, 17, 0)]\n}\n\n# Meeting duration in hours and minutes\nmeeting_duration = (1, 0)  # 1 hour, 0 minutes\n\n# Function to check if time is suitable\ndef is_time_available(start_hour, start_minute, end_hour, end_minute, busy_times):\n    for busy_start_hour, busy_start_minute, busy_end_hour, busy_end_minute in busy_times:\n        if not (end_hour < busy_start_hour or (end_hour == busy_start_hour and start_minute < busy_start_minute) or \n                (start_hour > busy_end_hour or (start_hour == busy_end_hour and start_minute >= busy_end_minute))):\n            return False\n    return True\n\n# Function to find suitable meeting time\ndef find_meeting_time():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n    work_start_hour = 9\n    work_end_hour = 17\n\n    for day in days:\n        for start_hour in range(work_start_hour, work_end_hour):\n            for start_minute in [0, 30]:\n                end_hour = start_hour + meeting_duration[0]\n                end_minute = start_minute + meeting_duration[1]\n                if end_minute >= 60:\n                    end_minute -= 60\n                    end_hour += 1\n                \n                if end_hour <= work_end_hour:\n                    if (is_time_available(start_hour, start_minute, end_hour, end_minute, gabriel_busy_times[day]) and\n                        is_time_available(start_hour, start_minute, end_hour, end_minute, cynthia_busy_times[day])):\n                        return f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\n\n# Generate a proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_897"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define schedules for William and Carol\nwilliam_schedule = {\n    \"Monday\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))]\n}\n\ncarol_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Possible days to schedule\npossible_days = [\"Tuesday\", \"Wednesday\"]\n\n# Function to find common free time slots\ndef find_slot(william_schedule, carol_schedule, meeting_duration):\n    for day in possible_days:\n        william_busy = sorted(william_schedule[day])\n        carol_busy = sorted(carol_schedule[day])\n\n        # Merge busy slots\n        busy_slots = william_busy + carol_busy\n        busy_slots.sort()\n\n        # Determine free slots\n        free_slots = []\n        start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n        current_start = start_of_day\n\n        for busy_start, busy_end in busy_slots:\n            if current_start + meeting_duration <= busy_start:\n                free_slots.append((current_start, busy_start))\n            current_start = max(current_start, busy_end)\n\n        if current_start + meeting_duration <= end_of_day:\n            free_slots.append((current_start, end_of_day))\n\n        # Check for available slots of required duration\n        for start, end in free_slots:\n            if end - start >= meeting_duration:\n                return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n\n# Get proposed time\nproposed_time = find_slot(william_schedule, carol_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_898"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours = {\n    \"Monday\": (9, 17),\n    \"Tuesday\": (9, 17),\n    \"Wednesday\": (9, 17),\n    \"Thursday\": (9, 17)\n}\n\n# Schedule of participants (end time of busy slots for both)\nchristian_schedule = {\n    \"Monday\": [(11, 30), (12, 0), (13, 30), (14, 0), (15, 0), (15, 30)],\n    \"Tuesday\": [(10, 0), (10, 30), (14, 0), (14, 30)],\n    \"Wednesday\": [(10, 0), (11, 0), (12, 0), (14, 30), (15, 0), (15, 30), (16, 0), (17, 0)],\n    \"Thursday\": [(10, 30), (11, 0), (13, 0), (13, 30)]\n}\n\nabigail_schedule = {\n    \"Monday\": [(9, 30), (10, 0), (10, 30), (12, 30), (13, 0), (14, 30), (15, 0), (17, 0)],\n    \"Tuesday\": [(9, 0), (9, 30), (10, 0), (12, 0), (12, 30), (13, 30), (14, 0), (16, 30)],\n    \"Wednesday\": [(9, 0), (10, 30), (11, 0), (14, 0), (14, 30), (17, 0)],\n    \"Thursday\": [(9, 0), (10, 30), (11, 30), (12, 30), (14, 30), (15, 0), (15, 30), (16, 0), (16, 30), (17, 0)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time():\n    for day in working_hours.keys():\n        start_hour, end_hour = working_hours[day]\n        busy_times = christian_schedule.get(day, []) + abigail_schedule.get(day, [])\n        busy_times = sorted(busy_times)\n        \n        # Create free time slots in the day\n        free_slots = []\n        \n        # Add start of the day\n        current_time = (start_hour, 0)\n        \n        for busy_start in busy_times:\n            if current_time < busy_start:\n                free_slots.append((current_time, busy_start))\n            current_time = busy_start\n        \n        # Add end of the day\n        if current_time < (end_hour, 0):\n            free_slots.append((current_time, (end_hour, 0)))\n        \n        # Find a suitable slot for a meeting\n        for slot_start, slot_end in free_slots:\n            slot_start_dt = datetime(year=2023, month=10, day=2 if day == \"Monday\" else (3 if day == \"Tuesday\" else (4 if day == \"Wednesday\" else 5)), hour=slot_start[0], minute=slot_start[1])\n            slot_end_dt = datetime(year=2023, month=10, day=2 if day == \"Monday\" else (3 if day == \"Tuesday\" else (4 if day == \"Wednesday\" else 5)), hour=slot_end[0], minute=slot_end[1])\n            \n            if slot_end_dt - slot_start_dt >= meeting_duration:\n                proposed_start = slot_start_dt\n                proposed_end = proposed_start + meeting_duration\n                return f\"{proposed_start.hour:02}:{proposed_start.minute:02}:{proposed_end.hour:02}:{proposed_end.minute:02}\"\n\n# Propose a time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_899"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(jeremy_schedule, lori_schedule, meeting_duration):\n    # Define work hours and days\n    work_hours_start = 9 * 60  # 9 AM in minutes\n    work_hours_end = 17 * 60    # 5 PM in minutes\n    work_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    \n    # Convert schedules to minutes\n    def convert_schedule_to_minutes(schedule):\n        busy_times = []\n        for time in schedule:\n            start_time, end_time = time\n            busy_times.append((start_time.hour * 60 + start_time.minute, end_time.hour * 60 + end_time.minute))\n        return busy_times\n\n    jeremy_busy_times = convert_schedule_to_minutes(jeremy_schedule)\n    lori_busy_times = convert_schedule_to_minutes(lori_schedule)\n\n    for day in work_days:\n        for start in range(work_hours_start, work_hours_end - meeting_duration, 30):\n            end = start + meeting_duration\n            \n            # Check if Jeremy is free\n            jeremy_free = all(not(start < busy_end and end > busy_start) for busy_start, busy_end in jeremy_busy_times)\n            # Check if Lori is free\n            lori_free = all(not(start < busy_end and end > busy_start) for busy_start, busy_end in lori_busy_times)\n\n            # If both are free, return the time\n            if jeremy_free and lori_free:\n                return f\"{day} {start // 60:02}:{start % 60:02}-{end // 60:02}:{end % 60:02}\"\n\n# Existing schedules for each participant\njeremy_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nlori_schedule = [\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Schedule a 60-minute meeting\nmeeting_duration = 60  # in minutes\nproposed_time = schedule_meeting(jeremy_schedule, lori_schedule, meeting_duration)\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_900"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define participant schedules\nsean_schedule = {\n    \"Monday\": [(time(9, 30), time(10, 0)), (time(11, 30), time(12, 0)),\n               (time(14, 30), time(15, 0))],\n    \"Tuesday\": [(time(9, 0), time(10, 30)), (time(12, 0), time(12, 30)),\n                (time(16, 30), time(17, 0))],\n    \"Wednesday\": [(time(9, 0), time(9, 30)), (time(11, 0), time(11, 30)),\n                  (time(12, 0), time(12, 30)), (time(13, 0), time(13, 30)),\n                  (time(16, 0), time(16, 30))],\n    \"Thursday\": [(time(10, 0), time(12, 30)), (time(15, 30), time(17, 0))],\n    \"Friday\": [(time(9, 0), time(9, 30)), (time(12, 0), time(13, 0)),\n               (time(13, 30), time(14, 0)), (time(15, 0), time(16, 30))]\n}\n\npaul_schedule = {\n    \"Monday\": [(time(10, 0), time(10, 30)), (time(11, 0), time(15, 30)),\n               (time(16, 0), time(17, 0))],\n    \"Tuesday\": [(time(9, 0), time(12, 30)), (time(13, 0), time(14, 0)),\n                (time(14, 30), time(16, 0))],\n    \"Wednesday\": [(time(13, 30), time(14, 0)), (time(14, 30), time(15, 0)),\n                  (time(15, 30), time(16, 0))],\n    \"Thursday\": [(time(9, 30), time(10, 30)), (time(11, 30), time(12, 0)),\n                 (time(13, 30), time(14, 0)), (time(16, 30), time(17, 0))],\n    \"Friday\": [(time(10, 0), time(10, 30)), (time(11, 0), time(11, 30)),\n               (time(12, 0), time(13, 0)), (time(14, 0), time(14, 30)),\n               (time(15, 0), time(16, 0)), (time(16, 30), time(17, 0))]\n}\n\n# Meeting Duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find available time\ndef find_meeting_time(sean_schedule, paul_schedule, meeting_duration):\n    for day in sean_schedule:\n        if day == \"Thursday\":  # Skip Thursday\n            continue\n        \n        # Obtain non-busy slots for both participants\n        sean_busy = sean_schedule[day]\n        paul_busy = paul_schedule[day]\n\n        # Create a timeline of busy slots\n        busy_slots = sean_busy + paul_busy\n        busy_slots.sort(key=lambda x: x[0])  # Sort the busy slots by start time\n\n        # Create slots for the day\n        start_of_day = time(9, 0)\n        end_of_day = time(17, 0)\n\n        # Check for time slots\n        current_start = start_of_day\n        \n        for busy_start, busy_end in busy_slots:\n            # Check for free time before the busy slot\n            if current_start < busy_start:\n                available_end = (datetime.combine(datetime.today(), current_start) + meeting_duration).time()\n                if available_end <= busy_start:  # Does the time gap allow for a meeting?\n                    return f\"{current_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\"\n            current_start = max(current_start, busy_end)\n\n        # Check for time after last busy slot until the end of the day\n        available_end = (datetime.combine(datetime.today(), current_start) + meeting_duration).time()\n        if available_end <= end_of_day:\n            return f\"{current_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\"\n\n# Call the function and print the proposed time\nmeeting_time = find_meeting_time(sean_schedule, paul_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_901"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Schedules of Lawrence and John\nlawrence_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\njohn_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Function to check for free slots\ndef get_free_slots(schedule):\n    free_slots = []\n    current_time = working_hours_start\n\n    for start, end in sorted(schedule):\n        if current_time < start:\n            free_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    if current_time < working_hours_end:\n        free_slots.append((current_time, working_hours_end))\n\n    return free_slots\n\n# Get free slots for both participants\nlawrence_free_slots = get_free_slots(lawrence_schedule)\njohn_free_slots = get_free_slots(john_schedule)\n\n# Find common free slots for meeting\ncommon_slots = []\n\nfor lawrence_slot in lawrence_free_slots:\n    for john_slot in john_free_slots:\n        start = max(lawrence_slot[0], john_slot[0])\n        end = min(lawrence_slot[1], john_slot[1])\n        \n        if end - start >= meeting_duration:\n            common_slots.append((start, start + meeting_duration))\n\n# Get the earliest common time\nif common_slots:\n    earliest_slot = min(common_slots, key=lambda x: x[0])\n    formatted_time = f\"{earliest_slot[0].strftime('%H:%M')}:{earliest_slot[1].strftime('%H:%M')}\"\n    print(f\"The proposed meeting time is: {formatted_time}\")\n```",
            "count": "calendar_scheduling_example_902"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ashley_schedule, carolyn_schedule, meeting_duration):\n    # Define the work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Convert the busy schedules into a list of tuples (start, end)\n    ashley_busy = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in ashley_schedule]\n    carolyn_busy = [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in carolyn_schedule]\n    \n    # Merge the busy schedules\n    busy_times = ashley_busy + carolyn_busy\n    busy_times.sort()\n    \n    # Create a list of available slots\n    available_slots = []\n    \n    # Check for available time before the first busy slot\n    if busy_times[0][0] > work_start:\n        available_slots.append((work_start, busy_times[0][0]))\n    \n    # Check for available time between busy slots\n    for i in range(1, len(busy_times)):\n        start = busy_times[i-1][1]\n        end = busy_times[i][0]\n        if start < end:\n            available_slots.append((start, end))\n    \n    # Check for available time after the last busy slot\n    if busy_times[-1][1] < work_end:\n        available_slots.append((busy_times[-1][1], work_end))\n    \n    # Find suitable slot for the meeting\n    for start, end in available_slots:\n        if (end - start) >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Define Ashley's and Carolyn's busy schedules as tuples of time intervals\nashley_schedule = [(\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"12:30\"),\n                   (\"16:00\", \"16:30\"), (\"09:00\", \"12:00\"), (\"12:30\", \"13:00\"),\n                   (\"13:30\", \"14:00\"), (\"16:00\", \"17:00\"), (\"09:30\", \"10:00\"),\n                   (\"11:00\", \"11:30\"), (\"12:00\", \"13:00\"), (\"14:00\", \"15:00\"),\n                   (\"16:00\", \"16:30\"), (\"09:30\", \"10:00\"), (\"10:30\", \"11:00\"),\n                   (\"12:30\", \"13:00\"), (\"14:00\", \"15:00\"), (\"16:00\", \"17:00\"),\n                   (\"10:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"14:00\", \"14:30\"),\n                   (\"16:00\", \"16:30\")]\n\ncarolyn_schedule = [(\"09:00\", \"17:00\"), (\"09:00\", \"13:00\"), (\"14:00\", \"17:00\"),\n                    (\"09:30\", \"10:30\"), (\"12:30\", \"13:00\"), (\"13:30\", \"16:00\"),\n                    (\"16:30\", \"17:00\"), (\"09:00\", \"17:00\"), (\"09:30\", \"17:00\")]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Calculate the proposed meeting time\nmeeting_time = find_meeting_time(ashley_schedule, carolyn_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_903"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for Daniel and Bradley\ndaniel_busy = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nbradley_busy = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to find available time slot\ndef find_meeting_time():\n    for day in [\"Wednesday\", \"Thursday\"]:  # Only consider days allowed for both participants\n        free_slots_daniel = []\n        free_slots_bradley = []\n\n        # Calculate free slots for Daniel\n        current_time = work_start\n        while current_time < work_end:\n            next_time = current_time + meeting_duration\n            if next_time > work_end:\n                break\n            busy = any(start < next_time and current_time < end for start, end in daniel_busy[day])\n            if not busy:\n                free_slots_daniel.append((current_time, next_time))\n            current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n        # Calculate free slots for Bradley\n        current_time = work_start\n        while current_time < work_end:\n            next_time = current_time + meeting_duration\n            if next_time > work_end:\n                break\n            busy = any(start < next_time and current_time < end for start, end in bradley_busy[day])\n            if not busy:\n                free_slots_bradley.append((current_time, next_time))\n            current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n        # Find common free slots\n        for start_d, end_d in free_slots_daniel:\n            for start_b, end_b in free_slots_bradley:\n                if start_d < end_b and start_b < end_d:\n                    return (start_d.strftime(\"%H:%M\"), end_d.strftime(\"%H:%M\"))\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(f'{{{proposed_time[0]}:{proposed_time[1]}}}')\n```",
            "count": "calendar_scheduling_example_904"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and days\nWORK_HOURS = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nDAYS = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n# Define busy schedules for Amy and Anna\namy_schedule = {\n    \"Monday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n}\n\nanna_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time\ndef find_meeting_time():\n    for day in DAYS:\n        if day == \"Friday\":  # Anna does not want to meet on Friday\n            continue\n        \n        available_start = WORK_HOURS[0][0]  # Start time for the day\n        available_end = WORK_HOURS[0][1]  # End time for the day\n\n        # Combine both schedules\n        combined_schedule = amy_schedule.get(day, []) + anna_schedule.get(day, [])\n        combined_schedule.sort()  # Sort by start time\n\n        # Check availability\n        prev_end_time = available_start\n\n        for start_time, end_time in combined_schedule:\n            if prev_end_time + meeting_duration <= start_time:\n                return f\"{prev_end_time.strftime('%H:%M')}:{(prev_end_time + meeting_duration).strftime('%H:%M')}\"\n            prev_end_time = max(prev_end_time, end_time)\n\n        # Check after the last booked time\n        if prev_end_time + meeting_duration <= available_end:\n            return f\"{prev_end_time.strftime('%H:%M')}:{(prev_end_time + meeting_duration).strftime('%H:%M')}\"\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_905"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\n# Define the schedules of Jean and Marilyn in terms of busy slots\nschedules = {\n    \"Jean\": {\n        \"Monday\": [(\"11:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"16:00\", \"17:00\")],\n        \"Tuesday\": [(\"9:30\", \"10:00\"), (\"10:30\", \"11:00\"), (\"11:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n        \"Wednesday\": [(\"9:00\", \"9:30\"), (\"10:30\", \"11:00\"), (\"13:00\", \"14:30\"), (\"16:00\", \"17:00\")],\n        \"Thursday\": [(\"11:00\", \"11:30\")],\n        \"Friday\": [(\"11:30\", \"12:30\"), (\"13:00\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"16:30\")]\n    },\n    \"Marilyn\": {\n        \"Monday\": [(\"9:30\", \"13:00\"), (\"14:00\", \"16:00\"), (\"16:30\", \"17:00\")],\n        \"Tuesday\": [(\"9:00\", \"13:30\"), (\"14:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n        \"Wednesday\": [(\"9:00\", \"10:00\"), (\"10:30\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n        \"Thursday\": [(\"9:00\", \"17:00\")],\n        \"Friday\": [(\"9:00\", \"12:00\"), (\"12:30\", \"17:00\")]\n    }\n}\n\n# This function checks if a proposed time slot is available for both participants\ndef is_time_slot_available(start_time, end_time):\n    for participant, days in schedules.items():\n        for day, busy_slots in days.items():\n            if busy_slots:\n                for busy_start, busy_end in busy_slots:\n                    if start_time < busy_end and end_time > busy_start:\n                        return False\n    return True\n\n# Assuming meeting must be for 30 minutes\nmeeting_duration = 30  # in minutes\n\n# Generate possible time slots\ndef find_meeting_time():\n    # Convert times (HH:MM format) into minutes since midnight for ease of calculation\n    def time_to_minutes(t):\n        h, m = map(int, t.split(':'))\n        return h * 60 + m\n\n    # Convert minutes since midnight back to HH:MM format\n    def minutes_to_time(m):\n        h = m // 60\n        m = m % 60\n        return f\"{h:02}:{m:02}\"\n\n    # Work hours in minutes (9:00 to 17:00)\n    work_start = time_to_minutes(\"09:00\")\n    work_end = time_to_minutes(\"17:00\")\n\n    for day in schedules[\"Jean\"]:\n        for start in range(work_start, work_end - meeting_duration + 1):\n            end = start + meeting_duration\n            if is_time_slot_available(minutes_to_time(start), minutes_to_time(end)):\n                return f\"{minutes_to_time(start)}:{minutes_to_time(end)}\"\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)  # Example output: {14:30:15:00}\n```",
            "count": "calendar_scheduling_example_906"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(sharon_avail, martha_avail, meeting_duration, preferred_days):\n    work_hours = (9, 17)\n    meeting_times = []\n\n    for day in preferred_days:\n        sharon_busy = sharon_avail.get(day, [])\n        martha_busy = martha_avail.get(day, [])\n\n        # Create a timeline of busy times\n        busy_times = sharon_busy + martha_busy\n        busy_times.sort()\n\n        # Determine available time slots\n        start_of_day = datetime.strptime(f\"{day} {work_hours[0]}:00\", \"%A %H:%M\")\n        end_of_day = datetime.strptime(f\"{day} {work_hours[1]}:00\", \"%A %H:%M\")\n\n        current_time = start_of_day\n        for busy_start, busy_end in busy_times:\n            while current_time + timedelta(hours=meeting_duration) <= busy_start:\n                meeting_times.append((current_time, current_time + timedelta(hours=meeting_duration)))\n                current_time += timedelta(minutes=30)  # Check every half an hour\n            current_time = max(current_time, busy_end)\n\n        # Check for available time after the last busy slot until end of work hours\n        if current_time + timedelta(hours=meeting_duration) <= end_of_day:\n            meeting_times.append((current_time, current_time + timedelta(hours=meeting_duration)))\n\n    # Return the earliest time slot found\n    if meeting_times:\n        earliest_meeting = meeting_times[0]\n        return earliest_meeting[0].strftime(\"%H:%M\"), earliest_meeting[1].strftime(\"%H:%M\")\n    return None\n\nsharon_avail = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))]\n}\n\nmartha_avail = {\n    \"Monday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = 1  # in hours\npreferred_days = [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nmeeting_start, meeting_end = schedule_meeting(sharon_avail, martha_avail, meeting_duration, preferred_days)\n\nprint(f\"{meeting_start}:{meeting_end}\")\n```",
            "count": "calendar_scheduling_example_907"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Work hours and meeting duration\nstart_hour = 9  # 9:00 AM\nend_hour = 17   # 5:00 PM\nmeeting_duration = timedelta(minutes=30)\n\n# Schedules for Frank and Diana (hourly time blocks)\nfrank_schedule = [\n    (datetime(2023, 10, 9, 11, 0), datetime(2023, 10, 9, 11, 30)),  # Tuesday\n    (datetime(2023, 10, 9, 12, 30), datetime(2023, 10, 9, 13, 0)),   # Tuesday\n    (datetime(2023, 10, 10, 10, 0), datetime(2023, 10, 10, 10, 30)),  # Wednesday\n    (datetime(2023, 10, 10, 12, 30), datetime(2023, 10, 10, 13, 0)),  # Thursday\n    (datetime(2023, 10, 10, 13, 30), datetime(2023, 10, 10, 14, 0)),  # Friday\n    (datetime(2023, 10, 10, 15, 30), datetime(2023, 10, 10, 16, 0)),  # Friday\n]\n\ndiana_schedule = [\n    (datetime(2023, 10, 9, 9, 0), datetime(2023, 10, 9, 11, 30)),     # Monday\n    (datetime(2023, 10, 9, 12, 30), datetime(2023, 10, 9, 13, 0)),    # Monday\n    (datetime(2023, 10, 9, 14, 0), datetime(2023, 10, 9, 15, 0)),     # Monday\n    (datetime(2023, 10, 9, 16, 0), datetime(2023, 10, 9, 16, 30)),     # Monday\n    (datetime(2023, 10, 10, 9, 30), datetime(2023, 10, 10, 10, 0)),    # Tuesday\n    (datetime(2023, 10, 10, 10, 30), datetime(2023, 10, 10, 12, 0)),   # Tuesday\n    (datetime(2023, 10, 10, 14, 0), datetime(2023, 10, 10, 14, 30)),   # Tuesday\n    (datetime(2023, 10, 10, 10, 0), datetime(2023, 10, 10, 10, 30)),   # Wednesday\n    (datetime(2023, 10, 10, 11, 30), datetime(2023, 10, 10, 12, 30)),  # Wednesday\n    (datetime(2023, 10, 10, 14, 0), datetime(2023, 10, 10, 14, 30)),   # Wednesday\n    (datetime(2023, 10, 10, 16, 0), datetime(2023, 10, 10, 16, 30)),   # Wednesday\n    (datetime(2023, 10, 10, 9, 0), datetime(2023, 10, 10, 11, 30)),    # Thursday\n    (datetime(2023, 10, 10, 12, 0), datetime(2023, 10, 10, 13, 0)),    # Thursday\n    (datetime(2023, 10, 10, 13, 30), datetime(2023, 10, 10, 15, 0)),    # Thursday\n    (datetime(2023, 10, 10, 15, 30), datetime(2023, 10, 10, 17, 0)),    # Thursday\n    (datetime(2023, 10, 10, 10, 0), datetime(2023, 10, 10, 10, 30)),    # Friday\n    (datetime(2023, 10, 10, 11, 0), datetime(2023, 10, 10, 12, 30)),    # Friday\n    (datetime(2023, 10, 10, 14, 0), datetime(2023, 10, 10, 16, 0)),    # Friday\n]\n\n# Function to find the earliest time slot\ndef find_earliest_meeting_time(start_hour, end_hour, meeting_duration):\n    current_time = datetime(2023, 10, 9, start_hour, 0)  # Start from Monday, 9:00 AM\n\n    while current_time.hour < end_hour:\n        meeting_start = current_time\n        meeting_end = meeting_start + meeting_duration\n\n        # Check if the meeting fits in the schedule\n        if meeting_end.time() <= datetime(2023, 10, 9, end_hour, 0).time():\n            overlaps = False\n\n            for busy_start, busy_end in frank_schedule + diana_schedule:\n                if (meeting_start < busy_end) and (busy_start < meeting_end):\n                    overlaps = True\n                    break\n\n            # Exclude Diana's preferred days (Tuesday and Thursday)\n            if not overlaps and current_time.weekday() not in (1, 3):  # (1 = Tuesday, 3 = Thursday)\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n        current_time += timedelta(minutes=30)  # Increment to the next half-hour block\n\n    return \"No available time\"\n\n# Find the earliest meeting time and print it\nearliest_meeting = find_earliest_meeting_time(start_hour, end_hour, meeting_duration)\nprint(earliest_meeting)\n```",
            "count": "calendar_scheduling_example_908"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start_time = timedelta(hours=9)\nwork_end_time = timedelta(hours=17)\nmeeting_duration = timedelta(minutes=30)\n\n# Define busy schedules for Jeremy and Anna\njeremy_busy_times = [\n    (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n    (timedelta(hours=11, minutes=30), timedelta(hours=12)),\n    (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n    (timedelta(hours=10, minutes=30), timedelta(hours=11)),\n    (timedelta(hours=14), timedelta(hours=14, minutes=30)),\n    (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n    (timedelta(hours=16), timedelta(hours=16, minutes=30)),\n    (timedelta(hours=13, minutes=30), timedelta(hours=14)),\n    (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n    (timedelta(hours=14, minutes=30), timedelta(hours=15)),\n    (timedelta(hours=9), timedelta(hours=17)),  # Monday\n    (timedelta(hours=9), timedelta(hours=17)),  # Tuesday\n    (timedelta(hours=9), timedelta(hours=14)),  # Wednesday\n    (timedelta(hours=14, minutes=30), timedelta(hours=17)),  # Wednesday\n    (timedelta(hours=9), timedelta(hours=11, minutes=30)),  # Thursday\n    (timedelta(hours=12, minutes=30), timedelta(hours=15)),  # Thursday\n    (timedelta(hours=16, minutes=30), timedelta(hours=17)),  # Thursday\n    (timedelta(hours=9), timedelta(hours=13, minutes=30)),  # Friday\n    (timedelta(hours=14), timedelta(hours=16)),  # Friday\n    (timedelta(hours=16, minutes=30), timedelta(hours=17)),  # Friday\n]\n\nanna_busy_times = [\n    (timedelta(hours=9), timedelta(hours=17)),\n    (timedelta(hours=9), timedelta(hours=17)),\n    (timedelta(hours=9), timedelta(hours=14)),  # Wednesday\n    (timedelta(hours=14, minutes=30), timedelta(hours=17)),  # Wednesday\n    (timedelta(hours=9), timedelta(hours=11, minutes=30)),  # Thursday\n    (timedelta(hours=12, minutes=30), timedelta(hours=15)),  # Thursday\n    (timedelta(hours=16, minutes=30), timedelta(hours=17)),  # Thursday\n    (timedelta(hours=9), timedelta(hours=13, minutes=30)),  # Friday\n    (timedelta(hours=14), timedelta(hours=16)),  # Friday\n    (timedelta(hours=16, minutes=30), timedelta(hours=17)),  # Friday\n]\n\n# Function to find an available time for the meeting\ndef find_meeting_time():\n    for hour in range(9, 17):\n        for minute in [0, 30]:\n            start_time = timedelta(hours=hour, minutes=minute)\n            end_time = start_time + meeting_duration\n            \n            # Check if the start_time and end_time are within work hours\n            if start_time < work_start_time or end_time > work_end_time:\n                continue\n            \n            # Check if the time clashes with Jeremy's or Anna's busy times\n            if any(start_time < b[1] and end_time > b[0] for b in jeremy_busy_times):\n                continue\n            if any(start_time < b[1] and end_time > b[0] for b in anna_busy_times):\n                continue\n\n            # Check Jeremy's preference for Thursday\n            if hour == 13 and minute == 30:\n                continue\n            \n            return f\"{start_time.seconds // 3600:02}:{(start_time.seconds // 60) % 60:02}:{end_time.seconds // 3600:02}:{(end_time.seconds // 60) % 60:02}\"\n\n# Call the function and print the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_909"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participants' schedules in a dictionary\nschedules = {\n    \"Bryan\": [\n        (datetime.strptime(\"Thursday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 10:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 13:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 11:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n    ],\n    \"Nicholas\": [\n        (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 11:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 17:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 10:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 12:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 16:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 17:00\", \"%A %H:%M\")),\n    ]\n}\n\n# Function to check if a proposed time slot is free\ndef is_free(start, end):\n    for participant in schedules.values():\n        for busy_start, busy_end in participant:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\n# Find available slots for meeting\ndef find_meeting_time():\n    day_names = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    for day in day_names:\n        current_time = datetime.strptime(f\"{day} {work_start.strftime('%H:%M')}\", \"%A %H:%M\")\n        while current_time + meeting_duration <= datetime.strptime(f\"{day} {work_end.strftime('%H:%M')}\", \"%A %H:%M\"):\n            if is_free(current_time, current_time + meeting_duration):\n                # Returning in the required format HH:MM:HH:MM\n                start_time = current_time.strftime(\"%H:%M\")\n                end_time = (current_time + meeting_duration).strftime(\"%H:%M\")\n                return f\"{start_time}:{end_time}\"\n            current_time += timedelta(minutes=30)  # Checking next half hour\n    return None\n\n# Get proposed time for the meeting\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_910"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nbrittany_schedule = [\n    (\"Wednesday\", \"09:30\", \"10:30\"),\n    (\"Wednesday\", \"11:00\", \"11:30\"),\n    (\"Wednesday\", \"13:30\", \"14:00\"),\n    (\"Wednesday\", \"15:00\", \"15:30\"),\n    (\"Friday\", \"09:00\", \"09:30\"),\n]\n\njudith_schedule = [\n    (\"Monday\", \"09:00\", \"10:00\"),\n    (\"Monday\", \"10:30\", \"13:00\"),\n    (\"Monday\", \"13:30\", \"15:00\"),\n    (\"Monday\", \"16:00\", \"17:00\"),\n    (\"Tuesday\", \"09:00\", \"10:00\"),\n    (\"Tuesday\", \"11:00\", \"11:30\"),\n    (\"Tuesday\", \"12:00\", \"13:30\"),\n    (\"Tuesday\", \"14:00\", \"15:30\"),\n    (\"Wednesday\", \"09:00\", \"17:00\"),\n    (\"Thursday\", \"09:00\", \"09:30\"),\n    (\"Thursday\", \"10:00\", \"14:00\"),\n    (\"Thursday\", \"14:30\", \"17:00\"),\n    (\"Friday\", \"09:00\", \"11:00\"),\n    (\"Friday\", \"12:00\", \"12:30\"),\n    (\"Friday\", \"14:30\", \"15:00\"),\n    (\"Friday\", \"16:30\", \"17:00\"),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Check for available slots\ndef is_time_slot_available(day, start_time, duration):\n    end_time = start_time + duration\n    for busy_day, start, end in brittany_schedule + judith_schedule:\n        if busy_day == day:\n            busy_start = datetime.strptime(start, \"%H:%M\")\n            busy_end = datetime.strptime(end, \"%H:%M\")\n            if (start_time < busy_end and end_time > busy_start):  # overlapping\n                return False\n    return True\n\n# Find the earliest available timing\ndef find_meeting_time():\n    current_day = work_hours_start\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    \n    while current_day < work_hours_end:\n        day_name = days[current_day.weekday()]\n        \n        for hour in range(9, 17):\n            start_time = current_day.replace(hour=hour, minute=0)\n            if is_time_slot_available(day_name, start_time, meeting_duration):\n                return f\"{start_time:%H:%M}:{(start_time + meeting_duration):%H:%M}\"\n        \n        current_day += timedelta(days=1)\n\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_911"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define schedules\ndorothy_schedule = {\n    \"Monday\": [(12, 0, 12, 30), (13, 30, 14, 0), (15, 30, 16, 0), (16, 30, 17, 0)],\n    \"Tuesday\": [(9, 30, 10, 30), (11, 0, 11, 30), (13, 0, 13, 30)],\n    \"Wednesday\": [(9, 30, 10, 30), (11, 0, 12, 0), (13, 0, 14, 0), (16, 30, 17, 0)],\n    \"Thursday\": [(9, 0, 9, 30), (14, 0, 14, 30), (15, 0, 15, 30)],\n    \"Friday\": [(10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 13, 0), (13, 30, 14, 30), (15, 0, 15, 30)]\n}\n\nlawrence_schedule = {\n    \"Monday\": [],\n    \"Tuesday\": [],\n    \"Wednesday\": [],\n    \"Thursday\": [],\n    \"Friday\": [(9, 30, 10, 30), (11, 0, 14, 0), (14, 30, 16, 0), (16, 30, 17, 0)]\n}\n\ndef convert_to_minutes(hour, minute):\n    return hour * 60 + minute\n\ndef is_time_slot_free(schedule, day, start, end):\n    for (sb, eb) in schedule.get(day, []):\n        if not (end <= convert_to_minutes(sb, eb) or start >= convert_to_minutes(sb, eb)):\n            return False\n    return True\n\ndef find_meeting_time(duration_minutes):\n    meeting_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n    for day in meeting_days:\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                start_time = convert_to_minutes(hour, minute)\n                end_time = start_time + duration_minutes\n\n                if end_time > convert_to_minutes(17, 0):\n                    break  # Skip to the next hour\n\n                if is_time_slot_free(dorothy_schedule, day, start_time, end_time) and \\\n                   is_time_slot_free(lawrence_schedule, day, start_time, end_time):\n                    # Check specific constraint for Friday\n                    if day == \"Friday\" and start_time < convert_to_minutes(11, 30):\n                        continue\n                    return f\"{hour:02}:{minute:02}:{hour:02}:{minute + duration_minutes // 60:02 if (minute + duration_minutes) // 60 < 60 else 0:02}\"\n\n# Schedule a 30-minute meeting\nmeeting_duration = 30  # in minutes\nresult = find_meeting_time(meeting_duration)\nprint(result)\n```",
            "count": "calendar_scheduling_example_912"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\njoan_schedule = {\n    'Monday': [(10, 30, 11, 0), (11, 30, 12, 0), (13, 0, 13, 30)],\n    'Tuesday': [(9, 0, 9, 30), (13, 0, 13, 30), (14, 30, 15, 30)],\n    'Wednesday': [(10, 30, 11, 0), (12, 0, 12, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n    'Thursday': [(10, 30, 11, 0), (12, 0, 12, 30), (13, 0, 13, 30), (14, 30, 15, 0), (16, 30, 17, 0)],\n    'Friday': [(9, 30, 10, 0), (13, 0, 14, 0), (16, 0, 16, 30)],\n}\n\nnicole_schedule = {\n    'Monday': [(9, 0, 10, 30), (11, 0, 12, 0), (12, 30, 13, 0), (13, 30, 16, 30)],\n    'Tuesday': [(9, 0, 12, 0), (14, 30, 15, 0), (16, 30, 17, 0)],\n    'Wednesday': [(9, 0, 10, 30), (12, 30, 13, 30), (15, 0, 15, 30)],\n    'Thursday': [(10, 30, 11, 0), (14, 30, 15, 0), (16, 30, 17, 0)],\n    'Friday': [(9, 30, 10, 0), (10, 30, 11, 0), (11, 30, 12, 0), (13, 0, 17, 0)],\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Find a suitable time\ndef find_meeting_time():\n    # Focus on Thursday due to constraints mentioned\n    day = 'Thursday'\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Create a schedule list by marking busy times\n    busy_times = []\n    \n    # Add joan's busy times\n    for start_hour, start_minute, end_hour, end_minute in joan_schedule[day]:\n        busy_times.append((datetime(start_hour, start_minute), datetime(end_hour, end_minute)))\n\n    # Add nicole's busy times\n    for start_hour, start_minute, end_hour, end_minute in nicole_schedule[day]:\n        busy_times.append((datetime(start_hour, start_minute), datetime(end_hour, end_minute)))\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Free time slots\n    free_slots = []\n    last_end = work_start\n\n    for start, end in busy_times:\n        if last_end < start:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n\n    if last_end < work_end:\n        free_slots.append((last_end, work_end))\n    \n    # Check for slot that fits meeting duration\n    for start, end in free_slots:\n        if (end - start).total_seconds() >= meeting_duration * 60:\n            meeting_start = start\n            return f\"{meeting_start.strftime('%H:%M')}:{(meeting_start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n\n# Execute the function to find meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_913"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:12:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Input schedules for Benjamin and Melissa\nbenjamin_schedule = [\n    ('Monday', '11:00', '11:30'),\n    ('Monday', '16:00', '16:30'),\n    ('Tuesday', '13:00', '13:30'),\n    ('Wednesday', '11:30', '12:00'),\n    ('Wednesday', '13:00', '14:00'),\n    ('Wednesday', '16:30', '17:00'),\n    ('Thursday', '9:00', '9:30'),\n    ('Thursday', '15:00', '15:30'),\n    ('Friday', '12:30', '13:00'),\n    ('Friday', '13:30', '14:00'),\n    ('Friday', '16:00', '16:30'),\n]\n\nmelissa_schedule = [\n    ('Monday', '9:00', '16:00'),\n    ('Monday', '16:30', '17:00'),\n    ('Tuesday', '9:00', '9:30'),\n    ('Tuesday', '10:00', '11:00'),\n    ('Tuesday', '12:00', '12:30'),\n    ('Tuesday', '13:00', '13:30'),\n    ('Tuesday', '14:00', '17:00'),\n    ('Wednesday', '9:00', '10:00'),\n    ('Wednesday', '12:00', '12:30'),\n    ('Wednesday', '13:00', '13:30'),\n    ('Wednesday', '14:00', '15:00'),\n    ('Wednesday', '15:30', '16:00'),\n    ('Wednesday', '16:30', '17:00'),\n    ('Thursday', '9:00', '10:30'),\n    ('Thursday', '11:00', '15:00'),\n    ('Thursday', '15:30', '16:30'),\n    ('Friday', '9:00', '12:00'),\n    ('Friday', '12:30', '17:00'),\n]\n\n# Function to convert time to datetime\ndef time_to_dt(day, time_str):\n    return datetime.strptime(f\"{day} {time_str}\", \"%A %H:%M\")\n\n# Check for availability in the given time range\ndef find_meeting_time(duration_hours=1):\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    meeting_duration = timedelta(hours=duration_hours)\n\n    for day in days:\n        # Working hours\n        start_of_day = time_to_dt(day, '9:00')\n        end_of_day = time_to_dt(day, '17:00')\n\n        # Get busy times for both participants\n        busy_times = []\n        for start, end in benjamin_schedule + melissa_schedule:\n            if start == day:\n                busy_times.append((time_to_dt(day, start), time_to_dt(day, end)))\n\n        # Sort busy times and merge overlapping intervals\n        busy_times.sort()\n        merged_busy_times = []\n        for start, end in busy_times:\n            if not merged_busy_times or merged_busy_times[-1][1] < start:\n                merged_busy_times.append((start, end))\n            else:\n                merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n        # Find time slots for meeting\n        available_start = start_of_day\n        for busy_start, busy_end in merged_busy_times:\n            if available_start + meeting_duration <= busy_start:\n                return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n            available_start = max(available_start, busy_end)\n\n        if available_start + meeting_duration <= end_of_day:\n            return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n\n# Execute the function and print the solution\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_914"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules of Christine and Keith\nchristine_schedule = [\n    ('Monday', '10:00', '10:30'),\n    ('Monday', '14:00', '14:30'),\n    ('Monday', '15:00', '15:30'),\n    ('Tuesday', '10:00', '10:30'),\n    ('Wednesday', '09:00', '10:00'),\n    ('Wednesday', '13:00', '13:30'),\n    ('Wednesday', '14:00', '14:30'),\n    ('Thursday', '09:00', '11:00'),\n    ('Thursday', '11:30', '12:30'),\n    ('Thursday', '13:30', '14:30'),\n    ('Thursday', '15:00', '16:00'),\n    ('Thursday', '16:30', '17:00'),\n    ('Friday', '09:00', '09:30'),\n    ('Friday', '10:00', '10:30'),\n    ('Friday', '11:00', '12:30'),\n    ('Friday', '13:30', '14:00'),\n    ('Friday', '15:30', '16:00'),\n]\n\nkeith_schedule = [\n    ('Monday', '09:00', '17:00'),\n    ('Tuesday', '09:00', '17:00'),\n    ('Wednesday', '09:00', '10:30'),\n    ('Wednesday', '11:00', '15:00'),\n    ('Wednesday', '15:30', '17:00'),\n    ('Thursday', '09:00', '09:30'),\n    ('Thursday', '10:00', '15:00'),\n    ('Thursday', '15:30', '17:00'),\n    ('Friday', '09:30', '12:00'),\n    ('Friday', '13:30', '17:00'),\n]\n\n# Function to get busy times in minutes for easier comparison\ndef get_busy_times(schedule):\n    busy_times = []\n    for day, start, end in schedule:\n        busy_times.append((\n            day,\n            int(datetime.strptime(start, '%H:%M').timestamp() // 60),\n            int(datetime.strptime(end, '%H:%M').timestamp() // 60)\n        ))\n    return busy_times\n\n# Get busy times\nchristine_busy = get_busy_times(christine_schedule)\nkeith_busy = get_busy_times(keith_schedule)\n\n# Combine busy times\ncombined_busy = {}\nfor day, start, end in christine_busy + keith_busy:\n    if day not in combined_busy:\n        combined_busy[day] = []\n    combined_busy[day].append((start, end))\n\n# Function to find a meeting time\ndef find_meeting_time(duration):\n    for day, intervals in combined_busy.items():\n        free_times = []\n\n        # Sort busy intervals and find free times between them\n        intervals.sort()\n\n        # Check time before the first busy interval\n        if intervals[0][0] > 9 * 60:\n            free_times.append((9 * 60, intervals[0][0]))\n\n        # Check time between busy intervals\n        for i in range(len(intervals) - 1):\n            end_current = intervals[i][1]\n            start_next = intervals[i + 1][0]\n            if start_next - end_current >= duration:\n                free_times.append((end_current, start_next))\n\n        # Check time after the last busy interval\n        if intervals[-1][1] < 17 * 60:\n            free_times.append((intervals[-1][1], 17 * 60))\n\n        # Check for available slots that fit the duration\n        for start, end in free_times:\n            if end - start >= duration:\n                return day, start, start + duration\n\n# Meeting duration of 30 minutes (30 minutes = 30)\nmeeting_duration = 30\nmeeting_time = find_meeting_time(meeting_duration)\n\nif meeting_time:\n    day, start, end = meeting_time\n    print(f\"{start//60:02}:{start%60:02}:{end//60:02}:{end%60:02}\")\n```",
            "count": "calendar_scheduling_example_915"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules based on the given constraints\nsharon_busy_times = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\njose_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a proposed time slot is free for both participants\ndef is_free(start_time, duration):\n    end_time = start_time + duration\n\n    for busy_start, busy_end in sharon_busy_times + jose_busy_times:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Find the earliest slot that works for both, considering Jose's preference against Tuesday\ndef find_meeting_slot():\n    possible_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    for day in possible_days:\n        if day == \"Tuesday\":\n            continue  # Skip Tuesday\n        for hour in range(9, 17):  # Check every hour from 9:00 to 17:00\n            proposed_start = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n            if is_free(proposed_start, meeting_duration):\n                return proposed_start.strftime(\"%H:%M\"), (proposed_start + meeting_duration).strftime(\"%H:%M\")\n\nstart_time, end_time = find_meeting_slot()\nprint(f\"{{{start_time}:{end_time}}}\")\n```",
            "count": "calendar_scheduling_example_916"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Amber's busy schedule\namber_busy_times = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Cynthia's busy schedule\ncynthia_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\ndef is_time_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Schedule meeting\ncurrent_time = work_hours_start\nwhile current_time + meeting_duration <= work_hours_end:\n    if is_time_available(current_time, current_time + meeting_duration, amber_busy_times) and \\\n       is_time_available(current_time, current_time + meeting_duration, cynthia_busy_times):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_start}:{proposed_end}\")\n        break\n    current_time += timedelta(minutes=30)  # Check next possible start time\n```",
            "count": "calendar_scheduling_example_917"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define participant schedules\n    cheryl_schedule = [\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    ]\n\n    brittany_schedule = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n\n    # Meeting duration\n    meeting_duration = timedelta(hours=1)\n\n    # Working hours\n    working_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    working_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # All possible meeting time slots within working hours\n    meeting_slots = []\n    current_time = working_hours_start\n\n    while current_time + meeting_duration <= working_hours_end:\n        meeting_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n    # Check available slots\n    for slot in meeting_slots:\n        meeting_start = slot\n        meeting_end = slot + meeting_duration\n\n        # Check if the meeting slot is free for both Cheryl and Brittany\n        if meeting_end <= working_hours_end:\n            # Check against Cheryl's schedule\n            cheryl_free = all(not (meeting_start < end and meeting_end > start) for start, end in cheryl_schedule)\n            # Check against Brittany's schedule\n            brittany_free = all(not (meeting_start < end and meeting_end > start) for start, end in brittany_schedule)\n\n            if cheryl_free and brittany_free:\n                # Check preferences: Cheryl prefers not to meet on Wednesday\n                if meeting_start.weekday() != 2:  # 2 represents Wednesday\n                    # Brittany prefers not to meet on Monday\n                    if meeting_start.weekday() != 0:  # 0 represents Monday\n                        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n    return \"No available slots\"\n\n# Call the function and print the result\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_918"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the meeting duration\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing schedules\nschedules = {\n    'Joshua': [\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), working_hours_end)\n    ],\n    'Vincent': [\n        (working_hours_start, datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), working_hours_end)\n    ]\n}\n\n# Define the weekdays to consider\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n\ndef find_meeting_time(schedules, working_hours_start, working_hours_end, meeting_duration):\n    for day in weekdays:\n        # Start checking from the beginning of the working hours\n        current_time = working_hours_start\n        \n        while current_time + meeting_duration <= working_hours_end:\n            # Check if the current_time fits in both participants' schedules\n            available = True\n            start_time = current_time\n            end_time = current_time + meeting_duration\n            \n            for participant, busy_times in schedules.items():\n                for busy_start, busy_end in busy_times:\n                    if not (end_time <= busy_start or start_time >= busy_end):\n                        available = False\n                        break\n                if not available:\n                    break\n            \n            if available:\n                return current_time.strftime('%H:%M') + ':' + (current_time + meeting_duration).strftime('%H:%M')\n            \n            # Move to the next time slot\n            current_time += timedelta(minutes=1)  # checking each minute\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, working_hours_start, working_hours_end, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_919"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Charles' schedule\ncharles_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"), \"Wednesday\"),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"), \"Thursday\"),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"), \"Friday\"),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"), \"Friday\"),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"), \"Friday\")\n]\n\n# Lori's schedule\nlori_schedule = [\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\"), \"Monday\"),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"), \"Monday\"),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"), \"Monday\"),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"), \"Monday\"),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"), \"Tuesday\"),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"), \"Tuesday\"),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"), \"Tuesday\"),\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"), \"Wednesday\"),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"), \"Wednesday\"),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"), \"Thursday\"),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"), \"Thursday\"),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"), \"Friday\"),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"), \"Friday\")\n]\n\n# Function to find the earliest available time for the meeting\ndef find_meeting_time():\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check if this time is free for both attendees\n        is_free_for_charles = all(not (meeting_start < end and meeting_end > start)\n                                   for start, end, _ in charles_schedule)\n        is_free_for_lori = all(not (meeting_start < end and meeting_end > start)\n                               for start, end, _ in lori_schedule)\n        \n        if is_free_for_charles and is_free_for_lori:\n            return meeting_start.strftime(\"%H:%M:%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # check every 30 minutes\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_920"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the existing schedules\njames_schedule = [\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\njacob_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a proposed time slot is free for both participants\ndef is_slot_free(start, end):\n    for busy_start, busy_end in james_schedule + jacob_schedule:\n        if (start < busy_end) and (end > busy_start):\n            return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        proposed_end = current_time + meeting_duration\n        if is_slot_free(current_time, proposed_end):\n            return current_time.strftime(\"%H:%M\"), proposed_end.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=15)  # Check next 15 minutes\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\nelse:\n    print(\"No suitable time found\")\n```",
            "count": "calendar_scheduling_example_921"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Schedule of Bobby\nbobby_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Schedule of Brandon\nbrandon_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Combine the schedules\ndef is_time_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if not (end <= busy_start or start >= busy_end):\n            return False\n    return True\n\n# Check for available time slots\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if is_time_free(current_time, end_time, bobby_schedule) and is_time_free(current_time, end_time, brandon_schedule):\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n    return None\n\n# Proposed time for the meeting\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_922"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nkyle_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nsharon_schedule = [\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\ndef is_time_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if start < busy_end and end > busy_start:  # Overlapping times\n            return False\n    return True\n\ndef find_meeting_time():\n    for hour in range(9, 17):\n        for minute in [0, 30]:\n            start_time = datetime.strptime(f\"{hour}:{minute:02d}\", \"%H:%M\")\n            end_time = start_time + meeting_duration\n\n            if start_time >= work_start and end_time <= work_end:\n                if is_time_available(start_time, end_time, kyle_schedule) and is_time_available(start_time, end_time, sharon_schedule):\n                    return start_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n                    \nmeeting_start, meeting_end = find_meeting_time()\nprint(f\"{meeting_start}:{meeting_end}\")\n```",
            "count": "calendar_scheduling_example_923"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and participants' schedules\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\ndanielle_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    # Tuesday blocks\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    # Wednesday blocks\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    # Thursday blocks\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    # Friday blocks\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\namanda_schedule = [\n    # Monday blocks\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    # Tuesday blocks\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    # Wednesday blocks\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    # Thursday blocks\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    # Friday blocks\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest available time slot\ndef find_meeting_time():\n    for day in range(5):  # 0: Monday, 1: Tuesday, 2: Wednesday, 3: Thursday, 4: Friday\n        date_offset = timedelta(days=day)\n        start_time = datetime.combine(datetime.today(), work_hours[0].time()) + date_offset\n        end_time = datetime.combine(datetime.today(), work_hours[1].time()) + date_offset\n\n        # Skip Thursday\n        if day == 3:  # Thursday\n            continue\n\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            # Check if the current time slot is available for both participants\n            is_available = True\n            \n            for start, end in danielle_schedule + amanda_schedule:\n                if current_time < end and current_time + meeting_duration > start:\n                    is_available = False\n                    break\n\n            if is_available:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n            current_time += timedelta(minutes=1)\n\n# Call the function and print the result\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_924"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(debra_schedule, eugene_schedule, duration, preferred_days):\n    work_hours = (9, 17)\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    \n    # Convert schedules into time slots\n    def convert_schedule_to_slots(schedule):\n        slots = []\n        for day, times in schedule.items():\n            for start, end in times:\n                slots.append((day, start, end))\n        return slots\n\n    debra_slots = convert_schedule_to_slots(debra_schedule)\n    eugene_slots = convert_schedule_to_slots(eugene_schedule)\n\n    # Function to find availability\n    def is_available(time_range, schedule):\n        for day, start, end in schedule:\n            if time_range[0] < end and time_range[1] > start:\n                return False\n        return True\n    \n    # Find available time slots for the meeting\n    for day in preferred_days:\n        if day in days:\n            for hour in range(work_hours[0], work_hours[1]):\n                for minute in [0, 30]:\n                    start_time = (hour + minute / 60)\n                    end_time = start_time + duration / 60\n                    \n                    if (is_available((start_time, end_time), debra_slots) and \n                        is_available((start_time, end_time), eugene_slots)):\n                        return f\"{day} {int(start_time):02}:{int((start_time % 1) * 60):02}:{int(end_time):02}:{int((end_time % 1) * 60):02}\"\n\n    return None  # No suitable time found\n\n# Define schedules\ndebra_schedule = {\n    'Monday': [(10, 11), (11.5, 14)],\n    'Tuesday': [(11, 11.5), (14, 14.5)],\n    'Wednesday': [(10, 10.5), (12, 13), (13.5, 14), (15, 15.5), (16.5, 17)],\n    'Thursday': [(9.5, 10), (12.5, 14), (16, 17)],\n    'Friday': [(9, 9.5), (10.5, 11), (14, 14.5), (15, 15.5), (16, 16.5)],\n}\n\neugene_schedule = {\n    'Monday': [(9, 9.5), (10, 11.5), (12, 14), (14.5, 15.5), (16, 17)],\n    'Tuesday': [(9, 10), (10.5, 11), (12, 12.5), (13, 14), (16, 16.5)],\n    'Wednesday': [(9, 10), (11, 14), (14.5, 15), (15.5, 16), (16.5, 17)],\n    'Thursday': [(9, 9.5), (11, 11.5), (12, 12.5), (13, 15.5), (16, 16.5)],\n    'Friday': [(9.5, 11), (11.5, 13), (13.5, 14), (14.5, 15), (15.5, 17)],\n}\n\n# Duration of the meeting is 30 minutes\nduration = 30\npreferred_days = ['Tuesday', 'Friday']  # Avoiding Monday, Wednesday, Thursday, Friday as preferred by Eugene\n\n# Find the meeting time\nmeeting_time = find_meeting_time(debra_schedule, eugene_schedule, duration, preferred_days)\nprint(meeting_time)  # Example output: \"Tuesday 14:00:14:30\"\n```",
            "count": "calendar_scheduling_example_925"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedules\nthomas_schedule = [\n    (\"Monday\", [(13, 0, 14, 0), (16, 30, 17, 0)]),\n    (\"Tuesday\", [(14, 0, 14, 30), (16, 30, 17, 0)]),\n    (\"Wednesday\", [(10, 0, 10, 30), (11, 0, 11, 30), (14, 0, 14, 30), (16, 0, 16, 30)]),\n    (\"Thursday\", [(10, 0, 10, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 30, 15, 0), (15, 30, 16, 0)]),\n    (\"Friday\", [(10, 30, 11, 0), (12, 30, 13, 30), (16, 0, 16, 30)]),\n]\n\njennifer_schedule = [\n    (\"Monday\", [(9, 0, 17, 0)]),\n    (\"Tuesday\", [(9, 0, 17, 0)]),\n    (\"Wednesday\", [(9, 0, 15, 0), (15, 30, 16, 0), (16, 30, 17, 0)]),\n    (\"Thursday\", [(9, 0, 12, 0), (12, 30, 13, 30), (15, 0, 16, 30)]),\n    (\"Friday\", [(9, 0, 12, 0), (12, 30, 17, 0)]),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is available\ndef is_time_available(start_time, end_time, schedule):\n    for busy_start, busy_end in schedule:\n        if busy_start < end_time and busy_end > start_time:\n            return False\n    return True\n\n# Function to find the earliest time for the meeting\ndef find_earliest_meeting_time(thomas_schedule, jennifer_schedule):\n    for day in thomas_schedule:\n        day_name, thomas_busy_times = day\n        jennifer_busy_times = next((s for s in jennifer_schedule if s[0] == day_name), [None])[1]\n\n        # Working hours (09:00 to 17:00)\n        work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n        work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n        # Check from the start of work hours\n        current_time = work_start\n\n        while current_time + meeting_duration <= work_end:\n            end_time = current_time + meeting_duration\n            if is_time_available(current_time.hour, end_time.hour, thomas_busy_times) and is_time_available(current_time.hour, end_time.hour, jennifer_busy_times):\n                return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n    return None\n\n# Get the earliest meeting time\nearliest_meeting_time = find_earliest_meeting_time(thomas_schedule, jennifer_schedule)\nprint(earliest_meeting_time)\n```",
            "count": "calendar_scheduling_example_926"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = 9\nworking_hours_end = 17\nmeeting_duration = timedelta(hours=1)\n\n# Participants' busy schedules\nbetty_busy = {\n    \"Monday\": [(9, 10)],\n    \"Tuesday\": [(11, 12), (15, 15.5)],\n    \"Wednesday\": [(13.5, 14)],\n    \"Thursday\": [(16.5, 17)],\n}\n\nroy_busy = {\n    \"Monday\": [(9, 10), (10.5, 12), (13.5, 14.5), (15.5, 16.5)],\n    \"Tuesday\": [(12.5, 13), (15, 15.5), (16, 16.5)],\n    \"Wednesday\": [(9, 10), (10.5, 11.5), (12.5, 13.5), (14, 15.5), (16, 17)],\n    \"Thursday\": [(9, 10), (10.5, 17)],\n    \"Friday\": [(9, 14), (15, 15.5), (16.5, 17)],\n}\n\n# Participants' preferences\npreferences = {\n    \"Betty\": [\"Tuesday\", \"Thursday\"],\n    \"Roy\": [\"Wednesday\", \"Thursday\"]\n}\n\n# Helper function to check if the time slot is free\ndef is_free(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find a suitable time slot\nfor day in [\"Tuesday\", \"Thursday\"]:\n    for hour in range(working_hours_start, working_hours_end):\n        start_time = hour\n        end_time = hour + 1\n        \n        # Adjust for minutes\n        if not is_free(start_time, end_time, betty_busy.get(day, [])):\n            continue\n        if not is_free(start_time, end_time, roy_busy.get(day, [])):\n            continue\n        \n        # Check if the time slot is suitable for both participants\n        if day == \"Tuesday\" and start_time < 13:\n            continue  # Skip early Tuesday meetings for Roy\n        \n        print(f\"{hour:02d}:00:{hour + 1:02d}:00\")\n        break\n    else:\n        continue\n    break\n```",
            "count": "calendar_scheduling_example_927"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and constraints\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participant schedules in (start, end) format\njoseph_busy = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    \n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    \n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\naustin_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if a time slot is free for both participants\ndef is_free(start, end):\n    for busy_start, busy_end in joseph_busy + austin_busy:\n        if (start < busy_end and end > busy_start):  # Overlap\n            return False\n    return True\n\n# Find earliest available time slot\ncurrent_time = work_hours_start\nwhile current_time + meeting_duration <= work_hours_end:\n    if is_free(current_time, current_time + meeting_duration):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=30)  # Check every 30 minutes\n```",
            "count": "calendar_scheduling_example_928"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours = (9, 17)  # 9 AM to 5 PM\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing schedules\nkathleen_schedule = {\n    \"Monday\": [(9, 30), (14, 0)],  # 9:30 to 10:00, 14:00 to 14:30\n    \"Tuesday\": [(9, 0), (9, 30), (11, 0), (12, 30), (13, 30), (14, 0), (14, 30)],  # Blocked times\n    \"Wednesday\": [(9, 30), (13, 0), (16, 0)],  # Blocked times\n    \"Thursday\": [(9, 0), (11, 0), (13, 0), (14, 0)],  # Blocked times\n    \"Friday\": [(9, 0), (14, 0), (15, 30), (16, 30)],  # Blocked times\n}\n\nchristian_schedule = {\n    \"Monday\": [(9, 0), (12, 0), (13, 0), (14, 30), (15, 30), (16, 0)],  # Blocked times\n    \"Tuesday\": [(9, 0), (9, 30), (10, 0), (13, 0), (13, 30), (14, 0), (14, 30), (15, 30)],  # Blocked times\n    \"Wednesday\": [(9, 30)],  # Blocked all day\n    \"Thursday\": [(9, 0), (11, 0), (14, 0), (15, 0), (15, 30)],  # Blocked times\n    \"Friday\": [(9, 30), (12, 0), (13, 0), (14, 30)],  # Blocked times\n}\n\n# Function to create a free time slots list from the blocked schedules\ndef get_free_slots(schedule, day):\n    free_slots = []\n    start_hour, end_hour = working_hours\n    blocked_times = schedule[day]\n\n    # Check each hour in the working hours\n    for hour in range(start_hour, end_hour):\n        for minute in [0, 30]:\n            start_time = (hour, minute)\n            end_time = (hour, minute + 30) if minute + 30 < 60 else (hour + 1, 0)\n            if start_time not in blocked_times and end_time not in blocked_times:\n                free_slots.append(start_time)\n\n    return free_slots\n\n# Find the earliest available time for both participants, respecting their constraints\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n    if day != \"Tuesday\" and day not in christian_schedule:  # Christian can't meet on Mon, Wed, or Fri\n        continue\n    kathleen_free_slots = get_free_slots(kathleen_schedule, day)\n    christian_free_slots = get_free_slots(christian_schedule, day)\n\n    # Find the earliest common free slot\n    for k_time in kathleen_free_slots:\n        for c_time in christian_free_slots:\n            if k_time == c_time:\n                # Check if it has enough time for the meeting\n                meet_start = datetime.strptime(f\"{k_time[0]}:{k_time[1]}\", \"%H:%M\")\n                meet_end = meet_start + meeting_duration\n                \n                # If the end time is within working hours, schedule the meeting\n                if meet_end.hour < working_hours[1]:\n                    print(f\"{meet_start.strftime('%H:%M')}:{meet_end.strftime('%H:%M')}\")\n                    exit()\n```",
            "count": "calendar_scheduling_example_929"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nwork_start_time = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules as blocked time intervals\njean_schedule = {\n    \"Monday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [],\n    \"Thursday\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\njennifer_schedule = {\n    \"Monday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check for available slots\ndef find_meeting_time():\n    for day in [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:  # Exclude Monday\n        free_times = []\n        current_time = work_start_time\n\n        while current_time + meeting_duration <= work_end_time:\n            # Check if slot is free for both\n            meeting_end_time = current_time + meeting_duration\n            is_free_for_jean = True\n            is_free_for_jennifer = True\n            \n            for start, end in jean_schedule[day]:\n                if current_time < end and meeting_end_time > start:\n                    is_free_for_jean = False\n                    break\n            for start, end in jennifer_schedule[day]:\n                if current_time < end and meeting_end_time > start:\n                    is_free_for_jennifer = False\n                    break\n            \n            if is_free_for_jean and is_free_for_jennifer:\n                free_times.append((current_time, meeting_end_time))\n                \n            current_time += timedelta(minutes=30)  # Check next half-hour slot\n            \n        if free_times:\n            return f\"{free_times[0][0].strftime('%H:%M')}:{free_times[0][1].strftime('%H:%M')}\"\n\n# Get the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_930"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(noah_schedule, kathryn_schedule, duration, work_hours):\n    # Convert work_hours to datetime objects\n    work_start = datetime.strptime(work_hours[0], \"%H:%M\")\n    work_end = datetime.strptime(work_hours[1], \"%H:%M\")\n    \n    # Parse schedule strings to create lists of unavailable time slots\n    noah_unavailable = parse_schedule(noah_schedule)\n    kathryn_unavailable = parse_schedule(kathryn_schedule)\n    \n    # Combine both participants' unavailable times\n    combined_unavailable = noah_unavailable + kathryn_unavailable\n    \n    # Find the next available time slot within work hours\n    current_time = work_start\n    while current_time + timedelta(minutes=duration) <= work_end:\n        if not is_time_slot_unavailable(current_time, duration, combined_unavailable):\n            return current_time.strftime(\"%H:%M\"), (current_time + timedelta(minutes=duration)).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every half hour\n    \n    return None\n\ndef parse_schedule(schedule):\n    unavailable_slots = []\n    for day, slots in schedule.items():\n        for start, end in slots:\n            unavailable_slots.append((day, start, end))\n    return unavailable_slots\n\ndef is_time_slot_unavailable(start_time, duration, unavailable):\n    end_time = start_time + timedelta(minutes=duration)\n    for day, start, end in unavailable:\n        if start_time.date() == start_time.date():  # Same day\n            if start_time.time() < end and end_time.time() > start:\n                return True\n    return False\n\n# Define work hours from 9:00 to 17:00\nwork_hours = (\"09:00\", \"17:00\")\n\n# Noah's and Kathryn's schedule\nnoah_schedule = {\n    'Monday': [(\"09:00\", \"10:00\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"15:30\", \"16:00\")],\n    'Tuesday': [(\"09:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"14:00\", \"15:00\"), (\"16:00\", \"17:00\")],\n    'Wednesday': [(\"10:00\", \"12:00\"), (\"14:00\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    'Thursday': [(\"10:00\", \"10:30\"), (\"11:00\", \"12:00\"), (\"16:00\", \"16:30\")],\n    'Friday': [(\"09:30\", \"10:00\"), (\"10:30\", \"12:00\"), (\"12:30\", \"13:30\"), (\"15:00\", \"15:30\"), (\"16:30\", \"17:00\")]\n}\n\nkathryn_schedule = {\n    'Monday': [(\"09:00\", \"12:00\"), (\"13:00\", \"14:30\"), (\"15:00\", \"17:00\")],\n    'Tuesday': [(\"09:00\", \"12:30\"), (\"13:00\", \"17:00\")],\n    'Wednesday': [(\"09:00\", \"09:30\"), (\"12:30\", \"17:00\")],\n    'Thursday': [(\"09:00\", \"11:30\"), (\"12:00\", \"13:00\"), (\"14:00\", \"15:00\"), (\"15:30\", \"17:00\")],\n    'Friday': [(\"09:00\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:00\", \"16:00\")]\n}\n\n# meeting duration in minutes\nmeeting_duration = 30\n\n# find available meeting time\nstart_time, end_time = find_meeting_time(noah_schedule, kathryn_schedule, meeting_duration, work_hours)\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_931"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\n# Define the busy times for Virginia and Maria\nvirginia_busy_times = {\n    'Monday': [(9, 30), (12, 0), (14, 30), (16, 30)],\n    'Tuesday': [(9, 0), (10, 30), (11, 0), (13, 30), (15, 30)],\n    'Wednesday': [(10, 0), (12, 0), (13, 0), (14, 30), (16, 0)],\n    'Thursday': [(9, 0), (9, 30), (10, 0), (13, 0), (14, 30), (16, 30)],\n    'Friday': [(9, 30), (10, 30), (12, 0), (13, 30), (16, 0)],\n}\n\nmaria_busy_times = {\n    'Monday': [(9, 0), (10, 30), (11, 30), (15, 30), (16, 0)],\n    'Tuesday': [(9, 0), (10, 0), (12, 0), (15, 30), (16, 0)],\n    'Wednesday': [(9, 30), (12, 0), (13, 0), (14, 0), (16, 0)],\n    'Thursday': [(9, 30), (11, 0), (12, 0), (15, 30), (16, 0)],\n    'Friday': [(10, 30), (11, 30), (12, 0), (13, 30), (14, 30)],\n}\n\nmeeting_duration = 30  # in minutes\n\n# Function to find a suitable time\ndef find_meeting_time(virginia_busy, maria_busy, duration):\n    days = ['Wednesday']  # Based on preferences, only Wednesday after 13:30\n    end_time = 17 * 60  # 17:00 in minutes\n\n    for day in days:\n        free_slots = []\n        busy_slots = virginia_busy[day] + maria_busy[day]\n        \n        # Include work hours in minutes from 9:00 to 17:00\n        busy_slots.append((9, 0))\n        busy_slots.append((17, 0))\n        \n        busy_slots.sort()\n        \n        # Find free slots\n        for i in range(len(busy_slots) - 1):\n            start = busy_slots[i][0] * 60 + busy_slots[i][1]\n            end = busy_slots[i + 1][0] * 60 + busy_slots[i + 1][1]\n            if end - start >= duration:\n                free_slots.append((start, end))\n\n        # Check for available time and schedule the meeting\n        for start, end in free_slots:\n            if end - start >= duration:\n                meeting_start = start\n                meeting_end = start + duration\n                return f\"{meeting_start // 60:02d}:{meeting_start % 60:02d}:{meeting_end // 60:02d}:{meeting_end % 60:02d}\"\n\n# Calculate and output the proposed meeting time\nproposed_time = find_meeting_time(virginia_busy_times, maria_busy_times, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_932"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours = [(9, 0), (17, 0)]\nmeeting_duration = timedelta(hours=1)\n\n# Schedule constraints for Anthony and Randy\nanthony_schedule = {\n    'Monday': [(10, 30, 11, 0), (13, 0, 14, 0), (16, 30, 17, 0)],\n    'Tuesday': [(9, 30, 11, 0), (11, 30, 12, 0), (13, 30, 14, 0), (15, 30, 16, 0)],\n    'Wednesday': [(10, 0, 11, 0), (13, 0, 13, 30), (14, 0, 14, 30), (16, 30, 17, 0)],\n    'Thursday': [(10, 30, 11, 0), (11, 30, 12, 30), (13, 30, 14, 30), (15, 0, 16, 0), (16, 30, 17, 0)],\n    'Friday': [(9, 0, 11, 0), (11, 30, 15, 30), (16, 30, 17, 0)]\n}\n\nrandy_schedule = {\n    'Monday': [(9, 0, 17, 0)],\n    'Tuesday': [(9, 0, 9, 30), (10, 0, 12, 30), (13, 0, 17, 0)],\n    'Wednesday': [(9, 0, 11, 30), (12, 0, 12, 30), (13, 0, 16, 30)],\n    'Thursday': [(10, 0, 11, 30), (12, 30, 13, 30), (14, 0, 14, 30), (15, 0, 15, 30), (16, 0, 17, 0)],\n    'Friday': [(9, 0, 17, 0)]\n}\n\n# Merge schedules into unavailable times\ndef merge_schedules(schedule):\n    unavailable_times = []\n    for time_slots in schedule.values():\n        for slot in time_slots:\n            unavailable_times.append((datetime(2000, 1, 1, slot[0], slot[1]), datetime(2000, 1, 1, slot[2], slot[3])))\n    return unavailable_times\n\nanthony_unavailable = merge_schedules(anthony_schedule)\nrandy_unavailable = merge_schedules(randy_schedule)\n\n# Generate available slots\ndef find_available_time(working_hours, anthony_unavailable, randy_unavailable):\n    available_times = []\n    start_time = datetime(2000, 1, 1, *working_hours[0])\n    end_time = datetime(2000, 1, 1, *working_hours[1])\n    \n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        \n        # Check if the meeting time overlaps with unavailable times\n        is_available = True\n        for start, end in anthony_unavailable + randy_unavailable:\n            if meeting_start < end and meeting_end > start:\n                is_available = False\n                break\n        \n        if is_available:\n            available_times.append(current_time)\n        \n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return available_times\n\n# Check for available meeting times for each weekday\nfor weekday in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n    daily_unavailable = anthony_schedule[weekday] + randy_schedule[weekday]\n    available_times = find_available_time(working_hours, anthony_unavailable, randy_unavailable)\n\n    # If there are available times, return the first one\n    if available_times:\n        proposed_time = available_times[0]\n        print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_933"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules for Julia and Janet\njulia_schedule = [\n    (datetime(2023, 10, 16, 9, 30), datetime(2023, 10, 16, 10, 0)),  # Monday\n    (datetime(2023, 10, 16, 11, 30), datetime(2023, 10, 16, 12, 30)),\n    (datetime(2023, 10, 16, 13, 0), datetime(2023, 10, 16, 13, 30)),\n    (datetime(2023, 10, 16, 14, 0), datetime(2023, 10, 16, 15, 30)),\n    (datetime(2023, 10, 17, 11, 30), datetime(2023, 10, 17, 12, 0)),  # Tuesday\n    (datetime(2023, 10, 17, 16, 0), datetime(2023, 10, 17, 16, 30)),\n    (datetime(2023, 10, 18, 11, 30), datetime(2023, 10, 18, 12, 0)),  # Wednesday\n    (datetime(2023, 10, 18, 13, 0), datetime(2023, 10, 18, 13, 30)),\n    (datetime(2023, 10, 19, 9, 0), datetime(2023, 10, 19, 9, 30)),   # Thursday\n    (datetime(2023, 10, 19, 11, 0), datetime(2023, 10, 19, 12, 0)),\n    (datetime(2023, 10, 19, 12, 30), datetime(2023, 10, 19, 13, 0)),\n    (datetime(2023, 10, 19, 14, 30), datetime(2023, 10, 19, 15, 0)),\n    (datetime(2023, 10, 19, 16, 0), datetime(2023, 10, 19, 17, 0)),\n    (datetime(2023, 10, 20, 9, 30), datetime(2023, 10, 20, 10, 30)),  # Friday\n    (datetime(2023, 10, 20, 12, 30), datetime(2023, 10, 20, 13, 0)),\n    (datetime(2023, 10, 20, 13, 30), datetime(2023, 10, 20, 14, 0)),\n    (datetime(2023, 10, 20, 14, 30), datetime(2023, 10, 20, 15, 0)),\n    (datetime(2023, 10, 20, 15, 30), datetime(2023, 10, 20, 16, 0)),\n]\n\njanet_schedule = [\n    (datetime(2023, 10, 16, 11, 30), datetime(2023, 10, 16, 14, 0)),  # Monday\n    (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 16, 0)),\n    (datetime(2023, 10, 16, 16, 30), datetime(2023, 10, 16, 17, 0)),\n    (datetime(2023, 10, 17, 9, 30), datetime(2023, 10, 17, 11, 0)),   # Tuesday\n    (datetime(2023, 10, 17, 11, 30), datetime(2023, 10, 17, 15, 0)),\n    (datetime(2023, 10, 17, 15, 30), datetime(2023, 10, 17, 17, 0)),\n    (datetime(2023, 10, 18, 9, 0), datetime(2023, 10, 18, 10, 0)),    # Wednesday\n    (datetime(2023, 10, 18, 11, 0), datetime(2023, 10, 18, 15, 30)),\n    (datetime(2023, 10, 18, 16, 0), datetime(2023, 10, 18, 17, 0)),\n    (datetime(2023, 10, 19, 9, 0), datetime(2023, 10, 19, 12, 30)),   # Thursday\n    (datetime(2023, 10, 19, 13, 0), datetime(2023, 10, 19, 13, 30)),\n    (datetime(2023, 10, 19, 14, 0), datetime(2023, 10, 19, 16, 0)),\n    (datetime(2023, 10, 19, 16, 30), datetime(2023, 10, 19, 17, 0)),\n    (datetime(2023, 10, 20, 9, 30), datetime(2023, 10, 20, 10, 30)),  # Friday\n    (datetime(2023, 10, 20, 12, 0), datetime(2023, 10, 20, 12, 30)),\n    (datetime(2023, 10, 20, 13, 0), datetime(2023, 10, 20, 14, 30)),\n    (datetime(2023, 10, 20, 15, 0), datetime(2023, 10, 20, 17, 0)),\n]\n\n# Function to find a suitable meeting time\ndef find_meeting_time(duration_hours, julia_schedule, janet_schedule):\n    meeting_duration = timedelta(hours=duration_hours)\n    work_start = datetime(2023, 10, 16, 9, 0)  # Starting from Monday\n    work_end = datetime(2023, 10, 20, 17, 0)    # Ending on Friday\n\n    # Available time slots\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        # Check if both are available during the meeting time\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        julia_busy = any(start < meeting_end and end > meeting_start for start, end in julia_schedule)\n        janet_busy = any(start < meeting_end and end > meeting_start for start, end in janet_schedule)\n\n        if not julia_busy and not janet_busy:\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return None  # No available time found\n\n# Scheduling a meeting for Julia and Janet for one hour\nproposed_time = find_meeting_time(1, julia_schedule, janet_schedule)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_934"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(terry_schedule, frances_schedule, duration):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Check for each day\n    for day in range(5):  # 0=Monday, 1=Tuesday, 2=Wednesday, 3=Thursday, 4=Friday\n        time_cursor = work_hours_start\n        while time_cursor + duration <= work_hours_end:\n            # Check if this time slot is free for both\n            meeting_end = time_cursor + duration\n            if (not any(start <= time_cursor < end or start < meeting_end <= end for start, end in terry_schedule[day]) and\n                not any(start <= time_cursor < end or start < meeting_end <= end for start, end in frances_schedule[day])):\n                return f\"{time_cursor.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            time_cursor += timedelta(minutes=30)  # Move to the next 30-minute slot\n\n    return None\n\n# Schedule constraints\nterry_schedule = [\n    [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Monday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],  # Tuesday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Wednesday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],  # Thursday\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Friday\n]\n\nfrances_schedule = [\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],  # Monday\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n     (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],  # Tuesday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Wednesday\n    [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Thursday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Friday\n]\n\nmeeting_duration = timedelta(minutes=30)\n\nproposed_time = find_meeting_time(terry_schedule, frances_schedule, meeting_duration)\nprint(proposed_time)\n'''",
            "count": "calendar_scheduling_example_935"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(brittany, stephen, meeting_duration):\n    # Convert schedules into time slots\n    def to_time_slots(schedule):\n        slots = []\n        for day, times in schedule.items():\n            for start, end in times:\n                slots.append((day, start, end))\n        return slots\n\n    brittany_slots = to_time_slots(brittany)\n    stephen_slots = to_time_slots(stephen)\n\n    # Find common free slots\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    common_time_slots = {}\n\n    for day in days:\n        brittany_times = [slot for slot in brittany_slots if slot[0] == day]\n        stephen_times = [slot for slot in stephen_slots if slot[0] == day]\n\n        day_slots = []\n        start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n        # Check for free time in the day\n        for time in sorted(brittany_times + stephen_times, key=lambda x: x[1]):\n            time_start = datetime.strptime(time[1], \"%H:%M\")\n            time_end = datetime.strptime(time[2], \"%H:%M\")\n\n            # Check time before the next scheduled meeting\n            if start_time < time_start:\n                day_slots.append((start_time.time(), time_start.time()))\n            start_time = max(start_time, time_end)\n\n        # Check for time after the last meeting\n        if start_time < end_time:\n            day_slots.append((start_time.time(), end_time.time()))\n\n        common_time_slots[day] = day_slots\n\n    # Find a suitable time for the meeting\n    for day, slots in common_time_slots.items():\n        for start, end in slots:\n            start_dt = datetime.combine(datetime.today(), start)\n            end_dt = datetime.combine(datetime.today(), end)\n\n            # Check if there's enough time for the meeting\n            if (end_dt - start_dt) >= meeting_duration:\n                meeting_start = start_dt\n                meeting_end = meeting_start + meeting_duration\n                if meeting_end.time() <= end:\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Participant schedules in the format {day: [(start time, end time)]}\nbrittany_schedule = {\n    'Monday': [('10:30', '11:00'), ('12:00', '12:30'), ('13:30', '14:30'), \n               ('15:00', '15:30'), ('16:00', '16:30')],\n    'Tuesday': [('10:00', '10:30'), ('11:00', '11:30'), ('12:30', '13:00'), \n                ('13:30', '14:00'), ('14:30', '15:00'), ('16:00', '16:30')],\n    'Wednesday': [('09:00', '11:00'), ('11:30', '13:30'), ('14:30', '15:00'), \n                  ('15:30', '16:00'), ('16:30', '17:00')],\n    'Thursday': [('09:30', '10:00'), ('11:00', '11:30'), ('15:30', '16:00'), \n                 ('16:30', '17:00')],\n    'Friday': [('09:00', '09:30'), ('11:30', '12:00'), ('12:30', '13:00'), \n               ('14:30', '15:00'), ('16:30', '17:00')],\n}\n\nstephen_schedule = {\n    'Monday': [('09:00', '17:00')],\n    'Tuesday': [('09:00', '17:00')],\n    'Wednesday': [('09:00', '09:30'), ('10:00', '13:30'), ('14:00', '17:00')],\n    'Thursday': [('09:00', '17:00')],\n    'Friday': [('09:00', '17:00')],\n}\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\nproposed_time = find_meeting_time(brittany_schedule, stephen_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_936"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nWORK_HOURS_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_HOURS_END = datetime.strptime(\"17:00\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=30)\n\n# Define participants' busy schedules\njesse_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nlori_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to find a suitable time slot\ndef find_meeting_time():\n    start_time = WORK_HOURS_START\n    end_time = WORK_HOURS_END\n\n    while start_time + MEETING_DURATION <= end_time:\n        meeting_end_time = start_time + MEETING_DURATION\n        \n        # Check if the time slot is free for both participants\n        jesse_free = all(not (busy_start < meeting_end_time and busy_end > start_time) for busy_start, busy_end in jesse_busy)\n        lori_free = all(not (busy_start < meeting_end_time and busy_end > start_time) for busy_start, busy_end in lori_busy)\n        \n        if jesse_free and lori_free:\n            return f\"{start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        # Move to the next minute\n        start_time += timedelta(minutes=1)\n\n# Get the proposed time for the meeting\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_937"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules\neugene_busy = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n]\n\neric_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available slots\ndef find_available_slot():\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Collect busy slots\n    busy_slots = eugene_busy + eric_busy\n\n    # Check each half hour slot in work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if not any(start < end_time and current_time < finish for start, finish in busy_slots):\n            return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)\n\n# Get available time slot\nstart, end = find_available_slot()\nprint(f\"{{{start}:{end}}}\")\n```",
            "count": "calendar_scheduling_example_938"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours_start = 9\nworking_hours_end = 17\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\ndonna_schedule = {\n    'Monday': [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    'Friday': [(datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nkenneth_schedule = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Thursday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Friday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find the earliest available meeting time\ndef find_meeting_time(donna_schedule, kenneth_schedule, meeting_duration):\n    for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n        # Combine schedules of both participants\n        combined_busy_times = donna_schedule.get(day, []) + kenneth_schedule.get(day, [])\n        \n        # Sort the busy times\n        combined_busy_times.sort()\n        \n        # Find available slots\n        current_time = datetime.strptime(f\"{working_hours_start}:00\", \"%H:%M\")\n        end_of_day = datetime.strptime(f\"{working_hours_end}:00\", \"%H:%M\")\n        \n        for start, end in combined_busy_times:\n            # Check for free time before the next meeting\n            if current_time + meeting_duration <= start:\n                return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n            current_time = max(current_time, end)\n        \n        # Check for free time at the end of the workday\n        if current_time + meeting_duration <= end_of_day:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n\n# Get the proposed meeting time\nmeeting_time = find_meeting_time(donna_schedule, kenneth_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_939"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and constraints\nschedules = {\n    \"Megan\": [],\n    \"Kelly\": {\n        \"Monday\": [(10, 30), (13, 14), (16, 17)],\n        \"Tuesday\": [(9, 12, 30), (13, 17)],\n        \"Wednesday\": [(10, 30), (14, 16), (16, 17)],\n        \"Thursday\": [(9, 9, 30), (10, 11), (11, 15, 30), (16, 16, 30)],\n        \"Friday\": [(9, 10), (10, 11), (11, 13), (13, 14, 30), (15, 17)]\n    }\n}\n\nmeeting_duration = timedelta(hours=1)\n\n# Define the working hours\nworking_hours = {\n    \"Monday\": (9, 17),\n    \"Tuesday\": (9, 17),\n    \"Wednesday\": (9, 17),\n    \"Thursday\": (9, 17),\n    \"Friday\": (9, 17)\n}\n\n# Function to check availability\ndef is_available(day, start_time, end_time):\n    if day == \"Wednesday\":\n        return False  # Megan cannot meet on Wednesday\n        \n    for block in schedules[\"Kelly\"].get(day, []):\n        block_start = block[0] if len(block) == 2 else block[0]\n        block_end = block[1] if len(block) == 2 else block[2]\n        if not (end_time <= block_start or start_time >= block_end):\n            return False\n    return True\n\n# Find a suitable time\nresult = None\nfor day in working_hours.keys():\n    start_hour, end_hour = working_hours[day]\n    for hour in range(start_hour, end_hour):\n        for minute in [0, 30]:\n            start_time = datetime.strptime(f\"{day} {hour}:{minute}\", \"%A %H:%M\")\n            end_time = start_time + meeting_duration\n            if end_time.hour < end_hour and is_available(day, start_time.hour + start_time.minute / 60, end_time.hour + end_time.minute / 60):\n                result = f\"{start_time.strftime('%H:%M')} : {end_time.strftime('%H:%M')}\"\n                break\n        if result:\n            break\n    if result:\n        break\n\nprint(result)\n```",
            "count": "calendar_scheduling_example_940"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' busy schedules\nemily_busy_times = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nelizabeth_busy_times = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find a suitable time\ndef find_meeting_time(start, end, emily_busy, elizabeth_busy, duration):\n    current = start\n    while current + duration <= end:\n        busy = False\n        for e_start, e_end in emily_busy:\n            if e_start <= current < e_end or e_start < current + duration <= e_end:\n                busy = True\n                break\n\n        if not busy:\n            for l_start, l_end in elizabeth_busy:\n                if l_start <= current < l_end or l_start < current + duration <= l_end:\n                    busy = True\n                    break\n\n        if not busy:\n            return current\n\n        current += timedelta(minutes=30) # Check every 30 minutes\n\n    return None\n\n# Check for each weekday\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\nfor day in days:\n    proposed_time = find_meeting_time(work_start, work_end, emily_busy_times, elizabeth_busy_times, meeting_duration)\n    if proposed_time:\n        print(f'{proposed_time.strftime(\"%H:%M\")}:{(proposed_time + meeting_duration).strftime(\"%H:%M\")}')\n        break\n```",
            "count": "calendar_scheduling_example_941"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nvictoria_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n}\n\nsamuel_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\ndef is_time_free(participant_schedule, day, start_time, end_time):\n    for busy_start, busy_end in participant_schedule[day]:\n        if (start_time < busy_end) and (end_time > busy_start):\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in [\"Tuesday\", \"Wednesday\", \"Friday\"]:  # Exclude Monday and Thursday for Samuel\n        start_time = work_start\n        while start_time + meeting_duration <= work_end:\n            end_time = start_time + meeting_duration\n            if is_time_free(victoria_schedule, day, start_time, end_time) and is_time_free(samuel_schedule, day, start_time, end_time):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            start_time += timedelta(minutes=10)  # Increment by 10 minutes to find a suitable slot\n    return None\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_942"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_hour = 9\nend_hour = 17\n\n# Define the duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for Janice and Richard in a dictionary\nschedules = {\n    'Janice': [\n        (datetime(2023, 1, 1, 11, 30), datetime(2023, 1, 1, 12, 0)),  # Monday\n        (datetime(2023, 1, 2, 9, 30), datetime(2023, 1, 2, 10, 0)),  # Tuesday\n        (datetime(2023, 1, 2, 14, 30), datetime(2023, 1, 2, 15, 0)),  # Tuesday\n        (datetime(2023, 1, 3, 11, 0), datetime(2023, 1, 3, 11, 30)),  # Wednesday\n        (datetime(2023, 1, 3, 13, 30), datetime(2023, 1, 3, 14, 0)),  # Wednesday\n        (datetime(2023, 1, 4, 15, 30), datetime(2023, 1, 4, 16, 0)),  # Thursday\n        (datetime(2023, 1, 5, 13, 30), datetime(2023, 1, 5, 14, 0)),  # Friday\n        (datetime(2023, 1, 5, 16, 0), datetime(2023, 1, 5, 16, 30)),  # Friday\n    ],\n    'Richard': [\n        (datetime(2023, 1, 1, 9, 0), datetime(2023, 1, 1, 10, 30)),  # Monday\n        (datetime(2023, 1, 1, 12, 30), datetime(2023, 1, 1, 13, 30)),  # Monday\n        (datetime(2023, 1, 1, 14, 0), datetime(2023, 1, 1, 14, 30)),  # Monday\n        (datetime(2023, 1, 1, 15, 0), datetime(2023, 1, 1, 15, 30)),  # Monday\n        (datetime(2023, 1, 2, 9, 30), datetime(2023, 1, 2, 10, 0)),  # Tuesday\n        (datetime(2023, 1, 2, 10, 30), datetime(2023, 1, 2, 11, 0)),  # Tuesday\n        (datetime(2023, 1, 2, 12, 0), datetime(2023, 1, 2, 13, 0)),  # Tuesday\n        (datetime(2023, 1, 2, 14, 0), datetime(2023, 1, 2, 14, 30)),  # Tuesday\n        (datetime(2023, 1, 2, 15, 30), datetime(2023, 1, 2, 16, 0)),  # Tuesday\n        (datetime(2023, 1, 2, 16, 30), datetime(2023, 1, 2, 17, 0)),  # Tuesday\n        (datetime(2023, 1, 3, 9, 0), datetime(2023, 1, 3, 12, 0)),  # Wednesday\n        (datetime(2023, 1, 3, 13, 0), datetime(2023, 1, 3, 13, 30)),  # Wednesday\n        (datetime(2023, 1, 3, 14, 0), datetime(2023, 1, 3, 16, 0)),  # Wednesday\n        (datetime(2023, 1, 4, 9, 0), datetime(2023, 1, 4, 10, 0)),  # Thursday\n        (datetime(2023, 1, 4, 10, 30), datetime(2023, 1, 4, 11, 30)), # Thursday\n        (datetime(2023, 1, 4, 12, 0), datetime(2023, 1, 4, 12, 30)), # Thursday\n        (datetime(2023, 1, 4, 13, 0), datetime(2023, 1, 4, 14, 30)), # Thursday\n        (datetime(2023, 1, 4, 15, 0), datetime(2023, 1, 4, 15, 30)), # Thursday\n        (datetime(2023, 1, 4, 16, 0), datetime(2023, 1, 4, 17, 0)), # Thursday\n        (datetime(2023, 1, 5, 9, 0), datetime(2023, 1, 5, 17, 0)),   # Friday\n    ]\n}\n\ndef find_next_available_time(schedules, meeting_duration):\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    \n    for day in days:\n        for hour in range(start_hour, end_hour):\n            start_time = datetime(2023, 1, 1, hour, 0)\n            end_time = start_time + meeting_duration\n            \n            if end_time.hour >= end_hour:\n                break\n            \n            is_available = True\n            \n            for participant, events in schedules.items():\n                for start, end in events:\n                    if (start_time < end and start < end_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            \n            if is_available:\n                return start_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n    \n    return None\n\n# Find the proposed time\nstart_time, end_time = find_next_available_time(schedules, meeting_duration)\nprint(f'{{{start_time}:{end_time}}}')\n```",
            "count": "calendar_scheduling_example_943"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the schedules\njoe_schedule = {\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\ndenise_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to check if an interval is free\ndef is_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    # Iterate over each day\n    for day in [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        start_time = work_start\n        while start_time + meeting_duration <= work_end:\n            end_time = start_time + meeting_duration\n            if is_free(start_time, end_time, joe_schedule.get(day, [])) and \\\n               is_free(start_time, end_time, denise_schedule.get(day, [])):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            start_time += timedelta(minutes=30)  # check every 30 mins\n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_944"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedule_pat, schedule_sha, duration_minutes, can_meet_days):\n    # Define the working hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    duration = timedelta(minutes=duration_minutes)\n\n    # Create a list of all available time slots per day\n    available_slots = {}\n    \n    for day in can_meet_days:\n        available_slots[day] = []\n        day_start = work_start\n        day_end = work_end\n\n        # Only check the schedule up to the end of working hours\n        while day_start + duration <= day_end:\n            if day_start not in schedule_pat and day_start not in schedule_sha:\n                available_slots[day].append(day_start)\n            day_start += timedelta(minutes=30)  # Check every half an hour\n            \n        # Remove busy slots from available slots\n        busy_slots = sorted(schedule_pat + schedule_sha)\n        available_slots[day] = [slot for slot in available_slots[day] if not any(slot in busy for busy in busy_slots)]\n\n    return available_slots\n\ndef print_first_available_slot(available_slots):\n    for day, slots in available_slots.items():\n        if slots:\n            first_slot = slots[0]\n            return f\"{first_slot.strftime('%H:%M')}:{(first_slot + timedelta(minutes=30)).strftime('%H:%M')}\"\n    return \"No available slots found\"\n\n# Participants' busy times formatted as datetime objects\nschedule_pat = [\n    datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"),\n    datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n    datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n    datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"),\n    # Tuesday - unavailable\n    datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n    datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n    datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n    # Wednesday\n    datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"),\n    datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n    datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n    datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n    # Thursday\n    datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n    datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"),\n    datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"),\n    datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n    datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n    datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"),\n    # Friday\n    datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n    datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n]\n\nschedule_sha = [\n    # Monday\n    datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\"),\n    datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"),\n    datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"),\n    datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"),\n    # Tuesday\n    datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\"),\n    datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n    datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"),\n    datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"),\n    # Wednesday\n    datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"),\n    datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"),\n    # Thursday\n    datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"),\n    datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"),\n    # Friday\n    datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"),\n]\n\n# Meeting duration in minutes\nmeeting_duration = 30\n# Days when participants can meet\nmeeting_days = [\"Monday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n# Find the available time slots\navailable_slots = find_meeting_time(schedule_pat, schedule_sha, meeting_duration, meeting_days)\n\n# Print the first available time slot\nprint(print_first_available_slot(available_slots))\n```",
            "count": "calendar_scheduling_example_945"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nimport datetime\n\n# Define the working hours\nstart_time = datetime.time(9, 0)\nend_time = datetime.time(17, 0)\n\n# Define the meeting duration (30 minutes)\nmeeting_duration = datetime.timedelta(minutes=30)\n\n# Define Juan's busy schedule\njuan_busy = {\n    'Monday': [(datetime.time(11, 0), datetime.time(11, 30))],\n    'Tuesday': [(datetime.time(11, 30), datetime.time(12, 0)),\n                (datetime.time(12, 30), datetime.time(13, 30)),\n                (datetime.time(15, 30), datetime.time(16, 0))],\n    'Wednesday': [(datetime.time(14, 30), datetime.time(15, 0))],\n    'Thursday': [(datetime.time(15, 30), datetime.time(16, 0))],\n    'Friday': [(datetime.time(10, 30), datetime.time(11, 0))]\n}\n\n# Define Doris's busy schedule\ndoris_busy = {\n    'Monday': [(datetime.time(9, 0), datetime.time(17, 0))],\n    'Tuesday': [(datetime.time(9, 0), datetime.time(15, 30)),\n                (datetime.time(16, 0), datetime.time(16, 30))],\n    'Wednesday': [(datetime.time(9, 0), datetime.time(9, 30)),\n                  (datetime.time(10, 0), datetime.time(12, 30)),\n                  (datetime.time(14, 0), datetime.time(14, 30)),\n                  (datetime.time(15, 0), datetime.time(16, 0)),\n                  (datetime.time(16, 30), datetime.time(17, 0))],\n    'Thursday': [(datetime.time(9, 30), datetime.time(13, 0)),\n                 (datetime.time(14, 0), datetime.time(15, 30)),\n                 (datetime.time(16, 0), datetime.time(17, 0))],\n    'Friday': [(datetime.time(9, 0), datetime.time(10, 0)),\n               (datetime.time(10, 30), datetime.time(12, 0)),\n               (datetime.time(13, 0), datetime.time(14, 30)),\n               (datetime.time(15, 0), datetime.time(17, 0))]\n}\n\ndef find_available_slot():\n    for day in ['Wednesday', 'Thursday']:\n        # Define the range of available time slots\n        free_slots = [(start_time, end_time)]\n        \n        # Exclude Juan's busy times\n        for busy_start, busy_end in juan_busy[day]:\n            new_free_slots = []\n            for free_start, free_end in free_slots:\n                if busy_start <= free_end and busy_end >= free_start:\n                    if busy_start > free_start:\n                        new_free_slots.append((free_start, busy_start))\n                    if busy_end < free_end:\n                        new_free_slots.append((busy_end, free_end))\n            free_slots = new_free_slots\n        \n        # Exclude Doris's busy times\n        for busy_start, busy_end in doris_busy[day]:\n            new_free_slots = []\n            for free_start, free_end in free_slots:\n                if busy_start <= free_end and busy_end >= free_start:\n                    if busy_start > free_start:\n                        new_free_slots.append((free_start, busy_start))\n                    if busy_end < free_end:\n                        new_free_slots.append((busy_end, free_end))\n            free_slots = new_free_slots\n        \n        # Check if there is a free slot that can accommodate the meeting duration\n        for free_start, free_end in free_slots:\n            if (datetime.datetime.combine(datetime.date.today(), free_end) - \n                datetime.datetime.combine(datetime.date.today(), free_start)) >= meeting_duration:\n                proposed_start = free_start\n                proposed_end = (datetime.datetime.combine(datetime.date.today(), proposed_start) + \n                                meeting_duration).time()\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Find the available slot\nproposed_time = find_available_slot()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_946"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules\nteresa_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\nkeith_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to check if time slot is free for both participants\ndef is_time_slot_free(start, end):\n    for busy_start, busy_end in teresa_schedule + keith_schedule:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Finding a time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_time_slot_free(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n# Get proposed meeting time\nstart_time, end_time = find_meeting_time()\nprint(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_947"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Jordan's schedule\njordan_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))]\n}\n\n# Michael's schedule\nmichael_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n}\n\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        start_time = working_hours_start\n        end_time = working_hours_end\n\n        # Create a list of all busy periods for the current day\n        busy_times = jordan_schedule.get(day, []) + michael_schedule.get(day, [])\n        \n        # Sort busy periods by start time\n        busy_times.sort(key=lambda x: x[0])\n\n        # Add working hours as busy periods for comparison\n        busy_times.insert(0, (start_time, start_time))  # Start of the day\n        busy_times.append((end_time, end_time))  # End of the day\n\n        # Find available slots\n        for i in range(len(busy_times) - 1):\n            busy_start = busy_times[i][1]\n            busy_end = busy_times[i + 1][0]\n\n            # Check if there is enough space for the meeting\n            if busy_end - busy_start >= meeting_duration:\n                proposed_start = busy_start\n                proposed_end = proposed_start + meeting_duration\n                \n                # Ensure the proposed time doesn't exceed working hours\n                if proposed_end <= end_time:\n                    return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Call the function and print the result\nmeeting_time = find_meeting_time()\nprint(meeting_time)  # Output format should be HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_948"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find suitable meeting time\ndef find_meeting_time(margaret_schedule, denise_schedule, meeting_duration, preferred_days):\n    # Convert schedules to a list of tuples (start, end)\n    def convert_to_time_slots(schedule):\n        time_slots = []\n        for day, busy_times in schedule.items():\n            for start, end in busy_times:\n                time_slots.append((day, start, end))\n        return time_slots\n\n    # Merge two schedules and find free time slots\n    def get_free_time_slots(margaret_slots, denise_slots, work_start, work_end):\n        busy_times = margaret_slots + denise_slots\n        busy_times.sort(key=lambda x: (x[0], x[1]))  # Sort by day and start time\n        \n        free_slots = []\n        current_day = \"\"\n        current_free_start = work_start\n        \n        for day in preferred_days:\n            for start, end in busy_times:\n                if start < current_free_start and day == current_day:\n                    continue  # Skip if busy before free start in the same day\n                \n                if current_day == day:\n                    # Add free slot before the next busy time\n                    if current_free_start < start:\n                        free_slots.append((day, current_free_start, start))\n                \n                current_day = day\n                current_free_start = max(current_free_start, end)\n\n            # At the end of the day, check for time left until work end\n            if current_free_start < work_end and current_day == day:\n                free_slots.append((day, current_free_start, work_end))\n            \n            # Reset for the next day\n            current_free_start = work_start\n        \n        return free_slots\n\n    # Margaret's and Denise's schedules\n    margaret_schedule = convert_to_time_slots(margaret_schedule)\n    denise_schedule = convert_to_time_slots(denise_schedule)\n    \n    # Define work hours\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Get free time slots\n    free_slots = get_free_time_slots(margaret_schedule, denise_schedule, work_start, work_end)\n    \n    # Find suitable time slot for the meeting\n    for day, start, end in free_slots:\n        meeting_start = start\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        \n        if meeting_end <= end:  # Ensure it fits in the busy slot\n            return meeting_start.strftime('%H:%M'), meeting_end.strftime('%H:%M')\n    \n    return None, None\n\n# Define busy schedules for both participants\nmargaret_schedule = {\n    \"Monday\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:30\"), (\"13:30\", \"14:00\"),\n               (\"14:30\", \"15:30\"), (\"16:00\", \"17:00\")],\n    \"Tuesday\": [(\"09:30\", \"10:00\"), (\"12:00\", \"12:30\"), (\"14:30\", \"17:00\")],\n    \"Wednesday\": [(\"10:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:30\", \"13:00\"),\n                  (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    \"Thursday\": [(\"09:30\", \"10:00\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"),\n                 (\"15:00\", \"15:30\"), (\"16:30\", \"17:00\")],\n    \"Friday\": [(\"09:00\", \"09:30\"), (\"11:00\", \"12:00\"), (\"13:30\", \"14:00\"),\n               (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\ndenise_schedule = {\n    \"Monday\": [(\"09:30\", \"12:00\"), (\"13:00\", \"14:00\"), (\"15:00\", \"16:00\")],\n    \"Tuesday\": [(\"09:00\", \"17:00\")],\n    \"Wednesday\": [(\"09:00\", \"11:00\"), (\"11:30\", \"16:00\")],\n    \"Thursday\": [(\"09:00\", \"14:00\"), (\"14:30\", \"15:30\"), (\"16:30\", \"17:00\")],\n    \"Friday\": [(\"09:00\", \"11:00\"), (\"12:00\", \"15:30\")]\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Preferred meeting days\npreferred_days = [\"Tuesday\", \"Wednesday\", \"Thursday\"]\n\n# Find and print the meeting time\nmeeting_start, meeting_end = find_meeting_time(margaret_schedule, denise_schedule, meeting_duration, preferred_days)\nprint(f'{{{meeting_start}:{meeting_end}}}')\n```",
            "count": "calendar_scheduling_example_949"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\njoseph_schedule = {\n    'Tuesday': [(9, 0, 9, 30)],\n    'Thursday': [(9, 30, 10, 0)],\n}\n\ngary_schedule = {\n    'Monday': [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 15, 0), (15, 30, 17, 0)],\n    'Tuesday': [(9, 0, 13, 0), (13, 30, 14, 30), (15, 30, 17, 0)],\n    'Wednesday': [(9, 0, 9, 30), (10, 0, 13, 0), (13, 30, 17, 0)],\n    'Thursday': [(9, 0, 9, 30), (10, 30, 13, 0), (13, 30, 17, 0)],\n    'Friday': [(9, 0, 14, 30), (15, 0, 17, 0)],\n}\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Valid meeting days\nvalid_days = ['Friday']  # Both participants prefer meeting on Fridays\n\ndef is_time_available(schedule, day, start_time, end_time):\n    # Check if the given time slot is available\n    if day not in schedule:\n        return True  # Fully available if no schedule exists for that day\n    for start, end in schedule[day]:\n        if (start_time < end) and (end_time > start):\n            return False  # Time slot is booked\n    return True\n\ndef find_meeting_time():\n    for day in valid_days:\n        # Considering the whole work hours of the day\n        for hour in range(9, 17):  # 9:00 to 17:00\n            start_time = datetime(year=2023, month=10, day=20, hour=hour, minute=0)\n            end_time = start_time + meeting_duration\n            \n            if is_time_available(joseph_schedule, day, start_time.hour, end_time.hour) and \\\n               is_time_available(gary_schedule, day, start_time.hour, end_time.hour):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Executing the function to find the proposed meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)  # Output in the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_950"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the busy schedules for Nicholas and Melissa \nnicholas_busy = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    \n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    \n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    \n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nmelissa_busy = [\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    \n    (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n\n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    \n    (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find the first available slot\ndef find_available_slot(nicholas_busy, melissa_busy, meeting_duration, work_start, work_end):\n    # Create all slots within work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        slot_start = current_time\n        slot_end = current_time + meeting_duration\n        \n        if all(not (slot_start < end and slot_end > start) for start, end in nicholas_busy) and \\\n           all(not (slot_start < end and slot_end > start) for start, end in melissa_busy):\n            return slot_start.strftime(\"%H:%M\"), slot_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Check the next half hour\n\n# Final output\nstart_time, end_time = find_available_slot(nicholas_busy, melissa_busy, meeting_duration, work_start, work_end)\nprint(f\"Proposed meeting time: {{{start_time}:{end_time}}}\")\n```",
            "count": "calendar_scheduling_example_951"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant availability\ndiane_availability = {\n    \"Monday\": [(9, 0), (12, 30), (14, 0), (15, 0), (16, 30), (17, 0)],\n    \"Tuesday\": [(9, 0), (10, 0), (12, 0), (14, 30), (16, 0), (16, 30)],\n    \"Wednesday\": [(9, 0), (10, 30), (11, 30), (12, 30), (15, 0), (17, 0)],\n    \"Thursday\": [(9, 0), (10, 0), (11, 0), (12, 0), (15, 30), (16, 0)],\n    \"Friday\": [(9, 30), (10, 30), (13, 0), (14, 0), (16, 30), (17, 0)],\n}\n\nchristian_availability = {\n    \"Monday\": [],\n    \"Tuesday\": [(9, 0), (10, 0), (11, 30), (12, 30), (13, 0), (16, 30)],\n    \"Wednesday\": [],\n    \"Thursday\": [(9, 0), (16, 0)],\n    \"Friday\": [(9, 0), (14, 30), (15, 0), (16, 0)],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find common availability within working hours\ndef find_meeting_time(diane_avail, christian_avail, duration):\n    available_times = []\n    \n    for day in diane_avail.keys():\n        # Get end of the work timeframe\n        work_start = datetime.strptime(f\"{day} 09:00\", \"%A %H:%M\")\n        work_end = datetime.strptime(f\"{day} 17:00\", \"%A %H:%M\")\n        \n        # Create a list of all the free slots\n        diane_busy_times = sorted(diane_avail[day])\n        christian_busy_times = sorted(christian_avail[day])\n        \n        # Combine and sort busy times\n        busy_times = sorted(diane_busy_times + christian_busy_times)\n        \n        # Create slots based on busy times\n        free_times = []\n        last_end_time = work_start\n        \n        for start, end in busy_times:\n            start_time = datetime.strptime(f\"{day} {start}:{0}\", \"%A %H:%M:%S\")\n            end_time = datetime.strptime(f\"{day} {end}:{0}\", \"%A %H:%M:%S\")\n            \n            if last_end_time < start_time:\n                free_times.append((last_end_time, start_time))\n            last_end_time = end_time\n        \n        # Check for remaining time\n        if last_end_time < work_end:\n            free_times.append((last_end_time, work_end))\n\n        # Check for available slots that can accommodate the meeting duration\n        for start, end in free_times:\n            if end - start >= duration:\n                available_times.append((start, start + duration))\n    \n    return available_times\n\n# Get free slots\navailable_slots = find_meeting_time(diane_availability, christian_availability, meeting_duration)\n\n# Get the earliest available slot\nif available_slots:\n    earliest_slot = available_slots[0]\n    start_time = earliest_slot[0].time()\n    end_time = earliest_slot[1].time()\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_952"
        },
        {
            "final_program_time": "{14:30:15:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nlinda_schedule = {\n    'Monday': [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 11, 30), \n               (12, 0, 13, 0), (13, 30, 14, 0), (15, 0, 15, 30), \n               (16, 0, 17, 0)],\n    'Tuesday': [(9, 0, 11, 30), (12, 0, 14, 30), (16, 0, 17, 0)],\n    'Wednesday': [],\n    'Thursday': [(9, 30, 10, 0), (11, 0, 12, 0), \n                 (14, 30, 15, 30), (16, 30, 17, 0)],\n    'Friday': [(10, 30, 11, 0), (11, 30, 12, 0), \n               (13, 0, 14, 0), (15, 0, 15, 30)],\n}\n\nmark_schedule = {\n    'Monday': [(9, 0, 10, 30), (11, 0, 14, 30), (15, 0, 15, 30), \n               (16, 0, 17, 0)],\n    'Tuesday': [(9, 0, 10, 30), (11, 0, 14, 30), (15, 0, 17, 0)],\n    'Wednesday': [(9, 0, 17, 0)],\n    'Thursday': [(9, 0, 10, 30), (11, 0, 11, 30), (12, 30, 13, 30), \n                 (14, 30, 15, 0), (15, 30, 17, 0)],\n    'Friday': [(9, 0, 11, 0), (11, 30, 17, 0)],\n}\n\nmeeting_duration = timedelta(minutes=30)\ndays_to_consider = ['Tuesday', 'Wednesday']\n\ndef find_meeting_time(linda_schedule, mark_schedule, meeting_duration):\n    # Check available slots in the selected days\n    for day in days_to_consider:\n        linda_busy_times = linda_schedule[day]\n        mark_busy_times = mark_schedule[day]\n        \n        # Create a combined busy schedule\n        combined_busy_times = linda_busy_times + mark_busy_times\n        combined_busy_times.sort()\n        \n        # Merge busy times to find free slots\n        free_slots = []\n        start = 9 * 60  # start from 9:00 AM\n        end = 17 * 60   # end at 5:00 PM\n        \n        for busy in combined_busy_times:\n            busy_start = busy[0] * 60 + busy[1]\n            busy_end = busy[2] * 60 + busy[3]\n            \n            if start < busy_start:\n                free_slots.append((start, busy_start))\n            start = max(start, busy_end)\n        \n        if start < end:\n            free_slots.append((start, end))\n        \n        # Check for available time slots for the meeting duration\n        for slot in free_slots:\n            slot_start, slot_end = slot\n            if (slot_end - slot_start) >= (meeting_duration.total_seconds() / 60):\n                meeting_start = datetime.strptime(f\"{day} {slot_start // 60}:{slot_start % 60}\", \"%A %H:%M\")\n                meeting_end = meeting_start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None\n\n# Find and output the meeting time\nmeeting_time = find_meeting_time(linda_schedule, mark_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_953"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_hour = 9\nend_hour = 17\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for Christine and Donna\nchristine_busy = [\n    (datetime.strptime(\"2023-10-10 16:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-10 17:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-12 09:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-12 10:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-13 13:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-13 14:00\", \"%Y-%m-%d %H:%M\")),\n]\n\ndonna_busy = [\n    (datetime.strptime(\"2023-10-09 09:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-09 14:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-09 14:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-09 16:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-10 09:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-10 11:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-10 13:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-10 14:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-10 15:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-10 16:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-11 09:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-11 09:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-11 10:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-11 12:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-11 13:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-11 14:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-11 15:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-11 16:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-12 09:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-12 09:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-12 10:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-12 11:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-12 12:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-12 13:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-12 14:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-12 17:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-13 09:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-13 09:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-13 11:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-13 12:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-13 13:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-13 13:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-13 14:00\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-13 14:30\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-13 15:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-13 16:00\", \"%Y-%m-%d %H:%M\")),\n    (datetime.strptime(\"2023-10-13 16:30\", \"%Y-%m-%d %H:%M\"), datetime.strptime(\"2023-10-13 17:00\", \"%Y-%m-%d %H:%M\")),\n]\n\n# Check each day from Monday to Friday\nfor weekday in range(5):\n    for hour in range(start_hour, end_hour - 1):  # 17:00 - 0.5 = 16:30 = end of last meeting\n        start_time = datetime.strptime(f\"2023-10-{9 + weekday} {hour}:00\", \"%Y-%m-%d %H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if all(not (start_time < end and end_time > start) for start, end in christine_busy) and \\\n           all(not (start_time < end and end_time > start) for start, end in donna_busy):\n            if weekday != 2:  # Skip Wednesday\n                print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n                break\n```\n",
            "count": "calendar_scheduling_example_954"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Schedule for Henry and Jacqueline\nhenry_schedule = {\n    \"Monday\": [(9, 30), (10, 0), (11, 0), (12, 0), (14, 30), (15, 30), (16, 0), (17, 0)],\n    \"Tuesday\": [(10, 30), (11, 0), (14, 30), (15, 30)],\n    \"Wednesday\": [(9, 0), (10, 30), (11, 30), (12, 30), (13, 0), (14, 30), (15, 0), (16, 0), (16, 30), (17, 0)],\n    \"Thursday\": [(9, 30), (10, 0), (11, 0), (12, 30), (13, 30), (15, 0), (15, 30), (16, 0)],\n    \"Friday\": [(9, 30), (10, 0), (11, 30), (12, 0), (14, 0), (15, 30), (16, 0)]\n}\n\njacqueline_schedule = {\n    \"Monday\": [(9, 0), (11, 30), (12, 0), (14, 0), (14, 30), (16, 0), (17, 0)],\n    \"Tuesday\": [(9, 30), (10, 30), (11, 0), (12, 0), (13, 0), (13, 30), (14, 30), (15, 0), (17, 0)],\n    \"Wednesday\": [(9, 0), (11, 0), (11, 30), (17, 0)],\n    \"Thursday\": [(9, 0), (9, 30), (10, 30), (13, 0), (13, 30), (14, 0), (14, 30), (16, 0), (16, 30), (17, 0)],\n    \"Friday\": [(9, 0), (17, 0)]\n}\n\ndef find_free_slot(duration_minutes):\n    duration = timedelta(minutes=duration_minutes)\n    for day in [\"Wednesday\", \"Friday\"]:  # Available days based on constraints\n        # Max work hours from 9:00 to 17:00\n        start_time = datetime.strptime(day + \" 9:00\", \"%A %H:%M\")\n        end_time = datetime.strptime(day + \" 17:00\", \"%A %H:%M\")\n        \n        # Convert busy schedules into time intervals for the day\n        busy_intervals = []\n        for busy_slot in henry_schedule[day] + jacqueline_schedule[day]:\n            busy_intervals.append((datetime.strptime(day + f\" {busy_slot[0]}:{busy_slot[1]}\", \"%A %H:%M\"),\n                                   datetime.strptime(day + f\" {busy_slot[0]}:{busy_slot[1]}\", \"%A %H:%M\") + duration))\n        \n        busy_intervals.sort()  # Sort busy intervals\n        last_end = start_time\n        \n        # Check for available slots\n        for start, end in busy_intervals:\n            if last_end + duration <= start:\n                return (last_end.time(), (last_end + duration).time())\n            last_end = max(last_end, end)\n\n        # Check after last busy interval\n        if last_end + duration <= end_time:\n            return (last_end.time(), (last_end + duration).time())\n\n# Find a suitable time and format it\nmeeting_time = find_free_slot(30)\nif meeting_time:\n    print(f\"{{{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}}}\")\n```",
            "count": "calendar_scheduling_example_955"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Work hours and meeting duration\nwork_start = timedelta(hours=9)  # 9:00 AM\nwork_end = timedelta(hours=17)    # 5:00 PM\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\ndavid_schedule = [\n    (timedelta(hours=13, minutes=30), timedelta(hours=14)),\n    (timedelta(hours=15), timedelta(hours=15, minutes=30))\n]\n\nmark_schedule = [\n    (timedelta(hours=9, minutes=30), timedelta(hours=10)),\n    (timedelta(hours=10, minutes=30), timedelta(hours=11)),\n    (timedelta(hours=11, minutes=30), timedelta(hours=13, minutes=30)),\n    (timedelta(hours=14), timedelta(hours=14, minutes=30)),\n    (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n    (timedelta(hours=16), timedelta(hours=17)),\n    (timedelta(hours=9), timedelta(hours=10, minutes=30)),\n    (timedelta(hours=11), timedelta(hours=12, minutes=30)),\n    (timedelta(hours=13), timedelta(hours=17)),\n    (timedelta(hours=9), timedelta(hours=14, minutes=30)),\n    (timedelta(hours=15), timedelta(hours=17)),\n    (timedelta(hours=9), timedelta(hours=17)),\n    (timedelta(hours=9), timedelta(hours=9, minutes=30)),\n    (timedelta(hours=10), timedelta(hours=11, minutes=30)),\n    (timedelta(hours=12), timedelta(hours=16, minutes=30))\n]\n\n# Function to find available time slot\ndef find_available_slot():\n    for day in range(5):  # Monday to Friday\n        for start_time in (work_start + timedelta(minutes=i) for i in range(0, (work_end.total_seconds() // 60) - 30)):\n            meeting_start = start_time\n            meeting_end = start_time + meeting_duration\n\n            # Check if meeting conflicts with David's schedule\n            is_conflict = any(meeting_start < end and meeting_end > start for start, end in david_schedule)\n            # Check if meeting conflicts with Mark's schedule\n            is_conflict |= any(meeting_start < end and meeting_end > start for start, end in mark_schedule)\n\n            # If no conflict found, return the time in requested format\n            if not is_conflict:\n                return f\"{meeting_start.total_seconds() // 3600:02}:{(meeting_start.total_seconds() % 3600) // 60:02}:{meeting_end.total_seconds() // 3600:02}:{(meeting_end.total_seconds() % 3600) // 60:02}\"\n\n# Get the available slot\nproposed_time = find_available_slot()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_956"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the blocked schedules for Amber and Marie\namber_schedule = {\n    'Monday': [\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n    ],\n    'Wednesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n    ],\n    'Thursday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    'Friday': [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n    ]\n}\n\nmarie_schedule = {\n    'Monday': [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    'Wednesday': [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n    ],\n    'Thursday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    'Friday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ]\n}\n\n# Merge both schedules to find common free slots\ndef find_free_slots(schedule):\n    free_slots = []\n    for day, blocks in schedule.items():\n        current_time = work_start\n        for start, end in blocks:\n            if current_time < start:\n                free_slots.append((current_time, start))\n            current_time = max(current_time, end)\n        if current_time < work_end:\n            free_slots.append((current_time, work_end))\n    return free_slots\n\namber_free_slots = find_free_slots(amber_schedule)\nmarie_free_slots = find_free_slots(marie_schedule)\n\n# Find common free slots\ndef find_common_slots(amber_free, marie_free):\n    common_slots = []\n    for a_start, a_end in amber_free:\n        for m_start, m_end in marie_free:\n            start = max(a_start, m_start)\n            end = min(a_end, m_end)\n            if start + meeting_duration <= end:\n                common_slots.append((start, start + meeting_duration))\n    return common_slots\n\ncommon_free_slots = find_common_slots(amber_free_slots, marie_free_slots)\n\n# Get the earliest common slot\nif common_free_slots:\n    proposed_time = common_free_slots[0]  # First available slot\n    print(f\"{{{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}}}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_957"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ger_schedule, jer_schedule, duration_hours=1):\n    # Convert all busy times into a list of tuples (start_time, end_time)\n    ger_busy = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) for start, end in ger_schedule]\n    jer_busy = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) for start, end in jer_schedule]\n    \n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Build a complete list of busy times\n    all_busy = ger_busy + jer_busy\n\n    # Search for available time slots\n    available_times = []\n    current_time = work_start\n\n    while current_time < work_end:\n        temp_time = current_time + timedelta(hours=duration_hours)\n        if temp_time > work_end:\n            break\n            \n        busy = any(start < temp_time and end > current_time for start, end in all_busy)\n        \n        if not busy:\n            available_times.append((current_time.time(), temp_time.time()))\n        \n        current_time += timedelta(minutes=30)  # Check every 30 minutes for availability\n\n    # Exclude days based on Gerald's preferences (Monday, Tuesday)\n    # In this case, we assume the times are within Wednesday, Thursday, or Friday\n\n    # Choose the first available time slot\n    if available_times:\n        start_time, end_time = available_times[0]\n        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return None\n\nger_schedule = [\n    ('12:00', '12:30')  # Gerald is busy on Monday\n]\njer_schedule = [\n    ('9:00', '10:30'), ('11:30', '12:30'), ('13:00', '14:00'), ('14:30', '17:00'),\n    ('9:00', '10:30'), ('11:00', '11:30'), ('12:00', '12:30'), ('13:30', '14:30'),\n    ('15:30', '17:00'), ('9:00', '11:30'), ('12:00', '14:30'), ('15:00', '16:00'),\n    ('9:00', '11:00'), ('11:30', '13:00'), ('13:30', '15:00'), ('15:30', '17:00'),\n    ('9:30', '12:00'), ('13:00', '15:30'), ('16:00', '16:30')\n]\n\nprint(find_meeting_time(ger_schedule, jer_schedule))\n```",
            "count": "calendar_scheduling_example_958"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(kelly_schedule, patricia_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Create a list of busy time blocks\n    busy_times = []\n    \n    # Add Kelly's busy times\n    for block in kelly_schedule:\n        start, end = block\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n    # Add Patricia's busy times\n    for block in patricia_schedule:\n        start, end = block\n        busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Find available slots\n    available_slots = []\n    last_end_time = work_start\n\n    for start, end in busy_times:\n        if last_end_time < start:\n            available_slots.append((last_end_time, start))\n        last_end_time = max(last_end_time, end)\n\n    # Check the last time slot until work end\n    if last_end_time < work_end:\n        available_slots.append((last_end_time, work_end))\n    \n    # Find a suitable meeting time\n    for start, end in available_slots:\n        if (end - start) >= timedelta(minutes=meeting_duration):\n            meeting_start = start\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n    return None\n\nkelly_schedule = [(\"09:00\", \"09:30\"), (\"09:00\", \"09:30\")] # Represents that Kelly is busy Tuesday & Friday from 9:00 to 9:30\npatricia_schedule = [\n    (\"09:30\", \"16:00\"), (\"16:30\", \"17:00\"), # Monday\n    (\"09:00\", \"11:00\"), (\"12:30\", \"16:30\"), # Tuesday\n    (\"10:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"14:00\"), (\"14:30\", \"17:00\"), # Wednesday\n    (\"09:00\", \"10:30\"), (\"11:00\", \"12:30\"), (\"13:30\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\"), # Thursday\n    (\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"14:00\"), (\"14:30\", \"16:00\"), (\"16:30\", \"17:00\"), # Friday\n]\n\nmeeting_duration = 30  # Minutes\nproposed_time = find_meeting_time(kelly_schedule, patricia_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_959"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Set working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Adam's schedule: [start_time, end_time] blocks\nadam_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\n# Karen's schedule: [start_time, end_time] blocks\nkaren_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\n# Find the first available time slot\ndef find_meeting_time():\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in [0, 30]:\n            proposed_start = datetime.strptime(f\"{hour:02}:{minute:02}\", \"%H:%M\")\n            proposed_end = proposed_start + meeting_duration\n            \n            # Check if the proposed time is within working hours\n            if proposed_end > end_time:\n                continue\n                \n            # Check Adam's schedule\n            adam_available = True\n            for start, end in adam_schedule:\n                if proposed_start < end and proposed_end > start:\n                    adam_available = False\n                    break\n                    \n            # Check Karen's schedule\n            karen_available = True\n            for start, end in karen_schedule:\n                if proposed_start < end and proposed_end > start:\n                    karen_available = False\n                    break\n            \n            # If both are available, return the time\n            if adam_available and karen_available:\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    \n# Run the function to find meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_960"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(george_schedule, evelyn_schedule, meeting_duration):\n    # Convert schedules to datetime format\n    george_busy_times = [tuple(map(lambda x: datetime.strptime(x, \"%H:%M\"), time)) for time in george_schedule]\n    evelyn_busy_times = [tuple(map(lambda x: datetime.strptime(x, \"%H:%M\"), time)) for time in evelyn_schedule]\n    \n    # Define work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Generate all potential meeting slots\n    potential_slots = []\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        potential_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every half hour\n\n    # Check against george's and evelyn's busy times\n    for slot in potential_slots:\n        meeting_end_time = slot + meeting_duration\n        is_busy = False\n        \n        # Check George's busy times\n        for busy_start, busy_end in george_busy_times:\n            if (slot < busy_end and meeting_end_time > busy_start):\n                is_busy = True\n                break\n        \n        # Check Evelyn's busy times\n        if not is_busy:\n            for busy_start, busy_end in evelyn_busy_times:\n                if (slot < busy_end and meeting_end_time > busy_start):\n                    is_busy = True\n                    break\n        \n        if not is_busy:\n            return f\"{slot.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n# Existing schedules\ngeorge_schedule = [(\"13:00\", \"14:30\"), (\"16:00\", \"16:30\"), \n                   (\"14:00\", \"14:30\"), (\"15:30\", \"17:00\"), \n                   (\"10:30\", \"11:00\"), (\"12:30\", \"13:00\"), \n                   (\"14:30\", \"15:00\"), (\"16:30\", \"17:00\"), \n                   (\"09:30\", \"10:00\"), (\"14:30\", \"15:00\")]\n\nevelyn_schedule = [(\"10:00\", \"11:00\"), (\"12:30\", \"13:00\"), \n                   (\"13:30\", \"14:00\"), (\"14:30\", \"15:30\"), \n                   (\"16:00\", \"17:00\"), (\"09:00\", \"09:30\"), \n                   (\"10:00\", \"10:30\"), (\"11:00\", \"13:00\"), \n                   (\"13:30\", \"15:30\"), (\"16:00\", \"16:30\"), \n                   (\"09:00\", \"12:00\"), (\"12:30\", \"15:30\"), \n                   (\"16:30\", \"17:00\"), (\"09:00\", \"09:30\"), \n                   (\"10:30\", \"11:30\"), (\"12:00\", \"13:00\"), \n                   (\"13:30\", \"17:00\"), (\"09:00\", \"09:30\"), \n                   (\"10:00\", \"11:00\"), (\"12:00\", \"13:00\"), \n                   (\"13:30\", \"15:00\"), (\"16:00\", \"17:00\")]\n\nmeeting_duration = timedelta(minutes=30)\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(george_schedule, evelyn_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_961"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(rachel_schedule, brandon_schedule, duration):\n    # Define work hours and days\n    work_hours = {\n        'Monday': (9, 17),\n        'Tuesday': (9, 17),\n        'Wednesday': (9, 17),\n        'Thursday': (9, 17),\n        'Friday': (9, 17)\n    }\n\n    # Convert schedules to time slots\n    def convert_schedule(schedule):\n        time_slots = []\n        for day, busy_times in schedule.items():\n            for start, end in busy_times:\n                time_slots.append((day, start, end))\n        return time_slots\n\n    # Finding available slots considering both schedules\n    rachel_time_slots = convert_schedule(rachel_schedule)\n    brandon_time_slots = convert_schedule(brandon_schedule)\n\n    # Aggregate busy times for each day\n    busy_times = {day: [] for day in work_hours.keys()}\n    for day, start, end in rachel_time_slots + brandon_time_slots:\n        busy_times[day].append((start, end))\n\n    # Function to check if a time slot is free\n    def is_time_free(day, start_time, end_time):\n        for busy_start, busy_end in busy_times[day]:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n        return True\n\n    # Attempt to find a free slot\n    for day, (work_start, work_end) in work_hours.items():\n        # Skip days based on preferences\n        if day == 'Friday' and 'Rachel' in participants: \n            continue\n        if day == 'Thursday' and 'Brandon' in participants:\n            continue\n\n        start_time = work_start\n        while start_time + duration <= work_end:\n            end_time = start_time + duration\n            if is_time_free(day, start_time, end_time):\n                return f\"{start_time:02}:00:{end_time:02}:00\"\n            start_time += 0.5  # Check half-hour increments\n\nparticipants = ['Rachel', 'Brandon']\n\n# Define constraints\nduration = timedelta(minutes=30)\nrachel_schedule = {\n    'Monday': [(9, 12), (13, 14.5), (15, 15.5), (16, 16.5)],\n    'Tuesday': [(10, 11), (12, 12.5), (13, 13.5), (14.5, 15.5), (16, 16.5)],\n    'Wednesday': [(9.5, 10.5), (13, 15)],\n    'Thursday': [(9, 9.5), (12.5, 13.5), (14, 15), (16.5, 17)],\n    'Friday': [(9, 9.5), (11, 13), (13.5, 14.5), (16, 16.5)]\n}\n\nbrandon_schedule = {\n    'Monday': [(9, 9.5), (10, 11), (11.5, 14), (15.5, 17)],\n    'Tuesday': [(9, 10), (10.5, 17)],\n    'Wednesday': [(9, 15), (15.5, 17)],\n    'Thursday': [(9, 11), (11.5, 13.5), (14, 17)],\n    'Friday': [(9, 15.5), (16, 17)]\n}\n\n# Get the meeting time\nmeeting_time = find_meeting_time(rachel_schedule, brandon_schedule, duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_962"
        },
        {
            "final_program_time": "{21:30:22:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nWORK_START = timedelta(hours=9)\nWORK_END = timedelta(hours=17)\nMEETING_DURATION = timedelta(hours=1)\n\n# Define the busy schedules for Lisa and Emily\nlisa_schedule = {\n    'Monday': [(timedelta(hours=10, minutes=30), timedelta(hours=11, minutes=30)),\n               (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n               (timedelta(hours=13, minutes=30), timedelta(hours=14)),\n               (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n    'Tuesday': [(timedelta(hours=10, minutes=30), timedelta(hours=11)),\n                (timedelta(hours=13, minutes=30), timedelta(hours=14)),\n                (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n    'Thursday': [(timedelta(hours=12), timedelta(hours=12, minutes=30))],\n    'Friday': [(timedelta(hours=9), timedelta(hours=9, minutes=30))]\n}\n\nemily_schedule = {\n    'Monday': [(timedelta(hours=9, minutes=30), timedelta(hours=10)),\n               (timedelta(hours=10, minutes=30), timedelta(hours=11, minutes=30)),\n               (timedelta(hours=12), timedelta(hours=15)),\n               (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n    'Tuesday': [(timedelta(hours=9), timedelta(hours=15)),\n                (timedelta(hours=15, minutes=30), timedelta(hours=17))],\n    'Wednesday': [(timedelta(hours=9), timedelta(hours=10, minutes=30)),\n                  (timedelta(hours=12), timedelta(hours=13, minutes=30)),\n                  (timedelta(hours=14), timedelta(hours=15)),\n                  (timedelta(hours=15, minutes=30), timedelta(hours=16))],\n    'Thursday': [(timedelta(hours=9, minutes=30), timedelta(hours=10)),\n                 (timedelta(hours=10, minutes=30), timedelta(hours=11, minutes=30)),\n                 (timedelta(hours=14, minutes=30), timedelta(hours=15, minutes=30)),\n                 (timedelta(hours=16), timedelta(hours=17))],\n    'Friday': [(timedelta(hours=9), timedelta(hours=16)),\n               (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    days = ['Tuesday', 'Thursday', 'Friday']  # Exclude Monday and Wednesday for Lisa\n    for day in days:\n        free_slots = get_free_slots(lisa_schedule[day], emily_schedule[day])\n        for start, end in free_slots:\n            if (end - start) >= MEETING_DURATION:\n                # Check if can fit the meeting in the free slot\n                meeting_start = start\n                meeting_end = start + MEETING_DURATION\n                return f\"{(meeting_start + WORK_START).seconds // 3600:02}:{(meeting_start + WORK_START).seconds % 3600 // 60:02}:{(meeting_end + WORK_START).seconds // 3600:02}:{(meeting_end + WORK_START).seconds % 3600 // 60:02}\"\n    return None\n\n# Function to get free time slots\ndef get_free_slots(lisa_busy, emily_busy):\n    busy_slots = sorted(lisa_busy + emily_busy)\n    free_slots = []\n    current_time = WORK_START\n\n    for start, end in busy_slots:\n        if current_time < start:\n            free_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    if current_time < WORK_END:\n        free_slots.append((current_time, WORK_END))\n\n    return free_slots\n\n# Execute the function and print the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_963"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules\nbetty_schedule = {\n    \"Monday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\nmegan_schedule = {\n    \"Monday\": [(start_time, end_time)],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), end_time)],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Friday\": [(start_time, end_time)]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(betty_schedule, megan_schedule, duration):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    \n    for day in days:\n        # Skip days where Betty can't meet\n        if day in [\"Wednesday\", \"Thursday\"]:\n            continue\n        \n        # Combine busy slots\n        busy_slots = betty_schedule.get(day, []) + megan_schedule.get(day, [])\n        busy_slots.sort(key=lambda x: x[0])  # Sort by start time\n        \n        # Check for free slots\n        current_time = start_time\n        for start, end in busy_slots:\n            if current_time < start:\n                available_time = (start - current_time).total_seconds() / 60\n                if available_time >= duration:\n                    return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=duration)).strftime('%H:%M')}\"\n            current_time = max(current_time, end)  # Move current time forward if busy slot overlaps\n            \n        if current_time + timedelta(minutes=duration) <= end_time:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=duration)).strftime('%H:%M')}\"\n    \n    return None\n\n# Define the duration\nmeeting_duration = 60  # in minutes\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time(betty_schedule, megan_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_964"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and constraints\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nadam_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\njoan_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if a meeting time is available\ndef is_time_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Generate possible meeting times\ndef find_meeting_time():\n    for hour in range(work_hours[0].hour, work_hours[1].hour):\n        for minute in range(0, 60, 30):\n            start_time = datetime.strptime(f\"{hour:02d}:{minute:02d}\", \"%H:%M\")\n            end_time = start_time + meeting_duration\n            \n            if end_time <= work_hours[1]:\n                if is_time_available(start_time, end_time, adam_schedule) and is_time_available(start_time, end_time, joan_schedule):\n                    # Exclude Wednesday for Adam and Thursday for Joan\n                    if start_time.weekday() == 2 or start_time.weekday() == 3:\n                        continue\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_965"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(doris_schedule, jonathan_schedule, meeting_duration):\n    # Work hours and available days\n    work_hours_start = 9\n    work_hours_end = 17\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n\n    # Convert scheduled times into a list of time slots\n    busy_slots = {}\n    for day in days:\n        busy_slots[day] = []\n\n    # Add Doris's busy times\n    for busy_time in doris_schedule:\n        day, time_range = busy_time.split(' ')\n        start_time, end_time = time_range.split('-')\n        busy_slots[day].append((datetime.strptime(start_time, \"%H:%M\"), datetime.strptime(end_time, \"%H:%M\")))\n\n    # Add Jonathan's busy times\n    for busy_time in jonathan_schedule:\n        day, time_range = busy_time.split(' ')\n        start_time, end_time = time_range.split('-')\n        busy_slots[day].append((datetime.strptime(start_time, \"%H:%M\"), datetime.strptime(end_time, \"%H:%M\")))\n\n    # Finding the next available time slot\n    for day in days:\n        available_slots = []\n        # Create the entire day's schedule from work hours\n        current_time = datetime.strptime(f\"{day} {work_hours_start}:00\", \"%A %H:%M\")\n        end_of_day = datetime.strptime(f\"{day} {work_hours_end}:00\", \"%A %H:%M\")\n\n        # Sort the busy slots for that day\n        busy_slots[day].sort()\n\n        # Initialize the start of the first available time slot\n        last_end = current_time\n\n        for busy_start, busy_end in busy_slots[day]:\n            # Check if the current free time slot exists before the busy slot\n            if last_end + timedelta(minutes=meeting_duration) <= busy_start:\n                available_slots.append((last_end, busy_start))\n            # Update the last_end to the end of the busy slot\n            last_end = max(last_end, busy_end)\n\n        # Don't forget to check after the last busy slot to the end of the working day\n        if last_end + timedelta(minutes=meeting_duration) <= end_of_day:\n            available_slots.append((last_end, end_of_day))\n\n        # If there are available slots, find the earliest one\n        for start, end in available_slots:\n            if start + timedelta(minutes=meeting_duration) <= end:\n                proposed_start = start\n                proposed_end = proposed_start + timedelta(minutes=meeting_duration)\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n\n    return \"No available time\"\n\n# Existing schedules for participants\ndoris_schedule = [\n    \"Monday 09:00-09:30\", \"Monday 10:30-11:00\", \"Monday 12:00-12:30\", \n    \"Monday 13:30-14:00\", \"Monday 14:30-15:30\", \"Tuesday 09:00-09:30\", \n    \"Tuesday 10:00-11:00\", \"Tuesday 12:00-13:30\", \"Tuesday 14:30-15:00\", \n    \"Tuesday 15:30-16:00\", \"Wednesday 10:00-11:30\", \"Wednesday 12:00-12:30\", \n    \"Wednesday 13:00-13:30\", \"Wednesday 14:00-15:30\", \"Thursday 11:30-12:30\", \n    \"Thursday 13:00-13:30\", \"Thursday 14:30-15:00\", \"Friday 09:30-10:00\", \n    \"Friday 10:30-12:30\", \"Friday 14:00-14:30\", \"Friday 15:30-16:30\"\n]\n\njonathan_schedule = [\n    \"Monday 09:00-10:00\", \"Monday 10:30-16:30\", \"Tuesday 09:00-11:30\", \n    \"Tuesday 12:00-13:30\", \"Tuesday 14:00-15:00\", \"Tuesday 15:30-16:00\", \n    \"Wednesday 09:00-10:00\", \"Wednesday 10:30-11:30\", \"Wednesday 12:30-14:00\", \n    \"Wednesday 14:30-16:00\", \"Wednesday 16:30-17:00\", \"Thursday 09:30-10:00\", \n    \"Thursday 10:30-11:00\", \"Thursday 11:30-12:30\", \"Thursday 15:30-16:00\", \n    \"Friday 09:00-10:00\", \"Friday 11:00-13:00\", \"Friday 14:00-16:00\", \n    \"Friday 16:30-17:00\"\n]\n\n# Set meeting duration to 30 minutes\nmeeting_duration = 30 \n\n# Find a suitable meeting time\nproposed_time = find_meeting_time(doris_schedule, jonathan_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_966"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "AttributeError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Existing schedule for Gregory\ngregory_schedule = {\n    'Tuesday': [(time(9, 0), time(9, 30)), (time(10, 30), time(11, 30)), \n                (time(12, 0), time(12, 30)), (time(13, 0), time(13, 30)), \n                (time(16, 0), time(16, 30))],\n    'Wednesday': [(time(9, 0), time(12, 0)), (time(12, 30), time(13, 0)), \n                  (time(14, 0), time(14, 30))],\n    'Thursday': [(time(9, 0), time(9, 30)), (time(11, 0), time(12, 30)), \n                 (time(13, 30), time(15, 0)), (time(16, 30), time(17, 0))],\n    'Friday': [(time(9, 30), time(10, 0)), (time(11, 0), time(11, 30)), \n               (time(12, 30), time(15, 0)), (time(16, 30), time(17, 0))]\n}\n\n# Existing schedule for Adam\nadam_schedule = {\n    'Monday': [(time(9, 0), time(11, 0)), (time(11, 30), time(16, 30))],\n    'Tuesday': [(time(10, 0), time(11, 0)), (time(12, 0), time(13, 30)), \n                (time(14, 0), time(15, 30))],\n    'Wednesday': [(time(9, 30), time(10, 0)), (time(10, 30), time(12, 30)), \n                  (time(13, 0), time(15, 0)), (time(15, 30), time(16, 0))],\n    'Thursday': [(time(9, 0), time(16, 30))],\n    'Friday': [(time(9, 30), time(12, 0)), (time(12, 30), time(13, 0)), \n               (time(13, 30), time(17, 0))]\n}\n\ndef find_meeting_time(gregory_schedule, adam_schedule, duration_hours):\n    work_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    \n    # Calculate total required seconds for duration\n    duration = timedelta(hours=duration_hours)\n\n    for day in work_days:\n        # Get the busy slots from both schedules\n        busy_slots = gregory_schedule.get(day, []) + adam_schedule.get(day, [])\n        busy_slots.sort(key=lambda x: x[0]) # Sort by start time\n\n        # Merge busy slots to find free time\n        free_slots = []\n        last_end = time(9, 0)  # Start of work hours\n        for start, end in busy_slots:\n            if last_end < start:\n                free_slots.append((last_end, start))\n            last_end = max(last_end, end)\n        if last_end < time(17, 0):\n            free_slots.append((last_end, time(17, 0)))  # End of work hours\n\n        # Check for available slots that fit the duration\n        for free_start, free_end in free_slots:\n            if (timedelta(hours=free_end.hour, minutes=free_end.minute) -\n                timedelta(hours=free_start.hour, minutes=free_start.minute) >= duration):\n                meeting_start = free_start\n                meeting_end = (timedelta(hours=meeting_start.hour, minutes=meeting_start.minute) + duration)\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Schedule a one-hour meeting (1 hour)\nproposed_time = find_meeting_time(gregory_schedule, adam_schedule, 1)\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_967"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules in terms of blocked times\ndeb_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Thursday\"]:\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            available = True\n            # Check if the current time conflicts with Debra's schedule\n            for start, end in deb_schedule[day]:\n                if current_time < end and (current_time + meeting_duration) > start:\n                    available = False\n                    break\n            if available:\n                return current_time.strftime(\"%H:%M\")+\":\"+\\\n                       (current_time + meeting_duration).strftime(\"%H:%M\")\n            current_time += timedelta(minutes=10)\n\n# Call the function and print the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_968"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(kelly_schedule, bobby_schedule, duration, preferred_days):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of times from work_start to work_end\n    times = []\n    current_time = work_start\n    while current_time + duration <= work_end:\n        times.append(current_time)\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    \n    # Checking suitable time slots for each day\n    for day in preferred_days:\n        for t in times:\n            if all(not (a <= t < b or a < t + duration <= b) for a, b in kelly_schedule[day]) and \\\n                all(not (a <= t < b or a < t + duration <= b) for a, b in bobby_schedule[day]):\n                return f\"{t.strftime('%H:%M')}:{(t + duration).strftime('%H:%M')}\"\n    \n    return None\n\nkelly_schedule = {\n    'Monday': [(11, 11.5), (13.5, 14.5), (15, 15.5), (16, 16.5)],\n    'Tuesday': [(9.5, 10), (11, 11.5), (13, 15.5)],\n    'Wednesday': [(10.5, 11), (12, 12.5), (13, 13.5), (15, 15.5)],\n    'Thursday': [(9, 9.5), (12, 12.5), (13.5, 14.5)],\n    'Friday': [(9.5, 10), (12.5, 13.5), (14.5, 15.5), (16.5, 17)]\n}\n\nbobby_schedule = {\n    'Monday': [(9, 17)],\n    'Tuesday': [(9, 17)],\n    'Wednesday': [(9, 11.5), (12, 16.5)],\n    'Thursday': [(9, 14.5), (15, 17)],\n    'Friday': [(9.5, 14.5), (15, 15.5), (16, 17)]\n}\n\nmeeting_duration = timedelta(minutes=30)\npreferred_days = ['Monday', 'Tuesday', 'Thursday']  # Avoiding Wednesday and Friday\n\nprint(find_meeting_time(kelly_schedule, bobby_schedule, meeting_duration, preferred_days))\n```",
            "count": "calendar_scheduling_example_969"
        },
        {
            "final_program_time": "{9:30:10:30}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' busy schedules\nshirley_busy = {\n    'Monday': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Thursday': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M'))],\n    'Friday': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'))],\n}\n\nsophia_busy = {\n    'Monday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Thursday': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\n                 (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                 (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Friday': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n}\n\n# Meetings preferred days\npreferred_days = ['Tuesday', 'Wednesday', 'Thursday']\n\n# Function to check if the time slot is free for both participants\ndef is_free(start, end):\n    for busy_time in shirley_busy.get(day, []):\n        if start < busy_time[1] and end > busy_time[0]:\n            return False\n    for busy_time in sophia_busy.get(day, []):\n        if start < busy_time[1] and end > busy_time[0]:\n            return False\n    return True\n\n# Check for available time slots\nfor day in preferred_days:\n    start_of_day = datetime.strptime('09:00', '%H:%M')\n    end_of_day = datetime.strptime('17:00', '%H:%M')\n\n    current_time = start_of_day\n    while current_time + meeting_duration <= end_of_day:\n        if is_free(current_time, current_time + meeting_duration):\n            print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n            break\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n```\n",
            "count": "calendar_scheduling_example_970"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Constraints\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Timetable for Timothy\ntimothy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\n# Timetable for Dennis\ndennis_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\ndef find_meeting_time(timothy_schedule, dennis_schedule):\n    for day in timothy_schedule.keys():\n        available_slots_t = get_available_slots(timothy_schedule[day])\n        available_slots_d = get_available_slots(dennis_schedule[day])\n        \n        # Find intersection of available slots\n        for start_t, end_t in available_slots_t:\n            for start_d, end_d in available_slots_d:\n                start_meeting = max(start_t, start_d)\n                end_meeting = start_meeting + meeting_duration\n                \n                if start_meeting < end_t and start_meeting < end_d and end_meeting <= end_t and end_meeting <= end_d:\n                    return f\"{start_meeting.strftime('%H:%M')}:{end_meeting.strftime('%H:%M')}\"\n\ndef get_available_slots(schedule):\n    available_slots = []\n    last_end = work_hours_start\n    \n    for start, end in schedule:\n        if last_end < start:\n            available_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    if last_end < work_hours_end:\n        available_slots.append((last_end, work_hours_end))\n    \n    return available_slots\n\n# Call the function\nmeeting_time = find_meeting_time(timothy_schedule, dennis_schedule)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_971"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(kelly_avail, michelle_avail, duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    current_time = start_time\n    while current_time + duration <= end_time:\n        kelly_free = any(time[0] <= current_time < time[1] for time in kelly_avail)\n        michelle_free = any(time[0] <= current_time < time[1] for time in michelle_avail)\n\n        if kelly_free and michelle_free:\n            return (current_time.strftime(\"%H:%M\"), (current_time + duration).strftime(\"%H:%M\"))\n        \n        current_time += timedelta(minutes=30)\n\n    return None\n\nkelly_avail = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nmichelle_avail = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nduration = timedelta(minutes=30)\n\nmeeting_time = find_meeting_time(kelly_avail, michelle_avail, duration)\n\nif meeting_time:\n    print(f\"{{{meeting_time[0]}:{meeting_time[1]}}}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_972"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Jordan's schedule (blocked times)\njordan_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\n# Alice's schedule (blocked times)\nalice_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\n# Blocked days for each participant\njordan_blocked_days = [\"Monday\", \"Wednesday\", \"Thursday\"]\nalice_blocked_days = [\"Tuesday\", \"Friday\"]\n\n# Function to find a meeting time\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        if day in jordan_blocked_days or day in alice_blocked_days:\n            continue\n        \n        # Get combined blocked periods\n        blocked_periods = jordan_schedule[day] + alice_schedule[day]\n        \n        # Sort blocked periods by start time\n        blocked_periods.sort(key=lambda x: x[0])\n        \n        # Check for available time slots in working hours\n        current_start = start_time\n        for start, end in blocked_periods:\n            if current_start + meeting_duration <= start:\n                # Found a free slot\n                return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n            current_start = max(current_start, end)\n        \n        # Check end of the day\n        if current_start + meeting_duration <= end_time:\n            return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_973"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and constraints\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\ndonald_schedule = {\n    \"Monday\": [\"09:00-09:30\"],\n    \"Tuesday\": [\"11:00-11:30\", \"15:00-15:30\"],\n    \"Thursday\": [\"14:30-15:00\"]\n}\n\nemily_schedule = {\n    \"Monday\": [\"09:00-09:30\", \"10:00-12:30\", \"13:00-13:30\", \"14:00-14:30\", \"15:00-16:00\"],\n    \"Tuesday\": [\"09:00-10:30\", \"11:00-12:30\", \"13:00-16:00\", \"16:30-17:00\"],\n    \"Wednesday\": [\"09:00-09:30\", \"10:00-10:30\", \"11:00-12:00\", \"14:00-15:30\", \"16:00-16:30\"],\n    \"Thursday\": [\"09:30-11:00\", \"11:30-13:00\", \"13:30-16:30\"],\n    \"Friday\": [\"09:30-11:30\", \"12:00-12:30\", \"13:30-14:00\", \"14:30-17:00\"],\n}\n\n# Convert time ranges to datetime objects for comparison\ndef get_busy_times(schedule, day):\n    busy_times = []\n    if day in schedule:\n        for time_range in schedule[day]:\n            start, end = time_range.split('-')\n            busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    return busy_times\n\n# Check if a proposed time slot is available\ndef is_time_slot_available(start_time, end_time, donald_busy, emily_busy):\n    for busy_start, busy_end in donald_busy + emily_busy:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    days = [\"Tuesday\", \"Thursday\", \"Friday\"]  # Exclude Monday and Wednesday due to constraints\n    for day in days:\n        donald_busy = get_busy_times(donald_schedule, day)\n        emily_busy = get_busy_times(emily_schedule, day)\n        \n        current_time = working_hours_start\n        while current_time + meeting_duration <= working_hours_end:\n            end_time = current_time + meeting_duration\n            if is_time_slot_available(current_time, end_time, donald_busy, emily_busy):\n                return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Check next half hour\n    return None\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_974"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participant schedules\nnicole_schedule = [\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Friday\n]\n\ndaniel_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Friday\n]\n\n# Function to check for available meeting time\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            available = True\n            for start, end in nicole_schedule:\n                if (current_time < end and current_time + meeting_duration > start):\n                    available = False\n                    break\n            for start, end in daniel_schedule:\n                if (current_time < end and current_time + meeting_duration > start):\n                    available = False\n                    break\n            \n            if available:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n            \n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_975"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Schedule conflicts for Michael and Justin\nmichael_busy = [\n    (\"16:30\", \"17:00\"),\n    (\"10:00\", \"10:30\"),\n    (\"11:30\", \"12:00\"),\n    (\"13:30\", \"14:00\"),\n    (\"15:30\", \"16:00\"),\n    (\"10:30\", \"11:00\"),\n    (\"11:30\", \"12:00\"),\n]\n\njustin_busy = [\n    (\"09:00\", \"11:00\"),\n    (\"11:30\", \"13:00\"),\n    (\"14:00\", \"14:30\"),\n    (\"15:30\", \"16:00\"),\n    (\"16:30\", \"17:00\"),\n    (\"09:00\", \"17:00\"),\n    (\"10:30\", \"11:00\"),\n    (\"12:30\", \"14:30\"),\n    (\"15:00\", \"15:30\"),\n    (\"16:30\", \"17:00\"),\n    (\"09:00\", \"10:00\"),\n    (\"12:30\", \"13:00\"),\n    (\"14:30\", \"15:00\"),\n    (\"16:00\", \"17:00\"),\n    (\"09:00\", \"10:30\"),\n    (\"11:00\", \"11:30\"),\n    (\"12:00\", \"14:30\"),\n    (\"15:00\", \"17:00\"),\n]\n\n# Consolidate all busy times\nbusy_times = []\nfor start, end in michael_busy + justin_busy:\n    busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n\n# Sort busy times\nbusy_times.sort()\n\n# Function to check if the time is available\ndef is_time_available(start, duration):\n    end = start + duration\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:  # there is a conflict\n            return False\n    return True\n\n# Look for a suitable time slot\nmeeting_duration = timedelta(hours=1)\n\nfor start_hour in range(work_start.hour, work_end.hour):\n    start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n    if is_time_available(start_time, meeting_duration):\n        print(f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_976"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' schedules\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Beverly's busy times\nbeverly_busy_times = [\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\n# Jordan's busy times\njordan_busy_times = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Combine busy times\nbusy_times = beverly_busy_times + jordan_busy_times\n\n# Check for available time slots\ndef find_available_time(start_time, end_time, duration):\n    current_time = start_time\n    while current_time + duration <= end_time:\n        # Check if current time conflicts with any busy times\n        conflict = False\n        for busy_start, busy_end in busy_times:\n            if (current_time < busy_end and current_time + duration > busy_start):\n                conflict = True\n                break\n        if not conflict:\n            return current_time\n        current_time += timedelta(minutes=30)  # Check for next 30 minutes\n    return None\n\n# Iterate through the week days (Monday to Friday) to find a suitable time\nfor day in range(5):\n    current_start = work_hours_start\n    current_end = work_hours_end\n    proposed_time = find_available_time(current_start, current_end, meeting_duration)\n    \n    if proposed_time:\n        print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\n        break\n```",
            "count": "calendar_scheduling_example_977"
        },
        {
            "final_program_time": "{9:30:13:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nworking_hours_start = 9\nworking_hours_end = 17\n\n# Define participant schedules\nbrian_schedule = {\n    'Monday': [(9.5, 10), (12.5, 14.5), (15.5, 16)],\n    'Tuesday': [(9, 9.5)],\n    'Wednesday': [(12.5, 14), (16.5, 17)],\n    'Thursday': [(11, 11.5), (13, 13.5), (16.5, 17)],\n    'Friday': [(9.5, 10), (10.5, 11), (13, 13.5), (15, 16), (16.5, 17)],\n}\n\njulia_schedule = {\n    'Monday': [(9, 10), (11, 11.5), (12.5, 13), (15.5, 16)],\n    'Tuesday': [(13, 14), (16, 16.5)],\n    'Wednesday': [(9, 11.5), (12, 12.5), (13, 17)],\n    'Thursday': [(9, 10.5), (11, 17)],\n    'Friday': [(9, 10), (10.5, 11.5), (12.5, 14), (14.5, 15), (15.5, 16)],\n}\n\n# Meeting duration\nmeeting_duration = 1  # in hours\n\n# Find earliest time for the meeting\ndef find_meeting_time(brian_sched, julia_sched):\n    for day in ['Tuesday', 'Wednesday', 'Thursday', 'Friday']:  # Avoid Monday due to preference\n        # Generate free time slots\n        brian_free = generate_free_slots(brian_sched[day])\n        julia_free = generate_free_slots(julia_sched[day])\n        common_free = find_common_free_slots(brian_free, julia_free)\n        \n        for start, end in common_free:\n            if end - start >= meeting_duration:  # Check if meeting can fit\n                return format_time(start, end)\n    return None\n\ndef generate_free_slots(busy_slots):\n    free_slots = []\n    last_end = working_hours_start\n    for start, end in busy_slots:\n        if last_end < start:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    if last_end < working_hours_end:\n        free_slots.append((last_end, working_hours_end))\n    return free_slots\n\ndef find_common_free_slots(brian_free, julia_free):\n    common_free = []\n    for b_start, b_end in brian_free:\n        for j_start, j_end in julia_free:\n            start = max(b_start, j_start)\n            end = min(b_end, j_end)\n            if start < end:\n                common_free.append((start, end))\n    return common_free\n\ndef format_time(start, end):\n    start_time = datetime(1, 1, 1, int(start), int((start % 1) * 60))\n    end_time = datetime(1, 1, 1, int(end), int((end % 1) * 60))\n    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Run the meeting scheduler\nproposed_time = find_meeting_time(brian_schedule, julia_schedule)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_978"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules as a dictionary with their busy times\nschedules = {\n    \"Catherine\": [\n        (datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 9, 30)),\n        (datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 10, 30)),\n        (datetime(2023, 10, 16, 11, 0), datetime(2023, 10, 16, 11, 30)),\n        (datetime(2023, 10, 16, 12, 30), datetime(2023, 10, 16, 14, 0)),\n        (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0)),\n        (datetime(2023, 10, 16, 15, 30), datetime(2023, 10, 16, 16, 30)),\n        (datetime(2023, 10, 17, 10, 30), datetime(2023, 10, 17, 11, 0)),\n        (datetime(2023, 10, 17, 12, 30), datetime(2023, 10, 17, 13, 0)),\n        (datetime(2023, 10, 17, 15, 30), datetime(2023, 10, 17, 16, 0)),\n        (datetime(2023, 10, 18, 9, 30), datetime(2023, 10, 18, 10, 0)),\n        (datetime(2023, 10, 18, 10, 30), datetime(2023, 10, 18, 11, 0)),\n        (datetime(2023, 10, 18, 13, 30), datetime(2023, 10, 18, 16, 0)),\n        (datetime(2023, 10, 19, 9, 0), datetime(2023, 10, 19, 11, 0)),\n        (datetime(2023, 10, 19, 12, 30), datetime(2023, 10, 19, 15, 0)),\n        (datetime(2023, 10, 19, 16, 0), datetime(2023, 10, 19, 17, 0)),\n        (datetime(2023, 10, 20, 9, 0), datetime(2023, 10, 20, 10, 0)),\n        (datetime(2023, 10, 20, 12, 0), datetime(2023, 10, 20, 12, 30)),\n        (datetime(2023, 10, 20, 13, 0), datetime(2023, 10, 20, 13, 30)),\n        (datetime(2023, 10, 20, 14, 0), datetime(2023, 10, 20, 14, 30)),\n        (datetime(2023, 10, 20, 15, 30), datetime(2023, 10, 20, 16, 30)),\n    ],\n    \"Andrea\": [\n        (datetime(2023, 10, 16, 9, 30), datetime(2023, 10, 16, 10, 0)),\n        (datetime(2023, 10, 16, 10, 30), datetime(2023, 10, 16, 11, 30)),\n        (datetime(2023, 10, 16, 12, 0), datetime(2023, 10, 16, 13, 0)),\n        (datetime(2023, 10, 16, 14, 0), datetime(2023, 10, 16, 15, 30)),\n        (datetime(2023, 10, 16, 16, 30), datetime(2023, 10, 16, 17, 0)),\n        (datetime(2023, 10, 17, 9, 30), datetime(2023, 10, 17, 10, 0)),\n        (datetime(2023, 10, 17, 11, 30), datetime(2023, 10, 17, 13, 0)),\n        (datetime(2023, 10, 17, 14, 0), datetime(2023, 10, 17, 14, 30)),\n        (datetime(2023, 10, 17, 15, 0), datetime(2023, 10, 17, 15, 30)),\n        (datetime(2023, 10, 17, 16, 0), datetime(2023, 10, 17, 17, 0)),\n        (datetime(2023, 10, 18, 9, 30), datetime(2023, 10, 18, 10, 0)),\n        (datetime(2023, 10, 18, 11, 0), datetime(2023, 10, 18, 11, 30)),\n        (datetime(2023, 10, 18, 12, 0), datetime(2023, 10, 18, 13, 0)),\n        (datetime(2023, 10, 18, 15, 0), datetime(2023, 10, 18, 16, 0)),\n        (datetime(2023, 10, 18, 16, 30), datetime(2023, 10, 18, 17, 0)),\n        (datetime(2023, 10, 19, 9, 0), datetime(2023, 10, 19, 10, 30)),\n        (datetime(2023, 10, 19, 11, 0), datetime(2023, 10, 19, 11, 30)),\n        (datetime(2023, 10, 19, 13, 0), datetime(2023, 10, 19, 14, 30)),\n        (datetime(2023, 10, 19, 15, 0), datetime(2023, 10, 19, 16, 30)),\n        (datetime(2023, 10, 20, 9, 0), datetime(2023, 10, 20, 9, 30)),\n        (datetime(2023, 10, 20, 10, 0), datetime(2023, 10, 20, 11, 0)),\n        (datetime(2023, 10, 20, 12, 0), datetime(2023, 10, 20, 12, 30)),\n        (datetime(2023, 10, 20, 13, 0), datetime(2023, 10, 20, 14, 0)),\n        (datetime(2023, 10, 20, 14, 30), datetime(2023, 10, 20, 15, 0)),\n        (datetime(2023, 10, 20, 16, 30), datetime(2023, 10, 20, 17, 0)),\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the earliest free time\ndef find_earliest_meeting_time(schedules):\n    # Work hours\n    work_start = datetime(2023, 10, 16, 9, 0)  # Monday start\n    work_end = datetime(2023, 10, 20, 17, 0)    # Friday end\n\n    # Check each day within the work hours\n    for day in range(5):  # 0 = Monday, 4 = Friday\n        current_day_start = work_start + timedelta(days=day)\n        current_day_end = current_day_start.replace(hour=17, minute=0)\n        \n        # Free slots for each participant\n        free_slots = []\n        \n        for participant, busy_times in schedules.items():\n            free_start = current_day_start\n            for start, end in sorted(busy_times):\n                while free_start + meeting_duration <= start:\n                    free_slots.append(free_start)\n                    free_start += meeting_duration\n                \n                free_start = max(free_start, end)\n                \n            while free_start + meeting_duration <= current_day_end:\n                free_slots.append(free_start)\n                free_start += meeting_duration\n        \n        # Find the earliest common slot\n        for slot in sorted(free_slots):\n            if all(all(not (slot >= start and slot + meeting_duration <= end) for start, end in schedules[participant]) for participant in schedules):\n                return f\"{slot.strftime('%H:%M')}:{(slot + meeting_duration).strftime('%H:%M')}\"\n\n# Get the proposed time\nproposed_time = find_earliest_meeting_time(schedules)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_979"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for Megan and Joan\nmegan_schedule = [\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\njoan_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n]\n\ndef find_meeting_time(meeting_duration, work_start, work_end):\n    # Search for available time slots\n    start_time = work_start\n    while start_time + meeting_duration <= work_end:\n        end_time = start_time + meeting_duration\n        \n        # Check if the time slot is free for both participants\n        is_free = True\n        for start, end in megan_schedule + joan_schedule:\n            if (start_time < end) and (start < end_time):\n                is_free = False\n                break\n        \n        if is_free:\n            return f'{start_time.strftime(\"%H:%M\")}:{end_time.strftime(\"%H:%M\")}'\n        \n        start_time += timedelta(minutes=1)  # Check next minute\n    return None\n\nmeeting_time = find_meeting_time(meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_980"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nvirginia_schedule = [\n    (\"Monday\", \"09:30\", \"10:00\"),\n    (\"Tuesday\", \"14:00\", \"14:30\"),\n    (\"Tuesday\", \"16:30\", \"17:00\"),\n    (\"Wednesday\", \"13:30\", \"14:00\"),\n    (\"Thursday\", \"12:30\", \"13:30\"),\n]\n\njoyce_schedule = [\n    (\"Monday\", \"09:30\", \"13:30\"),\n    (\"Monday\", \"14:00\", \"14:30\"),\n    (\"Monday\", \"15:00\", \"17:00\"),\n    (\"Tuesday\", \"09:00\", \"10:00\"),\n    (\"Tuesday\", \"10:30\", \"11:30\"),\n    (\"Tuesday\", \"12:00\", \"13:00\"),\n    (\"Tuesday\", \"14:00\", \"17:00\"),\n    (\"Wednesday\", \"09:00\", \"10:30\"),\n    (\"Wednesday\", \"11:00\", \"11:30\"),\n    (\"Wednesday\", \"12:00\", \"15:00\"),\n    (\"Wednesday\", \"16:00\", \"17:00\"),\n    (\"Thursday\", \"09:00\", \"17:00\"),\n    (\"Friday\", \"09:00\", \"09:30\"),\n    (\"Friday\", \"10:00\", \"12:00\"),\n    (\"Friday\", \"12:30\", \"16:30\"),\n]\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is available\ndef is_time_slot_available(start_time, end_time, schedule):\n    for day, busy_start, busy_end in schedule:\n        busy_start_dt = datetime.strptime(f\"{day} {busy_start}\", \"%A %H:%M\")\n        busy_end_dt = datetime.strptime(f\"{day} {busy_end}\", \"%A %H:%M\")\n        if start_time < busy_end_dt and end_time > busy_start_dt:\n            return False\n    return True\n\n# Check for available time slots\nfor day in work_days:\n    day_start = datetime.strptime(f\"{day} 09:00\", \"%A %H:%M\")\n    day_end = datetime.strptime(f\"{day} 17:00\", \"%A %H:%M\")\n    \n    # Check for Virginia's preferences\n    if day == \"Tuesday\":\n        continue  # Virginia prefers not to meet on Tuesday\n    if day == \"Wednesday\":\n        # Start checking after 12:30 on Wednesday\n        day_start = datetime.strptime(f\"{day} 12:30\", \"%A %H:%M\")\n    \n    # Iterate through the whole day in half-hour increments\n    current_time = day_start\n    while current_time + meeting_duration <= day_end:\n        end_time = current_time + meeting_duration\n        if is_time_slot_available(current_time, end_time, virginia_schedule) and \\\n           is_time_slot_available(current_time, end_time, joyce_schedule):\n            proposed_time = current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n            print(f\"{proposed_time}\")\n            break\n        current_time += timedelta(minutes=30)\n    else:\n        continue\n    break\n```",
            "count": "calendar_scheduling_example_981"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Participant busy times\n    emma_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    ]\n    \n    jason_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n    \n    # Jason can not meet on these days\n    jason_restrictions = [\n        (3, work_hours_start, work_hours_end),  # Wednesday\n        (4, datetime.strptime(\"14:00\", \"%H:%M\"), work_hours_end),  # Thursday after 14:00\n        (4, work_hours_start, work_hours_end),  # Friday\n    ]\n    \n    meeting_duration = timedelta(minutes=30)\n    \n    # Find free slot for a meeting\n    def is_time_free(start, end, busy_times):\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end and end > busy_start):\n                return False\n        return True\n\n    for day in range(5):  # Monday to Friday\n        # Check for jason's restrictions\n        if any(day == r[0] for r in jason_restrictions):\n            continue\n        \n        # Check from work hours\n        start_time = work_hours_start\n        end_time = start_time + meeting_duration\n        \n        while end_time <= work_hours_end:\n            if is_time_free(start_time, end_time, emma_busy_times) and is_time_free(start_time, end_time, jason_busy_times):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            start_time += timedelta(minutes=1)  # Check next minute\n            end_time = start_time + meeting_duration\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_982"
        },
        {
            "final_program_time": "{9:00:0:10}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(jeffrey_schedule, timothy_schedule, meeting_duration):\n    # Define work hours\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Function to generate busy times from the given schedule\n    def generate_busy_times(schedule):\n        busy_times = []\n        for day, times in schedule.items():\n            for start, end in times:\n                busy_times.append((day, start, end))\n        return busy_times\n    \n    # Creating busy times for each participant\n    jeffrey_busy = generate_busy_times(jeffrey_schedule)\n    timothy_busy = generate_busy_times(timothy_schedule)\n\n    # Merging the busy times\n    all_busy_times = jeffrey_busy + timothy_busy\n\n    # Create a time slot representation\n    slots = []\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        current_time = work_hours_start\n        while current_time < work_hours_end:\n            next_time = current_time + meeting_duration\n            if next_time <= work_hours_end:\n                is_busy = False\n                for b_day, start, end in all_busy_times:\n                    if b_day == day and start <= current_time.time() < end:\n                        is_busy = True\n                        break\n                if not is_busy:\n                    slots.append((day, current_time.time(), next_time.time()))\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    # Assuming there's at least one valid slot, return the first found\n    if slots:\n        meeting_time = slots[0]\n        return f\"{meeting_time[1]}:{meeting_time[2]}\"\n\n# Define the schedules for Jeffrey and Timothy\njeffrey_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:00\", \"%H:%M\").time(), datetime.strptime(\"11:30\", \"%H:%M\").time()),\n                (datetime.strptime(\"12:30\", \"%H:%M\").time(), datetime.strptime(\"13:00\", \"%H:%M\").time()),\n                (datetime.strptime(\"14:30\", \"%H:%M\").time(), datetime.strptime(\"15:00\", \"%H:%M\").time())],\n    \"Tuesday\": [(datetime.strptime(\"12:30\", \"%H:%M\").time(), datetime.strptime(\"13:00\", \"%H:%M\").time()),\n                 (datetime.strptime(\"14:30\", \"%H:%M\").time(), datetime.strptime(\"15:00\", \"%H:%M\").time())],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"10:00\", \"%H:%M\").time()),\n                   (datetime.strptime(\"10:30\", \"%H:%M\").time(), datetime.strptime(\"11:00\", \"%H:%M\").time()),\n                   (datetime.strptime(\"11:30\", \"%H:%M\").time(), datetime.strptime(\"12:00\", \"%H:%M\").time()),\n                   (datetime.strptime(\"13:00\", \"%H:%M\").time(), datetime.strptime(\"13:30\", \"%H:%M\").time()),\n                   (datetime.strptime(\"15:00\", \"%H:%M\").time(), datetime.strptime(\"15:30\", \"%H:%M\").time()),\n                   (datetime.strptime(\"16:00\", \"%H:%M\").time(), datetime.strptime(\"16:30\", \"%H:%M\").time())],\n    \"Thursday\": [(datetime.strptime(\"11:00\", \"%H:%M\").time(), datetime.strptime(\"11:30\", \"%H:%M\").time()),\n                  (datetime.strptime(\"12:30\", \"%H:%M\").time(), datetime.strptime(\"13:00\", \"%H:%M\").time()),\n                  (datetime.strptime(\"15:00\", \"%H:%M\").time(), datetime.strptime(\"16:00\", \"%H:%M\").time()),\n                  (datetime.strptime(\"16:30\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    \"Friday\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"10:00\", \"%H:%M\").time()),\n                (datetime.strptime(\"12:30\", \"%H:%M\").time(), datetime.strptime(\"13:30\", \"%H:%M\").time()),\n                (datetime.strptime(\"14:30\", \"%H:%M\").time(), datetime.strptime(\"15:00\", \"%H:%M\").time())]\n}\n\ntimothy_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"13:00\", \"%H:%M\").time()),\n                (datetime.strptime(\"13:30\", \"%H:%M\").time(), datetime.strptime(\"16:00\", \"%H:%M\").time()),\n                (datetime.strptime(\"16:30\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"12:00\", \"%H:%M\").time()),\n                 (datetime.strptime(\"12:30\", \"%H:%M\").time(), datetime.strptime(\"14:00\", \"%H:%M\").time()),\n                 (datetime.strptime(\"14:30\", \"%H:%M\").time(), datetime.strptime(\"16:00\", \"%H:%M\").time()),\n                 (datetime.strptime(\"16:30\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"10:00\", \"%H:%M\").time()),\n                   (datetime.strptime(\"10:30\", \"%H:%M\").time(), datetime.strptime(\"12:30\", \"%H:%M\").time()),\n                   (datetime.strptime(\"13:00\", \"%H:%M\").time(), datetime.strptime(\"16:30\", \"%H:%M\").time())],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\").time(), datetime.strptime(\"09:30\", \"%H:%M\").time()),\n                  (datetime.strptime(\"10:30\", \"%H:%M\").time(), datetime.strptime(\"16:00\", \"%H:%M\").time())],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\").time(), datetime.strptime(\"11:30\", \"%H:%M\").time()),\n                (datetime.strptime(\"12:00\", \"%H:%M\").time(), datetime.strptime(\"14:00\", \"%H:%M\").time()),\n                (datetime.strptime(\"14:30\", \"%H:%M\").time(), datetime.strptime(\"16:30\", \"%H:%M\").time())]\n}\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find and print the meeting time\nproposed_time = find_meeting_time(jeffrey_schedule, timothy_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_983"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules\njesse_schedule = {\n    \"Tuesday\": [(datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n}\n\nterry_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ]\n}\n\n# Function to find suitable meeting time\ndef find_meeting_time():\n    days_to_check = [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]  # Exclude Monday\n    for day in days_to_check:\n        start_time = work_start\n        while start_time + meeting_duration <= work_end:\n            meeting_end_time = start_time + meeting_duration\n            if (not any(start_time < end and meeting_end_time > start for start, end in jesse_schedule.get(day, [])) and\n                not any(start_time < end and meeting_end_time > start for start, end in terry_schedule.get(day, []))):\n                return f\"{start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n            start_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Output proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_984"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and participants' schedules\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Diane's schedule\ndiane_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\n# Matthew's schedule\nmatthew_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Combine both participants' schedules\ncombined_schedule = diane_schedule + matthew_schedule\n\n# Sort the combined schedule based on start times\ncombined_schedule.sort(key=lambda x: x[0])\n\n# Duration of the meeting\nmeeting_duration = timedelta(hours=1)\n\n# Function to find available slot\ndef find_available_time():\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        available = True\n        for start, end in combined_schedule:\n            if start < current_time + meeting_duration and end > current_time:\n                available = False\n                break\n        if available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next half-hour slot\n    return None\n\n# Get proposed time\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_985"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(emma_schedule, stephen_schedule, meeting_duration, preferences):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a schedule for the week\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    schedule = {day: [] for day in days}\n    \n    # Add Emma's busy times\n    for day, times in emma_schedule.items():\n        for start, end in times:\n            schedule[day].append((start, end))\n    \n    # Add Stephen's busy times\n    for day, times in stephen_schedule.items():\n        for start, end in times:\n            schedule[day].append((start, end))\n\n    # Function to check if two time intervals overlap\n    def overlapping(start1, end1, start2, end2):\n        return start1 < end2 and start2 < end1\n\n    # Finding available times\n    available_times = {}\n    for day in days:\n        available_times[day] = []\n        # Work hours intervals (9:00 to 17:00)\n        available_intervals = [(work_hours_start, work_hours_end)]\n        \n        for start, end in schedule[day]:\n            new_available_intervals = []\n            for available_start, available_end in available_intervals:\n                if overlapping(available_start, available_end, start, end):\n                    if available_start < start:\n                        new_available_intervals.append((available_start, start))\n                    if available_end > end:\n                        new_available_intervals.append((end, available_end))\n                else:\n                    new_available_intervals.append((available_start, available_end))\n            available_intervals = new_available_intervals\n        \n        # Store available intervals\n        available_times[day] = available_intervals\n\n    # Find a suitable time considering preferences\n    for day in days:\n        if (day != \"Monday\" or preferences.get(\"Emma\") != \"no\") and (day != \"Thursday\" or preferences.get(\"Stephen\") != \"no\"):\n            for start, end in available_times[day]:\n                duration = (end - start).total_seconds() / 60\n                if duration >= meeting_duration:\n                    meeting_start = start\n                    meeting_end = start + timedelta(minutes=meeting_duration)\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Sample schedules\nemma_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nstephen_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_duration = 30  # in minutes\npreferences = {\"Emma\": \"no\", \"Stephen\": \"no\"}\n\nresult = find_meeting_time(emma_schedule, stephen_schedule, meeting_duration, preferences)\nprint(result)\n```",
            "count": "calendar_scheduling_example_986"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nshirley_schedule = {\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))]\n}\n\ntyler_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    days = [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]  # Exclude Monday\n    for day in days:\n        available_start = work_hours_start\n        # Get all busy times for both participants on that day\n        busy_times = sorted(shirley_schedule.get(day, []) + tyler_schedule.get(day, []))\n\n        for start, end in busy_times:\n            # Check if there's enough space before the next scheduled meeting or end of work hours\n            if available_start + meeting_duration <= start:\n                return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n            # Move the available start time to the end of this meeting\n            available_start = max(available_start, end)\n\n        # Check at the end of the day\n        if available_start + meeting_duration <= work_hours_end:\n            return f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\"\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_987"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef available_time_slots(kathryn_schedule, dorothy_schedule, work_hours, meeting_duration):\n    # convert times from string to datetime objects\n    work_start = datetime.strptime(work_hours[0], \"%H:%M\")\n    work_end = datetime.strptime(work_hours[1], \"%H:%M\")\n    \n    # convert meeting duration to timedelta\n    meeting_duration = timedelta(hours=meeting_duration)\n\n    # Create a list of all time slots in the work hours\n    time_slots = []\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # check every 30 minutes\n\n    # Find available time slot for both participants\n    for start_time in time_slots:\n        end_time = start_time + meeting_duration\n        if (not any(start_time < end < end_time for start, end in kathryn_schedule)) and \\\n           (not any(start_time < end < end_time for start, end in dorothy_schedule)):\n            return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\n# Kathryn's schedule in (start_time, end_time) format\nkathryn_schedule = [\n    (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n    (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 13, 30)),\n    (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 17, 0)),\n    (datetime(2023, 10, 3, 9, 0), datetime(2023, 10, 3, 9, 30)),\n    (datetime(2023, 10, 3, 10, 0), datetime(2023, 10, 3, 10, 30)),\n    (datetime(2023, 10, 3, 14, 30), datetime(2023, 10, 3, 15, 0)),\n    (datetime(2023, 10, 3, 15, 30), datetime(2023, 10, 3, 16, 0)),\n    (datetime(2023, 10, 4, 9, 30), datetime(2023, 10, 4, 10, 0)),\n    (datetime(2023, 10, 4, 12, 30), datetime(2023, 10, 4, 13, 0)),\n    (datetime(2023, 10, 4, 14, 0), datetime(2023, 10, 4, 14, 30)),\n    (datetime(2023, 10, 4, 15, 30), datetime(2023, 10, 4, 16, 0)),\n    (datetime(2023, 10, 4, 16, 30), datetime(2023, 10, 4, 17, 0)),\n    (datetime(2023, 10, 6, 10, 30), datetime(2023, 10, 6, 11, 0)),\n    (datetime(2023, 10, 6, 12, 0), datetime(2023, 10, 6, 13, 0)),\n    (datetime(2023, 10, 6, 14, 0), datetime(2023, 10, 6, 14, 30)),\n    (datetime(2023, 10, 6, 16, 0), datetime(2023, 10, 6, 17, 0)),\n]\n\n# Dorothy's schedule in (start_time, end_time) format\ndorothy_schedule = [\n    (datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 30)),\n    (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 17, 0)),\n    (datetime(2023, 10, 3, 9, 0), datetime(2023, 10, 3, 9, 30)),\n    (datetime(2023, 10, 3, 10, 0), datetime(2023, 10, 3, 11, 30)),\n    (datetime(2023, 10, 3, 12, 0), datetime(2023, 10, 3, 13, 30)),\n    (datetime(2023, 10, 3, 14, 0), datetime(2023, 10, 3, 14, 30)),\n    (datetime(2023, 10, 3, 15, 0), datetime(2023, 10, 3, 15, 30)),\n    (datetime(2023, 10, 3, 16, 0), datetime(2023, 10, 3, 17, 0)),\n    (datetime(2023, 10, 4, 9, 0), datetime(2023, 10, 4, 11, 0)),\n    (datetime(2023, 10, 4, 11, 30), datetime(2023, 10, 4, 14, 30)),\n    (datetime(2023, 10, 4, 15, 0), datetime(2023, 10, 4, 15, 30)),\n    (datetime(2023, 10, 4, 16, 0), datetime(2023, 10, 4, 17, 0)),\n    (datetime(2023, 10, 6, 9, 0), datetime(2023, 10, 6, 10, 30)),\n    (datetime(2023, 10, 6, 11, 0), datetime(2023, 10, 6, 11, 30)),\n    (datetime(2023, 10, 6, 12, 0), datetime(2023, 10, 6, 14, 30)),\n    (datetime(2023, 10, 6, 15, 0), datetime(2023, 10, 6, 17, 0)),\n]\n\nwork_hours = [\"09:00\", \"17:00\"]\nmeeting_duration = 1  # 1 hour\n\n# Get a proposed time for the meeting\nproposed_time = available_time_slots(kathryn_schedule, dorothy_schedule, work_hours, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_988"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the availability of each participant\njeffrey_busy_times = [\n    (\"Monday\", \"11:30\", \"12:00\"),\n    (\"Monday\", \"15:00\", \"15:30\"),\n    (\"Wednesday\", \"10:30\", \"11:00\"),\n    (\"Wednesday\", \"13:30\", \"14:00\"),\n    (\"Thursday\", \"09:30\", \"10:30\"),\n    (\"Friday\", \"10:00\", \"10:30\"),\n    (\"Friday\", \"11:00\", \"11:30\"),\n]\n\nscott_busy_times = [\n    (\"Monday\", \"09:00\", \"13:00\"),\n    (\"Monday\", \"13:30\", \"17:00\"),\n    (\"Tuesday\", \"09:30\", \"11:00\"),\n    (\"Tuesday\", \"11:30\", \"12:30\"),\n    (\"Tuesday\", \"13:00\", \"13:30\"),\n    (\"Tuesday\", \"15:00\", \"15:30\"),\n    (\"Tuesday\", \"16:00\", \"16:30\"),\n    (\"Wednesday\", \"09:00\", \"17:00\"),\n    (\"Thursday\", \"09:00\", \"12:30\"),\n    (\"Thursday\", \"13:00\", \"14:00\"),\n    (\"Thursday\", \"14:30\", \"17:00\"),\n    (\"Friday\", \"09:00\", \"09:30\"),\n    (\"Friday\", \"10:00\", \"12:00\"),\n    (\"Friday\", \"13:00\", \"14:00\"),\n    (\"Friday\", \"15:30\", \"16:00\"),\n    (\"Friday\", \"16:30\", \"17:00\"),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a proposed time is available\ndef is_time_available(day, start_time, duration):\n    end_time = (datetime.strptime(start_time, \"%H:%M\") + duration).time()\n    for busy_day, busy_start, busy_end in jeffrey_busy_times + scott_busy_times:\n        if busy_day == day:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Generate availability slots for each weekday\ndef find_earliest_available_time():\n    weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    for day in weekdays:\n        for hour in range(9, 17):\n            for minute in [0, 30]:  # Check every half hour\n                proposed_time = f\"{hour:02}:{minute:02}\"\n                if is_time_available(day, proposed_time, meeting_duration):\n                    return f\"{proposed_time}:{(datetime.strptime(proposed_time, '%H:%M') + meeting_duration).time().strftime('%H:%M')}\"\n\n# Calculate and output the proposed time\nproposed_time = find_earliest_available_time()\nprint(f\"{{{proposed_time}}}\")\n```",
            "count": "calendar_scheduling_example_989"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(sean_schedule, michelle_schedule, meeting_duration):\n    work_hours = [(9, 17)]  # Work hours from 9:00 to 17:00\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    \n    # Function to check if a time slot is free for both participants\n    def is_time_free(start_time, end_time):\n        for busy_start, busy_end in sean_schedule:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n        for busy_start, busy_end in michelle_schedule:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n        return True\n\n    # Generate available slots\n    for day in days:\n        for hour in range(work_hours[0][0], work_hours[0][1]):\n            for minute in [0, 30]:\n                start_time = datetime.strptime(f\"{day} {hour}:{minute:02d}\", \"%A %H:%M\")\n                end_time = start_time + timedelta(minutes=meeting_duration)\n                \n                # Check if the start and end times are within work hours and available\n                if end_time.time() <= datetime.strptime(\"17:00\", \"%H:%M\").time() and is_time_free(start_time, end_time):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n# Schedules in (start_time, end_time) tuples\nsean_schedule = [\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 11:00\", \"%A %H:%M\")),\n]\n\nmichelle_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30  # Meeting duration in minutes\nproposed_time = find_meeting_time(sean_schedule, michelle_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_990"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration in minutes\nmeeting_duration = 30\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define schedules for Diana and Andrea\ndiana_busy_slots = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n]\n\nandrea_busy_slots = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\ndef is_time_available(start, end, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + timedelta(minutes=meeting_duration) <= work_end:\n        meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n        if (is_time_available(current_time, meeting_end_time, diana_busy_slots) and\n            is_time_available(current_time, meeting_end_time, andrea_busy_slots)):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n        \nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_991"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\r\n\r\n# Define work hours and meeting duration\r\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\r\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\r\nMEETING_DURATION = timedelta(minutes=30)\r\n\r\n# Define existing schedules for Walter and Grace\r\nwalter_schedule = [\r\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\r\n]\r\n\r\ngrace_schedule = [\r\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\r\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\r\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\r\n]\r\n\r\n# Function to find a suitable meeting time\r\ndef find_meeting_time(walter_schedule, grace_schedule):\r\n    # Merge both schedules into one\r\n    combined_schedule = walter_schedule + grace_schedule\r\n    combined_schedule.sort(key=lambda x: x[0])  # Sort by start time\r\n    \r\n    # Check each time slot in work hours to find an available 30 minute slot\r\n    current_time = WORK_START\r\n    while current_time + MEETING_DURATION <= WORK_END:\r\n        meeting_end_time = current_time + MEETING_DURATION\r\n        \r\n        # Check if the meeting time overlaps with any scheduled meetings\r\n        if all(not (start < meeting_end_time and end > current_time) for start, end in combined_schedule):\r\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\r\n        \r\n        current_time += timedelta(minutes=1)  # Increment the time by 1 minute\r\n\r\n    return None  # If no time found (shouldn't happen according to the task)\r\n\r\n# Call the function to find meeting time\r\nproposed_time = find_meeting_time(walter_schedule, grace_schedule)\r\nprint(proposed_time)  # Output format HH:MM:HH:MM\r\n```",
            "count": "calendar_scheduling_example_992"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nworking_hours = [(9, 0), (17, 0)]  # 9:00 to 17:00\nmeeting_duration = timedelta(hours=1)  # 1 hour\n\n# Existing schedules\nwilliam_busy = {\n    'Monday': [(10, 0, 10, 30), (11, 0, 11, 30), (12, 30, 13, 0)],\n    'Tuesday': [(14, 0, 14, 30), (15, 30, 16, 0)],\n    'Thursday': [(9, 30, 10, 0), (13, 0, 14, 0), (15, 0, 15, 30)],\n    'Friday': [(11, 0, 11, 30)],\n}\n\nnancy_busy = {\n    'Monday': [(10, 0, 10, 30), (12, 0, 12, 30), (14, 30, 15, 0), (15, 30, 16, 0)],\n    'Tuesday': [(9, 30, 10, 0), (11, 0, 12, 0), (13, 0, 13, 30), (14, 0, 15, 0), (15, 30, 16, 0)],\n    'Wednesday': [(9, 30, 10, 30), (11, 0, 12, 30), (14, 0, 14, 30), (15, 0, 15, 30), (16, 30, 17, 0)],\n    'Thursday': [(9, 0, 10, 0), (11, 0, 11, 30), (12, 0, 17, 0)],\n    'Friday': [(9, 0, 9, 30), (10, 0, 11, 30), (12, 0, 13, 0), (14, 0, 14, 30), (15, 0, 15, 30), (16, 0, 17, 0)],\n}\n\n# Convert busy times to datetime objects\ndef create_busy_slots(busy_schedule):\n    busy_slots = {}\n    for day, slots in busy_schedule.items():\n        busy_slots[day] = []\n        for start_h, start_m, end_h, end_m in slots:\n            busy_slots[day].append((datetime(2023, 1, 1, start_h, start_m), \n                                     datetime(2023, 1, 1, end_h, end_m)))\n    return busy_slots\n\nwilliam_busy_slots = create_busy_slots(william_busy)\nnancy_busy_slots = create_busy_slots(nancy_busy)\n\n# Check availability\ndef find_meeting_time():\n    for day in [\"Monday\", \"Wednesday\", \"Thursday\"]:\n        busy_slots = sorted(william_busy_slots.get(day, []) + nancy_busy_slots.get(day, []), \n                            key=lambda x: x[0])\n        \n        # Create time slots based on busy times\n        available_slots = []\n        current_time = datetime(2023, 1, 1, *working_hours[0])\n        \n        for start, end in busy_slots:\n            if current_time + meeting_duration <= start:\n                available_slots.append((current_time, start))\n            current_time = max(current_time, end)\n        \n        # End of work day check\n        if current_time + meeting_duration <= datetime(2023, 1, 1, *working_hours[1]):\n            available_slots.append((current_time, datetime(2023, 1, 1, *working_hours[1])))\n        \n        # Find the earliest available slot\n        for start, end in available_slots:\n            if (end - start) >= meeting_duration:\n                return f\"{start.strftime('%H:%M')}:{(start + meeting_duration).strftime('%H:%M')}\"\n                \nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_993"
        },
        {
            "final_program_time": "{16:00:0:16}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime('09:00', '%H:%M').time()\nworking_hours_end = datetime.strptime('17:00', '%H:%M').time()\n\n# Existing schedules\nkelly_schedule = {\n    'Monday': [(datetime.strptime('09:30', '%H:%M').time(), datetime.strptime('10:00', '%H:%M').time()),\n               (datetime.strptime('11:30', '%H:%M').time(), datetime.strptime('12:00', '%H:%M').time()),\n               (datetime.strptime('14:00', '%H:%M').time(), datetime.strptime('14:30', '%H:%M').time()),\n               (datetime.strptime('15:00', '%H:%M').time(), datetime.strptime('15:30', '%H:%M').time())],\n    \n    'Tuesday': [(datetime.strptime('09:30', '%H:%M').time(), datetime.strptime('10:00', '%H:%M').time()),\n                (datetime.strptime('10:30', '%H:%M').time(), datetime.strptime('11:00', '%H:%M').time()),\n                (datetime.strptime('14:00', '%H:%M').time(), datetime.strptime('14:30', '%H:%M').time())],\n\n    'Wednesday': [(datetime.strptime('10:30', '%H:%M').time(), datetime.strptime('12:00', '%H:%M').time()),\n                  (datetime.strptime('13:00', '%H:%M').time(), datetime.strptime('13:30', '%H:%M').time()),\n                  (datetime.strptime('14:00', '%H:%M').time(), datetime.strptime('14:30', '%H:%M').time()),\n                  (datetime.strptime('15:30', '%H:%M').time(), datetime.strptime('16:00', '%H:%M').time())],\n    \n    'Thursday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('10:30', '%H:%M').time()),\n                 (datetime.strptime('11:30', '%H:%M').time(), datetime.strptime('12:00', '%H:%M').time()),\n                 (datetime.strptime('14:30', '%H:%M').time(), datetime.strptime('15:00', '%H:%M').time()),\n                 (datetime.strptime('15:30', '%H:%M').time(), datetime.strptime('16:00', '%H:%M').time())],\n    \n    'Friday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('09:30', '%H:%M').time()),\n               (datetime.strptime('14:30', '%H:%M').time(), datetime.strptime('15:00', '%H:%M').time()),\n               (datetime.strptime('16:30', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())]\n}\n\nnathan_schedule = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('09:30', '%H:%M').time()),\n               (datetime.strptime('10:00', '%H:%M').time(), datetime.strptime('11:30', '%H:%M').time()),\n               (datetime.strptime('13:00', '%H:%M').time(), datetime.strptime('15:30', '%H:%M').time()),\n               (datetime.strptime('16:00', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n               \n    'Tuesday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n    \n    'Wednesday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('16:00', '%H:%M').time()),\n                  (datetime.strptime('16:30', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n    \n    'Thursday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())],\n    \n    'Friday': [(datetime.strptime('09:00', '%H:%M').time(), datetime.strptime('17:00', '%H:%M').time())]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find a suitable time\ndef find_meeting_time():\n    for day in ['Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n        # Set the time pointer to the start of the working hours\n        start_time = datetime.combine(datetime.today(), working_hours_start)\n        end_time = datetime.combine(datetime.today(), working_hours_end)\n\n        busy_times = kelly_schedule[day] + nathan_schedule[day]\n        busy_times.sort()\n\n        # Create a list of available time slots\n        available_start = start_time\n\n        for busy_start, busy_end in busy_times:\n            busy_start = datetime.combine(datetime.today(), busy_start)\n            busy_end = datetime.combine(datetime.today(), busy_end)\n\n            if available_start + meeting_duration <= busy_start:\n                return f\"{available_start.time()}:{(available_start + meeting_duration).time()}\"\n            \n            # Move available start time to end of busy schedule\n            if available_start < busy_end:\n                available_start = busy_end\n        \n        # Check if there's time after the last busy period\n        if available_start + meeting_duration <= end_time:\n            return f\"{available_start.time()}:{(available_start + meeting_duration).time()}\"\n    \n    return None\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_994"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and the duration of the meeting\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Bruce's schedule: (day, start_time, end_time)\nbruce_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Heather's schedule: (day, start_time, end_time)\nheather_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        available_slots = []\n        current_time = work_start\n\n        # Collect busy slots for both Bruce and Heather\n        busy_slots = bruce_schedule[day] + heather_schedule[day]\n\n        # Check availability in the time slots\n        while current_time + meeting_duration <= work_end:\n            # Check if current_time conflicts with any busy slots\n            is_busy = any(start < current_time + meeting_duration and end > current_time for start, end in busy_slots)\n            if not is_busy:\n                available_slots.append(current_time)\n            current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n        # Filter out preferred days for Bruce and Heather\n        if day == \"Wednesday\" and available_slots:\n            continue\n        if day == \"Monday\" and len(available_slots) > 0 and available_slots[0] < datetime.strptime(\"12:30\", \"%H:%M\"):\n            continue\n            \n        if available_slots:\n            meeting_time = available_slots[0]  # Pick the first available slot\n            return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + meeting_duration).strftime('%H:%M')}\"\n\n# Output the proposed time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_995"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Schedule blocks for Willie\nwillie_schedule = {\n    \"Monday\": [(start_time, start_time.replace(hour=13)), (start_time.replace(hour=14), end_time)],\n    \"Tuesday\": [(start_time, end_time)],\n    \"Wednesday\": [(start_time, start_time.replace(hour=11, minute=30)), \n                  (start_time.replace(hour=12), end_time)],\n    \"Thursday\": [(start_time, start_time.replace(hour=16)),\n                 (start_time.replace(hour=16, minute=30), end_time)],\n    \"Friday\": [(start_time, end_time)]\n}\n\n# Find a suitable time\ndef find_meeting_time(willie_schedule, meeting_duration):\n    for day, blocks in willie_schedule.items():\n        last_end_time = start_time\n        for start, end in blocks:\n            available_start = last_end_time\n            while available_start + meeting_duration <= end:\n                # Check if meeting fits\n                if available_start >= start:\n                    meeting_start = available_start\n                    meeting_end = meeting_start + meeting_duration\n                    return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n                available_start += timedelta(minutes=30)  # Check every 30 minutes\n            last_end_time = end\n    return None\n\nmeeting_time = find_meeting_time(willie_schedule, meeting_duration)\nif meeting_time:\n    print(f'{{{meeting_time[0]}:{meeting_time[1]}}}')\n```",
            "count": "calendar_scheduling_example_996"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nstart_hour = 9\nend_hour = 17\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules for each participant (time blocked)\nashley_busy_times = {\n    'Monday': [\n        ('09:30', '10:00'), ('12:00', '12:30'), ('13:00', '13:30'), ('16:00', '17:00')\n    ],\n    'Tuesday': [\n        ('09:00', '09:30'), ('10:30', '13:00'), ('14:30', '16:00')\n    ],\n    'Wednesday': [\n        ('09:00', '10:00'), ('10:30', '11:30'), ('13:00', '14:00'), ('16:30', '17:00')\n    ],\n    'Thursday': [\n        ('09:00', '09:30'), ('10:30', '11:00'), ('11:30', '14:30'), ('15:00', '16:00'), ('16:30', '17:00')\n    ],\n    'Friday': [\n        ('09:30', '12:00'), ('13:30', '14:30'), ('15:00', '15:30')\n    ]\n}\n\n# Convert busy times to datetime objects\ndef convert_times(busy_times):\n    converted = []\n    for start, end in busy_times:\n        start_dt = datetime.strptime(start, '%H:%M')\n        end_dt = datetime.strptime(end, '%H:%M')\n        converted.append((start_dt, end_dt))\n    return converted\n\n# Check for available time slots\ndef find_meeting_slot():\n    for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n        busy_times = convert_times(ashley_busy_times[day])\n        \n        current_time = datetime(year=2023, month=10, day=2, hour=start_hour)  # Set a date, using Monday of the week\n        end_time = datetime(year=2023, month=10, day=2, hour=end_hour)\n\n        while current_time + meeting_duration <= end_time:\n            # Check if the current time slot is free\n            free_slot = True\n            for busy_start, busy_end in busy_times:\n                if current_time < busy_end and current_time + meeting_duration > busy_start:\n                    free_slot = False\n                    break\n            \n            if free_slot:\n                return current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M')\n            \n            current_time += timedelta(minutes=1) # Check the next minute\n\n# Get the meeting time in the required format\nstart_meeting, end_meeting = find_meeting_slot()\nprint(f\"{start_meeting}:{end_meeting}\")\n```",
            "count": "calendar_scheduling_example_997"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\n# Define Amanda's busy schedule\namanda_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Friday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    ],\n}\n\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time(schedule, duration):\n    for day, busy_slots in schedule.items():\n        current_time = work_hours[0]\n        \n        for busy_start, busy_end in busy_slots:\n            while current_time + duration <= busy_start:\n                if current_time >= work_hours[0] and current_time + duration <= work_hours[1]:\n                    return current_time, current_time + duration\n                current_time += timedelta(minutes=30)  # Increment by 30 minutes\n            \n            current_time = busy_end  # Move to the end of the busy block\n\n        # Check remaining time after the last busy slot of the day\n        if current_time + duration <= work_hours[1]:\n            return current_time, current_time + duration\n        \n    return None\n\nmeeting_start, meeting_end = find_meeting_time(amanda_schedule, meeting_duration)\nprint(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_998"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef get_busy_slots(schedule):\n    busy_slots = []\n    for day, slots in schedule.items():\n        for start, end in slots:\n            busy_slots.append((day, start, end))\n    return busy_slots\n\ndef find_available_time(busy_slots, meeting_duration):\n    work_hours = {\n        'Monday': (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        'Tuesday': (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        'Wednesday': (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        'Thursday': (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        'Friday': (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    }\n\n    for day, (start_of_day, end_of_day) in work_hours.items():\n        current_time = start_of_day\n        while current_time + meeting_duration <= end_of_day:\n            # Check if current time is busy\n            busy = any(slot[0] == day and current_time < slot[2] and (current_time + meeting_duration) > slot[1] for slot in busy_slots)\n            if not busy:\n                return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n    return None\n\nmeeting_duration = timedelta(minutes=30)\n\njames_schedule = {\n    'Monday': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Friday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\nbetty_schedule = {\n    'Monday': [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Thursday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Friday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\nbusy_slots = get_busy_slots(james_schedule) + get_busy_slots(betty_schedule)\nstart_time, end_time = find_available_time(busy_slots, meeting_duration)\n\nprint(f\"{{{start_time}:{end_time}}}\")\n```",
            "count": "calendar_scheduling_example_999"
        }
    ]
}