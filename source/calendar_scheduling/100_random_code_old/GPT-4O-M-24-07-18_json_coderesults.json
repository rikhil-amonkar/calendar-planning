{
    "0shot": [
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(james_busy, john_busy, meeting_duration):\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n\n    # Create a list of busy slots for both participants\n    busy_slots = []\n    for start, end in james_busy:\n        busy_slots.append((start, end))\n    for start, end in john_busy:\n        busy_slots.append((start, end))\n\n    # Sort the busy slots\n    busy_slots.sort()\n\n    # Merge the busy slots\n    merged_slots = []\n    for start, end in busy_slots:\n        if not merged_slots or merged_slots[-1][1] < start:\n            merged_slots.append((start, end))\n        else:\n            merged_slots[-1] = (merged_slots[-1][0], max(merged_slots[-1][1], end))\n\n    # Find free slots\n    free_slots = []\n    last_end = work_start\n\n    for start, end in merged_slots:\n        if last_end + meeting_duration <= start:\n            free_slots.append((last_end, start))\n        last_end = end\n\n    # Check for free time after the last busy slot\n    if last_end + meeting_duration <= work_end:\n        free_slots.append((last_end, work_end))\n\n    # Return the first available time that works\n    if free_slots:\n        start_time = free_slots[0][0]\n        end_time = start_time + meeting_duration\n        return f\"{start_time // 60:02}:{start_time % 60:02}:{end_time // 60:02}:{end_time % 60:02}\"\n    return None\n\njames_busy = [(11 * 60 + 30, 12 * 60), (14 * 60 + 30, 15 * 60)]\njohn_busy = [(9 * 60 + 30, 11 * 60), (11 * 60 + 30, 12 * 60), (12 * 60 + 30, 13 * 60 + 30), (14 * 60 + 30, 16 * 60 + 30)]\nmeeting_duration = 60  # Meeting duration in minutes\n\nprint(find_meeting_time(james_busy, john_busy, meeting_duration))\n```",
            "count": "calendar_scheduling_example_543"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, deborah_schedule, albert_schedule, duration):\n    # Create a list of free time slots for Albert\n    free_slots = []\n    \n    current_time = start_time\n    while current_time < end_time:\n        if current_time.time() < albert_schedule[0].time() or current_time.time() > albert_schedule[-1].time():\n            free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)\n    \n    # Check available times for the meeting\n    for start in free_slots:\n        if all(not(albert_schedule[i].time() <= start.time() <= albert_schedule[i + 1].time()) for i in range(len(albert_schedule) - 1)):\n            possible_meeting_time = start\n            meeting_end_time = start + timedelta(minutes=duration)\n            if meeting_end_time.time() <= end_time.time():\n                return f\"{start.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n    \n    return \"No available slot\"\n\n# Meeting requirements\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\ndeborah_schedule = []\nalbert_schedule = [datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                  datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"),\n                  datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")]\nduration = 30  # minutes\n\nproposed_time = find_meeting_time(start_time, end_time, deborah_schedule, albert_schedule, duration)\nprint(proposed_time)  # This will show the proposed meeting time\n```",
            "count": "calendar_scheduling_example_544"
        },
        {
            "final_program_time": "{13:00:13:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the blocked times of each participant\nschedules = {\n    \"Doris\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Theresa\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Christian\": [],\n    \"Terry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Carolyn\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kyle\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to find available time slots\ndef find_available_slot(schedules, work_start, work_end, meeting_duration):\n    blocked_times = []\n    \n    for participant, blocks in schedules.items():\n        for start, end in blocks:\n            # Combine with work hours\n            if start < work_start:\n                start = work_start\n            if end > work_end:\n                end = work_end\n            blocked_times.append((start, end))\n    \n    # Sort blocked times\n    blocked_times.sort()\n    \n    # Check for available slots\n    last_end = work_start\n    for start, end in blocked_times:\n        if last_end + meeting_duration <= start:\n            return last_end, last_end + meeting_duration\n        last_end = max(last_end, end)\n    \n    # Finally check if there's time after the last blocked slot\n    if last_end + meeting_duration <= work_end:\n        return last_end, last_end + meeting_duration\n    \n    return None\n\n# Finding available slot\nslot = find_available_slot(schedules, work_start, work_end, meeting_duration)\n\nif slot:\n    start_time, end_time = slot\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available slot found\")\n```",
            "count": "calendar_scheduling_example_398"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Constraints\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Harold's schedule\nharold_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n# Blocking specific times for Tuesday\nharold_schedule.extend([\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n])\n\n# Function to check if time slot is free\ndef is_free(start, end, schedule):\n    for (busy_start, busy_end) in schedule:\n        if not (end <= busy_start or start >= busy_end):\n            return False\n    return True\n\n# Find potential meeting time\ndef find_meeting_time():\n    # Check Monday\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        if is_free(current_time, current_time + meeting_duration, harold_schedule[:2]):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n    # Check Tuesday after 14:30\n    current_time = datetime.strptime(\"14:30\", \"%H:%M\")\n    while current_time + meeting_duration <= work_hours_end:\n        if is_free(current_time, current_time + meeting_duration, harold_schedule[2:]):\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=30)\n\n# Output proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_625"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(jack_schedule, charlotte_schedule, meeting_duration):\n    # Work hours\n    start_time = 9 * 60  # 9:00 in minutes\n    end_time = 17 * 60    # 17:00 in minutes\n\n    # Create a list of busy times\n    busy_times = []\n    busy_times.extend(jack_schedule)\n    busy_times.extend(charlotte_schedule)\n\n    # Mark busy time slots\n    busy_slots = [False] * (end_time - start_time)\n    for start, end in busy_times:\n        for i in range(max(start_time, start), min(end_time, end)):\n            busy_slots[i - start_time] = True\n\n    # Find a suitable time slot for the meeting\n    for i in range(len(busy_slots) - meeting_duration + 1):\n        if not any(busy_slots[i:i+meeting_duration]):\n            meeting_start = start_time + i\n            meeting_end = meeting_start + meeting_duration\n            return f'{meeting_start // 60:02}:{meeting_start % 60:02}:{meeting_end // 60:02}:{meeting_end % 60:02}'\n\n# Schedules (start, end) in minutes\njack_schedule = [(9 * 60 + 30, 10 * 60 + 30), (11 * 60, 11 * 60 + 30), \n                 (12 * 60 + 30, 13 * 60), (14 * 60, 14 * 60 + 30), \n                 (16 * 60, 16 * 60 + 30)]\n\ncharlotte_schedule = [(9 * 60 + 30, 10 * 60), (10 * 60 + 30, 12 * 60), \n                      (12 * 60 + 30, 13 * 60 + 30), (14 * 60, 16 * 60)]\n\nmeeting_duration = 30  # in minutes\n\n# Find the meeting time\nmeeting_time = find_meeting_time(jack_schedule, charlotte_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_502"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(nancy_schedule, jose_schedule, meeting_duration, days):\n    for day in days:\n        nancy_busy_times = nancy_schedule[day]\n        jose_busy_times = jose_schedule[day]\n\n        # Merge busy times and find free time slots\n        all_busy_times = nancy_busy_times + jose_busy_times\n        all_busy_times.sort()\n        \n        # Calculate free time slots\n        free_slots = []\n        start_of_day = datetime.strptime('09:00', '%H:%M')\n        end_of_day = datetime.strptime('17:00', '%H:%M')\n\n        last_end = start_of_day\n        \n        for busy_start, busy_end in all_busy_times:\n            if last_end < busy_start:\n                free_slots.append((last_end, busy_start))\n            last_end = max(last_end, busy_end)\n        \n        if last_end < end_of_day:\n            free_slots.append((last_end, end_of_day))\n\n        # Check for suitable meeting slot\n        for start, end in free_slots:\n            if (end - start) >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n    return None\n\n# Existing schedules\nnancy_schedule = {\n    'Monday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n               (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n}\n\njose_schedule = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                  (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Possible days\ndays = ['Monday', 'Tuesday', 'Wednesday']\n\n# Find and output meeting time\nmeeting_time = find_meeting_time(nancy_schedule, jose_schedule, meeting_duration, days)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_798"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules (busy times)\ncheryl_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n]\n\nkyle_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if time slot is free for both\ndef is_free(start, end):\n    for busy_start, busy_end in cheryl_busy:\n        if start < busy_end and end > busy_start:\n            return False\n    for busy_start, busy_end in kyle_busy:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find a suitable time on Monday or Tuesday\ndef find_meeting_time():\n    day = [\"Monday\", \"Tuesday\"]\n    for d in day:\n        current_start = work_start\n        while current_start + meeting_duration <= work_end:\n            current_end = current_start + meeting_duration\n            if is_free(current_start, current_end):\n                return f\"{current_start.strftime('%H:%M')}:{current_end.strftime('%H:%M')}\"\n            current_start += timedelta(minutes=30)  # Check next half-hour slot\n\n# Print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_710"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and durations\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the busy times for each participant\nschedules = {\n    \"Anthony\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n  \n    \"Pamela\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n  \n    \"Zachary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Aggregate all busy times\nbusy_times = []\nfor participant, times in schedules.items():\n    busy_times.extend(times)\n\n# Sort busy times\nbusy_times.sort(key=lambda x: x[0])\n\n# Find a suitable meeting time\ncurrent_start = work_start\n\nfor start, end in busy_times:\n    if current_start + meeting_duration <= start:\n        # Check if there's enough time for the meeting\n        if current_start + meeting_duration <= work_end:\n            print(f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\")\n            break\n    # Move the current start time to the end of the busy period\n    current_start = max(current_start, end)\n\n# Check if there's time left after the last busy period\nif current_start + meeting_duration <= work_end:\n    print(f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Tyler\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Stephanie\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Hannah\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Joe\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Diana\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Deborah\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Assuming the meeting duration is 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Find the common free slots\ndef find_common_free_time(schedules, meeting_duration):\n    common_time_slots = []\n    start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Create a list of all busy times\n    busy_times = []\n    for times in schedules.values():\n        for start, end in times:\n            busy_times.append((start, end))\n    \n    # Merge busy times to find free slots\n    busy_times.sort()\n    merged_busy_times = []\n    current_start, current_end = busy_times[0]\n\n    for start, end in busy_times[1:]:\n        if start <= current_end:\n            current_end = max(current_end, end)\n        else:\n            merged_busy_times.append((current_start, current_end))\n            current_start, current_end = start, end\n    merged_busy_times.append((current_start, current_end))\n\n    # Now find free slots between busy times\n    previous_end = start_of_day\n    for start, end in merged_busy_times:\n        if previous_end + meeting_duration <= start:\n            common_time_slots.append((previous_end, start))\n        previous_end = end\n\n    # Check free time at the end of the day\n    if previous_end + meeting_duration <= end_of_day:\n        common_time_slots.append((previous_end, end_of_day))\n\n    return common_time_slots\n\nfree_time_slots = find_common_free_time(schedules, meeting_duration)\n\n# Propose the first available time slot\nif free_time_slots:\n    proposed_time = free_time_slots[0][0]\n    meeting_start = proposed_time.strftime(\"%H:%M\")\n    meeting_end = (proposed_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{{{meeting_start}:{meeting_end}}}\")\n```",
            "count": "calendar_scheduling_example_493"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Nicole's existing schedule\nnicole_availability = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                       (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Nicole's preference\nnicole_preference_start = datetime.strptime(\"16:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Check for available slots after Nicole's preference\n    start_time = nicole_preference_start\n    while start_time + meeting_duration <= work_end:\n        # Check if the proposed time clashes with Nicole's schedule\n        clash = False\n        for start, end in nicole_availability:\n            if start_time < end and start_time + meeting_duration > start:\n                clash = True\n                break\n        \n        # If no clash, return the proposed time\n        if not clash:\n            return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Move to the next half hour slot\n        start_time += timedelta(minutes=30)\n    \n    return \"No available time\"\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_548"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\n# Import necessary libraries\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\nparticipants_schedules = {\n    \"Megan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Christine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Gabriel\": [],\n    \"Sara\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Bruce\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kathryn\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Billy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n}\n\n# Function to find free time slots for all participants\ndef find_free_time_slots(participants_schedules, meeting_duration):\n    busy_times = []\n\n    # Create a combined list of busy times from all participants\n    for schedule in participants_schedules.values():\n        busy_times.extend(schedule)\n\n    free_slots = []\n    previous_end = work_start\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Determine free time slots\n    for start, end in busy_times:\n        if previous_end < start:\n            free_slots.append((previous_end, start))\n        previous_end = max(previous_end, end)\n\n    if previous_end < work_end:\n        free_slots.append((previous_end, work_end))\n\n    # Check for meeting duration in free slots\n    available_slots = []\n    for start, end in free_slots:\n        if (end - start) >= meeting_duration:\n            available_slots.append((start, start + meeting_duration))\n\n    return available_slots\n\n# Specify meeting duration (30 minutes)\nmeeting_duration = timedelta(minutes=30)\n\n# Get available time slots\navailable_slots = find_free_time_slots(participants_schedules, meeting_duration)\n\n# Output the first available time slot\nif available_slots:\n    start_time, end_time = available_slots[0]\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available slots.\")\n```",
            "count": "calendar_scheduling_example_446"
        },
        {
            "final_program_time": "{16:30:16:30}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\namy_busy = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n]\n\npamela_busy = {\n    'Monday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Wednesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is available\ndef is_available(start, end, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if (start < busy_end and end > busy_start):\n            return False\n    return True\n\n# Find a suitable time for the meeting\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        if day == 'Monday' and pamela_busy[day] == [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                                                       (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]:\n            continue  # Avoid more meetings on Monday\n        \n        start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n        \n        while start_time + meeting_duration <= end_time:\n            if day == 'Monday':\n                if is_available(start_time, start_time + meeting_duration, pamela_busy['Monday']) and \\\n                   is_available(start_time, start_time + meeting_duration, amy_busy):\n                    return start_time.strftime(\"%H:%M:%H:%M\")\n            elif day == 'Tuesday':\n                if start_time >= datetime.strptime(\"16:00\", \"%H:%M\"):  # Avoid before 16:00\n                    if is_available(start_time, start_time + meeting_duration, pamela_busy['Tuesday']) and \\\n                       is_available(start_time, start_time + meeting_duration, amy_busy):\n                        return start_time.strftime(\"%H:%M:%H:%M\")\n            elif day == 'Wednesday':\n                if start_time >= datetime.strptime(\"16:00\", \"%H:%M\"):  # Avoid before 16:00\n                    if is_available(start_time, start_time + meeting_duration, pamela_busy['Wednesday']) and \\\n                       is_available(start_time, start_time + meeting_duration, amy_busy):\n                        return start_time.strftime(\"%H:%M:%H:%M\")\n            start_time += timedelta(minutes=30)\n    \n    return None\n\n# Output the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_786"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nschedules = {\n    \"Kimberly\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Megan\": [],\n    \"Marie\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Diana\": [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Create a list of all busy times\nbusy_times = []\nfor busy_schedule in schedules.values():\n    busy_times.extend(busy_schedule)\n\n# Function to check if a time slot is free\ndef is_free(start, end):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Find suitable time for the meeting\nfor hour in range(work_start.hour, work_end.hour):\n    start_time = datetime.strptime(f'{hour:02d}:00', '%H:%M')\n    if start_time < work_start:\n        start_time = work_start\n\n    while start_time + meeting_duration <= work_end:\n        # Check if the time slot is free\n        if is_free(start_time, start_time + meeting_duration):\n            # For Megan's preference to avoid meetings before 10:00\n            if start_time >= datetime.strptime('10:00', '%H:%M'):\n                proposed_time = f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n                print(proposed_time)\n                break\n        start_time += timedelta(minutes=30)\n\n        if 'proposed_time' in locals():\n            break\n```",
            "count": "calendar_scheduling_example_185"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Define the working hours\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Define the busy times for Tyler and Ruth\n    tyler_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    ruth_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Check time slots for possible meeting\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        current_time = start_time\n        \n        while current_time + meeting_duration <= end_time:\n            meeting_end_time = current_time + meeting_duration\n            \n            # Check if both Tyler and Ruth are free for the current time slot\n            is_tyler_free = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in tyler_busy_times)\n            is_ruth_free = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in ruth_busy_times)\n            \n            if is_tyler_free and is_ruth_free:\n                # If Tyler wants to avoid meetings before 16:00 on Monday\n                if day == 'Monday' and current_time < datetime.strptime(\"16:00\", \"%H:%M\"):\n                    current_time = datetime.strptime(\"16:00\", \"%H:%M\")\n                    continue\n                \n                # If suitable time is found, return it in the specified format\n                return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n            \n            # Increment current time by 30 minutes\n            current_time += timedelta(minutes=30)\n\n# Run the function to get the suitable meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_724"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules\njulie_schedule = []\nruth_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Monday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Tuesday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Wednesday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),  # Thursday\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),  # Thursday\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))   # Thursday\n]\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find a suitable meeting time\ndef find_meeting_time(julie_schedule, ruth_schedule, work_hours_start, work_hours_end, meeting_duration):\n    # Check preferred day (Thursday) first between 11:30 and 14:30\n    preferred_start = datetime.strptime('11:30', '%H:%M')\n    preferred_end = datetime.strptime('14:30', '%H:%M')\n\n    def is_time_slot_available(start, end):\n        for busy_start, busy_end in ruth_schedule:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n        return True\n\n    proposed_start = preferred_start\n    proposed_end = proposed_start + meeting_duration\n\n    while proposed_end <= preferred_end:\n        if is_time_slot_available(proposed_start, proposed_end):\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n        proposed_start += timedelta(minutes=1)\n        proposed_end = proposed_start + meeting_duration\n    \n    # If no preferred time found, fallback to any available time within work hours\n    proposed_start = work_hours_start\n    while proposed_start + meeting_duration <= work_hours_end:\n        proposed_end = proposed_start + meeting_duration\n        if is_time_slot_available(proposed_start, proposed_end):\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n        proposed_start += timedelta(minutes=1)\n\n# Get the meeting time\nmeeting_time = find_meeting_time(julie_schedule, ruth_schedule, work_hours_start, work_hours_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_819"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting time constraints and existing schedules\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules: (start, end)\ngregory_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))]\n\nnatalie_schedule = []\n\nchristine_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nvincent_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is available for all participants\n        end_time = current_time + meeting_duration\n        \n        is_available = True\n        \n        # Check Gregory's schedule\n        for start, end in gregory_schedule:\n            if start < end_time and current_time < end:\n                is_available = False\n                break\n        \n        # Check Christine's schedule\n        for start, end in christine_schedule:\n            if start < end_time and current_time < end:\n                is_available = False\n                break\n        \n        # Check Vincent's schedule\n        for start, end in vincent_schedule:\n            if start < end_time and current_time < end:\n                is_available = False\n                break\n        \n        # If time is available for everyone\n        if is_available:\n            return f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # increment time by 1 minute\n    \n    return None  # If no time found\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_111"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules: (start time, end time) in hours\njulie_busy = [(9, 9.5), (11, 11.5), (12, 12.5), (13.5, 14), (16, 17)]\nsean_busy = [(9, 9.5), (13, 13.5), (15, 15.5), (16, 16.5)]\nlori_busy = [(10, 10.5), (11, 13), (15.5, 17)]\n\nwork_start = 9  # 9:00\nwork_end = 17   # 17:00\nmeeting_duration = 1  # 1 hour\n\n# Function to check if a time slot is free\ndef is_time_free(start, end, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if start < busy_end and end > busy_start:  # Overlapping check\n            return False\n    return True\n\n# Generate time slots and check for availability\nfor hour in range(work_start, work_end - meeting_duration + 1):\n    start_time = hour\n    end_time = hour + meeting_duration\n    \n    if is_time_free(start_time, end_time, julie_busy) and \\\n       is_time_free(start_time, end_time, sean_busy) and \\\n       is_time_free(start_time, end_time, lori_busy):\n        # Output found time\n        print(f\"{start_time:02d}:00:{end_time:02d}:00\")\n        break\n```",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy slots\nbusy_slots = {\n    \"Daniel\": [],\n    \"Kathleen\": [(14, 30, 15, 30)],\n    \"Carolyn\": [(12, 0, 12, 30), (13, 0, 13, 30)],\n    \"Roger\": [],\n    \"Cheryl\": [(9, 0, 9, 30), (10, 0, 11, 30), (12, 30, 13, 30), (14, 0, 17, 0)],\n    \"Virginia\": [(9, 30, 11, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 30, 15, 30), (16, 0, 17, 0)],\n    \"Angela\": [(9, 30, 10, 0), (10, 30, 11, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 0, 16, 30)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free\ndef is_free(start_time, end_time):\n    for busy in busy_slots.values():\n        for (start_hour, start_minute, end_hour, end_minute) in busy:\n            busy_start = datetime.strptime(f\"{start_hour}:{start_minute}\", \"%H:%M\")\n            busy_end = datetime.strptime(f\"{end_hour}:{end_minute}\", \"%H:%M\")\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Finding a suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_free(current_time, end_time):\n        print(f'{{{current_time.strftime(\"%H:%M\")}:{end_time.strftime(\"%H:%M\")}}}')\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_476"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the existing schedules\nschedules = {\n    \"Wayne\": [],\n    \"Melissa\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Catherine\": [],\n    \"Gregory\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Victoria\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thomas\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Jennifer\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is available for all participants\ndef is_time_slot_available(start, duration, schedules):\n    end = start + duration\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start < busy_end and end > busy_start):\n                return False\n    return True\n\n# Search for a suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    # Check against the availability of participants\n    if is_time_slot_available(current_time, meeting_duration, schedules):\n        # Ensure Wayne's preference is also respected\n        if current_time >= datetime.strptime(\"14:00\", \"%H:%M\"):\n            proposed_start = current_time\n            proposed_end = proposed_start + meeting_duration\n            print(f\"{{{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}}}\")\n            break\n    current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n```",
            "count": "calendar_scheduling_example_458"
        },
        {
            "final_program_time": "{11:00:12:00}",
            "expected_time": "{11:00:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules\nbetty_schedule = {\n    \"Monday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n}\n\nmegan_schedule = {\n    \"Monday\": [(start_time, end_time)],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), end_time)],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Friday\": [(start_time, end_time)]\n}\n\n# Function to find a suitable meeting time\ndef find_meeting_time(betty_schedule, megan_schedule, duration):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    \n    for day in days:\n        # Skip days where Betty can't meet\n        if day in [\"Wednesday\", \"Thursday\"]:\n            continue\n        \n        # Combine busy slots\n        busy_slots = betty_schedule.get(day, []) + megan_schedule.get(day, [])\n        busy_slots.sort(key=lambda x: x[0])  # Sort by start time\n        \n        # Check for free slots\n        current_time = start_time\n        for start, end in busy_slots:\n            if current_time < start:\n                available_time = (start - current_time).total_seconds() / 60\n                if available_time >= duration:\n                    return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=duration)).strftime('%H:%M')}\"\n            current_time = max(current_time, end)  # Move current time forward if busy slot overlaps\n            \n        if current_time + timedelta(minutes=duration) <= end_time:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=duration)).strftime('%H:%M')}\"\n    \n    return None\n\n# Define the duration\nmeeting_duration = 60  # in minutes\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time(betty_schedule, megan_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_964"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and durations\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nmargaret_schedule = [\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), working_hours_end),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), # Tuesday\n]\n\nalexis_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), working_hours_end),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), # Tuesday\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n]\n\n# Define the function to find a suitable time\ndef find_meeting_time():\n    # Start checking from 14:30 on Tuesday\n    proposed_time = datetime.strptime('14:30', '%H:%M')\n    \n    # Check for availability for 30 minutes from proposed_time\n    while proposed_time + meeting_duration <= working_hours_end:\n        meeting_start = proposed_time\n        meeting_end = proposed_time + meeting_duration\n        \n        # Check if both participants are available\n        if all(\n            not (meeting_start < end and meeting_end > start)\n            for start, end in margaret_schedule + alexis_schedule\n        ):\n            return proposed_time.strftime('%H:%M') + ':' + (proposed_time + meeting_duration).strftime('%H:%M')\n\n        proposed_time += timedelta(minutes=1)\n    \n    return None\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_629"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nimport datetime\n\n# Define the working hours and meeting duration\nworking_hours = (datetime.time(9, 0), datetime.time(17, 0))\nmeeting_duration = datetime.timedelta(minutes=30)\n\n# Define the existing schedules\nrobert_schedule = {\n    \"Monday\": [(datetime.time(11, 0), datetime.time(11, 30)),\n               (datetime.time(14, 0), datetime.time(14, 30)),\n               (datetime.time(15, 30), datetime.time(16, 0))],\n    \"Tuesday\": [(datetime.time(10, 30), datetime.time(11, 0)),\n                (datetime.time(15, 0), datetime.time(15, 30))],\n    \"Wednesday\": [(datetime.time(10, 0), datetime.time(11, 0)),\n                  (datetime.time(11, 30), datetime.time(12, 0)),\n                  (datetime.time(12, 30), datetime.time(13, 0)),\n                  (datetime.time(13, 30), datetime.time(14, 0)),\n                  (datetime.time(15, 0), datetime.time(15, 30)),\n                  (datetime.time(16, 0), datetime.time(16, 30))]\n}\n\nralph_schedule = {\n    \"Monday\": [(datetime.time(10, 0), datetime.time(13, 30)),\n               (datetime.time(14, 0), datetime.time(14, 30)),\n               (datetime.time(15, 0), datetime.time(17, 0))],\n    \"Tuesday\": [(datetime.time(9, 0), datetime.time(9, 30)),\n                (datetime.time(10, 0), datetime.time(10, 30)),\n                (datetime.time(11, 0), datetime.time(11, 30)),\n                (datetime.time(12, 0), datetime.time(13, 0)),\n                (datetime.time(14, 0), datetime.time(15, 30)),\n                (datetime.time(16, 0), datetime.time(17, 0))],\n    \"Wednesday\": [(datetime.time(10, 30), datetime.time(11, 0)),\n                  (datetime.time(11, 30), datetime.time(12, 0)),\n                  (datetime.time(13, 0), datetime.time(14, 30)),\n                  (datetime.time(16, 30), datetime.time(17, 0))]\n}\n\n# Find available time slots for the meeting\ndef find_meeting_time(robert_schedule, ralph_schedule, working_hours, meeting_duration):\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    available_slots = {}\n\n    for day in days:\n        # Get the busy times\n        robert_busy = robert_schedule[day]\n        ralph_busy = ralph_schedule[day]\n\n        # Combine the busy times\n        all_busy_times = robert_busy + ralph_busy\n\n        # Create a list of free slots\n        free_slots = []\n        current_time = working_hours[0]\n\n        # Check each minute in working hours\n        while current_time < working_hours[1]:\n            is_busy = any(start <= current_time < end for start, end in all_busy_times)\n            if not is_busy:\n                free_slots.append(current_time)\n\n            # Move to the next minute\n            current_time = (datetime.datetime.combine(datetime.date.today(), current_time) + datetime.timedelta(minutes=1)).time()\n\n        # Check for available meeting times\n        for start_time in free_slots:\n            end_time = (datetime.datetime.combine(datetime.date.today(), start_time) + meeting_duration).time()\n            if end_time <= working_hours[1]:\n                # Ensure the end_time is free\n                is_end_busy = any(start <= end_time <= end for start, end in all_busy_times)\n                if not is_end_busy:\n                    available_slots[day] = start_time\n                    break  # Take the first available slot\n\n    return available_slots\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(robert_schedule, ralph_schedule, working_hours, meeting_duration)\n\n# Format the output\nif proposed_time:\n    day, start_time = next(iter(proposed_time.items()))\n    end_time = (datetime.datetime.combine(datetime.date.today(), start_time) + meeting_duration).time()\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time slots found.\")\n```",
            "count": "calendar_scheduling_example_702"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy schedules\nryan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n\ndenise_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nruth_busy = []  # Ruth has no meetings\n\n# Define work hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Function to find free slots\ndef find_meeting_time(ryan_busy, denise_busy, ruth_busy, start_time, end_time, duration):\n    current_time = start_time\n    while current_time + duration <= end_time:\n        is_free = True\n        for start, end in ryan_busy + denise_busy + ruth_busy:\n            if current_time < end and current_time + duration > start:\n                is_free = False\n                break\n        if is_free:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(ryan_busy, denise_busy, ruth_busy, start_of_day, end_of_day, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' schedules (busy times)\nschedules = {\n    \"Cynthia\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n    \"Ann\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Catherine\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Kyle\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ],\n}\n\n# Function to find a suitable time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < end and end_time > start) for busy_times in schedules.values() for start, end in busy_times):\n            return current_time.strftime(\"%H:%M\") + ':' + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every half hour\n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_244"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nschedules = {\n    \"Gregory\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Jonathan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Barbara\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Alan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Nicole\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Catherine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_time, end_time):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Find a suitable time for the meeting\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        break\n    current_time += timedelta(minutes=30)\n\n# Output the proposed time\nprint(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_473"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(lisa_schedule, anthony_schedule, meeting_duration, work_hours):\n    work_start, work_end = work_hours\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        is_lisa_free = all(not (current_time < end and current_time + meeting_duration > start) for start, end in lisa_schedule)\n        is_anthony_free = all(not (current_time < end and current_time + meeting_duration > start) for start, end in anthony_schedule)\n        \n        if is_lisa_free and is_anthony_free:\n            return current_time.strftime(\"%H:%M:%H:%M\")\n\n        current_time += timedelta(minutes=30)  # Check next half hour slot\n\n    return None  # In case no slot is found\n\n# Participant schedules\nlisa_schedule = [(9, 9.5), (10.5, 11), (14, 16)]\nanthony_schedule = [(9, 9.5), (11, 11.5), (12.5, 13.5), (14, 15), (15.5, 16), (16.5, 17)]\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n\n# Calculate and print the proposed meeting time\nproposed_time = find_meeting_time(lisa_schedule, anthony_schedule, meeting_duration, work_hours)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_583"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\njesse_schedule = [\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n]\n\nlawrence_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Create a function to find a free slot\ndef find_meeting_time(jesse_schedule, lawrence_schedule, work_start, work_end, duration):\n    # Combine the busy times into a single list\n    busy_times = jesse_schedule + lawrence_schedule\n\n    # Sort the busy times\n    busy_times.sort()\n\n    # Start checking from the beginning of work hours\n    current_time = work_start\n\n    while current_time + duration <= work_end:\n        is_conflicted = False\n        for start, end in busy_times:\n            if (start <= current_time < end) or (start < current_time + duration <= end):\n                is_conflicted = True\n                break\n        \n        if not is_conflicted:\n            return current_time.strftime(\"%H:%M\"), (current_time + duration).strftime(\"%H:%M\")\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=15)  # Check every 15 minutes for potential slots\n\n    return None, None\n\n# Scheduling the meeting\nstart_time, end_time = find_meeting_time(jesse_schedule, lawrence_schedule, work_start, work_end, meeting_duration)\n\n# Output the proposed time\nif start_time and end_time:\n    print(f\"{start_time}:{end_time}\")\nelse:\n    print(\"No available time found\")\n```\n",
            "count": "calendar_scheduling_example_652"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(betty_schedule, scott_schedule, duration, constraints):\n    work_hours_start = datetime.strptime('09:00', '%H:%M')\n    work_hours_end = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = timedelta(minutes=duration)\n\n    # Constraints on days to check\n    available_days = constraints['available_days']\n    \n    # Combined schedule availability\n    for day in available_days:\n        for hour in range(work_hours_start.hour, work_hours_end.hour):\n            start_time = datetime.strptime(f'{hour}:00', '%H:%M')\n            end_time = start_time + meeting_duration\n            \n            # Check if the proposed meeting time fits within the schedules\n            if end_time.time() <= work_hours_end.time() and (start_time.time() >= work_hours_start.time()):\n                if (start_time not in betty_schedule and end_time not in betty_schedule) and \\\n                   (start_time not in scott_schedule and end_time not in scott_schedule):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Betty's busy schedule\nbetty_schedule = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    \n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    \n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    \n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Scott's busy schedule\nscott_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    \n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    \n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Meeting constraints\nconstraints = {\n    'available_days': ['Tuesday', 'Wednesday', 'Thursday']\n}\n\n# Find meeting time\nresult = find_meeting_time(betty_schedule, scott_schedule, 30, constraints)\nprint(result)\n```",
            "count": "calendar_scheduling_example_867"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules\npatricia_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\njesse_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to check if time range is free\ndef is_free(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if start < busy_end and end > busy_start:  # overlaps\n            return False\n    return True\n\n# Search for available time slots\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        end_time = current_time + meeting_duration\n        if is_free(current_time, end_time, patricia_schedule) and is_free(current_time, end_time, jesse_schedule):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # check every half hour\n    return None\n\n# Execute the meeting time search\nmeeting_time = find_meeting_time()\nprint(f\"{{{meeting_time}}}\")\n```",
            "count": "calendar_scheduling_example_626"
        },
        {
            "final_program_time": "{0:30:9:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\nschedules = {\n    \"Evelyn\": [(0, 0)],  # Free all day\n    \"Joshua\": [(11, 0), (12, 30), (13, 30), (14, 30), (16, 30), (17, 0)],\n    \"Kevin\": [(0, 0)],   # Free all day\n    \"Gerald\": [(0, 0)],  # Free all day\n    \"Jerry\": [(9, 0), (9, 30), (10, 30), (12, 0), (12, 30), (13, 0), (13, 30), (14, 0), (14, 30), (15, 0), (15, 30), (16, 0)],\n    \"Jesse\": [(9, 0), (9, 30), (10, 30), (12, 0), (12, 30), (14, 30), (15, 0), (15, 30), (16, 30)],\n    \"Kenneth\": [(10, 30), (12, 30), (13, 30), (14, 30), (15, 30), (16, 0), (16, 30), (17, 0)],\n}\n\n# Generate busy intervals in minutes\ndef get_busy_intervals(schedule):\n    busy_intervals = []\n    for start_hour, start_minute in schedule:\n        busy_intervals.append(start_hour * 60 + start_minute)\n    return busy_intervals\n\n# Find common free time slots\ndef find_free_time(busy_intervals, meeting_duration):\n    all_busy = sorted(set(busy_intervals))\n    free_times = []\n    \n    # Start with 9:00 AM\n    current_time = 9 * 60\n    \n    for busy_time in all_busy:\n        if busy_time - current_time >= meeting_duration:\n            free_times.append((current_time, busy_time))\n        current_time = busy_time + 30  # 30 minutes gap after busy time\n\n    # Check after the last busy time until 5:00 PM\n    if 17 * 60 - current_time >= meeting_duration:\n        free_times.append((current_time, 17 * 60))\n\n    return free_times\n\n# Meeting duration in minutes (1 hour = 60 minutes)\nmeeting_duration = 60\n\n# Gather all busy intervals for all participants\nall_busy_intervals = []\nfor name, schedule in schedules.items():\n    all_busy_intervals.extend(get_busy_intervals(schedule))\n\n# Find free time that fits everyone's schedules\nfree_intervals = find_free_time(all_busy_intervals, meeting_duration)\n\nif free_intervals:\n    start, end = free_intervals[0]\n    start_hour, start_minute = divmod(start, 60)\n    end_hour, end_minute = divmod(end, 60)\n    print(f\"{{{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}}}\")\nelse:\n    print(\"No available time for meeting.\")\n```",
            "count": "calendar_scheduling_example_479"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules for Mary and Alexis\nmary_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n]\n\nalexis_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Function to find the earliest available time slot\ndef find_earliest_slot(mary_schedule, alexis_schedule, work_start, work_end, meeting_duration):\n    # Combine and sort the schedules\n    busy_times = sorted(mary_schedule + alexis_schedule)\n    \n    # Start checking from the beginning of the work day\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if the current time slot is free\n        is_busy = any(start <= current_time < end for start, end in busy_times)\n        if not is_busy:\n            is_busy = any(start < current_time + meeting_duration <= end for start, end in busy_times)\n        \n        if not is_busy:\n            return (current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"))\n        \n        current_time += timedelta(minutes=15)  # Check the next 15-min interval\n\n    return None\n\n# Find the earliest available time slot\ntime_slot = find_earliest_slot(mary_schedule, alexis_schedule, work_start, work_end, meeting_duration)\n\n# Output the result\noutput = f\"{time_slot[0]}:{time_slot[1]}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_812"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules\neugene_busy = [\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n]\n\neric_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available slots\ndef find_available_slot():\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Collect busy slots\n    busy_slots = eugene_busy + eric_busy\n\n    # Check each half hour slot in work hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if not any(start < end_time and current_time < finish for start, finish in busy_slots):\n            return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)\n\n# Get available time slot\nstart, end = find_available_slot()\nprint(f\"{{{start}:{end}}}\")\n```",
            "count": "calendar_scheduling_example_938"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nrussell_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"17:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nalexander_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define meeting duration\nmeeting_duration = timedelta(hours=1)\n\ndef find_meeting_time(russell_schedule, alexander_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Check Monday\n    day = 0\n    for start_time in range(work_start.hour * 60, work_end.hour * 60):\n        meeting_start = datetime.strptime(f\"{start_time // 60:02}:{start_time % 60:02}\", \"%H:%M\")\n        \n        # Check constraints\n        if meeting_start < datetime.strptime(\"13:30\", \"%H:%M\") and meeting_start.date().weekday() == day:\n            continue\n            \n        # Set the end time\n        meeting_end = meeting_start + meeting_duration\n        \n        # Check if the meeting end time is beyond the work hours\n        if meeting_end > work_end:\n            break\n            \n        is_available = True\n        for busy_start, busy_end in russell_schedule + alexander_schedule:\n            if meeting_start < busy_end and meeting_end > busy_start:\n                is_available = False\n                break\n        \n        if is_available:\n            return meeting_start.strftime(\"%H:%M:%H:%M\")\n\n    # Check Tuesday\n    day = 1\n    for start_time in range(work_start.hour * 60, work_end.hour * 60):\n        meeting_start = datetime.strptime(f\"{start_time // 60:02}:{start_time % 60:02}\", \"%H:%M\")\n        \n        if meeting_start < datetime.strptime(\"13:30\", \"%H:%M\") and meeting_start.date().weekday() == day:\n            continue\n        \n        meeting_end = meeting_start + meeting_duration\n        \n        if meeting_end > work_end:\n            break\n            \n        is_available = True\n        for busy_start, busy_end in russell_schedule + alexander_schedule:\n            if meeting_start < busy_end and meeting_end > busy_start:\n                is_available = False\n                break\n        \n        if is_available:\n            return meeting_start.strftime(\"%H:%M:%H:%M\")\n\n# Find the meeting time\nmeeting_time = find_meeting_time(russell_schedule, alexander_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_678"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules: (start_time, end_time)\nadam_schedule = [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\njohn_schedule = [\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\nstephanie_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\nanna_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Anna's preference\nanna_preference_time = datetime.strptime(\"14:30\", \"%H:%M\")\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if the current_time conflicts with anyone's schedule\n        conflicts = False\n        meeting_end_time = current_time + meeting_duration\n        \n        for start, end in adam_schedule + john_schedule + stephanie_schedule + anna_schedule:\n            if (current_time < end and meeting_end_time > start):\n                conflicts = True\n                break\n                \n        # Check if Anna's preference is respected\n        if current_time < anna_preference_time:\n            conflicts = True\n        \n        if not conflicts:\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n    \n    return None\n\n# Find and print the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_116"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules\nandrew_schedule = []\ngrace_schedule = []\nsamuel_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\ndef find_meeting_time(working_hours_start, working_hours_end, meeting_duration, participant_schedules):\n    current_time = working_hours_start\n    \n    while current_time + meeting_duration <= working_hours_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < end and end_time > start)\n               for schedule in participant_schedules for start, end in schedule):\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n\n# All schedules of participants\nparticipant_schedules = [andrew_schedule, grace_schedule, samuel_schedule]\n\n# Find and print meeting time\nmeeting_time = find_meeting_time(working_hours_start, working_hours_end, meeting_duration, participant_schedules)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nryan_schedule = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n]\nadam_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find a suitable time\ndef find_meeting_time(ryan_schedule, adam_schedule, meeting_duration):\n    for day in ['Monday', 'Tuesday']:\n        time_slots = []\n        \n        # Generate free time slots for Ryan and Adam\n        current_start = work_hours_start\n        while current_start < work_hours_end:\n            current_end = current_start + meeting_duration\n            \n            if (current_end > work_hours_end):\n                break\n            \n            # Check if the slot is free for both\n            ryan_free = all(not (current_start < end and current_end > start) for start, end in ryan_schedule)\n            adam_free = all(not (current_start < end and current_end > start) for start, end in adam_schedule)\n            \n            if ryan_free and adam_free:\n                time_slots.append((current_start, current_end))\n\n            current_start += timedelta(minutes=30)  # Increment by 30 minutes for next slot\n        \n        # Check preferences\n        if day == 'Monday':\n            for start, end in time_slots:\n                if start >= datetime.strptime('14:30', '%H:%M'):\n                    return start.strftime('%H:%M') + ':' + end.strftime('%H:%M')\n        else:  # For Tuesday, allow any available slot\n            if time_slots:\n                start, end = time_slots[0]\n                return start.strftime('%H:%M') + ':' + end.strftime('%H:%M')\n    \n    return None  # In case no time slot is found\n\nproposed_time = find_meeting_time(ryan_schedule, adam_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_707"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and meeting duration\nschedules = {\n    \"Andrea\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n                (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 30))],\n    \"Ruth\": [(datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n             (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30))],\n    \"Steven\": [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n               (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 11, 30)),\n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    \"Grace\": [],\n    \"Kyle\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n             (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 12, 0)),\n             (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n             (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 15, 0)),\n             (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n             (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Elijah\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 0)),\n               (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 13, 0)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n               (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Lori\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n             (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 11, 30)),\n             (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 13, 30)),\n             (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 16, 0)),\n             (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules, meeting_duration):\n    # Create a list of all blocked time periods\n    blocked_times = []\n    for busy_slots in schedules.values():\n        for start, end in busy_slots:\n            blocked_times.append((start, end))\n    \n    # Sort the blocked times\n    blocked_times.sort()\n    \n    # Merge overlapping time slots\n    merged_blocked_times = []\n    for start, end in blocked_times:\n        if not merged_blocked_times or merged_blocked_times[-1][1] < start:\n            merged_blocked_times.append((start, end))\n        else:\n            merged_blocked_times[-1] = (merged_blocked_times[-1][0], max(merged_blocked_times[-1][1], end))\n    \n    # Find an available slot for the meeting\n    last_end = work_start\n    for start, end in merged_blocked_times:\n        # Check if there's enough time before the next busy slot\n        if last_end + meeting_duration <= start:\n            return last_end, last_end + meeting_duration\n        last_end = end\n    \n    # Check for a free slot after the last busy period until the work end time\n    if last_end + meeting_duration <= work_end:\n        return last_end, last_end + meeting_duration\n    \n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration)\n\nif proposed_time:\n    start_time, end_time = proposed_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_457"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' schedules\nroy_schedule = {\n    \"Monday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\ndef find_meeting_time(schedule, work_hours_start, work_hours_end, meeting_duration):\n    # Check each day's schedule\n    for day, busy_times in schedule.items():\n        current_start = work_hours_start\n        for busy_start, busy_end in busy_times:\n            # Check for available slot before the busy time\n            if current_start + meeting_duration <= busy_start:\n                return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n            current_start = busy_end\n        \n        # Check the time slot after the last busy time on that day\n        if current_start + meeting_duration <= work_hours_end:\n            return f\"{current_start.strftime('%H:%M')}:{(current_start + meeting_duration).strftime('%H:%M')}\"\n    \n    return None\n\n# Try to find meeting time during the available work days for Roy\nmeeting_time = find_meeting_time(roy_schedule, work_hours_start, work_hours_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_773"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nmargaret_schedule = [(\"09:00\", \"10:00\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"),\n                     (\"13:00\", \"13:30\"), (\"15:00\", \"15:30\")]\ndonna_schedule = [(\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")]\nhelen_schedule = [(\"09:00\", \"09:30\"), (\"10:00\", \"11:30\"), (\"13:00\", \"14:00\"),\n                  (\"14:30\", \"15:00\"), (\"15:30\", \"17:00\")]\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nhelen_preference_end = datetime.strptime(\"13:30\", \"%H:%M\")\n\n# Function to find a suitable time\ndef find_meeting_time(margaret_schedule, donna_schedule, helen_schedule, meeting_duration, work_start, work_end):\n    # Generate all time blocks\n    all_booked = []\n    \n    for start, end in margaret_schedule + donna_schedule + helen_schedule:\n        all_booked.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    \n    # Sort by start times\n    all_booked.sort()\n\n    # Check for free times\n    last_end = work_start\n    for start, end in all_booked:\n        # If there's free time before this meeting\n        if last_end + meeting_duration <= start:\n            if last_end <= helen_preference_end:  # Check helen's preference\n                return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n        last_end = max(last_end, end)\n\n    # Check after the last end time up to work end\n    if last_end + meeting_duration <= work_end:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + meeting_duration).strftime('%H:%M')}\"\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(margaret_schedule, donna_schedule, helen_schedule, meeting_duration, work_start, work_end)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": "{15:30:16:00}",
            "expected_time": "{15:30:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"Shirley\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Jacob\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Stephen\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Margaret\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Mason\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define a function to check if a time slot is free for all participants\ndef is_free(start_time, duration):\n    end_time = start_time + duration\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Check available time slots\nstart_of_day = datetime.strptime(\"14:30\", \"%H:%M\")  # start after Margaret's preferred time\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Try to find a suitable time slot\ncurrent_time = start_of_day\nwhile current_time + meeting_duration <= end_of_day:\n    if is_free(current_time, meeting_duration):\n        # If a time slot is found\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{{{proposed_start}:{proposed_end}}}\")\n        break\n    current_time += timedelta(minutes=15)  # check next available time slot\n```",
            "count": "calendar_scheduling_example_206"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time():\n    # Define the busy times for each participant\n    stephanie_busy = [(10, 30), (16, 0)]\n    cheryl_busy = [(10, 30), (11, 30), (12, 0), (13, 30), (14, 0), (16, 30), (17, 0)]\n    bradley_busy = [(9, 30), (10, 0), (10, 30), (11, 30), (13, 30), (14, 0), (14, 30), (15, 0), (15, 30), (17, 0)]\n    steven_busy = [(9, 0), (12, 0), (13, 0), (13, 30), (14, 30), (17, 0)]\n\n    # Convert busy times to a single list in minutes from the start of the day\n    busy_slots = []\n    for hour, minute in stephanie_busy + cheryl_busy + bradley_busy + steven_busy:\n        busy_slots.append(hour * 60 + minute)\n\n    # Define the work hours (in minutes)\n    work_start = 9 * 60  # 9:00\n    work_end = 17 * 60   # 17:00\n    meeting_duration = 60 # 60 minutes\n\n    # Check for free slots in the work hours\n    for start in range(work_start, work_end - meeting_duration + 1):\n        end = start + meeting_duration\n        \n        if all(start >= busy_end or end <= busy_start for busy_start, busy_end in zip(busy_slots[::2], busy_slots[1::2])):\n            meeting_start_hour = start // 60\n            meeting_start_minute = start % 60\n            meeting_end_hour = end // 60\n            meeting_end_minute = end % 60\n            return f\"{meeting_start_hour:02}:{meeting_start_minute:02}:{meeting_end_hour:02}:{meeting_end_minute:02}\"\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_114"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules defined as (start_time, end_time) tuples\nmichael_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\narthur_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Eric's calendar is wide open\neric_schedule = []\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(michael_schedule, arthur_schedule, eric_schedule, working_start, working_end, meeting_duration):\n    busy_times = michael_schedule + arthur_schedule\n    busy_times.sort()  # Sort the busy times\n\n    current_time = working_start\n    \n    while current_time + meeting_duration <= working_end:\n        # Check if the current_time is not falling into busy schedules\n        is_busy = False\n        for start, end in busy_times:\n            if start <= current_time < end or start < current_time + meeting_duration <= end:\n                is_busy = True\n                break\n        \n        if not is_busy:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        \n        # Move to the next time slot\n        current_time += timedelta(minutes=1)\n\n# Find a suitable time\nmeeting_time = find_meeting_time(michael_schedule, arthur_schedule, eric_schedule, working_start, working_end, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Existing schedules\n    busy_times = {\n        \"Christine\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                       (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                       (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                       (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                       (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \n        \"Janice\": [],\n        \n        \"Bobby\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n        \n        \"Elizabeth\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                      (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                      (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \n        \"Tyler\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \n        \"Edward\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    }\n\n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Generate all busy times into a single list\n    all_busy_times = []\n    for times in busy_times.values():\n        all_busy_times.extend(times)\n    \n    # Sort the busy times\n    all_busy_times.sort(key=lambda x: x[0])\n    \n    # Determine free time slots\n    free_times = []\n    previous_end = work_start\n\n    for busy_start, busy_end in all_busy_times:\n        if previous_end < busy_start:\n            free_times.append((previous_end, busy_start))\n        previous_end = max(previous_end, busy_end)\n\n    # Check for free time slots until work end\n    if previous_end < work_end:\n        free_times.append((previous_end, work_end))\n    \n    # Janice's constraint: No meetings after 13:00\n    janice_constraint_end = datetime.strptime(\"13:00\", \"%H:%M\")\n\n    # Find a suitable free time slot for the meeting\n    for start, end in free_times:\n        # Meeting should end before Janice's constraint and last for 30 minutes\n        if start < janice_constraint_end:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            if meeting_end <= end:\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No suitable time found\"\n\n# Find and print the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_304"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nbusy_times = {\n    \"Judy\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Olivia\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Jacqueline\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Laura\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tyler\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Lisa\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Work hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a time slot is free\ndef is_free(start, end):\n    for busy in busy_times.values():\n        for busy_start, busy_end in busy:\n            if start < busy_end and end > busy_start:\n                return False\n    return True\n\n# Find a free time slot\ndef find_meeting_time():\n    current_time = start_of_day\n    while current_time + meeting_duration <= end_of_day:\n        if is_free(current_time, current_time + meeting_duration):\n            return current_time, current_time + meeting_duration\n        current_time += timedelta(minutes=1)  # Check each minute\n    return None\n\n# Get proposed meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    proposed_start, proposed_end = meeting_time\n    print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_429"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the schedules (as lists of tuples with start and end times)\njennifer_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_available_time(jennifer_schedule, work_start, work_end, meeting_duration):\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        meeting_end = current_time + meeting_duration\n        # Check if there's a conflict with Jennifer's schedule\n        conflict = False\n        for start, end in jennifer_schedule:\n            if current_time < end and meeting_end > start:\n                conflict = True\n                break\n        \n        if not conflict:\n            return current_time.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    \n    return None, None\n\n# Find a suitable time for the meeting\nstart_time, end_time = find_available_time(jennifer_schedule, work_start, work_end, meeting_duration)\n\nif start_time and end_time:\n    print(f\"{{{start_time}:{end_time}}}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_776"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Jacob\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Diana\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Adam\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Angela\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Dennis\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Finding a suitable time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Generate all potential meeting times in 30 minutes increments\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        available = True\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if (current_time < end) and (current_time + meeting_duration > start):\n                    available = False\n                    break\n            if not available:\n                break\n        \n        if available:\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\")\n        \n        current_time += timedelta(minutes=30)\n\n# Calculate and print proposed meeting time\nstart_time, end_time = find_meeting_time(schedules, meeting_duration, work_start, work_end)\nprint(f\"{{{start_time}:{end_time}}}\")\n```",
            "count": "calendar_scheduling_example_246"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Generate free time slots for each participant\n    def get_free_slots(schedule):\n        free_slots = []\n        current_time = work_start\n        \n        for start, end in schedule:\n            if current_time < start:\n                free_slots.append((current_time, start))\n            current_time = max(current_time, end)\n        \n        if current_time < work_end:\n            free_slots.append((current_time, work_end))\n        \n        return free_slots\n    \n    danielle_free = get_free_slots(danielle_schedule)\n    bruce_free = get_free_slots(bruce_schedule)\n    eric_free = get_free_slots(eric_schedule)\n\n    # Find overlapping free slots\n    potential_slots = []\n    for d_start, d_end in danielle_free:\n        for b_start, b_end in bruce_free:\n            for e_start, e_end in eric_free:\n                start_time = max(d_start, b_start, e_start)\n                end_time = start_time + timedelta(hours=meeting_duration)\n\n                if end_time <= min(d_end, b_end, e_end):\n                    potential_slots.append((start_time, end_time))\n    \n    if potential_slots:\n        # Returning the first available slot\n        return potential_slots[0]\n    return None\n\n# Existing schedules\ndanielle_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nbruce_schedule = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\neric_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\n# Meeting duration in hours\nmeeting_duration = 1\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, meeting_duration)\n\nif meeting_time:\n    print(f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No suitable meeting time found.\")\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\nschedules = {\n    \"Jose\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Keith\": [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Logan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Megan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Gary\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n             (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Bobby\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting constraints\njose_availability_end = datetime.strptime(\"15:30\", \"%H:%M\")\n\n# Function to check availability\ndef is_available(start_time, end_time):\n    for participant, busy_times in schedules.items():\n        for busy_start, busy_end in busy_times:\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Main logic to find a suitable time\ndef find_meeting_time():\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        meeting_end_time = current_time + meeting_duration\n        if current_time <= jose_availability_end and is_available(current_time, meeting_end_time):\n            return current_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next half hour\n    return None\n\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_325"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules for Daniel and Bradley\ndaniel_busy = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nbradley_busy = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to find available time slot\ndef find_meeting_time():\n    for day in [\"Wednesday\", \"Thursday\"]:  # Only consider days allowed for both participants\n        free_slots_daniel = []\n        free_slots_bradley = []\n\n        # Calculate free slots for Daniel\n        current_time = work_start\n        while current_time < work_end:\n            next_time = current_time + meeting_duration\n            if next_time > work_end:\n                break\n            busy = any(start < next_time and current_time < end for start, end in daniel_busy[day])\n            if not busy:\n                free_slots_daniel.append((current_time, next_time))\n            current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n        # Calculate free slots for Bradley\n        current_time = work_start\n        while current_time < work_end:\n            next_time = current_time + meeting_duration\n            if next_time > work_end:\n                break\n            busy = any(start < next_time and current_time < end for start, end in bradley_busy[day])\n            if not busy:\n                free_slots_bradley.append((current_time, next_time))\n            current_time += timedelta(minutes=30)  # Check next half-hour slot\n\n        # Find common free slots\n        for start_d, end_d in free_slots_daniel:\n            for start_b, end_b in free_slots_bradley:\n                if start_d < end_b and start_b < end_d:\n                    return (start_d.strftime(\"%H:%M\"), end_d.strftime(\"%H:%M\"))\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(f'{{{proposed_time[0]}:{proposed_time[1]}}}')\n```",
            "count": "calendar_scheduling_example_904"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meetings for each participant (start, end)\nbradley_meetings = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nteresa_meetings = [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nelizabeth_meetings = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nchristian_meetings = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                       (datetime.strptime(\"10:30\", \"%H:%M\"), end_time)]\n\n# Function to check if a time slot is free for all participants\ndef is_time_slot_free(start_slot, end_slot):\n    for meeting in bradley_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    for meeting in teresa_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    for meeting in elizabeth_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    for meeting in christian_meetings:\n        if not (end_slot <= meeting[0] or start_slot >= meeting[1]):\n            return False\n    return True\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find a free slot within the work hours\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    if is_time_slot_free(current_time, current_time + meeting_duration):\n        proposed_time = f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n        print(proposed_time)\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_113"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the existing schedules for each participant\nschedules = {\n    \"Joe\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))],\n    \"Keith\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Patricia\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    \"Nancy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Pamela\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Find suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < busy_end and end_time > busy_start) \n               for schedule in schedules.values() \n               for busy_start, busy_end in schedule):\n            return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\nmeeting_start, meeting_end = find_meeting_time()\nprint(f\"{meeting_start}:{meeting_end}\")\n```",
            "count": "calendar_scheduling_example_266"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules\nemily_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nmelissa_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nfrank_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine busy schedules\ncombined_busy = emily_busy + melissa_busy + frank_busy\ncombined_busy.sort()\n\n# Find available time slots\navailable_slots = []\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    busy = False\n    for start, end in combined_busy:\n        if (current_time < end) and (start < end_time):\n            busy = True\n            break\n    if not busy:\n        available_slots.append((current_time, end_time))\n    current_time += timedelta(minutes=1)\n\n# Find a suitable time slot\nif available_slots:\n    proposed_time = available_slots[0]\n    print(f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Defining the working hours and meeting duration\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(minutes=30)\n    \n    # Defining the busy schedules\n    jean_busy_times = [\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n    \n    doris_busy_times_monday = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    # Doris prefers not to schedule after 14:00 on Monday\n    doris_busy_times_monday.append((datetime.strptime(\"14:00\", \"%H:%M\"), work_end))\n    \n    doris_busy_times_tuesday = [\n        (work_start, work_end),  # fully booked\n    ]\n    \n    # Merging busy times for attire days\n    schedules = {'Monday': doris_busy_times_monday, 'Tuesday': doris_busy_times_tuesday}\n    schedules['Jean'] = jean_busy_times\n    \n    # Function to check if a time slot is free\n    def is_slot_free(start_time, end_time, busy_times):\n        for busy_start, busy_end in busy_times:\n            if (start_time < busy_end) and (busy_start < end_time):\n                return False\n        return True\n\n    # Finding a free time slot\n    for day, busy_times in schedules.items():\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            meeting_end_time = current_time + meeting_duration\n            if is_slot_free(current_time, meeting_end_time, busy_times) and is_slot_free(current_time, meeting_end_time, schedules['Jean']):\n                return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # check next half hour\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_669"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participant schedules\nnicole_schedule = [\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Friday\n]\n\ndaniel_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Thursday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Friday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Friday\n]\n\n# Function to check for available meeting time\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            available = True\n            for start, end in nicole_schedule:\n                if (current_time < end and current_time + meeting_duration > start):\n                    available = False\n                    break\n            for start, end in daniel_schedule:\n                if (current_time < end and current_time + meeting_duration > start):\n                    available = False\n                    break\n            \n            if available:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n            \n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_975"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if time slots are available for both participants\ndef is_available(start_a, end_a, start_m, end_m):\n    return max(start_a, start_m) < min(end_a, end_m)\n\n# Function to find the earliest common time slot for the meeting\ndef find_meeting_slot(arthur_schedule, michael_schedule, meeting_duration):\n    # Define working hours\n    working_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    working_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Meeting times in minutes\n    meeting_duration_minutes = meeting_duration.total_seconds() / 60\n\n    # Check availability for Monday\n    for start_a, end_a in arthur_schedule['Monday']:\n        for start_m, end_m in michael_schedule['Monday']:\n            if is_available(start_a, end_a, start_m, end_m):\n                common_start = max(start_a, start_m)\n                common_end = min(end_a, end_m)\n                if (common_end - common_start).total_seconds() / 60 >= meeting_duration_minutes and common_start >= working_hours_start and common_end <= working_hours_end:\n                    return common_start.strftime(\"%H:%M\") + \":\" + (common_start + meeting_duration).strftime(\"%H:%M\")\n\n    # Check availability for Wednesday\n    for start_a, end_a in arthur_schedule['Wednesday']:\n        for start_m, end_m in michael_schedule['Wednesday']:\n            if is_available(start_a, end_a, start_m, end_m):\n                common_start = max(start_a, start_m)\n                common_end = min(end_a, end_m)\n                if (common_end - common_start).total_seconds() / 60 >= meeting_duration_minutes and common_start >= working_hours_start and common_end <= working_hours_end:\n                    return common_start.strftime(\"%H:%M\") + \":\" + (common_start + meeting_duration).strftime(\"%H:%M\")\n\n# Participant schedules\narthur_schedule = {\n    'Monday': [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nmichael_schedule = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))]\n}\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Find and print the proposed time for the meeting\nproposed_time = find_meeting_slot(arthur_schedule, michael_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_723"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules\nshirley_schedule = [\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\nalbert_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Set meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if two time slots conflict\ndef times_conflict(start1, end1, start2, end2):\n    return start1 < end2 and start2 < end1\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in [0, 1]:  # 0 for Monday, 1 for Tuesday\n        for start_time in (work_start,):\n            # Check potential meeting times\n            end_time = start_time + meeting_duration\n            if end_time > work_end:\n                break\n            \n            # Check if time conflicts with Shirley's schedule\n            shirley_available = all(not times_conflict(start_time, end_time, s_start, s_end)\n                                    for s_start, s_end in shirley_schedule)\n            \n            if shirley_available:\n                # Check if time conflicts with Albert's schedule\n                albert_available = all(not times_conflict(start_time, end_time, a_start, a_end)\n                                       for a_start, a_end in albert_schedule)\n\n                if albert_available:\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n            start_time += timedelta(minutes=30)  # Check next half-hour slot\n\n# Output proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_658"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import time, timedelta\n\n# Define the work hours and meeting duration\nwork_start = time(9, 0)\nwork_end = time(17, 0)\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules\nschedules = {\n    'Katherine': [(time(12, 0), time(12, 30)), (time(13, 0), time(14, 30))],\n    'Rebecca': [],\n    'Julie': [(time(9, 0), time(9, 30)), (time(10, 30), time(11, 0)),\n              (time(13, 30), time(14, 0)), (time(15, 0), time(15, 30))],\n    'Angela': [(time(9, 0), time(10, 0)), (time(10, 30), time(11, 0)),\n               (time(11, 30), time(14, 0)), (time(14, 30), time(15, 0)),\n               (time(16, 30), time(17, 0))],\n    'Nicholas': [(time(9, 30), time(11, 0)), (time(11, 30), time(13, 30)),\n                 (time(14, 0), time(16, 0)), (time(16, 30), time(17, 0))],\n    'Carl': [(time(9, 0), time(11, 0)), (time(11, 30), time(12, 30)),\n             (time(13, 0), time(14, 30)), (time(15, 0), time(16, 0)),\n             (time(16, 30), time(17, 0))]\n}\n\ndef is_time_slot_available(start, end):\n    for busy_slots in schedules.values():\n        for busy_start, busy_end in busy_slots:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\ndef find_meeting_time():\n    cur_time = datetime.combine(datetime.today(), work_start)\n    end_work_time = datetime.combine(datetime.today(), work_end)\n    \n    while cur_time + meeting_duration <= end_work_time:\n        start = cur_time.time()\n        end = (cur_time + meeting_duration).time()\n        \n        if is_time_slot_available(start, end):\n            return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n        \n        cur_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Execute the function to find the suitable time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_356"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Existing schedules in terms of busy time slots\nschedules = {\n    'Cynthia': [(\"09:30\", \"10:30\"), (\"11:30\", \"12:00\"), (\"13:00\", \"13:30\"), (\"15:00\", \"16:00\")],\n    'Lauren': [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"13:00\", \"13:30\"),\n               (\"14:00\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    'Robert': [(\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:30\"), (\"14:00\", \"16:00\")],\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available time slot\ndef find_meeting_time():\n    # Generate busy intervals for everyone\n    busy_times = []\n    for person in schedules:\n        for start, end in schedules[person]:\n            busy_times.append((datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")))\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Check for free time slots\n    previous_end = work_start\n    \n    for busy_start, busy_end in busy_times:\n        # Check if there's enough room before the next busy time\n        if previous_end + timedelta(minutes=meeting_duration) <= busy_start:\n            # Format and return the available time slot\n            meeting_start = previous_end\n            meeting_end = previous_end + timedelta(minutes=meeting_duration)\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        \n        # Move the previous_end marker\n        previous_end = max(previous_end, busy_end)\n    \n    # Check after the last busy time until the end of the work day\n    if previous_end + timedelta(minutes=meeting_duration) <= work_end:\n        meeting_start = previous_end\n        meeting_end = previous_end + timedelta(minutes=meeting_duration)\n        return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return \"No available time\"\n\n# Proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_215"
        },
        {
            "final_program_time": "{12:00:0:12}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the busy schedules of each participant\nashley_busy = [(datetime.strptime(\"10:00\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), timedelta(hours=1)),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), timedelta(hours=1))]\n                \nronald_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), timedelta(minutes=30)),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), timedelta(hours=1, minutes=30)),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), timedelta(hours=1.5)),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), timedelta(hours=2.5))]\n                \nlarry_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), timedelta(hours=3)),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), timedelta(hours=4))]\n\n# Function to check if a time slot is free\ndef is_free(time_slot_start, duration, busy_times):\n    for busy_start, busy_duration in busy_times:\n        busy_end = busy_start + busy_duration\n        if (time_slot_start < busy_end) and (time_slot_start + duration > busy_start):\n            return False\n    return True\n\n# Finding the suitable time slot \ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if (is_free(current_time, meeting_duration, ashley_busy) and\n        is_free(current_time, meeting_duration, ronald_busy) and\n        is_free(current_time, meeting_duration, larry_busy)):\n        proposed_time = current_time.strftime(\"%H:%M:%S\")\n        end_time = (current_time + meeting_duration).strftime(\"%H:%M\")\n        print(f\"{proposed_time}:{end_time}\")  # output in the requested format\n        break\n    current_time += timedelta(minutes=30)  # increments by 30 minutes\n```",
            "count": "calendar_scheduling_example_135"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules\nraymond_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))]\n\nbilly_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\ndonald_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Helper function to check if a time slot is free\ndef is_free(start, end, schedule):\n    for (busy_start, busy_end) in schedule:\n        if (start < busy_end and end > busy_start):  # Overlap check\n            return False\n    return True\n\n# Try to find suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    time_end = current_time + meeting_duration\n    if (is_free(current_time, time_end, raymond_schedule) and\n        is_free(current_time, time_end, billy_schedule) and\n        is_free(current_time, time_end, donald_schedule)):\n        # Check if billy's preference is honored\n        if current_time < datetime.strptime(\"15:00\", \"%H:%M\"):\n            print(f\"{current_time.strftime('%H:%M')}:{time_end.strftime('%H:%M')}\")\n            break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules as occupied time slots\nsusan_schedule = [\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nsandra_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define meeting duration and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    # Check Monday\n    for hour in range(9, 17):\n        slot_start = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n        slot_end = slot_start + meeting_duration\n\n        if slot_end <= work_end:\n            occupied = any(\n                (slot_start < end and slot_end > start) for start, end in susan_schedule + sandra_schedule\n            )\n            if not occupied:\n                return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n\n    # Check Tuesday (skip due to preferences)\n    \n    # Check Wednesday\n    for hour in range(9, 17):\n        slot_start = datetime.strptime(f\"{hour}:00\", \"%H:%M\")\n        slot_end = slot_start + meeting_duration\n\n        if slot_end <= work_end:\n            occupied = any(\n                (slot_start < end and slot_end > start) for start, end in susan_schedule + sandra_schedule\n            )\n            if not occupied:\n                return f\"{slot_start.strftime('%H:%M')}:{slot_end.strftime('%H:%M')}\"\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_778"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' busy slots\nlisa_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nbobby_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\nrandy_busy = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to check if the time slot is free\ndef is_slot_free(start_time, end_time, busy_slots):\n    for busy_start, busy_end in busy_slots:\n        if start_time < busy_end and end_time > busy_start:\n            return False\n    return True\n\n# Find a suitable time slot\ndef find_meeting_time():\n    time_slot = work_start\n    while time_slot + meeting_duration <= work_end:\n        end_slot = time_slot + meeting_duration\n        if (is_slot_free(time_slot, end_slot, lisa_busy) and\n            is_slot_free(time_slot, end_slot, bobby_busy) and\n            is_slot_free(time_slot, end_slot, randy_busy)):\n            # Check Bobby's preference\n            if time_slot >= datetime.strptime(\"15:00\", \"%H:%M\"):\n                return None  # Bobby wants to avoid meetings after 15:00\n            return f\"{time_slot.strftime('%H:%M')}:{end_slot.strftime('%H:%M')}\"\n        time_slot += timedelta(minutes=30)  # Check the next possible slot\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:00}",
            "type_error": "NameError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ronald_schedule, amber_schedule, meeting_duration, work_hours):\n    # Convert time strings to datetime objects\n    def time_to_datetime(time_str):\n        return datetime.strptime(time_str, '%H:%M')\n\n    # Create a list of all possible time slots within work hours\n    start_time = time_to_datetime(work_hours[0])\n    end_time = time_to_datetime(work_hours[1])\n    \n    possible_slots = []\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        possible_slots.append(current_time)\n        current_time += timedelta(minutes=1)  # Increment by minute for checking\n\n    # Check each slot for availability\n    for slot in possible_slots:\n        slot_end = slot + meeting_duration\n\n        # Check if Ronald is free\n        ronald_free = all(not (slot < r_start < slot_end or slot < r_end < slot_end) \n                          for (r_start, r_end) in ronald_schedule)\n\n        # Check if Amber is free\n        amber_free = all(not (slot < a_start < slot_end or slot < a_end < slot_end) \n                         for (a_start, a_end) in amber_schedule)\n\n        if ronald_free and amber_free:\n            return f\"{slot.strftime('%H:%M')}:{(slot + meeting_duration).strftime('%H:%M')}\"\n\n# Define the schedules and constraints\nronald_schedule = [\n    (time_to_datetime(\"10:30\"), time_to_datetime(\"11:00\")),\n    (time_to_datetime(\"12:00\"), time_to_datetime(\"12:30\")),\n    (time_to_datetime(\"15:30\"), time_to_datetime(\"16:00\")),\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"12:00\"), time_to_datetime(\"12:30\")),\n    (time_to_datetime(\"15:30\"), time_to_datetime(\"16:30\")),\n    (time_to_datetime(\"09:30\"), time_to_datetime(\"10:30\")),\n    (time_to_datetime(\"11:00\"), time_to_datetime(\"12:00\")),\n    (time_to_datetime(\"12:30\"), time_to_datetime(\"13:00\")),\n    (time_to_datetime(\"13:30\"), time_to_datetime(\"14:00\")),\n    (time_to_datetime(\"16:30\"), time_to_datetime(\"17:00\")),\n]\n\namber_schedule = [\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"10:00\"), time_to_datetime(\"10:30\")),\n    (time_to_datetime(\"11:30\"), time_to_datetime(\"12:00\")),\n    (time_to_datetime(\"12:30\"), time_to_datetime(\"14:00\")),\n    (time_to_datetime(\"14:30\"), time_to_datetime(\"15:00\")),\n    (time_to_datetime(\"15:30\"), time_to_datetime(\"17:00\")),\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"10:00\"), time_to_datetime(\"11:30\")),\n    (time_to_datetime(\"12:00\"), time_to_datetime(\"12:30\")),\n    (time_to_datetime(\"13:30\"), time_to_datetime(\"15:30\")),\n    (time_to_datetime(\"16:30\"), time_to_datetime(\"17:00\")),\n    (time_to_datetime(\"09:00\"), time_to_datetime(\"09:30\")),\n    (time_to_datetime(\"10:00\"), time_to_datetime(\"10:30\")),\n    (time_to_datetime(\"11:00\"), time_to_datetime(\"13:30\")),\n    (time_to_datetime(\"15:00\"), time_to_datetime(\"15:30\")),\n]\n\nmeeting_duration = timedelta(minutes=30)\nwork_hours = [\"09:00\", \"17:00\"]\n\n# Find the meeting time\nmeeting_time = find_meeting_time(ronald_schedule, amber_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_735"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\n# Define participants' schedules\nschedules = {\n    \"Patrick\": [(13, 30), (14, 0), (14, 30), (15, 0)],\n    \"Shirley\": [(9, 0), (9, 30), (11, 0), (11, 30), (12, 0), (12, 30), (14, 30), (15, 0), (16, 0), (17, 0)],\n    \"Jeffrey\": [(9, 0), (9, 30), (10, 30), (11, 0), (11, 30), (12, 0), (13, 0), (13, 30), (16, 0), (17, 0)],\n    \"Gloria\": [(11, 30), (12, 0), (15, 0), (15, 30)],\n    \"Nathan\": [(9, 0), (9, 30), (10, 30), (12, 0), (14, 0), (17, 0)],\n    \"Angela\": [(9, 0), (9, 30), (10, 0), (11, 0), (12, 30), (15, 0), (15, 30), (16, 30)],\n    \"David\": [(9, 0), (9, 30), (10, 0), (10, 30), (11, 0), (14, 0), (14, 30), (16, 30), (17, 0)]\n}\n\n# Function to check availability for 30 minutes\ndef is_available(start_hour, start_minute):\n    end_hour = start_hour + (start_minute + 30) // 60\n    end_minute = (start_minute + 30) % 60\n    for participant, busy_times in schedules.items():\n        for busy_start in busy_times:\n            busy_hour, busy_minute = busy_start\n            # Check if the busy time overlaps with the desired meeting time\n            if (start_hour < busy_hour or (start_hour == busy_hour and start_minute < busy_minute)) and \\\n               (end_hour > busy_hour or (end_hour == busy_hour and end_minute > busy_minute)):\n                return False\n    return True\n\n# Find a suitable time within work hours from 9:00 to 17:00\nfor hour in range(9, 17):\n    for minute in range(0, 60, 1):  # check every minute interval\n        if is_available(hour, minute):\n            print(f\"{hour:02}:{minute:02}:{hour:02}:{minute + 30:02}\")\n            break\n    else:\n        continue\n    break\n```",
            "count": "calendar_scheduling_example_436"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Participants' schedules in a dictionary\nschedules = {\n    \"Bryan\": [\n        (datetime.strptime(\"Thursday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 10:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 13:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 11:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n    ],\n    \"Nicholas\": [\n        (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Tuesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Wednesday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 11:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Thursday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 17:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 10:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 12:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 16:00\", \"%A %H:%M\")),\n        (datetime.strptime(\"Friday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 17:00\", \"%A %H:%M\")),\n    ]\n}\n\n# Function to check if a proposed time slot is free\ndef is_free(start, end):\n    for participant in schedules.values():\n        for busy_start, busy_end in participant:\n            if (start < busy_end) and (end > busy_start):\n                return False\n    return True\n\n# Find available slots for meeting\ndef find_meeting_time():\n    day_names = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    for day in day_names:\n        current_time = datetime.strptime(f\"{day} {work_start.strftime('%H:%M')}\", \"%A %H:%M\")\n        while current_time + meeting_duration <= datetime.strptime(f\"{day} {work_end.strftime('%H:%M')}\", \"%A %H:%M\"):\n            if is_free(current_time, current_time + meeting_duration):\n                # Returning in the required format HH:MM:HH:MM\n                start_time = current_time.strftime(\"%H:%M\")\n                end_time = (current_time + meeting_duration).strftime(\"%H:%M\")\n                return f\"{start_time}:{end_time}\"\n            current_time += timedelta(minutes=30)  # Checking next half hour\n    return None\n\n# Get proposed time for the meeting\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_910"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(megan_schedule, daniel_schedule, duration):\n    working_hours = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n    # Convert schedules to time ranges\n    megan_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) \n                        for start, end in megan_schedule]\n    daniel_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) \n                          for start, end in daniel_schedule]\n\n    for day in days:\n        for start_time, end_time in working_hours:\n            current_time = start_time\n            \n            while current_time + timedelta(hours=duration) <= end_time:\n                meeting_end_time = current_time + timedelta(hours=duration)\n                \n                megan_free = all(not (open_start < meeting_end_time and open_end > current_time) \n                                 for open_start, open_end in megan_busy_times)\n                daniel_free = all(not (open_start < meeting_end_time and open_end > current_time) \n                                  for open_start, open_end in daniel_busy_times)\n\n                if megan_free and daniel_free:\n                    return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n                \n                current_time += timedelta(minutes=30)  # Check every half hour\n\n# Megan's schedule (start, end)\nmegan_schedule = [\n    ('13:00', '13:30'), ('14:00', '15:30'),\n    ('09:00', '09:30'), ('12:00', '12:30'), ('16:00', '17:00'),\n    ('09:30', '10:00'), ('10:30', '11:30'), ('12:30', '14:00'),\n    ('16:00', '16:30'), ('13:30', '14:30'), ('15:00', '15:30')\n]\n\n# Daniel's schedule (start, end)\ndaniel_schedule = [\n    ('10:00', '11:30'), ('12:30', '15:00'),\n    ('09:00', '10:00'), ('10:30', '17:00'),\n    ('09:00', '10:00'), ('10:30', '11:30'), ('12:00', '17:00'),\n    ('09:00', '12:00'), ('12:30', '14:30'), ('15:00', '15:30'), ('16:00', '17:00')\n]\n\n# Meeting duration in hours\nduration = 1\n\nproposed_time = find_meeting_time(megan_schedule, daniel_schedule, duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_865"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define Amanda's schedule (busy times)\namanda_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n]\n\n# Define Nathan's schedule (busy times)\nnathan_schedule = [\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to find a suitable meeting time on Tuesday within constraints\ndef find_meeting_time():\n    # We focus on Tuesday only because Nathan is unavailable on Monday\n    current_time = work_start\n\n    # Iterate through available times on Tuesday\n    while current_time + meeting_duration <= work_end:\n        # Check if both participants are available\n        meeting_end_time = current_time + meeting_duration\n        \n        # Check availability against Amanda's busy schedule\n        amanda_available = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in amanda_schedule)\n        \n        # Check availability against Nathan's busy schedule\n        nathan_available = all(not (busy_start < meeting_end_time and busy_end > current_time) for busy_start, busy_end in nathan_schedule)\n\n        # Check Amanda's constraint of not meeting after 11:00\n        if amanda_available and nathan_available and current_time < datetime.strptime(\"11:00\", \"%H:%M\"):\n            return f\"{current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n        \n        # Move to next time slot in 30-minute increments\n        current_time += timedelta(minutes=30)\n\n# Get the proposed time for the meeting\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_682"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and duration\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=30)\n\n# Existing schedules in (start_time, end_time) format\nschedules = {\n    \"Jacqueline\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Harold\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Arthur\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Function to find the available time slot\ndef find_meeting_time(schedules, work_start, work_end, duration):\n    # Create a list of busy intervals\n    busy_intervals = []\n    for participant, intervals in schedules.items():\n        busy_intervals.extend(intervals)\n\n    # Sort the busy intervals\n    busy_intervals.sort()\n\n    # Merge overlapping intervals to get a consolidated busy schedule\n    merged_intervals = []\n    for start, end in busy_intervals:\n        if not merged_intervals or merged_intervals[-1][1] < start:\n            merged_intervals.append((start, end))\n        else:\n            merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end))\n\n    # Finding a free slot for the meeting\n    current_time = work_start\n    for start, end in merged_intervals:\n        # Check if there is a gap between current_time and the start of the busy interval\n        while current_time + duration <= start:\n            if current_time >= work_start and current_time + duration <= work_end:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + duration).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=1)  # Increment time to find a slot\n\n        current_time = max(current_time, end)  # Move current_time to the end of the busy interval\n\n    # Check for remaining time after the last busy slot\n    while current_time + duration <= work_end:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + duration).strftime('%H:%M')}\"\n        current_time += timedelta(minutes=1)\n\n# Finding an available meeting time\nmeeting_time = find_meeting_time(schedules, WORK_START, WORK_END, MEETING_DURATION)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_173"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# List of participants' busy times\nbusy_times = {\n    \"Emily\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Mason\": [],\n    \"Maria\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Carl\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"David\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Frank\": [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nduration = timedelta(minutes=30)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(busy_times, work_start, work_end, duration):\n    # Create a list of all busy times\n    all_busy_times = []\n    for times in busy_times.values():\n        all_busy_times.extend(times)\n    \n    # Merge busy times\n    all_busy_times.sort()\n    merged_busy = []\n    for start, end in all_busy_times:\n        if not merged_busy or merged_busy[-1][1] < start:\n            merged_busy.append((start, end))\n        else:\n            merged_busy[-1] = (merged_busy[-1][0], max(merged_busy[-1][1], end))\n    \n    # Check for free slots\n    previous_end = work_start\n    for start, end in merged_busy:\n        if previous_end + duration <= start:\n            return previous_end, previous_end + duration\n        previous_end = end\n    \n    if previous_end + duration <= work_end:\n        return previous_end, previous_end + duration\n    \n    return None  # No suitable time found\n\n# Get the meeting time\nmeeting_time = find_meeting_time(busy_times, work_start, work_end, duration)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_360"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and constraints\njeffrey_schedule = [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M'))]\nvirginia_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                     (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                     (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                     (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\nmelissa_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find available time slot\ndef find_meeting_time(schedules, duration, work_start, work_end):\n    # Create a list of busy times\n    busy_times = []\n    for schedule in schedules:\n        busy_times.extend(schedule)\n    \n    # Sort busy times\n    busy_times.sort()\n    \n    # Find available slots\n    current_time = work_start\n    for busy_start, busy_end in busy_times:\n        # If there's time before the next busy time\n        if current_time + duration <= busy_start:\n            return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n        # Shift current time to the end of the busy slot\n        current_time = max(current_time, busy_end)\n    \n    # Check if there's time after the last busy slot till work end\n    if current_time + duration <= work_end:\n        return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n    \n    return None\n\n# Check for the preferred time constraint for Melissa\nmelissa_preferred_end = datetime.strptime('14:00', '%H:%M')\n\n# Run the function twice: first with all schedules and then check Melissa's preference\nmeeting_time = find_meeting_time([jeffrey_schedule, virginia_schedule, melissa_schedule], meeting_duration, work_start, work_end)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    start_time_dt = datetime.strptime(start_time, '%H:%M')\n    \n    if start_time_dt < melissa_preferred_end:\n        print(f'{{{start_time}:{end_time}}}')\n    else:\n        # If the time found is not within preferred range, continue checking after preferred end\n        print('No suitable time found within preferences and schedules.')\nelse:\n    print('No available slots found.')\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and schedule of each participant\nwork_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nnatalie_schedule = [\n    (\"09:00\", \"09:30\"), (\"10:00\", \"12:00\"), (\"12:30\", \"13:00\"),\n    (\"14:00\", \"14:30\"), (\"15:00\", \"16:30\"), (\"16:30\", \"17:00\")\n]\nwilliam_schedule = [\n    (\"09:30\", \"11:00\"), (\"11:30\", \"17:00\"), (\"09:00\", \"13:00\"),\n    (\"13:30\", \"16:00\"), (\"09:00\", \"12:30\"), (\"13:00\", \"14:30\"),\n    (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")\n]\n\n# Convert schedules to datetime\ndef convert_schedule(schedule):\n    return [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in schedule]\n\nnatalie_busy = convert_schedule(natalie_schedule)\nwilliam_busy = convert_schedule(william_schedule)\n\n# Check if a time slot is free for both\ndef is_free(start, end):\n    for s, e in natalie_busy + william_busy:\n        if start < e and end > s:  # There is a conflict\n            return False\n    return True\n\n# Find a time slot for the meeting\ndef find_meeting_time():\n    for hour in range(work_hours[0].hour, work_hours[1].hour):\n        for minute in [0, 30]:  # Check both 00 and 30 minutes\n            start_time = datetime.strptime(f\"{hour:02}:{minute:02}\", \"%H:%M\")\n            end_time = start_time + timedelta(hours=1)\n            if end_time <= work_hours[1] and is_free(start_time, end_time):\n                return start_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n    return None\n\nmeeting_time = find_meeting_time()\n\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_875"
        },
        {
            "final_program_time": "{9:30:13:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nworking_hours_start = 9\nworking_hours_end = 17\n\n# Define participant schedules\nbrian_schedule = {\n    'Monday': [(9.5, 10), (12.5, 14.5), (15.5, 16)],\n    'Tuesday': [(9, 9.5)],\n    'Wednesday': [(12.5, 14), (16.5, 17)],\n    'Thursday': [(11, 11.5), (13, 13.5), (16.5, 17)],\n    'Friday': [(9.5, 10), (10.5, 11), (13, 13.5), (15, 16), (16.5, 17)],\n}\n\njulia_schedule = {\n    'Monday': [(9, 10), (11, 11.5), (12.5, 13), (15.5, 16)],\n    'Tuesday': [(13, 14), (16, 16.5)],\n    'Wednesday': [(9, 11.5), (12, 12.5), (13, 17)],\n    'Thursday': [(9, 10.5), (11, 17)],\n    'Friday': [(9, 10), (10.5, 11.5), (12.5, 14), (14.5, 15), (15.5, 16)],\n}\n\n# Meeting duration\nmeeting_duration = 1  # in hours\n\n# Find earliest time for the meeting\ndef find_meeting_time(brian_sched, julia_sched):\n    for day in ['Tuesday', 'Wednesday', 'Thursday', 'Friday']:  # Avoid Monday due to preference\n        # Generate free time slots\n        brian_free = generate_free_slots(brian_sched[day])\n        julia_free = generate_free_slots(julia_sched[day])\n        common_free = find_common_free_slots(brian_free, julia_free)\n        \n        for start, end in common_free:\n            if end - start >= meeting_duration:  # Check if meeting can fit\n                return format_time(start, end)\n    return None\n\ndef generate_free_slots(busy_slots):\n    free_slots = []\n    last_end = working_hours_start\n    for start, end in busy_slots:\n        if last_end < start:\n            free_slots.append((last_end, start))\n        last_end = max(last_end, end)\n    if last_end < working_hours_end:\n        free_slots.append((last_end, working_hours_end))\n    return free_slots\n\ndef find_common_free_slots(brian_free, julia_free):\n    common_free = []\n    for b_start, b_end in brian_free:\n        for j_start, j_end in julia_free:\n            start = max(b_start, j_start)\n            end = min(b_end, j_end)\n            if start < end:\n                common_free.append((start, end))\n    return common_free\n\ndef format_time(start, end):\n    start_time = datetime(1, 1, 1, int(start), int((start % 1) * 60))\n    end_time = datetime(1, 1, 1, int(end), int((end % 1) * 60))\n    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n# Run the meeting scheduler\nproposed_time = find_meeting_time(brian_schedule, julia_schedule)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_978"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules as tuples of (start_time, end_time)\nschedules = {\n    \"Ronald\": [(work_start, work_end)],\n    \"Stephen\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Brittany\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)],\n    \"Dorothy\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), work_end)],\n    \"Rebecca\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), work_end)],\n    \"Jordan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Generate a list of busy times from all participants\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n\n    # Sort the busy times\n    busy_times.sort(key=lambda time: time[0])\n\n    # Find available time slots\n    last_end_time = work_start\n    for start, end in busy_times:\n        if last_end_time + meeting_duration <= start:\n            return last_end_time.strftime(\"%H:%M\") + ':' + (last_end_time + meeting_duration).strftime(\"%H:%M\")\n        last_end_time = max(last_end_time, end)\n\n    # Check time at the end of the day\n    if last_end_time + meeting_duration <= work_end:\n        return last_end_time.strftime(\"%H:%M\") + ':' + (last_end_time + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules, meeting_duration)\nprint(proposed_time)  # Output format: HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_307"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define the participants' schedules as blocked times\nkayla_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nrebecca_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Combine and sort the blocked times\nblocked_times = sorted(kayla_schedule + rebecca_schedule)\n\n# Find suitable meeting time\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    # Check if the current time falls within any blocked time\n    is_blocked = False\n    for start, end in blocked_times:\n        if current_time < end and current_time + meeting_duration > start:\n            is_blocked = True\n            break\n    \n    if not is_blocked:\n        # Found a suitable time\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        break\n\n    current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n```",
            "count": "calendar_scheduling_example_541"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define existing schedules for the participants as busy time slots\nschedules = {\n    \"Jack\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Madison\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Rachel\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Douglas\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Ryan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if time slot is free\ndef is_free(time_slot):\n    for busy_times in schedules.values():\n        for busy_start, busy_end in busy_times:\n            if not (time_slot[1] <= busy_start or time_slot[0] >= busy_end):\n                return False\n    return True\n\n# Finding a suitable time for the meeting\ncurrent_time = start_time\n\nwhile current_time + meeting_duration <= end_time:\n    proposed_time_slot = (current_time, current_time + meeting_duration)\n    if is_free(proposed_time_slot):\n        print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n        break\n    current_time += timedelta(minutes=15)  # increment by 15 minutes to find next slot\n```",
            "count": "calendar_scheduling_example_396"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(schedule1, schedule2, duration, work_hours):\n    start_time = datetime.strptime(work_hours[0], '%H:%M')\n    end_time = datetime.strptime(work_hours[1], '%H:%M')\n\n    # Create free time slots for both schedules\n    free_slots1 = get_free_time_slots(schedule1, start_time, end_time)\n    free_slots2 = get_free_time_slots(schedule2, start_time, end_time)\n\n    # Find overlapping time slots\n    for slot1 in free_slots1:\n        for slot2 in free_slots2:\n            # Find the overlapping time slot based on duration needed\n            latest_start = max(slot1[0], slot2[0])\n            earliest_end = min(slot1[1], slot2[1])\n            if (earliest_end - latest_start) >= timedelta(minutes=duration):\n                return f\"{latest_start.strftime('%H:%M')}:{(latest_start + timedelta(minutes=duration)).strftime('%H:%M')}\"\n\n    return None\n\ndef get_free_time_slots(schedule, start_time, end_time):\n    free_slots = []\n    current_start = start_time\n\n    # Add time slots before the first meeting\n    for meeting in sorted(schedule):\n        if current_start < meeting[0]:\n            free_slots.append((current_start, meeting[0]))\n        current_start = max(current_start, meeting[1])\n\n    # Add remaining time after the last meeting\n    if current_start < end_time:\n        free_slots.append((current_start, end_time))\n    \n    return free_slots\n\n# Input schedules\nchristine_schedule = [\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))\n]\n\nhelen_schedule = [\n    (datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\n# Meeting constraints\nmeeting_duration = 30  # in minutes\nwork_hours = ['09:00', '17:00']\n\n# Find available time\nresult = find_available_time(christine_schedule, helen_schedule, meeting_duration, work_hours)\nprint(result)  # This will output the proposed time\n'''",
            "count": "calendar_scheduling_example_579"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert busy time blocks to a list of unavailable time intervals\ndef get_busy_intervals(busy_times):\n    busy_intervals = []\n    for times in busy_times:\n        start_time = datetime.strptime(times[0], \"%H:%M\")\n        end_time = datetime.strptime(times[1], \"%H:%M\")\n        busy_intervals.append((start_time, end_time))\n    return busy_intervals\n\n# Function to find available time slots\ndef find_available_slot(carl_busy, margaret_busy, meeting_duration, work_start, work_end):\n    # Merge both busy schedules\n    all_busy = carl_busy + margaret_busy\n    all_busy.sort(key=lambda x: x[0])  # Sort by start time\n    \n    # Find available slots\n    available_slots = []\n    current_start = work_start\n\n    for start, end in all_busy:\n        if current_start < start:\n            available_slots.append((current_start, start))\n        current_start = max(current_start, end)\n\n    # Add the last slot if there's time left\n    if current_start < work_end:\n        available_slots.append((current_start, work_end))\n\n    # Check for meeting duration in available slots\n    for start, end in available_slots:\n        if (end - start) >= meeting_duration:\n            return start\n\n    return None\n\n# Define the busy times for Carl and Margaret\ncarl_busy_times = [(\"11:00\", \"11:30\"), (\"14:30\", \"15:00\"), (\"13:30\", \"14:00\"), (\"16:00\", \"16:30\")]\nmargaret_busy_times = [(\"09:00\", \"10:30\"), (\"11:00\", \"17:00\"), (\"09:30\", \"12:00\"), (\"13:30\", \"14:00\"),\n                       (\"15:30\", \"17:00\"), (\"09:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:30\"),\n                       (\"15:00\", \"17:00\"), (\"10:00\", \"12:00\"), (\"12:30\", \"14:00\"), (\"14:30\", \"17:00\")]\n\n# Convert busy times to datetime objects\ncarl_busy = get_busy_intervals(carl_busy_times)\nmargaret_busy = get_busy_intervals(margaret_busy_times)\n\n# Meeting duration and working hours\nmeeting_duration = timedelta(hours=1)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find available slot\navailable_start = find_available_slot(carl_busy, margaret_busy, meeting_duration, work_start, work_end)\n\nif available_start:\n    proposed_time = available_start.strftime('%H:%M') + ':' + (available_start + meeting_duration).strftime('%H:%M')\n    print(f\"{proposed_time}\")\nelse:\n    print(\"No available slot found.\")\n```",
            "count": "calendar_scheduling_example_858"
        },
        {
            "final_program_time": "{15:00:15:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Create a list of busy times for each participant\ndavid_busy = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\ndouglas_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\nralph_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\njordan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy times with labels\nall_busy_times = {\n    \"David\": david_busy,\n    \"Douglas\": douglas_busy,\n    \"Ralph\": ralph_busy,\n    \"Jordan\": jordan_busy,\n}\n\n# Function to check if a proposed time is free for all participants\ndef is_time_free(start_time, duration):\n    end_time = start_time + timedelta(minutes=duration)\n    for busy_times in all_busy_times.values():\n        for busy_start, busy_end in busy_times:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Look for a suitable time\ncurrent_time = work_start\n\n# Adjust to David's preference\ncurrent_time = max(current_time, datetime.strptime(\"14:00\", \"%H:%M\"))\n\nwhile current_time + timedelta(minutes=meeting_duration) <= work_end:\n    if is_time_free(current_time, meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n        print(f\"{proposed_start}:{proposed_end}\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_227"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nnicole_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\nruth_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\n# Function to check if a time slot is free for both participants\ndef is_time_free(start, end):\n    for busy_start, busy_end in nicole_schedule + ruth_schedule:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Try to find a suitable time slot on Monday, Tuesday or Wednesday\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n    current_time = working_hours[0]\n    end_time = working_hours[1]\n\n    while current_time + meeting_duration <= end_time:\n        if is_time_free(current_time, current_time + meeting_duration):\n            if day == \"Wednesday\" and current_time > datetime.strptime(\"13:30\", \"%H:%M\"):\n                break  # Do not schedule after 13:30 on Wednesday\n            print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\")\n            break\n        current_time += timedelta(minutes=30)  # Check the next possible time slot\n```",
            "count": "calendar_scheduling_example_791"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\ndenise_schedule = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nangela_schedule = []  # No meetings for Angela\n\nnatalie_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time\ndef find_meeting_time():\n    # Create a list of all busy slots from all participants\n    busy_slots = denise_schedule + natalie_schedule\n    busy_slots.sort()  # Sort by start time\n    \n    # Create a suitable time slot list, combining busy slots\n    slots = []\n    current_time = work_start\n    \n    # Check against busy slots\n    for busy_start, busy_end in busy_slots:\n        # If the current time is before the busy slot starts, we have a potential meeting slot\n        if current_time + meeting_duration <= busy_start:\n            slots.append((current_time, busy_start))\n        \n        # Move current time to the end of the current busy slot\n        if current_time < busy_end:\n            current_time = busy_end\n\n    # Check for the last available slot before work ends\n    if current_time + meeting_duration <= work_end:\n        slots.append((current_time, work_end))\n    \n    # Return the first available slot\n    if slots:\n        return f\"{slots[0][0].strftime('%H:%M')}:{(slots[0][0] + meeting_duration).strftime('%H:%M')}\"\n    \n    return None  # No available slot found\n\n# Get the proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time range and participants' schedules\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Participants' blocked times\nolivia_schedule = [(datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                   (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                   (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\nvirginia_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                     (datetime.strptime('11:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                     (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\npaul_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                 (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Function to check if two time slots overlap\ndef is_overlapping(start1, end1, start2, end2):\n    return start1 < end2 and start2 < end1\n\n# Function to create a free time list from the blocked schedules\ndef get_free_times(schedule):\n    free_times = []\n    current_time = work_start\n    \n    for start, end in sorted(schedule):\n        if current_time < start:\n            free_times.append((current_time, start))\n        current_time = max(current_time, end)\n    \n    if current_time < work_end:\n        free_times.append((current_time, work_end))\n    \n    return free_times\n\n# Get free times for each participant\nolivia_free_times = get_free_times(olivia_schedule)\nvirginia_free_times = get_free_times(virginia_schedule)\npaul_free_times = get_free_times(paul_schedule)\n\n# Find the common free time slot of at least one hour\ndef find_common_free_time(olivia_free_times, virginia_free_times, paul_free_times):\n    for ol_start, ol_end in olivia_free_times:\n        for vi_start, vi_end in virginia_free_times:\n            for pa_start, pa_end in paul_free_times:\n                start = max(ol_start, vi_start, pa_start)\n                end = min(ol_end, vi_end, pa_end)\n                if (end - start) >= meeting_duration:\n                    return start, end\n    return None\n\n# Get the proposed meeting time\nmeeting_time = find_common_free_time(olivia_free_times, virginia_free_times, paul_free_times)\n\n# Output the proposed meeting time\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f'{start_time.strftime(\"%H:%M\")}:{end_time.strftime(\"%H:%M\")}')\nelse:\n    print(\"No common meeting time found.\")\n```",
            "count": "calendar_scheduling_example_106"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules\nschedules = {\n    \"Patrick\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Kayla\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Carl\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Christian\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is available\ndef is_slot_available(start, end, busy_times):\n    for busy_start, busy_end in busy_times:\n        if start < busy_end and end > busy_start:\n            return False\n    return True\n\n# Finding a suitable time for the meeting\nfor start_hour in range(9, 17):\n    for start_minute in range(0, 60, 30):  # Check every 30 minutes\n        start_time = datetime.strptime(f\"{start_hour:02}:{start_minute:02}\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        if start_time >= work_start and end_time <= work_end:\n            if all(is_slot_available(start_time, end_time, schedules[participant]) for participant in schedules):\n                print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n                break\n```",
            "count": "calendar_scheduling_example_172"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(adam_schedule, roy_schedule, duration):\n    work_start = datetime.strptime('09:00', '%H:%M')\n    work_end = datetime.strptime('17:00', '%H:%M')\n    \n    # Create a list of all busy times (as tuples)\n    adam_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) for start, end in adam_schedule]\n    roy_busy_times = [(datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')) for start, end in roy_schedule]\n    \n    # Merge busy times and sort\n    merged_busy_times = sorted(adam_busy_times + roy_busy_times)\n    \n    # Check for gaps in the schedule\n    current_time = work_start\n    for start, end in merged_busy_times:\n        if current_time + duration <= start:\n            return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n        current_time = max(current_time, end)\n\n    # Final check for time after the last busy slot\n    if current_time + duration <= work_end:\n        return current_time.strftime('%H:%M'), (current_time + duration).strftime('%H:%M')\n    \n    return None, None\n\n# Schedules for Adam and Roy\nadam_schedule = [('09:30', '10:00'), ('12:30', '13:00'), ('14:30', '15:00'), ('16:30', '17:00')]\nroy_schedule = [('10:00', '11:00'), ('11:30', '13:00'), ('13:30', '14:30'), ('16:30', '17:00')]\nmeeting_duration = timedelta(minutes=30)\n\nstart_time, end_time = find_meeting_time(adam_schedule, roy_schedule, meeting_duration)\nif start_time and end_time:\n    print(f\"{start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_594"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(eric_schedule, henry_schedule, meeting_duration):\n    # Work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n\n    # Convert schedules to time slots in minutes\n    eric_busy = [(start, start + duration) for start, duration in eric_schedule]\n    henry_busy = [(start, start + duration) for start, duration in henry_schedule]\n\n    # Combine and sort busy times\n    busy_times = sorted(eric_busy + henry_busy)\n\n    # Find available slots\n    last_end = work_start\n    for start, end in busy_times:\n        # Check for available time before the next busy period\n        if last_end + meeting_duration <= start:\n            return f\"{last_end // 60:02}:{last_end % 60:02}:{(last_end + meeting_duration) // 60:02}:{(last_end + meeting_duration) % 60:02}\"\n        last_end = max(last_end, end)\n\n    # Check if there's time after the last busy period until work end\n    if last_end + meeting_duration <= work_end:\n        return f\"{last_end // 60:02}:{last_end % 60:02}:{(last_end + meeting_duration) // 60:02}:{(last_end + meeting_duration) % 60:02}\"\n\n    return None\n\n# Eric's schedule (busy times during the day)\neric_schedule = [(12 * 60, 60), (14 * 60, 60)]  # Meetings at 12:00-13:00 and 14:00-15:00\n\n# Henry's schedule (busy times during the day)\nhenry_schedule = [\n    (9 * 60 + 30, 30), (10 * 60 + 30, 30), (11 * 60 + 30, 60), \n    (13 * 60, 30), (14 * 60 + 30, 30), (16 * 60, 60)\n]  # Meetings at 9:30-10:00, 10:30-11:00, etc.\n\n# Meeting duration in minutes\nmeeting_duration = 30  # Half an hour\n\n# Find a suitable meeting time\nmeeting_time = find_meeting_time(eric_schedule, henry_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_553"
        },
        {
            "final_program_time": "{9:00:9:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(terry_schedule, frances_schedule, duration):\n    work_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Check for each day\n    for day in range(5):  # 0=Monday, 1=Tuesday, 2=Wednesday, 3=Thursday, 4=Friday\n        time_cursor = work_hours_start\n        while time_cursor + duration <= work_hours_end:\n            # Check if this time slot is free for both\n            meeting_end = time_cursor + duration\n            if (not any(start <= time_cursor < end or start < meeting_end <= end for start, end in terry_schedule[day]) and\n                not any(start <= time_cursor < end or start < meeting_end <= end for start, end in frances_schedule[day])):\n                return f\"{time_cursor.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n            time_cursor += timedelta(minutes=30)  # Move to the next 30-minute slot\n\n    return None\n\n# Schedule constraints\nterry_schedule = [\n    [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Monday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],  # Tuesday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Wednesday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],  # Thursday\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Friday\n]\n\nfrances_schedule = [\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],  # Monday\n    [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n     (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n     (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],  # Tuesday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n     (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Wednesday\n    [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Thursday\n    [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n     (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],  # Friday\n]\n\nmeeting_duration = timedelta(minutes=30)\n\nproposed_time = find_meeting_time(terry_schedule, frances_schedule, meeting_duration)\nprint(proposed_time)\n'''",
            "count": "calendar_scheduling_example_935"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Define the busy schedules for Bobby and Michael\nbobby_busy = [\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n]\nmichael_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))\n]\n\n# Define the duration of the meeting\nmeeting_duration = timedelta(minutes=30)\n\ndef is_time_free(start_time, end_time, busy_schedule):\n    for busy_start, busy_end in busy_schedule:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\ndef find_meeting_time(working_hours, bobby_busy, michael_busy, meeting_duration):\n    for start_hour, end_hour in working_hours:\n        current_time = start_hour\n        while current_time + meeting_duration <= end_hour:\n            end_time = current_time + meeting_duration\n            if is_time_free(current_time, end_time, bobby_busy) and is_time_free(current_time, end_time, michael_busy):\n                return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n            current_time += timedelta(minutes=30)  # Increment in half-hour blocks\n    return None\n\n# Find the meeting time\nmeeting_time = find_meeting_time(working_hours, bobby_busy, michael_busy)\n\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")  # Output the format HH:MM:HH:MM\n```",
            "count": "calendar_scheduling_example_640"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and participants' schedules\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Diane's schedule\ndiane_schedule = [\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\n# Matthew's schedule\nmatthew_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Combine both participants' schedules\ncombined_schedule = diane_schedule + matthew_schedule\n\n# Sort the combined schedule based on start times\ncombined_schedule.sort(key=lambda x: x[0])\n\n# Duration of the meeting\nmeeting_duration = timedelta(hours=1)\n\n# Function to find available slot\ndef find_available_time():\n    current_time = work_hours_start\n    while current_time + meeting_duration <= work_hours_end:\n        available = True\n        for start, end in combined_schedule:\n            if start < current_time + meeting_duration and end > current_time:\n                available = False\n                break\n        if available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + meeting_duration).strftime(\"%H:%M\")\n        current_time += timedelta(minutes=30)  # Check next half-hour slot\n    return None\n\n# Get proposed time\nproposed_time = find_available_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_985"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"John\": [(datetime(2023, 10, 30, 11, 30), datetime(2023, 10, 30, 12, 0)),\n             (datetime(2023, 10, 30, 14, 0), datetime(2023, 10, 30, 14, 30))],\n    \"Megan\": [(datetime(2023, 10, 30, 12, 0), datetime(2023, 10, 30, 12, 30)),\n              (datetime(2023, 10, 30, 14, 0), datetime(2023, 10, 30, 15, 0)),\n              (datetime(2023, 10, 30, 15, 30), datetime(2023, 10, 30, 16, 0))],\n    \"Brandon\": [],\n    \"Kimberly\": [(datetime(2023, 10, 30, 9, 0), datetime(2023, 10, 30, 9, 30)),\n                 (datetime(2023, 10, 30, 10, 0), datetime(2023, 10, 30, 10, 30)),\n                 (datetime(2023, 10, 30, 11, 0), datetime(2023, 10, 30, 14, 30)),\n                 (datetime(2023, 10, 30, 15, 0), datetime(2023, 10, 30, 16, 0)),\n                 (datetime(2023, 10, 30, 16, 30), datetime(2023, 10, 30, 17, 0))],\n    \"Sean\": [(datetime(2023, 10, 30, 10, 0), datetime(2023, 10, 30, 11, 0)),\n             (datetime(2023, 10, 30, 11, 30), datetime(2023, 10, 30, 14, 0)),\n             (datetime(2023, 10, 30, 15, 0), datetime(2023, 10, 30, 15, 30))],\n    \"Lori\": [(datetime(2023, 10, 30, 9, 0), datetime(2023, 10, 30, 9, 30)),\n             (datetime(2023, 10, 30, 10, 30), datetime(2023, 10, 30, 12, 0)),\n             (datetime(2023, 10, 30, 13, 0), datetime(2023, 10, 30, 14, 30)),\n             (datetime(2023, 10, 30, 16, 0), datetime(2023, 10, 30, 16, 30))]\n}\n\n# Define work hours\nwork_start = datetime(2023, 10, 30, 9, 0)\nwork_end = datetime(2023, 10, 30, 17, 0)\n\n# Create a list of busy times\nbusy_times = []\nfor schedule in schedules.values():\n    busy_times.extend(schedule)\n\n# Sort busy times\nbusy_times.sort()\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find available slots\navailable_slots = []\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    # Check if the current time conflicts with any busy times\n    conflict = False\n    for start, end in busy_times:\n        if current_time < end and current_time + meeting_duration > start:\n            conflict = True\n            break\n    if not conflict:\n        available_slots.append(current_time)\n    \n    current_time += timedelta(minutes=1)\n\n# Select the earliest available slot\nif available_slots:\n    proposed_time_start = available_slots[0]\n    proposed_time_end = proposed_time_start + meeting_duration\n    print(f\"{proposed_time_start.strftime('%H:%M')}:{proposed_time_end.strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_337"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules of each participant\njuan_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nmarilyn_busy = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n\nronald_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Merge all busy schedules\nbusy_times = juan_busy + marilyn_busy + ronald_busy\n\n# Create a list of free time slots\nfree_time_slots = []\ncurrent_time = work_start\n\nwhile current_time + meeting_duration <= work_end:\n    # Check if current_time conflicts with any busy schedules\n    conflict = False\n    for start, end in busy_times:\n        if start <= current_time < end or start < current_time + meeting_duration <= end:\n            conflict = True\n            break\n    if not conflict:\n        free_time_slots.append(current_time)\n    current_time += timedelta(minutes=1)\n\n# Select the first available time slot\nif free_time_slots:\n    proposed_time = free_time_slots[0]\n    start_time_str = proposed_time.strftime(\"%H:%M\")\n    end_time_str = (proposed_time + meeting_duration).strftime(\"%H:%M\")\n    print(f\"{start_time_str}:{end_time_str}\")\n```\n",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(evelyn_availability, randy_availability, meeting_duration, preference):\n    # Create a list of time slots\n    time_slots = []\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    current_time = start_time\n    while current_time + meeting_duration <= end_time:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every half hour\n\n    # Filter available slots based on participant schedules\n    available_slots = []\n    for slot in time_slots:\n        meeting_end_time = slot + meeting_duration\n        if (slot >= evelyn_availability[0] and meeting_end_time <= evelyn_availability[1] and\n            slot >= randy_availability[0] and meeting_end_time <= randy_availability[1]):\n            available_slots.append(slot)\n\n    # Further filter based on Evelyn's preference\n    for slot in available_slots:\n        if slot.hour < 13:  # Evelyn prefers meeting before 13:00\n            return f\"{slot.strftime('%H:%M')}:{(slot + meeting_duration).strftime('%H:%M')}\"\n\n    return \"No available time slot found\"\n\n# Define the participants' schedules\nevelyn_availability = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))\nrandy_availability = (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\nmeeting_duration = timedelta(minutes=30)\n\n# Find suitable meeting time\nmeeting_time = find_meeting_time(evelyn_availability, randy_availability, meeting_duration, None)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_555"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define participants' existing schedules\n    judith_schedule = [\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))   # Wednesday\n    ]\n    \n    timothy_schedule = [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),  # Tuesday\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),  # Tuesday\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))   # Wednesday\n    ]\n    \n    # Meeting duration\n    meeting_duration = timedelta(hours=1)\n    \n    # Check available times\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    for day in days:\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            meeting_start = current_time\n            meeting_end = current_time + meeting_duration\n            \n            # If meeting is on Monday, check Judith's preferences\n            if day == 'Monday' and (meeting_start < datetime.strptime(\"12:00\", \"%H:%M\")):\n                current_time = meeting_start.replace(hour=current_time.hour + 1)\n                continue\n            \n            # Check if this slot overlaps with any existing schedules\n            overlap = False\n            for start, end in judith_schedule:\n                if not (meeting_end <= start or meeting_start >= end):\n                    overlap = True\n                    break\n            \n            if not overlap:\n                for start, end in timothy_schedule:\n                    if not (meeting_end <= start or meeting_start >= end):\n                        overlap = True\n                        break\n            \n            if not overlap:\n                return f'{meeting_start.strftime(\"%H:%M\")}:{meeting_end.strftime(\"%H:%M\")}'\n            \n            current_time += timedelta(minutes=30)  # Check next half an hour\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_784"
        },
        {
            "final_program_time": "{9:00:10:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\n# Meeting Scheduler\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nlaura_schedule = {\n    \"Monday\": [(10, 30, 11, 0), (12, 30, 13, 0), (14, 30, 15, 30), (16, 0, 17, 0)],\n    \"Tuesday\": [(9, 30, 10, 0), (11, 0, 11, 30), (13, 0, 13, 30), (14, 30, 15, 0), (16, 0, 17, 0)],\n    \"Wednesday\": [(11, 30, 12, 0), (12, 30, 13, 0), (15, 30, 16, 30)],\n    \"Thursday\": [(10, 30, 11, 0), (12, 0, 13, 30), (15, 0, 15, 30), (16, 0, 16, 30)]\n}\n\nphilip_schedule = {\n    \"Monday\": [(9, 0, 17, 0)],\n    \"Tuesday\": [(9, 0, 11, 0), (11, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 0, 16, 30)],\n    \"Wednesday\": [(9, 0, 10, 0), (11, 0, 12, 0), (12, 30, 17, 0)],\n    \"Thursday\": [(9, 0, 10, 30), (11, 0, 12, 30), (13, 0, 17, 0)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find free time slots\ndef find_free_time_slots(schedule):\n    work_start = (9, 0)\n    work_end = (17, 0)\n    \n    free_slots = []\n    \n    for day, busy_times in schedule.items():\n        # Convert busy times to datetime objects\n        busy_periods = [datetime.strptime(f\"{day} {start[0]}:{start[1]}\", \"%A %H:%M\") \n                        for start in busy_times]\n        \n        busy_periods.sort()\n        \n        current_start = datetime.strptime(f\"{day} {work_start[0]}:{work_start[1]}\", \"%A %H:%M\")\n        end_of_workday = datetime.strptime(f\"{day} {work_end[0]}:{work_end[1]}\", \"%A %H:%M\")\n        \n        # Check for free slots in between busy times\n        for busy_start, busy_end in zip(busy_periods, busy_periods[1:]):\n            if current_start + meeting_duration <= busy_start:\n                free_slots.append((current_start, busy_start))\n            current_start = max(current_start, busy_end)\n        \n        # Check end of workday\n        if current_start + meeting_duration <= end_of_workday:\n            free_slots.append((current_start, end_of_workday))\n    \n    return free_slots\n\n# Find free slots for Laura and Philip\nlaura_free_slots = find_free_time_slots(laura_schedule)\nphilip_free_slots = find_free_time_slots(philip_schedule)\n\n# Find overlapping free slots\nfor day in laura_schedule.keys():\n    for laura_slot in laura_free_slots:\n        if laura_slot[0].strftime(\"%A\") == day:\n            for philip_slot in philip_free_slots:\n                if philip_slot[0].strftime(\"%A\") == day:\n                    # Check for overlap\n                    start_time = max(laura_slot[0], philip_slot[0])\n                    end_time = min(laura_slot[1], philip_slot[1])\n                    if start_time + meeting_duration <= end_time:\n                        proposed_time = f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n                        print(f\"{proposed_time}\")\n                        break\n```",
            "count": "calendar_scheduling_example_825"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define busy schedules for Joshua and Joyce\njoshua_busy = [\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Tuesday\n]\n\njoyce_busy = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Monday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),  # Tuesday\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),  # Wednesday\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),  # Wednesday\n]\n\n# Define the working hours and duration of the meeting\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if a proposed time is free for both\ndef is_time_free(start_time, duration, joshua_busy, joyce_busy):\n    end_time = start_time + duration\n    for busy_time in joshua_busy + joyce_busy:\n        if start_time < busy_time[1] and end_time > busy_time[0]:\n            return False\n    return True\n\n# Find a suitable time on Monday\nproposed_time = None\nfor day in range(5):  # 0=Monday, 1=Tuesday, 2=Wednesday\n    current_time = working_hours_start\n    while current_time + meeting_duration <= working_hours_end:\n        if day == 0 and current_time >= datetime.strptime(\"12:00\", \"%H:%M\"):  # Monday constraint for Joyce\n            if is_time_free(current_time, meeting_duration, joshua_busy, joyce_busy):\n                proposed_time = current_time\n                break\n        elif day == 1:\n            if is_time_free(current_time, meeting_duration, joshua_busy, joyce_busy):\n                proposed_time = current_time\n                break\n        elif day == 2:\n            if is_time_free(current_time, meeting_duration, joshua_busy, joyce_busy):\n                proposed_time = current_time\n                break     \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n# Output the proposed time\nif proposed_time:\n    print(f\"{proposed_time.strftime('%H:%M')}:{(proposed_time + meeting_duration).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_765"
        },
        {
            "final_program_time": "{16:30:17:00}",
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules for each participant\nschedules = {\n    \"Diane\": [(datetime(2023, 10, 16, 9, 30), datetime(2023, 10, 16, 10, 0)),\n              (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0))],\n    \"Jack\": [(datetime(2023, 10, 16, 13, 30), datetime(2023, 10, 16, 14, 0)),\n             (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 15, 0))],\n    \"Eugene\": [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 10, 0)),\n               (datetime(2023, 10, 16, 10, 30), datetime(2023, 10, 16, 11, 30)),\n               (datetime(2023, 10, 16, 12, 0), datetime(2023, 10, 16, 14, 30)),\n               (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 16, 30))],\n    \"Patricia\": [(datetime(2023, 10, 16, 9, 30), datetime(2023, 10, 16, 10, 30)),\n                 (datetime(2023, 10, 16, 11, 0), datetime(2023, 10, 16, 12, 0)),\n                 (datetime(2023, 10, 16, 12, 30), datetime(2023, 10, 16, 14, 0)),\n                 (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 16, 30))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available time slot\ndef find_available_slot(schedules, work_start, work_end, duration):\n    # Convert work hours to datetime objects\n    work_start = datetime(2023, 10, 16, work_start.hour, work_start.minute)\n    work_end = datetime(2023, 10, 16, work_end.hour, work_end.minute)\n    \n    # Create list of all blocked times\n    blocked_times = []\n    for busy_schedule in schedules.values():\n        blocked_times.extend(busy_schedule)\n    \n    # Generate free time slots from work start to end\n    free_slots = []\n    current_time = work_start\n    \n    while current_time + duration <= work_end:\n        # Check if current_time is blocked\n        is_blocked = any(start <= current_time < end for start, end in blocked_times)\n        \n        if not is_blocked:\n            free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=1)\n\n    # Return the first available slot\n    if free_slots:\n        return free_slots[0]\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find available time\navailable_time = find_available_slot(schedules, work_start, work_end, meeting_duration)\n\n# Output the proposed meeting time\nmeeting_start = available_time\nmeeting_end = available_time + meeting_duration\noutput = f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_103"
        },
        {
            "final_program_time": "{15:30:16:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(martha_schedule, beverly_schedule, meeting_duration):\n    work_hours = [(9, 17)]\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    for day in days:\n        day_start = datetime.strptime(f\"{day} 09:00\", '%A %H:%M')\n        day_end = datetime.strptime(f\"{day} 17:00\", '%A %H:%M')\n        \n        # Create blocks for Martha and Beverly\n        martha_blocks = martha_schedule.get(day, [])\n        beverly_blocks = beverly_schedule.get(day, [])\n        \n        # Create a list of all blocked times\n        all_blocks = martha_blocks + beverly_blocks\n        all_blocks.sort()\n\n        # Check for available slots\n        free_time_start = day_start\n        \n        for block in all_blocks:\n            block_start = block[0]\n            block_end = block[1]\n            \n            if free_time_start + timedelta(hours=meeting_duration) <= block_start:\n                # Found a suitable time\n                meeting_start = free_time_start\n                meeting_end = meeting_start + timedelta(hours=meeting_duration)\n                if meeting_end <= block_start:  # Check that the meeting ends before the block starts\n                    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n                \n            # Move free time start to the end of the current block\n            free_time_start = max(free_time_start, block_end)\n        \n        # Check if there is available time after the last block till day end\n        if free_time_start + timedelta(hours=meeting_duration) <= day_end:\n            meeting_start = free_time_start\n            meeting_end = meeting_start + timedelta(hours=meeting_duration)\n            if meeting_end <= day_end:  # Check that the meeting ends before the workday ends\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n    \n    return None  # In case no suitable time found\n\nmartha_schedule = {\n    \"Monday\": [(datetime.strptime(\"16:00\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))],\n    \"Tuesday\": [(datetime.strptime(\"15:00\", '%H:%M'), datetime.strptime(\"15:30\", '%H:%M'))],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", '%H:%M'), datetime.strptime(\"11:00\", '%H:%M')),\n        (datetime.strptime(\"14:00\", '%H:%M'), datetime.strptime(\"14:30\", '%H:%M'))\n    ]\n}\n\nbeverly_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", '%H:%M'), datetime.strptime(\"13:30\", '%H:%M')),\n        (datetime.strptime(\"14:00\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))\n    ],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", '%H:%M'), datetime.strptime(\"15:30\", '%H:%M')),\n        (datetime.strptime(\"16:30\", '%H:%M'), datetime.strptime(\"17:00\", '%H:%M'))\n    ]\n}\n\nmeeting_duration = 1  # in hours\nprint(find_meeting_time(martha_schedule, beverly_schedule, meeting_duration))\n```",
            "count": "calendar_scheduling_example_767"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Participant schedules\nschedules = {\n    'Joan': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Megan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Austin': [],\n    'Betty': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Judith': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Terry': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Kathryn': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\ndef can_schedule_meeting(start_time):\n    end_time = start_time + meeting_duration\n    for busy_times in schedules.values():\n        for (busy_start, busy_end) in busy_times:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if can_schedule_meeting(current_time):\n            return current_time.strftime('%H:%M'), (current_time + meeting_duration).strftime('%H:%M')\n        current_time += timedelta(minutes=30)  # Check every half hour\n    return None\n\nstart_time, end_time = find_meeting_time()\nprint(f'{{{start_time}:{end_time}}}')\n```",
            "count": "calendar_scheduling_example_441"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(gary_schedule, david_schedule, meeting_duration_hours):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=meeting_duration_hours)\n\n    # Check for available time slots\n    for day in ['Monday', 'Tuesday']:\n        gary_blocks = gary_schedule[day]\n        david_blocks = david_schedule[day]\n\n        # Create a combined list of busy times\n        busy_times = gary_blocks + david_blocks\n        \n        # Create a time range for the work hours\n        current_time = work_start\n        while current_time + meeting_duration <= work_end:\n            # Check if current_time falls within any busy time\n            is_busy = any(start <= current_time < end for start, end in busy_times)\n            if not is_busy:\n                # Check if duration fits within the next available time\n                is_busy_for_meeting = any(start <= current_time + meeting_duration <= end for start, end in busy_times)\n                if not is_busy_for_meeting:\n                    return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=30)  # Increment to check the next half hour\n\n    return \"No available time found\"\n\n# Schedules for Gary and David\ngary_schedule = {\n    'Monday': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\ndavid_schedule = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration in hours\nmeeting_duration_hours = 1\n\n# Find suitable meeting time\nmeeting_time = find_meeting_time(gary_schedule, david_schedule, meeting_duration_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_662"
        },
        {
            "final_program_time": "{16:00:17:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start_time = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules in (start, end) tuples\nstephanie_schedule = [\n    (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n]\n\nbetty_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n]\n\n# Add the constraints for Tuesday\nbetty_schedule.extend([\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n])\n\n# Combine schedules based on the days\ncombined_schedule = {\n    \"Monday\": stephanie_schedule + betty_schedule,\n    \"Tuesday\": betty_schedule,\n    \"Wednesday\": []\n}\n\n# Search for an available time slot\ndef find_meeting_time():\n    for day, schedules in combined_schedule.items():\n        current_time = work_start_time\n        while current_time + meeting_duration <= work_end_time:\n            # Check for conflicts\n            end_time = current_time + meeting_duration\n            conflict = False\n            for start, end in schedules:\n                if (current_time < end and end_time > start):\n                    conflict = True\n                    break\n                    \n            if not conflict:\n                return current_time.strftime(\"%H:%M\"), end_time.strftime(\"%H:%M\")\n                \n            current_time += timedelta(minutes=30)  # Check next slot\n            \n    return None\n\n# Get the proposed time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_703"
        },
        {
            "final_program_time": "{9:30:10:00}",
            "expected_time": "{9:30:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# James's schedule\njames_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))\n    ],\n    \"Thursday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n}\n\n# Function to check for available meeting times\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Thursday\"]:  # Exclude Wednesday\n        busy_times = james_schedule[day]\n        current_time = work_hours_start\n        \n        while current_time + meeting_duration <= work_hours_end:\n            # Check if current_time is available\n            is_available = True\n            \n            for start, end in busy_times:\n                if current_time < end and current_time + meeting_duration > start:\n                    is_available = False\n                    break\n            \n            if is_available:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            \n            current_time += timedelta(minutes=30)  # Move to the next possible start time\n            \n    return None\n\n# Get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_826"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define schedules\nschedules = {\n    'Larry': [(start_time, end_time)],\n    'Samuel': [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    ]\n}\n\n# Function to find the earliest available slot\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        proposed_start = start_time\n        while proposed_start + meeting_duration <= end_time:\n            proposed_end = proposed_start + meeting_duration\n            is_available = True\n            \n            for participant, busy_slots in schedules.items():\n                for busy_start, busy_end in busy_slots:\n                    if proposed_start < busy_end and proposed_end > busy_start:\n                        is_available = False\n                        break\n            \n            if is_available:\n                if day == 'Tuesday' and (proposed_start < datetime.strptime(\"12:00\", \"%H:%M\") or proposed_end > datetime.strptime(\"15:30\", \"%H:%M\")):\n                    return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n                elif day == 'Wednesday':\n                    continue\n                else:\n                    return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n                    \n            proposed_start += timedelta(minutes=30)\n\n# Generate proposed time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_704"
        }
    ]
}