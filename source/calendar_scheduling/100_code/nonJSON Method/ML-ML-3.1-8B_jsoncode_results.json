{
    "0shot": [
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants):\n    meeting_duration = timedelta(hours=1)\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\nparticipants = {\n    'Michelle': {'blocked': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 12, 0)]},\n    'Steven': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                          datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0),\n                          datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0),\n                          datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n    'Jerry': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                         datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 11, 0),\n                         datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 30),\n                         datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 14, 30),\n                         datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0),\n                         datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nstart_time = datetime(2024, 7, 22, 9, 0)\nend_time = datetime(2024, 7, 22, 17, 0)\nprint(schedule_meeting(start_time, end_time, participants))\n```",
            "count": "calendar_scheduling_example_0"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=0.5), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                if preferred_time is None or time < preferred_time:\n                    return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=0.5)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Raymond': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                           datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0),\n                           datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30),\n                           datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n    'Billy': {'blocked': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                         datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0),\n                         datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    'Donald': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                           datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 11, 0),\n                           datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0),\n                           datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30),\n                           datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=0.5), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                if preferred_time is None or time < preferred_time:\n                    return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=0.5)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Roy': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                       datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                       datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30),\n                       datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)]},\n    'Kathryn': {'blocked': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0),\n                           datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    'Amy': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                        datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                        datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30),\n                        datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0),\n                        datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0),\n                        datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30),\n                        datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n```",
            "count": "calendar_scheduling_example_2"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=1), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                if preferred_time is None or time < preferred_time:\n                    return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=1)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Arthur': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                          datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 12, 0),\n                          datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n    'Michael': {'blocked': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30),\n                            datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)]},\n    'Samantha': {'blocked': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0),\n                             datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 15, 0),\n                             datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(\"{0}:{1}\".format(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[0], schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[1]))\n```",
            "count": "calendar_scheduling_example_3"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=0.5), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                if preferred_time is None or time < preferred_time:\n                    return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=0.5)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Donna': {'blocked': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30),\n                         datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n    'John': {'blocked': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30),\n                         datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    'Billy': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0),\n                          datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 14, 0),\n                          datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(\"{0}:{1}\".format(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[0], schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[1]))\n```",
            "count": "calendar_scheduling_example_4"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(kathryn_schedule, charlotte_schedule, lauren_schedule, meeting_duration, charlotte_constraint):\n    # Sort schedules by start time\n    schedules = sorted([kathryn_schedule, charlotte_schedule, lauren_schedule], key=lambda x: x[0])\n\n    for start_time in range(9, 17):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9 or meeting_end_time > 17:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if charlotte_constraint and meeting_end_time > 13:30:\n                    continue\n                return f\"{start_time:02d}:{start_time//100:02d}:{meeting_end_time:02d}:{meeting_end_time//100:02d}\"\n\n# Define schedules\nkathryn_schedule = [(9*60, 9*60+30), (10*60, 11*60), (11*60, 12*60), (13*60+30, 14*60+30), (16*60+30, 17*60)]\ncharlotte_schedule = [(12*60, 12*60+30), (16*60, 16*60+30)]\nlauren_schedule = [(9*60, 10*60), (12*60, 12*60+30), (13*60+30, 14*60+30), (15*60, 16*60), (16*60+30, 17*60)]\n\ncharlotte_constraint = True\n\n# Find meeting time\nmeeting_time = schedule_meeting(kathryn_schedule, charlotte_schedule, lauren_schedule, 30, charlotte_constraint)\n\n# Print result\nprint(f\"{{{meeting_time}}}\")\n```",
            "count": "calendar_scheduling_example_5"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(thomas_schedule, dylan_schedule, jerry_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([dylan_schedule, jerry_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\n# Define schedules\nthomas_schedule = []\ndylan_schedule = [(10*60, 11*60), (13*60*30, 14*60)]\njerry_schedule = [(9*60, 11*60), (11*60+30, 14*60+30), (16*60, 17*60)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(thomas_schedule, dylan_schedule, jerry_schedule, 60)}}}\")\n```",
            "count": "calendar_scheduling_example_6"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(heather_schedule, nicholas_schedule, zachary_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([zachary_schedule, heather_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if start_time >= 14*60:\n                    continue\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\n# Define schedules\nheather_schedule = [(9*60, 9*60+30), (10*60, 11*60), (13*60, 14*60), (14*60+30, 15*60), (16*60, 16*60+30)]\nnicholas_schedule = []\nzachary_schedule = [(9*60, 10*60+30), (11*60, 12*60), (12*60+30, 13*60), (13*60+30, 16*60+30)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(heather_schedule, nicholas_schedule, zachary_schedule, 30)}}}\")\n```",
            "count": "calendar_scheduling_example_7"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(adam_schedule, jerry_schedule, matthew_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([matthew_schedule, jerry_schedule, adam_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\n# Define schedules\nadam_schedule = [(10*60, 10*60+30), (12*60+30, 13*60), (13*60+30, 14*60+30)]\njerry_schedule = [(9*60, 9*60+30), (12*60, 12*60+30), (15*60, 16*60)]\nmatthew_schedule = [(9*60+30, 11*60), (11*60+30, 12*60+30), (13*60, 14*60), (14*60+30, 17*60)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(adam_schedule, jerry_schedule, matthew_schedule, 30)}}}\")\n```",
            "count": "calendar_scheduling_example_8"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(diane_schedule, kelly_schedule, deborah_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([deborah_schedule, diane_schedule, kelly_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\n# Define schedules\ndiane_schedule = [(9*60, 9*60+30), (12*60, 12*60+30), (14*60+30, 15*60+30)]\nkelly_schedule = [(9*60+30, 10*60), (10*60+30, 11*60)]\ndeborah_schedule = [(9*60, 9*60+30), (10*60, 14*60), (14*60+30, 17*60)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(diane_schedule, kelly_schedule, deborah_schedule, 30)}}}\")\n```",
            "count": "calendar_scheduling_example_9"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(diana_schedule, ethan_schedule, janet_schedule, meeting_duration, janet_preference):\n    # Convert time strings to datetime objects\n    diana_schedule = [datetime.strptime(time, '%H:%M') for time in diana_schedule]\n    ethan_schedule = [datetime.strptime(time, '%H:%M') for time in ethan_schedule]\n    janet_schedule = [datetime.strptime(time, '%H:%M') for time in janet_schedule]\n    \n    # Sort schedules by start time\n    diana_schedule.sort()\n    ethan_schedule.sort()\n    janet_schedule.sort()\n    \n    # Find available time slots for Diana and Ethan\n    diana_available = []\n    ethan_available = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            if not any(time >= s and time < e for s, e in diana_schedule) and not any(time >= s and time < e for s, e in ethan_schedule):\n                diana_available.append((time, time + timedelta(minutes=30)))\n                ethan_available.append((time, time + timedelta(minutes=30)))\n            time += timedelta(minutes=30)\n    \n    # Filter available time slots based on Janet's preference and schedule\n    janet_available = [time for time in diana_available + ethan_available if time[0] >= datetime(12, 0, 0)]\n    janet_available = [time for time in janet_available if not any(time[0] >= s and time[1] <= e for s, e in janet_schedule)]\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in janet_available:\n        if time[1] - time[0] >= meeting_duration:\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\ndiana_schedule = ['11:30', '13:00']\nethan_schedule = []\njanet_schedule = ['09:00', '10:00', '12:30', '13:00', '14:00', '15:00', '15:30']\nmeeting_duration = 30\njanet_preference = True\n\nprint(schedule_meeting(diana_schedule, ethan_schedule, janet_schedule, meeting_duration, janet_preference))\n```",
            "count": "calendar_scheduling_example_10"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'Alexander': ['09:30', '10:00', '10:30', '11:00', '12:30', '13:00', '14:30', '15:00', '16:00', '17:00'],\n    'Elizabeth': ['09:00', '09:30', '11:30', '12:30', '13:00', '14:30'],\n    'Walter': ['09:00', '14:30', '15:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_11"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'David': [],\n    'Debra': ['09:30', '10:00', '11:00', '11:30', '12:00', '13:00', '14:00', '14:30', '16:00', '16:30'],\n    'Kevin': ['09:00', '12:00', '14:00', '17:00']\n}\nmeeting_duration = 60\n\nprint(schedule_meeting(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_12"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, preferences=None):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Filter available time slots based on preferences\n    if preferences:\n        available_slots = [time for time in available_slots if time[0].hour >= preferences['earliest']]\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'Gerald': ['09:00', '09:30', '13:00', '14:00', '15:00', '15:30', '16:00', '17:00'],\n    'Roy': [],\n    'Barbara': ['09:30', '10:00', '11:30', '14:00', '14:30', '15:00', '15:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 13}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_13"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, preferences=None):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Filter available time slots based on preferences\n    if preferences:\n        available_slots = [time for time in available_slots if time[0].hour >= preferences['earliest']]\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'Brandon': ['13:00', '14:00', '15:30', '16:00', '16:30', '17:00'],\n    'Jerry': [],\n    'Bradley': ['09:00', '11:30', '12:00', '15:00', '16:00', '16:30']\n}\nmeeting_duration = 30\npreferences = {'earliest': 14.5}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_14"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(joyce_schedule, christine_schedule, alexander_schedule, meeting_duration, christine_constraint):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            joyce_available = True\n            christine_available = True\n            alexander_available = True\n\n            for joyce_time in joyce_schedule:\n                if (time.time() <= joyce_time[1].time() and time.time() >= joyce_time[0].time()) or (joyce_time[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and joyce_time[0].time() >= time.time()):\n                    joyce_available = False\n                    break\n\n            for christine_time in christine_schedule:\n                if (time.time() <= christine_time[1].time() and time.time() >= christine_time[0].time()) or (christine_time[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and christine_time[0].time() >= time.time()):\n                    christine_available = False\n                    break\n\n            for alexander_time in alexander_schedule:\n                if (time.time() <= alexander_time[1].time() and time.time() >= alexander_time[0].time()) or (alexander_time[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and alexander_time[0].time() >= time.time()):\n                    alexander_available = False\n                    break\n\n            if (time.time() >= datetime.strptime('12:00', '%H:%M').time() and christine_available) or not christine_constraint:\n                if joyce_available and alexander_available:\n                    return f'{time.strftime(\"%H:%M\")}:{time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)}.strftime(\"%H:%M\")}'\n\njoyce_schedule = [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\nchristine_schedule = []\nalexander_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\nmeeting_duration = 30\nchristine_constraint = True\n\nprint(find_meeting_time(joyce_schedule, christine_schedule, alexander_schedule, meeting_duration, christine_constraint))\n```",
            "count": "calendar_scheduling_example_15"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Scott','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Gabriel','schedule': []},\n    {'name': 'Christine','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n```",
            "count": "calendar_scheduling_example_16"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n                if participant.get('constraint', False) and time.time() > datetime.strptime('13:30', '%H:%M').time():\n                    available = False\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Margaret','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Donna','schedule': [(datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]},\n    {'name': 'Helen','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n                if participant.get('constraint', False) and time.time() > datetime.strptime('15:30', '%H:%M').time():\n                    available = False\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Brian','schedule': []},\n    {'name': 'Billy','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Patricia','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n```",
            "count": "calendar_scheduling_example_18"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Stephen','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]},\n    {'name': 'Edward','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Angela','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 60))\n```",
            "count": "calendar_scheduling_example_19"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=30)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    # Define the start and end time of the work hours\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n\n    # Define the existing schedules for each participant\n    ralph = [(13, 30), (14, 30)]\n    peter = [(9, 30), (11, 0), (16, 0)]\n    daniel = [(9, 0), (10, 30), (15, 30), (16, 0)]\n\n    # Add Daniel's preference to avoid meetings after 13:30\n    daniel.append((13, 30))\n\n    # Combine the schedules into a list of tuples\n    participants = [(9, 30), (11, 0), (13, 30), (14, 30), (15, 30), (16, 0)]\n\n    # Find the meeting time\n    print(find_meeting_time(start_time, end_time, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_20"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=60):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    # Define the start and end time of the work hours\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n\n    # Define the existing schedules for each participant\n    bobby = [(0, 24)]\n    scott = [(11.5, 12), (15.5, 16)]\n    kimberly = [(11, 12), (12.5, 13), (13.5, 14), (14.5, 15), (15.5, 24)]\n\n    # Combine the schedules into a list of tuples\n    participants = [(11.5, 12), (12.5, 13), (13.5, 14), (14.5, 15), (15.5, 24)]\n\n    # Find the meeting time\n    print(find_meeting_time(start_time, end_time, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_21"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=60):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    # Define the start and end time of the work hours\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n\n    # Define the existing schedules for each participant\n    theresa = [(9, 9.5), (12.5, 13.5), (14, 15), (16.5, 17)]\n    charles = [(10, 10.5), (11.5, 12.5), (14, 15.5)]\n    betty = [(9, 10.5), (12, 12.5), (13, 14), (15, 16)]\n\n    # Combine the schedules into a list of tuples\n    participants = [(9, 9.5), (12, 12.5), (12.5, 13.5), (14, 15), (16.5, 17)]\n\n    # Find the meeting time\n    print(find_meeting_time(start_time, end_time, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_22"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=60):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    # Define the start and end time of the work hours\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n\n    # Define the existing schedules for each participant\n    billy = [(11.5, 12), (13, 15), (16, 16.5)]\n    maria = [(9, 9.5), (10, 10.5), (13, 13.5), (14, 14.5)]\n    william = [(9.5, 10), (12, 12.5), (13.5, 15), (15.5, 17)]\n\n    # Combine the schedules into a list of tuples\n    participants = [(9, 9.5), (10, 10.5), (12, 12.5), (13, 15), (15.5, 17)]\n\n    # Find the meeting time\n    print(find_meeting_time(start_time, end_time, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_23"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=30):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    # Define the start and end time of the work hours\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n\n    # Define the existing schedules for each participant\n    benjamin = [(0, 9.5)]\n    hannah = [(0, 24)]\n    brenda = [(9.5, 10), (11.5, 12.5), (14, 16.5)]\n\n    # Combine the schedules into a list of tuples\n    participants = [(9.5, 10), (11.5, 12.5), (14, 16.5)]\n\n    # Find the meeting time\n    print(find_meeting_time(start_time, end_time, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_24"
        },
        {
            "final_program_time": "{14:00:15:00}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Check if Pamela wants to meet before 14:30\n            if current_time < datetime.strptime('14:30', '%H:%M'):\n                # Check if the meeting time is available for all participants\n                for schedule in sorted_schedules:\n                    if schedule[0] <= current_time + timedelta(hours=meeting_duration) < schedule[1]:\n                        available = False\n                        break\n\n        if available:\n            # Return the available meeting time\n            return current_time.strftime('%H:%M') + ':' + (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M')\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\nschedules = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\n\nprint('{%s}' % find_meeting_time('09:00', '17:00', schedules, 1))\n```",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": "{10:00:11:00}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\nschedules = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 1))\n```",
            "count": "calendar_scheduling_example_26"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n```",
            "count": "calendar_scheduling_example_27"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\nschedules = [\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n```",
            "count": "calendar_scheduling_example_28"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\nschedules = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 1))\n```",
            "count": "calendar_scheduling_example_29"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants):\n    meeting_duration = 30  # minutes\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                break\n        else:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Jeffrey','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Virginia','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Virginia','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Virginia','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Virginia','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n        {'name': 'Melissa','start': datetime.time(9, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Melissa','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Melissa','start': datetime.time(13, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Melissa','start': datetime.time(16, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    for participant in participants:\n        if participant['name'] == 'Melissa' and participant['start'] > datetime.time(14, 0):\n            participant['end'] = datetime.time(15, 0)\n\n    print(find_meeting_time(start_time, end_time, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Richard','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Richard','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Martha','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Martha','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Kimberly','start': datetime.time(9, 0), 'end': datetime.time(11, 0)},\n        {'name': 'Kimberly','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Kimberly','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Kimberly','start': datetime.time(14, 0), 'end': datetime.time(16, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_31"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Emily','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Emily','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Emily','start': datetime.time(14, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Emily','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n        {'name': 'Melissa','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Melissa','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Frank','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Frank','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Frank','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Frank','start': datetime.time(13, 30), 'end': datetime.time(14, 30)},\n        {'name': 'Frank','start': datetime.time(15, 0), 'end': datetime.time(16, 0)},\n        {'name': 'Frank','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Lisa','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Lisa','start': datetime.time(10, 30), 'end': datetime.time(11, 30)},\n        {'name': 'Lisa','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Lisa','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n        {'name': 'Bobby','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Bobby','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Bobby','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Bobby','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Randy','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Randy','start': datetime.time(10, 30), 'end': datetime.time(11, 0)},\n        {'name': 'Randy','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Randy','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Randy','start': datetime.time(14, 30), 'end': datetime.time(15, 30)},\n        {'name': 'Randy','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Willie','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Richard','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Richard','start': datetime.time(11, 0), 'end': datetime.time(12, 0)},\n        {'name': 'Richard','start': datetime.time(13, 0), 'end': datetime.time(14, 0)},\n        {'name': 'Richard','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n        {'name': 'Noah','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Noah','start': datetime.time(11, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Noah','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Noah','start': datetime.time(14, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 60))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_34"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(available_times, meeting_duration, preferences=None):\n    available_times.sort()\n    for start, end in available_times:\n        if start + meeting_duration <= end:\n            if preferences is None or start >= preferences:\n                return f\"{start}:{start+meeting_duration-1}\"\n    return \"No available time found\"\n\ndef get_available_times(schedules):\n    available_times = []\n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            for i in range(start, end):\n                for j in range(i + 1, end):\n                    available_times.append((i, j))\n    return available_times\n\ndef main():\n    schedules = {\n        \"Bradley\": [(9, 17)],\n        \"Zachary\": [(10, 11), (15, 16)],\n        \"Teresa\": [(9, 10), (11, 12), (13, 14), (14.5, 16.5)]\n    }\n    \n    meeting_duration = 30\n    \n    zachary_preferences = (14.5, 17)\n    \n    available_times = get_available_times(schedules)\n    \n    preferences = (14.5, 17) if \"Zachary\" in schedules else None\n    \n    print(schedule_meeting(available_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_35"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Ryan\": [(9.5, 10), (12.5, 13)],\n    \"Ruth\": [(9, 17)],\n    \"Denise\": [(9.5, 10.5), (12, 13), (14.5, 16.5)]\n}\n\nmeeting_duration = 60\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Gregory\": [(11, 11.5), (12, 12.5), (15.5, 16.5)],\n    \"Teresa\": [(9, 17)],\n    \"Carol\": [(9, 10.5), (11, 16), (16.5, 17)]\n}\n\nmeeting_duration = 30\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_37"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Catherine\": [(10.5, 11), (12.5, 13.5), (14.5, 15)],\n    \"Michael\": [(9.5, 10.5), (12, 13), (13.5, 14), (15, 15.5)],\n    \"Alexander\": [(9, 9.5), (10, 10.5), (11, 12), (13, 13.5), (14, 16), (16.5, 17)]\n}\n\nmeeting_duration = 30\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_38"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Emily\": [(9, 17)],\n    \"Victoria\": [(13.5, 14), (14.5, 15.5), (16.5, 17)],\n    \"Nancy\": [(9, 14), (14.5, 15.5)]\n}\n\nmeeting_duration = 30\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_39"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Jacob\": [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 0)],\n        \"Gabriel\": [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 11, 30)],\n        \"Matthew\": [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 9, 30)],\n        \"Matthew\": [datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0)],\n        \"Matthew\": [datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0)],\n        \"Matthew\": [datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0)],\n        \"Matthew\": [datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 30)]\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nHowever, in order to match the provided example output, we need to modify the code to match the provided schedule and constraints of the participants. Here is the modified code:\n\n```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if (time + meeting_duration).time() < datetime(2024, 7, 15, 17, 0).time() and \\\n               all(not (time.time() >= participant.start.time() and time.time() < participant.end.time())\n                   for participant in participants.values()):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Jacob\": {\"start\": datetime(2024, 7, 15, 10, 0), \"end\": datetime(2024, 7, 15, 11, 0)},\n        \"Jacob\": {\"start\": datetime(2024, 7, 15, 11, 30), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Jacob\": {\"start\": datetime(2024, 7, 15, 16, 0), \"end\": datetime(2024, 7, 15, 16, 30)},\n        \"Gabriel\": {\"start\": datetime(2024, 7, 15, 9, 30), \"end\": datetime(2024, 7, 15, 11, 30)},\n        \"Gabriel\": {\"start\": datetime(2024, 7, 15, 13, 0), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Gabriel\": {\"start\": datetime(2024, 7, 15, 15, 0), \"end\": datetime(2024, 7, 15, 15, 30)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 9, 0), \"end\": datetime(2024, 7, 15, 9, 30)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 10, 30), \"end\": datetime(2024, 7, 15, 11, 0)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 11, 30), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 12, 30), \"end\": datetime(2024, 7, 15, 14, 0)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 16, 30)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_40"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=0.5)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()) and \\\n               (time >= datetime(2024, 7, 15, 14, 30) or 'Alan' not in participants):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Alan\": None,\n        \"Nancy\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 12, 30)},\n        \"Nancy\": {\"start\": datetime(2024, 7, 15, 13, 0), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Nancy\": {\"start\": datetime(2024, 7, 15, 14, 0), \"end\": datetime(2024, 7, 15, 15, 0)},\n        \"Patricia\": {\"start\": datetime(2024, 7, 15, 10, 0), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Patricia\": {\"start\": datetime(2024, 7, 15, 12, 30), \"end\": datetime(2024, 7, 15, 13, 0)},\n        \"Patricia\": {\"start\": datetime(2024, 7, 15, 13, 30), \"end\": datetime(2024, 7, 15, 16, 0)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_41"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 9, 0), \"end\": datetime(2024, 7, 15, 9, 30)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 11, 30)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 12, 0), \"end\": datetime(2024, 7, 15, 12, 30)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 13, 30), \"end\": datetime(2024, 7, 15, 14, 0)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 16, 0), \"end\": datetime(2024, 7, 15, 17, 0)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 9, 0), \"end\": datetime(2024, 7, 15, 9, 30)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 13, 0), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 15, 0), \"end\": datetime(2024, 7, 15, 15, 30)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 16, 0), \"end\": datetime(2024, 7, 15, 16, 30)},\n        \"Lori\": {\"start\": datetime(2024, 7, 15, 10, 0), \"end\": datetime(2024, 7, 15, 10, 30)},\n        \"Lori\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 13, 0)},\n        \"Lori\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 17, 0)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=0.5)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 9, 30), \"end\": datetime(2024, 7, 15, 10, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 12, 0), \"end\": datetime(2024, 7, 15, 12, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 14, 0), \"end\": datetime(2024, 7, 15, 14, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 15, 0), \"end\": datetime(2024, 7, 15, 15, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 16, 30), \"end\": datetime(2024, 7, 15, 17, 0)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 11, 30)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 12, 30), \"end\": datetime(2024, 7, 15, 13, 0)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 13, 30), \"end\": datetime(2024, 7, 15, 14, 0)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 16, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 9, 30), \"end\": datetime(2024, 7, 15, 10, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 10, 30), \"end\": datetime(2024, 7, 15, 11, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 11, 30), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 14, 0), \"end\": datetime(2024, 7, 15, 15, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 16, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 16, 30), \"end\": datetime(2024, 7, 15, 17, 0)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_43"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=0.5)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()) and \\\n               (time >= datetime(2024, 7, 15, 13, 0) or 'Isabella' not in participants):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Isabella\": None,\n        \"Ronald\": {\"start\": datetime(2024, 7, 15, 11, 30), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Ronald\": {\"start\": datetime(2024, 7, 15, 14, 0), \"end\": datetime(2024, 7, 15, 14, 30)},\n        \"Ronald\": {\"start\": datetime(2024, 7, 15, 16, 0), \"end\": datetime(2024, 7, 15, 17, 0)},\n        \"Amanda\": {\"start\": datetime(2024, 7, 15, 9, 30), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Amanda\": {\"start\": datetime(2024, 7, 15, 12, 30), \"end\": datetime(2024, 7, 15, 13, 0)},\n        \"Amanda\": {\"start\": datetime(2024, 7, 15, 13, 30), \"end\": datetime(2024, 7, 15, 14, 0)},\n        \"Amanda\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 17, 0)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_44"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants):\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=30) <= end_time and \n                   (time + timedelta(minutes=30) > participant[1] for participant in participants.items())):\n                return f\"{time.strftime('%H:%M')}:{time + timedelta(minutes=30)}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the schedules for each participant\nschedules = {\n    'Andrew': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Grace': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Samuel': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Samuel_blocks': [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n}\n\n# Define the start and end time of the workday\nstart_time = datetime(2024, 7, 29, 9, 0)\nend_time = datetime(2024, 7, 29, 17, 0)\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Find the first available time slot for all participants\nparticipants = {\n    'Andrew': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Grace': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Samuel': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n}\n\nschedules['Samuel_blocks'].sort(key=lambda x: x[0])\nstart_time = datetime(2024, 7, 29, 9, 0)\nfor block in schedules['Samuel_blocks']:\n    if start_time >= block[0] and start_time + meeting_duration <= block[1]:\n        start_time = block[1]\n    else:\n        break\n\nprint(f\"{start_time.strftime('%H:%M')}:{start_time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\")\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the schedules for each participant\ndef schedule_meeting(start_time, end_time, participants):\n    return find_available_time(participants, start_time, end_time, timedelta(minutes=30))\n\n# Define the schedules for each participant\nschedules = {\n    'Arthur': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Theresa': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n    'Carl': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Arthur_blocks': [\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n    ],\n    'Theresa_blocks': [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 16, 30)),\n    ],\n    'Carl_blocks': [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n}\n\n# Define the start and end time of the workday\nstart_time = datetime(2024, 7, 29, 9, 0)\nend_time = datetime(2024, 7, 29, 17, 0)\n\n# Find the available time for the task\nprint(f\"{schedule_meeting(start_time, end_time, schedules)}\")\n```",
            "count": "calendar_scheduling_example_46"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the schedules for each participant\nschedules = {\n    'David': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Eric': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n    'Roger': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n    'Eric_blocks': [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n    ],\n    'Roger_blocks': [\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 30)),\n    ]\n}\n\n# Define the start and end time of the workday\nstart_time = datetime(2024, 7, 29, 9, 0)\nend_time = datetime(2024, 7, 29, 17, 0)\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find the available time for the task\nprint(f\"{find_available_time(schedules, start_time, end_time, meeting_duration)}\")\n```",
            "count": "calendar_scheduling_example_47"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the schedules for each participant\nschedules = {\n    'Janet': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Rachel': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Cynthia': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Janet_blocks': [\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n    ],\n    'Cynthia_blocks': [\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 17, 0)),\n    ]\n}\n\n# Define the start and end time of the workday\nstart_time = datetime(2024, 7, 29, 9, 0)\nend_time = datetime(2024, 7, 29, 17, 0)\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find the available time for the task\nprint(f\"{find_available_time(schedules, start_time, end_time, meeting_duration)}\")\n```",
            "count": "calendar_scheduling_example_48"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the schedules for each participant\nschedules = {\n    'Teresa': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Kathleen': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Patricia': (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n    'Teresa_blocks': [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ],\n    'Kathleen_blocks': [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n    ],\n    'Patricia_blocks': [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n}\n\n# Define the start and end time of the workday\nstart_time = datetime(2024, 7, 29, 9, 0)\nend_time = datetime(2024, 7, 29, 17, 0)\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Find the available time for the task\nprint(f\"{find_available_time(schedules, start_time, end_time, meeting_duration)}\")\n```",
            "count": "calendar_scheduling_example_49"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(daniel_schedule, roy_schedule, emma_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    daniel_schedule = [datetime.strptime(time, '%H:%M') for time in daniel_schedule]\n    roy_schedule = [datetime.strptime(time, '%H:%M') for time in roy_schedule]\n    emma_schedule = [datetime.strptime(time, '%H:%M') for time in emma_schedule]\n\n    # Sort schedules by start time\n    daniel_schedule.sort()\n    roy_schedule.sort()\n    emma_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in daniel_schedule:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in emma_schedule + roy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndaniel_schedule = []\nroy_schedule = []\nemma_schedule = ['09:00', '10:30', '11:00', '12:00', '12:30', '13:30', '14:30', '15:30', '16:00', '16:30']\nmeeting_duration = 1\n\nprint(schedule_meeting(daniel_schedule, roy_schedule, emma_schedule, meeting_duration))\n```",
            "count": "calendar_scheduling_example_50"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(brandon_schedule, donna_schedule, jack_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    brandon_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 14, 30)]]\n    donna_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0)]]\n    jack_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    brandon_schedule.sort()\n    donna_schedule.sort()\n    jack_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in brandon_schedule + donna_schedule + jack_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\nprint(schedule_meeting(brandon_schedule=[], donna_schedule=[datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0)], jack_schedule=[datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 17, 0)], meeting_duration=1))\n```",
            "count": "calendar_scheduling_example_51"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(grace_schedule, randy_schedule, susan_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    grace_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n    randy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n    susan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30)]]\n\n    # Sort schedules by start time\n    grace_schedule.sort()\n    randy_schedule.sort()\n    susan_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in grace_schedule + randy_schedule + susan_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\nprint(schedule_meeting(grace_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)], randy_schedule=[datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)], susan_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30)], meeting_duration=1))\n```",
            "count": "calendar_scheduling_example_52"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(noah_schedule, alice_schedule, arthur_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    noah_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    alice_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)]]\n    arthur_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 30)]]\n\n    # Sort schedules by start time\n    noah_schedule.sort()\n    alice_schedule.sort()\n    arthur_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in noah_schedule + alice_schedule + arthur_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\nprint(schedule_meeting(noah_schedule=[], alice_schedule=[datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)], arthur_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 30)], meeting_duration=1))\n```",
            "count": "calendar_scheduling_example_53"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(isabella_schedule, tyler_schedule, jordan_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 15, 30)]]\n    tyler_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0)]]\n    jordan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 0)]]\n\n    # Sort schedules by start time\n    isabella_schedule.sort()\n    tyler_schedule.sort()\n    jordan_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in isabella_schedule + tyler_schedule + jordan_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\nprint(schedule_meeting(isabella_schedule=[datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 15, 30)], tyler_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0)], jordan_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 0)], meeting_duration=1))\n```",
            "count": "calendar_scheduling_example_54"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(keith_schedule, christine_schedule, cynthia_schedule, meeting_duration):\n    # Find available time slots for each participant\n    keith_available = []\n    christine_available = list(range(9, 17))  # Christine is free the entire day\n    cynthia_available = []\n    for i in range(9, 17):\n        if (i, i + 1) not in cynthia_schedule:\n            cynthia_available.append((i, i + 1))\n\n    # Find common available time slots\n    common_available = []\n    for keith_slot in keith_available:\n        for christine_slot in christine_available:\n            for cynthia_slot in cynthia_available:\n                if (keith_slot[0] == christine_slot[0] == cynthia_slot[0] and\n                    keith_slot[1] == christine_slot[1] == cynthia_slot[1]):\n                    common_available.append(keith_slot)\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{start_time}:{end_time}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\nkeith_schedule = [(14, 14.5), (16, 16.5)]  # 14:00 to 14:30, 16:00 to 16:30\nchristine_schedule = []\ncynthia_schedule = [(9, 10.5), (11.5, 17)]  # 9:00 to 10:30, 11:30 to 17:00\nmeeting_duration = 1  # 1 hour\n\nprint(find_meeting_time(keith_schedule, christine_schedule, cynthia_schedule, meeting_duration))\n```",
            "count": "calendar_scheduling_example_55"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time:02d}:{end_time:02d}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\nparticipants = [\n    {'name': 'Jeremy','schedule': [(12, 13), (13.5, 14), (15, 15.5)]},\n    {'name': 'Donna','schedule': [(9.5, 10), (13, 13.5), (16, 17)]},\n    {'name': 'Robert','schedule': [(9, 11), (11.5, 12), (12.5, 17)]}\n]\nmeeting_duration = 0.5\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_56"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time:02d}:{end_time:02d}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\nparticipants = [\n    {'name': 'Virginia','schedule': [(10, 12)]},\n    {'name': 'Charles','schedule': [(12, 12.5), (13, 13.5)]},\n    {'name': 'Megan','schedule': [(9, 12), (13.5, 16), (16.5, 17)]}\n]\nmeeting_duration = 0.5\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_57"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time:02d}:{end_time:02d}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\nparticipants = [\n    {'name': 'Joan','schedule': [(11, 11.5), (12.5, 13)]},\n    {'name': 'Theresa','schedule': [(12, 12.5), (15, 15.5)]},\n    {'name': 'Shirley','schedule': [(9.5, 10.5), (11, 12), (13, 14), (15.5, 16.5)]}\n]\nmeeting_duration = 1\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_58"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] > 14 or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time:02d}:{end_time:02d}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\nparticipants = [\n    {'name': 'Jeffrey','schedule': []},\n    {'name': 'Jack','schedule': [(10.5, 11.5), (13, 13.5), (14, 14.5), (16, 17)]},\n    {'name': 'Judith','schedule': [(9, 10), (10.5, 11), (11.5, 14), (14.5, 15), (15.5, 17)]}\n]\nmeeting_duration = 0.5\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_59"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = 30\n    schedules = {\n        'Lisa': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n        'Dorothy': [],\n        'Raymond': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    }\n    print(f\"{{find_meeting_time(start_time, end_time, meeting_duration, schedules)}}\")\n    print(find_meeting_time(start_time, end_time, meeting_duration, schedules))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_60"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = 60\n    schedules = {\n        'Robert': [],\n        'Lisa': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'))],\n        'Patrick': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    }\n    print(f\"{{find_meeting_time(start_time, end_time, meeting_duration, schedules)}}\")\n    print(find_meeting_time(start_time, end_time, meeting_duration, schedules))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_61"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = 60\n    schedules = {\n        'Abigail': [],\n        'Michael': [],\n        'Sharon': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                   (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    }\n    print(f\"{{find_meeting_time(start_time, end_time, meeting_duration, schedules)}}\")\n    print(find_meeting_time(start_time, end_time, meeting_duration, schedules))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_62"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = 60\n    schedules = {\n        'Madison': [],\n        'Judith': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                   (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                   (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))],\n        'Roger': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                  (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                  (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n    }\n    print(f\"{{find_meeting_time(start_time, end_time, meeting_duration, schedules)}}\")\n    print(find_meeting_time(start_time, end_time, meeting_duration, schedules))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_63"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = 60\n    schedules = {\n        'Nancy': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                  (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))],\n        'Albert': [],\n        'Nathan': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                   (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                   (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n    }\n    print(f\"{{find_meeting_time(start_time, end_time, meeting_duration, schedules)}}\")\n    print(find_meeting_time(start_time, end_time, meeting_duration, schedules))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_64"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_65"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 60\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_66"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_67"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_68"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 60\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_69"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration):\n    # Find the earliest available time for Denise\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in denise_schedule or end_time in denise_schedule):\n            # Check if the time is available for Angela and Natalie\n            if not (start_time in angela_schedule or end_time in angela_schedule) and \\\n               not (start_time in natalie_schedule or end_time in natalie_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Define the schedules\n    denise_schedule = [datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"),\n                       datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")]\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                        datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                        datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n\n    # Define the meeting duration\n    meeting_duration = 30\n\n    # Schedule the meeting\n    meeting_time = schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)\n\n    # Print the result\n    print(f\"{meeting_time}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(nicole_schedule, john_schedule, ethan_schedule, meeting_duration):\n    # Find the earliest available time for Nicole\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in nicole_schedule or end_time in nicole_schedule):\n            # Check if the time is available for John and Ethan\n            if not (start_time in john_schedule or end_time in john_schedule) and \\\n               not (start_time in ethan_schedule or end_time in ethan_schedule):\n                # Check if John prefers to meet before 12:00\n                if start_time < datetime.strptime(\"12:00\", \"%H:%M\"):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Define the schedules\n    nicole_schedule = []\n    john_schedule = [datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                     datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    ethan_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                      datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                      datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n\n    # Define the meeting duration\n    meeting_duration = 30\n\n    # Schedule the meeting\n    meeting_time = schedule_meeting(nicole_schedule, john_schedule, ethan_schedule, meeting_duration)\n\n    # Print the result\n    print(f\"{{ {meeting_time} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_71"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(mason_schedule, amy_schedule, christopher_schedule, meeting_duration):\n    # Find the earliest available time for Mason\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in mason_schedule or end_time in mason_schedule):\n            # Check if the time is available for Amy and Christopher\n            if not (start_time in amy_schedule or end_time in amy_schedule) and \\\n               not (start_time in christopher_schedule or end_time in christopher_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Define the schedules\n    mason_schedule = []\n    amy_schedule = [datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                    datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                    datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    christopher_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                            datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                            datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"),\n                            datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")]\n\n    # Define the meeting duration\n    meeting_duration = 60\n\n    # Schedule the meeting\n    meeting_time = schedule_meeting(mason_schedule, amy_schedule, christopher_schedule, meeting_duration)\n\n    # Print the result\n    print(f\"{{ {meeting_time} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_72"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(bradley_schedule, andrew_schedule, melissa_schedule, meeting_duration):\n    # Find the earliest available time for Bradley\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in bradley_schedule or end_time in bradley_schedule):\n            # Check if the time is available for Andrew and Melissa\n            if not (start_time in andrew_schedule or end_time in andrew_schedule) and \\\n               not (start_time in melissa_schedule or end_time in melissa_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Define the schedules\n    bradley_schedule = [datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                        datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                        datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"),\n                        datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    andrew_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\"),\n                       datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                       datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                       datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")]\n    melissa_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\"),\n                        datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"),\n                        datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                        datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"),\n                        datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")]\n\n    # Define the meeting duration\n    meeting_duration = 30\n\n    # Schedule the meeting\n    meeting_time = schedule_meeting(bradley_schedule, andrew_schedule, melissa_schedule, meeting_duration)\n\n    # Print the result\n    print(f\"{{ {meeting_time} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_73"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(eric_schedule, albert_schedule, katherine_schedule, meeting_duration):\n    # Find the earliest available time for Eric\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in eric_schedule or end_time in eric_schedule):\n            # Check if the time is available for Albert and Katherine\n            if not (start_time in albert_schedule or end_time in albert_schedule) and \\\n               not (start_time in katherine_schedule or end_time in katherine_schedule):\n                # Check if Eric prefers to meet before 15:30\n                if start_time < datetime.strptime(\"15:30\", \"%H:%M\"):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Define the schedules\n    eric_schedule = [datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")]\n    albert_schedule = [datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"),\n                       datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")]\n    katherine_schedule = [datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"),\n                          datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                          datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")]\n\n    # Define the meeting duration\n    meeting_duration = 60\n\n    # Schedule the meeting\n    meeting_time = schedule_meeting(eric_schedule, albert_schedule, katherine_schedule, meeting_duration)\n\n    # Print the result\n    print(f\"{{ {meeting_time} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_74"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=60)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=60)).strftime('%H:%M')\n\nparticipants = {\n    'Jacob': {'busy': [(9, 30), (12, 30), (14, 30), (16, 30)]},\n    'Amanda': {'busy': [(10, 30), (12, 0)]},\n    'Lisa': {'busy': [(11, 0), (13, 0), (14, 30), (16, 30)]}\n}\n\nstart = datetime(2024, 7, 29, 9, 0)\nend = datetime(2024, 7, 29, 17, 0)\nprint('{%s:%s}' % (find_meeting_time(start, end, participants), find_meeting_time(start, end, participants) + timedelta(minutes=60)))\n```",
            "count": "calendar_scheduling_example_75"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Joyce': {'busy': []},\n    'Beverly': {'busy': [(9, 30), (11, 0), (12, 30), (14, 0), (15, 30), (16, 30)]},\n    'Peter': {'busy': [(9, 30), (11, 30), (14, 30), (16, 30)]}\n}\nprint(schedule_meeting(participants, 60))\n```",
            "count": "calendar_scheduling_example_76"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Donald': {'busy': [(10, 30), (11, 30), (12, 30), (13, 30), (15, 30)]},\n    'Joyce': {'busy': [(11, 0), (14, 30), (16, 0)]},\n    'Abigail': {'busy': [(9, 30), (11, 0), (13, 0), (15, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n```",
            "count": "calendar_scheduling_example_77"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Ronald': {'busy': [(9, 0), (11, 0)]},\n    'Teresa': {'busy': [(10, 30), (14, 0)]},\n    'Carol': {'busy': [(9, 0), (12, 30), (14, 0), (16, 0)]}\n}\nprint(schedule_meeting(participants, 60))\n```",
            "count": "calendar_scheduling_example_78"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Amy': {'busy': [(11, 0), (12, 0)]},\n    'Emma': {'busy': []},\n    'John': {'busy': [(10, 30), (11, 30), (12, 30), (16, 0), (16, 30)]}\n}\nprint(schedule_meeting(participants, 60))\n```",
            "count": "calendar_scheduling_example_79"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(minutes=30)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60, 30):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        {'name': 'Michelle', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)]},\n        {'name': 'Billy', 'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30)]},\n        {'name': 'Alexis', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_80"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        {'name': 'Jeremy', 'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Lawrence', 'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        {'name': 'Helen', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_81"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(minutes=30)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60, 30):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        {'name': 'Michael', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30)]},\n        {'name': 'Eric', 'busy': []},\n        {'name': 'Arthur', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        {'name': 'Anthony', 'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Ronald', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)]},\n        {'name': 'Jonathan', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 17, 0)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_83"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        {'name': 'Kevin', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 16, 0)]},\n        {'name': 'Ryan', 'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)]},\n        {'name': 'Eugene', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30)],\n         'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 17, 0)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_84"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    meeting_duration = timedelta(minutes=30)\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + meeting_duration.strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    participants = {\n        'Kelly': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Martha': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('11:00', '%H:%M')},\n        'Martha': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')}\n    }\n    \n    for participant in participants.values():\n        if 'end_time' in participant and participant['end_time'].hour > 13 and participant['end_time'].hour < 17:\n            participant['end_time'] = datetime.strptime('13:30', '%H:%M')\n    \n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_85"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=60):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    participants = {\n        'Samuel': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('16:30', '%H:%M')},\n        'Emma': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    \n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_86"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=30):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    participants = {\n        'Brittany': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Wayne': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Wayne': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Wayne': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('16:30', '%H:%M')},\n    }\n    \n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_87"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=60):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    participants = {\n        'Dennis': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Joseph': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Joseph': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    \n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_88"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=60):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    participants = {\n        'Michelle': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Michelle': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Andrea': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Andrea': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Andrea': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Andrea': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Andrea': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('16:30', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    \n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_89"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(adam_schedule, willie_schedule, gloria_schedule, meeting_duration, gloria_preference):\n    # Convert schedules to datetime objects\n    adam_schedule = [datetime.strptime(time, '%H:%M') for time in adam_schedule]\n    willie_schedule = [datetime.strptime(time, '%H:%M') for time in willie_schedule]\n    gloria_schedule = [datetime.strptime(time, '%H:%M') for time in gloria_schedule]\n\n    # Sort schedules by start time\n    adam_schedule.sort()\n    willie_schedule.sort()\n    gloria_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(adam_schedule) - 1):\n        start = adam_schedule[i]\n        end = adam_schedule[i + 1]\n        if not (start < willie_schedule[0] and willie_schedule[-1] < end) and not (start < gloria_schedule[0] and gloria_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(willie_schedule) - 1):\n        start = willie_schedule[i]\n        end = willie_schedule[i + 1]\n        if not (start < adam_schedule[0] and adam_schedule[-1] < end) and not (start < gloria_schedule[0] and gloria_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(gloria_schedule) - 1):\n        start = gloria_schedule[i]\n        end = gloria_schedule[i + 1]\n        if not (start < adam_schedule[0] and adam_schedule[-1] < end) and not (start < willie_schedule[0] and willie_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if gloria_schedule[-1] < start or end < gloria_schedule[0]:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n\n    return None\n\nadam_schedule = ['09:30', '10:30', '11:30', '16:30']\nwillie_schedule = ['09:00', '15:30']\ngloria_schedule = ['09:30', '13:00', '15:30']\nmeeting_duration = 0.5\ngloria_preference = True\n\nprint(find_meeting_time(adam_schedule, willie_schedule, gloria_schedule, meeting_duration, gloria_preference))\n```",
            "count": "calendar_scheduling_example_90"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    danielle_schedule = [datetime.strptime(time, '%H:%M') for time in danielle_schedule]\n    bruce_schedule = [datetime.strptime(time, '%H:%M') for time in bruce_schedule]\n    eric_schedule = [datetime.strptime(time, '%H:%M') for time in eric_schedule]\n\n    # Sort schedules by start time\n    danielle_schedule.sort()\n    bruce_schedule.sort()\n    eric_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(danielle_schedule) - 1):\n        start = danielle_schedule[i]\n        end = danielle_schedule[i + 1]\n        if not (start < bruce_schedule[0] and bruce_schedule[-1] < end) and not (start < eric_schedule[0] and eric_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(bruce_schedule) - 1):\n        start = bruce_schedule[i]\n        end = bruce_schedule[i + 1]\n        if not (start < danielle_schedule[0] and danielle_schedule[-1] < end) and not (start < eric_schedule[0] and eric_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(eric_schedule) - 1):\n        start = eric_schedule[i]\n        end = eric_schedule[i + 1]\n        if not (start < danielle_schedule[0] and danielle_schedule[-1] < end) and not (start < bruce_schedule[0] and bruce_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\ndanielle_schedule = ['09:00', '10:30', '14:30', '15:30', '16:30']\nbruce_schedule = ['11:00', '12:30', '14:00', '15:30']\neric_schedule = ['09:00', '09:30', '10:00', '11:30', '13:00', '14:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    jacqueline_schedule = [datetime.strptime(time, '%H:%M') for time in jacqueline_schedule]\n    henry_schedule = [datetime.strptime(time, '%H:%M') for time in henry_schedule]\n    william_schedule = [datetime.strptime(time, '%H:%M') for time in william_schedule]\n\n    # Sort schedules by start time\n    jacqueline_schedule.sort()\n    henry_schedule.sort()\n    william_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(jacqueline_schedule) - 1):\n        start = jacqueline_schedule[i]\n        end = jacqueline_schedule[i + 1]\n        if not (start < william_schedule[0] and william_schedule[-1] < end) and not (start < henry_schedule[0] and henry_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(william_schedule) - 1):\n        start = william_schedule[i]\n        end = william_schedule[i + 1]\n        if not (start < jacqueline_schedule[0] and jacqueline_schedule[-1] < end) and not (start < henry_schedule[0] and henry_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(henry_schedule) - 1):\n        start = henry_schedule[i]\n        end = henry_schedule[i + 1]\n        if not (start < jacqueline_schedule[0] and jacqueline_schedule[-1] < end) and not (start < william_schedule[0] and william_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\njacqueline_schedule = ['09:30', '16:30']\nhenry_schedule = []\nwilliam_schedule = ['09:30', '10:30', '12:30', '15:00', '15:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_92"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(austin_schedule, danielle_schedule, charles_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    austin_schedule = [datetime.strptime(time, '%H:%M') for time in austin_schedule]\n    danielle_schedule = [datetime.strptime(time, '%H:%M') for time in danielle_schedule]\n    charles_schedule = [datetime.strptime(time, '%H:%M') for time in charles_schedule]\n\n    # Sort schedules by start time\n    austin_schedule.sort()\n    danielle_schedule.sort()\n    charles_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(austin_schedule) - 1):\n        start = austin_schedule[i]\n        end = austin_schedule[i + 1]\n        if not (start < danielle_schedule[0] and danielle_schedule[-1] < end) and not (start < charles_schedule[0] and charles_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(danielle_schedule) - 1):\n        start = danielle_schedule[i]\n        end = danielle_schedule[i + 1]\n        if not (start < austin_schedule[0] and austin_schedule[-1] < end) and not (start < charles_schedule[0] and charles_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(charles_schedule) - 1):\n        start = charles_schedule[i]\n        end = charles_schedule[i + 1]\n        if not (start < austin_schedule[0] and austin_schedule[-1] < end) and not (start < danielle_schedule[0] and danielle_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\naustin_schedule = ['10:30', '13:30']\ndanielle_schedule = ['09:00', '11:00', '13:00', '15:30']\ncharles_schedule = ['09:00', '11:30', '12:00', '12:30', '13:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(austin_schedule, danielle_schedule, charles_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_93"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(nicholas_schedule, elizabeth_schedule, sandra_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    nicholas_schedule = [datetime.strptime(time, '%H:%M') for time in nicholas_schedule]\n    elizabeth_schedule = [datetime.strptime(time, '%H:%M') for time in elizabeth_schedule]\n    sandra_schedule = [datetime.strptime(time, '%H:%M') for time in sandra_schedule]\n\n    # Sort schedules by start time\n    nicholas_schedule.sort()\n    elizabeth_schedule.sort()\n    sandra_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(nicholas_schedule) - 1):\n        start = nicholas_schedule[i]\n        end = nicholas_schedule[i + 1]\n        if not (start < elizabeth_schedule[0] and elizabeth_schedule[-1] < end) and not (start < sandra_schedule[0] and sandra_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(elizabeth_schedule) - 1):\n        start = elizabeth_schedule[i]\n        end = elizabeth_schedule[i + 1]\n        if not (start < nicholas_schedule[0] and nicholas_schedule[-1] < end) and not (start < sandra_schedule[0] and sandra_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(sandra_schedule) - 1):\n        start = sandra_schedule[i]\n        end = sandra_schedule[i + 1]\n        if not (start < nicholas_schedule[0] and nicholas_schedule[-1] < end) and not (start < elizabeth_schedule[0] and elizabeth_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\nnicholas_schedule = []\nelizabeth_schedule = ['09:30', '11:30', '13:30', '15:00', '15:30', '16:30']\nsandra_schedule = ['09:00', '09:30', '10:00', '11:30', '13:00', '15:30']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(nicholas_schedule, elizabeth_schedule, sandra_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_94"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Return the meeting time\n                    return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=30)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Jennifer': {'blocked_times': [{'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '16:00', 'end_time': '16:30'}], 'earliest_available_time': '12:30', 'latest_available_time': '17:00'},\n        'Gary': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Frances': {'blocked_times': [{'start_time': '9:00', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '13:00', 'end_time': '17:00'}], 'earliest_available_time': '11:30', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_95"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the meeting time is available for all participants\n                    if all(meeting_time < end_time for participant in participants):\n                        # Return the meeting time\n                        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=30)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Christopher': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '13:00'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Robert': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '13:30', 'end_time': '14:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Wayne': {'blocked_times': [{'start_time': '10:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_96"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the meeting time is available for all participants\n                    if all(meeting_time < end_time for participant in participants):\n                        # Check if the participant has a preference for the meeting time\n                        if participant['name'] == 'Joseph' and meeting_time < datetime.strptime('14:30', '%H:%M'):\n                            # Move to the next time slot\n                            meeting_time += timedelta(minutes=30)\n                            continue\n\n                        # Return the meeting time\n                        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=60)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Joseph': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:30', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Kyle': {'blocked_times': [{'start_time': '12:30', 'end_time': '13:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Joan': {'blocked_times': [{'start_time': '9:00', 'end_time': '9:30'}, {'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_97"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the meeting time is available for all participants\n                    if all(meeting_time < end_time for participant in participants):\n                        # Check if the participant has a preference for the meeting time\n                        if participant['name'] == 'Juan' and meeting_time >= datetime.strptime('16:00', '%H:%M'):\n                            # Move to the next time slot\n                            meeting_time += timedelta(minutes=30)\n                            continue\n\n                        # Return the meeting time\n                        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=30)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Juan': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:30'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '16:00'},\n        'Marilyn': {'blocked_times': [{'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '13:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Ronald': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '16:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the meeting time is available for all participants\n                    if all(meeting_time < end_time for participant in participants):\n                        # Check if the participant has a preference for the meeting time\n                        if participant['name'] == 'Mark' and meeting_time < datetime.strptime('15:00', '%H:%M'):\n                            # Move to the next time slot\n                            meeting_time += timedelta(minutes=60)\n                            continue\n\n                        # Return the meeting time\n                        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=60)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=60)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Stephanie': {'blocked_times': [{'start_time': '9:00', 'end_time': '9:30'}, {'start_time': '13:30', 'end_time': '14:00'}], 'earliest_available_time': '9:30', 'latest_available_time': '17:00'},\n        'Mark': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Scott': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '11:00', 'end_time': '12:30'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '16:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_99"
        }
    ],
    "5shot": [
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=0.5), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=0.5)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Roger': {'blocked': []},\n    'Karen': {'blocked': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                         datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0),\n                         datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 14, 0),\n                         datetime(2024, 7, 22, 15, 0)]},\n    'Dorothy': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0),\n                           datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 30),\n                           datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 14, 0),\n                           datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0),\n                           datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n\nparticipants = {\n    'Douglas': {'blocked': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30),\n                          datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n    'Lawrence': {'blocked': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 12, 0),\n                            datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30),\n                            datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30),\n                            datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n    'Isabella': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 12, 30),\n                            datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n\nparticipants = {\n    'Joshua': {'blocked': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                          datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30),\n                          datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30),\n                          datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n    'Denise': {'blocked': []},\n    'Jeremy': {'blocked': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30),\n                          datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0),\n                          datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30),\n                          datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0),\n                          datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n\nparticipants = {\n    'Alan': {'blocked': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30),\n                        datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)]},\n    'Elizabeth': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                              datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)]},\n    'Denise': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0),\n                          datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 30),\n                          datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0),\n                          datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0),\n                          datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 16, 0),\n                          datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(find_earliest_availability(participants))\n\nparticipants = {\n    'Mason': {'blocked': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0),\n                         datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30),\n                         datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0),\n                         datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    'Bruce': {'blocked': []},\n    'Christopher': {'blocked': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30),\n                               datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 30),\n                               datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n\nparticipants = {\n    'Michelle': {'blocked': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 12, 0)]},\n    'Steven': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                          datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0),\n                          datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0),\n                          datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n    'Jerry': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                         datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 11, 0),\n                         datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 30),\n                         datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 14, 30),\n                         datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0),\n                         datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n```",
            "count": "calendar_scheduling_example_0"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=0.5), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                if preferred_time is None or time < preferred_time:\n                    return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=0.5)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Raymond': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                           datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0),\n                           datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30),\n                           datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n    'Billy': {'blocked': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                         datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0),\n                         datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    'Donald': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                           datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 11, 0),\n                           datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0),\n                           datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30),\n                           datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants))\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=0.5), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                if preferred_time is None or time < preferred_time:\n                    return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=0.5)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Roy': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                       datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                       datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30),\n                       datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)]},\n    'Kathryn': {'blocked': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0),\n                           datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    'Amy': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                        datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30),\n                        datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30),\n                        datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0),\n                        datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0),\n                        datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30),\n                        datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(\"{0}:{1}\".format(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[0], schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[1]))\n```",
            "count": "calendar_scheduling_example_2"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants, meeting_duration=timedelta(hours=1), preferred_time=None):\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if time + meeting_duration <= end_time and all(\n                not (time + meeting_duration).time() in participant['blocked']\n                for participant in participants.values()\n            ):\n                if preferred_time is None or time < preferred_time:\n                    return time.strftime(\"%H:%M\") + \":\" + (time + meeting_duration).strftime(\"%H:%M\")\n    return None\n\ndef find_earliest_availability(participants):\n    start_time = datetime(2024, 7, 22, 9, 0)\n    end_time = datetime(2024, 7, 22, 17, 0)\n    meeting_duration = timedelta(hours=1)\n    earliest_time = None\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = start_time.replace(hour=hour, minute=minute, second=0)\n            if all(not (time + meeting_duration).time() in participant['blocked']\n                   for participant in participants.values()):\n                if earliest_time is None or time < earliest_time:\n                    earliest_time = time\n    return earliest_time.strftime(\"%H:%M\") + \":\" + (earliest_time + meeting_duration).strftime(\"%H:%M\")\n\nparticipants = {\n    'Arthur': {'blocked': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30),\n                          datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 12, 0),\n                          datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n    'Michael': {'blocked': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30),\n                            datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)]},\n    'Samantha': {'blocked': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0),\n                             datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 15, 0),\n                             datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 17, 0)]}\n}\n\nprint(\"{0}:{1}\".format(schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[0], schedule_meeting(datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 17, 0), participants).split(\":\")[1]))\n```",
            "count": "calendar_scheduling_example_3"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, duration, preferences=None):\n    # Parse start and end times\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n\n    # Parse duration\n    duration = timedelta(hours=int(duration.split(\" \")[0]), minutes=int(duration.split(\" \")[1]))\n\n    # Initialize earliest available time\n    earliest_time = start_time\n\n    # Iterate over possible meeting times\n    while earliest_time < end_time - duration:\n        # Assume this time works for everyone\n        works_for_everyone = True\n\n        # Check each participant's schedule\n        for participant in participants:\n            for time in participant[\"busy\"]:\n                # If this time overlaps with the meeting time, it doesn't work for this participant\n                if earliest_time <= time[\"end\"] and earliest_time + duration > time[\"start\"]:\n                    works_for_everyone = False\n                    break\n\n            # If this participant has a preference and it's not this time, it doesn't work for this participant\n            if preferences and participant[\"name\"] in preferences and preferences[participant[\"name\"]]!= earliest_time.strftime(\"%H:%M\"):\n                works_for_everyone = False\n                break\n\n            # If this time doesn't work for this participant, break\n            if not works_for_everyone:\n                break\n\n        # If this time works for everyone, return it\n        if works_for_everyone:\n            return f\"{earliest_time.strftime('%H:%M')}:{(earliest_time + duration).strftime('%H:%M')}\"\n\n        # Otherwise, move to the next possible meeting time\n        earliest_time += timedelta(minutes=30)\n\n    # If no time works for everyone, return None\n    return None\n\n# Example usage\nparticipants = [\n    {\"name\": \"Karen\", \"busy\": [\n        {\"start\": \"10:00\", \"end\": \"10:30\"},\n        {\"start\": \"11:30\", \"end\": \"12:00\"},\n        {\"start\": \"12:30\", \"end\": \"13:00\"},\n        {\"start\": \"14:00\", \"end\": \"15:00\"},\n        {\"start\": \"15:30\", \"end\": \"16:00\"}\n    ]},\n    {\"name\": \"Dorothy\", \"busy\": [\n        {\"start\": \"9:00\", \"end\": \"10:00\"},\n        {\"start\": \"10:30\", \"end\": \"11:00\"},\n        {\"start\": \"11:30\", \"end\": \"12:00\"},\n        {\"start\": \"12:30\", \"end\": \"13:00\"},\n        {\"start\": \"14:00\", \"end\": \"15:30\"},\n        {\"start\": \"16:00\", \"end\": \"17:00\"}\n    ]}\n]\n\nprint(schedule_meeting(participants, \"9:00\", \"17:00\", \"30 minutes\"))\n```\n\n```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, duration, preferences=None):\n    # Parse start and end times\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n\n    # Parse duration\n    duration = timedelta(hours=int(duration.split(\" \")[0]), minutes=int(duration.split(\" \")[1]))\n\n    # Initialize earliest available time\n    earliest_time = start_time\n\n    # Iterate over possible meeting times\n    while earliest_time < end_time - duration:\n        # Assume this time works for everyone\n        works_for_everyone = True\n\n        # Check each participant's schedule\n        for participant in participants:\n            for time in participant[\"busy\"]:\n                # If this time overlaps with the meeting time, it doesn't work for this participant\n                if earliest_time <= time[\"end\"] and earliest_time + duration > time[\"start\"]:\n                    works_for_everyone = False\n                    break\n\n            # If this participant has a preference and it's not this time, it doesn't work for this participant\n            if preferences and participant[\"name\"] in preferences and preferences[participant[\"name\"]]!= earliest_time.strftime(\"%H:%M\"):\n                works_for_everyone = False\n                break\n\n            # If this time doesn't work for this participant, break\n            if not works_for_everyone:\n                break\n\n        # If this time works for everyone, return it\n        if works_for_everyone:\n            return f\"{earliest_time.strftime('%H:%M')}:{(earliest_time + duration).strftime('%H:%M')}\"\n\n        # Otherwise, move to the next possible meeting time\n        earliest_time += timedelta(minutes=30)\n\n    # If no time works for everyone, return None\n    return None\n\n# Example usage\nparticipants = [\n    {\"name\": \"Douglas\", \"busy\": [\n        {\"start\": \"12:00\", \"end\": \"12:30\"},\n        {\"start\": \"15:00\", \"end\": \"15:30\"}\n    ]},\n    {\"name\": \"Lawrence\", \"busy\": [\n        {\"start\": \"10:30\", \"end\": \"12:00\"},\n        {\"start\": \"13:00\", \"end\": \"13:30\"},\n        {\"start\": \"14:00\", \"end\": \"14:30\"},\n        {\"start\": \"15:30\", \"end\": \"16:00\"}\n    ]},\n    {\"name\": \"Isabella\", \"busy\": [\n        {\"start\": \"9:00\", \"end\": \"12:30\"},\n        {\"start\": \"13:30\", \"end\": \"17:00\"}\n    ]}\n]\n\nprint(schedule_meeting(participants, \"9:00\", \"17:00\", \"30 minutes\"))\n```\n\n```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, duration, preferences=None):\n    # Parse start and end times\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n\n    # Parse duration\n    duration = timedelta(hours=int(duration.split(\" \")[0]), minutes=int(duration.split(\" \")[1]))\n\n    # Initialize earliest available time\n    earliest_time = start_time\n\n    # Iterate over possible meeting times\n    while earliest_time < end_time - duration:\n        # Assume this time works for everyone\n        works_for_everyone = True\n\n        # Check each participant's schedule\n        for participant in participants:\n            for time in participant[\"busy\"]:\n                # If this time overlaps with the meeting time, it doesn't work for this participant\n                if earliest_time <= time[\"end\"] and earliest_time + duration > time[\"start\"]:\n                    works_for_everyone = False\n                    break\n\n            # If this participant has a preference and it's not this time, it doesn't work for this participant\n            if preferences and participant[\"name\"] in preferences and preferences[participant[\"name\"]]!= earliest_time.strftime(\"%H:%M\"):\n                works_for_everyone = False\n                break\n\n            # If this time doesn't work for this participant, break\n            if not works_for_everyone:\n                break\n\n        # If this time works for everyone, return it\n        if works_for_everyone:\n            return f\"{earliest_time.strftime('%H:%M')}:{(earliest_time + duration).strftime('%H:%M')}\"\n\n        # Otherwise, move to the next possible meeting time\n        earliest_time += timedelta(minutes=30)\n\n    # If no time works for everyone, return None\n    return None\n\n# Example usage\nparticipants = [\n    {\"name\": \"Joshua\", \"busy\": [\n        {\"start\": \"10:00\", \"end\": \"10:30\"},\n        {\"start\": \"12:00\", \"end\": \"12:30\"},\n        {\"start\": \"14:00\", \"end\": \"14:30\"},\n        {\"start\": \"15:00\", \"end\": \"15:30\"}\n    ]},\n    {\"name\": \"Denise\", \"busy\": []},\n    {\"name\": \"Jeremy\", \"busy\": [\n        {\"start\": \"9:30\", \"end\": \"10:30\"},\n        {\"start\": \"12:00\", \"end\": \"13:00\"},\n        {\"start\": \"13:30\", \"end\": \"14:00\"},\n        {\"start\": \"14:30\", \"end\": \"15:00\"},\n        {\"start\": \"15:30\", \"end\": \"16:00\"},\n        {\"start\": \"16:30\", \"end\": \"17:00\"}\n    ]}\n]\n\nprint(schedule_meeting(participants, \"9:00\", \"17:00\", \"1 hour\"))\n```\n\n```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, duration, preferences=None):\n    # Parse start and end times\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n\n    # Parse duration\n    duration = timedelta(hours=int(duration.split(\" \")[0]), minutes=int(duration.split(\" \")[1]))\n\n    # Initialize earliest available time\n    earliest_time = start_time\n\n    # Iterate over possible meeting times\n    while earliest_time < end_time - duration:\n        # Assume this time works for everyone\n        works_for_everyone = True\n\n        # Check each participant's schedule\n        for participant in participants:\n            for time in participant[\"busy\"]:\n                # If this time overlaps with the meeting time, it doesn't work for this participant\n                if earliest_time <= time[\"end\"] and earliest_time + duration > time[\"start\"]:\n                    works_for_everyone = False\n                    break\n\n            # If this participant has a preference and it's not this time, it doesn't work for this participant\n            if preferences and participant[\"name\"] in preferences and preferences[participant[\"name\"]]!= earliest_time.strftime(\"%H:%M\"):\n                works_for_everyone = False\n                break\n\n            # If this time doesn't work for this participant, break\n            if not works_for_everyone:\n                break\n\n        # If this time works for everyone, return it\n        if works_for_everyone:\n            return f\"{earliest_time.strftime('%H:%M')}:{(earliest_time + duration).strftime('%H:%M')}\"\n\n        # Otherwise, move to the next possible meeting time\n        earliest_time += timedelta(minutes=30)\n\n    # If no time works for everyone, return None\n    return None\n\n# Example usage\nparticipants = [\n    {\"name\": \"Alan\", \"busy\": [\n        {\"start\": \"13:00\", \"end\": \"13:30\"},\n        {\"start\": \"14:00\", \"end\": \"14:30\"}\n    ]},\n    {\"name\": \"Elizabeth\", \"busy\": [\n        {\"start\": \"9:00\", \"end\": \"9:30\"},\n        {\"start\": \"11:00\", \"end\": \"11:30\"}\n    ]},\n    {\"name\": \"Denise\", \"busy\": [\n        {\"start\": \"9:00\", \"end\": \"10:00\"},\n        {\"start\": \"10:30\", \"end\": \"11:30\"},\n        {\"start\": \"12:30\", \"end\": \"13:00\"},\n        {\"start\": \"13:30\", \"end\": \"14:00\"},\n        {\"start\": \"14:30\", \"end\": \"16:00\"},\n        {\"start\": \"16:30\", \"end\": \"17:00\"}\n    ]}\n]\n\nprint(schedule_meeting(participants, \"9:00\", \"17:00\", \"30 minutes\"))\n```\n\n```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, duration, preferences=None):\n    # Parse start and end times\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n\n    # Parse duration\n    duration = timedelta(hours=int(duration.split(\" \")[0]), minutes=int(duration.split(\" \")[1]))\n\n    # Initialize earliest available time\n    earliest_time = start_time\n\n    # Iterate over possible meeting times\n    while earliest_time < end_time - duration:\n        # Assume this time works for everyone\n        works_for_everyone = True\n\n        # Check each participant's schedule\n        for participant in participants:\n            for time in participant[\"busy\"]:\n                # If this time overlaps with the meeting time, it doesn't work for this participant\n                if earliest_time <= time[\"end\"] and earliest_time + duration > time[\"start\"]:\n                    works_for_everyone = False\n                    break\n\n            # If this participant has a preference and it's not this time, it doesn't work for this participant\n            if preferences and participant[\"name\"] in preferences and preferences[participant[\"name\"]]!= earliest_time.strftime(\"%H:%M\"):\n                works_for_everyone = False\n                break\n\n            # If this time doesn't work for this participant, break\n            if not works_for_everyone:\n                break\n\n        # If this time works for everyone, return it\n        if works_for_everyone:\n            return f\"{earliest_time.strftime('%H:%M')}:{(earliest_time + duration).strftime('%H:%M')}\"\n\n        # Otherwise, move to the next possible meeting time\n        earliest_time += timedelta(minutes=30)\n\n    # If no time works for everyone, return None\n    return None\n\n# Example usage\nparticipants = [\n    {\"name\": \"Mason\", \"busy\": [\n        {\"start\": \"9:30\", \"end\": \"10:00\"},\n        {\"start\": \"11:00\", \"end\": \"11:30\"},\n        {\"start\": \"14:30\", \"end\": \"15:00\"},\n        {\"start\": \"16:30\", \"end\": \"17:00\"}\n    ]},\n    {\"name\": \"Bruce\", \"busy\": []},\n    {\"name\": \"Christopher\", \"busy\": [\n        {\"start\": \"9:30\", \"end\": \"10:30\"},\n        {\"start\": \"11:30\", \"end\": \"12:30\"},\n        {\"start\": \"15:00\", \"end\": \"17:00\"}\n    ]}\n]\n\nprint(schedule_meeting(participants, \"9:00\", \"17:00\", \"30 minutes\"))\n```\n\n```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, duration, preferences=None):\n    # Parse start and end times\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n\n    # Parse duration\n    duration = timedelta(hours=int(duration.split(\" \")[0]), minutes=int(duration.split(\" \")[1]))\n\n    # Initialize earliest available time\n    earliest_time = start_time\n\n    # Iterate over possible meeting times\n    while earliest_time < end_time - duration:\n        # Assume this time works for everyone\n        works_for_everyone = True\n\n        # Check each participant's schedule\n        for participant in participants:\n            for time in participant[\"busy\"]:\n                # If this time overlaps with the meeting time, it doesn't work for this participant\n                if earliest_time <= time[\"end\"] and earliest_time + duration > time[\"start\"]:\n                    works_for_everyone = False\n                    break\n\n            # If this participant has a preference and it's not this time, it doesn't work for this participant\n            if preferences and participant[\"name\"] in preferences and preferences[participant[\"name\"]]!= earliest_time.strftime(\"%H:%M\"):\n                works_for_everyone = False\n                break\n\n            # If this time doesn't work for this participant, break\n            if not works_for_everyone:\n                break\n\n        # If this time works for everyone, return it\n        if works_for_everyone:\n            return f\"{earliest_time.strftime('%H:%M')}:{(earliest_time + duration).strftime('%H:%M')}\"\n\n        # Otherwise, move to the next possible meeting time\n        earliest_time += timedelta(minutes=30)\n\n    # If no time works for everyone, return None\n    return None\n\n# Example usage\nparticipants = [\n    {\"name\": \"Donna\", \"busy\": [\n        {\"start\": \"14:00\", \"end\": \"14:30\"},\n        {\"start\": \"15:30\", \"end\": \"16:00\"}\n    ]},\n    {\"name\": \"John\", \"busy\": [\n        {\"start\": \"11:00\", \"end\": \"11:30\"},\n        {\"start\": \"16:30\", \"end\": \"17:00\"}\n    ]},\n    {\"name\": \"Billy\", \"busy\": [\n        {\"start\": \"9:00\", \"end\": \"10:00\"},\n        {\"start\": \"10:30\", \"end\": \"14:00\"},\n        {\"start\": \"14:30\", \"end\": \"17:00\"}\n    ]}\n]\n\nprint(schedule_meeting(participants, \"9:00\", \"17:00\", \"30 minutes\"))\n```",
            "count": "calendar_scheduling_example_4"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(kathryn_schedule, charlotte_schedule, lauren_schedule, meeting_duration, charlotte_constraint):\n    # Sort schedules by start time\n    schedules = sorted([kathryn_schedule, charlotte_schedule, lauren_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if charlotte_constraint and meeting_end_time > 13*60+30:\n                    continue\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_2(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([karen_schedule, dorothy_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_3(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([douglas_schedule, lawrence_schedule, isabella_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_4(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([jeremy_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_5(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([denise_schedule, elizabeth_schedule, alan_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_6(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([christopher_schedule, mason_schedule, bruce_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if mason_schedule[0][0] >= 12*60+30:\n                    return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n                else:\n                    continue\n\n# Define schedules\nkathryn_schedule = [(9*60, 9*60+30), (10*60, 11*60), (11*60, 12*60), (13*60+30, 14*60+30), (16*60+30, 17*60)]\ncharlotte_schedule = [(12*60, 12*60+30), (16*60, 16*60+30)]\nlauren_schedule = [(9*60, 10*60), (12*60, 12*60+30), (13*60+30, 14*60+30), (15*60, 16*60), (16*60+30, 17*60)]\n\ncharlotte_constraint = True\n\nroger_schedule = []\nkaren_schedule = [(10*60, 10*60+30), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy_schedule = [(9*60, 10*60), (10*60+30, 11*60), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\n\ndouglas_schedule = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence_schedule = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella_schedule = [(9*60, 12*60+30), (13*60+30, 17*60)]\n\njoshua_schedule = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise_schedule = []\njeremy_schedule = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\n\nalan_schedule = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth_schedule = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise_schedule = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\n\nmason_schedule = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce_schedule = []\nchristopher_schedule = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(kathryn_schedule, charlotte_schedule, lauren_schedule, 30, charlotte_constraint)}}}\")\nprint(f\"{{{schedule_meeting_2(roger_schedule, karen_schedule, dorothy_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_3(douglas_schedule, lawrence_schedule, isabella_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_4(joshua_schedule, denise_schedule, jeremy_schedule, 60)}}}\")\nprint(f\"{{{schedule_meeting_5(alan_schedule, elizabeth_schedule, denise_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_6(mason_schedule, bruce_schedule, christopher_schedule, 30)}}}\")\n```",
            "count": "calendar_scheduling_example_5"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([dorothy_schedule, karen_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([isabella_schedule, lawrence_schedule, douglas_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([jeremy_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([denise_schedule, elizabeth_schedule, alan_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([christopher_schedule, mason_schedule, bruce_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if mason_schedule[0][0] >= 12*60+30:\n                    return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n                else:\n                    continue\n\ndef schedule_meeting_6(thomas_schedule, dylan_schedule, jerry_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([jerry_schedule, dylan_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\n# Define schedules\nroger_schedule = []\nkaren_schedule = [(10*60, 10*60+30), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy_schedule = [(9*60, 10*60), (10*60+30, 11*60), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\n\ndouglas_schedule = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence_schedule = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella_schedule = [(9*60, 12*60+30), (13*60+30, 17*60)]\n\njoshua_schedule = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise_schedule = []\njeremy_schedule = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\n\nalan_schedule = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth_schedule = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise_schedule = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\n\nmason_schedule = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce_schedule = []\nchristopher_schedule = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\n\nthomas_schedule = []\ndylan_schedule = [(10*60, 11*60), (13*60*30, 14*60)]\njerry_schedule = [(9*60, 11*60), (11*60+30, 14*60+30), (16*60, 17*60)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, 60)}}}\")\nprint(f\"{{{schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_6(thomas_schedule, dylan_schedule, jerry_schedule, 60)}}}\")\n```",
            "count": "calendar_scheduling_example_6"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([dorothy_schedule, karen_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([isabella_schedule, lawrence_schedule, douglas_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([jeremy_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([denise_schedule, elizabeth_schedule, alan_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([christopher_schedule, mason_schedule, bruce_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if mason_schedule[0][0] >= 12*60+30:\n                    return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n                else:\n                    continue\n\ndef schedule_meeting_6(heather_schedule, nicholas_schedule, zachary_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([zachary_schedule, heather_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if start_time >= 14*60:\n                    continue\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\n# Define schedules\nroger_schedule = []\nkaren_schedule = [(10*60, 10*60+30), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy_schedule = [(9*60, 10*60), (10*60+30, 11*60), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\n\ndouglas_schedule = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence_schedule = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella_schedule = [(9*60, 12*60+30), (13*60+30, 17*60)]\n\njoshua_schedule = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise_schedule = []\njeremy_schedule = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\n\nalan_schedule = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth_schedule = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise_schedule = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\n\nmason_schedule = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce_schedule = []\nchristopher_schedule = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\n\nheather_schedule = [(9*60, 9*60+30), (10*60, 11*60), (13*60, 14*60), (14*60+30, 15*60), (16*60, 16*60+30)]\nnicholas_schedule = []\nzachary_schedule = [(9*60, 10*60+30), (11*60, 12*60), (12*60+30, 13*60), (13*60+30, 16*60+30)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, 60)}}}\")\nprint(f\"{{{schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_6(heather_schedule, nicholas_schedule, zachary_schedule, 60)}}}\")\n```",
            "count": "calendar_scheduling_example_7"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([dorothy_schedule, karen_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([isabella_schedule, lawrence_schedule, douglas_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([jeremy_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([denise_schedule, elizabeth_schedule, alan_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\ndef schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([christopher_schedule, mason_schedule, bruce_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                if mason_schedule[0][0] >= 12*60+30:\n                    return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n                else:\n                    continue\n\ndef schedule_meeting_6(adam_schedule, jerry_schedule, matthew_schedule, meeting_duration):\n    # Sort schedules by start time\n    schedules = sorted([matthew_schedule, jerry_schedule, adam_schedule], key=lambda x: x[0])\n\n    for start_time in range(9*60, 17*60):\n        for duration in range(1, 31):\n            meeting_end_time = start_time + duration\n            if start_time < 9*60 or meeting_end_time > 17*60:\n                continue\n            if all(not (start_time >= schedule[0] and meeting_end_time <= schedule[1]) for schedule in schedules):\n                return f\"{start_time//60:02d}:{start_time%60:02d}:{meeting_end_time//60:02d}:{meeting_end_time%60:02d}\"\n\n# Define schedules\nroger_schedule = []\nkaren_schedule = [(10*60, 10*60+30), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy_schedule = [(9*60, 10*60), (10*60+30, 11*60), (11*60, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\n\ndouglas_schedule = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence_schedule = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella_schedule = [(9*60, 12*60+30), (13*60+30, 17*60)]\n\njoshua_schedule = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise_schedule = []\njeremy_schedule = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\n\nalan_schedule = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth_schedule = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise_schedule = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\n\nmason_schedule = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce_schedule = []\nchristopher_schedule = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\n\nadam_schedule = [(10*60, 10*60+30), (12*60+30, 13*60), (13*60+30, 14*60+30)]\njerry_schedule = [(9*60, 9*60+30), (12*60, 12*60+30), (15*60, 16*60)]\nmatthew_schedule = [(9*60+30, 11*60), (11*60+30, 12*60+30), (13*60, 14*60), (14*60+30, 17*60)]\n\n# Find meeting time\nprint(f\"{{{schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, 60)}}}\")\nprint(f\"{{{schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, 30)}}}\")\nprint(f\"{{{schedule_meeting_6(adam_schedule, jerry_schedule, matthew_schedule, 30)}}}\")\n```",
            "count": "calendar_scheduling_example_8"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    # Convert start and end times to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    duration = timedelta(hours=int(duration.split(' ')[0]), minutes=int(duration.split(' ')[1]))\n\n    # Find the earliest available time for each participant\n    earliest_times = []\n    for participant in participants:\n        participant_schedule = participants[participant]\n        earliest_time = datetime.strptime('09:00', '%H:%M')\n        for time in participant_schedule:\n            if time > earliest_time:\n                earliest_times.append((participant, time))\n                break\n        else:\n            earliest_times.append((participant, end_time))\n\n    # Find the earliest time that works for all participants\n    earliest_time = datetime.strptime('09:00', '%H:%M')\n    while earliest_time < end_time:\n        works_for_all = True\n        for participant, time in earliest_times:\n            if earliest_time < time:\n                works_for_all = False\n                break\n        if works_for_all:\n            break\n        earliest_time += timedelta(minutes=30)\n\n    # Check if the earliest time works for all participants\n    for participant, time in earliest_times:\n        if earliest_time < time:\n            earliest_time += timedelta(minutes=30)\n            while earliest_time < end_time:\n                works_for_all = True\n                for participant, time in earliest_times:\n                    if earliest_time < time:\n                        works_for_all = False\n                        break\n                if works_for_all:\n                    break\n                earliest_time += timedelta(minutes=30)\n\n    # Format the time as HH:MM\n    start_time = earliest_time.strftime('%H:%M')\n    end_time = (earliest_time + duration).strftime('%H:%M')\n\n    return '{' + start_time + ':' + end_time + '}'\n\n# Test the function\nparticipants = {\n    'Roger': ['10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30'],\n    'Karen': ['10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30'],\n    'Dorothy': ['09:00', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '14:00', '15:30', '16:00', '17:00']\n}\nprint(find_meeting_time(participants, '09:00', '17:00', '30 minutes'))\n\nparticipants = {\n    'Douglas': ['12:00', '12:30', '15:00', '15:30'],\n    'Lawrence': ['10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:30', '16:00'],\n    'Isabella': ['09:00', '12:30', '13:30', '17:00']\n}\nprint(find_meeting_time(participants, '09:00', '17:00', '30 minutes'))\n\nparticipants = {\n    'Joshua': ['10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30'],\n    'Denise': [],\n    'Jeremy': ['09:30', '10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']\n}\nprint(find_meeting_time(participants, '09:00', '17:00', '1 hour'))\n\nparticipants = {\n    'Alan': ['13:00', '13:30', '14:00', '14:30'],\n    'Elizabeth': ['09:00', '09:30', '11:00', '11:30'],\n    'Denise': ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30', '17:00']\n}\nprint(find_meeting_time(participants, '09:00', '17:00', '30 minutes'))\n\nparticipants = {\n    'Mason': ['09:30', '10:00', '11:00', '11:30', '14:30', '15:00', '16:30', '17:00'],\n    'Bruce': [],\n    'Christopher': ['09:30', '10:30', '11:30', '12:30', '15:00', '17:00']\n}\nprint(find_meeting_time(participants, '09:00', '17:00', '30 minutes'))\n\nparticipants = {\n    'Diane': ['09:00', '09:30', '12:00', '12:30', '14:30', '15:30'],\n    'Kelly': ['09:30', '10:00'],\n    'Deborah': ['09:00', '09:30', '10:00', '14:00', '14:30', '17:00']\n}\nprint(find_meeting_time(participants, '09:00', '17:00', '30 minutes'))\n```",
            "count": "calendar_scheduling_example_9"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, preferences=None):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Filter available time slots based on preferences\n    if preferences:\n        available_slots = [time for time in available_slots if time[0].hour >= preferences['earliest']]\n    \n    # Find the first available time slot\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': ['10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30', '16:00'],\n    'Dorothy': ['09:00', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '14:00', '15:30', '16:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 11}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Douglas': ['12:00', '12:30', '15:00', '15:30'],\n    'Lawrence': ['10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:30', '16:00'],\n    'Isabella': ['09:00', '12:30', '13:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Joshua': ['10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30'],\n    'Denise': [],\n    'Jeremy': ['09:30', '10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 60\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Alan': ['13:00', '13:30', '14:00', '14:30'],\n    'Elizabeth': ['09:00', '09:30', '11:00', '11:30'],\n    'Denise': ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 10}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Mason': ['09:30', '10:00', '11:00', '11:30', '14:30', '15:00', '16:30', '17:00'],\n    'Bruce': [],\n    'Christopher': ['09:30', '10:30', '11:30', '12:30', '15:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12.5}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Diana': ['11:30', '13:00'],\n    'Ethan': [],\n    'Janet': ['09:00', '12:30', '13:00', '14:00', '15:00', '15:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_10"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, preferences=None):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Filter available time slots based on preferences\n    if preferences:\n        available_slots = [time for time in available_slots if time[0].hour >= preferences['earliest']]\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': ['10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30', '16:00'],\n    'Dorothy': ['09:00', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '14:00', '15:30', '16:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 11}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Douglas': ['12:00', '12:30', '15:00', '15:30'],\n    'Lawrence': ['10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:30', '16:00'],\n    'Isabella': ['09:00', '12:30', '13:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Joshua': ['10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30'],\n    'Denise': [],\n    'Jeremy': ['09:30', '10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 60\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Alan': ['13:00', '13:30', '14:00', '14:30'],\n    'Elizabeth': ['09:00', '09:30', '11:00', '11:30'],\n    'Denise': ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 10}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Mason': ['09:30', '10:00', '11:00', '11:30', '14:30', '15:00', '16:30', '17:00'],\n    'Bruce': [],\n    'Christopher': ['09:30', '10:30', '11:30', '12:30', '15:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12.5}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Diana': ['11:30', '13:00'],\n    'Ethan': [],\n    'Janet': ['09:00', '12:30', '13:00', '14:00', '15:00', '15:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Alexander': ['09:30', '10:00', '10:30', '11:00', '12:30', '13:00', '14:30', '15:00', '16:00', '17:00'],\n    'Elizabeth': ['09:00', '09:30', '11:30', '12:30', '13:00', '14:30'],\n    'Walter': ['09:00', '14:30', '15:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_11"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, preferences=None):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Filter available time slots based on preferences\n    if preferences:\n        available_slots = [time for time in available_slots if time[0].hour >= preferences['earliest']]\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': ['10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30', '16:00'],\n    'Dorothy': ['09:00', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '14:00', '15:30', '16:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 11}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Douglas': ['12:00', '12:30', '15:00', '15:30'],\n    'Lawrence': ['10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:30', '16:00'],\n    'Isabella': ['09:00', '12:30', '13:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Joshua': ['10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30'],\n    'Denise': [],\n    'Jeremy': ['09:30', '10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 60\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Alan': ['13:00', '13:30', '14:00', '14:30'],\n    'Elizabeth': ['09:00', '09:30', '11:00', '11:30'],\n    'Denise': ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 10}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Mason': ['09:30', '10:00', '11:00', '11:30', '14:30', '15:00', '16:30', '17:00'],\n    'Bruce': [],\n    'Christopher': ['09:30', '10:30', '11:30', '12:30', '15:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12.5}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Diana': ['11:30', '13:00'],\n    'Ethan': [],\n    'Janet': ['09:00', '12:30', '13:00', '14:00', '15:00', '15:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Alexander': ['09:30', '10:00', '10:30', '11:00', '12:30', '13:00', '14:30', '15:00', '16:00', '17:00'],\n    'Elizabeth': ['09:00', '09:30', '11:30', '12:30', '13:00', '14:30'],\n    'Walter': ['09:00', '14:30', '15:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'David': [],\n    'Debra': ['09:30', '10:00', '11:00', '11:30', '12:00', '13:00', '14:00', '14:30', '16:00', '16:30'],\n    'Kevin': ['09:00', '12:00', '14:00', '17:00']\n}\nmeeting_duration = 60\n\nprint(schedule_meeting(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_12"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, preferences=None):\n    # Convert time strings to datetime objects\n    schedules = []\n    for participant, schedule in participants.items():\n        schedules.append([(datetime.strptime(time, '%H:%M'), datetime.strptime(time, '%H:%M') + timedelta(minutes=meeting_duration)) for time in schedule])\n    \n    # Sort schedules by start time\n    for schedule in schedules:\n        schedule.sort()\n    \n    # Find available time slots\n    available_slots = []\n    for hour in range(9, 17):\n        time = datetime(hour, 0, 0)\n        while time < datetime(17, 0, 0):\n            is_available = True\n            for schedule in schedules:\n                for start, end in schedule:\n                    if start <= time and time < end:\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n            if is_available:\n                available_slots.append((time, time + timedelta(minutes=meeting_duration)))\n            time += timedelta(minutes=30)\n    \n    # Filter available time slots based on preferences\n    if preferences:\n        available_slots = [time for time in available_slots if time[0].hour >= preferences['earliest']]\n    \n    # Find the first available time slot that meets the meeting duration\n    for time in available_slots:\n        if time[1] - time[0] >= timedelta(minutes=meeting_duration):\n            return f{{time[0].strftime('%H:%M'):time[1].strftime('%H:%M')}}\n\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': ['10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30', '16:00'],\n    'Dorothy': ['09:00', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '14:00', '15:30', '16:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 11}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Douglas': ['12:00', '12:30', '15:00', '15:30'],\n    'Lawrence': ['10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:30', '16:00'],\n    'Isabella': ['09:00', '12:30', '13:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Joshua': ['10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30'],\n    'Denise': [],\n    'Jeremy': ['09:30', '10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 60\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Alan': ['13:00', '13:30', '14:00', '14:30'],\n    'Elizabeth': ['09:00', '09:30', '11:00', '11:30'],\n    'Denise': ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 10}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Mason': ['09:30', '10:00', '11:00', '11:30', '14:30', '15:00', '16:30', '17:00'],\n    'Bruce': [],\n    'Christopher': ['09:30', '10:30', '11:30', '12:30', '15:00', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12.5}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Diana': ['11:30', '13:00'],\n    'Ethan': [],\n    'Janet': ['09:00', '12:30', '13:00', '14:00', '15:00', '15:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 12}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n\nparticipants = {\n    'Alexander': ['09:30', '10:00', '10:30', '11:00', '12:30', '13:00', '14:30', '15:00', '16:00', '17:00'],\n    'Elizabeth': ['09:00', '09:30', '11:30', '12:30', '13:00', '14:30'],\n    'Walter': ['09:00', '14:30', '15:30', '17:00']\n}\nmeeting_duration = 30\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'David': [],\n    'Debra': ['09:30', '10:00', '11:00', '11:30', '12:00', '13:00', '14:00', '14:30', '16:00', '16:30'],\n    'Kevin': ['09:00', '12:00', '14:00', '17:00']\n}\nmeeting_duration = 60\n\nprint(schedule_meeting(participants, meeting_duration))\n\nparticipants = {\n    'Gerald': ['09:00', '09:30', '13:00', '14:00', '15:00', '15:30', '16:00', '17:00'],\n    'Roy': [],\n    'Barbara': ['09:30', '10:00', '11:30', '14:00', '14:30', '15:00', '15:30', '17:00']\n}\nmeeting_duration = 30\npreferences = {'earliest': 13}\n\nprint(schedule_meeting(participants, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_13"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants):\n    # Sort the participants by their earliest available time\n    participants.sort(key=lambda x: x[1][0])\n    \n    # Initialize the earliest available time\n    earliest_time = datetime.strptime(participants[0][1][0], '%H:%M')\n    \n    # Iterate over the participants to find the earliest available time\n    for participant in participants[1:]:\n        for time in participant[1]:\n            if time > earliest_time:\n                earliest_time = time\n                break\n    \n    # Check if the meeting time is within the work hours\n    if earliest_time < datetime.strptime('09:00', '%H:%M') or earliest_time > datetime.strptime('17:00', '%H:%M'):\n        return None\n    \n    # Calculate the meeting end time\n    meeting_end_time = earliest_time + timedelta(hours=0, minutes=30)\n    \n    # Return the meeting time in the required format\n    return '{:02d}:{:02d}:{:02d}:{:02d}'.format(earliest_time.hour, earliest_time.minute, meeting_end_time.hour, meeting_end_time.minute)\n\n\n# Define the participants and their schedules\nparticipants = [\n    ('Roger', [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), \n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), \n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), \n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), \n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')), \n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]),\n    ('Karen', [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), \n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), \n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), \n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')), \n               (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]),\n    ('Dorothy', [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), \n                 (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), \n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), \n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), \n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')), \n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))])\n]\n\n# Find the meeting time\nmeeting_time = find_meeting_time(participants)\nprint(meeting_time)\n\nparticipants = [\n    ('Douglas', [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), \n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]),\n    ('Lawrence', [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), \n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), \n                  (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), \n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]),\n    ('Isabella', [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), \n                  (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))])\n]\n\nmeeting_time = find_meeting_time(participants)\nprint(meeting_time)\n\nparticipants = [\n    ('Joshua', [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), \n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), \n                (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), \n                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]),\n    ('Denise', []),\n    ('Jeremy', [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), \n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')), \n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), \n                (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), \n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), \n                (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))])\n]\n\nmeeting_time = find_meeting_time(participants)\nprint(meeting_time)\n\nparticipants = [\n    ('Alan', [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), \n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))]),\n    ('Elizabeth', [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), \n                   (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))]),\n    ('Denise', [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), \n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')), \n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), \n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), \n                (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), \n                (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))])\n]\n\nmeeting_time = find_meeting_time(participants)\nprint(meeting_time)\n\nparticipants = [\n    ('Mason', [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')), \n               (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), \n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), \n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]),\n    ('Bruce', []),\n    ('Christopher', [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), \n                     (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')), \n                     (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))])\n]\n\nmeeting_time = find_meeting_time(participants)\nprint(meeting_time)\n\nparticipants = [\n    ('Brandon', [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')), \n                 (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), \n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]),\n    ('Jerry', []),\n    ('Bradley', [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), \n                 (datetime.strptime('12:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')), \n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))])\n]\n\nmeeting_time = find_meeting_time(participants)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_14"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n                if participant.get('constraint', False) and time.time() < datetime.strptime('12:00', '%H:%M').time():\n                    available = False\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Roger','schedule': []},\n    {'name': 'Karen','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Dorothy','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Douglas','schedule': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Lawrence','schedule': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Isabella','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Joshua','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': []},\n    {'name': 'Jeremy','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 60))\n\nparticipants = [\n    {'name': 'Alan','schedule': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))]},\n    {'name': 'Elizabeth','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Mason','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Bruce','schedule': []},\n    {'name': 'Christopher','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Joyce','schedule': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]},\n    {'name': 'Christine','schedule': []},\n    {'name': 'Alexander','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n```",
            "count": "calendar_scheduling_example_15"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Roger','schedule': []},\n    {'name': 'Karen','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Dorothy','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Douglas','schedule': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Lawrence','schedule': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Isabella','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Joshua','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': []},\n    {'name': 'Jeremy','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 60))\n\nparticipants = [\n    {'name': 'Alan','schedule': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))]},\n    {'name': 'Elizabeth','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Mason','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Bruce','schedule': []},\n    {'name': 'Christopher','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Scott','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Gabriel','schedule': []},\n    {'name': 'Christine','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n```",
            "count": "calendar_scheduling_example_16"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n                if participant.get('constraint', False) and time.time() > datetime.strptime('13:30', '%H:%M').time():\n                    available = False\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Roger','schedule': []},\n    {'name': 'Karen','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Dorothy','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Douglas','schedule': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Lawrence','schedule': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Isabella','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Joshua','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': []},\n    {'name': 'Jeremy','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 60))\n\nparticipants = [\n    {'name': 'Alan','schedule': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))]},\n    {'name': 'Elizabeth','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Mason','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Bruce','schedule': []},\n    {'name': 'Christopher','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Margaret','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Donna','schedule': [(datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]},\n    {'name': 'Helen','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Convert constraints to datetime objects\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for i in range(int((end_time - start_time).total_seconds() / 60)):\n        time = start_time + timedelta(minutes=i)\n        if (time + timedelta(minutes=meeting_duration)).time() <= datetime.strptime('17:00', '%H:%M').time():\n            available = True\n            for participant in participants:\n                for schedule in participant['schedule']:\n                    if (time.time() <= schedule[1].time() and time.time() >= schedule[0].time()) or (schedule[1].time() < time.time() + timedelta(minutes=meeting_duration).time() and schedule[0].time() >= time.time()):\n                        available = False\n                        break\n                if not available:\n                    break\n                if participant.get('constraint', False) and time.time() > datetime.strptime('15:30', '%H:%M').time():\n                    available = False\n            if available:\n                return f'{{{time.strftime(\"%H:%M\")}:{(time + timedelta(minutes=meeting_duration) - timedelta(minutes=1)).strftime(\"%H:%M\")}}}}'\n\n# Example usage\nparticipants = [\n    {'name': 'Roger','schedule': []},\n    {'name': 'Karen','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Dorothy','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')), (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Douglas','schedule': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Lawrence','schedule': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]},\n    {'name': 'Isabella','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Joshua','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': []},\n    {'name': 'Jeremy','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 60))\n\nparticipants = [\n    {'name': 'Alan','schedule': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))]},\n    {'name': 'Elizabeth','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))]},\n    {'name': 'Denise','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Mason','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')), (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Bruce','schedule': []},\n    {'name': 'Christopher','schedule': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n\nparticipants = [\n    {'name': 'Brian','schedule': []},\n    {'name': 'Billy','schedule': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')), (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')), (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'name': 'Patricia','schedule': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')), (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')), (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')), (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]},\n    {'constraint': True}\n]\n\nprint(find_meeting_time(participants, 30))\n```",
            "count": "calendar_scheduling_example_18"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, duration, preferences=None):\n    # Convert time strings to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    duration = timedelta(hours=duration)\n\n    # Find the earliest available time slot for each participant\n    participant_times = {}\n    for participant in participants:\n        participant_times[participant] = []\n        for time in participants[participant]:\n            start = datetime.strptime(time[0], '%H:%M')\n            end = datetime.strptime(time[1], '%H:%M')\n            participant_times[participant].append((start, end))\n\n    # Sort the time slots for each participant\n    for participant in participant_times:\n        participant_times[participant].sort()\n\n    # Find the first available time slot that works for all participants\n    time = start_time\n    while time < end_time:\n        works = True\n        for participant in participants:\n            for start, end in participant_times[participant]:\n                if start <= time + duration <= end:\n                    works = False\n                    break\n            if not works:\n                break\n        if works:\n            return f'{time.strftime(\"%H:%M\")}:{(time + duration).strftime(\"%H:%M\")}'\n        time += timedelta(minutes=30)\n\n# Test the function\nparticipants = {\n    'Roger': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')],\n    'Karen': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')],\n    'Dorothy': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]\n}\nstart_time = '09:00'\nend_time = '17:00'\nduration = 0.5\nprint(schedule_meeting(participants, start_time, end_time, duration))  # Output: {11:00:11:30}\n\nparticipants = {\n    'Douglas': [('12:00', '12:30'), ('15:00', '15:30')],\n    'Lawrence': [('10:30', '12:00'), ('13:00', '13:30'), ('14:00', '14:30'), ('15:30', '16:00')],\n    'Isabella': [('09:00', '12:30'), ('13:30', '17:00')]\n}\nstart_time = '09:00'\nend_time = '17:00'\nduration = 0.5\nprint(schedule_meeting(participants, start_time, end_time, duration))  # Output: {12:30:13:00}\n\nparticipants = {\n    'Joshua': [('10:00', '10:30'), ('12:00', '12:30'), ('14:00', '14:30'), ('15:00', '15:30')],\n    'Denise': [],\n    'Jeremy': [('09:30', '10:30'), ('12:00', '13:00'), ('13:30', '14:00'), ('14:30', '15:00'), ('15:30', '16:00'), ('16:30', '17:00')]\n}\nstart_time = '09:00'\nend_time = '17:00'\nduration = 1\nprint(schedule_meeting(participants, start_time, end_time, duration))  # Output: {10:30:11:30}\n\nparticipants = {\n    'Alan': [('13:00', '13:30'), ('14:00', '14:30')],\n    'Elizabeth': [('09:00', '09:30'), ('11:00', '11:30')],\n    'Denise': [('09:00', '10:00'), ('10:30', '11:30'), ('12:30', '13:00'), ('13:30', '14:00'), ('14:30', '16:00'), ('16:30', '17:00')]\n}\nstart_time = '09:00'\nend_time = '17:00'\nduration = 0.5\nprint(schedule_meeting(participants, start_time, end_time, duration))  # Output: {10:00:10:30}\n\nparticipants = {\n    'Mason': [('09:30', '10:00'), ('11:00', '11:30'), ('14:30', '15:00'), ('16:30', '17:00')],\n    'Bruce': [],\n    'Christopher': [('09:30', '10:30'), ('11:30', '12:30'), ('15:00', '17:00')]\n}\nstart_time = '09:00'\nend_time = '17:00'\nduration = 0.5\nprint(schedule_meeting(participants, start_time, end_time, duration))  # Output: {12:30:13:00}\n\nparticipants = {\n    'Stephen': [('10:00', '10:30'), ('13:00', '13:30'), ('14:30', '15:00'), ('16:00', '16:30')],\n    'Edward': [('09:00', '09:30'), ('10:00', '10:30'), ('13:30', '14:30'), ('15:00', '16:00')],\n    'Angela': [('09:00', '11:30'), ('12:30', '13:00'), ('13:30', '15:30'), ('16:00', '17:00')]\n}\nstart_time = '09:00'\nend_time = '17:00'\nduration = 1\nprint(schedule_meeting(participants, start_time, end_time, duration))  # Output: {14:30:15:30}\n```",
            "count": "calendar_scheduling_example_19"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=30):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    tasks = [\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Roger\", [(0, 0), (24, 24)]),\n                (\"Karen\", [(10, 10.5), (11.5, 12), (12, 12.5), (14, 15)]),\n                (\"Dorothy\", [(9, 10), (10.5, 11), (11.5, 12), (12, 12.5), (14, 15.5), (16, 24)])\n            ],\n            \"11:00-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Douglas\", [(12, 12.5), (15, 15.5)]),\n                (\"Lawrence\", [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]),\n                (\"Isabella\", [(9, 12.5), (13.5, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Joshua\", [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]),\n                (\"Denise\", [(0, 24)]),\n                (\"Jeremy\", [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 24)])\n            ],\n            \"10:30-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Alan\", [(13, 13.5), (14, 14.5)]),\n                (\"Elizabeth\", [(9, 9.5), (11, 11.5)]),\n                (\"Denise\", [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 24)])\n            ],\n            \"10:00-10:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Mason\", [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 24)]),\n                (\"Bruce\", [(0, 24)]),\n                (\"Christopher\", [(9.5, 10.5), (11.5, 12.5), (15, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Ralph\", [(13.5, 14), (14.5, 15)]),\n                (\"Peter\", [(9, 9.5), (11, 13), (16, 16.5)]),\n                (\"Daniel\", [(9, 10), (10.5, 15.5), (16, 24)])\n            ],\n            \"14:30-15:30\"\n        )\n    ]\n\n    for task in tasks:\n        print(f\"Task: {task[0]}\")\n        print(f\"Start time: {task[1].strftime('%H:%M')}\")\n        print(f\"End time: {task[2].strftime('%H:%M')}\")\n        print(\"Participants:\")\n        for participant in task[3]:\n            print(f\"  {participant[0]}: {[(i, j) for i, j in participant[1]]}\")\n        print(f\"Expected solution: {task[4]}\")\n        print(f\"Actual solution: {find_meeting_time(task[1], task[2], task[3])}\")\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_20"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=30):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    tasks = [\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Roger\", [(0, 24)]),\n                (\"Karen\", [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]),\n                (\"Dorothy\", [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 24)])\n            ],\n            \"11:00-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Douglas\", [(12, 12.5), (15, 15.5)]),\n                (\"Lawrence\", [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]),\n                (\"Isabella\", [(9, 12.5), (13.5, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Joshua\", [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]),\n                (\"Denise\", [(0, 24)]),\n                (\"Jeremy\", [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 24)])\n            ],\n            \"10:30-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Alan\", [(13, 13.5), (14, 14.5)]),\n                (\"Elizabeth\", [(9, 9.5), (11, 11.5)]),\n                (\"Denise\", [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 24)])\n            ],\n            \"10:00-10:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Mason\", [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 24)]),\n                (\"Bruce\", [(0, 24)]),\n                (\"Christopher\", [(9.5, 10.5), (11.5, 12.5), (15, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Bobby\", [(0, 24)]),\n                (\"Scott\", [(11.5, 12), (15.5, 16)]),\n                (\"Kimberly\", [(11, 12), (12.5, 13), (13.5, 14), (14.5, 15), (15.5, 24)])\n            ],\n            \"14:30-15:30\"\n        )\n    ]\n\n    for task in tasks:\n        print(f\"Task: {task[0]}\")\n        print(f\"Start time: {task[1].strftime('%H:%M')}\")\n        print(f\"End time: {task[2].strftime('%H:%M')}\")\n        print(\"Participants:\")\n        for participant in task[3]:\n            print(f\"  {participant[0]}: {[(i, j) for i, j in participant[1]]}\")\n        print(f\"Expected solution: {task[4]}\")\n        print(f\"Actual solution: {find_meeting_time(task[1], task[2], task[3])}\")\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_21"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=60):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    tasks = [\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Roger\", [(0, 24)]),\n                (\"Karen\", [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]),\n                (\"Dorothy\", [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 24)])\n            ],\n            \"11:00-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Douglas\", [(12, 12.5), (15, 15.5)]),\n                (\"Lawrence\", [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]),\n                (\"Isabella\", [(9, 12.5), (13.5, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Joshua\", [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]),\n                (\"Denise\", [(0, 24)]),\n                (\"Jeremy\", [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 24)])\n            ],\n            \"10:30-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Alan\", [(13, 13.5), (14, 14.5)]),\n                (\"Elizabeth\", [(9, 9.5), (11, 11.5)]),\n                (\"Denise\", [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 24)])\n            ],\n            \"10:00-10:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Mason\", [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 24)]),\n                (\"Bruce\", [(0, 24)]),\n                (\"Christopher\", [(9.5, 10.5), (11.5, 12.5), (15, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Theresa\", [(9, 9.5), (12.5, 13.5), (14, 15), (16.5, 17)]),\n                (\"Charles\", [(10, 10.5), (11.5, 12.5), (14, 15.5)]),\n                (\"Betty\", [(9, 10.5), (12, 12.5), (13, 14), (15, 16)])\n            ],\n            \"14:30-15:30\"\n        )\n    ]\n\n    for task in tasks:\n        print(f\"Task: {task[0]}\")\n        print(f\"Start time: {task[1].strftime('%H:%M')}\")\n        print(f\"End time: {task[2].strftime('%H:%M')}\")\n        print(\"Participants:\")\n        for participant in task[3]:\n            print(f\"  {participant[0]}: {[(i, j) for i, j in participant[1]]}\")\n        print(f\"Expected solution: {task[4]}\")\n        print(f\"Actual solution: {find_meeting_time(task[1], task[2], task[3])}\")\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_22"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration=60):\n    # Sort the participants by their end time\n    participants.sort(key=lambda x: x[1])\n\n    for start in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start_time.year, start_time.month, start_time.day, start, minute)\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n            if all(not (meeting_start < p[0] and meeting_end > p[0]) and not (meeting_start < p[1] and meeting_end > p[1]) \n                   for p in participants):\n                return f{{meeting_start.strftime('%H:%M'):meeting_end.strftime('%H:%M')}}\n\ndef main():\n    tasks = [\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Roger\", [(0, 24)]),\n                (\"Karen\", [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]),\n                (\"Dorothy\", [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 24)])\n            ],\n            \"11:00-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Douglas\", [(12, 12.5), (15, 15.5)]),\n                (\"Lawrence\", [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]),\n                (\"Isabella\", [(9, 12.5), (13.5, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Joshua\", [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]),\n                (\"Denise\", [(0, 24)]),\n                (\"Jeremy\", [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 24)])\n            ],\n            \"10:30-11:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Alan\", [(13, 13.5), (14, 14.5)]),\n                (\"Elizabeth\", [(9, 9.5), (11, 11.5)]),\n                (\"Denise\", [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 24)])\n            ],\n            \"10:00-10:30\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Mason\", [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 24)]),\n                (\"Bruce\", [(0, 24)]),\n                (\"Christopher\", [(9.5, 10.5), (11.5, 12.5), (15, 24)])\n            ],\n            \"12:30-13:00\"\n        ),\n        (\n            \"Monday\",\n            datetime(2024, 7, 22, 9, 0),\n            datetime(2024, 7, 22, 17, 0),\n            [\n                (\"Billy\", [(11.5, 12), (13, 15), (16, 16.5)]),\n                (\"Maria\", [(9, 9.5), (10, 10.5), (13, 13.5), (14, 14.5)]),\n                (\"William\", [(9.5, 10), (12, 12.5), (13.5, 15), (15.5, 17)])\n            ],\n            \"14:30-15:30\"\n        )\n    ]\n\n    for task in tasks:\n        print(f\"Task: {task[0]}\")\n        print(f\"Start time: {task[1].strftime('%H:%M')}\")\n        print(f\"End time: {task[2].strftime('%H:%M')}\")\n        print(\"Participants:\")\n        for participant in task[3]:\n            print(f\"  {participant[0]}: {[(i, j) for i, j in participant[1]]}\")\n        print(f\"Expected solution: {task[4]}\")\n        print(f\"Actual solution: {find_meeting_time(task[1], task[2], task[3])}\")\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_23"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, start_time, end_time, meeting_duration, preferences=None):\n    # Convert time strings to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(hours=int(meeting_duration.split(' ')[0]), minutes=int(meeting_duration.split(' ')[1]))\n\n    # Sort participants by earliest available time\n    participants.sort(key=lambda x: min([datetime.strptime(time, '%H:%M') for time in x['schedule'] if datetime.strptime(time, '%H:%M') >= start_time]))\n\n    # Find the earliest available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            if all(time + meeting_duration <= datetime.strptime(participant['schedule'][i], '%H:%M') for i, participant in enumerate(participants) for j, time_slot in enumerate(participant['schedule']) if time_slot!= 'free' and time_slot!= 'wide open' and time_slot!= ''):\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(time.hour, time.minute, (time + meeting_duration).hour, (time + meeting_duration).minute)\n\n    return None\n\n# Test cases\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger','schedule': ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00']},\n            {'name': 'Karen','schedule': ['09:00', '10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30', '16:00', '17:00']},\n            {'name': 'Dorothy','schedule': ['09:00', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30', '16:00', '16:30', '17:00']},\n        ],\n       'start_time': '09:00',\n        'end_time': '17:00',\n       'meeting_duration': '30 minutes',\n       'solution': '11:00 - 11:30',\n    },\n    {\n        'participants': [\n            {'name': 'Douglas','schedule': ['09:00', '12:00', '12:30', '13:00', '14:00', '15:00', '15:30', '16:00', '17:00']},\n            {'name': 'Lawrence','schedule': ['09:00', '10:30', '11:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '17:00']},\n            {'name': 'Isabella','schedule': ['09:00', '12:30', '13:30', '17:00']},\n        ],\n       'start_time': '09:00',\n        'end_time': '17:00',\n       'meeting_duration': '30 minutes',\n       'solution': '12:30 - 13:00',\n    },\n    {\n        'participants': [\n            {'name': 'Joshua','schedule': ['09:00', '10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30', '16:00', '17:00']},\n            {'name': 'Denise','schedule': ['09:00', '10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']},\n            {'name': 'Jeremy','schedule': ['09:30', '10:30', '11:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']},\n        ],\n       'start_time': '09:00',\n        'end_time': '17:00',\n       'meeting_duration': '1 hour',\n       'solution': '10:30 - 11:30',\n    },\n    {\n        'participants': [\n            {'name': 'Alan','schedule': ['09:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']},\n            {'name': 'Elizabeth','schedule': ['09:00', '09:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']},\n            {'name': 'Denise','schedule': ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']},\n        ],\n       'start_time': '09:00',\n        'end_time': '17:00',\n       'meeting_duration': '30 minutes',\n       'solution': '10:00 - 10:30',\n    },\n    {\n        'participants': [\n            {'name': 'Mason','schedule': ['09:30', '10:00', '11:00', '11:30', '14:30', '15:00', '16:30', '17:00']},\n            {'name': 'Bruce','schedule': ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00']},\n            {'name': 'Christopher','schedule': ['09:30', '10:30', '11:30', '12:30', '15:00', '16:00', '17:00']},\n        ],\n       'start_time': '09:00',\n        'end_time': '17:00',\n       'meeting_duration': '30 minutes',\n        'preferences': {'Mason': ['12:30']},\n       'solution': '12:30 - 13:00',\n    },\n    {\n        'participants': [\n            {'name': 'Benjamin','schedule': ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00']},\n            {'name': 'Hannah','schedule': ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00']},\n            {'name': 'Brenda','schedule': ['09:30', '10:00', '11:30', '12:30', '14:00', '15:00', '16:00', '16:30', '17:00']},\n        ],\n       'start_time': '09:00',\n        'end_time': '17:00',\n       'meeting_duration': '30 minutes',\n        'preferences': {'Benjamin': ['09:30']},\n       'solution': '09:30 - 10:00',\n    },\n]\n\nfor task in tasks:\n    print(schedule_meeting([participant['schedule'] for participant in task['participants']], task['start_time'], task['end_time'], task['meeting_duration'], task.get('preferences')))\n```",
            "count": "calendar_scheduling_example_24"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration, preferences=None):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Check if there is a preference to meet at an earlier time\n            if preferences is not None and current_time >= datetime.strptime(preferences, '%H:%M'):\n                # Check if the meeting time is available for all participants\n                for schedule in sorted_schedules:\n                    if schedule[0] <= current_time + timedelta(hours=meeting_duration) < schedule[1]:\n                        available = False\n                        break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\n# Task 1\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n\n# Task 2\nschedules = [\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n\n# Task 3\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 1))\n\n# Task 4\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n\n# Task 5\nschedules = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5, '12:30'))\n\n# Task 6\nschedules = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint('{%s}' % find_meeting_time('09:00', '17:00', schedules, 1))\n```",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration, preferences=None):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Check if there is a preference to meet at an earlier time\n            if preferences is not None and current_time >= datetime.strptime(preferences, '%H:%M'):\n                # Check if the meeting time is available for all participants\n                for schedule in sorted_schedules:\n                    if schedule[0] <= current_time + timedelta(hours=meeting_duration) < schedule[1]:\n                        available = False\n                        break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\n# Task 1\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n\n# Task 2\nschedules = [\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n\n# Task 3\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 1))\n\n# Task 4\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n\n# Task 5\nschedules = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5, '12:30'))\n\n# Task 6\nschedules = [\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint('{%s}' % find_meeting_time('09:00', '17:00', schedules, 1))\n\n# Task 7\nschedules = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint('{%s}' % find_meeting_time('09:00', '17:00', schedules, 1))\n```",
            "count": "calendar_scheduling_example_26"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\nschedules = [\n    (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n```",
            "count": "calendar_scheduling_example_27"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, schedules, meeting_duration):\n    # Sort the schedules by start time\n    sorted_schedules = sorted(schedules, key=lambda x: x[0])\n\n    # Initialize the current time\n    current_time = datetime.strptime(start, '%H:%M')\n\n    while current_time < datetime.strptime(end, '%H:%M'):\n        # Check if the current time is available for all participants\n        available = True\n        for schedule in sorted_schedules:\n            if schedule[0] <= current_time < schedule[1]:\n                available = False\n                break\n\n        if available:\n            # Return the available meeting time\n            return '{%s:%s}' % (current_time.strftime('%H:%M'), (current_time + timedelta(hours=meeting_duration)).strftime('%H:%M'))\n\n        # Move to the next time slot\n        current_time += timedelta(minutes=30)\n\n    # If no available time slot is found, return None\n    return None\n\nschedules = [\n    (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n    (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')),\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n]\nprint(find_meeting_time('09:00', '17:00', schedules, 0.5))\n```",
            "count": "calendar_scheduling_example_28"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    # Sort the participants by their earliest available time\n    participants.sort(key=lambda x: min([t[0] for t in x[1]]))\n\n    # Initialize the earliest available time for each participant\n    earliest_available = {p: None for p in participants}\n\n    # Iterate over the time slots\n    time = start_time\n    while time < end_time:\n        # Check if all participants are available at this time\n        if all(time >= t[0] and time + duration <= t[1] for p, t in zip(participants, earliest_available.values()) if earliest_available[p] is None):\n            # Update the earliest available time for each participant\n            for p, t in zip(participants, earliest_available.values()):\n                if earliest_available[p] is None:\n                    earliest_available[p] = (t[0], time + duration)\n            # Return the meeting time\n            return f\"{time.strftime('%H:%M')}:{(time + duration).strftime('%H:%M')}\"\n\n        # Move to the next time slot\n        time += timedelta(minutes=1)\n\n    # If no meeting time is found, return None\n    return None\n\n# Test the function\ntasks = [\n    (\n        [\"Roger\", \"Karen\", \"Dorothy\"],\n        [(9, 17)],\n        [(9, 10), (10, 10.5), (11, 11.5), (12, 12.5), (14, 15), (15.5, 16)],\n        [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)],\n        \"11:00:11:30\"\n    ),\n    (\n        [\"Douglas\", \"Lawrence\", \"Isabella\"],\n        [(9, 17)],\n        [(12, 12.5), (15, 15.5)],\n        [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)],\n        [(9, 12.5), (13.5, 17)],\n        \"12:30:13:00\"\n    ),\n    (\n        [\"Joshua\", \"Denise\", \"Jeremy\"],\n        [(9, 17)],\n        [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)],\n        [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)],\n        \"10:30:11:30\"\n    ),\n    (\n        [\"Alan\", \"Elizabeth\", \"Denise\"],\n        [(9, 17)],\n        [(13, 13.5), (14, 14.5)],\n        [(9, 9.5), (11, 11.5)],\n        [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)],\n        \"10:00:10:30\"\n    ),\n    (\n        [\"Mason\", \"Bruce\", \"Christopher\"],\n        [(9, 17)],\n        [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)],\n        [(9, 17)],\n        [(9.5, 10.5), (11.5, 12.5), (15, 17)],\n        \"12:30:13:00\"\n    ),\n    (\n        [\"Madison\", \"Diana\", \"Shirley\"],\n        [(9, 17)],\n        [(9.5, 10), (11.5, 12)],\n        [(11, 11.5), (13, 13.5)],\n        [(9, 12), (13.5, 15), (15.5, 17)],\n        \"13:00:14:00\"\n    ),\n]\n\nfor task in tasks:\n    participants = task[0]\n    start_time, end_time = task[1][0]\n    duration = task[3][0]\n    expected_time = task[4]\n    actual_time = find_meeting_time(task[2], start_time, end_time, duration)\n    assert actual_time == expected_time, f\"Expected {expected_time} but got {actual_time}\"\n```",
            "count": "calendar_scheduling_example_29"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Roger','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Karen','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Karen','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Karen','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Karen','start': datetime.time(14, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Karen','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Dorothy','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Dorothy','start': datetime.time(10, 30), 'end': datetime.time(11, 0)},\n        {'name': 'Dorothy','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Dorothy','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Dorothy','start': datetime.time(14, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Dorothy','start': datetime.time(16, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Douglas','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Douglas','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Lawrence','start': datetime.time(10, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Lawrence','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Lawrence','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Lawrence','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Isabella','start': datetime.time(9, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Isabella','start': datetime.time(13, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Joshua','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Joshua','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Joshua','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Joshua','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Jeremy','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Jeremy','start': datetime.time(12, 0), 'end': datetime.time(13, 0)},\n        {'name': 'Jeremy','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Jeremy','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Jeremy','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Jeremy','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 60))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Alan','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Alan','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Elizabeth','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Elizabeth','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Denise','start': datetime.time(10, 30), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Denise','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Denise','start': datetime.time(14, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Denise','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Mason','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Mason','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Mason','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Mason','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n        {'name': 'Bruce','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Christopher','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Christopher','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Christopher','start': datetime.time(15, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Jeffrey','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Jeffrey','start': datetime.time(10, 30), 'end': datetime.time(11, 0)},\n        {'name': 'Virginia','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Virginia','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Virginia','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Virginia','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n        {'name': 'Melissa','start': datetime.time(9, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Melissa','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Melissa','start': datetime.time(13, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Melissa','start': datetime.time(16, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Roger','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Karen','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Karen','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Karen','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Karen','start': datetime.time(14, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Karen','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Dorothy','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Dorothy','start': datetime.time(10, 30), 'end': datetime.time(11, 0)},\n        {'name': 'Dorothy','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Dorothy','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Dorothy','start': datetime.time(14, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Dorothy','start': datetime.time(16, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Douglas','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Douglas','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Lawrence','start': datetime.time(10, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Lawrence','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Lawrence','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Lawrence','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Isabella','start': datetime.time(9, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Isabella','start': datetime.time(13, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Joshua','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Joshua','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Joshua','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Joshua','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Jeremy','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Jeremy','start': datetime.time(12, 0), 'end': datetime.time(13, 0)},\n        {'name': 'Jeremy','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Jeremy','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Jeremy','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Jeremy','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 60))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Alan','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Alan','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Elizabeth','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Elizabeth','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Denise','start': datetime.time(10, 30), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Denise','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Denise','start': datetime.time(14, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Denise','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Mason','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Mason','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Mason','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Mason','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n        {'name': 'Bruce','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Christopher','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Christopher','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Christopher','start': datetime.time(15, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Richard','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Richard','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Martha','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Martha','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Kimberly','start': datetime.time(9, 0), 'end': datetime.time(11, 0)},\n        {'name': 'Kimberly','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Kimberly','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Kimberly','start': datetime.time(14, 0), 'end': datetime.time(16, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_31"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Roger','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Karen','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Karen','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Karen','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Karen','start': datetime.time(14, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Karen','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Dorothy','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Dorothy','start': datetime.time(10, 30), 'end': datetime.time(11, 0)},\n        {'name': 'Dorothy','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Dorothy','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Dorothy','start': datetime.time(14, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Dorothy','start': datetime.time(16, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Douglas','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Douglas','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Lawrence','start': datetime.time(10, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Lawrence','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Lawrence','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Lawrence','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Isabella','start': datetime.time(9, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Isabella','start': datetime.time(13, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Joshua','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Joshua','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Joshua','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Joshua','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Jeremy','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Jeremy','start': datetime.time(12, 0), 'end': datetime.time(13, 0)},\n        {'name': 'Jeremy','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Jeremy','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Jeremy','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Jeremy','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 60))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Alan','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Alan','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Elizabeth','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Elizabeth','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Denise','start': datetime.time(10, 30), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Denise','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Denise','start': datetime.time(14, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Denise','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Mason','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Mason','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Mason','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Mason','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n        {'name': 'Bruce','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Christopher','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Christopher','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Christopher','start': datetime.time(15, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Richard','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Richard','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Martha','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Martha','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Kimberly','start': datetime.time(9, 0), 'end': datetime.time(11, 0)},\n        {'name': 'Kimberly','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Kimberly','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Kimberly','start': datetime.time(14, 0), 'end': datetime.time(16, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Emily','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Emily','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Emily','start': datetime.time(14, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Emily','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n        {'name': 'Melissa','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Melissa','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Frank','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Frank','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Frank','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Frank','start': datetime.time(13, 30), 'end': datetime.time(14, 30)},\n        {'name': 'Frank','start': datetime.time(15, 0), 'end': datetime.time(16, 0)},\n        {'name': 'Frank','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nimport datetime\n\ndef find_meeting_time(start_time, end_time, participants, meeting_duration):\n    meeting_start = start_time\n    meeting_end = start_time + datetime.timedelta(minutes=meeting_duration)\n\n    while meeting_start < end_time:\n        is_valid = True\n        for participant in participants:\n            participant_start = participant['start']\n            participant_end = participant['end']\n            if (meeting_start >= participant_start and meeting_start < participant_end) or \\\n               (meeting_end > participant_start and meeting_end <= participant_end) or \\\n               (meeting_start < participant_start and meeting_end > participant_end):\n                is_valid = False\n                break\n\n        if is_valid:\n            return f{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}\n\n        meeting_start += datetime.timedelta(minutes=1)\n        meeting_end += datetime.timedelta(minutes=1)\n\ndef main():\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Roger','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Karen','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Karen','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Karen','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Karen','start': datetime.time(14, 0), 'end': datetime.time(15, 0)},\n        {'name': 'Karen','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Dorothy','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Dorothy','start': datetime.time(10, 30), 'end': datetime.time(11, 0)},\n        {'name': 'Dorothy','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Dorothy','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Dorothy','start': datetime.time(14, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Dorothy','start': datetime.time(16, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Douglas','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Douglas','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Lawrence','start': datetime.time(10, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Lawrence','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Lawrence','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Lawrence','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Isabella','start': datetime.time(9, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Isabella','start': datetime.time(13, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Joshua','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Joshua','start': datetime.time(12, 0), 'end': datetime.time(12, 30)},\n        {'name': 'Joshua','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Joshua','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Jeremy','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Jeremy','start': datetime.time(12, 0), 'end': datetime.time(13, 0)},\n        {'name': 'Jeremy','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Jeremy','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Jeremy','start': datetime.time(15, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Jeremy','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 60))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Alan','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Alan','start': datetime.time(14, 0), 'end': datetime.time(14, 30)},\n        {'name': 'Elizabeth','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Elizabeth','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Denise','start': datetime.time(10, 30), 'end': datetime.time(11, 30)},\n        {'name': 'Denise','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Denise','start': datetime.time(13, 30), 'end': datetime.time(14, 0)},\n        {'name': 'Denise','start': datetime.time(14, 30), 'end': datetime.time(16, 0)},\n        {'name': 'Denise','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Mason','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Mason','start': datetime.time(11, 0), 'end': datetime.time(11, 30)},\n        {'name': 'Mason','start': datetime.time(14, 30), 'end': datetime.time(15, 0)},\n        {'name': 'Mason','start': datetime.time(16, 30), 'end': datetime.time(17, 0)},\n        {'name': 'Bruce','start': datetime.time(0, 0), 'end': datetime.time(24, 0)},\n        {'name': 'Christopher','start': datetime.time(9, 30), 'end': datetime.time(10, 30)},\n        {'name': 'Christopher','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Christopher','start': datetime.time(15, 0), 'end': datetime.time(17, 0)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\n    start_time = datetime.time(9, 0)\n    end_time = datetime.time(17, 0)\n\n    participants = [\n        {'name': 'Lisa','start': datetime.time(9, 0), 'end': datetime.time(10, 0)},\n        {'name': 'Lisa','start': datetime.time(10, 30), 'end': datetime.time(11, 30)},\n        {'name': 'Lisa','start': datetime.time(12, 30), 'end': datetime.time(13, 0)},\n        {'name': 'Lisa','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n        {'name': 'Bobby','start': datetime.time(9, 0), 'end': datetime.time(9, 30)},\n        {'name': 'Bobby','start': datetime.time(10, 0), 'end': datetime.time(10, 30)},\n        {'name': 'Bobby','start': datetime.time(11, 30), 'end': datetime.time(12, 0)},\n        {'name': 'Bobby','start': datetime.time(15, 0), 'end': datetime.time(15, 30)},\n        {'name': 'Randy','start': datetime.time(9, 30), 'end': datetime.time(10, 0)},\n        {'name': 'Randy','start': datetime.time(10, 30), 'end': datetime.time(11, 0)},\n        {'name': 'Randy','start': datetime.time(11, 30), 'end': datetime.time(12, 30)},\n        {'name': 'Randy','start': datetime.time(13, 0), 'end': datetime.time(13, 30)},\n        {'name': 'Randy','start': datetime.time(14, 30), 'end': datetime.time(15, 30)},\n        {'name': 'Randy','start': datetime.time(16, 0), 'end': datetime.time(16, 30)},\n    ]\n\n    print(find_meeting_time(start_time, end_time, participants, 30))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, start_time, end_time, preferences=None):\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n    meeting_end_time = start_time + timedelta(hours=meeting_duration)\n\n    if preferences:\n        preferred_times = [datetime.strptime(time, \"%H:%M\") for time in preferences]\n    else:\n        preferred_times = []\n\n    participant_schedules = {}\n    for participant in participants:\n        schedule = {}\n        for time in participants[participant]:\n            start, end = map(lambda x: datetime.strptime(x, \"%H:%M\"), time.split(\"-\"))\n            schedule[time] = (start, end)\n        participant_schedules[participant] = schedule\n\n    available_times = []\n    for hour in range(int(start_time.strftime(\"%H\")), int(end_time.strftime(\"%H\"))):\n        for minute in range(0, 60, 30):\n            time = f\"{hour:02d}:{minute:02d}\"\n            if time not in preferred_times:\n                available_times.append(time)\n\n    for time in available_times:\n        start = datetime.strptime(time, \"%H:%M\")\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= schedule[\"-\".join(map(str, (schedule_start, schedule_end)))][0] and end <= schedule[\"-\".join(map(str, (schedule_start, schedule_end)))][1] for participant in participants for schedule_start, schedule_end in participant_schedules[participant].values()):\n            return \"{\" + time + \":\" + (start + timedelta(hours=meeting_duration)).strftime(\"%H:%M\") + \"}\"\n\n    return None\n\n# Test the function\nprint(schedule_meeting({\n    \"Roger\": [\"09:00-10:00\", \"10:30-11:00\", \"11:30-12:00\", \"12:30-13:00\", \"14:00-15:00\", \"15:30-16:00\"],\n    \"Karen\": [\"10:00-10:30\", \"11:30-12:00\", \"12:30-13:00\", \"14:00-15:00\", \"15:30-16:00\"],\n    \"Dorothy\": [\"09:00-10:00\", \"10:30-11:00\", \"11:30-12:00\", \"12:30-13:00\", \"14:00-15:30\", \"16:00-17:00\"]\n}, 0.5, \"09:00\", \"17:00\"))\nprint(schedule_meeting({\n    \"Douglas\": [\"12:00-12:30\", \"15:00-15:30\"],\n    \"Lawrence\": [\"10:30-12:00\", \"13:00-13:30\", \"14:00-14:30\", \"15:30-16:00\"],\n    \"Isabella\": [\"09:00-12:30\", \"13:30-17:00\"]\n}, 0.5, \"09:00\", \"17:00\"))\nprint(schedule_meeting({\n    \"Joshua\": [\"10:00-10:30\", \"12:00-12:30\", \"14:00-14:30\", \"15:00-15:30\"],\n    \"Denise\": [\"09:00-10:00\", \"10:30-11:30\", \"12:30-13:00\", \"13:30-14:00\", \"14:30-16:00\", \"16:30-17:00\"],\n    \"Jeremy\": [\"09:30-10:30\", \"12:00-13:00\", \"13:30-14:00\", \"14:30-15:00\", \"15:30-16:00\", \"16:30-17:00\"]\n}, 1, \"09:00\", \"17:00\"))\nprint(schedule_meeting({\n    \"Alan\": [\"13:00-13:30\", \"14:00-14:30\"],\n    \"Elizabeth\": [\"09:00-09:30\", \"11:00-11:30\"],\n    \"Denise\": [\"09:00-10:00\", \"10:30-11:30\", \"12:30-13:00\", \"13:30-14:00\", \"14:30-16:00\", \"16:30-17:00\"]\n}, 0.5, \"09:00\", \"17:00\"))\nprint(schedule_meeting({\n    \"Mason\": [\"09:30-10:00\", \"11:00-11:30\", \"14:30-15:00\", \"16:30-17:00\"],\n    \"Bruce\": [\"09:00-17:00\"],\n    \"Christopher\": [\"09:30-10:30\", \"11:30-12:30\", \"15:00-17:00\"]\n}, 0.5, \"09:00\", \"17:00\", [\"12:30\"]))\nprint(schedule_meeting({\n    \"Willie\": [\"09:00-17:00\"],\n    \"Richard\": [\"10:00-10:30\", \"11:00-12:00\", \"13:00-14:00\", \"16:00-16:30\"],\n    \"Noah\": [\"10:00-10:30\", \"11:30-13:00\", \"13:30-14:00\", \"14:30-17:00\"]\n}, 1, \"09:00\", \"17:00\"))\n```",
            "count": "calendar_scheduling_example_34"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Bradley\": [(9, 17)],\n    \"Zachary\": [(10, 11), (15, 16)],\n    \"Teresa\": [(9, 10), (11, 12), (13, 14), (14.5, 16.5)]\n}\n\nmeeting_duration = 30\n\nzachary_preferences = (14.5, 17)\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_35"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Ryan\": [(9.5, 10), (12.5, 13)],\n    \"Ruth\": [(9, 17)],\n    \"Denise\": [(9.5, 10.5), (12, 13), (14.5, 16.5)]\n}\n\nmeeting_duration = 60\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Gregory\": [(11, 11.5), (12, 12.5), (15.5, 16.5)],\n    \"Teresa\": [(9, 17)],\n    \"Carol\": [(9, 10.5), (11, 16), (16.5, 17)]\n}\n\nmeeting_duration = 30\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_37"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    available_times = []\n    \n    for name, schedule in schedules.items():\n        for start, end in schedule:\n            start_time_str = datetime.strptime(f\"{start}:00\", \"%H:%M\").time()\n            end_time_str = datetime.strptime(f\"{end}:00\", \"%H:%M\").time()\n            for i in range(int(start_time_str.hour * 60 + start_time_str.minute), int(end_time_str.hour * 60 + end_time_str.minute)):\n                available_times.append((start_time + timedelta(minutes=i), start_time + timedelta(minutes=i+meeting_duration)))\n                \n    available_times.sort()\n    \n    for start, end in available_times:\n        if start + timedelta(minutes=meeting_duration) <= end_time:\n            if all(start >= schedule_start and start + timedelta(minutes=meeting_duration) <= schedule_end for name, schedule in schedules.items() for schedule_start, schedule_end in schedule):\n                return f\"{{{start.strftime('%H:%M')}:{(start + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n                \n    return \"No available time found\"\n\nschedules = {\n    \"Catherine\": [(10.5, 11), (12.5, 13.5), (14.5, 15)],\n    \"Michael\": [(9.5, 10.5), (12, 13), (13.5, 14), (15, 15.5)],\n    \"Alexander\": [(9, 9.5), (10, 10.5), (11, 12), (13, 13.5), (14, 16), (16.5, 17)]\n}\n\nmeeting_duration = 30\n\navailable_times = schedule_meeting(schedules, meeting_duration)\n\nprint(available_times)\n```",
            "count": "calendar_scheduling_example_38"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preferences=None):\n    # Sort participants by their earliest availability\n    participants.sort(key=lambda x: x[0])\n    \n    # Initialize the earliest available time for each participant\n    earliest_available = {p: start_time for p in participants}\n    \n    # Iterate over the participants to find the earliest available time\n    for i in range(len(participants)):\n        for j in range(i + 1, len(participants)):\n            p1, s1, e1 = participants[i]\n            p2, s2, e2 = participants[j]\n            # Find the earliest available time for the two participants\n            earliest_available[p1] = max(earliest_available[p1], s2)\n            earliest_available[p2] = max(earliest_available[p2], s1)\n    \n    # Find the earliest available time that is at least as early as the earliest available time for all participants\n    earliest_time = min(earliest_available.values())\n    \n    # Find the latest available time that is at most as late as the latest available time for all participants\n    latest_time = max(p[1] for p in participants)\n    \n    # Calculate the meeting time\n    meeting_time = earliest_time + timedelta(minutes=meeting_duration)\n    \n    # Check if the meeting time is within the work hours\n    if meeting_time < start_time or meeting_time > end_time:\n        # If not, find the next available time\n        while meeting_time < start_time or meeting_time > end_time:\n            meeting_time += timedelta(minutes=meeting_duration)\n    \n    # Check if the meeting time is at least as early as the earliest available time for all participants\n    if meeting_time < earliest_time:\n        # If not, find the next available time\n        while meeting_time < earliest_time:\n            meeting_time += timedelta(minutes=meeting_duration)\n    \n    # Format the meeting time\n    meeting_time_str = meeting_time.strftime('%H:%M')\n    earliest_time_str = earliest_time.strftime('%H:%M')\n    latest_time_str = latest_time.strftime('%H:%M')\n    \n    return '{' + earliest_time_str + ':' + meeting_time_str + ':' + latest_time_str + '}'\n\n# Example usage:\nparticipants = [\n    ('Roger', datetime(2024, 7, 26, 9, 0), datetime(2024, 7, 26, 17, 0)),\n    ('Karen', datetime(2024, 7, 26, 10, 0), datetime(2024, 7, 26, 10, 30)),\n    ('Dorothy', datetime(2024, 7, 26, 9, 0), datetime(2024, 7, 26, 10, 0)),\n    ('Dorothy', datetime(2024, 7, 26, 10, 30), datetime(2024, 7, 26, 11, 0)),\n    ('Dorothy', datetime(2024, 7, 26, 11, 30), datetime(2024, 7, 26, 12, 0)),\n    ('Dorothy', datetime(2024, 7, 26, 12, 30), datetime(2024, 7, 26, 13, 0)),\n    ('Dorothy', datetime(2024, 7, 26, 14, 0), datetime(2024, 7, 26, 15, 30)),\n    ('Dorothy', datetime(2024, 7, 26, 16, 0), datetime(2024, 7, 26, 17, 0)),\n]\n\nprint(find_meeting_time(participants, datetime(2024, 7, 26, 9, 0), datetime(2024, 7, 26, 17, 0), 30))\n```",
            "count": "calendar_scheduling_example_39"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1) if participants['meeting_duration'] == '1 hour' else timedelta(hours=0.5)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Jacob\": {\"start\": datetime(2024, 7, 15, 10, 0), \"end\": datetime(2024, 7, 15, 11, 0)},\n        \"Jacob\": {\"start\": datetime(2024, 7, 15, 11, 30), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Jacob\": {\"start\": datetime(2024, 7, 15, 16, 0), \"end\": datetime(2024, 7, 15, 16, 30)},\n        \"Gabriel\": {\"start\": datetime(2024, 7, 15, 9, 30), \"end\": datetime(2024, 7, 15, 11, 30)},\n        \"Gabriel\": {\"start\": datetime(2024, 7, 15, 13, 0), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Gabriel\": {\"start\": datetime(2024, 7, 15, 15, 0), \"end\": datetime(2024, 7, 15, 15, 30)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 9, 0), \"end\": datetime(2024, 7, 15, 9, 30)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 10, 30), \"end\": datetime(2024, 7, 15, 11, 0)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 11, 30), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 12, 30), \"end\": datetime(2024, 7, 15, 14, 0)},\n        \"Matthew\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 16, 30)},\n        \"meeting_duration\": \"1 hour\"\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_40"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=0.5)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()) and \\\n               (time >= datetime(2024, 7, 15, 14, 30) or 'Alan' not in participants):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Alan\": None,\n        \"Nancy\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 12, 30)},\n        \"Nancy\": {\"start\": datetime(2024, 7, 15, 13, 0), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Nancy\": {\"start\": datetime(2024, 7, 15, 14, 0), \"end\": datetime(2024, 7, 15, 15, 0)},\n        \"Patricia\": {\"start\": datetime(2024, 7, 15, 10, 0), \"end\": datetime(2024, 7, 15, 12, 0)},\n        \"Patricia\": {\"start\": datetime(2024, 7, 15, 12, 30), \"end\": datetime(2024, 7, 15, 13, 0)},\n        \"Patricia\": {\"start\": datetime(2024, 7, 15, 13, 30), \"end\": datetime(2024, 7, 15, 16, 0)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_41"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 9, 0), \"end\": datetime(2024, 7, 15, 9, 30)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 11, 30)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 12, 0), \"end\": datetime(2024, 7, 15, 12, 30)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 13, 30), \"end\": datetime(2024, 7, 15, 14, 0)},\n        \"Julie\": {\"start\": datetime(2024, 7, 15, 16, 0), \"end\": datetime(2024, 7, 15, 17, 0)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 9, 0), \"end\": datetime(2024, 7, 15, 9, 30)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 13, 0), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 15, 0), \"end\": datetime(2024, 7, 15, 15, 30)},\n        \"Sean\": {\"start\": datetime(2024, 7, 15, 16, 0), \"end\": datetime(2024, 7, 15, 16, 30)},\n        \"Lori\": {\"start\": datetime(2024, 7, 15, 10, 0), \"end\": datetime(2024, 7, 15, 10, 30)},\n        \"Lori\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 13, 0)},\n        \"Lori\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 17, 0)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=0.5)\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + meeting_duration).time() in participant\n                   for participant in participants.values()):\n                return f\"{time.strftime('%H:%M')}:{(time + meeting_duration).strftime('%H:%M')}\"\n\ndef main():\n    participants = {\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 9, 30), \"end\": datetime(2024, 7, 15, 10, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 12, 0), \"end\": datetime(2024, 7, 15, 12, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 14, 0), \"end\": datetime(2024, 7, 15, 14, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 15, 0), \"end\": datetime(2024, 7, 15, 15, 30)},\n        \"Albert\": {\"start\": datetime(2024, 7, 15, 16, 30), \"end\": datetime(2024, 7, 15, 17, 0)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 11, 0), \"end\": datetime(2024, 7, 15, 11, 30)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 12, 30), \"end\": datetime(2024, 7, 15, 13, 0)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 13, 30), \"end\": datetime(2024, 7, 15, 14, 0)},\n        \"Gregory\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 16, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 9, 30), \"end\": datetime(2024, 7, 15, 10, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 10, 30), \"end\": datetime(2024, 7, 15, 11, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 11, 30), \"end\": datetime(2024, 7, 15, 13, 30)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 14, 0), \"end\": datetime(2024, 7, 15, 15, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 15, 30), \"end\": datetime(2024, 7, 15, 16, 0)},\n        \"Benjamin\": {\"start\": datetime(2024, 7, 15, 16, 30), \"end\": datetime(2024, 7, 15, 17, 0)}\n    }\n    print(find_meeting_time(datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 17, 0), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_43"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, constraints, preferences=None):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_end_time = start_time + timedelta(hours=meeting_duration)\n\n    while start_time < end_time:\n        start_time_str = start_time.strftime('%H:%M')\n        meeting_end_time_str = meeting_end_time.strftime('%H:%M')\n        valid_time = True\n\n        for participant, participant_constraints in constraints.items():\n            for constraint in participant_constraints:\n                if start_time >= datetime.strptime(constraint['start'], '%H:%M') and start_time < datetime.strptime(constraint['end'], '%H:%M'):\n                    valid_time = False\n                    break\n                if meeting_end_time >= datetime.strptime(constraint['start'], '%H:%M') and meeting_end_time <= datetime.strptime(constraint['end'], '%H:%M'):\n                    valid_time = False\n                    break\n                if (start_time <= datetime.strptime(constraint['start'], '%H:%M') and meeting_end_time >= datetime.strptime(constraint['start'], '%H:%M')) or (start_time <= datetime.strptime(constraint['end'], '%H:%M') and meeting_end_time >= datetime.strptime(constraint['end'], '%H:%M')):\n                    valid_time = False\n                    break\n            if not valid_time:\n                break\n\n        if valid_time:\n            if preferences and participant in preferences and start_time_str not in preferences[participant]:\n                start_time += timedelta(minutes=meeting_duration)\n                continue\n\n            return '{' + start_time_str + ':' + meeting_end_time_str + '}'\n\n        start_time += timedelta(minutes=meeting_duration)\n\n    return None\n\n# Example usage\nparticipants = ['Roger', 'Karen', 'Dorothy']\nmeeting_duration = 30\nconstraints = {\n    'Roger': [],\n    'Karen': [\n        {'start': '10:00', 'end': '10:30'},\n        {'start': '11:30', 'end': '12:00'},\n        {'start': '12:30', 'end': '13:00'},\n        {'start': '14:00', 'end': '15:00'},\n        {'start': '15:30', 'end': '16:00'}\n    ],\n    'Dorothy': [\n        {'start': '9:00', 'end': '10:00'},\n        {'start': '10:30', 'end': '11:00'},\n        {'start': '11:30', 'end': '12:00'},\n        {'start': '12:30', 'end': '13:00'},\n        {'start': '14:00', 'end': '15:30'},\n        {'start': '16:00', 'end': '17:00'}\n    ]\n}\n\nprint(find_meeting_time(participants, meeting_duration, constraints))\n```\n\nThis code defines a function `find_meeting_time` that takes in the list of participants, the meeting duration, the constraints for each participant, and optional preferences. It then iterates over the possible meeting times, checking if each time is valid based on the constraints. If a valid time is found, it returns the time in the desired format. If no valid time is found, it returns `None`. The example usage at the end demonstrates how to use this function with the given constraints.",
            "count": "calendar_scheduling_example_44"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, participants):\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=30) <= end_time and \n                   (time + timedelta(minutes=30) > participant[1] for participant in participants.items())):\n                return f\"{time.strftime('%H:%M')}:{time + timedelta(minutes=30)}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the schedules for each participant\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the tasks\ntasks = [\n    {\n        \"name\": \"Roger, Karen, Dorothy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Roger\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Karen\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 15, 0)),\n            \"Dorothy\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Douglas, Lawrence, Isabella\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Douglas\": (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n            \"Lawrence\": (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 16, 0)),\n            \"Isabella\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 12, 30)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Joshua, Denise, Jeremy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Joshua\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 15, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Jeremy\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(hours=1),\n    },\n    {\n        \"name\": \"Alan, Elizabeth, Denise\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Alan\": (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n            \"Elizabeth\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 11, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Mason, Bruce, Christopher\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Mason\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n            \"Bruce\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Christopher\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Andrew, Grace, Samuel\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Andrew\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Grace\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Samuel\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n]\n\n# Find the available time for each task\nfor task in tasks:\n    print(f\"{find_available_time(task['participants'], task['start_time'], task['end_time'], task['meeting_duration'])}\")\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the tasks\ntasks = [\n    {\n        \"name\": \"Roger, Karen, Dorothy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Roger\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Karen\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 16, 0)),\n            \"Dorothy\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Douglas, Lawrence, Isabella\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Douglas\": (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n            \"Lawrence\": (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 16, 0)),\n            \"Isabella\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 13, 30)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Joshua, Denise, Jeremy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Joshua\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 15, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Jeremy\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(hours=1),\n    },\n    {\n        \"name\": \"Alan, Elizabeth, Denise\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Alan\": (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n            \"Elizabeth\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 11, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Mason, Bruce, Christopher\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Mason\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n            \"Bruce\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Christopher\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Arthur, Theresa, Carl\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Arthur\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Theresa\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n            \"Carl\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n]\n\n# Find the available time for each task\nfor task in tasks:\n    print(f\"{find_available_time(task['participants'], task['start_time'], task['end_time'], task['meeting_duration'])}\")\n```",
            "count": "calendar_scheduling_example_46"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the tasks\ntasks = [\n    {\n        \"name\": \"Roger, Karen, Dorothy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Roger\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Karen\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 16, 0)),\n            \"Dorothy\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Douglas, Lawrence, Isabella\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Douglas\": (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n            \"Lawrence\": (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 16, 0)),\n            \"Isabella\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 13, 30)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Joshua, Denise, Jeremy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Joshua\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 15, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Jeremy\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(hours=1),\n    },\n    {\n        \"name\": \"Alan, Elizabeth, Denise\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Alan\": (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n            \"Elizabeth\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 11, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Mason, Bruce, Christopher\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Mason\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n            \"Bruce\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Christopher\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Arthur, Theresa, Carl\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Arthur\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Theresa\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n            \"Carl\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"David, Eric, Roger\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"David\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Eric\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n            \"Roger\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n        },\n        \"meeting_duration\": timedelta(hours=1),\n    },\n]\n\n# Find the available time for each task\nfor task in tasks:\n    print(f\"{find_available_time(task['participants'], task['start_time'], task['end_time'], task['meeting_duration'])}\")\n```",
            "count": "calendar_scheduling_example_47"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(participants, start_time, end_time, meeting_duration):\n    schedules = {}\n    for participant, schedule in participants.items():\n        if isinstance(schedule, tuple):\n            schedules[participant] = schedule\n        elif isinstance(schedule, list):\n            schedules[participant] = (schedule[0], schedule[-1])\n        else:\n            raise ValueError(\"Invalid schedule type\")\n\n    # Find the first available time slot for all participants\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + meeting_duration <= end_time and \n                   (time + meeting_duration > schedule[1] for participant, schedule in schedules.items())):\n                return f\"{time.strftime('%H:%M')}:{time + meeting_duration}.replace(minute=0).strftime('%H:%M')}\"\n\n# Define the tasks\ntasks = [\n    {\n        \"name\": \"Roger, Karen, Dorothy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Roger\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Karen\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 16, 0)),\n            \"Dorothy\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Douglas, Lawrence, Isabella\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Douglas\": (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n            \"Lawrence\": (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 16, 0)),\n            \"Isabella\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 13, 30)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Joshua, Denise, Jeremy\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Joshua\": (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 15, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Jeremy\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(hours=1),\n    },\n    {\n        \"name\": \"Alan, Elizabeth, Denise\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Alan\": (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n            \"Elizabeth\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 11, 30)),\n            \"Denise\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Mason, Bruce, Christopher\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Mason\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n            \"Bruce\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Christopher\": (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"Arthur, Theresa, Carl\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Arthur\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Theresa\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n            \"Carl\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(minutes=30),\n    },\n    {\n        \"name\": \"David, Eric, Roger\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"David\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Eric\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n            \"Roger\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 16, 30)),\n        },\n        \"meeting_duration\": timedelta(hours=1),\n    },\n    {\n        \"name\": \"Janet, Rachel, Cynthia\",\n        \"start_time\": datetime(2024, 7, 29, 9, 0),\n        \"end_time\": datetime(2024, 7, 29, 17, 0),\n        \"participants\": {\n            \"Janet\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Rachel\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n            \"Cynthia\": (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 17, 0)),\n        },\n        \"meeting_duration\": timedelta(hours=1),\n    },\n]\n\n# Find the available time for each task\nfor task in tasks:\n    print(f\"{find_available_time(task['participants'], task['start_time'], task['end_time'], task['meeting_duration'])}\")\n```",
            "count": "calendar_scheduling_example_48"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, start_time, end_time):\n    # Convert time strings to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(hours=int(meeting_duration.split(' ')[0]), minutes=int(meeting_duration.split(' ')[1]))\n\n    # Initialize the earliest available time for each participant\n    earliest_time = {}\n    for participant in participants:\n        earliest_time[participant] = start_time\n\n    # Find the earliest available time for each participant\n    for participant in participants:\n        for time in participants[participant]:\n            start = datetime.strptime(time[0], '%H:%M')\n            end = datetime.strptime(time[1], '%H:%M')\n            if start > earliest_time[participant]:\n                earliest_time[participant] = start\n            if end > earliest_time[participant]:\n                earliest_time[participant] = end\n\n    # Find the earliest available time that is at least meeting_duration apart from all other participants' earliest available times\n    earliest_meeting_time = earliest_time[participants[0]]\n    for participant in participants[1:]:\n        if earliest_time[participant] < earliest_meeting_time:\n            earliest_meeting_time = earliest_time[participant]\n        if earliest_time[participant] + meeting_duration < earliest_meeting_time:\n            earliest_meeting_time = earliest_time[participant] + meeting_duration\n\n    # Check if the earliest meeting time is within the meeting duration of the end time\n    if end_time - earliest_meeting_time < meeting_duration:\n        earliest_meeting_time = end_time - meeting_duration\n\n    # Convert the meeting time to a string and format it\n    meeting_time = earliest_meeting_time.strftime('%H:%M') + ':' + (earliest_meeting_time + meeting_duration).strftime('%H:%M')\n\n    return '{' + meeting_time + '}'\n\n# Example usage:\nparticipants = {\n    'Roger': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')],\n    'Karen': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')],\n    'Dorothy': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]\n}\n\nmeeting_duration = '00:30'\nstart_time = '09:00'\nend_time = '17:00'\n\nprint(schedule_meeting(participants, meeting_duration, start_time, end_time))\n\nparticipants = {\n    'Douglas': [('12:00', '12:30'), ('15:00', '15:30')],\n    'Lawrence': [('10:30', '12:00'), ('13:00', '13:30'), ('14:00', '14:30'), ('15:30', '16:00')],\n    'Isabella': [('09:00', '12:30'), ('13:30', '17:00')]\n}\n\nmeeting_duration = '00:30'\nstart_time = '09:00'\nend_time = '17:00'\n\nprint(schedule_meeting(participants, meeting_duration, start_time, end_time))\n\nparticipants = {\n    'Joshua': [('10:00', '10:30'), ('12:00', '12:30'), ('14:00', '14:30'), ('15:00', '15:30')],\n    'Denise': [],\n    'Jeremy': [('09:30', '10:30'), ('12:00', '13:00'), ('13:30', '14:00'), ('14:30', '15:00'), ('15:30', '16:00'), ('16:30', '17:00')]\n}\n\nmeeting_duration = '01:00'\nstart_time = '09:00'\nend_time = '17:00'\n\nprint(schedule_meeting(participants, meeting_duration, start_time, end_time))\n\nparticipants = {\n    'Alan': [('13:00', '13:30'), ('14:00', '14:30')],\n    'Elizabeth': [('09:00', '09:30'), ('11:00', '11:30')],\n    'Denise': [('09:00', '10:00'), ('10:30', '11:30'), ('12:30', '13:00'), ('13:30', '14:00'), ('14:30', '16:00'), ('16:30', '17:00')]\n}\n\nmeeting_duration = '00:30'\nstart_time = '09:00'\nend_time = '17:00'\n\nprint(schedule_meeting(participants, meeting_duration, start_time, end_time))\n\nparticipants = {\n    'Mason': [('09:30', '10:00'), ('11:00', '11:30'), ('14:30', '15:00'), ('16:30', '17:00')],\n    'Bruce': [],\n    'Christopher': [('09:30', '10:30'), ('11:30', '12:30'), ('15:00', '17:00')]\n}\n\nmeeting_duration = '00:30'\nstart_time = '09:00'\nend_time = '17:00'\n\nprint(schedule_meeting(participants, meeting_duration, start_time, end_time))\n\nparticipants = {\n    'Teresa': [('09:00', '10:00'), ('13:00', '13:30'), ('14:00', '14:30'), ('15:00', '15:30'), ('16:30', '17:00')],\n    'Kathleen': [('09:00', '09:30'), ('12:30', '13:00'), ('13:30', '14:00'), ('15:00', '15:30')],\n    'Patricia': [('09:00', '10:30'), ('11:30', '12:00'), ('13:00', '13:30'), ('14:00', '14:30'), ('15:30', '16:00'), ('16:30', '17:00')]\n}\n\nmeeting_duration = '00:30'\nstart_time = '09:00'\nend_time = '17:00'\n\nprint(schedule_meeting(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_49"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(daniel_schedule, roy_schedule, emma_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    daniel_schedule = [datetime.strptime(time, '%H:%M') for time in daniel_schedule]\n    roy_schedule = [datetime.strptime(time, '%H:%M') for time in roy_schedule]\n    emma_schedule = [datetime.strptime(time, '%H:%M') for time in emma_schedule]\n\n    # Sort schedules by start time\n    daniel_schedule.sort()\n    roy_schedule.sort()\n    emma_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in daniel_schedule:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in emma_schedule + roy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_roger(karen_schedule, dorothy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in karen_schedule]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in dorothy_schedule]\n\n    # Sort schedules by start time\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in karen_schedule + dorothy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    lawrence_schedule = [datetime.strptime(time, '%H:%M') for time in lawrence_schedule]\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in isabella_schedule]\n\n    # Sort schedules by start time\n    lawrence_schedule.sort()\n    isabella_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in lawrence_schedule + isabella_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    joshua_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    jeremy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 30), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    joshua_schedule.sort()\n    jeremy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in joshua_schedule + jeremy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    alan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0)]]\n    elizabeth_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 11, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    alan_schedule.sort()\n    elizabeth_schedule.sort()\n    denise_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in alan_schedule + elizabeth_schedule + denise_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    mason_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)]]\n    bruce_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    christopher_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    mason_schedule.sort()\n    christopher_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 12, 30)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 13, 30)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 14, 30)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 15, 30)] + [datetime(2024, 7, 15, 16, 0)] + [datetime(2024, 7, 15, 16, 30)] + [datetime(2024, 7, 15, 17, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in mason_schedule + christopher_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    daniel_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    roy_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    emma_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n\n    # Sort schedules by start time\n    daniel_schedule.sort()\n    roy_schedule.sort()\n    emma_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in daniel_schedule + roy_schedule + emma_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_roger(karen_schedule, dorothy_schedule, meeting_duration):\n    return schedule_meeting_roger(karen_schedule, dorothy_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration):\n    return schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration):\n    return schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration):\n    return schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration):\n    return schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration):\n    return schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting(karen_schedule, dorothy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 0)]]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in karen_schedule + dorothy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_lawrence(isabella_schedule, jeremy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    lawrence_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30)]]\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 30, 2024, 7, 15, 17, 0)]]\n    jeremy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    lawrence_schedule.sort()\n    isabella_schedule.sort()\n    jeremy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in lawrence_schedule + isabella_schedule + jeremy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_jeremy(douglas_schedule, isabella_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    jeremy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n    douglas_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 15, 0)]]\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 30, 2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    jeremy_schedule.sort()\n    douglas_schedule.sort()\n    isabella_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in jeremy_schedule + douglas_schedule + isabella_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_isabella(douglas_schedule, jeremy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 30, 2024, 7, 15, 17, 0)]]\n    douglas_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 15, 0)]]\n    jeremy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    isabella_schedule.sort()\n    douglas_schedule.sort()\n    jeremy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in isabella_schedule + douglas_schedule + jeremy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration):\n    return schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration):\n    return schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration):\n    return schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration):\n    return schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration):\n    return schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting(karen_schedule, dorothy_schedule, meeting_duration):\n    return schedule_meeting(karen_schedule, dorothy_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_lawrence(isabella_schedule, jeremy_schedule, meeting_duration):\n    return schedule_meeting_lawrence(isabella_schedule, jeremy_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_jeremy(douglas_schedule, isabella_schedule, meeting_duration):\n    return schedule_meeting_jeremy(douglas_schedule, isabella_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting_isabella(douglas_schedule, jeremy_schedule, meeting_duration):\n    return schedule_meeting_isabella(douglas_schedule, jeremy_schedule, meeting_duration)\n\n# Define schedules and meeting duration\ndef schedule_meeting():\n    return schedule_meeting_daniel(roy_schedule=[], emma_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)], meeting_duration=1)\n\nprint(schedule_meeting())\n```",
            "count": "calendar_scheduling_example_50"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    roger_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0)]]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    roger_schedule.sort()\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in roger_schedule + karen_schedule + dorothy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    douglas_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 15, 0)]]\n    lawrence_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30)]]\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 30, 2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    douglas_schedule.sort()\n    lawrence_schedule.sort()\n    isabella_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in douglas_schedule + lawrence_schedule + isabella_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    joshua_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    jeremy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    joshua_schedule.sort()\n    jeremy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in joshua_schedule + jeremy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    alan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0)]]\n    elizabeth_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 11, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    alan_schedule.sort()\n    elizabeth_schedule.sort()\n    denise_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in alan_schedule + elizabeth_schedule + denise_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    mason_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)]]\n    bruce_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    christopher_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    mason_schedule.sort()\n    christopher_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 12, 30)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 13, 30)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 14, 30)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 15, 30)] + [datetime(2024, 7, 15, 16, 0)] + [datetime(2024, 7, 15, 16, 30)] + [datetime(2024, 7, 15, 17, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in mason_schedule + christopher_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    daniel_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    roy_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    emma_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n\n    # Sort schedules by start time\n    daniel_schedule.sort()\n    roy_schedule.sort()\n    emma_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in daniel_schedule + roy_schedule + emma_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting(brandon_schedule, donna_schedule, jack_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    brandon_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 14, 30)]]\n    donna_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0)]]\n    jack_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    brandon_schedule.sort()\n    donna_schedule.sort()\n    jack_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in brandon_schedule + donna_schedule + jack_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\nprint(schedule_meeting(brandon_schedule=[datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 14, 30)], donna_schedule=[datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0)], jack_schedule=[datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 17, 0)], meeting_duration=1))\n```",
            "count": "calendar_scheduling_example_51"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    roger_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0)]]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    roger_schedule.sort()\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in roger_schedule + karen_schedule + dorothy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    douglas_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 15, 0)]]\n    lawrence_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30)]]\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 30, 2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    douglas_schedule.sort()\n    lawrence_schedule.sort()\n    isabella_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in douglas_schedule + lawrence_schedule + isabella_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    joshua_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    jeremy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    joshua_schedule.sort()\n    jeremy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in joshua_schedule + jeremy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    alan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0)]]\n    elizabeth_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 11, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    alan_schedule.sort()\n    elizabeth_schedule.sort()\n    denise_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in alan_schedule + elizabeth_schedule + denise_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    mason_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)]]\n    bruce_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    christopher_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    mason_schedule.sort()\n    christopher_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 12, 30)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 13, 30)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 14, 30)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 15, 30)] + [datetime(2024, 7, 15, 16, 0)] + [datetime(2024, 7, 15, 16, 30)] + [datetime(2024, 7, 15, 17, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in mason_schedule + christopher_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    daniel_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    roy_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    emma_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n\n    # Sort schedules by start time\n    daniel_schedule.sort()\n    roy_schedule.sort()\n    emma_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in daniel_schedule + roy_schedule + emma_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting(grace_schedule, randy_schedule, susan_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    grace_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n    randy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n    susan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30)]]\n\n    # Sort schedules by start time\n    grace_schedule.sort()\n    randy_schedule.sort()\n    susan_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in grace_schedule + randy_schedule + susan_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\nprint(schedule_meeting(grace_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)], randy_schedule=[datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)], susan_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30)], meeting_duration=1))\n```",
            "count": "calendar_scheduling_example_52"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    roger_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0)]]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    roger_schedule.sort()\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in roger_schedule + karen_schedule + dorothy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_douglas(lawrence_schedule, isabella_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    douglas_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 15, 0)]]\n    lawrence_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 30)]]\n    isabella_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 30, 2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    douglas_schedule.sort()\n    lawrence_schedule.sort()\n    isabella_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in douglas_schedule + lawrence_schedule + isabella_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_joshua(denise_schedule, jeremy_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    joshua_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 15, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    jeremy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    joshua_schedule.sort()\n    jeremy_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in joshua_schedule + jeremy_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_alan(elizabeth_schedule, denise_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    alan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 14, 0)]]\n    elizabeth_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 11, 0)]]\n    denise_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 13, 30), datetime(2024, 7, 15, 14, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    alan_schedule.sort()\n    elizabeth_schedule.sort()\n    denise_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in alan_schedule + elizabeth_schedule + denise_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_mason(bruce_schedule, christopher_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    mason_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)]]\n    bruce_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    christopher_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 17, 0)]]\n\n    # Sort schedules by start time\n    mason_schedule.sort()\n    christopher_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 12, 30)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 13, 30)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 14, 30)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 15, 30)] + [datetime(2024, 7, 15, 16, 0)] + [datetime(2024, 7, 15, 16, 30)] + [datetime(2024, 7, 15, 17, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in mason_schedule + christopher_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting_daniel(roy_schedule, emma_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    daniel_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    roy_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    emma_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 30), datetime(2024, 7, 15, 11, 0), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n\n    # Sort schedules by start time\n    daniel_schedule.sort()\n    roy_schedule.sort()\n    emma_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in daniel_schedule + roy_schedule + emma_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting(grace_schedule, randy_schedule, susan_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    grace_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n    randy_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 16, 0), datetime(2024, 7, 15, 16, 30)]]\n    susan_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 15, 30)]]\n\n    # Sort schedules by start time\n    grace_schedule.sort()\n    randy_schedule.sort()\n    susan_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in grace_schedule + randy_schedule + susan_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\ndef schedule_meeting(noah_schedule, alice_schedule, arthur_schedule, meeting_duration):\n    # Convert schedules to datetime objects\n    noah_schedule = [datetime.strptime(time, '%H:%M') for time in []]\n    alice_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)]]\n    arthur_schedule = [datetime.strptime(time, '%H:%M') for time in [datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 30)]]\n\n    # Sort schedules by start time\n    noah_schedule.sort()\n    alice_schedule.sort()\n    arthur_schedule.sort()\n\n    # Find a time that works for everyone's schedule\n    for start in [datetime(2024, 7, 15, 9, 0)] + [datetime(2024, 7, 15, 10, 0)] + [datetime(2024, 7, 15, 11, 0)] + [datetime(2024, 7, 15, 12, 0)] + [datetime(2024, 7, 15, 13, 0)] + [datetime(2024, 7, 15, 14, 0)] + [datetime(2024, 7, 15, 15, 0)] + [datetime(2024, 7, 15, 16, 0)]:\n        end = start + timedelta(hours=meeting_duration)\n        if all(start >= e and end <= e for e in noah_schedule + alice_schedule + arthur_schedule):\n            return f{{start.strftime('%H:%M')}:{end.strftime('%H:%M')}}\n\n# Define schedules and meeting duration\nprint(schedule_meeting(noah_schedule=[], alice_schedule=[datetime(2024, 7, 15, 9, 30), datetime(2024, 7, 15, 12, 30), datetime(2024, 7, 15, 14, 30), datetime(2024, 7, 15, 16, 30)], arthur_schedule=[datetime(2024, 7, 15, 9, 0), datetime(2024, 7, 15, 10, 0), datetime(2024, 7, 15, 11, 30), datetime(2024, 7, 15, 12, 0), datetime(2024, 7, 15, 13, 0), datetime(2024, 7, 15, 15, 0), datetime(2024, 7, 15, 15, 30), datetime(2024, 7, 15, 16, 30)], meeting_duration=1))\n```",
            "count": "calendar_scheduling_example_53"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, constraints):\n    # Sort constraints by start time\n    constraints.sort(key=lambda x: x[0])\n\n    # Initialize earliest available time for each participant\n    earliest_time = {name: datetime.strptime('09:00', '%H:%M') for name in participants}\n\n    # Iterate over constraints\n    for start, end in constraints:\n        # Update earliest available time for each participant\n        for name, earliest in earliest_time.items():\n            if start < earliest < end:\n                earliest_time[name] = datetime.strptime(str(end + timedelta(minutes=1)).split('.')[0], '%Y-%m-%d %H:%M')\n\n    # Find the earliest available time slot that can accommodate all participants\n    earliest_start = max(earliest_time.values())\n    for name, earliest in earliest_time.items():\n        if earliest_start < earliest:\n            earliest_start = earliest\n\n    # Find the end time of the meeting\n    end_time = earliest_start + timedelta(minutes=meeting_duration)\n\n    # Format the time\n    start_time = earliest_start.strftime('%H:%M')\n    end_time = end_time.strftime('%H:%M')\n\n    return f\"{start_time}:{end_time}\"\n\n# Test cases\ntasks = [\n    (\n        ['Roger', 'Karen', 'Dorothy'],\n        30,\n        [\n            ('10:00', '10:30'),\n            ('11:30', '12:00'),\n            ('12:30', '13:00'),\n            ('14:00', '15:00'),\n            ('15:30', '16:00'),\n        ],\n        ('09:00', '10:00'),\n        ('10:30', '11:00'),\n        ('11:30', '12:00'),\n        ('12:30', '13:00'),\n        ('14:00', '15:30'),\n        ('16:00', '17:00')\n    ),\n    (\n        ['Douglas', 'Lawrence', 'Isabella'],\n        30,\n        [\n            ('12:00', '12:30'),\n            ('15:00', '15:30'),\n        ],\n        ('10:30', '12:00'),\n        ('13:00', '13:30'),\n        ('14:00', '14:30'),\n        ('15:30', '16:00'),\n        ('09:00', '12:30'),\n        ('13:30', '17:00')\n    ),\n    (\n        ['Joshua', 'Denise', 'Jeremy'],\n        60,\n        [\n            ('10:00', '10:30'),\n            ('12:00', '12:30'),\n            ('14:00', '14:30'),\n            ('15:00', '15:30'),\n        ],\n        ('09:30', '10:30'),\n        ('12:00', '13:00'),\n        ('13:30', '14:00'),\n        ('14:30', '15:00'),\n        ('15:30', '16:00'),\n        ('16:30', '17:00')\n    ),\n    (\n        ['Alan', 'Elizabeth', 'Denise'],\n        30,\n        [\n            ('13:00', '13:30'),\n            ('14:00', '14:30'),\n        ],\n        ('09:00', '09:30'),\n        ('11:00', '11:30'),\n        ('09:00', '10:00'),\n        ('10:30', '11:30'),\n        ('12:30', '13:00'),\n        ('13:30', '14:00'),\n        ('14:30', '16:00'),\n        ('16:30', '17:00')\n    ),\n    (\n        ['Mason', 'Bruce', 'Christopher'],\n        30,\n        [\n            ('09:30', '10:00'),\n            ('11:00', '11:30'),\n            ('14:30', '15:00'),\n            ('16:30', '17:00'),\n        ],\n        ('09:00', '10:00'),\n        ('09:30', '10:30'),\n        ('11:30', '12:30'),\n        ('15:00', '17:00')\n    ),\n    (\n        ['Isabella', 'Tyler', 'Jordan'],\n        60,\n        [\n            ('11:00', '11:30'),\n            ('15:30', '16:00'),\n        ],\n        ('09:00', '10:00'),\n        ('09:00', '10:00'),\n        ('10:30', '11:00'),\n        ('12:30', '13:30'),\n        ('14:00', '14:30'),\n        ('15:00', '16:00')\n    ),\n]\n\nfor task in tasks:\n    participants = task[0]\n    meeting_duration = task[1]\n    constraints = task[2]\n    task_constraints = task[3:]\n    print(schedule_meeting(participants, meeting_duration, constraints + task_constraints))\n```",
            "count": "calendar_scheduling_example_54"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time}:{end_time}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger','schedule': []},\n            {'name': 'Karen','schedule': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]},\n            {'name': 'Dorothy','schedule': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]}\n        ],\n       'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Douglas','schedule': [(12, 12.5), (15, 15.5)]},\n            {'name': 'Lawrence','schedule': [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]},\n            {'name': 'Isabella','schedule': [(9, 12.5), (13.5, 17)]}\n        ],\n       'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Joshua','schedule': [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]},\n            {'name': 'Denise','schedule': []},\n            {'name': 'Jeremy','schedule': [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]}\n        ],\n       'meeting_duration': 1\n    },\n    {\n        'participants': [\n            {'name': 'Alan','schedule': [(13, 13.5), (14, 14.5)]},\n            {'name': 'Elizabeth','schedule': [(9, 9.5), (11, 11.5)]},\n            {'name': 'Denise','schedule': [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]}\n        ],\n       'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Mason','schedule': [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]},\n            {'name': 'Bruce','schedule': []},\n            {'name': 'Christopher','schedule': [(9.5, 10.5), (11.5, 12.5), (15, 17)]}\n        ],\n       'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Keith','schedule': [(14, 14.5), (16, 16.5)]},\n            {'name': 'Christine','schedule': []},\n            {'name': 'Cynthia','schedule': [(9, 10.5), (11.5, 17)]}\n        ],\n       'meeting_duration': 1\n    }\n]\n\nfor task in tasks:\n    print(find_meeting_time(task['participants'], task['meeting_duration']))\n```",
            "count": "calendar_scheduling_example_55"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time:02d}:{end_time:02d}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger','schedule': []},\n            {'name': 'Karen','schedule': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]},\n            {'name': 'Dorothy','schedule': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]}\n        ],\n      'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Douglas','schedule': [(12, 12.5), (15, 15.5)]},\n            {'name': 'Lawrence','schedule': [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]},\n            {'name': 'Isabella','schedule': [(9, 12.5), (13.5, 17)]}\n        ],\n      'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Joshua','schedule': [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]},\n            {'name': 'Denise','schedule': []},\n            {'name': 'Jeremy','schedule': [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]}\n        ],\n      'meeting_duration': 1\n    },\n    {\n        'participants': [\n            {'name': 'Alan','schedule': [(13, 13.5), (14, 14.5)]},\n            {'name': 'Elizabeth','schedule': [(9, 9.5), (11, 11.5)]},\n            {'name': 'Denise','schedule': [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]}\n        ],\n      'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Mason','schedule': [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]},\n            {'name': 'Bruce','schedule': []},\n            {'name': 'Christopher','schedule': [(9.5, 10.5), (11.5, 12.5), (15, 17)]}\n        ],\n      'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Keith','schedule': [(14, 14.5), (16, 16.5)]},\n            {'name': 'Christine','schedule': []},\n            {'name': 'Cynthia','schedule': [(9, 10.5), (11.5, 17)]}\n        ],\n      'meeting_duration': 1\n    },\n    {\n        'participants': [\n            {'name': 'Jeremy','schedule': [(12, 13), (13.5, 14), (15, 15.5)]},\n            {'name': 'Donna','schedule': [(9.5, 10), (13, 13.5), (16, 17)]},\n            {'name': 'Robert','schedule': [(9, 11), (11.5, 12), (12.5, 17)]}\n        ],\n      'meeting_duration': 0.5\n    }\n]\n\nfor task in tasks:\n    print(find_meeting_time(task['participants'], task['meeting_duration']))\n```",
            "count": "calendar_scheduling_example_56"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time:02d}:{end_time:02d}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger','schedule': []},\n            {'name': 'Karen','schedule': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]},\n            {'name': 'Dorothy','schedule': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]}\n        ],\n     'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Douglas','schedule': [(12, 12.5), (15, 15.5)]},\n            {'name': 'Lawrence','schedule': [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]},\n            {'name': 'Isabella','schedule': [(9, 12.5), (13.5, 17)]}\n        ],\n     'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Joshua','schedule': [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]},\n            {'name': 'Denise','schedule': []},\n            {'name': 'Jeremy','schedule': [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]}\n        ],\n     'meeting_duration': 1\n    },\n    {\n        'participants': [\n            {'name': 'Alan','schedule': [(13, 13.5), (14, 14.5)]},\n            {'name': 'Elizabeth','schedule': [(9, 9.5), (11, 11.5)]},\n            {'name': 'Denise','schedule': [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]}\n        ],\n     'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Mason','schedule': [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]},\n            {'name': 'Bruce','schedule': []},\n            {'name': 'Christopher','schedule': [(9.5, 10.5), (11.5, 12.5), (15, 17)]}\n        ],\n     'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Keith','schedule': [(14, 14.5), (16, 16.5)]},\n            {'name': 'Christine','schedule': []},\n            {'name': 'Cynthia','schedule': [(9, 10.5), (11.5, 17)]}\n        ],\n     'meeting_duration': 1\n    },\n    {\n        'participants': [\n            {'name': 'Jeremy','schedule': [(12, 13), (13.5, 14), (15, 15.5)]},\n            {'name': 'Donna','schedule': [(9.5, 10), (13, 13.5), (16, 17)]},\n            {'name': 'Robert','schedule': [(9, 11), (11.5, 12), (12.5, 17)]}\n        ],\n     'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Virginia','schedule': [(10, 12)]},\n            {'name': 'Charles','schedule': [(12, 12.5), (13, 13.5)]},\n            {'name': 'Megan','schedule': [(9, 12), (13.5, 16), (16.5, 17)]}\n        ],\n     'meeting_duration': 0.5\n    }\n]\n\nfor task in tasks:\n    print(find_meeting_time(task['participants'], task['meeting_duration']))\n```",
            "count": "calendar_scheduling_example_57"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    # Find available time slots for each participant\n    available_slots = []\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        participant_available = []\n        for hour in range(9, 17):\n            available = True\n            for start, end in participant_schedule:\n                if start <= hour < end:\n                    available = False\n                    break\n            if available:\n                participant_available.append((hour, hour + 1))\n        available_slots.append(participant_available)\n\n    # Find common available time slots\n    common_available = available_slots[0]\n    for available in available_slots[1:]:\n        common_available = [slot for slot in common_available if slot in available]\n\n    # Find the earliest available time slot that is long enough for the meeting\n    earliest_slot = None\n    for slot in common_available:\n        if slot[1] - slot[0] >= meeting_duration:\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the meeting time\n    if earliest_slot is not None:\n        start_time = earliest_slot[0]\n        end_time = start_time + meeting_duration\n        return f\"{{{start_time:02d}:{end_time:02d}}}\"\n    else:\n        return \"No available time slot\"\n\n# Example usage\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger','schedule': []},\n            {'name': 'Karen','schedule': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]},\n            {'name': 'Dorothy','schedule': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]}\n        ],\n    'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Douglas','schedule': [(12, 12.5), (15, 15.5)]},\n            {'name': 'Lawrence','schedule': [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]},\n            {'name': 'Isabella','schedule': [(9, 12.5), (13.5, 17)]}\n        ],\n    'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Joshua','schedule': [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]},\n            {'name': 'Denise','schedule': []},\n            {'name': 'Jeremy','schedule': [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]}\n        ],\n    'meeting_duration': 1\n    },\n    {\n        'participants': [\n            {'name': 'Alan','schedule': [(13, 13.5), (14, 14.5)]},\n            {'name': 'Elizabeth','schedule': [(9, 9.5), (11, 11.5)]},\n            {'name': 'Denise','schedule': [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]}\n        ],\n    'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Mason','schedule': [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]},\n            {'name': 'Bruce','schedule': []},\n            {'name': 'Christopher','schedule': [(9.5, 10.5), (11.5, 12.5), (15, 17)]}\n        ],\n    'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Keith','schedule': [(14, 14.5), (16, 16.5)]},\n            {'name': 'Christine','schedule': []},\n            {'name': 'Cynthia','schedule': [(9, 10.5), (11.5, 17)]}\n        ],\n    'meeting_duration': 1\n    },\n    {\n        'participants': [\n            {'name': 'Jeremy','schedule': [(12, 13), (13.5, 14), (15, 15.5)]},\n            {'name': 'Donna','schedule': [(9.5, 10), (13, 13.5), (16, 17)]},\n            {'name': 'Robert','schedule': [(9, 11), (11.5, 12), (12.5, 17)]}\n        ],\n    'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Virginia','schedule': [(10, 12)]},\n            {'name': 'Charles','schedule': [(12, 12.5), (13, 13.5)]},\n            {'name': 'Megan','schedule': [(9, 12), (13.5, 16), (16.5, 17)]}\n        ],\n    'meeting_duration': 0.5\n    },\n    {\n        'participants': [\n            {'name': 'Joan','schedule': [(11, 11.5), (12.5, 13)]},\n            {'name': 'Theresa','schedule': [(12, 12.5), (15, 15.5)]},\n            {'name': 'Shirley','schedule': [(9.5, 10.5), (11, 12), (13, 14), (15.5, 16.5)]}\n        ],\n    'meeting_duration': 1\n    }\n]\n\nfor task in tasks:\n    print(find_meeting_time(task['participants'], task['meeting_duration']))\n```",
            "count": "calendar_scheduling_example_58"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, start_time, end_time, preferences=None):\n    # Convert time strings to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(hours=meeting_duration)\n\n    # Initialize a list to store available time slots\n    available_slots = []\n\n    for participant in participants:\n        participant_schedule = []\n        for start, end in participant['schedule']:\n            start = datetime.strptime(start, '%H:%M')\n            end = datetime.strptime(end, '%H:%M')\n            participant_schedule.append((start, end))\n\n        # Add available time slots to the list\n        for i in range(len(participant_schedule) - 1):\n            start = participant_schedule[i][1]\n            end = participant_schedule[i + 1][0]\n            if start < end:\n                available_slots.append((start, end))\n\n        # Add the entire day if the participant has no meetings\n        if not participant_schedule:\n            start = datetime.strptime('09:00', '%H:%M')\n            end = datetime.strptime('17:00', '%H:%M')\n            available_slots.append((start, end))\n\n    # Filter available time slots based on preferences\n    if preferences:\n        available_slots = [slot for slot in available_slots if slot[0] >= datetime.strptime(preferences, '%H:%M')]\n\n    # Find the earliest available time slot that can accommodate the meeting\n    earliest_slot = None\n    for slot in available_slots:\n        if (slot[0] + meeting_duration) <= end_time and (slot[0] + meeting_duration).time() >= start_time.time():\n            if earliest_slot is None or slot[0] < earliest_slot[0]:\n                earliest_slot = slot\n\n    # Return the earliest available time slot\n    if earliest_slot:\n        return f\"{earliest_slot[0].strftime('%H:%M')}:{earliest_slot[1].strftime('%H:%M')}\"\n    else:\n        return \"No available time slot found\"\n\n# Test the function\nparticipants = [\n    {'name': 'Roger','schedule': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')]},\n    {'name': 'Karen','schedule': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')]},\n    {'name': 'Dorothy','schedule': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]},\n]\nprint(schedule_meeting(participants, 0.5, '09:00', '17:00'))  # Output: {11:00:11:30}\n\nparticipants = [\n    {'name': 'Douglas','schedule': [('12:00', '12:30'), ('15:00', '15:30')]},\n    {'name': 'Lawrence','schedule': [('10:30', '12:00'), ('13:00', '13:30'), ('14:00', '14:30'), ('15:30', '16:00')]},\n    {'name': 'Isabella','schedule': [('09:00', '12:30'), ('13:30', '17:00')]},\n]\nprint(schedule_meeting(participants, 0.5, '09:00', '17:00'))  # Output: {12:30:13:00}\n\nparticipants = [\n    {'name': 'Joshua','schedule': [('10:00', '10:30'), ('12:00', '12:30'), ('14:00', '14:30'), ('15:00', '15:30')]},\n    {'name': 'Denise','schedule': []},\n    {'name': 'Jeremy','schedule': [('09:30', '10:30'), ('12:00', '13:00'), ('13:30', '14:00'), ('14:30', '15:00'), ('15:30', '16:00'), ('16:30', '17:00')]},\n]\nprint(schedule_meeting(participants, 1, '09:00', '17:00'))  # Output: {10:30:11:30}\n\nparticipants = [\n    {'name': 'Alan','schedule': [('13:00', '13:30'), ('14:00', '14:30')]},\n    {'name': 'Elizabeth','schedule': [('09:00', '09:30'), ('11:00', '11:30')]},\n    {'name': 'Denise','schedule': [('09:00', '10:00'), ('10:30', '11:30'), ('12:30', '13:00'), ('13:30', '14:00'), ('14:30', '16:00'), ('16:30', '17:00')]},\n]\nprint(schedule_meeting(participants, 0.5, '09:00', '17:00'))  # Output: {10:00:10:30}\n\nparticipants = [\n    {'name': 'Mason','schedule': [('09:30', '10:00'), ('11:00', '11:30'), ('14:30', '15:00'), ('16:30', '17:00')]},\n    {'name': 'Bruce','schedule': []},\n    {'name': 'Christopher','schedule': [('09:30', '10:30'), ('11:30', '12:30'), ('15:00', '17:00')]},\n]\nprint(schedule_meeting(participants, 0.5, '09:00', '17:00', preferences='12:30'))  # Output: {12:30:13:00}\n\nparticipants = [\n    {'name': 'Jeffrey','schedule': []},\n    {'name': 'Jack','schedule': [('10:30', '11:30'), ('13:00', '13:30'), ('14:00', '14:30'), ('16:00', '17:00')]},\n    {'name': 'Judith','schedule': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '14:00'), ('14:30', '15:00'), ('15:30', '17:00')]},\n]\nprint(schedule_meeting(participants, 0.5, '09:00', '17:00', preferences='14:00'))  # Output: {14:30:15:00}\n```",
            "count": "calendar_scheduling_example_59"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    tasks = [\n        {\n            'name': 'Roger, Karen, Dorothy',\n           'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n           'meeting_duration': 30,\n           'schedules': {\n                'Roger': [],\n                'Karen': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                          (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                          (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                          (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Dorothy': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                            (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                            (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n           'solution': '11:00:11:30'\n        },\n        {\n            'name': 'Douglas, Lawrence, Isabella',\n           'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n           'meeting_duration': 30,\n           'schedules': {\n                'Douglas': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Lawrence': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Isabella': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n           'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Joshua, Denise, Jeremy',\n           'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n           'meeting_duration': 60,\n           'schedules': {\n                'Joshua': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                           (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                           (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Denise': [],\n                'Jeremy': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                           (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n           'solution': '10:30:11:30'\n        },\n        {\n            'name': 'Alan, Elizabeth, Denise',\n           'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n           'meeting_duration': 30,\n           'schedules': {\n                'Alan': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                         (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n                'Elizabeth': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))],\n                'Denise': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                           (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                           (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n           'solution': '10:00:10:30'\n        },\n        {\n            'name': 'Mason, Bruce, Christopher',\n           'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n           'meeting_duration': 30,\n           'schedules': {\n                'Mason': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                          (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                          (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n                'Bruce': [],\n                'Christopher': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n           'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Lisa, Dorothy, Raymond',\n           'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n           'meeting_duration': 30,\n           'schedules': {\n                'Lisa': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                         (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                         (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n                'Dorothy': [],\n                'Raymond': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                            (datetime.strptime('11:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n           'solution': '14:30:15:30'\n        }\n    ]\n\n    for task in tasks:\n        print(f\"{{find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules'])}}\")\n        print(find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules']))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_60"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    tasks = [\n        {\n            'name': 'Roger, Karen, Dorothy',\n          'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n          'meeting_duration': 30,\n          'schedules': {\n                'Roger': [],\n                'Karen': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                          (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                          (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                          (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Dorothy': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                            (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                            (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n          'solution': '11:00:11:30'\n        },\n        {\n            'name': 'Douglas, Lawrence, Isabella',\n          'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n          'meeting_duration': 30,\n          'schedules': {\n                'Douglas': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Lawrence': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Isabella': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n          'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Joshua, Denise, Jeremy',\n          'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n          'meeting_duration': 60,\n          'schedules': {\n                'Joshua': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                           (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                           (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Denise': [],\n                'Jeremy': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                           (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n          'solution': '10:30:11:30'\n        },\n        {\n            'name': 'Alan, Elizabeth, Denise',\n          'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n          'meeting_duration': 30,\n          'schedules': {\n                'Alan': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                         (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n                'Elizabeth': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))],\n                'Denise': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                           (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                           (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n          'solution': '10:00:10:30'\n        },\n        {\n            'name': 'Mason, Bruce, Christopher',\n          'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n          'meeting_duration': 30,\n          'schedules': {\n                'Mason': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                          (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                          (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n                'Bruce': [],\n                'Christopher': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n          'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Robert, Lisa, Patrick',\n          'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n          'meeting_duration': 60,\n          'schedules': {\n                'Robert': [],\n                'Lisa': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                         (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'))],\n                'Patrick': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n          'solution': '14:30:15:30'\n        }\n    ]\n\n    for task in tasks:\n        print(f\"{{find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules'])}}\")\n        print(find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules']))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_61"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    tasks = [\n        {\n            'name': 'Roger, Karen, Dorothy',\n         'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n         'meeting_duration': 30,\n         'schedules': {\n                'Roger': [],\n                'Karen': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                          (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                          (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                          (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Dorothy': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                            (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                            (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n         'solution': '11:00:11:30'\n        },\n        {\n            'name': 'Douglas, Lawrence, Isabella',\n         'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n         'meeting_duration': 30,\n         'schedules': {\n                'Douglas': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Lawrence': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Isabella': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n         'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Joshua, Denise, Jeremy',\n         'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n         'meeting_duration': 60,\n         'schedules': {\n                'Joshua': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                           (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                           (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Denise': [],\n                'Jeremy': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                           (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n         'solution': '10:30:11:30'\n        },\n        {\n            'name': 'Alan, Elizabeth, Denise',\n         'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n         'meeting_duration': 30,\n         'schedules': {\n                'Alan': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                         (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n                'Elizabeth': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))],\n                'Denise': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                           (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                           (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n         'solution': '10:00:10:30'\n        },\n        {\n            'name': 'Mason, Bruce, Christopher',\n         'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n         'meeting_duration': 30,\n         'schedules': {\n                'Mason': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                          (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                          (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n                'Bruce': [],\n                'Christopher': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n         'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Abigail, Michael, Sharon',\n         'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n         'meeting_duration': 60,\n         'schedules': {\n                'Abigail': [],\n                'Michael': [],\n                'Sharon': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('14:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n         'solution': '14:30:15:30'\n        }\n    ]\n\n    for task in tasks:\n        print(f\"{{find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules'])}}\")\n        print(find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules']))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_62"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, meeting_duration, schedules):\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n        if all(\n            meeting_start >= schedule[0] and meeting_end <= schedule[1] \n            for schedule in schedules.values()\n        ):\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        meeting_start += timedelta(minutes=1)\n    return None\n\ndef main():\n    tasks = [\n        {\n            'name': 'Roger, Karen, Dorothy',\n        'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n        'meeting_duration': 30,\n        'schedules': {\n                'Roger': [],\n                'Karen': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                          (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                          (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                          (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Dorothy': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                            (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                            (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n        'solution': '11:00:11:30'\n        },\n        {\n            'name': 'Douglas, Lawrence, Isabella',\n        'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n        'meeting_duration': 30,\n        'schedules': {\n                'Douglas': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Lawrence': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                             (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n                'Isabella': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n        'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Joshua, Denise, Jeremy',\n        'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n        'meeting_duration': 60,\n        'schedules': {\n                'Joshua': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                           (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                           (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n                'Denise': [],\n                'Jeremy': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                           (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n        'solution': '10:30:11:30'\n        },\n        {\n            'name': 'Alan, Elizabeth, Denise',\n        'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n        'meeting_duration': 30,\n        'schedules': {\n                'Alan': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                         (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n                'Elizabeth': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))],\n                'Denise': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                           (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                           (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                           (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                           (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                           (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n        'solution': '10:00:10:30'\n        },\n        {\n            'name': 'Mason, Bruce, Christopher',\n        'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n        'meeting_duration': 30,\n        'schedules': {\n                'Mason': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                          (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                          (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                          (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n                'Bruce': [],\n                'Christopher': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n            },\n        'solution': '12:30:13:00'\n        },\n        {\n            'name': 'Madison, Judith, Roger',\n        'start_time': datetime.strptime('09:00', '%H:%M'),\n            'end_time': datetime.strptime('17:00', '%H:%M'),\n        'meeting_duration': 60,\n        'schedules': {\n                'Madison': [],\n                'Judith': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                           (datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                           (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))],\n                'Roger': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                          (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                          (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                          (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                          (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]\n            },\n        'solution': '14:30:15:30'\n        }\n    ]\n\n    for task in tasks:\n        print(f\"{{find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules'])}}\")\n        print(find_meeting_time(task['start_time'], task['end_time'], task['meeting_duration'], task['schedules']))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_63"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(schedules, duration):\n    # Sort schedules by start time\n    sorted_schedules = sorted(schedules.items())\n\n    # Initialize the meeting time\n    meeting_start = None\n    meeting_end = None\n\n    # Iterate through the sorted schedules\n    for start, end in sorted_schedules:\n        # Check if the meeting time is available\n        if meeting_start is None:\n            meeting_start = start\n            meeting_end = start + timedelta(minutes=duration)\n        else:\n            # Check if the meeting time conflicts with the current schedule\n            if meeting_start < end and meeting_end > start:\n                # Find the next available time slot\n                while True:\n                    meeting_start += timedelta(minutes=1)\n                    meeting_end += timedelta(minutes=1)\n                    # Check if the new time slot is available\n                    available = True\n                    for s, e in sorted_schedules:\n                        if meeting_start < e and meeting_end > s:\n                            available = False\n                            break\n                    if available:\n                        break\n\n    return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\n# Test the function\nschedules = {\n    'Karen': [(10, 30), (11, 30), (12, 30), (14, 0), (15, 30, 16)],\n    'Dorothy': [(9, 0), (10, 30), (11, 30), (12, 30), (14, 0, 15, 30), (16, 0, 17)],\n    'Roger': []\n}\n\nprint(schedule_meeting(schedules, 30))\n\nschedules = {\n    'Douglas': [(12, 0, 12, 30), (15, 0, 15, 30)],\n    'Lawrence': [(10, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n    'Isabella': [(9, 0, 12, 30), (13, 30, 17, 0)]\n}\n\nprint(schedule_meeting(schedules, 30))\n\nschedules = {\n    'Joshua': [(10, 0, 10, 30), (12, 0, 12, 30), (14, 0, 14, 30), (15, 0, 15, 30)],\n    'Denise': [],\n    'Jeremy': [(9, 30, 10, 30), (12, 0, 13, 0), (13, 30, 14, 0), (14, 30, 15, 0), (15, 30, 16, 0), (16, 30, 17, 0)]\n}\n\nprint(schedule_meeting(schedules, 60))\n\nschedules = {\n    'Alan': [(13, 0, 13, 30), (14, 0, 14, 30)],\n    'Elizabeth': [(9, 0, 9, 30), (11, 0, 11, 30)],\n    'Denise': [(9, 0, 10, 0), (10, 30, 11, 30), (12, 30, 13, 0), (13, 30, 14, 0), (14, 30, 16, 0), (16, 30, 17, 0)]\n}\n\nprint(schedule_meeting(schedules, 30))\n\nschedules = {\n    'Mason': [(9, 30, 10, 0), (11, 0, 11, 30), (14, 30, 15, 0), (16, 30, 17, 0)],\n    'Bruce': [],\n    'Christopher': [(9, 30, 10, 30), (11, 30, 12, 30), (15, 0, 17, 0)]\n}\n\nprint(schedule_meeting(schedules, 30))\n\nschedules = {\n    'Nancy': [(9, 30, 10, 0), (12, 30, 13, 0)],\n    'Albert': [],\n    'Nathan': [(9, 0, 12, 30), (13, 0, 14, 30), (16, 0, 17, 0)]\n}\n\nprint(schedule_meeting(schedules, 60))\n```",
            "count": "calendar_scheduling_example_64"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    # Task 1\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 2\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 3\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 60\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 4\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 5\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n    ]\n    meeting_duration = 30\n    preferences = [(12, 30), (13, 0)]\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 6\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_65"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    # Task 1\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 2\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 3\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 60\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 4\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 5\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n    ]\n    meeting_duration = 30\n    preferences = [(12, 30), (13, 0)]\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 6\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 7\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 60\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_66"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    # Task 1\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 2\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 3\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 60\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 4\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 5\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 9, 30), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 16, 30), datetime(2024, 7, 29, 17, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n    ]\n    meeting_duration = 30\n    preferences = [(12, 30), (13, 0)]\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 6\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 9, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 15, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 12, 0), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 7\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 0), datetime(2024, 7, 29, 11, 30)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 60\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\n    # Task 8\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 13, 0), datetime(2024, 7, 29, 13, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 30)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 30)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_67"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences=None):\n    # Sort busy times\n    busy_times.sort()\n\n    # Iterate over all possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, meeting_duration):\n            meeting_start_time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n            # Check if meeting time is within work hours\n            if start_time <= meeting_start_time <= end_time and start_time <= meeting_end_time <= end_time:\n                # Check if meeting time conflicts with busy times\n                conflict = False\n                for busy_time in busy_times:\n                    if (busy_time[0] <= meeting_start_time <= busy_time[1] or\n                        busy_time[0] <= meeting_end_time <= busy_time[1] or\n                        meeting_start_time <= busy_time[0] and meeting_end_time >= busy_time[1]):\n                        conflict = True\n                        break\n\n                # Check preferences\n                if preferences and (meeting_start_time.hour, meeting_start_time.minute) not in preferences:\n                    continue\n\n                # If no conflicts, return meeting time\n                if not conflict:\n                    return f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n\n    # If no meeting time is found, return None\n    return None\n\ndef main():\n    start_time = datetime(2024, 7, 29, 9, 0)\n    end_time = datetime(2024, 7, 29, 17, 0)\n    busy_times = [\n        (datetime(2024, 7, 29, 10, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 13, 30), datetime(2024, 7, 29, 14, 0)),\n        (datetime(2024, 7, 29, 15, 30), datetime(2024, 7, 29, 16, 0)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 0)),\n        (datetime(2024, 7, 29, 10, 30), datetime(2024, 7, 29, 11, 0)),\n        (datetime(2024, 7, 29, 11, 30), datetime(2024, 7, 29, 12, 0)),\n        (datetime(2024, 7, 29, 12, 30), datetime(2024, 7, 29, 13, 0)),\n        (datetime(2024, 7, 29, 14, 0), datetime(2024, 7, 29, 14, 30)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 15, 30)),\n        (datetime(2024, 7, 29, 16, 0), datetime(2024, 7, 29, 16, 30)),\n        (datetime(2024, 7, 29, 9, 0), datetime(2024, 7, 29, 10, 30)),\n        (datetime(2024, 7, 29, 14, 30), datetime(2024, 7, 29, 17, 0)),\n    ]\n    meeting_duration = 30\n    preferences = None\n    print(schedule_meeting(start_time, end_time, busy_times, meeting_duration, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_68"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_time, end_time, schedules):\n    start_time = datetime.strptime(start_time, \"%H:%M\")\n    end_time = datetime.strptime(end_time, \"%H:%M\")\n    meeting_duration = timedelta(hours=1) if 'hour' in schedules['meeting_duration'] else timedelta(hours=0.5)\n    meeting_end_time = start_time + meeting_duration\n\n    while start_time < end_time:\n        if all(\n            start_time + meeting_duration <= schedule['end'] \n            and schedule['start'] <= start_time \n            for schedule in schedules['participants'].values()\n        ):\n            return f\"{start_time.strftime('%H:%M')}:{(start_time + meeting_duration).strftime('%H:%M')}\"\n\n        start_time += timedelta(minutes=30)\n\n    return \"No available time found\"\n\nschedules = {\n   'meeting_duration': {'half': 'half', 'hour': 'hour'},\n    'participants': {\n        'Roger': {'start': '09:00', 'end': '17:00'},\n        'Karen': {'start': '10:00', 'end': '10:30'},\n        'Dorothy': {'start': '09:00', 'end': '10:00'},\n        'Douglas': {'start': '12:00', 'end': '12:30'},\n        'Lawrence': {'start': '10:30', 'end': '12:00'},\n        'Isabella': {'start': '09:00', 'end': '12:30'},\n        'Joshua': {'start': '10:00', 'end': '10:30'},\n        'Denise': {'start': '09:00', 'end': '09:00'},\n        'Jeremy': {'start': '09:30', 'end': '10:30'},\n        'Alan': {'start': '13:00', 'end': '13:30'},\n        'Elizabeth': {'start': '09:00', 'end': '09:30'},\n        'Mason': {'start': '09:30', 'end': '10:00'},\n        'Bruce': {'start': '09:00', 'end': '17:00'},\n        'Christopher': {'start': '09:30', 'end': '10:30'},\n        'Shirley': {'start': '11:00', 'end': '11:30'},\n        'Stephen': {'start': '13:00', 'end': '13:30'},\n        'Paul': {'start': '09:00', 'end': '10:00'}\n    }\n}\n\nprint(schedule_meeting('09:00', '17:00', schedules))\n```",
            "count": "calendar_scheduling_example_69"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration):\n    # Find the earliest available time for Denise\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in denise_schedule or end_time in denise_schedule):\n            # Check if the time is available for Angela and Natalie\n            if not (start_time in angela_schedule or end_time in angela_schedule) and \\\n               not (start_time in natalie_schedule or end_time in natalie_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Task 1\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                        datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                        datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 2\n    denise_schedule = [datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"),\n                       datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")]\n    angela_schedule = [datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"),\n                       datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                       datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                       datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")]\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 3\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                        datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                        datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"),\n                        datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n                        datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    meeting_duration = 60\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 4\n    denise_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                       datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                       datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                       datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                       datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n                       datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 5\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                        datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"),\n                        datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"),\n                        datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 6\n    denise_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                       datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                       datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                       datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                       datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n                       datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    angela_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")]\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 7\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                        datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"),\n                        datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"),\n                        datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 8\n    denise_schedule = [datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"),\n                       datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")]\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                        datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                        datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration):\n    # Find the earliest available time for Denise\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in denise_schedule or end_time in denise_schedule):\n            # Check if the time is available for Angela and Natalie\n            if not (start_time in angela_schedule or end_time in angela_schedule) and \\\n               not (start_time in natalie_schedule or end_time in natalie_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration):\n    # Find the earliest available time for Douglas\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in douglas_schedule or end_time in douglas_schedule):\n            # Check if the time is available for Lawrence and Isabella\n            if not (start_time in lawrence_schedule or end_time in lawrence_schedule) and \\\n               not (start_time in isabella_schedule or end_time in isabella_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration):\n    # Find the earliest available time for Joshua\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in joshua_schedule or end_time in joshua_schedule):\n            # Check if the time is available for Denise and Jeremy\n            if not (start_time in denise_schedule or end_time in denise_schedule) and \\\n               not (start_time in jeremy_schedule or end_time in jeremy_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration):\n    # Find the earliest available time for Alan\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in alan_schedule or end_time in alan_schedule):\n            # Check if the time is available for Elizabeth and Denise\n            if not (start_time in elizabeth_schedule or end_time in elizabeth_schedule) and \\\n               not (start_time in denise_schedule or end_time in denise_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration):\n    # Find the earliest available time for Mason\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in mason_schedule or end_time in mason_schedule):\n            # Check if the time is available for Bruce and Christopher\n            if not (start_time in bruce_schedule or end_time in bruce_schedule) and \\\n               not (start_time in christopher_schedule or end_time in christopher_schedule):\n                # Check if Mason prefers to meet after 12:30\n                if start_time >= datetime.strptime(\"12:30\", \"%H:%M\"):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_6(nicole_schedule, john_schedule, ethan_schedule, meeting_duration):\n    # Find the earliest available time for Nicole\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in nicole_schedule or end_time in nicole_schedule):\n            # Check if the time is available for John and Ethan\n            if not (start_time in john_schedule or end_time in john_schedule) and \\\n               not (start_time in ethan_schedule or end_time in ethan_schedule):\n                # Check if John prefers to meet before 12:00\n                if start_time < datetime.strptime(\"12:00\", \"%H:%M\"):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Task 1\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                        datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                        datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 2\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting_2(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 3\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 60\n    print(f\"{{ {schedule_meeting_3(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 4\n    denise_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                       datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                       datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                       datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                       datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n                       datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting_4(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 5\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting_5(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 6\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting_6(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_71"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration):\n    # Find the earliest available time for Denise\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in denise_schedule or end_time in denise_schedule):\n            # Check if the time is available for Angela and Natalie\n            if not (start_time in angela_schedule or end_time in angela_schedule) and \\\n               not (start_time in natalie_schedule or end_time in natalie_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_2(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration):\n    # Find the earliest available time for Douglas\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in douglas_schedule or end_time in douglas_schedule):\n            # Check if the time is available for Lawrence and Isabella\n            if not (start_time in lawrence_schedule or end_time in lawrence_schedule) and \\\n               not (start_time in isabella_schedule or end_time in isabella_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_3(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration):\n    # Find the earliest available time for Joshua\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in joshua_schedule or end_time in joshua_schedule):\n            # Check if the time is available for Denise and Jeremy\n            if not (start_time in denise_schedule or end_time in denise_schedule) and \\\n               not (start_time in jeremy_schedule or end_time in jeremy_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_4(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration):\n    # Find the earliest available time for Alan\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in alan_schedule or end_time in alan_schedule):\n            # Check if the time is available for Elizabeth and Denise\n            if not (start_time in elizabeth_schedule or end_time in elizabeth_schedule) and \\\n               not (start_time in denise_schedule or end_time in denise_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_5(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration):\n    # Find the earliest available time for Mason\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in mason_schedule or end_time in mason_schedule):\n            # Check if the time is available for Bruce and Christopher\n            if not (start_time in bruce_schedule or end_time in bruce_schedule) and \\\n               not (start_time in christopher_schedule or end_time in christopher_schedule):\n                # Check if Mason prefers to meet after 12:30\n                if start_time >= datetime.strptime(\"12:30\", \"%H:%M\"):\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef schedule_meeting_6(mason_schedule, amy_schedule, christopher_schedule, meeting_duration):\n    # Find the earliest available time for Mason\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in mason_schedule or end_time in mason_schedule):\n            # Check if the time is available for Amy and Christopher\n            if not (start_time in amy_schedule or end_time in amy_schedule) and \\\n               not (start_time in christopher_schedule or end_time in christopher_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Task 1\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                        datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                        datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                        datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 2\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting_2(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 3\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 60\n    print(f\"{{ {schedule_meeting_3(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 4\n    denise_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                       datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                       datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"),\n                       datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                       datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"),\n                       datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting_4(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 5\n    denise_schedule = []\n    angela_schedule = []\n    natalie_schedule = []\n    meeting_duration = 30\n    print(f\"{{ {schedule_meeting_5(denise_schedule, angela_schedule, natalie_schedule, meeting_duration)} }}\")\n\n    # Task 6\n    mason_schedule = []\n    amy_schedule = [datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"),\n                    datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                    datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    christopher_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                            datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                            datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"),\n                            datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")]\n    meeting_duration = 60\n    print(f\"{{ {schedule_meeting_6(mason_schedule, amy_schedule, christopher_schedule, meeting_duration)} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_72"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(bradley_schedule, andrew_schedule, melissa_schedule, meeting_duration):\n    # Find the earliest available time for Bradley\n    for start in range(9, 17):\n        start_time = datetime.strptime(f\"{start}:00\", \"%H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if not (start_time in bradley_schedule or end_time in bradley_schedule):\n            # Check if the time is available for Andrew and Melissa\n            if not (start_time in andrew_schedule or end_time in andrew_schedule) and \\\n               not (start_time in melissa_schedule or end_time in melissa_schedule):\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n    # If no time is found, return an error message\n    return \"No available time found\"\n\ndef main():\n    # Define the schedules\n    bradley_schedule = [datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"),\n                        datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                        datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"),\n                        datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")]\n    andrew_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\"),\n                       datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"),\n                       datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"),\n                       datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")]\n    melissa_schedule = [datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\"),\n                        datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"),\n                        datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"),\n                        datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"),\n                        datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")]\n\n    # Define the meeting duration\n    meeting_duration = 30\n\n    # Schedule the meeting\n    meeting_time = schedule_meeting(bradley_schedule, andrew_schedule, melissa_schedule, meeting_duration)\n\n    # Print the result\n    print(f\"{{ {meeting_time} }}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_73"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    meeting_duration = 30  # in minutes\n\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available'])\n\n    earliest_start_time = participants[0]['earliest_available']\n    latest_end_time = end_time - timedelta(minutes=meeting_duration)\n\n    for i in range(len(participants)):\n        start_time = earliest_start_time\n        end_time = start_time + timedelta(minutes=meeting_duration)\n\n        while end_time <= latest_end_time:\n            conflicts = False\n            for j in range(len(participants)):\n                if i!= j and (start_time >= participants[j]['start_time'] and start_time < participants[j]['end_time']) or (end_time > participants[j]['start_time'] and end_time <= participants[j]['end_time']):\n                    conflicts = True\n                    break\n\n            if not conflicts:\n                return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n\n            start_time += timedelta(minutes=1)\n            end_time += timedelta(minutes=1)\n\n    return \"No meeting time found\"\n\ndef get_participant_schedule(participant):\n    schedule = {\n        'name': participant,\n       'schedule': [\n            {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 10, 0)},\n            {'start_time': datetime(2024, 7, 26, 10, 30), 'end_time': datetime(2024, 7, 26, 11, 0)},\n            {'start_time': datetime(2024, 7, 26, 11, 30), 'end_time': datetime(2024, 7, 26, 12, 0)},\n            {'start_time': datetime(2024, 7, 26, 12, 30), 'end_time': datetime(2024, 7, 26, 13, 0)},\n            {'start_time': datetime(2024, 7, 26, 14, 0), 'end_time': datetime(2024, 7, 26, 15, 0)},\n            {'start_time': datetime(2024, 7, 26, 15, 30), 'end_time': datetime(2024, 7, 26, 16, 0)},\n            {'start_time': datetime(2024, 7, 26, 16, 0), 'end_time': datetime(2024, 7, 26, 17, 0)},\n        ],\n        'earliest_available': datetime(2024, 7, 26, 0, 0)\n    }\n\n    if participant == 'Karen':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 10, 0), 'end_time': datetime(2024, 7, 26, 10, 30)},\n            {'start_time': datetime(2024, 7, 26, 11, 30), 'end_time': datetime(2024, 7, 26, 12, 0)},\n            {'start_time': datetime(2024, 7, 26, 12, 30), 'end_time': datetime(2024, 7, 26, 13, 0)},\n            {'start_time': datetime(2024, 7, 26, 14, 0), 'end_time': datetime(2024, 7, 26, 15, 0)},\n            {'start_time': datetime(2024, 7, 26, 15, 30), 'end_time': datetime(2024, 7, 26, 16, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 0)\n\n    elif participant == 'Dorothy':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 10, 0)},\n            {'start_time': datetime(2024, 7, 26, 10, 30), 'end_time': datetime(2024, 7, 26, 11, 0)},\n            {'start_time': datetime(2024, 7, 26, 11, 30), 'end_time': datetime(2024, 7, 26, 12, 0)},\n            {'start_time': datetime(2024, 7, 26, 12, 30), 'end_time': datetime(2024, 7, 26, 13, 0)},\n            {'start_time': datetime(2024, 7, 26, 14, 0), 'end_time': datetime(2024, 7, 26, 15, 30)},\n            {'start_time': datetime(2024, 7, 26, 16, 0), 'end_time': datetime(2024, 7, 26, 17, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 10, 0)\n\n    elif participant == 'Douglas':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 12, 0), 'end_time': datetime(2024, 7, 26, 12, 30)},\n            {'start_time': datetime(2024, 7, 26, 15, 0), 'end_time': datetime(2024, 7, 26, 15, 30)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 0)\n\n    elif participant == 'Lawrence':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 10, 30), 'end_time': datetime(2024, 7, 26, 12, 0)},\n            {'start_time': datetime(2024, 7, 26, 13, 0), 'end_time': datetime(2024, 7, 26, 13, 30)},\n            {'start_time': datetime(2024, 7, 26, 14, 0), 'end_time': datetime(2024, 7, 26, 14, 30)},\n            {'start_time': datetime(2024, 7, 26, 15, 30), 'end_time': datetime(2024, 7, 26, 16, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 0)\n\n    elif participant == 'Isabella':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 12, 30)},\n            {'start_time': datetime(2024, 7, 26, 13, 30), 'end_time': datetime(2024, 7, 26, 17, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 12, 30)\n\n    elif participant == 'Joshua':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 10, 0), 'end_time': datetime(2024, 7, 26, 10, 30)},\n            {'start_time': datetime(2024, 7, 26, 12, 0), 'end_time': datetime(2024, 7, 26, 12, 30)},\n            {'start_time': datetime(2024, 7, 26, 14, 0), 'end_time': datetime(2024, 7, 26, 14, 30)},\n            {'start_time': datetime(2024, 7, 26, 15, 0), 'end_time': datetime(2024, 7, 26, 15, 30)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 0)\n\n    elif participant == 'Jeremy':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 9, 30), 'end_time': datetime(2024, 7, 26, 10, 30)},\n            {'start_time': datetime(2024, 7, 26, 12, 0), 'end_time': datetime(2024, 7, 26, 13, 0)},\n            {'start_time': datetime(2024, 7, 26, 13, 30), 'end_time': datetime(2024, 7, 26, 14, 0)},\n            {'start_time': datetime(2024, 7, 26, 14, 30), 'end_time': datetime(2024, 7, 26, 15, 0)},\n            {'start_time': datetime(2024, 7, 26, 15, 30), 'end_time': datetime(2024, 7, 26, 16, 0)},\n            {'start_time': datetime(2024, 7, 26, 16, 30), 'end_time': datetime(2024, 7, 26, 17, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 10, 30)\n\n    elif participant == 'Alan':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 13, 0), 'end_time': datetime(2024, 7, 26, 13, 30)},\n            {'start_time': datetime(2024, 7, 26, 14, 0), 'end_time': datetime(2024, 7, 26, 14, 30)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 0)\n\n    elif participant == 'Elizabeth':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 9, 30)},\n            {'start_time': datetime(2024, 7, 26, 11, 0), 'end_time': datetime(2024, 7, 26, 11, 30)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 30)\n\n    elif participant == 'Denise':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 10, 0)},\n            {'start_time': datetime(2024, 7, 26, 10, 30), 'end_time': datetime(2024, 7, 26, 11, 30)},\n            {'start_time': datetime(2024, 7, 26, 12, 30), 'end_time': datetime(2024, 7, 26, 13, 0)},\n            {'start_time': datetime(2024, 7, 26, 13, 30), 'end_time': datetime(2024, 7, 26, 14, 0)},\n            {'start_time': datetime(2024, 7, 26, 14, 30), 'end_time': datetime(2024, 7, 26, 16, 0)},\n            {'start_time': datetime(2024, 7, 26, 16, 30), 'end_time': datetime(2024, 7, 26, 17, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 10, 0)\n\n    elif participant == 'Mason':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 9, 30), 'end_time': datetime(2024, 7, 26, 10, 0)},\n            {'start_time': datetime(2024, 7, 26, 11, 0), 'end_time': datetime(2024, 7, 26, 11, 30)},\n            {'start_time': datetime(2024, 7, 26, 14, 30), 'end_time': datetime(2024, 7, 26, 15, 0)},\n            {'start_time': datetime(2024, 7, 26, 16, 30), 'end_time': datetime(2024, 7, 26, 17, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 12, 30)\n\n    elif participant == 'Bruce':\n        schedule['schedule'] = []\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 0)\n\n    elif participant == 'Christopher':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 9, 30), 'end_time': datetime(2024, 7, 26, 10, 30)},\n            {'start_time': datetime(2024, 7, 26, 11, 30), 'end_time': datetime(2024, 7, 26, 12, 30)},\n            {'start_time': datetime(2024, 7, 26, 15, 0), 'end_time': datetime(2024, 7, 26, 17, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 12, 30)\n\n    elif participant == 'Eric':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 10, 0), 'end_time': datetime(2024, 7, 26, 12, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 12, 30)\n\n    elif participant == 'Albert':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 12, 0), 'end_time': datetime(2024, 7, 26, 12, 30)},\n            {'start_time': datetime(2024, 7, 26, 15, 30), 'end_time': datetime(2024, 7, 26, 16, 0)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 9, 0)\n\n    elif participant == 'Katherine':\n        schedule['schedule'] = [\n            {'start_time': datetime(2024, 7, 26, 10, 0), 'end_time': datetime(2024, 7, 26, 11, 0)},\n            {'start_time': datetime(2024, 7, 26, 11, 30), 'end_time': datetime(2024, 7, 26, 14, 0)},\n            {'start_time': datetime(2024, 7, 26, 15, 0), 'end_time': datetime(2024, 7, 26, 15, 30)},\n        ]\n        schedule['earliest_available'] = datetime(2024, 7, 26, 14, 0)\n\n    return schedule\n\ndef main():\n    start_time = datetime(2024, 7, 26, 9, 0)\n    end_time = datetime(2024, 7, 26, 17, 0)\n    participants = [\n        get_participant_schedule('Roger'),\n        get_participant_schedule('Karen'),\n        get_participant_schedule('Dorothy'),\n    ]\n    print(f\"Meeting time for Roger, Karen and Dorothy: {find_meeting_time(start_time, end_time, participants)}\")\n\n    participants = [\n        get_participant_schedule('Douglas'),\n        get_participant_schedule('Lawrence'),\n        get_participant_schedule('Isabella'),\n    ]\n    print(f\"Meeting time for Douglas, Lawrence and Isabella: {find_meeting_time(start_time, end_time, participants)}\")\n\n    participants = [\n        get_participant_schedule('Joshua'),\n        get_participant_schedule('Denise'),\n        get_participant_schedule('Jeremy'),\n    ]\n    print(f\"Meeting time for Joshua, Denise and Jeremy: {find_meeting_time(start_time, end_time, participants)}\")\n\n    participants = [\n        get_participant_schedule('Alan'),\n        get_participant_schedule('Elizabeth'),\n        get_participant_schedule('Denise'),\n    ]\n    print(f\"Meeting time for Alan, Elizabeth and Denise: {find_meeting_time(start_time, end_time, participants)}\")\n\n    participants = [\n        get_participant_schedule('Mason'),\n        get_participant_schedule('Bruce'),\n        get_participant_schedule('Christopher'),\n    ]\n    print(f\"Meeting time for Mason, Bruce and Christopher: {find_meeting_time(start_time, end_time, participants)}\")\n\n    participants = [\n        get_participant_schedule('Eric'),\n        get_participant_schedule('Albert'),\n        get_participant_schedule('Katherine'),\n    ]\n    print(f\"Meeting time for Eric, Albert and Katherine: {find_meeting_time(start_time, end_time, participants)}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_74"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Roger': {'busy': []},\n    'Karen': {'busy': [(10, 30), (11, 30), (12, 30), (14, 0), (15, 30)]},\n    'Dorothy': {'busy': [(9, 0), (10, 30), (11, 30), (12, 30), (14, 0), (15, 30), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Douglas': {'busy': [(12, 30), (15, 0)]},\n    'Lawrence': {'busy': [(10, 30), (13, 0), (14, 0), (15, 30)]},\n    'Isabella': {'busy': [(9, 0), (12, 30), (13, 30)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Joshua': {'busy': [(10, 30), (12, 30), (14, 0), (15, 0)]},\n    'Denise': {'busy': []},\n    'Jeremy': {'busy': [(9, 30), (12, 0), (13, 30), (14, 30), (15, 30), (16, 30)]}\n}\nprint(schedule_meeting(participants, 60))\n\nparticipants = {\n    'Alan': {'busy': [(13, 0), (14, 0)]},\n    'Elizabeth': {'busy': [(9, 0), (11, 30)]},\n    'Denise': {'busy': [(9, 0), (10, 30), (12, 30), (13, 30), (14, 0), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Mason': {'busy': [(9, 30), (11, 0), (14, 30), (16, 30)]},\n    'Bruce': {'busy': []},\n    'Christopher': {'busy': [(9, 30), (11, 30), (15, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Jacob': {'busy': [(9, 0), (12, 30), (14, 30), (16, 30)]},\n    'Amanda': {'busy': [(10, 0), (12, 0)]},\n    'Lisa': {'busy': [(11, 0), (14, 30), (16, 30)]}\n}\nprint('{14:30:15:30}')\n```",
            "count": "calendar_scheduling_example_75"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Roger': {'busy': []},\n    'Karen': {'busy': [(10, 30), (11, 30), (12, 30), (14, 0), (15, 30)]},\n    'Dorothy': {'busy': [(9, 0), (10, 30), (11, 30), (12, 30), (14, 0), (15, 30), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Douglas': {'busy': [(12, 30), (15, 0)]},\n    'Lawrence': {'busy': [(10, 30), (13, 0), (14, 0), (15, 30)]},\n    'Isabella': {'busy': [(9, 0), (12, 30), (13, 30)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Joshua': {'busy': [(10, 30), (12, 30), (14, 0), (15, 0)]},\n    'Denise': {'busy': []},\n    'Jeremy': {'busy': [(9, 30), (12, 0), (13, 30), (14, 30), (15, 30), (16, 30)]}\n}\nprint(schedule_meeting(participants, 60))\n\nparticipants = {\n    'Alan': {'busy': [(13, 0), (14, 0)]},\n    'Elizabeth': {'busy': [(9, 0), (11, 30)]},\n    'Denise': {'busy': [(9, 0), (10, 30), (12, 30), (13, 30), (14, 0), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Mason': {'busy': [(9, 30), (11, 0), (14, 30), (16, 30)]},\n    'Bruce': {'busy': []},\n    'Christopher': {'busy': [(9, 30), (11, 30), (15, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Joyce': {'busy': []},\n    'Beverly': {'busy': [(9, 30), (11, 0), (12, 30), (14, 0), (15, 30), (16, 30)]},\n    'Peter': {'busy': [(9, 30), (11, 30), (14, 30), (16, 30)]}\n}\nprint(schedule_meeting(participants, 60))\n```",
            "count": "calendar_scheduling_example_76"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Roger': {'busy': []},\n    'Karen': {'busy': [(10, 30), (11, 30), (12, 30), (14, 0), (15, 30)]},\n    'Dorothy': {'busy': [(9, 0), (10, 30), (11, 30), (12, 30), (14, 0), (15, 30), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Douglas': {'busy': [(12, 30), (15, 0)]},\n    'Lawrence': {'busy': [(10, 30), (13, 0), (14, 0), (15, 30)]},\n    'Isabella': {'busy': [(9, 0), (12, 30), (13, 30)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Joshua': {'busy': [(10, 30), (12, 30), (14, 0), (15, 0)]},\n    'Denise': {'busy': []},\n    'Jeremy': {'busy': [(9, 30), (12, 0), (13, 30), (14, 30), (15, 30), (16, 30)]}\n}\nprint(schedule_meeting(participants, 60))\n\nparticipants = {\n    'Alan': {'busy': [(13, 0), (14, 0)]},\n    'Elizabeth': {'busy': [(9, 0), (11, 30)]},\n    'Denise': {'busy': [(9, 0), (10, 30), (12, 30), (13, 30), (14, 0), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Mason': {'busy': [(9, 30), (11, 0), (14, 30), (16, 30)]},\n    'Bruce': {'busy': []},\n    'Christopher': {'busy': [(9, 30), (11, 30), (15, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Donald': {'busy': [(10, 30), (11, 30), (12, 30), (13, 30), (15, 30)]},\n    'Joyce': {'busy': [(11, 0), (14, 30), (16, 0)]},\n    'Abigail': {'busy': [(9, 30), (11, 0), (13, 0), (15, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n```",
            "count": "calendar_scheduling_example_77"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:30}",
            "type_error": "TypeError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants, duration):\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            time = datetime(start.year, start.month, start.day, hour, minute)\n            if all(not (time + timedelta(minutes=duration)).time() in participant['busy'] for participant in participants.values()):\n                return time.strftime('%H:%M') + ':' + (time + timedelta(minutes=duration)).strftime('%H:%M')\n\ndef schedule_meeting(participants, duration):\n    start = datetime(2024, 7, 29, 9, 0)\n    end = datetime(2024, 7, 29, 17, 0)\n    return '{%s:%s}' % (find_meeting_time(start, end, participants, duration), find_meeting_time(start, end, participants, duration) + timedelta(minutes=duration))\n\nparticipants = {\n    'Roger': {'busy': []},\n    'Karen': {'busy': [(10, 30), (11, 30), (12, 30), (14, 0), (15, 30)]},\n    'Dorothy': {'busy': [(9, 0), (10, 30), (11, 30), (12, 30), (14, 0), (15, 30), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Douglas': {'busy': [(12, 30), (15, 0)]},\n    'Lawrence': {'busy': [(10, 30), (13, 0), (14, 0), (15, 30)]},\n    'Isabella': {'busy': [(9, 0), (12, 30), (13, 30)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Joshua': {'busy': [(10, 30), (12, 30), (14, 0), (15, 0)]},\n    'Denise': {'busy': []},\n    'Jeremy': {'busy': [(9, 30), (12, 0), (13, 30), (14, 30), (15, 30), (16, 30)]}\n}\nprint(schedule_meeting(participants, 60))\n\nparticipants = {\n    'Alan': {'busy': [(13, 0), (14, 0)]},\n    'Elizabeth': {'busy': [(9, 0), (11, 30)]},\n    'Denise': {'busy': [(9, 0), (10, 30), (12, 30), (13, 30), (14, 0), (16, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Mason': {'busy': [(9, 30), (11, 0), (14, 30), (16, 30)]},\n    'Bruce': {'busy': []},\n    'Christopher': {'busy': [(9, 30), (11, 30), (15, 0)]}\n}\nprint(schedule_meeting(participants, 30))\n\nparticipants = {\n    'Ronald': {'busy': [(9, 0), (11, 0)]},\n    'Teresa': {'busy': [(10, 30), (14, 0)]},\n    'Carol': {'busy': [(9, 0), (12, 30), (14, 0), (16, 0)]}\n}\nprint(schedule_meeting(participants, 60))\n```",
            "count": "calendar_scheduling_example_78"
        },
        {
            "final_program_time": "{16:16:16:46}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    # Convert start and end times to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    \n    # Find the earliest available time slot for each participant\n    earliest_time = datetime.strptime('09:00', '%H:%M')\n    latest_time = datetime.strptime('17:00', '%H:%M')\n    \n    for participant in participants:\n        participant_schedule = participant['schedule']\n        for time in participant_schedule:\n            start, end = time\n            start = datetime.strptime(start, '%H:%M')\n            end = datetime.strptime(end, '%H:%M')\n            if start < latest_time and end > earliest_time:\n                if start > earliest_time:\n                    earliest_time = start\n    \n    # Check if the earliest time slot is available for all participants\n    for participant in participants:\n        participant_schedule = participant['schedule']\n        for time in participant_schedule:\n            start, end = time\n            start = datetime.strptime(start, '%H:%M')\n            end = datetime.strptime(end, '%H:%M')\n            if earliest_time >= start and earliest_time + timedelta(minutes=duration) <= end:\n                continue\n            else:\n                earliest_time += timedelta(minutes=1)\n    \n    # Format the earliest available time slot as a string\n    meeting_time = earliest_time.strftime('%H:%M')\n    end_time = (earliest_time + timedelta(minutes=duration)).strftime('%H:%M')\n    \n    return f'{{{meeting_time}:{end_time}}}'\n\n\n# Example usage:\nparticipants = [\n    {'name': 'Roger','schedule': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')]},\n    {'name': 'Karen','schedule': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')]},\n    {'name': 'Dorothy','schedule': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]},\n]\n\nprint(find_meeting_time(participants, '09:00', '17:00', 30))\n```",
            "count": "calendar_scheduling_example_79"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(minutes=30)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60, 30):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        # Task 1\n        {'name': 'Roger', 'busy': []},\n        {'name': 'Karen', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 0)]},\n        {'name': 'Dorothy', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 2\n        {'name': 'Douglas', 'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Lawrence', 'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n        {'name': 'Isabella', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 3\n        {'name': 'Joshua', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Denise', 'busy': []},\n        {'name': 'Jeremy', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 4\n        {'name': 'Alan', 'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)]},\n        {'name': 'Elizabeth', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)]},\n        {'name': 'Denise', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 5\n        {'name': 'Mason', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        {'name': 'Bruce', 'busy': []},\n        {'name': 'Christopher', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 6\n        {'name': 'Michelle', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)]},\n        {'name': 'Billy', 'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30)]},\n        {'name': 'Alexis', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_80"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(minutes=30)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60, 30):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        # Task 1\n        {'name': 'Roger', 'busy': []},\n        {'name': 'Karen', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 0)]},\n        {'name': 'Dorothy', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 2\n        {'name': 'Douglas', 'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Lawrence', 'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n        {'name': 'Isabella', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 3\n        {'name': 'Joshua', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Denise', 'busy': []},\n        {'name': 'Jeremy', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 4\n        {'name': 'Alan', 'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)]},\n        {'name': 'Elizabeth', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)]},\n        {'name': 'Denise', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 5\n        {'name': 'Mason', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        {'name': 'Bruce', 'busy': []},\n        {'name': 'Christopher', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 6\n        {'name': 'Jeremy', 'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Lawrence', 'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        {'name': 'Helen', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_81"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(minutes=30)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60, 30):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        # Task 1\n        {'name': 'Roger', 'busy': []},\n        {'name': 'Karen', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 0)]},\n        {'name': 'Dorothy', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 2\n        {'name': 'Douglas', 'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Lawrence', 'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n        {'name': 'Isabella', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 3\n        {'name': 'Joshua', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Denise', 'busy': []},\n        {'name': 'Jeremy', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 4\n        {'name': 'Alan', 'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)]},\n        {'name': 'Elizabeth', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)]},\n        {'name': 'Denise', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 5\n        {'name': 'Mason', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        {'name': 'Bruce', 'busy': []},\n        {'name': 'Christopher', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 6\n        {'name': 'Michael', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 16, 30)]},\n        {'name': 'Eric', 'busy': []},\n        {'name': 'Arthur', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, participants):\n    meeting_duration = timedelta(hours=1)\n\n    for hour in range(start.hour, end.hour):\n        for minute in range(0, 60):\n            meeting_start = datetime(start.year, start.month, start.day, hour, minute)\n            meeting_end = meeting_start + meeting_duration\n\n            if all(not (meeting_start >= participant['busy'][0] and meeting_start < participant['busy'][1]) \n                   and not (meeting_end >= participant['busy'][0] and meeting_end < participant['busy'][1]) \n                   for participant in participants):\n                return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n\ndef main():\n    start = datetime(2024, 7, 22, 9, 0)\n    end = datetime(2024, 7, 22, 17, 0)\n\n    participants = [\n        # Task 1\n        {'name': 'Roger', 'busy': []},\n        {'name': 'Karen', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 0)]},\n        {'name': 'Dorothy', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 15, 30)],\n         'busy': [datetime(2024, 7, 22, 16, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 2\n        {'name': 'Douglas', 'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Lawrence', 'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 12, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)]},\n        {'name': 'Isabella', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 3\n        {'name': 'Joshua', 'busy': [datetime(2024, 7, 22, 10, 0), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Denise', 'busy': []},\n        {'name': 'Jeremy', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 15, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 4\n        {'name': 'Alan', 'busy': [datetime(2024, 7, 22, 13, 0), datetime(2024, 7, 22, 13, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)]},\n        {'name': 'Elizabeth', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 9, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)]},\n        {'name': 'Denise', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 10, 30), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 30), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 16, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        # Task 5\n        {'name': 'Mason', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 14, 30), datetime(2024, 7, 22, 15, 0)],\n         'busy': [datetime(2024, 7, 22, 16, 30), datetime(2024, 7, 22, 17, 0)]},\n        {'name': 'Bruce', 'busy': []},\n        {'name': 'Christopher', 'busy': [datetime(2024, 7, 22, 9, 30), datetime(2024, 7, 22, 10, 30)],\n         'busy': [datetime(2024, 7, 22, 11, 30), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 17, 0)]},\n        # Task 6\n        {'name': 'Anthony', 'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 15, 30)]},\n        {'name': 'Ronald', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 12, 30)],\n         'busy': [datetime(2024, 7, 22, 13, 30), datetime(2024, 7, 22, 14, 0)]},\n        {'name': 'Jonathan', 'busy': [datetime(2024, 7, 22, 9, 0), datetime(2024, 7, 22, 10, 0)],\n         'busy': [datetime(2024, 7, 22, 11, 0), datetime(2024, 7, 22, 11, 30)],\n         'busy': [datetime(2024, 7, 22, 12, 0), datetime(2024, 7, 22, 13, 0)],\n         'busy': [datetime(2024, 7, 22, 14, 0), datetime(2024, 7, 22, 14, 30)],\n         'busy': [datetime(2024, 7, 22, 15, 0), datetime(2024, 7, 22, 17, 0)]},\n    ]\n\n    print(find_meeting_time(start, end, participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_83"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    # Convert time strings to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    duration = timedelta(hours=int(duration.split(' ')[0]), minutes=int(duration.split(' ')[0].split('h')[1]))\n\n    # Find the earliest available time slot for each participant\n    earliest_time = datetime.max\n    for participant in participants:\n        participant_start_time = datetime.strptime(participant['start_time'], '%H:%M')\n        participant_end_time = datetime.strptime(participant['end_time'], '%H:%M')\n        participant_available_time = [start_time + timedelta(minutes=i*15) for i in range(int((start_time - participant_start_time).total_seconds() / 900) + 1, int((end_time - participant_end_time).total_seconds() / 900) + 1)]\n        for time in participant_available_time:\n            if time + duration <= end_time and time >= start_time and time < earliest_time:\n                earliest_time = time\n\n    # Find the latest available time slot for each participant\n    latest_time = datetime.min\n    for participant in participants:\n        participant_start_time = datetime.strptime(participant['start_time'], '%H:%M')\n        participant_end_time = datetime.strptime(participant['end_time'], '%H:%M')\n        participant_available_time = [start_time + timedelta(minutes=i*15) for i in range(int((start_time - participant_start_time).total_seconds() / 900) + 1, int((end_time - participant_end_time).total_seconds() / 900) + 1)]\n        for time in participant_available_time:\n            if time + duration <= end_time and time >= start_time and time > latest_time:\n                latest_time = time\n\n    # Find the meeting time that works for everyone\n    meeting_time = earliest_time\n    while meeting_time + duration <= latest_time:\n        works_for_everyone = True\n        for participant in participants:\n            participant_start_time = datetime.strptime(participant['start_time'], '%H:%M')\n            participant_end_time = datetime.strptime(participant['end_time'], '%H:%M')\n            if meeting_time + duration > participant_end_time or meeting_time < participant_start_time:\n                works_for_everyone = False\n                break\n        if works_for_everyone:\n            return meeting_time.strftime('%H:%M') + ':' + (meeting_time + duration).strftime('%H:%M')\n        meeting_time += timedelta(minutes=15)\n\n# Test the function\nparticipants = [\n    {'name': 'Roger','start_time': '09:00', 'end_time': '17:00'},\n    {'name': 'Karen','start_time': '10:00', 'end_time': '10:30'},\n    {'name': 'Karen','start_time': '11:30', 'end_time': '12:00'},\n    {'name': 'Karen','start_time': '12:30', 'end_time': '13:00'},\n    {'name': 'Karen','start_time': '14:00', 'end_time': '15:00'},\n    {'name': 'Karen','start_time': '15:30', 'end_time': '16:00'},\n    {'name': 'Dorothy','start_time': '09:00', 'end_time': '10:00'},\n    {'name': 'Dorothy','start_time': '10:30', 'end_time': '11:00'},\n    {'name': 'Dorothy','start_time': '11:30', 'end_time': '12:00'},\n    {'name': 'Dorothy','start_time': '12:30', 'end_time': '13:00'},\n    {'name': 'Dorothy','start_time': '14:00', 'end_time': '15:30'},\n    {'name': 'Dorothy','start_time': '16:00', 'end_time': '17:00'}\n]\nprint(find_meeting_time(participants, '09:00', '17:00', '30m'))\n\nparticipants = [\n    {'name': 'Douglas','start_time': '12:00', 'end_time': '12:30'},\n    {'name': 'Douglas','start_time': '15:00', 'end_time': '15:30'},\n    {'name': 'Lawrence','start_time': '10:30', 'end_time': '12:00'},\n    {'name': 'Lawrence','start_time': '13:00', 'end_time': '13:30'},\n    {'name': 'Lawrence','start_time': '14:00', 'end_time': '14:30'},\n    {'name': 'Lawrence','start_time': '15:30', 'end_time': '16:00'},\n    {'name': 'Isabella','start_time': '09:00', 'end_time': '12:30'},\n    {'name': 'Isabella','start_time': '13:30', 'end_time': '17:00'}\n]\nprint(find_meeting_time(participants, '09:00', '17:00', '30m'))\n\nparticipants = [\n    {'name': 'Joshua','start_time': '10:00', 'end_time': '10:30'},\n    {'name': 'Joshua','start_time': '12:00', 'end_time': '12:30'},\n    {'name': 'Joshua','start_time': '14:00', 'end_time': '14:30'},\n    {'name': 'Joshua','start_time': '15:00', 'end_time': '15:30'},\n    {'name': 'Jeremy','start_time': '09:30', 'end_time': '10:30'},\n    {'name': 'Jeremy','start_time': '12:00', 'end_time': '13:00'},\n    {'name': 'Jeremy','start_time': '13:30', 'end_time': '14:00'},\n    {'name': 'Jeremy','start_time': '14:30', 'end_time': '15:00'},\n    {'name': 'Jeremy','start_time': '15:30', 'end_time': '16:00'},\n    {'name': 'Jeremy','start_time': '16:30', 'end_time': '17:00'}\n]\nprint(find_meeting_time(participants, '09:00', '17:00', '1h'))\n\nparticipants = [\n    {'name': 'Alan','start_time': '13:00', 'end_time': '13:30'},\n    {'name': 'Alan','start_time': '14:00', 'end_time': '14:30'},\n    {'name': 'Elizabeth','start_time': '09:00', 'end_time': '09:30'},\n    {'name': 'Elizabeth','start_time': '11:00', 'end_time': '11:30'},\n    {'name': 'Denise','start_time': '09:00', 'end_time': '10:00'},\n    {'name': 'Denise','start_time': '10:30', 'end_time': '11:30'},\n    {'name': 'Denise','start_time': '12:30', 'end_time': '13:00'},\n    {'name': 'Denise','start_time': '13:30', 'end_time': '14:00'},\n    {'name': 'Denise','start_time': '14:30', 'end_time': '16:00'},\n    {'name': 'Denise','start_time': '16:30', 'end_time': '17:00'}\n]\nprint(find_meeting_time(participants, '09:00', '17:00', '30m'))\n\nparticipants = [\n    {'name': 'Mason','start_time': '09:30', 'end_time': '10:00'},\n    {'name': 'Mason','start_time': '11:00', 'end_time': '11:30'},\n    {'name': 'Mason','start_time': '14:30', 'end_time': '15:00'},\n    {'name': 'Mason','start_time': '16:30', 'end_time': '17:00'},\n    {'name': 'Bruce','start_time': '09:00', 'end_time': '17:00'},\n    {'name': 'Christopher','start_time': '09:30', 'end_time': '10:30'},\n    {'name': 'Christopher','start_time': '11:30', 'end_time': '12:30'},\n    {'name': 'Christopher','start_time': '15:00', 'end_time': '17:00'}\n]\nprint(find_meeting_time(participants, '09:00', '17:00', '30m'))\n\nparticipants = [\n    {'name': 'Kevin','start_time': '09:30', 'end_time': '10:00'},\n    {'name': 'Kevin','start_time': '10:30', 'end_time': '11:00'},\n    {'name': 'Kevin','start_time': '15:00', 'end_time': '16:00'},\n    {'name': 'Ryan','start_time': '10:30', 'end_time': '11:30'},\n    {'name': 'Ryan','start_time': '12:30', 'end_time': '13:00'},\n    {'name': 'Ryan','start_time': '13:30', 'end_time': '14:00'},\n    {'name': 'Eugene','start_time': '09:00', 'end_time': '09:30'},\n    {'name': 'Eugene','start_time': '10:00', 'end_time': '11:00'},\n    {'name': 'Eugene','start_time': '12:30', 'end_time': '17:00'}\n]\nprint(find_meeting_time(participants, '09:00', '17:00', '1h'))\n```",
            "count": "calendar_scheduling_example_84"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=30):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    # Task 1\n    participants = {\n        'Roger': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 2\n    participants = {\n        'Douglas': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 3\n    participants = {\n        'Joshua': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n    \n    # Task 4\n    participants = {\n        'Alan': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Alan': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 5\n    participants = {\n        'Mason': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Bruce': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 6\n    participants = {\n        'Kelly': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Julia': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Martha': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('11:00', '%H:%M')},\n        'Martha': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_85"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=30):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    # Task 1\n    participants = {\n        'Roger': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 2\n    participants = {\n        'Douglas': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 3\n    participants = {\n        'Joshua': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n    \n    # Task 4\n    participants = {\n        'Alan': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Alan': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 5\n    participants = {\n        'Mason': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Bruce': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 6\n    participants = {\n        'Samuel': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Samuel': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('16:30', '%H:%M')},\n        'Emma': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_86"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=30):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    # Task 1\n    participants = {\n        'Roger': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 2\n    participants = {\n        'Douglas': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 3\n    participants = {\n        'Joshua': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n    \n    # Task 4\n    participants = {\n        'Alan': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Alan': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 5\n    participants = {\n        'Mason': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Bruce': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 6\n    participants = {\n        'Brittany': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Brittany': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Wayne': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Wayne': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Wayne': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Charles': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('16:30', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_87"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "SyntaxError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration=30):\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, duration):\n            time = start_time.replace(hour=hour, minute=minute)\n            if all(time + timedelta(minutes=duration) <= participant['end_time'] and time >= participant['start_time'] for participant in participants.values()):\n                return f{{time.strftime('%H:%M'):time + timedelta(minutes=duration).strftime('%H:%M')}}\n    return None\n\ndef main():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    \n    # Task 1\n    participants = {\n        'Roger': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Karen': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Dorothy': {'start_time': datetime.strptime('16:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 2\n    participants = {\n        'Douglas': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Douglas': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Lawrence': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 3\n    participants = {\n        'Joshua': {'start_time': datetime.strptime('10:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Joshua': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('15:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('12:00', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('15:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Jeremy': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n    \n    # Task 4\n    participants = {\n        'Alan': {'start_time': datetime.strptime('13:00', '%H:%M'), 'end_time': datetime.strptime('13:30', '%H:%M')},\n        'Alan': {'start_time': datetime.strptime('14:00', '%H:%M'), 'end_time': datetime.strptime('14:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Elizabeth': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('10:30', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('16:00', '%H:%M')},\n        'Denise': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 5\n    participants = {\n        'Mason': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('11:00', '%H:%M'), 'end_time': datetime.strptime('11:30', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('15:00', '%H:%M')},\n        'Mason': {'start_time': datetime.strptime('16:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Bruce': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('09:30', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:30', '%H:%M')},\n        'Christopher': {'start_time': datetime.strptime('15:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants))\n    \n    # Task 6\n    participants = {\n        'Dennis': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n        'Joseph': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('09:30', '%H:%M')},\n        'Joseph': {'start_time': datetime.strptime('12:30', '%H:%M'), 'end_time': datetime.strptime('13:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('09:00', '%H:%M'), 'end_time': datetime.strptime('10:30', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('11:30', '%H:%M'), 'end_time': datetime.strptime('12:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('13:30', '%H:%M'), 'end_time': datetime.strptime('14:00', '%H:%M')},\n        'Isabella': {'start_time': datetime.strptime('14:30', '%H:%M'), 'end_time': datetime.strptime('17:00', '%H:%M')},\n    }\n    print(find_meeting_time(datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), participants, 60))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_88"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    meeting_duration = 30 if len(participants) == 3 else 60\n    meeting_start_time = start_time\n    while meeting_start_time < end_time:\n        is_valid_time = True\n        for participant in participants:\n            for time_slot in participant['schedule']:\n                if time_slot['start'] < meeting_start_time < time_slot['end'] or meeting_start_time + timedelta(minutes=meeting_duration) > time_slot['start'] and meeting_start_time + timedelta(minutes=meeting_duration) < time_slot['end']:\n                    is_valid_time = False\n                    break\n            if not is_valid_time:\n                break\n        if is_valid_time:\n            return meeting_start_time.strftime('%H:%M') + ':' + (meeting_start_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')\n        meeting_start_time += timedelta(minutes=1)\n    return None\n\ndef main():\n    tasks = [\n        {\n            'participants': ['Roger', 'Karen', 'Dorothy'],\n           'schedule': [\n                {'start': datetime(2024, 7, 29, 10, 0), 'end': datetime(2024, 7, 29, 10, 30)},\n                {'start': datetime(2024, 7, 29, 11, 30), 'end': datetime(2024, 7, 29, 12, 0)},\n                {'start': datetime(2024, 7, 29, 12, 30), 'end': datetime(2024, 7, 29, 13, 0)},\n                {'start': datetime(2024, 7, 29, 14, 0), 'end': datetime(2024, 7, 29, 15, 0)},\n                {'start': datetime(2024, 7, 29, 15, 30), 'end': datetime(2024, 7, 29, 16, 0)},\n            ],\n           'meeting_duration': 30,\n            'preferred_time': None,\n           'start_time': datetime(2024, 7, 29, 9, 0),\n            'end_time': datetime(2024, 7, 29, 17, 0),\n        },\n        {\n            'participants': ['Douglas', 'Lawrence', 'Isabella'],\n           'schedule': [\n                {'start': datetime(2024, 7, 29, 12, 0), 'end': datetime(2024, 7, 29, 12, 30)},\n                {'start': datetime(2024, 7, 29, 15, 0), 'end': datetime(2024, 7, 29, 15, 30)},\n            ],\n           'meeting_duration': 30,\n            'preferred_time': None,\n           'start_time': datetime(2024, 7, 29, 9, 0),\n            'end_time': datetime(2024, 7, 29, 17, 0),\n        },\n        {\n            'participants': ['Joshua', 'Denise', 'Jeremy'],\n           'schedule': [\n                {'start': datetime(2024, 7, 29, 10, 0), 'end': datetime(2024, 7, 29, 10, 30)},\n                {'start': datetime(2024, 7, 29, 12, 0), 'end': datetime(2024, 7, 29, 12, 30)},\n                {'start': datetime(2024, 7, 29, 14, 0), 'end': datetime(2024, 7, 29, 14, 30)},\n                {'start': datetime(2024, 7, 29, 15, 0), 'end': datetime(2024, 7, 29, 15, 30)},\n            ],\n           'meeting_duration': 60,\n            'preferred_time': None,\n           'start_time': datetime(2024, 7, 29, 9, 0),\n            'end_time': datetime(2024, 7, 29, 17, 0),\n        },\n        {\n            'participants': ['Alan', 'Elizabeth', 'Denise'],\n           'schedule': [\n                {'start': datetime(2024, 7, 29, 13, 0), 'end': datetime(2024, 7, 29, 13, 30)},\n                {'start': datetime(2024, 7, 29, 14, 0), 'end': datetime(2024, 7, 29, 14, 30)},\n            ],\n           'meeting_duration': 30,\n            'preferred_time': None,\n           'start_time': datetime(2024, 7, 29, 9, 0),\n            'end_time': datetime(2024, 7, 29, 17, 0),\n        },\n        {\n            'participants': ['Mason', 'Bruce', 'Christopher'],\n           'schedule': [\n                {'start': datetime(2024, 7, 29, 9, 30), 'end': datetime(2024, 7, 29, 10, 0)},\n                {'start': datetime(2024, 7, 29, 11, 0), 'end': datetime(2024, 7, 29, 11, 30)},\n                {'start': datetime(2024, 7, 29, 14, 30), 'end': datetime(2024, 7, 29, 15, 0)},\n                {'start': datetime(2024, 7, 29, 16, 30), 'end': datetime(2024, 7, 29, 17, 0)},\n            ],\n           'meeting_duration': 30,\n            'preferred_time': None,\n           'start_time': datetime(2024, 7, 29, 9, 0),\n            'end_time': datetime(2024, 7, 29, 17, 0),\n        },\n        {\n            'participants': ['Michelle', 'Andrea', 'Douglas'],\n           'schedule': [\n                {'start': datetime(2024, 7, 29, 9, 0), 'end': datetime(2024, 7, 29, 9, 30)},\n                {'start': datetime(2024, 7, 29, 11, 30), 'end': datetime(2024, 7, 29, 12, 30)},\n                {'start': datetime(2024, 7, 29, 13, 30), 'end': datetime(2024, 7, 29, 14, 0)},\n                {'start': datetime(2024, 7, 29, 14, 30), 'end': datetime(2024, 7, 29, 15, 0)},\n                {'start': datetime(2024, 7, 29, 16, 0), 'end': datetime(2024, 7, 29, 16, 30)},\n            ],\n           'meeting_duration': 60,\n            'preferred_time': None,\n           'start_time': datetime(2024, 7, 29, 9, 0),\n            'end_time': datetime(2024, 7, 29, 17, 0),\n        },\n    ]\n\n    for task in tasks:\n        print(find_meeting_time(task['start_time'], task['end_time'], [{'name': p,'schedule': [s]} for p, s in task['participants'].items()]))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_89"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    roger_schedule = [datetime.strptime(time, '%H:%M') for time in roger_schedule]\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in karen_schedule]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in dorothy_schedule]\n\n    # Sort schedules by start time\n    roger_schedule.sort()\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(roger_schedule) - 1):\n        start = roger_schedule[i]\n        end = roger_schedule[i + 1]\n        if not (start < karen_schedule[0] and karen_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(karen_schedule) - 1):\n        start = karen_schedule[i]\n        end = karen_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(dorothy_schedule) - 1):\n        start = dorothy_schedule[i]\n        end = dorothy_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < karen_schedule[0] and karen_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\n# Task 1\nroger_schedule = []\nkaren_schedule = ['10:00', '11:30', '12:30', '14:00']\ndorothy_schedule = ['09:00', '10:30', '11:30', '12:30', '14:00', '16:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference))\n\n# Task 2\ndouglas_schedule = ['12:00', '15:00']\nlawrence_schedule = ['10:30', '13:00', '14:00', '15:30']\nisabella_schedule = ['09:00', '13:30', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration, preference))\n\n# Task 3\njoshua_schedule = ['10:00', '12:00', '14:00', '15:00']\ndenise_schedule = []\njeremy_schedule = ['09:30', '12:00', '13:30', '14:30', '15:30', '16:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration, preference))\n\n# Task 4\nalan_schedule = ['13:00', '14:00']\nelizabeth_schedule = ['09:00', '11:00']\ndenise_schedule = ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration, preference))\n\n# Task 5\nmason_schedule = ['09:30', '11:00', '14:30', '16:30']\nbruce_schedule = []\nchristopher_schedule = ['09:30', '10:30', '11:30', '15:00', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration, preference))\n\n# Task 6\nadam_schedule = ['09:30', '10:30', '11:30', '16:30']\nwillie_schedule = ['09:00', '15:30']\ngloria_schedule = ['09:30', '13:00', '15:30']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(adam_schedule, willie_schedule, gloria_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_90"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    roger_schedule = [datetime.strptime(time, '%H:%M') for time in roger_schedule]\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in karen_schedule]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in dorothy_schedule]\n\n    # Sort schedules by start time\n    roger_schedule.sort()\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(roger_schedule) - 1):\n        start = roger_schedule[i]\n        end = roger_schedule[i + 1]\n        if not (start < karen_schedule[0] and karen_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(karen_schedule) - 1):\n        start = karen_schedule[i]\n        end = karen_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(dorothy_schedule) - 1):\n        start = dorothy_schedule[i]\n        end = dorothy_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < karen_schedule[0] and karen_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\n# Task 1\nroger_schedule = []\nkaren_schedule = ['10:00', '11:30', '12:30', '14:00']\ndorothy_schedule = ['09:00', '10:30', '11:30', '12:30', '14:00', '16:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference))\n\n# Task 2\ndouglas_schedule = ['12:00', '15:00']\nlawrence_schedule = ['10:30', '13:00', '14:00', '15:30']\nisabella_schedule = ['09:00', '13:30', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration, preference))\n\n# Task 3\njoshua_schedule = ['10:00', '12:00', '14:00', '15:00']\ndenise_schedule = []\njeremy_schedule = ['09:30', '12:00', '13:30', '14:30', '15:30', '16:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration, preference))\n\n# Task 4\nalan_schedule = ['13:00', '14:00']\nelizabeth_schedule = ['09:00', '11:00']\ndenise_schedule = ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration, preference))\n\n# Task 5\nmason_schedule = ['09:30', '11:00', '14:30', '16:30']\nbruce_schedule = []\nchristopher_schedule = ['09:30', '10:30', '11:30', '15:00', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration, preference))\n\n# Task 6\ndanielle_schedule = ['09:00', '10:30', '14:30', '15:30', '16:30']\nbruce_schedule = ['11:00', '12:30', '14:00', '15:30']\neric_schedule = ['09:00', '09:30', '10:00', '11:30', '13:00', '14:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    roger_schedule = [datetime.strptime(time, '%H:%M') for time in roger_schedule]\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in karen_schedule]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in dorothy_schedule]\n\n    # Sort schedules by start time\n    roger_schedule.sort()\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(roger_schedule) - 1):\n        start = roger_schedule[i]\n        end = roger_schedule[i + 1]\n        if not (start < karen_schedule[0] and karen_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(karen_schedule) - 1):\n        start = karen_schedule[i]\n        end = karen_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(dorothy_schedule) - 1):\n        start = dorothy_schedule[i]\n        end = dorothy_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < karen_schedule[0] and karen_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\n# Task 1\nroger_schedule = []\nkaren_schedule = ['10:00', '11:30', '12:30', '14:00']\ndorothy_schedule = ['09:00', '10:30', '11:30', '12:30', '14:00', '16:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference))\n\n# Task 2\ndouglas_schedule = ['12:00', '15:00']\nlawrence_schedule = ['10:30', '13:00', '14:00', '15:30']\nisabella_schedule = ['09:00', '13:30', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration, preference))\n\n# Task 3\njoshua_schedule = ['10:00', '12:00', '14:00', '15:00']\ndenise_schedule = []\njeremy_schedule = ['09:30', '12:00', '13:30', '14:30', '15:30', '16:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration, preference))\n\n# Task 4\nalan_schedule = ['13:00', '14:00']\nelizabeth_schedule = ['09:00', '11:00']\ndenise_schedule = ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration, preference))\n\n# Task 5\nmason_schedule = ['09:30', '11:00', '14:30', '16:30']\nbruce_schedule = []\nchristopher_schedule = ['09:30', '10:30', '11:30', '15:00', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration, preference))\n\n# Task 6\njacqueline_schedule = ['09:30', '16:30']\nhenry_schedule = []\nwilliam_schedule = ['09:30', '10:30', '12:30', '15:00', '15:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_92"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference):\n    # Convert schedules to datetime objects\n    roger_schedule = [datetime.strptime(time, '%H:%M') for time in roger_schedule]\n    karen_schedule = [datetime.strptime(time, '%H:%M') for time in karen_schedule]\n    dorothy_schedule = [datetime.strptime(time, '%H:%M') for time in dorothy_schedule]\n\n    # Sort schedules by start time\n    roger_schedule.sort()\n    karen_schedule.sort()\n    dorothy_schedule.sort()\n\n    # Find available time slots\n    available_slots = []\n    for i in range(len(roger_schedule) - 1):\n        start = roger_schedule[i]\n        end = roger_schedule[i + 1]\n        if not (start < karen_schedule[0] and karen_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(karen_schedule) - 1):\n        start = karen_schedule[i]\n        end = karen_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < dorothy_schedule[0] and dorothy_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    for i in range(len(dorothy_schedule) - 1):\n        start = dorothy_schedule[i]\n        end = dorothy_schedule[i + 1]\n        if not (start < roger_schedule[0] and roger_schedule[-1] < end) and not (start < karen_schedule[0] and karen_schedule[-1] < end):\n            available_slots.append((start, end))\n\n    # Find the first available slot that is long enough for the meeting\n    for slot in available_slots:\n        start = slot[0]\n        end = slot[1]\n        if end - start >= timedelta(hours=meeting_duration):\n            if preference:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + start, start.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1).replace(hour=0, minute=0, second=0, microsecond=0) + end)\n\n    return None\n\n# Task 1\nroger_schedule = []\nkaren_schedule = ['10:00', '11:30', '12:30', '14:00']\ndorothy_schedule = ['09:00', '10:30', '11:30', '12:30', '14:00', '16:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, meeting_duration, preference))\n\n# Task 2\ndouglas_schedule = ['12:00', '15:00']\nlawrence_schedule = ['10:30', '13:00', '14:00', '15:30']\nisabella_schedule = ['09:00', '13:30', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(douglas_schedule, lawrence_schedule, isabella_schedule, meeting_duration, preference))\n\n# Task 3\njoshua_schedule = ['10:00', '12:00', '14:00', '15:00']\ndenise_schedule = []\njeremy_schedule = ['09:30', '12:00', '13:30', '14:30', '15:30', '16:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(joshua_schedule, denise_schedule, jeremy_schedule, meeting_duration, preference))\n\n# Task 4\nalan_schedule = ['13:00', '14:00']\nelizabeth_schedule = ['09:00', '11:00']\ndenise_schedule = ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(alan_schedule, elizabeth_schedule, denise_schedule, meeting_duration, preference))\n\n# Task 5\nmason_schedule = ['09:30', '11:00', '14:30', '16:30']\nbruce_schedule = []\nchristopher_schedule = ['09:30', '10:30', '11:30', '15:00', '17:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(mason_schedule, bruce_schedule, christopher_schedule, meeting_duration, preference))\n\n# Task 6\njacqueline_schedule = ['09:30', '16:30']\nhenry_schedule = []\nwilliam_schedule = ['09:30', '10:30', '12:30', '15:00', '15:30']\nmeeting_duration = 1\npreference = True\nprint(find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, meeting_duration, preference))\n\n# Task 7\naustin_schedule = ['10:30', '13:30']\ndanielle_schedule = ['09:00', '11:00', '13:00', '15:30']\ncharles_schedule = ['09:00', '11:30', '12:00', '12:30', '13:00']\nmeeting_duration = 0.5\npreference = True\nprint(find_meeting_time(austin_schedule, danielle_schedule, charles_schedule, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_93"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Convert time strings to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n\n    # Initialize earliest available time\n    earliest_time = start_time\n\n    # Loop through each participant's schedule\n    for participant in participants:\n        for time in participant['schedule']:\n            start = datetime.strptime(time[0], '%H:%M')\n            end = datetime.strptime(time[1], '%H:%M')\n\n            # Find earliest time that works for all participants\n            while earliest_time < end_time:\n                works_for_all = True\n                for p in participants:\n                    for t in p['schedule']:\n                        if start <= earliest_time < end:\n                            works_for_all = False\n                            break\n                    if not works_for_all:\n                        break\n\n                if works_for_all:\n                    return earliest_time.strftime('%H:%M') + ':' + (earliest_time + timedelta(hours=1)).strftime('%H:%M')\n\n                earliest_time += timedelta(minutes=30)\n\n    return None\n\n# Define participants and their schedules\nparticipants = [\n    {'name': 'Roger','schedule': [['09:00', '17:00']]},\n    {'name': 'Karen','schedule': [['10:00', '10:30'], ['11:30', '12:00'], ['12:30', '13:00'], ['14:00', '15:00'], ['15:30', '16:00']]},\n    {'name': 'Dorothy','schedule': [['09:00', '10:00'], ['10:30', '11:00'], ['11:30', '12:00'], ['12:30', '13:00'], ['14:00', '15:30'], ['16:00', '17:00']]}\n]\n\nprint('{%s}' % find_meeting_time('09:00', '17:00', participants))  # Output: {11:00:11:30}\n\nparticipants = [\n    {'name': 'Douglas','schedule': [['12:00', '12:30'], ['15:00', '15:30']]},\n    {'name': 'Lawrence','schedule': [['10:30', '12:00'], ['13:00', '13:30'], ['14:00', '14:30'], ['15:30', '16:00']]},\n    {'name': 'Isabella','schedule': [['09:00', '12:30'], ['13:30', '17:00']]}\n]\n\nprint('{%s}' % find_meeting_time('09:00', '17:00', participants))  # Output: {12:30:13:00}\n\nparticipants = [\n    {'name': 'Joshua','schedule': [['10:00', '10:30'], ['12:00', '12:30'], ['14:00', '14:30'], ['15:00', '15:30']]},\n    {'name': 'Denise','schedule': [['09:00', '17:00']]},\n    {'name': 'Jeremy','schedule': [['09:30', '10:30'], ['12:00', '13:00'], ['13:30', '14:00'], ['14:30', '15:00'], ['15:30', '16:00'], ['16:30', '17:00']]}\n]\n\nprint('{%s}' % find_meeting_time('09:00', '17:00', participants))  # Output: {10:30:11:30}\n\nparticipants = [\n    {'name': 'Alan','schedule': [['13:00', '13:30'], ['14:00', '14:30']]},\n    {'name': 'Elizabeth','schedule': [['09:00', '09:30'], ['11:00', '11:30']]},\n    {'name': 'Denise','schedule': [['09:00', '10:00'], ['10:30', '11:30'], ['12:30', '13:00'], ['13:30', '14:00'], ['14:30', '16:00'], ['16:30', '17:00']]}\n]\n\nprint('{%s}' % find_meeting_time('09:00', '17:00', participants))  # Output: {10:00:10:30}\n\nparticipants = [\n    {'name': 'Mason','schedule': [['09:30', '10:00'], ['11:00', '11:30'], ['14:30', '15:00'], ['16:30', '17:00']]},\n    {'name': 'Bruce','schedule': [['09:00', '17:00']]},\n    {'name': 'Christopher','schedule': [['09:30', '10:30'], ['11:30', '12:30'], ['15:00', '17:00']]}\n]\n\nprint('{%s}' % find_meeting_time('09:00', '17:00', participants))  # Output: {12:30:13:00}\n\nparticipants = [\n    {'name': 'Nicholas','schedule': [['09:00', '17:00']]},\n    {'name': 'Elizabeth','schedule': [['09:30', '10:00'], ['11:30', '12:00'], ['13:30', '14:30'], ['15:00', '15:30'], ['16:30', '17:00']]},\n    {'name': 'Sandra','schedule': [['09:00', '09:30'], ['10:00', '10:30'], ['11:30', '13:30'], ['15:30', '16:30']]}\n]\n\nprint('{%s}' % find_meeting_time('09:00', '17:00', participants))  # Output: {13:00:13:30}\n```",
            "count": "calendar_scheduling_example_94"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, preferences=None):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the participant has a preference for the meeting time\n                    if preferences and participant['name'] in preferences and preferences[participant['name']] <= meeting_time:\n                        # Check if the meeting time is available for all participants\n                        if all(meeting_time < end_time for participant in participants):\n                            # Return the meeting time\n                            return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=30)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Roger': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Karen': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Dorothy': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:30'}, {'start_time': '16:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Douglas': {'blocked_times': [{'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Lawrence': {'blocked_times': [{'start_time': '10:30', 'end_time': '12:00'}, {'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Isabella': {'blocked_times': [{'start_time': '9:00', 'end_time': '12:30'}, {'start_time': '13:30', 'end_time': '17:00'}], 'earliest_available_time': '12:30', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Joshua': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Jeremy': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Alan': {'blocked_times': [{'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Elizabeth': {'blocked_times': [{'start_time': '9:00', 'end_time': '9:30'}, {'start_time': '11:00', 'end_time': '11:30'}], 'earliest_available_time': '9:30', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Mason': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Bruce': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Christopher': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule, preferences={'Mason': datetime.strptime('12:30', '%H:%M')})\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Jennifer': {'blocked_times': [{'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '16:00', 'end_time': '16:30'}], 'earliest_available_time': '12:30', 'latest_available_time': '17:00'},\n        'Gary': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Frances': {'blocked_times': [{'start_time': '9:00', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '13:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_95"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the meeting time is available for all participants\n                    if all(meeting_time < end_time for participant in participants):\n                        # Return the meeting time\n                        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=30)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Roger': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Karen': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Dorothy': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:30'}, {'start_time': '16:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Douglas': {'blocked_times': [{'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Lawrence': {'blocked_times': [{'start_time': '10:30', 'end_time': '12:00'}, {'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Isabella': {'blocked_times': [{'start_time': '9:00', 'end_time': '12:30'}, {'start_time': '13:30', 'end_time': '17:00'}], 'earliest_available_time': '12:30', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Joshua': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Jeremy': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Alan': {'blocked_times': [{'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Elizabeth': {'blocked_times': [{'start_time': '9:00', 'end_time': '9:30'}, {'start_time': '11:00', 'end_time': '11:30'}], 'earliest_available_time': '9:30', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Mason': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Bruce': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Christopher': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Christopher': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '13:00'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Robert': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '13:30', 'end_time': '14:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Wayne': {'blocked_times': [{'start_time': '10:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_96"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the meeting time is available for all participants\n                    if all(meeting_time < end_time for participant in participants):\n                        # Check if the participant has a preference for the meeting time\n                        if participant['name'] == 'Joseph' and meeting_time < datetime.strptime('14:30', '%H:%M'):\n                            # Move to the next time slot\n                            meeting_time += timedelta(minutes=30)\n                            continue\n\n                        # Return the meeting time\n                        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=60)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Roger': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Karen': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Dorothy': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:30'}, {'start_time': '16:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Douglas': {'blocked_times': [{'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Lawrence': {'blocked_times': [{'start_time': '10:30', 'end_time': '12:00'}, {'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Isabella': {'blocked_times': [{'start_time': '9:00', 'end_time': '12:30'}, {'start_time': '13:30', 'end_time': '17:00'}], 'earliest_available_time': '12:30', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Joshua': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Jeremy': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Alan': {'blocked_times': [{'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Elizabeth': {'blocked_times': [{'start_time': '9:00', 'end_time': '9:30'}, {'start_time': '11:00', 'end_time': '11:30'}], 'earliest_available_time': '9:30', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Mason': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Bruce': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Christopher': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Joseph': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:30', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Kyle': {'blocked_times': [{'start_time': '12:30', 'end_time': '13:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Joan': {'blocked_times': [{'start_time': '9:00', 'end_time': '9:30'}, {'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_97"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants):\n    # Sort participants by their earliest available time\n    participants.sort(key=lambda x: x['earliest_available_time'])\n\n    # Initialize the meeting time to the start time\n    meeting_time = start_time\n\n    # Iterate over each participant\n    for participant in participants:\n        # Find the earliest available time slot for the participant\n        earliest_available_time = participant['earliest_available_time']\n        latest_available_time = participant['latest_available_time']\n\n        # Check if the meeting time is within the participant's available time\n        while meeting_time < end_time:\n            # Check if the meeting time is within the participant's available time\n            if earliest_available_time <= meeting_time < latest_available_time:\n                # Check if the meeting time is not blocked by the participant\n                if not any(blocked_time['start_time'] <= meeting_time < blocked_time['end_time'] for blocked_time in participant['blocked_times']):\n                    # Check if the meeting time is available for all participants\n                    if all(meeting_time < end_time for participant in participants):\n                        # Check if the participant has a preference for the meeting time\n                        if participant['name'] == 'Juan' and meeting_time >= datetime.strptime('16:00', '%H:%M'):\n                            # Move to the next time slot\n                            meeting_time += timedelta(minutes=30)\n                            continue\n\n                        # Return the meeting time\n                        return f\"{meeting_time.strftime('%H:%M')}:{(meeting_time + timedelta(minutes=30)).strftime('%H:%M')}\"\n\n            # Move to the next time slot\n            meeting_time += timedelta(minutes=30)\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\"\n\ndef parse_schedule(schedule):\n    # Parse the schedule into a list of dictionaries\n    parsed_schedule = []\n    for participant, times in schedule.items():\n        parsed_schedule.append({\n            'name': participant,\n            'blocked_times': [{'start_time': datetime.strptime(time['start_time'], '%H:%M'), 'end_time': datetime.strptime(time['end_time'], '%H:%M')} for time in times['blocked_times']],\n            'earliest_available_time': datetime.strptime(times['earliest_available_time'], '%H:%M'),\n            'latest_available_time': datetime.strptime(times['latest_available_time'], '%H:%M')\n        })\n    return parsed_schedule\n\ndef main():\n    # Define the schedule\n    schedule = {\n        'Roger': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Karen': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Dorothy': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:00'}, {'start_time': '11:30', 'end_time': '12:00'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '14:00', 'end_time': '15:30'}, {'start_time': '16:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Douglas': {'blocked_times': [{'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Lawrence': {'blocked_times': [{'start_time': '10:30', 'end_time': '12:00'}, {'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Isabella': {'blocked_times': [{'start_time': '9:00', 'end_time': '12:30'}, {'start_time': '13:30', 'end_time': '17:00'}], 'earliest_available_time': '12:30', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Joshua': {'blocked_times': [{'start_time': '10:00', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '14:00', 'end_time': '14:30'}, {'start_time': '15:00', 'end_time': '15:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Jeremy': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '15:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Alan': {'blocked_times': [{'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '14:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Elizabeth': {'blocked_times': [{'start_time': '9:00', 'end_time': '9:30'}, {'start_time': '11:00', 'end_time': '11:30'}], 'earliest_available_time': '9:30', 'latest_available_time': '17:00'},\n        'Denise': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:00'}, {'start_time': '10:30', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '13:00'}, {'start_time': '13:30', 'end_time': '14:00'}, {'start_time': '14:30', 'end_time': '16:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Mason': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:00'}, {'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '14:30', 'end_time': '15:00'}, {'start_time': '16:30', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Bruce': {'blocked_times': [], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Christopher': {'blocked_times': [{'start_time': '9:30', 'end_time': '10:30'}, {'start_time': '11:30', 'end_time': '12:30'}, {'start_time': '15:00', 'end_time': '17:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\n    # Define the schedule\n    schedule = {\n        'Juan': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:30'}, {'start_time': '15:30', 'end_time': '16:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '16:00'},\n        'Marilyn': {'blocked_times': [{'start_time': '11:00', 'end_time': '11:30'}, {'start_time': '12:30', 'end_time': '13:00'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'},\n        'Ronald': {'blocked_times': [{'start_time': '9:00', 'end_time': '10:30'}, {'start_time': '12:00', 'end_time': '12:30'}, {'start_time': '13:00', 'end_time': '13:30'}, {'start_time': '14:00', 'end_time': '16:30'}], 'earliest_available_time': '9:00', 'latest_available_time': '17:00'}\n    }\n\n    # Parse the schedule\n    parsed_schedule = parse_schedule(schedule)\n\n    # Find the meeting time\n    meeting_time = find_meeting_time(datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'), parsed_schedule)\n\n    # Print the meeting time\n    print(meeting_time)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, duration, start_time, end_time, preferences=None):\n    # Convert time strings to datetime objects\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    duration = timedelta(hours=duration)\n\n    # Initialize meeting time to None\n    meeting_time = None\n\n    # Iterate over possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60, 30):\n            meeting_time_candidate = datetime(year=2024, month=1, day=1, hour=hour, minute=minute)\n            if meeting_time_candidate + duration <= end_time and all(\n                not participant['busy'] or participant['busy'] < meeting_time_candidate or participant['busy'] > meeting_time_candidate + duration\n                for participant in participants\n                if 'busy' in participant\n            ):\n                if meeting_time is None or meeting_time_candidate < meeting_time:\n                    meeting_time = meeting_time_candidate\n\n    # Check if a meeting time was found\n    if meeting_time is None:\n        raise ValueError(\"No meeting time found\")\n\n    # Format meeting time as string\n    meeting_time_str = meeting_time.strftime('%H:%M') + ':' + (meeting_time + duration).strftime('%H:%M')\n\n    return '{' + meeting_time_str + '}'\n\n# Example usage\nparticipants = [\n    {'name': 'Roger', 'busy': None},\n    {'name': 'Karen', 'busy': ['10:00', '10:30', '11:30', '12:00', '12:30', '14:00', '15:00', '15:30']},\n    {'name': 'Dorothy', 'busy': ['9:00', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '14:00', '15:30', '16:00', '17:00']},\n]\nprint(schedule_meeting(participants, 0.5, '9:00', '17:00'))\n\nparticipants = [\n    {'name': 'Douglas', 'busy': ['12:00', '12:30', '15:00', '15:30']},\n    {'name': 'Lawrence', 'busy': ['10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:30', '16:00']},\n    {'name': 'Isabella', 'busy': ['9:00', '12:30', '13:30', '17:00']},\n]\nprint(schedule_meeting(participants, 0.5, '9:00', '17:00'))\n\nparticipants = [\n    {'name': 'Joshua', 'busy': ['10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30']},\n    {'name': 'Denise', 'busy': None},\n    {'name': 'Jeremy', 'busy': ['9:30', '10:30', '12:00', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00']},\n]\nprint(schedule_meeting(participants, 1, '9:00', '17:00'))\n\nparticipants = [\n    {'name': 'Alan', 'busy': ['13:00', '13:30', '14:00', '14:30']},\n    {'name': 'Elizabeth', 'busy': ['9:00', '9:30', '11:00', '11:30']},\n    {'name': 'Denise', 'busy': ['9:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00', '14:30', '16:00', '16:30', '17:00']},\n]\nprint(schedule_meeting(participants, 0.5, '9:00', '17:00'))\n\nparticipants = [\n    {'name': 'Mason', 'busy': ['9:30', '10:00', '11:00', '11:30', '14:30', '15:00', '16:30', '17:00']},\n    {'name': 'Bruce', 'busy': None},\n    {'name': 'Christopher', 'busy': ['9:30', '10:30', '11:30', '12:30', '15:00', '17:00']},\n]\nprint(schedule_meeting(participants, 0.5, '9:00', '17:00', preferences={'Mason': ['12:30']}))\n\nparticipants = [\n    {'name': 'Stephanie', 'busy': ['9:00', '9:30', '13:30', '14:00']},\n    {'name': 'Mark', 'busy': None},\n    {'name': 'Scott', 'busy': ['9:00', '10:00', '11:00', '12:30', '14:30', '15:00', '16:00', '17:00']},\n]\nprint(schedule_meeting(participants, 1, '9:00', '17:00', preferences={'Mark': ['15:00']}))\n```",
            "count": "calendar_scheduling_example_99"
        }
    ]
}