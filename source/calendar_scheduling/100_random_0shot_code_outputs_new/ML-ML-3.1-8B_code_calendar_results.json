{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, schedules):\n    end_time = start_time + timedelta(hours=meeting_duration)\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'James': ['11:30', '12:00', '14:30', '15:00'],\n    'John': ['9:30', '11:00', '11:30', '12:00', '12:30', '13:30', '14:30', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 1\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```\n\nThis script first defines a function `find_available_time` to find all available time slots between the start and end time, excluding the time slots in the schedules. Then it defines another function `schedule_meeting` to find the best available time slot for the meeting. The script then defines the schedules, meeting duration, and start time, and finally finds and prints the available time.",
            "count": "calendar_scheduling_example_543"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, schedules, constraints):\n    end_time = start_time + timedelta(hours=meeting_duration)\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Albert cannot meet after 11:00\n        if best_start_time.hour > 11:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Deborah': [],\n    'Albert': ['09:00', '10:00', '10:30', '12:00', '15:00', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, schedules, {'Albert': lambda x: x > 11})\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```\n\nThis script first defines a function `find_available_time` to find all available time slots between the start and end time, excluding the time slots in the schedules. Then it defines another function `schedule_meeting` to find the best available time slot for the meeting. The script then defines the schedules, meeting duration, and start time, and finally finds and prints the available time. The constraint that Albert cannot meet after 11:00 is added to the `schedule_meeting` function.",
            "count": "calendar_scheduling_example_544"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "13:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, schedules):\n    end_time = start_time + timedelta(hours=meeting_duration)\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Doris': ['09:00', '11:00', '13:30', '14:00', '16:00', '16:30'],\n    'Theresa': ['10:00', '12:00'],\n    'Christian': [],\n    'Terry': ['09:30', '10:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '17:00'],\n    'Carolyn': ['09:00', '10:30', '11:00', '11:30', '12:00', '13:00', '13:30', '14:30', '15:00', '17:00'],\n    'Kyle': ['09:00', '09:30', '11:30', '12:00', '12:30', '14:30', '17:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_398"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules, constraints):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Harold would like to avoid more meetings on Monday\n        if best_start_time.strftime('%A') == 'Monday':\n            return None, None, None\n        \n        # Check the constraint that Harold would like to avoid meetings on Tuesday before 14:30\n        if best_start_time.strftime('%A') == 'Tuesday' and best_start_time.hour < 14:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Jeffrey': [],\n    'Harold': [['09:00', '10:00'], ['10:30', '17:00'], ['09:00', '09:30'], ['10:30', '11:30'], ['12:30', '13:30'], ['14:30', '15:30'], ['16:00', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=2)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules, {'Harold': lambda x: x!= 'Monday' and x.hour >= 14})\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_625"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, schedules, constraints):\n    available_times = find_available_time(start_time, start_time + timedelta(hours=17), schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Jack would like to avoid more meetings on Monday after 12:30\n        if best_start_time.strftime('%A') == 'Monday' and best_start_time.hour > 12:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Jack': ['09:30', '10:30', '11:00', '11:30', '12:30', '13:00', '14:00', '14:30', '16:00', '16:30'],\n    'Charlotte': ['09:30', '10:00', '10:30', '12:00', '12:30', '13:30', '14:00', '16:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, schedules, {'Jack': lambda x: x.hour <= 12})\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_502"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "0:00",
                "end_time": "0:30"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = min(available_times)\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Nancy': [['10:00', '10:30'], ['11:30', '12:30'], ['13:30', '14:00'], ['14:30', '15:30'], ['16:00', '17:00'], ['09:30', '10:30'], ['11:00', '11:30'], ['12:00', '12:30'], ['13:00', '13:30'], ['15:30', '16:00'], ['10:00', '11:30'], ['13:30', '16:00']],\n    'Jose': [['09:00', '17:00'], ['09:00', '17:00'], ['09:00', '09:30'], ['10:00', '12:30'], ['13:30', '14:30'], ['15:00', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=3)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_798"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "0:00",
                "end_time": "0:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Wednesday':  # Cheryl cannot meet on Wednesday\n            available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = min(available_times)\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Cheryl': [['09:00', '09:30'], ['11:30', '13:00'], ['15:30', '16:00'], ['15:00', '15:30']],\n    'Kyle': [['09:00', '17:00'], ['09:30', '17:00'], ['09:00', '09:30'], ['10:00', '13:00'], ['13:30', '14:00'], ['14:30', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=3)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_710"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Pamela do not want to meet on Monday after 14:30\n        if best_start_time.strftime('%A') == 'Monday' and best_start_time.hour > 14:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Anthony': ['09:30', '10:00', '12:00', '13:00', '16:00', '16:30'],\n    'Pamela': ['09:30', '10:00', '16:30', '17:00'],\n    'Zachary': ['09:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:30', '15:00', '16:00', '17:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 1\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "18:00",
                "end_time": "18:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Tyler': [],\n    'Kelly': [],\n    'Stephanie': ['11:00', '11:30', '14:30', '15:00'],\n    'Hannah': [],\n    'Joe': ['09:00', '09:30', '10:00', '12:00', '12:30', '13:00', '14:00', '17:00'],\n    'Diana': ['09:00', '10:30', '11:30', '12:00', '13:00', '14:00', '14:30', '15:30', '16:00', '17:00'],\n    'Deborah': ['09:00', '10:00', '10:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:30', '16:00', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_493"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Nicole would rather not meet on Monday before 16:00\n        if best_start_time.strftime('%A') == 'Monday' and best_start_time.hour < 16:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Judy': [],\n    'Nicole': ['09:00', '10:00', '10:30', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_548"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "17:00",
                "end_time": "17:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Megan': ['09:00', '09:30', '10:00', '11:00', '12:00', '12:30'],\n    'Christine': ['09:00', '09:30', '11:30', '12:00', '13:00', '14:00', '15:30', '16:30'],\n    'Gabriel': [],\n    'Sara': ['11:30', '12:00', '14:30', '15:00'],\n    'Bruce': ['09:30', '10:00', '10:30', '12:00', '12:30', '14:00', '14:30', '15:00', '15:30', '16:30'],\n    'Kathryn': ['10:00', '15:30', '16:00', '16:30'],\n    'Billy': ['09:00', '09:30', '11:00', '11:30', '12:00', '14:00', '14:30', '15:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_446"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Monday':  # Pamela would like to avoid more meetings on Monday\n            if day.strftime('%A')!= 'Tuesday':  # Pamela would like to avoid more meetings on Tuesday\n                if day.strftime('%A')!= 'Wednesday' or day.hour >= 16:  # Pamela would like to avoid meetings on Wednesday before 16:00\n                    available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Amy': [['11:00', '11:30'], ['13:30', '14:00']],\n    'Pamela': [['09:00', '10:30'], ['11:00', '16:30'], ['09:00', '09:30'], ['10:00', '17:00'], ['09:00', '09:30'], ['10:00', '11:00'], ['11:30', '13:30'], ['14:30', '15:00'], ['16:00', '16:30']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=3)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_786"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Megan would like to avoid more meetings on Monday before 10:00\n        if best_start_time.strftime('%A') == 'Monday' and best_start_time.hour < 10:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Kimberly': ['10:00', '10:30', '11:00', '12:00', '16:00', '16:30'],\n    'Megan': [],\n    'Marie': ['10:00', '11:00', '11:30', '15:00', '16:00', '16:30'],\n    'Diana': ['09:30', '10:00', '10:30', '14:30', '15:30', '17:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_185"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Monday' or day.hour >= 16:  # Tyler would like to avoid more meetings on Monday before 16:00\n            if day.strftime('%A')!= 'Tuesday':  # Tyler is busy on Tuesday\n                available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Tyler': [['09:00', '09:30'], ['14:30', '15:00'], ['10:30', '11:00'], ['12:30', '13:00'], ['13:30', '14:00'], ['16:30', '17:00']],\n    'Ruth': [['09:00', '10:00'], ['10:30', '12:00'], ['12:30', '14:30'], ['15:00', '16:00'], ['16:30', '17:00'], ['09:00', '17:00'], ['09:00', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=3)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_724"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Thursday",
                "start_time": "14:30",
                "end_time": "15:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Monday' and day.strftime('%A')!= 'Tuesday' and day.strftime('%A')!= 'Wednesday':  # Ruth is busy on Monday, Tuesday, Wednesday\n            if day.strftime('%A')!= 'Thursday' or day.hour >= 11:  # Julie would like to avoid more meetings on Thursday before 11:30\n                available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Julie': [],\n    'Ruth': [['09:00', '17:00'], ['09:00', '17:00'], ['09:00', '17:00'], ['09:00', '11:00'], ['11:30', '14:30'], ['15:00', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=4)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_819"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Gregory': ['09:00', '10:00', '10:30', '11:30', '12:30', '13:00', '13:30', '14:00'],\n    'Natalie': [],\n    'Christine': ['09:00', '11:30', '13:30', '17:00'],\n    'Vincent': ['09:00', '09:30', '10:30', '12:00', '12:30', '14:00', '14:30', '17:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_111"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "18:00",
                "end_time": "19:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "15:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Julie': ['09:00', '09:30', '11:00', '11:30', '12:00', '12:30', '13:30', '14:00', '16:00', '17:00'],\n    'Sean': ['09:00', '09:30', '13:00', '13:30', '15:00', '15:30', '16:00', '16:30'],\n    'Lori': ['10:00', '10:30', '11:00', '13:00', '15:30', '17:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 1\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Roger would rather not meet on Monday before 12:30\n        if best_start_time.strftime('%A') == 'Monday' and best_start_time.hour < 12:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Daniel': [],\n    'Kathleen': ['14:30', '15:30'],\n    'Carolyn': ['12:00', '12:30', '13:00', '13:30'],\n    'Roger': [],\n    'Cheryl': ['09:00', '09:30', '10:00', '11:30', '12:30', '13:30', '14:00', '17:00'],\n    'Virginia': ['09:30', '11:30', '12:00', '12:30', '13:00', '13:30', '14:30', '15:30', '16:00', '17:00'],\n    'Angela': ['09:30', '10:00', '10:30', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_476"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "17:00",
                "end_time": "17:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Wayne would like to avoid more meetings on Monday before 14:00\n        if best_start_time.strftime('%A') == 'Monday' and best_start_time.hour < 14:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Wayne': [],\n    'Melissa': ['10:00', '11:00', '12:30', '14:00', '15:00', '15:30'],\n    'Catherine': [],\n    'Gregory': ['12:30', '13:00', '15:30', '16:00'],\n    'Victoria': ['09:00', '09:30', '10:30', '11:30', '13:00', '14:00', '14:30', '15:00', '15:30', '16:30'],\n    'Thomas': ['10:00', '12:00', '12:30', '13:00', '14:30', '16:00'],\n    'Jennifer': ['09:00', '09:30', '10:00', '10:30', '11:00', '13:00', '14:30', '15:00', '15:30', '16:00', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_458"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "11:00",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Wednesday' and day.strftime('%A')!= 'Thursday':  # Betty can not meet on Wednesday. Thursday\n            available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Betty': [['10:00', '10:30'], ['11:30', '12:30'], ['16:00', '16:30'], ['09:30', '10:00'], ['10:30', '11:00'], ['12:00', '12:30'], ['13:30', '15:00'], ['16:30', '17:00'], ['13:30', '14:00'], ['14:30', '15:00'], ['09:00', '10:00'], ['11:30', '12:00'], ['12:30', '13:00'], ['14:30', '15:00']],\n    'Megan': [['09:00', '17:00'], ['09:00', '09:30'], ['10:00', '10:30'], ['12:00', '14:00'], ['15:00', '15:30'], ['16:00', '16:30'], ['09:30', '10:30'], ['11:00', '11:30'], ['12:30', '13:00'], ['13:30', '14:30'], ['15:30', '17:00'], ['09:00', '10:30'], ['11:30', '14:00'], ['14:30', '15:00'], ['15:30', '16:30'], ['09:00', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 1\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=5)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_964"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Monday' or day.hour >= 14:  # Margaret do not want to meet on Monday. Tuesday before 14:30\n            if day.strftime('%A')!= 'Tuesday' or day.hour >= 14:  # Margaret do not want to meet on Tuesday before 14:30\n                available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Margaret': [['10:30', '11:00'], ['11:30', '12:00'], ['13:00', '13:30'], ['15:00', '17:00'], ['12:00', '12:30']],\n    'Alexis': [['09:30', '11:30'], ['12:30', '13:00'], ['14:00', '17:00'], ['09:00', '09:30'], ['10:00', '10:30'], ['14:00', '16:30']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=2)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_629"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "0:00",
                "end_time": "0:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Monday':  # Robert would like to avoid more meetings on Monday\n            available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = min(available_times)\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Robert': [['11:00', '11:30'], ['14:00', '14:30'], ['15:30', '16:00'], ['10:30', '11:00'], ['15:00', '15:30'], ['10:00', '11:00'], ['11:30', '12:00'], ['12:30', '13:00'], ['13:30', '14:00'], ['15:00', '15:30'], ['16:00', '16:30']],\n    'Ralph': [['10:00', '13:30'], ['14:00', '14:30'], ['15:00', '17:00'], ['09:00', '09:30'], ['10:00', '10:30'], ['11:00', '11:30'], ['12:00', '13:00'], ['14:00', '15:30'], ['16:00', '17:00'], ['10:30', '11:00'], ['11:30', '12:00'], ['13:00', '14:30'], ['16:30', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=3)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_702"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        \n        # Check the constraint that Denise do not want to meet on Monday after 12:30\n        if best_start_time.strftime('%A') == 'Monday' and best_start_time.hour > 12:\n            return None, None, None\n        \n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Ryan': ['09:00', '09:30', '12:30', '13:00'],\n    'Ruth': [],\n    'Denise': ['09:30', '10:30', '12:00', '13:00', '14:30', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 1\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "18:00",
                "end_time": "18:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Walter': [],\n    'Cynthia': ['09:00', '09:30', '10:00', '10:30', '13:30', '14:30', '15:00', '16:00'],\n    'Ann': ['10:00', '11:00', '13:00', '13:30', '14:00', '15:00', '16:00', '16:30'],\n    'Catherine': ['09:00', '11:30', '12:30', '13:30', '14:30', '17:00'],\n    'Kyle': ['09:00', '09:30', '10:00', '11:30', '12:00', '12:30', '13:00', '14:30', '15:00', '16:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_244"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "18:00",
                "end_time": "18:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Gregory': ['09:00', '09:30', '11:30', '12:00'],\n    'Jonathan': ['09:00', '09:30', '12:00', '12:30', '13:00', '13:30', '15:00', '16:00', '16:30', '17:00'],\n    'Barbara': ['10:00', '10:30', '13:30', '14:00'],\n    'Jesse': ['10:00', '11:00', '12:30', '14:30'],\n    'Alan': ['09:30', '11:00', '11:30', '12:30', '13:00', '15:30', '16:00', '17:00'],\n    'Nicole': ['09:00', '10:30', '11:30', '12:00', '12:30', '13:30', '14:00', '17:00'],\n    'Catherine': ['09:00', '10:30', '12:00', '13:30', '15:00', '15:30', '16:00', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_473"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "0:00",
                "end_time": "0:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = min(available_times)\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Lisa': ['09:00', '09:30', '10:30', '11:00', '14:00', '16:00'],\n    'Anthony': ['09:00', '09:30', '11:00', '11:30', '12:30', '13:30', '14:00', '15:00', '15:30', '16:00', '16:30', '17:00']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, start_time + timedelta(hours=17), schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_583"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Tuesday' or day.hour < 16:  # Lawrence can not meet on Tuesday after 16:30\n            if day.strftime('%A')!= 'Monday':  # Jesse has meetings on Monday\n                available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Jesse': [['13:30', '14:00'], ['14:30', '15:00'], ['09:00', '09:30'], ['13:00', '13:30'], ['14:00', '15:00']],\n    'Lawrence': [['09:00', '17:00'], ['09:30', '10:30'], ['11:30', '12:30'], ['13:00', '13:30'], ['14:30', '15:00'], ['15:30', '16:30']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=2)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_652"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Thursday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Monday' and day.strftime('%A')!= 'Tuesday' and day.strftime('%A')!= 'Thursday' or day.hour >= 15:  # Betty can not meet on Monday. Tuesday. Thursday before 15:00\n            if day.strftime('%A')!= 'Wednesday':  # Scott would like to avoid more meetings on Wednesday\n                available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Betty': [['10:00', '10:30'], ['13:30', '14:00'], ['15:00', '15:30'], ['16:00', '16:30'], ['09:00', '09:30'], ['11:30', '12:00'], ['12:30', '13:00'], ['13:30', '14:00'], ['16:30', '17:00'], ['09:30', '10:30'], ['13:00', '13:30'], ['14:00', '14:30'], ['09:30', '10:00'], ['11:30', '12:00'], ['14:00', '14:30'], ['15:00', '15:30'], ['16:30', '17:00']],\n    'Scott': [['09:30', '15:00'], ['15:30', '16:00'], ['16:30', '17:00'], ['09:00', '09:30'], ['10:00', '11:00'], ['11:30', '12:00'], ['12:30', '13:30'], ['14:00', '15:00'], ['16:00', '16:30'], ['09:30', '12:30'], ['13:00', '13:30'], ['14:00', '14:30'], ['15:00', '15:30'], ['16:00', '16:30'], ['09:00', '09:30'], ['10:00', '10:30'], ['11:00', '12:00'], ['12:30', '13:00'], ['15:00', '16:00'], ['16:30', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 0.5\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=4)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_867"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, end_time, schedules):\n    available_times = []\n    for day in [start_time + timedelta(days=i) for i in range((end_time - start_time).days + 1)]:\n        if day.strftime('%A')!= 'Monday':  # Jesse has blocked their calendar on Monday\n            available_times.extend(find_available_time(day, day + timedelta(hours=17), schedules))\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'Patricia': [['10:00', '10:30'], ['11:30', '12:00'], ['13:00', '13:30'], ['14:30', '15:30'], ['16:00', '16:30'], ['10:00', '10:30'], ['11:00', '12:00'], ['14:00', '16:00'], ['16:30', '17:00']],\n    'Jesse': [['09:00', '17:00'], ['11:00', '11:30'], ['12:00', '12:30'], ['13:00', '14:00'], ['14:30', '15:00'], ['15:30', '17:00']]\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 1\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\nend_time = start_time + timedelta(days=2)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, end_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_626"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            meeting_time = start_time.replace(hour=hour, minute=minute)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), start_time.strftime(\"%A\")\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", start_time.strftime(\"%A\")\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Evelyn\", \"busy\": []},\n        {\"name\": \"Joshua\", \"busy\": [\"11:00\", \"12:30\", \"13:30\", \"14:30\", \"16:30\", \"17:00\"]},\n        {\"name\": \"Kevin\", \"busy\": []},\n        {\"name\": \"Gerald\", \"busy\": []},\n        {\"name\": \"Jerry\", \"busy\": [\"09:00\", \"09:30\", \"10:30\", \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\"]},\n        {\"name\": \"Jesse\", \"busy\": [\"09:00\", \"09:30\", \"10:30\", \"12:00\", \"12:30\", \"14:30\", \"15:00\", \"15:30\", \"16:30\"]},\n        {\"name\": \"Kenneth\", \"busy\": [\"10:30\", \"12:30\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\"]},\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 60\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nWhen you run this script, it will output the proposed meeting time and day. The meeting time is in the format HH:MM and the end time is also in the format HH:MM. The day of the week is also printed out.",
            "count": "calendar_scheduling_example_479"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting days\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n        # Iterate over possible meeting times\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n                if day == \"Monday\":\n                    meeting_time = meeting_time.replace(day=29)\n                elif day == \"Tuesday\":\n                    meeting_time = meeting_time.replace(day=30)\n                elif day == \"Wednesday\":\n                    meeting_time = meeting_time.replace(day=31)\n                elif day == \"Thursday\":\n                    meeting_time = meeting_time.replace(day=1)\n                if meeting_time + meeting_duration <= end_time:\n                    # Check if the meeting time works for all participants\n                    if all(\n                        not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                        for participant in participants\n                        for busy in participant.get(\"busy\", [])\n                    ):\n                        return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), day\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the days\n    participants = [\n        {\"name\": \"Mary\", \"busy\": [\n            [\"Tuesday\", \"10:00\", \"10:30\"],\n            [\"Tuesday\", \"15:30\", \"16:00\"],\n            [\"Wednesday\", \"9:30\", \"10:00\"],\n            [\"Wednesday\", \"15:00\", \"15:30\"],\n            [\"Thursday\", \"9:00\", \"10:00\"],\n            [\"Thursday\", \"10:30\", \"11:30\"]\n        ]},\n        {\"name\": \"Alexis\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"12:00\"],\n            [\"Monday\", \"12:30\", \"16:30\"],\n            [\"Tuesday\", \"9:00\", \"10:00\"],\n            [\"Tuesday\", \"10:30\", \"11:30\"],\n            [\"Tuesday\", \"12:00\", \"15:30\"],\n            [\"Tuesday\", \"16:00\", \"17:00\"],\n            [\"Wednesday\", \"9:00\", \"11:00\"],\n            [\"Wednesday\", \"11:30\", \"17:00\"],\n            [\"Thursday\", \"10:00\", \"12:00\"],\n            [\"Thursday\", \"14:00\", \"14:30\"],\n            [\"Thursday\", \"15:30\", \"16:00\"],\n            [\"Thursday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_812"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Friday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting days\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        # Iterate over possible meeting times\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n                if day == \"Monday\":\n                    meeting_time = meeting_time.replace(day=29)\n                elif day == \"Tuesday\":\n                    meeting_time = meeting_time.replace(day=30)\n                elif day == \"Wednesday\":\n                    meeting_time = meeting_time.replace(day=31)\n                elif day == \"Thursday\":\n                    meeting_time = meeting_time.replace(day=1)\n                elif day == \"Friday\":\n                    meeting_time = meeting_time.replace(day=2)\n                if meeting_time + meeting_duration <= end_time:\n                    # Check if the meeting time works for all participants\n                    if all(\n                        not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                        for participant in participants\n                        for busy in participant.get(\"busy\", [])\n                    ):\n                        # Check if Eric wants to avoid Wednesday\n                        if day!= \"Wednesday\":\n                            return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), day\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the days\n    participants = [\n        {\"name\": \"Eugene\", \"busy\": [\n            [\"Monday\", \"11:00\", \"12:00\"],\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"14:30\", \"15:00\"],\n            [\"Monday\", \"16:00\", \"16:30\"],\n            [\"Wednesday\", \"9:00\", \"9:30\"],\n            [\"Wednesday\", \"11:00\", \"11:30\"],\n            [\"Wednesday\", \"12:00\", \"12:30\"],\n            [\"Wednesday\", \"13:30\", \"15:00\"],\n            [\"Thursday\", \"9:30\", \"10:00\"],\n            [\"Thursday\", \"11:00\", \"12:30\"],\n            [\"Friday\", \"10:30\", \"11:00\"],\n            [\"Friday\", \"12:00\", \"12:30\"],\n            [\"Friday\", \"13:00\", \"13:30\"]\n        ]},\n        {\"name\": \"Eric\", \"busy\": [\n            [\"Monday\", \"9:00\", \"17:00\"],\n            [\"Tuesday\", \"9:00\", \"17:00\"],\n            [\"Wednesday\", \"9:00\", \"11:30\"],\n            [\"Wednesday\", \"12:00\", \"14:00\"],\n            [\"Wednesday\", \"14:30\", \"16:30\"],\n            [\"Thursday\", \"9:00\", \"17:00\"],\n            [\"Friday\", \"9:00\", \"11:00\"],\n            [\"Friday\", \"11:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_938"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "14:00",
                "end_time": "15:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting days\n    for day in [\"Monday\", \"Tuesday\"]:\n        # Iterate over possible meeting times\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n                if day == \"Monday\":\n                    meeting_time = meeting_time.replace(day=29)\n                elif day == \"Tuesday\":\n                    meeting_time = meeting_time.replace(day=30)\n                if meeting_time + meeting_duration <= end_time:\n                    # Check if the meeting time works for all participants\n                    if all(\n                        not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                        for participant in participants\n                        for busy in participant.get(\"busy\", [])\n                    ):\n                        # Check if Russell wants to avoid meeting on Tuesday before 13:30\n                        if day == \"Tuesday\" and meeting_time < datetime(int(datetime.now().year), 1, 30, 13, 0, 0):\n                            continue\n                        return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), day\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the days\n    participants = [\n        {\"name\": \"Russell\", \"busy\": [\n            [\"Monday\", \"10:30\", \"11:00\"],\n            [\"Tuesday\", \"13:00\", \"13:30\"]\n        ]},\n        {\"name\": \"Alexander\", \"busy\": [\n            [\"Monday\", \"9:00\", \"11:30\"],\n            [\"Monday\", \"12:00\", \"14:30\"],\n            [\"Monday\", \"15:00\", \"17:00\"],\n            [\"Tuesday\", \"9:00\", \"10:00\"],\n            [\"Tuesday\", \"13:00\", \"14:00\"],\n            [\"Tuesday\", \"15:00\", \"15:30\"],\n            [\"Tuesday\", \"16:00\", \"16:30\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 60\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_678"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    # Check if Anna wants to avoid meeting on Monday before 14:30\n                    if meeting_time < datetime(int(datetime.now().year), 1, 29, 14, 30, 0):\n                        continue\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Adam\", \"busy\": [\n            [\"Monday\", \"14:00\", \"15:00\"]\n        ]},\n        {\"name\": \"John\", \"busy\": [\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"15:30\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Stephanie\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"11:00\"],\n            [\"Monday\", \"11:30\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Anna\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:00\"],\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"13:00\", \"15:30\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_116"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Andrew\", \"busy\": []},\n        {\"name\": \"Grace\", \"busy\": []},\n        {\"name\": \"Samuel\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:30\"],\n            [\"Monday\", \"11:30\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:00\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting days\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Iterate over possible meeting times\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n                if day == \"Monday\":\n                    meeting_time = meeting_time.replace(day=29)\n                elif day == \"Tuesday\":\n                    meeting_time = meeting_time.replace(day=30)\n                elif day == \"Wednesday\":\n                    meeting_time = meeting_time.replace(day=31)\n                if meeting_time + meeting_duration <= end_time:\n                    # Check if the meeting time works for all participants\n                    if all(\n                        not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                        for participant in participants\n                        for busy in participant.get(\"busy\", [])\n                    ):\n                        # Check if Ryan can't meet on Wednesday\n                        if day == \"Wednesday\":\n                            return \"No meeting time found\", \"No meeting time found\", day\n                        # Check if Adam wants to avoid more meetings on Monday before 14:30\n                        if day == \"Monday\" and meeting_time < datetime(int(datetime.now().year), 1, 29, 14, 30, 0):\n                            continue\n                        # Check if Adam wants to avoid more meetings on Tuesday\n                        if day == \"Tuesday\" and meeting_time < datetime(int(datetime.now().year), 1, 30, 10, 30, 0):\n                            continue\n                        return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), day\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the days\n    participants = [\n        {\"name\": \"Ryan\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:00\"],\n            [\"Monday\", \"11:00\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"15:30\", \"16:00\"],\n            [\"Tuesday\", \"11:30\", \"12:30\"],\n            [\"Tuesday\", \"15:30\", \"16:00\"],\n            [\"Wednesday\", \"12:00\", \"13:00\"],\n            [\"Wednesday\", \"15:30\", \"16:00\"],\n            [\"Wednesday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Adam\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:30\"],\n            [\"Monday\", \"11:00\", \"13:30\"],\n            [\"Monday\", \"14:00\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"],\n            [\"Tuesday\", \"9:00\", \"10:00\"],\n            [\"Tuesday\", \"10:30\", \"15:30\"],\n            [\"Tuesday\", \"16:00\", \"17:00\"],\n            [\"Wednesday\", \"9:00\", \"9:30\"],\n            [\"Wednesday\", \"10:00\", \"11:00\"],\n            [\"Wednesday\", \"11:30\", \"14:30\"],\n            [\"Wednesday\", \"15:00\", \"15:30\"],\n            [\"Wednesday\", \"16:00\", \"16:30\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_707"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Andrea\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:30\"],\n            [\"Monday\", \"13:30\", \"14:30\"]\n        ]},\n        {\"name\": \"Ruth\", \"busy\": [\n            [\"Monday\", \"12:30\", \"13:00\"],\n            [\"Monday\", \"15:00\", \"15:30\"]\n        ]},\n        {\"name\": \"Steven\", \"busy\": [\n            [\"Monday\", \"10:00\", \"10:30\"],\n            [\"Monday\", \"11:00\", \"11:30\"],\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"15:00\", \"16:00\"]\n        ]},\n        {\"name\": \"Grace\", \"busy\": []},\n        {\"name\": \"Kyle\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:30\", \"12:00\"],\n            [\"Monday\", \"12:30\", \"13:00\"],\n            [\"Monday\", \"13:30\", \"15:00\"],\n            [\"Monday\", \"15:30\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Elijah\", \"busy\": [\n            [\"Monday\", \"9:00\", \"11:00\"],\n            [\"Monday\", \"11:30\", \"13:00\"],\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"15:30\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Lori\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:00\", \"11:30\"],\n            [\"Monday\", \"12:00\", \"13:30\"],\n            [\"Monday\", \"14:00\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_457"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting days\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Iterate over possible meeting times\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n                if day == \"Monday\":\n                    meeting_time = meeting_time.replace(day=29)\n                elif day == \"Tuesday\":\n                    meeting_time = meeting_time.replace(day=30)\n                elif day == \"Wednesday\":\n                    meeting_time = meeting_time.replace(day=31)\n                if meeting_time + meeting_duration <= end_time:\n                    # Check if the meeting time works for all participants\n                    if all(\n                        not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                        for participant in participants\n                        for busy in participant.get(\"busy\", [])\n                    ):\n                        return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), day\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the days\n    participants = [\n        {\"name\": \"Patrick\", \"busy\": []},\n        {\"name\": \"Roy\", \"busy\": [\n            [\"Monday\", \"10:00\", \"11:30\"],\n            [\"Monday\", \"12:00\", \"13:00\"],\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"15:00\", \"17:00\"],\n            [\"Tuesday\", \"10:30\", \"11:30\"],\n            [\"Tuesday\", \"12:00\", \"14:30\"],\n            [\"Tuesday\", \"15:00\", \"15:30\"],\n            [\"Tuesday\", \"16:00\", \"17:00\"],\n            [\"Wednesday\", \"9:30\", \"11:30\"],\n            [\"Wednesday\", \"12:30\", \"14:00\"],\n            [\"Wednesday\", \"14:30\", \"15:30\"],\n            [\"Wednesday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 60\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_773"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    # Check if Helen wants to avoid meeting on Monday after 13:30\n                    if meeting_time > datetime(int(datetime.now().year), 1, 29, 13, 30, 0):\n                        continue\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Margaret\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"11:00\"],\n            [\"Monday\", \"11:30\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"15:00\", \"15:30\"]\n        ]},\n        {\"name\": \"Donna\", \"busy\": [\n            [\"Monday\", \"14:30\", \"15:00\"],\n            [\"Monday\", \"16:00\", \"16:30\"]\n        ]},\n        {\"name\": \"Helen\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:00\", \"11:30\"],\n            [\"Monday\", \"13:00\", \"14:00\"],\n            [\"Monday\", \"14:30\", \"15:00\"],\n            [\"Monday\", \"15:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    # Check if Margaret wants to avoid meeting on Monday before 14:30\n                    if meeting_time < datetime(int(datetime.now().year), 1, 29, 14, 30, 0):\n                        continue\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Shirley\", \"busy\": [\n            [\"Monday\", \"10:30\", \"11:00\"],\n            [\"Monday\", \"12:00\", \"12:30\"]\n        ]},\n        {\"name\": \"Jacob\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:00\", \"10:30\"],\n            [\"Monday\", \"11:00\", \"11:30\"],\n            [\"Monday\", \"12:30\", \"13:30\"],\n            [\"Monday\", \"14:30\", \"15:00\"]\n        ]},\n        {\"name\": \"Stephen\", \"busy\": [\n            [\"Monday\", \"11:30\", \"12:00\"],\n            [\"Monday\", \"12:30\", \"13:00\"]\n        ]},\n        {\"name\": \"Margaret\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:30\", \"12:30\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"15:00\", \"15:30\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Mason\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"11:00\"],\n            [\"Monday\", \"11:30\", \"12:30\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_206"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Stephanie\", \"busy\": [\n            [\"Monday\", \"10:00\", \"10:30\"],\n            [\"Monday\", \"16:00\", \"16:30\"]\n        ]},\n        {\"name\": \"Cheryl\", \"busy\": [\n            [\"Monday\", \"10:00\", \"10:30\"],\n            [\"Monday\", \"11:30\", \"12:00\"],\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Bradley\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"11:30\"],\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"14:30\", \"15:00\"],\n            [\"Monday\", \"15:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Steven\", \"busy\": [\n            [\"Monday\", \"9:00\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 60\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_114"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Michael\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:30\"],\n            [\"Monday\", \"15:00\", \"15:30\"],\n            [\"Monday\", \"16:00\", \"16:30\"]\n        ]},\n        {\"name\": \"Eric\", \"busy\": []},\n        {\"name\": \"Arthur\", \"busy\": [\n            [\"Monday\", \"9:00\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"15:00\"],\n            [\"Monday\", \"15:30\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    # Check if Janice wants to avoid meeting on Monday after 13:00\n                    if meeting_time > datetime(int(datetime.now().year), 1, 29, 13, 0, 0):\n                        continue\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Christine\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:30\"],\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:30\", \"15:00\"],\n            [\"Monday\", \"16:00\", \"16:30\"]\n        ]},\n        {\"name\": \"Janice\", \"busy\": []},\n        {\"name\": \"Bobby\", \"busy\": [\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"14:30\", \"15:00\"]\n        ]},\n        {\"name\": \"Elizabeth\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"11:30\", \"13:00\"],\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"15:00\", \"15:30\"],\n            [\"Monday\", \"16:00\", \"17:00\"]\n        ]},\n        {\"name\": \"Tyler\", \"busy\": [\n            [\"Monday\", \"9:00\", \"11:00\"],\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"15:30\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Edward\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:00\", \"11:00\"],\n            [\"Monday\", \"11:30\", \"14:00\"],\n            [\"Monday\", \"14:30\", \"15:30\"],\n            [\"Monday\", \"16:00\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_304"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Judy\", \"busy\": [\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"16:00\", \"16:30\"]\n        ]},\n        {\"name\": \"Olivia\", \"busy\": [\n            [\"Monday\", \"10:00\", \"10:30\"],\n            [\"Monday\", \"12:00\", \"13:00\"],\n            [\"Monday\", \"14:00\", \"14:30\"]\n        ]},\n        {\"name\": \"Eric\", \"busy\": []},\n        {\"name\": \"Jacqueline\", \"busy\": [\n            [\"Monday\", \"10:00\", \"10:30\"],\n            [\"Monday\", \"15:00\", \"15:30\"]\n        ]},\n        {\"name\": \"Laura\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:30\", \"15:00\"],\n            [\"Monday\", \"15:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Tyler\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:00\"],\n            [\"Monday\", \"11:00\", \"11:30\"],\n            [\"Monday\", \"12:30\", \"13:00\"],\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"15:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Lisa\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:30\"],\n            [\"Monday\", \"11:00\", \"11:30\"],\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"16:00\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_429"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "13:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting days\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Iterate over possible meeting times\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n                if day == \"Monday\":\n                    meeting_time = meeting_time.replace(day=29)\n                elif day == \"Tuesday\":\n                    meeting_time = meeting_time.replace(day=30)\n                elif day == \"Wednesday\":\n                    meeting_time = meeting_time.replace(day=31)\n                if meeting_time + meeting_duration <= end_time:\n                    # Check if the meeting time works for all participants\n                    if all(\n                        not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                        for participant in participants\n                        for busy in participant.get(\"busy\", [])\n                    ):\n                        # Check if John wants to avoid more meetings on Monday after 14:30\n                        if day == \"Monday\" and meeting_time > datetime(int(datetime.now().year), 1, 29, 14, 30, 0):\n                            continue\n                        # Check if John wants to avoid more meetings on Tuesday\n                        if day == \"Tuesday\" and meeting_time > datetime(int(datetime.now().year), 1, 30, 10, 30, 0):\n                            continue\n                        # Check if John wants to avoid more meetings on Wednesday\n                        if day == \"Wednesday\" and meeting_time > datetime(int(datetime.now().year), 1, 31, 10, 30, 0):\n                            continue\n                        return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), day\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the days\n    participants = [\n        {\"name\": \"John\", \"busy\": []},\n        {\"name\": \"Jennifer\", \"busy\": [\n            [\"Monday\", \"9:00\", \"11:00\"],\n            [\"Monday\", \"11:30\", \"13:00\"],\n            [\"Monday\", \"13:30\", \"14:30\"],\n            [\"Monday\", \"15:00\", \"17:00\"],\n            [\"Tuesday\", \"9:00\", \"11:30\"],\n            [\"Tuesday\", \"12:00\", \"17:00\"],\n            [\"Wednesday\", \"9:00\", \"11:30\"],\n            [\"Wednesday\", \"12:00\", \"12:30\"],\n            [\"Wednesday\", \"13:00\", \"14:00\"],\n            [\"Wednesday\", \"14:30\", \"16:00\"],\n            [\"Wednesday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_776"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Jacob\", \"busy\": [\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"14:30\", \"15:00\"]\n        ]},\n        {\"name\": \"Diana\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:00\"],\n            [\"Monday\", \"11:30\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"16:00\", \"16:30\"]\n        ]},\n        {\"name\": \"Adam\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:30\"],\n            [\"Monday\", \"11:00\", \"12:30\"],\n            [\"Monday\", \"15:30\", \"16:00\"]\n        ]},\n        {\"name\": \"Angela\", \"busy\": [\n            [\"Monday\", \"9:30\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"15:30\"],\n            [\"Monday\", \"16:00\", \"16:30\"]\n        ]},\n        {\"name\": \"Dennis\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:30\", \"11:30\"],\n            [\"Monday\", \"13:00\", \"15:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_246"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Danielle\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:00\"],\n            [\"Monday\", \"10:30\", \"11:00\"],\n            [\"Monday\", \"14:30\", \"15:00\"],\n            [\"Monday\", \"15:30\", \"16:00\"],\n            [\"Monday\", \"16:30\", \"17:00\"]\n        ]},\n        {\"name\": \"Bruce\", \"busy\": [\n            [\"Monday\", \"11:00\", \"11:30\"],\n            [\"Monday\", \"12:30\", \"13:00\"],\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"15:30\", \"16:00\"]\n        ]},\n        {\"name\": \"Eric\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:00\", \"11:00\"],\n            [\"Monday\", \"11:30\", \"13:00\"],\n            [\"Monday\", \"14:30\", \"15:30\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 60\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting times\n    for hour in range(9, 17):\n        for minute in range(0, 60):\n            meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n            meeting_time = meeting_time.replace(day=29)\n            if meeting_time + meeting_duration <= end_time:\n                # Check if the meeting time works for all participants\n                if all(\n                    not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                    for participant in participants\n                    for busy in participant.get(\"busy\", [])\n                ):\n                    # Check if Jose wants to avoid meeting on Monday after 15:30\n                    if meeting_time > datetime(int(datetime.now().year), 1, 29, 15, 30, 0):\n                        continue\n                    return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the day\n    participants = [\n        {\"name\": \"Jose\", \"busy\": [\n            [\"Monday\", \"11:00\", \"11:30\"],\n            [\"Monday\", \"12:30\", \"13:00\"]\n        ]},\n        {\"name\": \"Keith\", \"busy\": [\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"15:00\", \"15:30\"]\n        ]},\n        {\"name\": \"Logan\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:00\"],\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"15:00\", \"15:30\"]\n        ]},\n        {\"name\": \"Megan\", \"busy\": [\n            [\"Monday\", \"9:00\", \"10:30\"],\n            [\"Monday\", \"11:00\", \"12:00\"],\n            [\"Monday\", \"13:00\", \"13:30\"],\n            [\"Monday\", \"14:30\", \"16:30\"]\n        ]},\n        {\"name\": \"Gary\", \"busy\": [\n            [\"Monday\", \"9:00\", \"9:30\"],\n            [\"Monday\", \"10:00\", \"10:30\"],\n            [\"Monday\", \"11:30\", \"13:00\"],\n            [\"Monday\", \"13:30\", \"14:00\"],\n            [\"Monday\", \"14:30\", \"16:30\"]\n        ]},\n        {\"name\": \"Bobby\", \"busy\": [\n            [\"Monday\", \"11:00\", \"11:30\"],\n            [\"Monday\", \"12:00\", \"12:30\"],\n            [\"Monday\", \"13:00\", \"16:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 30\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_325"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(daniel_schedule, bradley_schedule, meeting_duration, preferences):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    for day in days:\n        if day not in preferences:\n            continue\n\n        daniel_busy = [start for start, end in daniel_schedule if start.date() == datetime.strptime(day, \"%A\").date()]\n        bradley_busy = [start for start, end in bradley_schedule if start.date() == datetime.strptime(day, \"%A\").date()]\n\n        start_time = datetime.strptime(day + \" 09:00\", \"%A %H:%M\")\n        end_time = datetime.strptime(day + \" 17:00\", \"%A %H:%M\")\n\n        while start_time < end_time:\n            if start_time not in daniel_busy and start_time not in bradley_busy:\n                end_time = start_time + timedelta(minutes=meeting_duration)\n                if end_time not in daniel_busy and end_time not in bradley_busy:\n                    return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n            start_time += timedelta(minutes=30)\n\n    return \"No available time found\"\n\ndaniel_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 17:00\", \"%A %H:%M\")),\n]\n\nbradley_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 16:30\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\n\npreferences = {\n    \"Daniel\": [\"Wednesday\", \"Thursday\"],\n    \"Bradley\": [\"Monday\", \"Tuesday before 12:00\", \"Friday\"]\n}\n\nprint(find_meeting_time(daniel_schedule, bradley_schedule, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_904"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day):\n    for start in range(9, 17, 30):\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nschedules = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\n\nprint(find_meeting_time(schedules, meeting_duration, day))\n```",
            "count": "calendar_scheduling_example_113"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day):\n    for start in range(9, 17, 30):\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nschedules = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\n\nprint(find_meeting_time(schedules, meeting_duration, day))\n```",
            "count": "calendar_scheduling_example_266"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day, preferences):\n    for start in range(9, 17, 30):\n        if start > 9:  # Frank does not want to meet after 9:30\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nschedules = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n]\n\nschedules += [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\npreferences = {\n    \"Frank\": [\"after 9:30\"]\n}\n\nprint(find_meeting_time(schedules, meeting_duration, day, preferences))\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days, preferences):\n    for day in days:\n        for start in range(9, 17, 30):\n            if day == \"Monday\" and start > 14:  # Doris does not want to meet on Monday after 14:00\n                continue\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\njean_schedule = [\n    (datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n]\n\ndoris_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\ndays = [\"Monday\", \"Tuesday\"]\npreferences = {\n    \"Doris\": [\"after 14:00 on Monday\"]\n}\n\nprint(find_meeting_time(jean_schedule + doris_schedule, meeting_duration, days, preferences))\n```",
            "count": "calendar_scheduling_example_669"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days):\n    earliest_start = None\n    for day in days:\n        for start in range(9, 17, 30):\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                if earliest_start is None or start_time < earliest_start:\n                    earliest_start = start_time\n    if earliest_start is not None:\n        end_time = earliest_start + timedelta(minutes=meeting_duration)\n        return f\"{earliest_start.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {earliest_start.strftime('%A')}\"\n    return \"No available time found\"\n\nnicole_schedule = [\n    (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 16:00\", \"%A %H:%M\")),\n]\n\ndaniel_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 16:30\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 60\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nprint(find_meeting_time(nicole_schedule + daniel_schedule, meeting_duration, days))\n```",
            "count": "calendar_scheduling_example_975"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days, constraints):\n    earliest_start = None\n    for day in days:\n        if day == \"Tuesday\" and \"Arthur\" in constraints:  # Arthur cannot meet on Tuesday\n            continue\n        for start in range(9, 17, 30):\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                if earliest_start is None or start_time < earliest_start:\n                    earliest_start = start_time\n    if earliest_start is not None:\n        end_time = earliest_start + timedelta(minutes=meeting_duration)\n        return f\"{earliest_start.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {earliest_start.strftime('%A')}\"\n    return \"No available time found\"\n\narthur_schedule = [\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\")),\n]\n\nmichael_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\nconstraints = {\"Arthur\": [\"Tuesday\"]}\n\nprint(find_meeting_time(arthur_schedule + michael_schedule, meeting_duration, days, constraints))\n```",
            "count": "calendar_scheduling_example_723"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days, preferences):\n    for day in days:\n        for start in range(9, 17, 30):\n            if day == \"Tuesday\" and start > 10:30 and \"Shirley\" in preferences:  # Shirley does not want to meet on Tuesday after 10:30\n                continue\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nshirley_schedule = [\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:00\", \"%A %H:%M\")),\n]\n\nalbert_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\ndays = [\"Monday\", \"Tuesday\"]\npreferences = {\"Shirley\": [\"after 10:30 on Tuesday\"]}\n\nprint(find_meeting_time(shirley_schedule + albert_schedule, meeting_duration, days, preferences))\n```",
            "count": "calendar_scheduling_example_658"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day):\n    for start in range(9, 17, 30):\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nkatherine_schedule = [\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n]\n\nrebecca_schedule = []\n\njulie_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n]\n\nangela_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nnicholas_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\ncarl_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\n\nprint(find_meeting_time(katherine_schedule + rebecca_schedule + julie_schedule + angela_schedule + nicholas_schedule + carl_schedule, meeting_duration, day))\n```",
            "count": "calendar_scheduling_example_356"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day):\n    earliest_start = None\n    for start in range(9, 17, 30):\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            if earliest_start is None or start_time < earliest_start:\n                earliest_start = start_time\n    if earliest_start is not None:\n        end_time = earliest_start + timedelta(minutes=meeting_duration)\n        return f\"{earliest_start.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {earliest_start.strftime('%A')}\"\n    return \"No available time found\"\n\nsteven_schedule = []\n\nroy_schedule = []\n\ncynthia_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n]\n\nlauren_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nrobert_schedule = [\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\n\nprint(find_meeting_time(steven_schedule + roy_schedule + cynthia_schedule + lauren_schedule + robert_schedule, meeting_duration, day))\n```",
            "count": "calendar_scheduling_example_215"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day):\n    for start in range(9, 17, 30):\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\neric_schedule = []\n\nashley_schedule = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n]\n\nronald_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nlarry_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\n\nprint(find_meeting_time(eric_schedule + ashley_schedule + ronald_schedule + larry_schedule, meeting_duration, day))\n```",
            "count": "calendar_scheduling_example_135"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:30",
                "end_time": "15:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day, preferences):\n    for start in range(9, 17, 30):\n        if day == \"Monday\" and start > 15:  # Billy does not want to meet on Monday after 15:00\n            continue\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nraymond_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n]\n\nbilly_schedule = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\ndonald_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\npreferences = {\n    \"Billy\": [\"after 15:00 on Monday\"]\n}\n\nprint(find_meeting_time(raymond_schedule + billy_schedule + donald_schedule, meeting_duration, day, preferences))\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days, constraints):\n    for day in days:\n        if day == \"Tuesday\" and \"Susan\" in constraints:  # Susan does not want to meet on Tuesday\n            continue\n        for start in range(9, 17, 30):\n            if day == \"Monday\" and start > 16:  # Sandra does not want to meet on Monday after 16:00\n                continue\n            if day == \"Wednesday\" and \"Sandra\" in constraints:  # Sandra does not want to meet on Wednesday\n                continue\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nsusan_schedule = [\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\")),\n]\n\nsandra_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\nconstraints = {\"Susan\": [\"Tuesday\"], \"Sandra\": [\"Monday after 16:00\", \"Wednesday\"]}\n\nprint(find_meeting_time(susan_schedule + sandra_schedule, meeting_duration, days, constraints))\n```",
            "count": "calendar_scheduling_example_778"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day, preferences):\n    for start in range(9, 17, 30):\n        if day == \"Monday\" and start > 15:  # Bobby does not want to meet on Monday after 15:00\n            continue\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nlisa_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\nbobby_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n]\n\nrandy_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\npreferences = {\n    \"Bobby\": [\"after 15:00 on Monday\"]\n}\n\nprint(find_meeting_time(lisa_schedule + bobby_schedule + randy_schedule, meeting_duration, day, preferences))\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days):\n    earliest_start = None\n    for day in days:\n        for start in range(9, 17, 30):\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                if earliest_start is None or start_time < earliest_start:\n                    earliest_start = start_time\n    if earliest_start is not None:\n        end_time = earliest_start + timedelta(minutes=meeting_duration)\n        return f\"{earliest_start.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {earliest_start.strftime('%A')}\"\n    return \"No available time found\"\n\nronald_schedule = [\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n]\n\namber_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 15:30\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\nprint(find_meeting_time(ronald_schedule + amber_schedule, meeting_duration, days))\n```",
            "count": "calendar_scheduling_example_735"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day):\n    for start in range(9, 17, 30):\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\npatrick_schedule = [\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n]\n\nshirley_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\njeffrey_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\ngloria_schedule = [\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n]\n\nnathan_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nangela_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\ndavid_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\n\nprint(find_meeting_time(patrick_schedule + shirley_schedule + jeffrey_schedule + gloria_schedule + nathan_schedule + angela_schedule + david_schedule, meeting_duration, day))\n```",
            "count": "calendar_scheduling_example_436"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Friday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days, constraints):\n    for day in days:\n        if day == \"Monday\" and \"Nicholas\" in constraints:  # Nicholas does not want to meet on Monday\n            continue\n        if day == \"Tuesday\" and \"Bryan\" in constraints:  # Bryan does not want to meet on Tuesday\n            continue\n        if day == \"Thursday\" and \"Nicholas\" in constraints:  # Nicholas does not want to meet on Thursday\n            continue\n        for start in range(9, 17, 30):\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nbryan_schedule = [\n    (datetime.strptime(\"Thursday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n]\n\nnicholas_schedule = [\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Friday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Friday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Friday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 60\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\nconstraints = {\"Bryan\": [\"Tuesday\"], \"Nicholas\": [\"Monday\", \"Thursday\"]}\n\nprint(find_meeting_time(bryan_schedule + nicholas_schedule, meeting_duration, days, constraints))\n```",
            "count": "calendar_scheduling_example_910"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days):\n    earliest_start = None\n    for day in days:\n        for start in range(9, 17, 30):\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                if earliest_start is None or start_time < earliest_start:\n                    earliest_start = start_time\n    if earliest_start is not None:\n        end_time = earliest_start + timedelta(minutes=meeting_duration)\n        return f\"{earliest_start.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {earliest_start.strftime('%A')}\"\n    return \"No available time found\"\n\nmegan_schedule = [\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n]\n\ndaniel_schedule = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 60\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\nprint(find_meeting_time(megan_schedule + daniel_schedule, meeting_duration, days))\n```",
            "count": "calendar_scheduling_example_865"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days, constraints):\n    for day in days:\n        if day == \"Monday\" and \"Nathan\" in constraints:  # Nathan does not want to meet on Monday\n            continue\n        if day == \"Tuesday\" and \"Amanda\" in constraints and \"after 11:00\" in constraints[\"Amanda\"]:  # Amanda does not want to meet on Tuesday after 11:00\n            continue\n        for start in range(9, 17, 30):\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\namanda_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n]\n\nnathan_schedule = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 16:30\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\ndays = [\"Monday\", \"Tuesday\"]\nconstraints = {\"Amanda\": [\"Tuesday after 11:00\"], \"Nathan\": [\"Monday\"]}\n\nprint(find_meeting_time(amanda_schedule + nathan_schedule, meeting_duration, days, constraints))\n```",
            "count": "calendar_scheduling_example_682"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day, preferences):\n    for start in range(9, 17, 30):\n        if day == \"Monday\" and start > 13:  # Harold does not want to meet on Monday after 13:00\n            continue\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\njacqueline_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n]\n\nharold_schedule = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\narthur_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nkelly_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 15:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\npreferences = {\n    \"Harold\": [\"after 13:00 on Monday\"]\n}\n\nprint(find_meeting_time(jacqueline_schedule + harold_schedule + arthur_schedule + kelly_schedule, meeting_duration, day, preferences))\n```",
            "count": "calendar_scheduling_example_173"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day):\n    for start in range(9, 17, 30):\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\nemily_schedule = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\nmason_schedule = []\n\nmaria_schedule = [\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:30\", \"%A %H:%M\")),\n]\n\ncarl_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\ndavid_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nfrank_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 11:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\n\nprint(find_meeting_time(emily_schedule + mason_schedule + maria_schedule + carl_schedule + david_schedule + frank_schedule, meeting_duration, day))\n```",
            "count": "calendar_scheduling_example_360"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, day, preferences):\n    for start in range(9, 17, 30):\n        if day == \"Monday\" and start > 14:  # Melissa does not want to meet on Monday after 14:00\n            continue\n        start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n        end_time = start_time + timedelta(minutes=meeting_duration)\n        if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n            return f\"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\"\n\n    return \"No available time found\"\n\njeffrey_schedule = [\n    (datetime.strptime(\"Monday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:00\", \"%A %H:%M\")),\n]\n\nvirginia_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 10:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 16:30\", \"%A %H:%M\")),\n]\n\nmelissa_schedule = [\n    (datetime.strptime(\"Monday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 30\nday = \"Monday\"\npreferences = {\n    \"Melissa\": [\"after 14:00 on Monday\"]\n}\n\nprint(find_meeting_time(jeffrey_schedule + virginia_schedule + melissa_schedule, meeting_duration, day, preferences))\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(natalie_schedule, william_schedule, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"] and\n                start_time not in natalie_schedule[day] and\n                start_time not in william_schedule[day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nnatalie_schedule = {\n    \"Monday\": [(9, 30), (10, 0), (12, 0), (12, 30), (14, 0), (14, 30), (15, 0), (16, 30)],\n    \"Tuesday\": [(9, 30), (10, 0), (10, 30), (12, 30), (14, 0), (16, 0), (17, 0)],\n    \"Wednesday\": [(11, 0), (11, 30), (16, 0), (16, 30)],\n    \"Thursday\": [(10, 0), (11, 0), (11, 30), (15, 0), (15, 30), (16, 30), (17, 0)]\n}\nwilliam_schedule = {\n    \"Monday\": [(9, 30), (11, 0), (11, 30), (17, 0)],\n    \"Tuesday\": [(9, 0), (13, 0), (13, 30), (16, 0)],\n    \"Wednesday\": [(9, 0), (12, 30), (13, 0), (14, 30), (15, 30), (16, 0), (16, 30), (17, 0)],\n    \"Thursday\": [(9, 0), (10, 30), (11, 0), (11, 30), (12, 0), (12, 30), (13, 0), (15, 0), (17, 0)]\n}\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(natalie_schedule, william_schedule, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```\n\nPlease note that the schedules are represented as dictionaries where the keys are the days of the week and the values are lists of tuples representing the busy times. The tuples contain the start and end hours of the busy time. The meeting duration is in minutes. The function `find_meeting_time` returns a string representing the meeting time and day in the format \"HH:MM-HH:MM on Day\".",
            "count": "calendar_scheduling_example_875"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(brian_schedule, julia_schedule, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n    # Sort the days based on the preference to avoid more meetings on Monday\n    work_days = sorted(work_days, key=lambda x: 1 if x == \"Monday\" else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"] and\n                start_time not in brian_schedule[day] and\n                start_time not in julia_schedule[day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nbrian_schedule = {\n    \"Monday\": [(9, 30), (10, 0), (12, 30), (14, 30), (15, 30), (16, 0)],\n    \"Tuesday\": [(9, 0), (9, 30), (12, 30), (14, 30), (16, 0), (17, 0)],\n    \"Wednesday\": [(12, 30), (14, 0), (16, 30), (17, 0)],\n    \"Thursday\": [(11, 0), (11, 30), (13, 0), (13, 30), (16, 30), (17, 0)],\n    \"Friday\": [(9, 30), (10, 0), (10, 30), (13, 0), (13, 30), (15, 0), (16, 0), (16, 30), (17, 0)]\n}\njulia_schedule = {\n    \"Monday\": [(9, 0), (11, 0), (11, 30), (12, 30), (13, 0), (15, 30), (16, 0)],\n    \"Tuesday\": [(9, 0), (13, 0), (14, 0), (16, 0), (16, 30)],\n    \"Wednesday\": [(9, 0), (11, 30), (12, 0), (12, 30), (13, 0), (17, 0)],\n    \"Thursday\": [(9, 0), (10, 30), (11, 0), (17, 0)],\n    \"Friday\": [(9, 0), (10, 0), (10, 30), (12, 30), (14, 0), (14, 30), (15, 0), (16, 0)]\n}\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(brian_schedule, julia_schedule, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```\n\nPlease note that the schedules are represented as dictionaries where the keys are the days of the week and the values are lists of tuples representing the busy times. The tuples contain the start and end hours of the busy time. The meeting duration is in minutes. The function `find_meeting_time` returns a string representing the meeting time and day in the format \"HH:MM-HH:MM on Day\".",
            "count": "calendar_scheduling_example_978"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 30), (10, 30), (11, 0), (11, 30), (12, 0), (12, 30), (13, 0), (15, 0), (15, 30), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(10, 0), (10, 30), (12, 0), (12, 30)]\n    },\n    {\n        \"Monday\": [(11, 0), (11, 30), (13, 30), (14, 0), (15, 30), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 0), (10, 30), (11, 0), (12, 30), (13, 0), (15, 0), (15, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 30), (11, 0), (11, 30), (12, 0), (12, 30), (13, 0), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 0), (11, 0), (11, 30), (12, 0), (13, 0), (15, 0), (15, 30), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```\n\nPlease note that the schedules are represented as a list of dictionaries where each dictionary represents a participant's schedule. The keys are the days of the week and the values are lists of tuples representing the busy times. The tuples contain the start and end hours of the busy time. The meeting duration is in minutes. The function `find_meeting_time` returns a string representing the meeting time and day in the format \"HH:MM-HH:MM on Day\".",
            "count": "calendar_scheduling_example_307"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for both participants\n        if start_time not in schedules[0][work_day] and start_time not in schedules[1][work_day]:\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(10, 0), (10, 30), (14, 30), (16, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (13, 0), (13, 30), (15, 0), (15, 30), (16, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```\n\nPlease note that the schedules are represented as a list of dictionaries where each dictionary represents a participant's schedule. The keys are the days of the week and the values are lists of tuples representing the busy times. The tuples contain the start and end hours of the busy time. The meeting duration is in minutes. The function `find_meeting_time` returns a string representing the meeting time and day in the format \"HH:MM-HH:MM on Day\".",
            "count": "calendar_scheduling_example_541"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 30), (10, 30), (13, 0), (13, 30), (15, 0), (15, 30), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (14, 0), (14, 30)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 30), (13, 0), (14, 0), (15, 0), (15, 30), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (11, 30), (12, 0), (16, 30)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (13, 0), (14, 0), (14, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_396"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for both participants\n        if start_time not in schedules[0][work_day] and start_time < (15, 0):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(11, 0), (11, 30), (15, 0), (15, 30)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 30), (11, 0), (11, 30), (12, 0), (12, 30), (13, 30), (16, 0), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_579"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\n    # Sort the days based on the preference to avoid more meetings on Thursday\n    work_days = sorted(work_days, key=lambda x: 1 if x == \"Thursday\" else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(11, 0), (11, 30)],\n        \"Tuesday\": [(14, 30), (15, 0)],\n        \"Wednesday\": [(10, 0), (11, 30), (13, 0), (13, 30)],\n        \"Thursday\": [(13, 30), (14, 0), (16, 0), (16, 30)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 30), (11, 0), (17, 0)],\n        \"Tuesday\": [(9, 30), (12, 0), (13, 30), (14, 0), (15, 30), (17, 0)],\n        \"Wednesday\": [(9, 30), (12, 0), (12, 30), (13, 30), (14, 30), (15, 0), (17, 0)],\n        \"Thursday\": [(10, 0), (12, 0), (12, 30), (14, 0), (14, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_858"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (14, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {},\n    {\n        \"Monday\": [(11, 30), (12, 0), (14, 30), (15, 0)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 0), (11, 30), (12, 0), (13, 0), (13, 30), (14, 30), (15, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 0), (11, 30), (12, 0), (13, 30), (15, 0), (15, 30), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 0), (12, 0), (12, 30), (13, 0), (13, 30), (14, 30), (15, 0), (15, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_227"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    # Sort the days based on the preference to avoid more meetings on Wednesday after 13:30\n    work_days = sorted(work_days, key=lambda x: 1 if x == \"Wednesday\" and (13, 30) < tuple((17, 0)) else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 0), (9, 30), (13, 0), (13, 30), (14, 30), (15, 30)],\n        \"Tuesday\": [(9, 0), (9, 30), (11, 30), (13, 30), (14, 30), (15, 30)],\n        \"Wednesday\": [(10, 0), (11, 0), (12, 30), (15, 0), (16, 0), (16, 30)]\n    },\n    {\n        \"Monday\": [(9, 0), (17, 0)],\n        \"Tuesday\": [(9, 0), (17, 0)],\n        \"Wednesday\": [(9, 0), (10, 30), (11, 0), (11, 30), (12, 0), (12, 30), (13, 30), (15, 30), (16, 0), (16, 30)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_791"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(12, 0), (12, 30), (15, 30), (16, 0)]\n    },\n    {},\n    {\n        \"Monday\": [(9, 0), (11, 30), (12, 0), (13, 0), (14, 0), (14, 30), (15, 0), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "11:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(12, 30), (13, 30), (14, 30), (15, 0), (16, 30), (17, 0)]\n    },\n    {},\n    {\n        \"Monday\": [(9, 0), (10, 0), (11, 30), (11, 59), (13, 0), (14, 0), (14, 30), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (11, 0), (11, 30), (13, 0), (14, 0), (14, 30), (16, 0), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_106"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 0), (10, 30), (13, 30), (14, 0), (16, 0), (16, 30)]\n    },\n    {\n        \"Monday\": [(12, 30), (13, 30), (15, 0), (15, 30), (16, 0), (16, 30)]\n    },\n    {\n        \"Monday\": [(10, 30), (11, 0), (12, 0), (12, 30), (13, 0), (13, 30), (14, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (12, 30), (13, 0), (14, 0), (14, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_172"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for both participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 30), (10, 0), (12, 30), (13, 0), (14, 30), (15, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(10, 0), (11, 0), (11, 30), (13, 0), (13, 30), (14, 30), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_594"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 10:\n        # Check if the time is available for both participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(12, 0), (13, 0), (14, 0), (15, 0)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 0), (10, 30), (11, 0), (11, 30), (12, 30), (13, 0), (13, 30), (14, 30), (15, 0), (16, 0), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_553"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n    # Sort the days based on the preference to avoid more meetings on Tuesday\n    work_days = sorted(work_days, key=lambda x: 1 if x == \"Tuesday\" else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(10, 30), (11, 0), (12, 30), (14, 0), (15, 0), (17, 0)],\n        \"Tuesday\": [(9, 30), (10, 0), (14, 0), (14, 30), (16, 0), (16, 30)],\n        \"Wednesday\": [(9, 30), (10, 30), (11, 0), (12, 0), (13, 0), (13, 30), (15, 0), (16, 0), (16, 30), (17, 0)],\n        \"Thursday\": [(9, 30), (10, 0), (12, 0), (12, 30), (13, 0), (14, 30), (16, 0), (16, 30)],\n        \"Friday\": [(9, 0), (11, 30), (12, 0), (12, 30), (13, 30), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 30), (11, 0), (11, 30), (13, 0), (14, 0), (14, 30), (15, 0), (16, 0)],\n        \"Tuesday\": [(9, 0), (9, 30), (10, 0), (10, 30), (11, 0), (12, 0), (13, 0), (14, 30), (15, 30), (16, 30)],\n        \"Wednesday\": [(9, 30), (10, 0), (10, 30), (11, 0), (11, 30), (16, 0), (16, 30), (17, 0)],\n        \"Thursday\": [(11, 0), (12, 30), (14, 30), (17, 0)],\n        \"Friday\": [(9, 30), (10, 30), (11, 0), (12, 30), (13, 0), (16, 0), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_935"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\"]\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(14, 30), (15, 0)],\n        \"Tuesday\": [(9, 0), (11, 30), (12, 0), (12, 30), (13, 0), (15, 0), (15, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 0), (10, 30), (13, 30), (14, 0), (15, 0), (15, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (10, 30), (11, 0), (11, 30), (12, 0), (14, 0), (15, 0), (16, 0), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_640"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "15:00",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n    # Sort the days based on the preference to avoid meetings on Wednesday before 12:30\n    work_days = sorted(work_days, key=lambda x: 1 if x == \"Wednesday\" and (12, 30) < tuple((11, 0)) else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(12, 0), (12, 30), (15, 0), (15, 30)],\n        \"Tuesday\": [(10, 0), (11, 0), (11, 30), (12, 0), (12, 30), (16, 0), (17, 0)],\n        \"Wednesday\": [(9, 0), (9, 30), (14, 30), (15, 0), (16, 30), (17, 0)],\n        \"Thursday\": [(15, 30), (16, 30)],\n        \"Friday\": [(9, 30), (11, 30), (14, 30), (15, 0), (16, 0), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 0), (10, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (17, 0)],\n        \"Wednesday\": [(9, 0), (11, 0), (12, 0), (14, 30), (16, 0), (17, 0)],\n        \"Thursday\": [(9, 0), (16, 0), (17, 0)],\n        \"Friday\": [(9, 0), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_985"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(11, 30), (12, 0), (14, 0), (14, 30)]\n    },\n    {\n        \"Monday\": [(12, 0), (12, 30), (14, 0), (15, 0), (15, 30), (16, 0)]\n    },\n    {},\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 0), (10, 30), (11, 0), (14, 30), (15, 0), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(10, 0), (11, 0), (11, 30), (14, 0), (15, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 30), (12, 0), (13, 0), (14, 30), (16, 0), (16, 30)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_337"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0) and start_time < (16, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 0), (10, 30), (15, 30), (16, 0)]\n    },\n    {\n        \"Monday\": [(11, 0), (11, 30), (12, 30), (13, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 30), (12, 0), (12, 30), (13, 0), (13, 30), (14, 0), (16, 30)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for both participants\n        if start_time not in schedules[1][work_day] and start_time < (13, 0):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {},\n    {\n        \"Monday\": [(9, 0), (10, 30), (11, 0), (15, 30), (16, 0), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_555"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    # Sort the days based on the preference to avoid more meetings on Monday\n    work_days = sorted(work_days, key=lambda x: 1 if x == \"Monday\" else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0) and (day == \"Wednesday\" and start_time >= (12, 0)):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(12, 0), (12, 30)],\n        \"Wednesday\": [(11, 30), (12, 0)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 0), (10, 30), (11, 30), (12, 30), (14, 0), (15, 30), (17, 0)],\n        \"Tuesday\": [(9, 30), (13, 0), (14, 0), (14, 30), (17, 0)],\n        \"Wednesday\": [(9, 0), (9, 30), (10, 30), (11, 0), (13, 30), (14, 30), (15, 0), (15, 30), (16, 0), (16, 30)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_784"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\n    # Sort the days based on the preference to avoid meetings on Wednesday\n    work_days = sorted(work_days, key=lambda x: 1 if x == \"Wednesday\" else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(10, 30), (11, 0), (12, 30), (13, 0), (14, 30), (15, 30), (16, 0), (17, 0)],\n        \"Tuesday\": [(9, 30), (10, 0), (11, 0), (11, 30), (13, 0), (13, 30), (14, 30), (15, 0), (16, 0), (17, 0)],\n        \"Wednesday\": [(11, 30), (12, 0), (12, 30), (15, 30), (16, 30)],\n        \"Thursday\": [(10, 30), (11, 0), (12, 0), (13, 30), (15, 0), (15, 30), (16, 0), (16, 30)]\n    },\n    {\n        \"Monday\": [(9, 0), (17, 0)],\n        \"Tuesday\": [(9, 0), (11, 0), (11, 30), (13, 0), (13, 30), (14, 0), (14, 30), (16, 0), (17, 0)],\n        \"Wednesday\": [(9, 0), (10, 0), (11, 0), (12, 0), (16, 0), (16, 30), (17, 0)],\n        \"Thursday\": [(9, 0), (10, 30), (11, 0), (12, 30), (13, 0), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_825"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    # Sort the days based on the preference to avoid meetings on Monday before 12:00 and Wednesday\n    work_days = sorted(work_days, key=lambda x: 1 if x in [\"Monday\", \"Wednesday\"] else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(15, 0), (15, 30)],\n        \"Tuesday\": [(11, 30), (12, 0), (13, 0), (13, 30), (14, 30), (15, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 0), (11, 0), (11, 30), (12, 30), (13, 0), (15, 0), (15, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (17, 0)],\n        \"Wednesday\": [(9, 0), (9, 30), (10, 0), (11, 0), (12, 30), (15, 30), (16, 0), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_765"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 30), (10, 0), (14, 30), (15, 0)]\n    },\n    {\n        \"Monday\": [(13, 30), (14, 0), (14, 30), (15, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 0), (10, 30), (11, 30), (12, 0), (14, 30), (15, 0), (16, 30)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 30), (11, 0), (12, 0), (12, 30), (14, 0), (15, 0), (16, 30)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_103"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "15:30",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    # Sort the days based on the preference to avoid meetings on Monday after 13:30 and Wednesday\n    work_days = sorted(work_days, key=lambda x: 1 if x in [\"Monday\", \"Wednesday\"] else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(16, 0), (17, 0)],\n        \"Tuesday\": [(15, 0), (15, 30)],\n        \"Wednesday\": [(10, 0), (11, 0), (14, 0), (14, 30)]\n    },\n    {\n        \"Monday\": [(9, 0), (13, 30), (14, 0), (17, 0)],\n        \"Tuesday\": [(9, 0), (17, 0)],\n        \"Wednesday\": [(9, 30), (15, 30), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_767"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and day\n    work_hours = [(9, 17)]\n    work_day = \"Monday\"\n\n    # Initialize the start time\n    start_time = (9, 0)\n\n    # Iterate over each hour\n    while start_time[0] < 17:\n        # Check if the time is available for all participants\n        if all(start_time not in schedule[work_day] for schedule in schedules):\n            # Check if the meeting duration fits in the available time\n            end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n            if end_time <= (17, 0):\n                # Return the meeting time and day\n                return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {work_day}\"\n\n        # Move to the next hour\n        start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(11, 30), (12, 0), (14, 30), (15, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 0), (14, 0), (14, 30), (16, 0), (16, 30)]\n    },\n    {},\n    {\n        \"Monday\": [(9, 0), (11, 0), (12, 0), (13, 0), (14, 0), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (11, 0), (12, 0), (13, 0), (14, 0), (16, 0), (16, 30), (17, 0)]\n    },\n    {\n        \"Monday\": [(9, 30), (10, 0), (10, 30), (11, 0), (11, 30), (12, 0), (13, 0), (15, 0), (16, 0), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_441"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\"]\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 30), (10, 0), (11, 0), (13, 0), (14, 0), (14, 30), (16, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (9, 30), (10, 30), (11, 0), (14, 30), (16, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 0), (13, 0), (14, 30), (16, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (9, 30), (10, 0), (10, 30), (11, 0), (12, 30), (13, 0), (14, 30), (15, 0), (16, 0), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_662"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    # Sort the days based on the preference to avoid more meetings on Monday and Tuesday after 12:30\n    work_days = sorted(work_days, key=lambda x: 1 if x in [\"Monday\", \"Tuesday\"] else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0) and (day == \"Tuesday\" and end_time > (12, 30)):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {\n        \"Monday\": [(9, 30), (10, 0), (10, 30), (11, 0), (11, 30), (14, 0), (14, 30)],\n        \"Tuesday\": [(12, 0), (13, 0)],\n        \"Wednesday\": [(9, 0), (10, 0), (13, 0), (14, 0)]\n    },\n    {\n        \"Monday\": [(9, 0), (10, 0), (11, 0), (11, 30), (14, 30), (15, 0), (15, 30), (16, 0)],\n        \"Tuesday\": [(9, 0), (9, 30), (11, 30), (12, 0), (12, 30), (14, 30), (15, 30), (16, 0)],\n        \"Wednesday\": [(10, 0), (11, 30), (12, 0), (14, 0), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 60\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_703"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\n    # Sort the days based on the preference to avoid meetings on Wednesday and Thursday\n    work_days = sorted(work_days, key=lambda x: 1 if x in [\"Wednesday\", \"Thursday\"] else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {},\n    {\n        \"Monday\": [(9, 0), (9, 30), (10, 30), (11, 0), (12, 30), (13, 0), (14, 30), (15, 30), (16, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (11, 0), (11, 30), (12, 30), (15, 30), (16, 0), (17, 0)],\n        \"Wednesday\": [(10, 0), (11, 0), (12, 0), (13, 0), (16, 0)],\n        \"Thursday\": [(9, 30), (11, 30), (12, 0), (12, 30), (13, 0), (13, 30), (14, 0), (14, 30), (16, 30), (17, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_826"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    # Define the work hours and days\n    work_hours = [(9, 17)]\n    work_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    # Sort the days based on the preference to avoid meetings on Wednesday and Tuesday\n    work_days = sorted(work_days, key=lambda x: 1 if x in [\"Wednesday\", \"Tuesday\"] else 0)\n\n    # Iterate over each day\n    for day in work_days:\n        # Initialize the start time\n        start_time = (9, 0)\n\n        # Iterate over each hour\n        while start_time[0] < 17:\n            # Check if the time is available for both participants\n            if (day in [\"Monday\", \"Tuesday\", \"Wednesday\"] and\n                start_time not in schedules[0][day] and\n                start_time not in schedules[1][day]):\n                # Check if the meeting duration fits in the available time\n                end_time = (start_time[0] + meeting_duration // 60, start_time[1] + meeting_duration % 60)\n                if end_time <= (17, 0):\n                    # Return the meeting time and day\n                    return f\"{start_time[0]:02d}:{start_time[1]:02d}-{end_time[0]:02d}:{end_time[1]:02d} on {day}\"\n\n            # Move to the next hour\n            start_time = (start_time[0] + 1, 0)\n\n    # If no available time is found, return a message\n    return \"No available time found\"\n\n# Define the schedules\nschedules = [\n    {},\n    {\n        \"Monday\": [(10, 30), (11, 0), (12, 0), (12, 30), (13, 0), (15, 0), (15, 30), (16, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (12, 0), (14, 0), (15, 30), (16, 30), (17, 0)],\n        \"Wednesday\": [(10, 30), (11, 0), (11, 30), (12, 0), (12, 30), (14, 0), (14, 30), (15, 0), (16, 0)]\n    }\n]\n\n# Define the meeting duration\nmeeting_duration = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\n\n# Print the meeting time\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_704"
        }
    ]
}