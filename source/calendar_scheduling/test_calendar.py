s = "def minutes_to_str(m):\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\n# Define working hours in minutes since 00:00 (9:00 to 17:00)\nwork_start = 9 * 60   # 540\nwork_end = 17 * 60    # 1020\n\n# Meeting duration in minutes\nduration = 60\n\n# Constraint: Mark prefers meetings not before 15:00, so earliest start is 15:00\nearliest_start = 15 * 60  # 900\n\n# Define busy intervals in minutes for each participant\n# Stephanie busy: 9:00-9:30 (540-570) and 13:30-14:00 (810-840)\nstephanie_busy = [(540, 570), (810, 840)]\n# Scott busy: 9:00-10:00 (540-600), 11:00-12:30 (660-750), 14:30-15:00 (870-900), 16:00-17:00 (960-1020)\nscott_busy = [(540, 600), (660, 750), (870, 900), (960, 1020)]\n# Mark is free the entire day but prefers meeting after 15:00.\n\ndef is_free(start, end, busy_intervals):\n    \"\"\"Return True if interval [start, end] does not overlap any busy interval.\"\"\"\n    for b_start, b_end in busy_intervals:\n        # Check if [start, end] overlaps with busy interval\n        if not (end <= b_start or start >= b_end):\n            return False\n    return True\n\n# Starting from earliest possible start, try to schedule the meeting at the earliest availability.\n# Given the problem guarantees a solution, we'll check the candidate time.\ncandidate_start = earliest_start\ncandidate_end = candidate_start + duration\n\n# Check that candidate falls within working hours\nif candidate_end > work_end:\n    raise ValueError(\"Candidate meeting time exceeds working hours.\")\n\n# Check if candidate time is free for Stephanie and Scott\nif is_free(candidate_start, candidate_end, stephanie_busy) and is_free(candidate_start, candidate_end, scott_busy):\n    proposed_start = candidate_start\n    proposed_end = candidate_start + duration\n    # Output in the required format: {HH:MM:HH:MM}\n    print(\"{\" + minutes_to_str(proposed_start) + \":\" + minutes_to_str(proposed_end) + \"}\")\nelse:\n    # If the candidate does not work, then search minute-by-minute until an available slot is found.\n    found = False\n    for t in range(candidate_start + 1, work_end - duration + 1):\n        if is_free(t, t+duration, stephanie_busy) and is_free(t, t+duration, scott_busy):\n            proposed_start = t\n            proposed_end = t + duration\n            print(\"{\" + minutes_to_str(proposed_start) + \":\" + minutes_to_str(proposed_end) + \"}\")\n            found = True\n            break\n    if not found:\n        print(\"No available time\")\n"

print(s)