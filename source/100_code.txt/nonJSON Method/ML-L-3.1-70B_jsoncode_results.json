{
    "0shot": [
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Michelle'] = [(11*60, 12*60)]\n    participant_schedules['Steven'] = [(9*60, 9.5*60), (11.5*60, 12*60), (13.5*60, 14*60), (15.5*60, 16*60)]\n    participant_schedules['Jerry'] = [(9*60, 9.5*60), (10*60, 11*60), (11.5*60, 12.5*60), (13*60, 14.5*60), (15.5*60, 16*60), (16.5*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Michelle', 'Steven', 'Jerry']\nmeeting_duration = 1\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_0"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Raymond'] = [(9*60, 9.5*60), (11.5*60, 12*60), (13*60, 13.5*60), (15*60, 15.5*60)]\n    participant_schedules['Billy'] = [(10*60, 10.5*60), (12*60, 13*60), (16.5*60, 17*60)]\n    participant_schedules['Donald'] = [(9*60, 9.5*60), (10*60, 11*60), (12*60, 13*60), (14*60, 14.5*60), (16*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all and time + meeting_duration_minutes <= 15*60:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Raymond', 'Billy', 'Donald']\nmeeting_duration = 0.5\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Roy'] = [(9*60, 9.5*60), (10*60, 10.5*60), (11*60, 11.5*60), (12.5*60, 13*60)]\n    participant_schedules['Kathryn'] = [(9.5*60, 10*60), (16.5*60, 17*60)]\n    participant_schedules['Amy'] = [(9*60, 14.5*60), (15*60, 16*60), (16.5*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all and time + meeting_duration_minutes <= 15.5*60:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Roy', 'Kathryn', 'Amy']\nmeeting_duration = 0.5\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_2"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Arthur'] = [(9*60, 9.5*60), (10.5*60, 12*60), (16*60, 17*60)]\n    participant_schedules['Michael'] = [(13*60, 13.5*60), (14*60, 14.5*60)]\n    participant_schedules['Samantha'] = [(10.5*60, 11*60), (12*60, 15*60), (15.5*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Arthur', 'Michael', 'Samantha']\nmeeting_duration = 1\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_3"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Donna'] = [(14*60, 14.5*60), (15.5*60, 16*60)]\n    participant_schedules['John'] = [(11*60, 11.5*60), (16.5*60, 17*60)]\n    participant_schedules['Billy'] = [(9*60, 10*60), (10.5*60, 14*60), (14.5*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Donna', 'John', 'Billy']\nmeeting_duration = 0.5\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_4"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    for participant, preference in preferences.items():\n        if preference:\n            common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Kathryn\": [\"9:00 to 9:30\", \"10:30 to 11:00\", \"11:30 to 12:00\", \"13:30 to 14:30\", \"16:30 to 17:00\"],\n    \"Charlotte\": [\"12:00 to 12:30\", \"16:00 to 16:30\"],\n    \"Lauren\": [\"9:00 to 10:00\", \"12:00 to 12:30\", \"13:30 to 14:30\", \"15:00 to 16:00\", \"16:30 to 17:00\"]\n}\nmeeting_duration = 0.5\nwork_hours = (9, 17)\npreferences = {\"Charlotte\": 13.5}\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_5"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Thomas\": [],\n    \"Dylan\": [\"10:30 to 11:00\", \"13:30 to 14:00\"],\n    \"Jerry\": [\"9:00 to 11:00\", \"11:30 to 14:30\", \"16:00 to 17:00\"]\n}\nmeeting_duration = 1\nwork_hours = (9, 17)\npreferences = None\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_6"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Heather\": [\"9:00 to 9:30\", \"10:30 to 11:00\", \"13:00 to 14:00\", \"14:30 to 15:00\", \"16:00 to 16:30\"],\n    \"Nicholas\": [],\n    \"Zachary\": [\"9:00 to 10:30\", \"11:00 to 12:00\", \"12:30 to 13:00\", \"13:30 to 16:30\"]\n}\nmeeting_duration = 0.5\nwork_hours = (9, 17)\npreferences = {\"Zachary\": 14}\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_7"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Adam\": [\"10:00 to 10:30\", \"12:30 to 13:00\", \"13:30 to 14:30\"],\n    \"Jerry\": [\"9:00 to 9:30\", \"12:00 to 12:30\", \"15:00 to 16:00\"],\n    \"Matthew\": [\"9:30 to 11:00\", \"11:30 to 12:30\", \"13:00 to 14:00\", \"14:30 to 17:00\"]\n}\nmeeting_duration = 0.5\nwork_hours = (9, 17)\npreferences = None\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_8"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Diane\": [\"9:00 to 9:30\", \"12:00 to 12:30\", \"14:30 to 15:30\"],\n    \"Kelly\": [\"9:30 to 10:00\", \"10:30 to 11:00\"],\n    \"Deborah\": [\"9:00 to 9:30\", \"10:00 to 14:00\", \"14:30 to 17:00\"]\n}\nmeeting_duration = 0.5\nwork_hours = (9, 17)\npreferences = None\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_9"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours, constraints):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n    \n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n    \n    # Add additional constraints\n    for participant, constraint in constraints.items():\n        if constraint['after'] is not None:\n            after_time = int(constraint['after'].split(':')[0]) * 60 + int(constraint['after'].split(':')[1])\n            participants[participant].append((after_time, end_time))\n        if constraint['before'] is not None:\n            before_time = int(constraint['before'].split(':')[0]) * 60 + int(constraint['before'].split(':')[1])\n            participants[participant].append((start_time, before_time))\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Diana': [('11:30', '12:00'), ('13:00', '13:30')],\n    'Ethan': [],\n    'Janet': [('9:00', '10:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '17:00')]\n}\nconstraints = {\n    'Janet': {'before': '12:00', 'after': None}\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours, constraints))\n```",
            "count": "calendar_scheduling_example_10"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Alexander': [('9:30', '10:00'), ('10:30', '11:00'), ('12:30', '13:00'), ('14:30', '15:00'), ('16:00', '17:00')],\n    'Elizabeth': [('9:00', '9:30'), ('11:30', '12:30'), ('13:00', '14:30')],\n    'Walter': [('9:00', '14:30'), ('15:30', '17:00')]\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_11"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'David': [],\n    'Debra': [('9:30', '10:00'), ('11:00', '11:30'), ('12:00', '13:00'), ('14:00', '14:30'), ('16:00', '16:30')],\n    'Kevin': [('9:00', '12:00'), ('14:00', '17:00')]\n}\nmeeting_duration = 1\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_12"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours, constraints=None):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Add additional constraints\n    if constraints is not None:\n        for participant, constraint in constraints.items():\n            if constraint['after'] is not None:\n                after_time = int(constraint['after'].split(':')[0]) * 60 + int(constraint['after'].split(':')[1])\n                participants[participant].append((after_time, end_time))\n            if constraint['before'] is not None:\n                before_time = int(constraint['before'].split(':')[0]) * 60 + int(constraint['before'].split(':')[1])\n                participants[participant].append((start_time, before_time))\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Gerald': [('9:00', '9:30'), ('13:00', '14:00'), ('15:00', '15:30'), ('16:00', '17:00')],\n    'Roy': [],\n    'Barbara': [('9:30', '10:00'), ('11:30', '14:00'), ('14:30', '15:00'), ('15:30', '17:00')]\n}\nconstraints = {\n    'Gerald': {'before': '13:00', 'after': None}\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours, constraints))\n```",
            "count": "calendar_scheduling_example_13"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours, constraints=None):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Add additional constraints\n    if constraints is not None:\n        for participant, constraint in constraints.items():\n            if constraint['after'] is not None:\n                after_time = int(constraint['after'].split(':')[0]) * 60 + int(constraint['after'].split(':')[1])\n                participants[participant].append((after_time, end_time))\n            if constraint['before'] is not None:\n                before_time = int(constraint['before'].split(':')[0]) * 60 + int(constraint['before'].split(':')[1])\n                participants[participant].append((start_time, before_time))\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Brandon': [('13:00', '14:00'), ('15:30', '16:00'), ('16:30', '17:00')],\n    'Jerry': [],\n    'Bradley': [('9:00', '11:30'), ('12:00', '15:00'), ('16:00', '16:30')]\n}\nconstraints = {\n    'Brandon': {'after': '14:30', 'before': None}\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours, constraints))\n```",
            "count": "calendar_scheduling_example_14"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, constraints):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_duration = timedelta(minutes=30)\n\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start = datetime.strptime(start, '%H:%M')\n            end = datetime.strptime(end, '%H:%M')\n            if start < start_time:\n                start_time = start\n            if end > end_time:\n                end_time = end\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        current_time = start_time + timedelta(hours=hour)\n        if current_time.hour < 12 and 'Christine' in participants:\n            continue\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Joyce': [('11:00', '11:30'), ('13:30', '14:00'), ('14:30', '16:30')],\n    'Christine': [],\n    'Alexander': [('09:00', '11:00'), ('12:00', '12:30'), ('13:30', '15:00'), \n                  ('15:30', '16:00'), ('16:30', '17:00')]\n}\n\nconstraints = {\n    'Christine': '12:00'\n}\n\nprint(find_meeting_time(participants, constraints))\n```",
            "count": "calendar_scheduling_example_15"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Scott': [('09:30', '10:30'), ('13:30', '14:00'), ('14:30', '15:00'), \n              ('15:30', '16:00'), ('16:30', '17:00')],\n    'Gabriel': [],\n    'Christine': [('09:00', '10:00'), ('10:30', '12:30'), ('13:00', '17:00')]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_16"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            if current_time.hour > 13 and 'Helen' in participants:\n                continue\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Margaret': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), \n                 ('13:00', '13:30'), ('15:00', '15:30')],\n    'Donna': [('14:30', '15:00'), ('16:00', '16:30')],\n    'Helen': [('09:00', '09:30'), ('10:00', '11:30'), ('13:00', '14:00'), \n              ('14:30', '15:00'), ('15:30', '17:00')]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                if 'Billy' in participants and current_time.hour > 15 and current_time.minute > 30:\n                    continue\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Brian': [],\n    'Billy': [('10:00', '10:30'), ('11:30', '12:00'), ('14:00', '14:30'), \n              ('16:30', '17:00')],\n    'Patricia': [('09:00', '12:30'), ('13:30', '14:00'), ('14:30', '16:00'), \n                 ('16:30', '17:00')]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_18"
        },
        {
            "final_program_time": "{17:00:18:00}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Stephen': [('10:00', '10:30'), ('13:00', '13:30'), ('14:30', '15:00'), \n                ('16:00', '16:30')],\n    'Edward': [('09:00', '09:30'), ('10:00', '10:30'), ('13:30', '14:30'), \n               ('15:00', '16:00')],\n    'Angela': [('09:00', '11:30'), ('12:30', '13:00'), ('13:30', '15:30'), \n               ('16:00', '17:00')]\n}\n\nmeeting_duration = timedelta(minutes=60)\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_19"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants = {\n        'Ralph': [(13.5, 14), (14.5, 15)],\n        'Peter': [(9, 9.5), (11, 13), (16, 16.5)],\n        'Daniel': [(9, 10), (10.5, 15.5), (16, 17)]\n    }\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    if 'Daniel' in participants and time > 13.5:\n                        continue\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Ralph', 'Peter', 'Daniel']\nstart_time = 9\nend_time = 17\nduration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_20"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants = {\n        'Bobby': [],\n        'Scott': [(11.5, 12), (15.5, 16)],\n        'Kimberly': [(11, 12), (12.5, 13), (13.5, 14), (14.5, 15), (15.5, 17)]\n    }\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Bobby', 'Scott', 'Kimberly']\nstart_time = 9\nend_time = 17\nduration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_21"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants = {\n        'Theresa': [(9, 9.5), (12.5, 13.5), (14, 15), (16.5, 17)],\n        'Charles': [(10, 10.5), (11.5, 12.5), (14, 15.5)],\n        'Betty': [(9, 10.5), (12, 12.5), (13, 14), (15, 16)]\n    }\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Theresa', 'Charles', 'Betty']\nstart_time = 9\nend_time = 17\nduration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_22"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants = {\n        'Billy': [(11.5, 12), (13, 15), (16, 16.5)],\n        'Maria': [(9, 9.5), (10, 10.5), (13, 13.5), (14, 14.5)],\n        'William': [(9.5, 10), (12, 12.5), (13.5, 15), (15.5, 17)]\n    }\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Billy', 'Maria', 'William']\nstart_time = 9\nend_time = 17\nduration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_23"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration, preferences=None):\n    participants = {\n        'Benjamin': [],\n        'Hannah': [],\n        'Brenda': [(9.5, 10), (11.5, 12.5), (14, 16.5)]\n    }\n    if preferences:\n        preferences = {'Benjamin': (9.5, 17)}\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    if preferences:\n                        if 'Benjamin' in preferences and time > preferences['Benjamin'][0]:\n                            continue\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Benjamin', 'Hannah', 'Brenda']\nstart_time = 9\nend_time = 17\nduration = 30\npreferences = {'Benjamin': (9.5, 17)}\n\nprint(find_meeting_time(participants, start_time, end_time, duration, preferences))\n```",
            "count": "calendar_scheduling_example_24"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Apply preferences\n    for participant, preference in preferences.items():\n        preference_hour, preference_minute = map(int, preference.split(':'))\n        preference_time = preference_hour * 60 + preference_minute\n        available_time_slots = [(start, end) for start, end in available_time_slots if start < preference_time]\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules and preferences\nparticipants = {\n    \"Anthony\": [(\"09:30\", \"10:00\"), (\"12:00\", \"13:00\"), (\"16:00\", \"16:30\")],\n    \"Pamela\": [(\"09:30\", \"10:00\"), (\"16:30\", \"17:00\")],\n    \"Zachary\": [(\"09:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"17:00\")],\n}\npreferences = {\"Pamela\": \"14:30\"}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 1\n\nprint(find_meeting_time(participants, work_hours, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": "{15:30:16:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules\nparticipants = {\n    \"Katherine\": [],\n    \"Nicole\": [],\n    \"Kevin\": [(\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"15:30\"), (\"16:30\", \"17:00\")],\n}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 1\n\nprint(find_meeting_time(participants, work_hours, meeting_duration))\n```",
            "count": "calendar_scheduling_example_26"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules\nparticipants = {\n    \"Jesse\": [(\"10:00\", \"10:30\"), (\"15:30\", \"16:00\")],\n    \"Kathryn\": [],\n    \"Megan\": [(\"10:30\", \"11:00\"), (\"11:30\", \"12:30\"), (\"13:30\", \"14:30\"), (\"15:00\", \"16:30\")],\n}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 0.5\n\nprint(find_meeting_time(participants, work_hours, meeting_duration))\n```",
            "count": "calendar_scheduling_example_27"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules\nparticipants = {\n    \"Brittany\": [(\"13:00\", \"13:30\"), (\"16:00\", \"16:30\")],\n    \"Emily\": [],\n    \"Doris\": [(\"09:00\", \"11:00\"), (\"11:30\", \"14:30\"), (\"15:00\", \"17:00\")],\n}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 0.5\n\nprint(find_meeting_time(participants, work_hours, meeting_duration))\n```",
            "count": "calendar_scheduling_example_28"
        },
        {
            "final_program_time": "{12:00:13:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules\nparticipants = {\n    \"Madison\": [(\"09:30\", \"10:00\"), (\"11:30\", \"12:00\")],\n    \"Diana\": [(\"11:00\", \"11:30\"), (\"13:00\", \"13:30\")],\n    \"Shirley\": [(\"09:00\", \"12:00\"), (\"13:30\", \"15:00\"), (\"15:30\", \"17:00\")],\n}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 1\n\nprint(find_meeting_time(participants, work_hours, meeting_duration))\n```",
            "count": "calendar_scheduling_example_29"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(jeffrey, virginia, melissa, duration, start_time, end_time, preference=None):\n    jeffrey_free = []\n    virginia_free = []\n    melissa_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in jeffrey):\n            jeffrey_free.append(current_time)\n        if not any(start <= current_time < end for start, end in virginia):\n            virginia_free.append(current_time)\n        if not any(start <= current_time < end for start, end in melissa):\n            melissa_free.append(current_time)\n        current_time += 30  # increment by 30 minutes\n\n    common_free = set(jeffrey_free) & set(virginia_free) & set(melissa_free)\n\n    if preference:\n        common_free = {time for time in common_free if time < preference}\n\n    for time in common_free:\n        if time + duration <= end_time:\n            return f\"{{{time:02d}:{(time+30)%60:02d}:{(time+duration):02d}:{((time+duration)+30)%60:02d}}}\"\n\njeffrey = [(9.5, 10), (10.5, 11)]\nvirginia = [(9, 9.5), (10, 10.5), (14.5, 15), (16, 16.5)]\nmelissa = [(9, 11.5), (12, 12.5), (13, 15), (16, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 14\n\nprint(find_meeting_time(jeffrey, virginia, melissa, duration, start_time, end_time, preference))\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(richard, martha, kimberly, duration, start_time, end_time, preference=None):\n    richard_free = []\n    martha_free = []\n    kimberly_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in richard):\n            richard_free.append(current_time)\n        if not any(start <= current_time < end for start, end in martha):\n            martha_free.append(current_time)\n        if not any(start <= current_time < end for start, end in kimberly):\n            kimberly_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(richard_free) & set(martha_free) & set(kimberly_free)\n\n    if preference:\n        common_free = {time for time in common_free if time >= preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nrichard = [(13.5, 14), (15, 15.5)]\nmartha = [(9, 9.5), (13, 13.5)]\nkimberly = [(9, 11), (11.5, 12), (12.5, 13), (14, 16)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 14\nprint(find_meeting_time(richard, martha, kimberly, duration, start_time, end_time, preference))\n```",
            "count": "calendar_scheduling_example_31"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(emily, melissa, frank, duration, start_time, end_time, preference=None):\n    emily_free = []\n    melissa_free = []\n    frank_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in emily):\n            emily_free.append(current_time)\n        if not any(start <= current_time < end for start, end in melissa):\n            melissa_free.append(current_time)\n        if not any(start <= current_time < end for start, end in frank):\n            frank_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(emily_free) & set(melissa_free) & set(frank_free)\n\n    if preference:\n        common_free = {time for time in common_free if time < preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nemily = [(10, 10.5), (11.5, 12.5), (14, 15), (16, 16.5)]\nmelissa = [(9.5, 10), (14.5, 15)]\nfrank = [(10, 10.5), (11, 11.5), (12.5, 13), (13.5, 14.5), (15, 16), (16.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 9.5\nprint(find_meeting_time(emily, melissa, frank, duration, start_time, end_time, preference))\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": "{13:30:14:00}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(lisa, bobby, randy, duration, start_time, end_time, preference=None):\n    lisa_free = []\n    bobby_free = []\n    randy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in lisa):\n            lisa_free.append(current_time)\n        if not any(start <= current_time < end for start, end in bobby):\n            bobby_free.append(current_time)\n        if not any(start <= current_time < end for start, end in randy):\n            randy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(lisa_free) & set(bobby_free) & set(randy_free)\n\n    if preference:\n        common_free = {time for time in common_free if time < preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nlisa = [(9, 10), (10.5, 11.5), (12.5, 13), (16, 16.5)]\nbobby = [(9, 9.5), (10, 10.5), (11.5, 12), (15, 15.5)]\nrandy = [(9.5, 10), (10.5, 11), (11.5, 12.5), (13, 13.5), (14.5, 15.5), (16, 16.5)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 15\nprint(find_meeting_time(lisa, bobby, randy, duration, start_time, end_time, preference))\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(willie, richard, noah, duration, start_time, end_time):\n    richard_free = []\n    noah_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in richard):\n            richard_free.append(current_time)\n        if not any(start <= current_time < end for start, end in noah):\n            noah_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(richard_free) & set(noah_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nwillie = []\nrichard = [(10, 10.5), (11, 12), (13, 14), (16, 16.5)]\nnoah = [(10, 10.5), (11.5, 13), (13.5, 14), (14.5, 17)]\nduration = 1\nstart_time = 9\nend_time = 17\nprint(find_meeting_time(willie, richard, noah, duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_34"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    meeting_start = None\n\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if not preferences or all(not is_excluded(time, preference) for preference in preferences):\n                    meeting_start = time\n                    break\n        if meeting_start:\n            break\n\n    if meeting_start:\n        start_hour, start_minute = map(int, meeting_start.split(':'))\n        end_hour, end_minute = start_hour, start_minute + meeting_duration\n        if end_minute >= 60:\n            end_hour += 1\n            end_minute -= 60\n        return f\"{{{meeting_start}:{end_hour:02d}:{end_minute:02d}}}\"\n    else:\n        return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time < preference\n\n\nparticipants = [\n    {'name': 'Bradley', 'busy': []},\n    {'name': 'Zachary', 'busy': [\n        {'start': '10:00', 'end': '10:30'},\n        {'start': '15:00', 'end': '15:30'}\n    ]},\n    {'name': 'Teresa', 'busy': [\n        {'start': '09:00', 'end': '10:30'},\n        {'start': '11:00', 'end': '12:30'},\n        {'start': '13:00', 'end': '14:00'},\n        {'start': '14:30', 'end': '16:30'}\n    ]}\n]\n\nwork_hours = '9-17'\nmeeting_duration = 30\npreferences = ['14:30']\n\nprint(find_meeting_time(participants, work_hours, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_35"
        },
        {
            "final_program_time": "{10:00:10:60}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time > preference\n\n\nparticipants = [\n    {'name': 'Ryan', 'busy': [\n        {'start': '09:00', 'end': '09:30'},\n        {'start': '12:30', 'end': '13:00'}\n    ]},\n    {'name': 'Ruth', 'busy': []},\n    {'name': 'Denise', 'busy': [\n        {'start': '09:30', 'end': '10:30'},\n        {'start': '12:00', 'end': '13:00'},\n        {'start': '14:30', 'end': '16:30'}\n    ]}\n]\n\nwork_hours = '9-17'\nmeeting_duration = 60\npreferences = ['12:30']\n\nprint(find_meeting_time(participants, work_hours, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time > preference\n\n\nparticipants = [\n    {'name': 'Gregory', 'busy': [\n        {'start': '11:00', 'end': '11:30'},\n        {'start': '12:00', 'end': '12:30'},\n        {'start': '15:30', 'end': '16:30'}\n    ]},\n    {'name': 'Teresa', 'busy': []},\n    {'name': 'Carol', 'busy': [\n        {'start': '09:00', 'end': '10:30'},\n        {'start': '11:00', 'end': '16:00'},\n        {'start': '16:30', 'end': '17:00'}\n    ]}\n]\n\nwork_hours = '9-17'\nmeeting_duration = 30\npreferences = None\n\nprint(find_meeting_time(participants, work_hours, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_37"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time > preference\n\n\nparticipants = [\n    {'name': 'Catherine', 'busy': [\n        {'start': '10:30', 'end': '11:00'},\n        {'start': '12:30', 'end': '13:30'},\n        {'start': '14:30', 'end': '15:00'}\n    ]},\n    {'name': 'Michael', 'busy': [\n        {'start': '09:30', 'end': '10:30'},\n        {'start': '12:00', 'end': '13:00'},\n        {'start': '13:30', 'end': '14:00'},\n        {'start': '15:00', 'end': '15:30'}\n    ]},\n    {'name': 'Alexander', 'busy': [\n        {'start': '09:00', 'end': '09:30'},\n        {'start': '10:00', 'end': '10:30'},\n        {'start': '11:00', 'end': '12:00'},\n        {'start': '13:00', 'end': '13:30'},\n        {'start': '14:00', 'end': '16:00'},\n        {'start': '16:30', 'end': '17:00'}\n    ]}\n]\n\nwork_hours = '9-17'\nmeeting_duration = 30\npreferences = None\n\nprint(find_meeting_time(participants, work_hours, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_38"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time > preference\n\n\nparticipants = [\n    {'name': 'Emily', 'busy': []},\n    {'name': 'Victoria', 'busy': [\n        {'start': '13:30', 'end': '14:00'},\n        {'start': '14:30', 'end': '15:30'},\n        {'start': '16:30', 'end': '17:00'}\n    ]},\n    {'name': 'Nancy', 'busy': [\n        {'start': '09:00', 'end': '14:00'},\n        {'start': '14:30', 'end': '15:30'}\n    ]}\n]\n\nwork_hours = '9-17'\nmeeting_duration = 30\npreferences = None\n\nprint(find_meeting_time(participants, work_hours, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_39"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(jacob, gabriel, matthew, start_time, end_time, meeting_duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    jacob_blocked = [datetime.strptime(time, '%H:%M') for time in jacob.split(',')]\n    jacob_blocked = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in jacob_blocked]\n    jacob_blocked = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in jacob_blocked]\n\n    gabriel_blocked = [datetime.strptime(time, '%H:%M') for time in gabriel.split(',')]\n    gabriel_blocked = [(time, time + timedelta(minutes=120)) if time.minute == 30 else (time, time + timedelta(minutes=30)) for time in gabriel_blocked]\n    gabriel_blocked = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in gabriel_blocked]\n\n    matthew_blocked = [datetime.strptime(time, '%H:%M') for time in matthew.split(',')]\n    matthew_blocked = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in matthew_blocked]\n    matthew_blocked = [(time, time + timedelta(minutes=90)) if time.minute == 30 and time.hour == 12 else (time, time + timedelta(minutes=30)) for time in matthew_blocked]\n\n    current_time = start_time\n    while current_time < end_time:\n        jacob_available = all(not (blocked[0] <= current_time < blocked[1]) for blocked in jacob_blocked)\n        gabriel_available = all(not (blocked[0] <= current_time < blocked[1]) for blocked in gabriel_blocked)\n        matthew_available = all(not (blocked[0] <= current_time < blocked[1]) for blocked in matthew_blocked)\n\n        if jacob_available and gabriel_available and matthew_available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\njacob = '10:00,11:30,16:00'\ngabriel = '9:30,13:00,15:00'\nmatthew = '9:00,10:30,11:30,12:30,15:30'\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 60\n\nprint(find_meeting_time(jacob, gabriel, matthew, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_40"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preference=None):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n\n    current_time = start_time\n    if preference:\n        preference_time = datetime.strptime(preference, '%H:%M')\n        current_time = max(current_time, preference_time)\n\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Alan': '',\n    'Nancy': '11:00,13:00,14:00',\n    'Patricia': '10:00,12:30,13:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 30\npreference = '14:30'\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_41"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n\n    current_time = start_time\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Julie': '9:00,11:00,12:00,13:30,16:00',\n    'Sean': '9:00,13:00,15:00,16:00',\n    'Lori': '10:00,11:00,15:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n\n    current_time = start_time\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Albert': '9:30,12:00,14:00,15:00,16:30',\n    'Gregory': '11:00,12:30,13:30,15:30',\n    'Benjamin': '9:30,10:30,11:30,14:00,15:30,16:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_43"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preference=None):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        if schedule:\n            blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n            participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n            participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n        else:\n            participant_schedules[participant] = []\n\n    current_time = start_time\n    if preference:\n        preference_time = datetime.strptime(preference, '%H:%M')\n        current_time = min(current_time, preference_time)\n\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Isabella': '',\n    'Ronald': '11:30,14:00,16:00',\n    'Amanda': '9:30,12:30,13:30,15:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 30\npreference = '13:00'\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_44"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    participants_schedule = {}\n    for participant in participants:\n        participants_schedule[participant] = []\n\n    participants_schedule['Andrew'] = []\n    participants_schedule['Grace'] = []\n    participants_schedule['Samuel'] = [['09:00', '10:30'], ['11:30', '12:00'], ['13:00', '13:30'], ['14:00', '16:00'], ['16:30', '17:00']]\n\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in participants_schedule.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available:\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Andrew', 'Grace', 'Samuel']\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": "{11:30:12:00}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available:\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Arthur', 'Theresa', 'Carl']\nschedules = {\n    'Arthur': [['09:30', '10:00'], ['14:00', '14:30']],\n    'Theresa': [['09:00', '09:30'], ['12:00', '13:00'], ['15:00', '16:30']],\n    'Carl': [['09:00', '11:30'], ['12:00', '14:00'], ['14:30', '17:00']]\n}\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_46"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available:\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 60\nparticipants = ['David', 'Eric', 'Roger']\nschedules = {\n    'David': [],\n    'Eric': [['09:00', '09:30'], ['10:30', '11:30'], ['15:00', '15:30']],\n    'Roger': [['09:30', '10:30'], ['11:00', '12:00'], ['12:30', '13:00'], ['14:30', '15:00'], ['15:30', '16:30']]\n}\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_47"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available and (preferences is None or is_preferred(time_slot, preferences)):\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\ndef is_preferred(time_slot, preferences):\n    for preference in preferences:\n        if preference[0] <= time_slot[0] and time_slot[1] <= preference[1]:\n            return True\n    return False\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 60\nparticipants = ['Janet', 'Rachel', 'Cynthia']\nschedules = {\n    'Janet': [['09:30', '10:30'], ['12:30', '13:00'], ['14:00', '14:30']],\n    'Rachel': [],\n    'Cynthia': [['09:30', '10:00'], ['11:00', '11:30'], ['12:30', '14:30'], ['16:00', '17:00']]\n}\npreferences = [['13:30', '17:00']]\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_48"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available and (preferences is None or is_preferred(time_slot, preferences)):\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\ndef is_preferred(time_slot, preferences):\n    for preference in preferences:\n        if preference[0] <= time_slot[0] and time_slot[1] <= preference[1]:\n            return True\n    return False\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Teresa', 'Kathleen', 'Patricia']\nschedules = {\n    'Teresa': [['09:00', '10:00'], ['13:00', '13:30'], ['14:00', '14:30'], ['15:00', '15:30'], ['16:30', '17:00']],\n    'Kathleen': [['09:00', '09:30'], ['12:30', '13:00'], ['13:30', '14:00'], ['15:00', '15:30']],\n    'Patricia': [['09:00', '10:30'], ['11:30', '12:00'], ['13:00', '13:30'], ['14:00', '14:30'], ['15:30', '16:00'], ['16:30', '17:00']]\n}\npreferences = [['09:00', '14:30']]\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_49"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [],\n    [],\n    [\"09:00-10:30\", \"11:00-12:00\", \"12:30-13:30\", \"14:30-15:30\", \"16:00-16:30\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_50"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [\"11:30-12:00\", \"12:30-13:30\", \"14:00-14:30\"],\n    [\"10:00-10:30\", \"12:00-12:30\"],\n    [\"09:30-10:00\", \"10:30-11:00\", \"11:30-12:30\", \"13:00-14:30\", \"15:30-17:00\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_51"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [\"09:00-09:30\", \"10:00-11:00\", \"16:00-16:30\"],\n    [\"12:30-13:00\", \"16:00-16:30\"],\n    [\"09:00-14:30\", \"15:30-16:00\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_52"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [],\n    [\"09:30-10:00\", \"12:30-13:00\", \"14:30-15:00\", \"16:30-17:00\"],\n    [\"09:00-09:30\", \"10:00-11:00\", \"11:30-12:00\", \"13:00-14:00\", \"15:00-15:30\", \"16:30-17:00\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_53"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [\"11:00-11:30\", \"15:30-16:00\"],\n    [\"09:00-10:00\"],\n    [\"09:00-10:00\", \"10:30-11:00\", \"12:30-13:30\", \"14:00-14:30\", \"15:00-16:00\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"16:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_54"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Keith': [(14, 0, 14, 30), (16, 0, 16, 30)],\n        'Christine': [],\n        'Cynthia': [(9, 0, 10, 30), (11, 30, 17, 0)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Keith', 'Christine', 'Cynthia']\nmeeting_duration = '01:00'\nwork_hours = ('09:00', '17:00')\n\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_55"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Jeremy': [(12, 0, 13, 0), (13, 30, 14, 0), (15, 0, 15, 30)],\n        'Donna': [(9, 30, 10, 0), (13, 0, 13, 30), (16, 0, 17, 0)],\n        'Robert': [(9, 0, 11, 0), (11, 30, 12, 0), (12, 30, 17, 0)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Jeremy', 'Donna', 'Robert']\nmeeting_duration = '00:30'\nwork_hours = ('09:00', '17:00')\n\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_56"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Virginia': [(10, 0, 12, 0)],\n        'Charles': [(12, 0, 12, 30), (13, 0, 13, 30)],\n        'Megan': [(9, 0, 12, 0), (13, 30, 16, 0), (16, 30, 17, 0)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                if preferences and'start_after' in preferences:\n                    if time_slot[0] < preferences['start_after'][0] or (time_slot[0] == preferences['start_after'][0] and time_slot[1] < preferences['start_after'][1]):\n                        continue\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Virginia', 'Charles', 'Megan']\nmeeting_duration = '00:30'\nwork_hours = ('09:00', '17:00')\npreferences = {'start_after': (14, 30)}\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_57"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Joan': [(11, 0, 11, 30), (12, 30, 13, 0)],\n        'Theresa': [(12, 0, 12, 30), (15, 0, 15, 30)],\n        'Shirley': [(9, 30, 10, 30), (11, 0, 12, 0), (13, 0, 14, 0), (15, 30, 16, 30)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Joan', 'Theresa', 'Shirley']\nmeeting_duration = '01:00'\nwork_hours = ('09:00', '17:00')\n\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_58"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Jeffrey': [],\n        'Jack': [(10, 30, 11, 30), (13, 0, 13, 30), (14, 0, 14, 30), (16, 0, 17, 0)],\n        'Judith': [(9, 0, 10, 0), (10, 30, 11, 0), (11, 30, 14, 0), (14, 30, 15, 0), (15, 30, 17, 0)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                if preferences and'start_after' in preferences:\n                    if time_slot[0] < preferences['start_after'][0] or (time_slot[0] == preferences['start_after'][0] and time_slot[1] < preferences['start_after'][1]):\n                        continue\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Jeffrey', 'Jack', 'Judith']\nmeeting_duration = '00:30'\nwork_hours = ('09:00', '17:00')\npreferences = {'start_after': (14, 0)}\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_59"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Apply preferences\n    preferred_time_ranges = []\n    for start_time, end_time in available_time_ranges:\n        is_preferred = True\n        for participant, preference in preferences.items():\n            if preference and start_time >= int(preference.split(':')[0]) * 60 + int(preference.split(':')[1]):\n                is_preferred = False\n                break\n        if is_preferred:\n            preferred_time_ranges.append((start_time, end_time))\n\n    # Return the first available time range\n    if preferred_time_ranges:\n        start_time, end_time = preferred_time_ranges[0]\n    else:\n        start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Lisa': ['10:30 to 11:00', '11:30 to 12:00', '14:00 to 15:00'],\n    'Dorothy': [],\n    'Raymond': ['9:00 to 10:00', '10:30 to 11:00', '11:30 to 15:00', '16:00 to 17:00']\n}\nmeeting_duration = '0:30'\nwork_hours = '9:00 to 17:00'\npreferences = {\n    'Dorothy': '10:30'\n}\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_60"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Return the first available time range\n    start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Robert': [],\n    'Lisa': ['9:30 to 10:00', '11:30 to 12:00'],\n    'Patrick': ['9:30 to 11:30', '12:30 to 13:30', '16:00 to 17:00']\n}\nmeeting_duration = '1:00'\nwork_hours = '9:00 to 17:00'\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_61"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Return the first available time range\n    start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Abigail': [],\n    'Michael': [],\n    'Sharon': ['9:00 to 13:00', '14:00 to 17:00']\n}\nmeeting_duration = '1:00'\nwork_hours = '9:00 to 17:00'\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_62"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Return the first available time range\n    start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Madison': [],\n    'Judith': ['10:00 to 10:30', '11:00 to 12:00', '12:30 to 13:00'],\n    'Roger': ['9:00 to 9:30', '10:30 to 11:00', '12:00 to 12:30', '13:00 to 13:30', '14:00 to 16:00']\n}\nmeeting_duration = '1:00'\nwork_hours = '9:00 to 17:00'\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_63"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Return the first available time range\n    start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Nancy': ['9:30 to 10:00', '12:30 to 13:00'],\n    'Albert': [],\n    'Nathan': ['9:00 to 12:30', '13:00 to 14:30', '16:00 to 17:00']\n}\nmeeting_duration = '1:00'\nwork_hours = '9:00 to 17:00'\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_64"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(john_schedule, andrea_schedule, lisa_schedule, meeting_duration, start_time, end_time, andrea_end_time):\n    john_busy = [(130, 300), (930, 600)]\n    andrea_busy = [(900, 930), (1100, 1230), (1500, 1530), (1600, 1630)]\n    lisa_busy = [(900, 1000), (1030, 1100), (1200, 1230), (1400, 1530), (1600, 1630)]\n    \n    john_schedule = john_busy\n    andrea_schedule = andrea_busy\n    lisa_schedule = lisa_busy\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if meeting_end > andrea_end_time:\n            return None\n        if not (any(start <= meeting_start < end for start, end in john_schedule) or \n                any(start <= meeting_start < end for start, end in andrea_schedule) or \n                any(start <= meeting_start < end for start, end in lisa_schedule) or \n                any(start <= meeting_end < end for start, end in john_schedule) or \n                any(start <= meeting_end < end for start, end in andrea_schedule) or \n                any(start <= meeting_end < end for start, end in lisa_schedule)):\n            return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time([], [], [], 30, 900, 1700, 1630))\n```",
            "count": "calendar_scheduling_example_65"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Ronald', [(0, 0)]),\n        ('Maria', [(0, 0)]),\n        ('Charles', [(540, 630), (660, 690), (810, 840), (870, 900), (930, 990)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Ronald', 'Maria', 'Charles'], 60, 540, 1020))\n```",
            "count": "calendar_scheduling_example_66"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time, preferences=None):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Jacqueline', [(780, 810), (960, 990)]),\n        ('Christian', [(0, 0)]),\n        ('Linda', [(540, 630), (690, 780), (840, 870), (930, 990)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if preferences and any(meeting_start >= preference for preference in preferences):\n            break\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            if meeting_end <= 840:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Jacqueline', 'Christian', 'Linda'], 30, 540, 1020))\n```",
            "count": "calendar_scheduling_example_67"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Michael', [(600, 630), (690, 720), (810, 840), (930, 960)]),\n        ('Bryan', [(0, 0)]),\n        ('Lauren', [(540, 630), (870, 1020)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Michael', 'Bryan', 'Lauren'], 30, 540, 1020))\n```",
            "count": "calendar_scheduling_example_68"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Shirley', [(660, 690), (840, 900), (960, 990)]),\n        ('Stephen', [(780, 810), (930, 960)]),\n        ('Paul', [(540, 600), (660, 1020)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Shirley', 'Stephen', 'Paul'], 60, 540, 1020))\n```",
            "count": "calendar_scheduling_example_69"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Denise','schedules': ['12:00-12:30', '15:30-16:00']},\n    {'name': 'Angela','schedules': []},\n    {'name': 'Natalie','schedules': ['9:00-11:30', '12:00-13:00', '14:00-14:30', '15:00-17:00']}\n]\n\nmeeting_duration = 0.5\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n        if 'preferences' in participant:\n            preference_start, preference_end = map(int, participant['preferences'].split('-')[0].split(':')), map(int, participant['preferences'].split('-')[1].split(':'))\n            preference_start, preference_end = preference_start[0] * 60 + preference_start[1], preference_end[0] * 60 + preference_end[1]\n            time_slots = [i for i in time_slots if i >= preference_start and i <= preference_end - meeting_duration]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Nicole','schedules': []},\n    {'name': 'John','schedules': ['12:30-13:00', '16:30-17:00'], 'preferences': '9:00-12:00'},\n    {'name': 'Ethan','schedules': ['9:00-10:00', '11:30-14:00', '14:30-17:00']}\n]\n\nmeeting_duration = 0.5\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_71"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Mason','schedules': []},\n    {'name': 'Amy','schedules': ['9:30-11:30', '13:00-13:30', '16:30-17:00']},\n    {'name': 'Christopher','schedules': ['9:00-10:00', '12:00-13:30', '14:30-15:00', '15:30-16:30']}\n]\n\nmeeting_duration = 1\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_72"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Bradley','schedules': ['9:30-10:00', '13:00-13:30', '14:30-15:00', '16:30-17:00']},\n    {'name': 'Andrew','schedules': ['9:00-9:30', '12:30-13:30', '14:00-14:30', '15:00-16:00']},\n    {'name': 'Melissa','schedules': ['9:00-9:30', '10:00-10:30', '11:00-14:00', '15:00-15:30', '16:00-16:30']}\n]\n\nmeeting_duration = 0.5\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_73"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n        if 'preferences' in participant:\n            preference_start, preference_end = map(int, participant['preferences'].split('-')[0].split(':')), map(int, participant['preferences'].split('-')[1].split(':'))\n            preference_start, preference_end = preference_start[0] * 60 + preference_start[1], preference_end[0] * 60 + preference_end[1]\n            time_slots = [i for i in time_slots if i >= preference_start and i <= preference_end - meeting_duration]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Eric','schedules': ['10:00-12:00'], 'preferences': '9:00-15:30'},\n    {'name': 'Albert','schedules': ['12:00-12:30', '15:30-16:00']},\n    {'name': 'Katherine','schedules': ['10:00-11:00', '11:30-14:00', '15:00-15:30']}\n]\n\nmeeting_duration = 1\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_74"
        },
        {
            "final_program_time": "{09:31:10:31}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(jacob, amanda, lisa, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if is_available(jacob, time) and is_available(amanda, time) and is_available(lisa, time):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\njacob = [(9*60, 9*60+30), (12*60+30, 13*60), (14*60+30, 15*60), (16*60+30, 17*60)]\namanda = [(10*60, 10*60+30), (12*60, 12*60+30)]\nlisa = [(11*60, 13*60), (14*60+30, 16*60+30)]\nstart_time = 9*60\nend_time = 17*60\nduration = 60\n\nprint(find_meeting_time(jacob, amanda, lisa, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_75"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(joyce, beverly, peter, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if is_available(beverly, time) and is_available(peter, time):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\njoyce = []\nbeverly = [(9*60+30, 10*60), (11*60, 11*60+30), (12*60+30, 13*60), (14*60, 14*60+30), (15*60+30, 16*60), (16*60+30, 17*60)]\npeter = [(9*60+30, 10*60+30), (11*60+30, 13*60), (14*60+30, 15*60+30), (16*60+30, 17*60)]\nstart_time = 9*60\nend_time = 17*60\nduration = 60\n\nprint(find_meeting_time(joyce, beverly, peter, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_76"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(donald, joyce, abigail, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, 12*60 - duration + 1):\n        if is_available(donald, time) and is_available(joyce, time) and is_available(abigail, time):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\ndonald = [(10*60, 10*60+30), (11*60, 11*60+30), (12*60, 12*60+30), (13*60, 13*60+30), (15*60+30, 16*60+30)]\njoyce = [(11*60, 13*60), (14*60+30, 15*60), (16*60, 16*60+30)]\nabigail = [(9*60+30, 10*60), (11*60+30, 12*60), (13*60, 14*60), (15*60, 17*60)]\nstart_time = 9*60\nend_time = 17*60\nduration = 30\n\nprint(find_meeting_time(donald, joyce, abigail, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_77"
        },
        {
            "final_program_time": "{12:30:13:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(ronald, teresa, carol, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if is_available(ronald, time) and is_available(teresa, time) and is_available(carol, time):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nronald = [(9*60, 10*60), (11*60, 12*60)]\nteresa = [(10*60+30, 11*60), (14*60, 14*60+30)]\ncarol = [(9*60, 12*60+30), (14*60, 15*60+30), (16*60, 17*60)]\nstart_time = 9*60\nend_time = 17*60\nduration = 60\n\nprint(find_meeting_time(ronald, teresa, carol, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_78"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(amy, emma, john, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if is_available(amy, time) and is_available(emma, time) and is_available(john, time):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\namy = [(11*60, 11*60+30), (12*60, 12*60+30)]\nemma = []\njohn = [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 16*60), (16*60+30, 17*60)]\nstart_time = 9*60\nend_time = 17*60\nduration = 60\n\nprint(find_meeting_time(amy, emma, john, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_79"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preferences=None):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    def apply_preferences(participants, time_range, preferences):\n        for participant, preference in preferences.items():\n            if preference and time_range[1] > preference:\n                time_range = find_time(participants, time_range[0], preference, meeting_duration)\n        return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n    if preferences:\n        time_range = apply_preferences(participants, time_range, preferences)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Michelle', 'busy': [(9.5, 10), (12.5, 13)]},\n    {'name': 'Billy', 'busy': [(10.5, 11), (11.5, 12), (14.5, 15), (16, 16.5)]},\n    {'name': 'Alexis', 'busy': [(9.5, 10.5), (11, 12), (12.5, 13), (13.5, 14.5), (16, 16.5)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 30\npreferences = {'Alexis': 15 * 60}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_80"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Jeremy', 'busy': [(14.5, 15.5)]},\n    {'name': 'Lawrence', 'busy': [(15.5, 16), (16.5, 17)]},\n    {'name': 'Helen', 'busy': [(9.5, 10), (10.5, 11), (11.5, 12), (13, 14), (15, 15.5), (16, 17)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_81"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Michael', 'busy': [(9.5, 10.5), (15, 15.5), (16, 16.5)]},\n    {'name': 'Eric', 'busy': []},\n    {'name': 'Arthur', 'busy': [(9, 12), (13, 15), (15.5, 16), (16.5, 17)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Anthony', 'busy': [(14, 14.5), (15, 15.5)]},\n    {'name': 'Ronald', 'busy': [(9, 10), (12, 12.5), (13.5, 14)]},\n    {'name': 'Jonathan', 'busy': [(9, 10), (11, 11.5), (12, 13), (14, 14.5), (15, 17)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_83"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Kevin', 'busy': [(9.5, 10), (10.5, 11), (15, 16)]},\n    {'name': 'Ryan', 'busy': [(10.5, 11.5), (12.5, 13), (13.5, 14)]},\n    {'name': 'Eugene', 'busy': [(9, 9.5), (10, 11), (12.5, 17)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_84"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration, preferences):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Apply preferences\n    for preference in preferences:\n        start_hour, start_minute = map(int, preference.split(':'))\n        start_time_minutes = start_hour * 60 + start_minute\n        available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                if hour * 60 + minute < start_time_minutes]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Julia\": [[\"09:30\", \"10:00\"], [\"14:00\", \"14:30\"], [\"15:00\", \"15:30\"], [\"16:30\", \"17:00\"]],\n    \"Martha\": [[\"09:00\", \"11:00\"], [\"12:00\", \"15:00\"]],\n    \"Kelly\": []\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"00:30\"\npreferences = [\"13:30\"]\n\nprint(find_meeting_time(participants, start_time, end_time, duration, preferences))\n```",
            "count": "calendar_scheduling_example_85"
        },
        {
            "final_program_time": "{09:30:10:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Samuel\": [[\"09:00\", \"09:30\"], [\"10:00\", \"10:30\"], [\"12:00\", \"12:30\"], [\"14:00\", \"15:00\"], [\"16:00\", \"16:30\"]],\n    \"Emma\": [],\n    \"Brittany\": [[\"11:30\", \"14:30\"], [\"15:00\", \"15:30\"], [\"16:30\", \"17:00\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_86"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Brittany\": [[\"12:00\", \"13:30\"], [\"14:30\", \"15:00\"], [\"15:30\", \"16:00\"], [\"16:30\", \"17:00\"]],\n    \"Wayne\": [[\"09:30\", \"10:00\"], [\"13:00\", \"15:00\"], [\"16:30\", \"17:00\"]],\n    \"Charles\": [[\"09:00\", \"09:30\"], [\"10:00\", \"10:30\"], [\"11:30\", \"13:30\"], [\"14:30\", \"16:30\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"00:30\"\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_87"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Dennis\": [],\n    \"Joseph\": [[\"09:00\", \"09:30\"], [\"12:30\", \"13:00\"]],\n    \"Isabella\": [[\"09:00\", \"10:30\"], [\"11:30\", \"12:00\"], [\"13:30\", \"14:00\"], [\"14:30\", \"17:00\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_88"
        },
        {
            "final_program_time": "{09:30:10:30}",
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Michelle\": [[\"11:00\", \"12:00\"], [\"14:00\", \"15:00\"]],\n    \"Andrea\": [[\"09:00\", \"09:30\"], [\"11:30\", \"12:30\"], [\"13:30\", \"14:00\"], [\"14:30\", \"15:00\"], [\"16:00\", \"16:30\"]],\n    \"Douglas\": [[\"09:00\", \"09:30\"], [\"10:00\", \"10:30\"], [\"11:00\", \"15:00\"], [\"16:00\", \"17:00\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_89"
        },
        {
            "final_program_time": "{12:30:12:60}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(adam_schedule, willie_schedule, gloria_schedule, start_time, end_time, meeting_duration, gloria_preference):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(adam_schedule, time_range) or not is_time_available(willie_schedule, time_range) or not is_time_available(gloria_schedule, time_range):\n                continue\n            if hour >= gloria_preference and minute >= 30:\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\nadam_schedule = [\"9:30-10:00\", \"10:30-11:00\", \"11:30-12:00\", \"16:30-17:00\"]\nwillie_schedule = [\"9:00-9:30\", \"15:30-16:00\"]\ngloria_schedule = [\"9:30-12:30\", \"13:00-13:30\", \"15:30-16:00\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 30\ngloria_preference = 15\n\nprint(find_meeting_time(adam_schedule, willie_schedule, gloria_schedule, start_time, end_time, meeting_duration, gloria_preference))\n```",
            "count": "calendar_scheduling_example_90"
        },
        {
            "final_program_time": "{13:00:13:60}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, start_time, end_time, meeting_duration):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(danielle_schedule, time_range) or not is_time_available(bruce_schedule, time_range) or not is_time_available(eric_schedule, time_range):\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\ndanielle_schedule = [\"9:00-10:00\", \"10:30-11:00\", \"14:30-15:00\", \"15:30-16:00\", \"16:30-17:00\"]\nbruce_schedule = [\"11:00-11:30\", \"12:30-13:00\", \"14:00-14:30\", \"15:30-16:00\"]\neric_schedule = [\"9:00-9:30\", \"10:00-11:00\", \"11:30-13:00\", \"14:30-15:30\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 60\n\nprint(find_meeting_time(danielle_schedule, bruce_schedule, eric_schedule, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": "{11:00:11:60}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, start_time, end_time, meeting_duration):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(jacqueline_schedule, time_range) or not is_time_available(henry_schedule, time_range) or not is_time_available(william_schedule, time_range):\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\njacqueline_schedule = [\"9:30-10:00\", \"16:30-17:00\"]\nhenry_schedule = []\nwilliam_schedule = [\"9:30-10:30\", \"12:30-15:00\", \"15:30-17:00\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 60\n\nprint(find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_92"
        },
        {
            "final_program_time": "{12:30:12:60}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(austin_schedule, danielle_schedule, charles_schedule, start_time, end_time, meeting_duration):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(austin_schedule, time_range) or not is_time_available(danielle_schedule, time_range) or not is_time_available(charles_schedule, time_range):\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\naustin_schedule = [\"10:30-11:00\", \"13:30-14:00\"]\ndanielle_schedule = [\"9:00-10:00\", \"11:00-12:00\", \"13:00-13:30\", \"15:30-16:00\"]\ncharles_schedule = [\"9:00-11:30\", \"12:00-12:30\", \"13:00-17:00\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 30\n\nprint(find_meeting_time(austin_schedule, danielle_schedule, charles_schedule, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_93"
        },
        {
            "final_program_time": "{14:30:14:60}",
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(nicholas_schedule, elizabeth_schedule, sandra_schedule, start_time, end_time, meeting_duration, sandra_preference):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(nicholas_schedule, time_range) or not is_time_available(elizabeth_schedule, time_range) or not is_time_available(sandra_schedule, time_range):\n                continue\n            if hour < sandra_preference:\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\nnicholas_schedule = []\nelizabeth_schedule = [\"9:30-10:00\", \"11:30-12:00\", \"13:30-14:30\", \"15:00-15:30\", \"16:30-17:00\"]\nsandra_schedule = [\"9:00-9:30\", \"10:00-10:30\", \"11:30-13:30\", \"15:30-16:30\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 30\nsandra_preference = 13\n\nprint(find_meeting_time(nicholas_schedule, elizabeth_schedule, sandra_schedule, start_time, end_time, meeting_duration, sandra_preference))\n```",
            "count": "calendar_scheduling_example_94"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preferences=None):\n    # Define the schedules for each participant\n    schedules = {\n        'Jennifer': [(12, 0, 12, 30), (16, 0, 16, 30)],\n        'Gary': [(9, 30, 10, 0), (10, 30, 11, 0), (11, 30, 12, 30), (14, 0, 14, 30), (16, 30, 17, 0)],\n        'Frances': [(9, 0, 11, 0), (11, 30, 12, 30), (13, 0, 17, 0)],\n    }\n\n    # Define the preferences for each participant\n    if preferences is None:\n        preferences = {}\n\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                # Check if the participant has any preferences\n                if participant in preferences:\n                    preference_start = datetime.strptime(f\"{preferences[participant][0]}:{preferences[participant][1]}\", \"%H:%M\")\n                    if current_time < preference_start:\n                        available = False\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, and preferences\nparticipants = ['Jennifer', 'Gary', 'Frances']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 30\npreferences = {'Jennifer': (12, 30)}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_95"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules):\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, and schedules\nparticipants = ['Christopher', 'Robert', 'Wayne']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 30\nschedules = {\n    'Christopher': [(9, 30, 10, 0), (10, 30, 11, 0), (11, 30, 13, 0), (15, 0, 15, 30)],\n    'Robert': [(9, 30, 10, 0), (11, 0, 11, 30), (12, 0, 12, 30), (13, 30, 14, 30), (15, 0, 15, 30)],\n    'Wayne': [(10, 0, 17, 0)],\n}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, schedules))\n```",
            "count": "calendar_scheduling_example_96"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                # Check if the participant has any preferences\n                if participant in preferences:\n                    preference_start = datetime.strptime(f\"{preferences[participant][0]}:{preferences[participant][1]}\", \"%H:%M\")\n                    if current_time < preference_start:\n                        available = False\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, schedules, and preferences\nparticipants = ['Joseph', 'Kyle', 'Joan']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 60\nschedules = {\n    'Joseph': [(9, 0, 10, 0), (10, 30, 11, 0), (12, 30, 13, 0), (14, 30, 15, 30)],\n    'Kyle': [(12, 30, 13, 30)],\n    'Joan': [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 11, 30), (12, 30, 14, 0), (14, 30, 15, 0), (15, 30, 16, 0)],\n}\npreferences = {'Joseph': (14, 30)}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences))\n```",
            "count": "calendar_scheduling_example_97"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                # Check if the participant has any preferences\n                if participant in preferences:\n                    preference_end = datetime.strptime(f\"{preferences[participant][0]}:{preferences[participant][1]}\", \"%H:%M\")\n                    if current_time >= preference_end:\n                        available = False\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, schedules, and preferences\nparticipants = ['Juan', 'Marilyn', 'Ronald']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 30\nschedules = {\n    'Juan': [(9, 0, 10, 30), (15, 30, 16, 0)],\n    'Marilyn': [(11, 0, 11, 30), (12, 30, 13, 0)],\n    'Ronald': [(9, 0, 10, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 0, 16, 30)],\n}\npreferences = {'Juan': (16, 0)}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences))\n```",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                # Check if the participant has any preferences\n                if participant in preferences:\n                    preference_start = datetime.strptime(f\"{preferences[participant][0]}:{preferences[participant][1]}\", \"%H:%M\")\n                    if current_time < preference_start:\n                        available = False\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, schedules, and preferences\nparticipants = ['Stephanie', 'Mark', 'Scott']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 60\nschedules = {\n    'Stephanie': [(9, 0, 9, 30), (13, 30, 14, 0)],\n    'Mark': [],\n    'Scott': [(9, 0, 10, 0), (11, 0, 12, 30), (14, 30, 15, 0), (16, 0, 17, 0)],\n}\npreferences = {'Mark': (15, 0)}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences))\n```",
            "count": "calendar_scheduling_example_99"
        }
    ],
    "5shot": [
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Roger'] = []\n    participant_schedules['Karen'] = [(10*60, 10.5*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15*60), (15.5*60, 16*60)]\n    participant_schedules['Dorothy'] = [(9*60, 10*60), (10.5*60, 11*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15.5*60), (16*60, 17*60)]\n\n    participant_schedules['Douglas'] = [(12*60, 12.5*60), (15*60, 15.5*60)]\n    participant_schedules['Lawrence'] = [(10.5*60, 12*60), (13*60, 13.5*60), (14*60, 14.5*60), (15.5*60, 16*60)]\n    participant_schedules['Isabella'] = [(9*60, 12.5*60), (13.5*60, 17*60)]\n\n    participant_schedules['Joshua'] = [(10*60, 10.5*60), (12*60, 12.5*60), (14*60, 14.5*60), (15*60, 15.5*60)]\n    participant_schedules['Denise'] = []\n    participant_schedules['Jeremy'] = [(9.5*60, 10.5*60), (12*60, 13*60), (13.5*60, 14*60), (14.5*60, 15*60), (15.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Alan'] = [(13*60, 13.5*60), (14*60, 14.5*60)]\n    participant_schedules['Elizabeth'] = [(9*60, 9.5*60), (11*60, 11.5*60)]\n    participant_schedules['Denise2'] = [(9*60, 10*60), (10.5*60, 11.5*60), (12.5*60, 13*60), (13.5*60, 14*60), (14.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Mason'] = [(9.5*60, 10*60), (11*60, 11.5*60), (14.5*60, 15*60), (16.5*60, 17*60)]\n    participant_schedules['Bruce'] = []\n    participant_schedules['Christopher'] = [(9.5*60, 10.5*60), (11.5*60, 12.5*60), (15*60, 17*60)]\n\n    participant_schedules['Michelle'] = [(11*60, 12*60)]\n    participant_schedules['Steven'] = [(9*60, 9.5*60), (11.5*60, 12*60), (13.5*60, 14*60), (15.5*60, 16*60)]\n    participant_schedules['Jerry'] = [(9*60, 9.5*60), (10*60, 11*60), (11.5*60, 12.5*60), (13*60, 14.5*60), (15.5*60, 16*60), (16.5*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Michelle', 'Steven', 'Jerry']\nmeeting_duration = 1\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_0"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Roger'] = []\n    participant_schedules['Karen'] = [(10*60, 10.5*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15*60), (15.5*60, 16*60)]\n    participant_schedules['Dorothy'] = [(9*60, 10*60), (10.5*60, 11*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15.5*60), (16*60, 17*60)]\n\n    participant_schedules['Douglas'] = [(12*60, 12.5*60), (15*60, 15.5*60)]\n    participant_schedules['Lawrence'] = [(10.5*60, 12*60), (13*60, 13.5*60), (14*60, 14.5*60), (15.5*60, 16*60)]\n    participant_schedules['Isabella'] = [(9*60, 12.5*60), (13.5*60, 17*60)]\n\n    participant_schedules['Joshua'] = [(10*60, 10.5*60), (12*60, 12.5*60), (14*60, 14.5*60), (15*60, 15.5*60)]\n    participant_schedules['Denise'] = []\n    participant_schedules['Jeremy'] = [(9.5*60, 10.5*60), (12*60, 13*60), (13.5*60, 14*60), (14.5*60, 15*60), (15.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Alan'] = [(13*60, 13.5*60), (14*60, 14.5*60)]\n    participant_schedules['Elizabeth'] = [(9*60, 9.5*60), (11*60, 11.5*60)]\n    participant_schedules['Denise2'] = [(9*60, 10*60), (10.5*60, 11.5*60), (12.5*60, 13*60), (13.5*60, 14*60), (14.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Mason'] = [(9.5*60, 10*60), (11*60, 11.5*60), (14.5*60, 15*60), (16.5*60, 17*60)]\n    participant_schedules['Bruce'] = []\n    participant_schedules['Christopher'] = [(9.5*60, 10.5*60), (11.5*60, 12.5*60), (15*60, 17*60)]\n\n    participant_schedules['Raymond'] = [(9*60, 9.5*60), (11.5*60, 12*60), (13*60, 13.5*60), (15*60, 15.5*60)]\n    participant_schedules['Billy'] = [(10*60, 10.5*60), (12*60, 13*60), (16.5*60, 17*60)]\n    participant_schedules['Donald'] = [(9*60, 9.5*60), (10*60, 11*60), (12*60, 13*60), (14*60, 14.5*60), (16*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all and time + meeting_duration_minutes <= 15*60:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Raymond', 'Billy', 'Donald']\nmeeting_duration = 0.5\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Roger'] = []\n    participant_schedules['Karen'] = [(10*60, 10.5*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15*60), (15.5*60, 16*60)]\n    participant_schedules['Dorothy'] = [(9*60, 10*60), (10.5*60, 11*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15.5*60), (16*60, 17*60)]\n\n    participant_schedules['Douglas'] = [(12*60, 12.5*60), (15*60, 15.5*60)]\n    participant_schedules['Lawrence'] = [(10.5*60, 12*60), (13*60, 13.5*60), (14*60, 14.5*60), (15.5*60, 16*60)]\n    participant_schedules['Isabella'] = [(9*60, 12.5*60), (13.5*60, 17*60)]\n\n    participant_schedules['Joshua'] = [(10*60, 10.5*60), (12*60, 12.5*60), (14*60, 14.5*60), (15*60, 15.5*60)]\n    participant_schedules['Denise'] = []\n    participant_schedules['Jeremy'] = [(9.5*60, 10.5*60), (12*60, 13*60), (13.5*60, 14*60), (14.5*60, 15*60), (15.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Alan'] = [(13*60, 13.5*60), (14*60, 14.5*60)]\n    participant_schedules['Elizabeth'] = [(9*60, 9.5*60), (11*60, 11.5*60)]\n    participant_schedules['Denise2'] = [(9*60, 10*60), (10.5*60, 11.5*60), (12.5*60, 13*60), (13.5*60, 14*60), (14.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Mason'] = [(9.5*60, 10*60), (11*60, 11.5*60), (14.5*60, 15*60), (16.5*60, 17*60)]\n    participant_schedules['Bruce'] = []\n    participant_schedules['Christopher'] = [(9.5*60, 10.5*60), (11.5*60, 12.5*60), (15*60, 17*60)]\n\n    participant_schedules['Roy'] = [(9*60, 9.5*60), (10*60, 10.5*60), (11*60, 11.5*60), (12.5*60, 13*60)]\n    participant_schedules['Kathryn'] = [(9.5*60, 10*60), (16.5*60, 17*60)]\n    participant_schedules['Amy'] = [(9*60, 14.5*60), (15*60, 16*60), (16.5*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all and time + meeting_duration_minutes <= 15.5*60:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Roy', 'Kathryn', 'Amy']\nmeeting_duration = 0.5\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_2"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:30:10:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n    \n    participant_schedules['Roger'] = []\n    participant_schedules['Karen'] = [(10*60, 10.5*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15*60), (15.5*60, 16*60)]\n    participant_schedules['Dorothy'] = [(9*60, 10*60), (10.5*60, 11*60), (11.5*60, 12*60), (12.5*60, 13*60), (14*60, 15.5*60), (16*60, 17*60)]\n\n    participant_schedules['Douglas'] = [(12*60, 12.5*60), (15*60, 15.5*60)]\n    participant_schedules['Lawrence'] = [(10.5*60, 12*60), (13*60, 13.5*60), (14*60, 14.5*60), (15.5*60, 16*60)]\n    participant_schedules['Isabella'] = [(9*60, 12.5*60), (13.5*60, 17*60)]\n\n    participant_schedules['Joshua'] = [(10*60, 10.5*60), (12*60, 12.5*60), (14*60, 14.5*60), (15*60, 15.5*60)]\n    participant_schedules['Denise'] = []\n    participant_schedules['Jeremy'] = [(9.5*60, 10.5*60), (12*60, 13*60), (13.5*60, 14*60), (14.5*60, 15*60), (15.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Alan'] = [(13*60, 13.5*60), (14*60, 14.5*60)]\n    participant_schedules['Elizabeth'] = [(9*60, 9.5*60), (11*60, 11.5*60)]\n    participant_schedules['Denise2'] = [(9*60, 10*60), (10.5*60, 11.5*60), (12.5*60, 13*60), (13.5*60, 14*60), (14.5*60, 16*60), (16.5*60, 17*60)]\n\n    participant_schedules['Mason'] = [(9.5*60, 10*60), (11*60, 11.5*60), (14.5*60, 15*60), (16.5*60, 17*60)]\n    participant_schedules['Bruce'] = []\n    participant_schedules['Christopher'] = [(9.5*60, 10.5*60), (11.5*60, 12.5*60), (15*60, 17*60)]\n\n    participant_schedules['Arthur'] = [(9*60, 9.5*60), (10.5*60, 12*60), (16*60, 17*60)]\n    participant_schedules['Michael'] = [(13*60, 13.5*60), (14*60, 14.5*60)]\n    participant_schedules['Samantha'] = [(10.5*60, 11*60), (12*60, 15*60), (15.5*60, 17*60)]\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n    meeting_duration_minutes = meeting_duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration_minutes + 1):\n        works_for_all = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time + meeting_duration_minutes <= end:\n                    works_for_all = False\n                    break\n                if time < start and time + meeting_duration_minutes > start:\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n        if works_for_all:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration_minutes) // 60\n            end_minute = (time + meeting_duration_minutes) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = ['Arthur', 'Michael', 'Samantha']\nmeeting_duration = 1\nstart_time = 9\nend_time = 17\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_3"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, duration, preferences=None):\n    def is_available(participant, start_time):\n        for busy_time in participant['busy']:\n            if start_time >= busy_time[0] and start_time < busy_time[1]:\n                return False\n        return True\n\n    def find_available_time(participants, duration, start_time=9*60, end_time=17*60):\n        for time in range(start_time, end_time - duration + 1):\n            if all(is_available(participant, time) for participant in participants):\n                return time\n        return None\n\n    participants = [{'name': name, 'busy': busy} for name, busy in participants.items()]\n    duration = duration * 60\n    start_time = find_available_time(participants, duration)\n    if start_time is None:\n        return None\n    end_time = start_time + duration\n    if preferences and 'after' in preferences:\n        after_time = preferences['after'] * 60\n        if start_time < after_time:\n            return None\n    return f\"{{{start_time//60:02d}:{start_time%60:02d}:{end_time//60:02d}:{end_time%60:02d}}}\"\n\n# TASK 1\nparticipants = {\n    'Roger': [],\n    'Karen': [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)],\n    'Dorothy': [(9*60, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)],\n}\nduration = 0.5\nprint(schedule_meeting(participants, duration))\n\n# TASK 2\nparticipants = {\n    'Douglas': [(12*60, 12*60+30), (15*60, 15*60+30)],\n    'Lawrence': [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)],\n    'Isabella': [(9*60, 12*60+30), (13*60+30, 17*60)],\n}\nduration = 0.5\nprint(schedule_meeting(participants, duration))\n\n# TASK 3\nparticipants = {\n    'Joshua': [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)],\n    'Denise': [],\n    'Jeremy': [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)],\n}\nduration = 1\nprint(schedule_meeting(participants, duration))\n\n# TASK 4\nparticipants = {\n    'Alan': [(13*60, 13*60+30), (14*60, 14*60+30)],\n    'Elizabeth': [(9*60, 9*60+30), (11*60, 11*60+30)],\n    'Denise': [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)],\n}\nduration = 0.5\nprint(schedule_meeting(participants, duration))\n\n# TASK 5\nparticipants = {\n    'Mason': [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)],\n    'Bruce': [],\n    'Christopher': [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)],\n}\nduration = 0.5\npreferences = {'after': 12.5}\nprint(schedule_meeting(participants, duration, preferences))\n\n# TASK 6\nparticipants = {\n    'Donna': [(14*60, 14*60+30), (15*60+30, 16*60)],\n    'John': [(11*60, 11*60+30), (16*60+30, 17*60)],\n    'Billy': [(9*60, 10*60), (10*60+30, 14*60), (14*60+30, 17*60)],\n}\nduration = 0.5\nprint(schedule_meeting(participants, duration))\n```",
            "count": "calendar_scheduling_example_4"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Kathryn\": [\"9:00 to 9:30\", \"10:30 to 11:00\", \"11:30 to 12:00\", \"13:30 to 14:30\", \"16:30 to 17:00\"],\n    \"Charlotte\": [\"12:00 to 12:30\", \"16:00 to 16:30\"],\n    \"Lauren\": [\"9:00 to 10:00\", \"12:00 to 12:30\", \"13:30 to 14:30\", \"15:00 to 16:00\", \"16:30 to 17:00\"]\n}\nmeeting_duration = 0.5\nwork_hours = (9, 17)\npreferences = {\"Charlotte\": 13.5}\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_5"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Thomas\": [],\n    \"Dylan\": [\"10:30 to 11:00\", \"13:30 to 14:00\"],\n    \"Jerry\": [\"9:00 to 11:00\", \"11:30 to 14:30\", \"16:00 to 17:00\"]\n}\nmeeting_duration = 1\nwork_hours = (9, 17)\npreferences = None\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_6"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Heather\": [\"9:00 to 9:30\", \"10:30 to 11:00\", \"13:00 to 14:00\", \"14:30 to 15:00\", \"16:00 to 16:30\"],\n    \"Nicholas\": [],\n    \"Zachary\": [\"9:00 to 10:30\", \"11:00 to 12:00\", \"12:30 to 13:00\", \"13:30 to 16:30\"]\n}\nmeeting_duration = 0.5\nwork_hours = (9, 17)\npreferences = {\"Zachary\": 14}\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_7"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = work_hours\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n\n    # Convert blocked times to minutes\n    blocked_times = {}\n    for participant, times in participants.items():\n        blocked_times[participant] = []\n        for time in times:\n            start, end = time.split(' to ')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            blocked_times[participant].append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    # Find available time slots for each participant\n    available_time_slots = {}\n    for participant, times in blocked_times.items():\n        available_time_slots[participant] = []\n        current_time = start_time\n        for start, end in times:\n            if current_time < start:\n                available_time_slots[participant].append((current_time, start))\n            current_time = end\n        if current_time < end_time:\n            available_time_slots[participant].append((current_time, end_time))\n\n    # Add participants with no blocked times\n    for participant in [p for p in participants if not participants[p]]:\n        available_time_slots[participant] = [(start_time, end_time)]\n\n    # Find common available time slots\n    common_time_slots = available_time_slots[list(available_time_slots.keys())[0]]\n    for participant, times in available_time_slots.items():\n        common_time_slots = [slot for slot in common_time_slots if any(start <= slot[0] and slot[1] <= end for start, end in times)]\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            if preference:\n                common_time_slots = [slot for slot in common_time_slots if slot[1] <= preference * 60]\n\n    # Find a time slot that fits the meeting duration\n    for slot in common_time_slots:\n        if slot[1] - slot[0] >= meeting_duration * 60:\n            start_hour, start_minute = divmod(slot[0], 60)\n            end_hour, end_minute = divmod(slot[0] + meeting_duration * 60, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants, meeting duration, work hours, and preferences\nparticipants = {\n    \"Adam\": [\"10:00 to 10:30\", \"12:30 to 13:00\", \"13:30 to 14:30\"],\n    \"Jerry\": [\"9:00 to 9:30\", \"12:00 to 12:30\", \"15:00 to 16:00\"],\n    \"Matthew\": [\"9:30 to 11:00\", \"11:30 to 12:30\", \"13:00 to 14:00\", \"14:30 to 17:00\"]\n}\nmeeting_duration = 0.5\nwork_hours = (9, 17)\npreferences = None\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_8"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n\n    for participant, schedule in participant_schedules.items():\n        if participant == 'Diane':\n            schedule.append((9*60, 9*60+30))\n            schedule.append((12*60, 12*60+30))\n            schedule.append((14*60+30, 15*60+30))\n        elif participant == 'Kelly':\n            schedule.append((9*60+30, 10*60))\n            schedule.append((10*60+30, 11*60))\n        elif participant == 'Deborah':\n            schedule.append((9*60, 9*60+30))\n            schedule.append((10*60, 14*60))\n            schedule.append((14*60+30, 17*60))\n\n    earliest_time = start_time\n    while earliest_time + meeting_duration <= end_time:\n        is_available = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if earliest_time < end and earliest_time + meeting_duration > start:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            break\n        earliest_time += 30\n\n    start_hour = earliest_time // 60\n    start_minute = earliest_time % 60\n    end_hour = (earliest_time + meeting_duration) // 60\n    end_minute = (earliest_time + meeting_duration) % 60\n\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nprint(schedule_meeting(['Diane', 'Kelly', 'Deborah'], 30, 9*60, 17*60))\n```",
            "count": "calendar_scheduling_example_9"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours, constraints=None):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Add additional constraints\n    if constraints is not None:\n        for participant, constraint in constraints.items():\n            if constraint['after'] is not None:\n                after_time = int(constraint['after'].split(':')[0]) * 60 + int(constraint['after'].split(':')[1])\n                participants[participant].append((after_time, end_time))\n            if constraint['before'] is not None:\n                before_time = int(constraint['before'].split(':')[0]) * 60 + int(constraint['before'].split(':')[1])\n                participants[participant].append((start_time, before_time))\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Diana': [('11:30', '12:00'), ('13:00', '13:30')],\n    'Ethan': [],\n    'Janet': [('9:00', '10:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '17:00')]\n}\nconstraints = {\n    'Janet': {'before': '12:00', 'after': None}\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours, constraints))\n```",
            "count": "calendar_scheduling_example_10"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')],\n    'Dorothy': [('9:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_11"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')],\n    'Dorothy': [('9:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_12"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:14:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration *= 60\n\n    # Convert constraints to minutes\n    for participant, schedule in participants.items():\n        participants[participant] = [(int(start.split(':')[0]) * 60 + int(start.split(':')[1]), \n                                      int(end.split(':')[0]) * 60 + int(end.split(':')[1])) \n                                     for start, end in schedule]\n\n    # Find common available time slot\n    common_slots = []\n    for i in range(start_time, end_time - meeting_duration + 1):\n        available = True\n        for participant, schedule in participants.items():\n            for start, end in schedule:\n                if i >= start and i < end:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            common_slots.append((i, i + meeting_duration))\n\n    # Convert time slots back to hours and minutes\n    common_slots = [{'start': f\"{slot[0] // 60}:{slot[0] % 60:02}\", \n                     'end': f\"{slot[1] // 60}:{slot[1] % 60:02}\"} \n                    for slot in common_slots]\n\n    # Return the first available time slot\n    if common_slots:\n        return f\"{{{common_slots[0]['start']}:{common_slots[0]['end']}}}\"\n    else:\n        return \"{}\"\n\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:00'), ('15:30', '16:00')],\n    'Dorothy': [('9:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]\n}\nmeeting_duration = 0.5\nwork_hours = '9:00:17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_13"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:15:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time, preferences=None):\n    participants = {name: [(start, end) for start, end in schedule] for name, schedule in participants.items()}\n    start_time = int(start_time[:2]) * 60 + int(start_time[3:])\n    end_time = int(end_time[:2]) * 60 + int(end_time[3:])\n    meeting_duration = int(meeting_duration[:2]) * 60 + int(meeting_duration[3:])\n\n    for time in range(start_time, end_time - meeting_duration + 1):\n        valid_time = True\n        for name, schedule in participants.items():\n            for start, end in schedule:\n                start = int(start[:2]) * 60 + int(start[3:])\n                end = int(end[:2]) * 60 + int(end[3:])\n                if time >= start and time < end:\n                    valid_time = False\n                    break\n            if not valid_time:\n                break\n\n        if valid_time and (preferences is None or all(time >= int(pref[:2]) * 60 + int(pref[3:]) for pref in preferences)):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration) // 60\n            end_minute = (time + meeting_duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n    return None\n\n\nparticipants = {\n    \"Brandon\": [(\"13:00\", \"14:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Jerry\": [],\n    \"Bradley\": [(\"9:00\", \"11:30\"), (\"12:00\", \"15:00\"), (\"16:00\", \"16:30\")]\n}\nmeeting_duration = \"00:30\"\nstart_time = \"9:00\"\nend_time = \"17:00\"\npreferences = [\"14:30\"]\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time, preferences))\n```",
            "count": "calendar_scheduling_example_14"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, constraints, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start = datetime.strptime(start, '%H:%M')\n            end = datetime.strptime(end, '%H:%M')\n            if start < start_time:\n                start_time = start\n            if end > end_time:\n                end_time = end\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        current_time = start_time + timedelta(hours=hour)\n        if 'Christine' in participants and current_time.hour < 12:\n            continue\n        if 'Mason' in participants and current_time.hour < 12:\n            continue\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Joyce': [('11:00', '11:30'), ('13:30', '14:00'), ('14:30', '16:30')],\n    'Christine': [],\n    'Alexander': [('09:00', '11:00'), ('12:00', '12:30'), ('13:30', '15:00'), \n                  ('15:30', '16:00'), ('16:30', '17:00')]\n}\n\nconstraints = {\n    'Christine': '12:00'\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nprint(find_meeting_time(participants, constraints, meeting_duration))\n```",
            "count": "calendar_scheduling_example_15"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Roger': [],\n    'Karen': [('10:00', '10:30'), ('11:30', '12:00'), ('12:30', '13:00'), \n              ('14:00', '15:00'), ('15:30', '16:00')],\n    'Dorothy': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), \n                ('12:30', '13:00'), ('14:00', '15:30'), ('16:00', '17:00')]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_16"
        },
        {
            "final_program_time": "{12:00:12:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                if 'Helen' in participants and current_time.hour > 13 and current_time.minute > 30:\n                    continue\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Margaret': [('09:00', '10:00'), ('10:30', '11:00'), ('11:30', '12:00'), \n                 ('13:00', '13:30'), ('15:00', '15:30')],\n    'Donna': [('14:30', '15:00'), ('16:00', '16:30')],\n    'Helen': [('09:00', '09:30'), ('10:00', '11:30'), ('13:00', '14:00'), \n              ('14:30', '15:00'), ('15:30', '17:00')]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": "{12:30:13:00}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n\n    for hour in range(int((end_time - start_time).total_seconds() / 3600) + 1):\n        for minute in range(60):\n            current_time = start_time + timedelta(hours=hour, minutes=minute)\n            if current_time.minute + meeting_duration.seconds // 60 > 60:\n                break\n            meeting_end_time = current_time + meeting_duration\n            if all(not (datetime.strptime(start, '%H:%M') < meeting_end_time and \n                        datetime.strptime(end, '%H:%M') > current_time) \n                   for participant, schedule in participants.items() \n                   for start, end in schedule):\n                if 'Billy' in participants and current_time.hour > 15 and current_time.minute > 30:\n                    continue\n                return f\"{{{current_time.strftime('%H:%M'):}:{(current_time + meeting_duration).strftime('%H:%M')}}}\"\n\nparticipants = {\n    'Brian': [],\n    'Billy': [('10:00', '10:30'), ('11:30', '12:00'), ('14:00', '14:30'), \n              ('16:30', '17:00')],\n    'Patricia': [('09:00', '12:30'), ('13:30', '14:00'), ('14:30', '16:00'), \n                 ('16:30', '17:00')]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\nprint(find_meeting_time(participants, meeting_duration))\n```",
            "count": "calendar_scheduling_example_18"
        },
        {
            "final_program_time": "{11:30:12:30}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    for time in range(int ((end_time - start_time).total_seconds() / 60)):\n        current_time = start_time + timedelta(minutes=time)\n        end_current_time = current_time + meeting_duration\n\n        if all(is_available(participant, current_time, end_current_time) for participant in participants):\n            return '{' + current_time.strftime('%H:%M') + ':' + end_current_time.strftime('%H:%M') + '}'\n\ndef is_available(participant, start_time, end_time):\n    for busy_time in participant['busy']:\n        busy_start_time = datetime.strptime(busy_time['start'], '%H:%M')\n        busy_end_time = datetime.strptime(busy_time['end'], '%H:%M')\n\n        if start_time < busy_end_time and end_time > busy_start_time:\n            return False\n\n    if 'preference' in participant and participant['preference'] == 'after':\n        preference_time = datetime.strptime(participant['preference_time'], '%H:%M')\n        if start_time < preference_time:\n            return False\n\n    return True\n\n# TASK: Stephen, Edward and Angela for one hour between the work hours of 9:00 to 17:00 on Monday.\nparticipants = [\n    {'name': 'Stephen', 'busy': [{'start': '10:00', 'end': '10:30'}, {'start': '13:00', 'end': '13:30'}, {'start': '14:30', 'end': '15:00'}, {'start': '16:00', 'end': '16:30'}]},\n    {'name': 'Edward', 'busy': [{'start': '09:00', 'end': '09:30'}, {'start': '10:00', 'end': '10:30'}, {'start': '13:30', 'end': '14:30'}, {'start': '15:00', 'end': '16:00'}]},\n    {'name': 'Angela', 'busy': [{'start': '09:00', 'end': '11:30'}, {'start': '12:30', 'end': '13:00'}, {'start': '13:30', 'end': '15:30'}, {'start': '16:00', 'end': '17:00'}]}\n]\n\nprint(find_meeting_time(participants, '09:00', '17:00', 60))\n```",
            "count": "calendar_scheduling_example_19"
        },
        {
            "final_program_time": "{10:00:10:30}",
            "expected_time": "{10:00:10:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration, preferences=None):\n    participants = {\n        'Ralph': [(13.5, 14), (14.5, 15)],\n        'Peter': [(9, 9.5), (11, 13), (16, 16.5)],\n        'Daniel': [(9, 10), (10.5, 15.5), (16, 17)]\n    }\n    if preferences:\n        preferences = {'Daniel': (13.5, 17)}\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    if preferences:\n                        if 'Daniel' in preferences and time > preferences['Daniel'][0]:\n                            continue\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Ralph', 'Peter', 'Daniel']\nstart_time = 9\nend_time = 17\nduration = 30\npreferences = {'Daniel': (13.5, 17)}\n\nprint(find_meeting_time(participants, start_time, end_time, duration, preferences))\n```",
            "count": "calendar_scheduling_example_20"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants = {\n        'Roger': [],\n        'Karen': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)],\n        'Dorothy': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]\n    }\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Roger', 'Karen', 'Dorothy']\nstart_time = 9\nend_time = 17\nduration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_21"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants = {\n        'Roger': [],\n        'Karen': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)],\n        'Dorothy': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]\n    }\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Roger', 'Karen', 'Dorothy']\nstart_time = 9\nend_time = 17\nduration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_22"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants = {\n        'Roger': [],\n        'Karen': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)],\n        'Dorothy': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]\n    }\n\n    for hour in range(int(start_time), int(end_time)):\n        for minute in [0, 30]:\n            time = hour + minute / 60\n            if time + duration / 60 <= end_time:\n                if all(not (meeting[0] <= time < meeting[1] or meeting[0] < time + duration / 60 <= meeting[1]) for participant in participants.values() for meeting in participant):\n                    return f\"{{{int(time):02d}:{int((time % 1) * 60):02d}:{int((time + duration / 60)):02d}:{int(((time + duration / 60) % 1) * 60):02d}}}\"\n\nparticipants = ['Roger', 'Karen', 'Dorothy']\nstart_time = 9\nend_time = 17\nduration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_23"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        participant_schedules[participant] = []\n        for start, end in schedule:\n            participant_schedules[participant].append((start, end))\n\n    meeting_time = None\n    for time in range(start_time, end_time - meeting_duration + 1):\n        is_available = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time < end:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            meeting_time = (time, time + meeting_duration)\n            break\n\n    return meeting_time\n\n\ndef format_time(time):\n    start_hour = time[0] // 60\n    start_minute = time[0] % 60\n    end_hour = time[1] // 60\n    end_minute = time[1] % 60\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n\n# TASK 1\nparticipants = {\n    \"Roger\": [],\n    \"Karen\": [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)],\n    \"Dorothy\": [(9*60, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)],\n}\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, start_time, end_time, meeting_duration)))\n\n# TASK 2\nparticipants = {\n    \"Douglas\": [(12*60, 12*60+30), (15*60, 15*60+30)],\n    \"Lawrence\": [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)],\n    \"Isabella\": [(9*60, 12*60+30), (13*60+30, 17*60)],\n}\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, start_time, end_time, meeting_duration)))\n\n# TASK 3\nparticipants = {\n    \"Joshua\": [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)],\n    \"Denise\": [],\n    \"Jeremy\": [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)],\n}\nmeeting_duration = 60\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, start_time, end_time, meeting_duration)))\n\n# TASK 4\nparticipants = {\n    \"Alan\": [(13*60, 13*60+30), (14*60, 14*60+30)],\n    \"Elizabeth\": [(9*60, 9*60+30), (11*60, 11*60+30)],\n    \"Denise\": [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)],\n}\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, start_time, end_time, meeting_duration)))\n\n# TASK 5\nparticipants = {\n    \"Mason\": [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)],\n    \"Bruce\": [],\n    \"Christopher\": [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)],\n}\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, start_time, end_time, meeting_duration)))\n\n# TASK 6\nparticipants = {\n    \"Benjamin\": [],\n    \"Hannah\": [],\n    \"Brenda\": [(9*60+30, 10*60), (11*60+30, 12*60+30), (14*60, 16*60+30)],\n}\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, start_time, end_time, meeting_duration)))\n```",
            "count": "calendar_scheduling_example_24"
        },
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Apply preferences\n    if preferences:\n        for participant, preference in preferences.items():\n            preference_hour, preference_minute = map(int, preference.split(':'))\n            preference_time = preference_hour * 60 + preference_minute\n            available_time_slots = [(start, end) for start, end in available_time_slots if start < preference_time]\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules and preferences\nparticipants = {\n    \"Anthony\": [(\"09:30\", \"10:00\"), (\"12:00\", \"13:00\"), (\"16:00\", \"16:30\")],\n    \"Pamela\": [(\"09:30\", \"10:00\"), (\"16:30\", \"17:00\")],\n    \"Zachary\": [(\"09:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"17:00\")],\n}\npreferences = {\"Pamela\": \"14:30\"}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 1\n\nprint(find_meeting_time(participants, work_hours, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": "{15:30:16:30}",
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules\nparticipants = {\n    \"Katherine\": [],\n    \"Nicole\": [],\n    \"Kevin\": [(\"09:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"15:30\"), (\"16:30\", \"17:00\")],\n}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 1\n\nprint(find_meeting_time(participants, work_hours, meeting_duration))\n```",
            "count": "calendar_scheduling_example_26"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules\nparticipants = {\n    \"Roger\": [],\n    \"Karen\": [(\"10:00\", \"10:30\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"15:00\"), (\"15:30\", \"16:00\")],\n    \"Dorothy\": [(\"09:00\", \"10:00\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 0.5\n\nprint(find_meeting_time(participants, work_hours, meeting_duration))\n```",
            "count": "calendar_scheduling_example_27"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration):\n    start_hour, end_hour = map(int, work_hours.split(':')[:2])\n    start_time = start_hour * 60\n    end_time = end_hour * 60\n    meeting_duration = meeting_duration * 60\n\n    # Create a list of all busy time slots\n    busy_time_slots = []\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_slot = start_hour * 60 + start_minute\n            end_time_slot = end_hour * 60 + end_minute\n            busy_time_slots.append((start_time_slot, end_time_slot))\n\n    # Sort busy time slots by start time\n    busy_time_slots.sort(key=lambda x: x[0])\n\n    # Find available time slots\n    available_time_slots = []\n    current_time = start_time\n    for start, end in busy_time_slots:\n        if current_time < start and start - current_time >= meeting_duration:\n            available_time_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check if there's available time after the last busy time slot\n    if current_time < end_time and end_time - current_time >= meeting_duration:\n        available_time_slots.append((current_time, end_time))\n\n    # Find the first available time slot that works for everyone\n    for start, end in available_time_slots:\n        start_hour, start_minute = divmod(start, 60)\n        end_hour, end_minute = divmod(end, 60)\n        return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Define the participants' schedules\nparticipants = {\n    \"Brittany\": [(\"13:00\", \"13:30\"), (\"16:00\", \"16:30\")],\n    \"Emily\": [],\n    \"Doris\": [(\"09:00\", \"11:00\"), (\"11:30\", \"14:30\"), (\"15:00\", \"17:00\")],\n}\nwork_hours = \"09:00:17:00\"\nmeeting_duration = 0.5\n\nprint(find_meeting_time(participants, work_hours, meeting_duration))\n```",
            "count": "calendar_scheduling_example_28"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participants = {name: [tuple(map(lambda x: datetime.strptime(x, '%H:%M'), time.split('-'))) for time in times.split(',')] for name, times in participants.items()}\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n    \n    for time in [(start_time + timedelta(minutes=i)) for i in range(0, int((end_time - start_time).total_seconds() / 60))]:\n        end = time + meeting_duration\n        if all(all(not (time < busy[1] and end > busy[0]) for busy in participant) for participant in participants.values()):\n            return '{:%H:%M:%H:%M}'.format(time, end)\n\nparticipants = {\n    'Madison': '09:30-10:00,11:30-12:00',\n    'Diana': '11:00-11:30,13:00-13:30',\n    'Shirley': '09:00-12:00,13:30-15:00,15:30-17:00'\n}\nmeeting_duration = 60\nstart_time = '09:00'\nend_time = '17:00'\n\nprint(find_meeting_time(participants, meeting_duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_29"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(roger, karen, dorothy, duration, start_time, end_time):\n    karen_free = []\n    dorothy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in karen):\n            karen_free.append(current_time)\n        if not any(start <= current_time < end for start, end in dorothy):\n            dorothy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(karen_free) & set(dorothy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time):\n    douglas_free = []\n    lawrence_free = []\n    isabella_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in douglas):\n            douglas_free.append(current_time)\n        if not any(start <= current_time < end for start, end in lawrence):\n            lawrence_free.append(current_time)\n        if not any(start <= current_time < end for start, end in isabella):\n            isabella_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(douglas_free) & set(lawrence_free) & set(isabella_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time):\n    joshua_free = []\n    jeremy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in joshua):\n            joshua_free.append(current_time)\n        if not any(start <= current_time < end for start, end in jeremy):\n            jeremy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(joshua_free) & set(jeremy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time):\n    alan_free = []\n    elizabeth_free = []\n    denise_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in alan):\n            alan_free.append(current_time)\n        if not any(start <= current_time < end for start, end in elizabeth):\n            elizabeth_free.append(current_time)\n        if not any(start <= current_time < end for start, end in denise):\n            denise_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(alan_free) & set(elizabeth_free) & set(denise_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference=None):\n    mason_free = []\n    christopher_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in mason):\n            mason_free.append(current_time)\n        if not any(start <= current_time < end for start, end in christopher):\n            christopher_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(mason_free) & set(christopher_free)\n\n    if preference:\n        common_free = {time for time in common_free if time >= preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time6(jeffrey, virginia, melissa, duration, start_time, end_time, preference=None):\n    jeffrey_free = []\n    virginia_free = []\n    melissa_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in jeffrey):\n            jeffrey_free.append(current_time)\n        if not any(start <= current_time < end for start, end in virginia):\n            virginia_free.append(current_time)\n        if not any(start <= current_time < end for start, end in melissa):\n            melissa_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(jeffrey_free) & set(virginia_free) & set(melissa_free)\n\n    if preference:\n        common_free = {time for time in common_free if time < preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nroger = []\nkaren = [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]\ndorothy = [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time(roger, karen, dorothy, duration, start_time, end_time))\n\ndouglas = [(12, 12.5), (15, 15.5)]\nlawrence = [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]\nisabella = [(9, 12.5), (13.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time))\n\njoshua = [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]\ndenise = []\njeremy = [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]\nduration = 1\nstart_time = 9\nend_time = 17\nprint(find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time))\n\nalan = [(13, 13.5), (14, 14.5)]\nelizabeth = [(9, 9.5), (11, 11.5)]\ndenise = [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time))\n\nmason = [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]\nbruce = []\nchristopher = [(9.5, 10.5), (11.5, 12.5), (15, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 12.5\nprint(find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference))\n\njeffrey = [(9.5, 10), (10.5, 11)]\nvirginia = [(9, 9.5), (10, 10.5), (14.5, 15), (16, 16.5)]\nmelissa = [(9, 11.5), (12, 12.5), (13, 15), (16, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 14\nprint(find_meeting_time6(jeffrey, virginia, melissa, duration, start_time, end_time, preference))\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": "{16:00:16:30}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(richard, martha, kimberly, duration, start_time, end_time, preference=None):\n    richard_free = []\n    martha_free = []\n    kimberly_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in richard):\n            richard_free.append(current_time)\n        if not any(start <= current_time < end for start, end in martha):\n            martha_free.append(current_time)\n        if not any(start <= current_time < end for start, end in kimberly):\n            kimberly_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(richard_free) & set(martha_free) & set(kimberly_free)\n\n    if preference:\n        common_free = {time for time in common_free if time >= preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time):\n    douglas_free = []\n    lawrence_free = []\n    isabella_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in douglas):\n            douglas_free.append(current_time)\n        if not any(start <= current_time < end for start, end in lawrence):\n            lawrence_free.append(current_time)\n        if not any(start <= current_time < end for start, end in isabella):\n            isabella_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(douglas_free) & set(lawrence_free) & set(isabella_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time):\n    joshua_free = []\n    jeremy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in joshua):\n            joshua_free.append(current_time)\n        if not any(start <= current_time < end for start, end in jeremy):\n            jeremy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(joshua_free) & set(jeremy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time):\n    alan_free = []\n    elizabeth_free = []\n    denise_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in alan):\n            alan_free.append(current_time)\n        if not any(start <= current_time < end for start, end in elizabeth):\n            elizabeth_free.append(current_time)\n        if not any(start <= current_time < end for start, end in denise):\n            denise_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(alan_free) & set(elizabeth_free) & set(denise_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference=None):\n    mason_free = []\n    christopher_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in mason):\n            mason_free.append(current_time)\n        if not any(start <= current_time < end for start, end in christopher):\n            christopher_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(mason_free) & set(christopher_free)\n\n    if preference:\n        common_free = {time for time in common_free if time >= preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time6(roger, karen, dorothy, duration, start_time, end_time):\n    karen_free = []\n    dorothy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in karen):\n            karen_free.append(current_time)\n        if not any(start <= current_time < end for start, end in dorothy):\n            dorothy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(karen_free) & set(dorothy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nrichard = [(13.5, 14), (15, 15.5)]\nmartha = [(9, 9.5), (13, 13.5)]\nkimberly = [(9, 11), (11.5, 12), (12.5, 13), (14, 16)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 14\nprint(find_meeting_time(richard, martha, kimberly, duration, start_time, end_time, preference))\n\ndouglas = [(12, 12.5), (15, 15.5)]\nlawrence = [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]\nisabella = [(9, 12.5), (13.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time))\n\njoshua = [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]\ndenise = []\njeremy = [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]\nduration = 1\nstart_time = 9\nend_time = 17\nprint(find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time))\n\nalan = [(13, 13.5), (14, 14.5)]\nelizabeth = [(9, 9.5), (11, 11.5)]\ndenise = [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time))\n\nmason = [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]\nbruce = []\nchristopher = [(9.5, 10.5), (11.5, 12.5), (15, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 12.5\nprint(find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference))\n\nroger = []\nkaren = [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]\ndorothy = [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time6(roger, karen, dorothy, duration, start_time, end_time))\n```",
            "count": "calendar_scheduling_example_31"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{9:00:9:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(roger, karen, dorothy, duration, start_time, end_time):\n    karen_free = []\n    dorothy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in karen):\n            karen_free.append(current_time)\n        if not any(start <= current_time < end for start, end in dorothy):\n            dorothy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(karen_free) & set(dorothy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time):\n    douglas_free = []\n    lawrence_free = []\n    isabella_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in douglas):\n            douglas_free.append(current_time)\n        if not any(start <= current_time < end for start, end in lawrence):\n            lawrence_free.append(current_time)\n        if not any(start <= current_time < end for start, end in isabella):\n            isabella_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(douglas_free) & set(lawrence_free) & set(isabella_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time):\n    joshua_free = []\n    jeremy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in joshua):\n            joshua_free.append(current_time)\n        if not any(start <= current_time < end for start, end in jeremy):\n            jeremy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(joshua_free) & set(jeremy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time):\n    alan_free = []\n    elizabeth_free = []\n    denise_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in alan):\n            alan_free.append(current_time)\n        if not any(start <= current_time < end for start, end in elizabeth):\n            elizabeth_free.append(current_time)\n        if not any(start <= current_time < end for start, end in denise):\n            denise_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(alan_free) & set(elizabeth_free) & set(denise_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference=None):\n    mason_free = []\n    christopher_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in mason):\n            mason_free.append(current_time)\n        if not any(start <= current_time < end for start, end in christopher):\n            christopher_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(mason_free) & set(christopher_free)\n\n    if preference:\n        common_free = {time for time in common_free if time >= preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time6(emily, melissa, frank, duration, start_time, end_time, preference=None):\n    emily_free = []\n    melissa_free = []\n    frank_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in emily):\n            emily_free.append(current_time)\n        if not any(start <= current_time < end for start, end in melissa):\n            melissa_free.append(current_time)\n        if not any(start <= current_time < end for start, end in frank):\n            frank_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(emily_free) & set(melissa_free) & set(frank_free)\n\n    if preference:\n        common_free = {time for time in common_free if time < preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nroger = []\nkaren = [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]\ndorothy = [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time(roger, karen, dorothy, duration, start_time, end_time))\n\ndouglas = [(12, 12.5), (15, 15.5)]\nlawrence = [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]\nisabella = [(9, 12.5), (13.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time))\n\njoshua = [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]\ndenise = []\njeremy = [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]\nduration = 1\nstart_time = 9\nend_time = 17\nprint(find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time))\n\nalan = [(13, 13.5), (14, 14.5)]\nelizabeth = [(9, 9.5), (11, 11.5)]\ndenise = [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time))\n\nmason = [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]\nbruce = []\nchristopher = [(9.5, 10.5), (11.5, 12.5), (15, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 12.5\nprint(find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference))\n\nemily = [(10, 10.5), (11.5, 12.5), (14, 15), (16, 16.5)]\nmelissa = [(9.5, 10), (14.5, 15)]\nfrank = [(10, 10.5), (11, 11.5), (12.5, 13), (13.5, 14.5), (15, 16), (16.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 9.5\nprint(find_meeting_time6(emily, melissa, frank, duration, start_time, end_time, preference))\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(roger, karen, dorothy, duration, start_time, end_time):\n    karen_free = []\n    dorothy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in karen):\n            karen_free.append(current_time)\n        if not any(start <= current_time < end for start, end in dorothy):\n            dorothy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(karen_free) & set(dorothy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time):\n    douglas_free = []\n    lawrence_free = []\n    isabella_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in douglas):\n            douglas_free.append(current_time)\n        if not any(start <= current_time < end for start, end in lawrence):\n            lawrence_free.append(current_time)\n        if not any(start <= current_time < end for start, end in isabella):\n            isabella_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(douglas_free) & set(lawrence_free) & set(isabella_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time):\n    joshua_free = []\n    jeremy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in joshua):\n            joshua_free.append(current_time)\n        if not any(start <= current_time < end for start, end in jeremy):\n            jeremy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(joshua_free) & set(jeremy_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time):\n    alan_free = []\n    elizabeth_free = []\n    denise_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in alan):\n            alan_free.append(current_time)\n        if not any(start <= current_time < end for start, end in elizabeth):\n            elizabeth_free.append(current_time)\n        if not any(start <= current_time < end for start, end in denise):\n            denise_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(alan_free) & set(elizabeth_free) & set(denise_free)\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference=None):\n    mason_free = []\n    christopher_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in mason):\n            mason_free.append(current_time)\n        if not any(start <= current_time < end for start, end in christopher):\n            christopher_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(mason_free) & set(christopher_free)\n\n    if preference:\n        common_free = {time for time in common_free if time >= preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\ndef find_meeting_time6(lisa, bobby, randy, duration, start_time, end_time, preference=None):\n    lisa_free = []\n    bobby_free = []\n    randy_free = []\n    current_time = start_time\n\n    while current_time < end_time:\n        if not any(start <= current_time < end for start, end in lisa):\n            lisa_free.append(current_time)\n        if not any(start <= current_time < end for start, end in bobby):\n            bobby_free.append(current_time)\n        if not any(start <= current_time < end for start, end in randy):\n            randy_free.append(current_time)\n        current_time += 0.5  # increment by 30 minutes\n\n    common_free = set(lisa_free) & set(bobby_free) & set(randy_free)\n\n    if preference:\n        common_free = {time for time in common_free if time < preference}\n\n    for time in sorted(common_free):\n        if time + duration <= end_time:\n            return f\"{{{int(time):02d}:{int((time*60)%60):02d}:{int(time+duration):02d}:{int(((time+duration)*60)%60):02d}}}\"\n\nroger = []\nkaren = [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]\ndorothy = [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time(roger, karen, dorothy, duration, start_time, end_time))\n\ndouglas = [(12, 12.5), (15, 15.5)]\nlawrence = [(10.5, 12), (13, 13.5), (14, 14.5), (15.5, 16)]\nisabella = [(9, 12.5), (13.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time2(douglas, lawrence, isabella, duration, start_time, end_time))\n\njoshua = [(10, 10.5), (12, 12.5), (14, 14.5), (15, 15.5)]\ndenise = []\njeremy = [(9.5, 10.5), (12, 13), (13.5, 14), (14.5, 15), (15.5, 16), (16.5, 17)]\nduration = 1\nstart_time = 9\nend_time = 17\nprint(find_meeting_time3(joshua, denise, jeremy, duration, start_time, end_time))\n\nalan = [(13, 13.5), (14, 14.5)]\nelizabeth = [(9, 9.5), (11, 11.5)]\ndenise = [(9, 10), (10.5, 11.5), (12.5, 13), (13.5, 14), (14.5, 16), (16.5, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\nprint(find_meeting_time4(alan, elizabeth, denise, duration, start_time, end_time))\n\nmason = [(9.5, 10), (11, 11.5), (14.5, 15), (16.5, 17)]\nbruce = []\nchristopher = [(9.5, 10.5), (11.5, 12.5), (15, 17)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 12.5\nprint(find_meeting_time5(mason, bruce, christopher, duration, start_time, end_time, preference))\n\nlisa = [(9, 10), (10.5, 11.5), (12.5, 13), (16, 16.5)]\nbobby = [(9, 9.5), (10, 10.5), (11.5, 12), (15, 15.5)]\nrandy = [(9.5, 10), (10.5, 11), (11.5, 12.5), (13, 13.5), (14.5, 15.5), (16, 16.5)]\nduration = 0.5\nstart_time = 9\nend_time = 17\npreference = 15\nprint(find_meeting_time6(lisa, bobby, randy, duration, start_time, end_time, preference))\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": "{09:30:10:00}",
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, meeting_duration, preferences=None):\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    meeting_start = None\n\n    while meeting_start is None:\n        available = True\n        for participant in participants:\n            if start_time in participant:\n                available = False\n                break\n        if available:\n            meeting_start = start_time\n        else:\n            start_time += timedelta(minutes=30)\n\n    if preferences and 'after' in preferences:\n        after_time = datetime.strptime(preferences['after'], '%H:%M')\n        if meeting_start < after_time:\n            meeting_start = after_time + timedelta(minutes=30)\n\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    return '{' + meeting_start.strftime('%H:%M') + ':' + meeting_end.strftime('%H:%M') + '}'\n\n# TASK 1\nroger = []\nkaren = [datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M'), \n         datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'), \n         datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'), \n         datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M'), \n         datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')]\ndorothy = [datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M'), \n           datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M'), \n           datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'), \n           datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'), \n           datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'), \n           datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')]\nprint(schedule_meeting([roger, karen, dorothy], 30))\n\n# TASK 2\ndouglas = [datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M'), \n           datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')]\nlawrence = [datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M'), \n            datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M'), \n            datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'), \n            datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')]\nisabella = [datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M'), \n            datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')]\nprint(schedule_meeting([douglas, lawrence, isabella], 30))\n\n# TASK 3\njoshua = [datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M'), \n          datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M'), \n          datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'), \n          datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')]\ndenise = []\njeremy = [datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M'), \n          datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M'), \n          datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'), \n          datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'), \n          datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'), \n          datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')]\nprint(schedule_meeting([joshua, denise, jeremy], 60))\n\n# TASK 4\nalan = [datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M'), \n        datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')]\nelizabeth = [datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M'), \n             datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')]\ndenise = [datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M'), \n          datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M'), \n          datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'), \n          datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'), \n          datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'), \n          datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')]\nprint(schedule_meeting([alan, elizabeth, denise], 30))\n\n# TASK 5\nmason = [datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M'), \n         datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'), \n         datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'), \n         datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')]\nbruce = []\nchristopher = [datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M'), \n               datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M'), \n               datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')]\nprint(schedule_meeting([mason, bruce, christopher], 30, {'after': '12:30'}))\n\n# TASK 6\nwillie = []\nrichard = [datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M'), \n           datetime.strptime('11:00', '%H:%M'), datetime.strptime('12:00', '%H:%M'), \n           datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M'), \n           datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M')]\nnoah = [datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M'), \n        datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'), \n        datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'), \n        datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')]\nprint(schedule_meeting([willie, richard, noah], 60))\n```",
            "count": "calendar_scheduling_example_34"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:30:17:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time < preference\n\n\ndef main():\n    tasks = [\n        {\n            'participants': [\n                {'name': 'Roger', 'busy': []},\n                {'name': 'Karen', 'busy': [\n                    {'start': '10:00', 'end': '10:30'},\n                    {'start': '11:30', 'end': '12:00'},\n                    {'start': '12:30', 'end': '13:00'},\n                    {'start': '14:00', 'end': '15:00'},\n                    {'start': '15:30', 'end': '16:00'}\n                ]},\n                {'name': 'Dorothy', 'busy': [\n                    {'start': '09:00', 'end': '10:00'},\n                    {'start': '10:30', 'end': '11:00'},\n                    {'start': '11:30', 'end': '12:00'},\n                    {'start': '12:30', 'end': '13:00'},\n                    {'start': '14:00', 'end': '15:30'},\n                    {'start': '16:00', 'end': '17:00'}\n                ]}\n            ],\n            'work_hours': '9-17',\n           'meeting_duration': 30,\n            'preferences': None\n        },\n        {\n            'participants': [\n                {'name': 'Douglas', 'busy': [\n                    {'start': '12:00', 'end': '12:30'},\n                    {'start': '15:00', 'end': '15:30'}\n                ]},\n                {'name': 'Lawrence', 'busy': [\n                    {'start': '10:30', 'end': '12:00'},\n                    {'start': '13:00', 'end': '13:30'},\n                    {'start': '14:00', 'end': '14:30'},\n                    {'start': '15:30', 'end': '16:00'}\n                ]},\n                {'name': 'Isabella', 'busy': [\n                    {'start': '09:00', 'end': '12:30'},\n                    {'start': '13:30', 'end': '17:00'}\n                ]}\n            ],\n            'work_hours': '9-17',\n           'meeting_duration': 30,\n            'preferences': None\n        },\n        {\n            'participants': [\n                {'name': 'Joshua', 'busy': [\n                    {'start': '10:00', 'end': '10:30'},\n                    {'start': '12:00', 'end': '12:30'},\n                    {'start': '14:00', 'end': '14:30'},\n                    {'start': '15:00', 'end': '15:30'}\n                ]},\n                {'name': 'Denise', 'busy': []},\n                {'name': 'Jeremy', 'busy': [\n                    {'start': '09:30', 'end': '10:30'},\n                    {'start': '12:00', 'end': '13:00'},\n                    {'start': '13:30', 'end': '14:00'},\n                    {'start': '14:30', 'end': '15:00'},\n                    {'start': '15:30', 'end': '16:00'},\n                    {'start': '16:30', 'end': '17:00'}\n                ]}\n            ],\n            'work_hours': '9-17',\n           'meeting_duration': 60,\n            'preferences': None\n        },\n        {\n            'participants': [\n                {'name': 'Alan', 'busy': [\n                    {'start': '13:00', 'end': '13:30'},\n                    {'start': '14:00', 'end': '14:30'}\n                ]},\n                {'name': 'Elizabeth', 'busy': [\n                    {'start': '09:00', 'end': '09:30'},\n                    {'start': '11:00', 'end': '11:30'}\n                ]},\n                {'name': 'Denise', 'busy': [\n                    {'start': '09:00', 'end': '10:00'},\n                    {'start': '10:30', 'end': '11:30'},\n                    {'start': '12:30', 'end': '13:00'},\n                    {'start': '13:30', 'end': '14:00'},\n                    {'start': '14:30', 'end': '16:00'},\n                    {'start': '16:30', 'end': '17:00'}\n                ]}\n            ],\n            'work_hours': '9-17',\n           'meeting_duration': 30,\n            'preferences': None\n        },\n        {\n            'participants': [\n                {'name': 'Mason', 'busy': [\n                    {'start': '09:30', 'end': '10:00'},\n                    {'start': '11:00', 'end': '11:30'},\n                    {'start': '14:30', 'end': '15:00'},\n                    {'start': '16:30', 'end': '17:00'}\n                ]},\n                {'name': 'Bruce', 'busy': []},\n                {'name': 'Christopher', 'busy': [\n                    {'start': '09:30', 'end': '10:30'},\n                    {'start': '11:30', 'end': '12:30'},\n                    {'start': '15:00', 'end': '17:00'}\n                ]}\n            ],\n            'work_hours': '9-17',\n           'meeting_duration': 30,\n            'preferences': ['12:30']\n        },\n        {\n            'participants': [\n                {'name': 'Bradley', 'busy': []},\n                {'name': 'Zachary', 'busy': [\n                    {'start': '10:00', 'end': '10:30'},\n                    {'start': '15:00', 'end': '15:30'}\n                ]},\n                {'name': 'Teresa', 'busy': [\n                    {'start': '09:00', 'end': '10:30'},\n                    {'start': '11:00', 'end': '12:30'},\n                    {'start': '13:00', 'end': '14:00'},\n                    {'start': '14:30', 'end': '16:30'}\n                ]}\n            ],\n            'work_hours': '9-17',\n           'meeting_duration': 30,\n            'preferences': ['14:30']\n        }\n    ]\n\n    for task in tasks:\n        print(find_meeting_time(**task))\n\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_35"
        },
        {
            "final_program_time": "{10:30:10:60}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time > preference\n\n\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger', 'busy': []},\n            {'name': 'Karen', 'busy': [\n                {'start': '10:00', 'end': '10:30'},\n                {'start': '11:30', 'end': '12:00'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '14:00', 'end': '15:00'},\n                {'start': '15:30', 'end': '16:00'}\n            ]},\n            {'name': 'Dorothy', 'busy': [\n                {'start': '09:00', 'end': '10:00'},\n                {'start': '10:30', 'end': '11:00'},\n                {'start': '11:30', 'end': '12:00'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '14:00', 'end': '15:30'},\n                {'start': '16:00', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n      'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Douglas', 'busy': [\n                {'start': '12:00', 'end': '12:30'},\n                {'start': '15:00', 'end': '15:30'}\n            ]},\n            {'name': 'Lawrence', 'busy': [\n                {'start': '10:30', 'end': '12:00'},\n                {'start': '13:00', 'end': '13:30'},\n                {'start': '14:00', 'end': '14:30'},\n                {'start': '15:30', 'end': '16:00'}\n            ]},\n            {'name': 'Isabella', 'busy': [\n                {'start': '09:00', 'end': '12:30'},\n                {'start': '13:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n      'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Joshua', 'busy': [\n                {'start': '10:00', 'end': '10:30'},\n                {'start': '12:00', 'end': '12:30'},\n                {'start': '14:00', 'end': '14:30'},\n                {'start': '15:00', 'end': '15:30'}\n            ]},\n            {'name': 'Denise', 'busy': []},\n            {'name': 'Jeremy', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '12:00', 'end': '13:00'},\n                {'start': '13:30', 'end': '14:00'},\n                {'start': '14:30', 'end': '15:00'},\n                {'start': '15:30', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n      'meeting_duration': 60,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Alan', 'busy': [\n                {'start': '13:00', 'end': '13:30'},\n                {'start': '14:00', 'end': '14:30'}\n            ]},\n            {'name': 'Elizabeth', 'busy': [\n                {'start': '09:00', 'end': '09:30'},\n                {'start': '11:00', 'end': '11:30'}\n            ]},\n            {'name': 'Denise', 'busy': [\n                {'start': '09:00', 'end': '10:00'},\n                {'start': '10:30', 'end': '11:30'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '13:30', 'end': '14:00'},\n                {'start': '14:30', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n      'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Mason', 'busy': [\n                {'start': '09:30', 'end': '10:00'},\n                {'start': '11:00', 'end': '11:30'},\n                {'start': '14:30', 'end': '15:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]},\n            {'name': 'Bruce', 'busy': []},\n            {'name': 'Christopher', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '11:30', 'end': '12:30'},\n                {'start': '15:00', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n      'meeting_duration': 30,\n        'preferences': ['12:30']\n    },\n    {\n        'participants': [\n            {'name': 'Ryan', 'busy': [\n                {'start': '09:00', 'end': '09:30'},\n                {'start': '12:30', 'end': '13:00'}\n            ]},\n            {'name': 'Ruth', 'busy': []},\n            {'name': 'Denise', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '12:00', 'end': '13:00'},\n                {'start': '14:30', 'end': '16:30'}\n            ]}\n        ],\n        'work_hours': '9-17',\n      'meeting_duration': 60,\n        'preferences': ['12:30']\n    }\n]\n\n\ndef main():\n    for task in tasks:\n        print(find_meeting_time(**task))\n\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": "{10:30:10:60}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time > preference\n\n\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger', 'busy': []},\n            {'name': 'Karen', 'busy': [\n                {'start': '10:00', 'end': '10:30'},\n                {'start': '11:30', 'end': '12:00'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '14:00', 'end': '15:00'},\n                {'start': '15:30', 'end': '16:00'}\n            ]},\n            {'name': 'Dorothy', 'busy': [\n                {'start': '09:00', 'end': '10:00'},\n                {'start': '10:30', 'end': '11:00'},\n                {'start': '11:30', 'end': '12:00'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '14:00', 'end': '15:30'},\n                {'start': '16:00', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n     'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Douglas', 'busy': [\n                {'start': '12:00', 'end': '12:30'},\n                {'start': '15:00', 'end': '15:30'}\n            ]},\n            {'name': 'Lawrence', 'busy': [\n                {'start': '10:30', 'end': '12:00'},\n                {'start': '13:00', 'end': '13:30'},\n                {'start': '14:00', 'end': '14:30'},\n                {'start': '15:30', 'end': '16:00'}\n            ]},\n            {'name': 'Isabella', 'busy': [\n                {'start': '09:00', 'end': '12:30'},\n                {'start': '13:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n     'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Joshua', 'busy': [\n                {'start': '10:00', 'end': '10:30'},\n                {'start': '12:00', 'end': '12:30'},\n                {'start': '14:00', 'end': '14:30'},\n                {'start': '15:00', 'end': '15:30'}\n            ]},\n            {'name': 'Denise', 'busy': []},\n            {'name': 'Jeremy', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '12:00', 'end': '13:00'},\n                {'start': '13:30', 'end': '14:00'},\n                {'start': '14:30', 'end': '15:00'},\n                {'start': '15:30', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n     'meeting_duration': 60,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Alan', 'busy': [\n                {'start': '13:00', 'end': '13:30'},\n                {'start': '14:00', 'end': '14:30'}\n            ]},\n            {'name': 'Elizabeth', 'busy': [\n                {'start': '09:00', 'end': '09:30'},\n                {'start': '11:00', 'end': '11:30'}\n            ]},\n            {'name': 'Denise', 'busy': [\n                {'start': '09:00', 'end': '10:00'},\n                {'start': '10:30', 'end': '11:30'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '13:30', 'end': '14:00'},\n                {'start': '14:30', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n     'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Mason', 'busy': [\n                {'start': '09:30', 'end': '10:00'},\n                {'start': '11:00', 'end': '11:30'},\n                {'start': '14:30', 'end': '15:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]},\n            {'name': 'Bruce', 'busy': []},\n            {'name': 'Christopher', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '11:30', 'end': '12:30'},\n                {'start': '15:00', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n     'meeting_duration': 30,\n        'preferences': ['12:30']\n    },\n    {\n        'participants': [\n            {'name': 'Gregory', 'busy': [\n                {'start': '11:00', 'end': '11:30'},\n                {'start': '12:00', 'end': '12:30'},\n                {'start': '15:30', 'end': '16:30'}\n            ]},\n            {'name': 'Teresa', 'busy': []},\n            {'name': 'Carol', 'busy': [\n                {'start': '09:00', 'end': '10:30'},\n                {'start': '11:00', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n     'meeting_duration': 30,\n        'preferences': None\n    }\n]\n\n\ndef main():\n    for task in tasks:\n        print(find_meeting_time(**task))\n\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_37"
        },
        {
            "final_program_time": "{10:30:10:60}",
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, work_hours, meeting_duration, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split('-'))\n    for hour in range(start_hour, end_hour):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            next_time = f\"{hour}:{(minute + meeting_duration):02d}\"\n            if all(is_available(participant, time, next_time) for participant in participants):\n                if preferences is None or all(not is_excluded(time, preference) for preference in preferences):\n                    return f\"{{{time}:{next_time}}}\"\n    return \"No meeting time found\"\n\n\ndef is_available(participant, time, next_time):\n    for busy_time in participant['busy']:\n        if time >= busy_time['start'] and next_time <= busy_time['end']:\n            return False\n    return True\n\n\ndef is_excluded(time, preference):\n    return time > preference\n\n\ntasks = [\n    {\n        'participants': [\n            {'name': 'Roger', 'busy': []},\n            {'name': 'Karen', 'busy': [\n                {'start': '10:00', 'end': '10:30'},\n                {'start': '11:30', 'end': '12:00'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '14:00', 'end': '15:00'},\n                {'start': '15:30', 'end': '16:00'}\n            ]},\n            {'name': 'Dorothy', 'busy': [\n                {'start': '09:00', 'end': '10:00'},\n                {'start': '10:30', 'end': '11:00'},\n                {'start': '11:30', 'end': '12:00'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '14:00', 'end': '15:30'},\n                {'start': '16:00', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n    'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Douglas', 'busy': [\n                {'start': '12:00', 'end': '12:30'},\n                {'start': '15:00', 'end': '15:30'}\n            ]},\n            {'name': 'Lawrence', 'busy': [\n                {'start': '10:30', 'end': '12:00'},\n                {'start': '13:00', 'end': '13:30'},\n                {'start': '14:00', 'end': '14:30'},\n                {'start': '15:30', 'end': '16:00'}\n            ]},\n            {'name': 'Isabella', 'busy': [\n                {'start': '09:00', 'end': '12:30'},\n                {'start': '13:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n    'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Joshua', 'busy': [\n                {'start': '10:00', 'end': '10:30'},\n                {'start': '12:00', 'end': '12:30'},\n                {'start': '14:00', 'end': '14:30'},\n                {'start': '15:00', 'end': '15:30'}\n            ]},\n            {'name': 'Denise', 'busy': []},\n            {'name': 'Jeremy', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '12:00', 'end': '13:00'},\n                {'start': '13:30', 'end': '14:00'},\n                {'start': '14:30', 'end': '15:00'},\n                {'start': '15:30', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n    'meeting_duration': 60,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Alan', 'busy': [\n                {'start': '13:00', 'end': '13:30'},\n                {'start': '14:00', 'end': '14:30'}\n            ]},\n            {'name': 'Elizabeth', 'busy': [\n                {'start': '09:00', 'end': '09:30'},\n                {'start': '11:00', 'end': '11:30'}\n            ]},\n            {'name': 'Denise', 'busy': [\n                {'start': '09:00', 'end': '10:00'},\n                {'start': '10:30', 'end': '11:30'},\n                {'start': '12:30', 'end': '13:00'},\n                {'start': '13:30', 'end': '14:00'},\n                {'start': '14:30', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n    'meeting_duration': 30,\n        'preferences': None\n    },\n    {\n        'participants': [\n            {'name': 'Mason', 'busy': [\n                {'start': '09:30', 'end': '10:00'},\n                {'start': '11:00', 'end': '11:30'},\n                {'start': '14:30', 'end': '15:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]},\n            {'name': 'Bruce', 'busy': []},\n            {'name': 'Christopher', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '11:30', 'end': '12:30'},\n                {'start': '15:00', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n    'meeting_duration': 30,\n        'preferences': ['12:30']\n    },\n    {\n        'participants': [\n            {'name': 'Catherine', 'busy': [\n                {'start': '10:30', 'end': '11:00'},\n                {'start': '12:30', 'end': '13:30'},\n                {'start': '14:30', 'end': '15:00'}\n            ]},\n            {'name': 'Michael', 'busy': [\n                {'start': '09:30', 'end': '10:30'},\n                {'start': '12:00', 'end': '13:00'},\n                {'start': '13:30', 'end': '14:00'},\n                {'start': '15:00', 'end': '15:30'}\n            ]},\n            {'name': 'Alexander', 'busy': [\n                {'start': '09:00', 'end': '09:30'},\n                {'start': '10:00', 'end': '10:30'},\n                {'start': '11:00', 'end': '12:00'},\n                {'start': '13:00', 'end': '13:30'},\n                {'start': '14:00', 'end': '16:00'},\n                {'start': '16:30', 'end': '17:00'}\n            ]}\n        ],\n        'work_hours': '9-17',\n    'meeting_duration': 30,\n        'preferences': None\n    }\n]\n\n\ndef main():\n    for task in tasks:\n        print(find_meeting_time(**task))\n\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_38"
        },
        {
            "final_program_time": "{14:00:14:30}",
            "expected_time": "{14:00:14:30}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        participant_schedules[participant] = []\n\n    for participant, schedule in participant_schedules.items():\n        for time_range in participants[participant]:\n            start_hour, start_minute = map(int, time_range[0].split(':'))\n            end_hour, end_minute = map(int, time_range[1].split(':'))\n            schedule.append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n\n    for participant, schedule in participant_schedules.items():\n        schedule.sort()\n\n    start_time_minutes = start_time * 60\n    end_time_minutes = end_time * 60\n\n    for time in range(start_time_minutes, end_time_minutes - meeting_duration + 1):\n        is_available = True\n        for participant, schedule in participant_schedules.items():\n            for start, end in schedule:\n                if time >= start and time < end or time + meeting_duration > start and time + meeting_duration <= end:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + meeting_duration) // 60\n            end_minute = (time + meeting_duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\ndef main():\n    participants = {\n        \"Emily\": [],\n        \"Victoria\": [[\"13:30\", \"14:00\"], [\"14:30\", \"15:30\"], [\"16:30\", \"17:00\"]],\n        \"Nancy\": [[\"9:00\", \"14:00\"], [\"14:30\", \"15:30\"]]\n    }\n    meeting_duration = 30\n    start_time = 9\n    end_time = 17\n    print(schedule_meeting(participants, meeting_duration, start_time, end_time))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_39"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n\n    current_time = start_time\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Jacob': '10:00,11:30,16:00',\n    'Gabriel': '9:30,13:00,15:00',\n    'Matthew': '9:00,10:30,11:30,12:30,15:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_40"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preference=None):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        if schedule:\n            blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n            participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n            participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n        else:\n            participant_schedules[participant] = []\n\n    current_time = start_time\n    if preference:\n        preference_time = datetime.strptime(preference, '%H:%M')\n        current_time = max(current_time, preference_time)\n\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Alan': '',\n    'Nancy': '11:00,13:00,14:00',\n    'Patricia': '10:00,12:30,13:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 30\npreference = '14:30'\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, preference))\n```",
            "count": "calendar_scheduling_example_41"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n\n    current_time = start_time\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Julie': '9:00,11:00,12:00,13:30,16:00',\n    'Sean': '9:00,13:00,15:00,16:00',\n    'Lori': '10:00,11:00,15:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 60\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "Other",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    participant_schedules = {}\n    for participant, schedule in participants.items():\n        blocked_times = [datetime.strptime(time, '%H:%M') for time in schedule.split(',')]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 0 else (time, time + timedelta(minutes=30)) for time in blocked_times]\n        participant_schedules[participant] = [(time, time + timedelta(minutes=30)) if time.minute == 30 else (time, time + timedelta(60)) for time in participant_schedules[participant]]\n\n    current_time = start_time\n    while current_time < end_time:\n        available = True\n        for participant, schedule in participant_schedules.items():\n            for blocked in schedule:\n                if blocked[0] <= current_time < blocked[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            meeting_end_time = current_time + meeting_duration\n            if meeting_end_time <= end_time:\n                return '{' + current_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n\n        current_time += timedelta(minutes=30)\n\n# Example usage\nparticipants = {\n    'Albert': '9:30,12:00,14:00,15:00,16:30',\n    'Gregory': '11:00,12:30,13:30,15:30',\n    'Benjamin': '9:30,10:30,11:30,14:00,15:30,16:30'\n}\nstart_time = '9:00'\nend_time = '17:00'\nmeeting_duration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_43"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(participants, duration, start_time, end_time):\n    participant_schedules = {}\n    for participant in participants:\n        schedule = []\n        for time_range in participant['schedule']:\n            schedule.append((datetime.strptime(time_range[0], '%H:%M'), datetime.strptime(time_range[1], '%H:%M')))\n        participant_schedules[participant['name']] = schedule\n\n    meeting_time = start_time\n    while meeting_time < end_time:\n        meeting_end_time = meeting_time + timedelta(minutes=duration)\n        if all(not any(start <= meeting_time < end or start < meeting_end_time <= end for start, end in schedule) for schedule in participant_schedules.values()):\n            return '{' + meeting_time.strftime('%H:%M') + ':' + meeting_end_time.strftime('%H:%M') + '}'\n        meeting_time += timedelta(minutes=30)\n\ndef main():\n    participants = [\n        {'name': 'Isabella','schedule': []},\n        {'name': 'Ronald','schedule': [('11:30', '12:00'), ('14:00', '14:30'), ('16:00', '17:00')]},\n        {'name': 'Amanda','schedule': [('9:30', '12:00'), ('12:30', '13:00'), ('13:30', '14:00'), ('15:30', '17:00')]},\n    ]\n    duration = 30\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('13:00', '%H:%M')\n    print(schedule_meeting(participants, duration, start_time, end_time))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_44"
        },
        {
            "final_program_time": "{10:30:11:00}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available and (preferences is None or is_preferred(time_slot, preferences)):\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\ndef is_preferred(time_slot, preferences):\n    for preference in preferences:\n        if preference[0] <= time_slot[0] and time_slot[1] <= preference[1]:\n            return True\n    return False\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Andrew', 'Grace', 'Samuel']\nschedules = {\n    'Andrew': [],\n    'Grace': [],\n    'Samuel': [['09:00', '10:30'], ['11:30', '12:00'], ['13:00', '13:30'], ['14:00', '16:00'], ['16:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Roger', 'Karen', 'Dorothy']\nschedules = {\n    'Roger': [],\n    'Karen': [['10:00', '10:30'], ['11:30', '12:00'], ['12:30', '13:00'], ['14:00', '15:00'], ['15:30', '16:00']],\n    'Dorothy': [['09:00', '10:00'], ['10:30', '11:00'], ['11:30', '12:00'], ['12:30', '13:00'], ['14:00', '15:30'], ['16:00', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Douglas', 'Lawrence', 'Isabella']\nschedules = {\n    'Douglas': [['12:00', '12:30'], ['15:00', '15:30']],\n    'Lawrence': [['10:30', '12:00'], ['13:00', '13:30'], ['14:00', '14:30'], ['15:30', '16:00']],\n    'Isabella': [['09:00', '12:30'], ['13:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 60\nparticipants = ['Joshua', 'Denise', 'Jeremy']\nschedules = {\n    'Joshua': [['10:00', '10:30'], ['12:00', '12:30'], ['14:00', '14:30'], ['15:00', '15:30']],\n    'Denise': [],\n    'Jeremy': [['09:30', '10:30'], ['12:00', '13:00'], ['13:30', '14:00'], ['14:30', '15:00'], ['15:30', '16:00'], ['16:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Alan', 'Elizabeth', 'Denise']\nschedules = {\n    'Alan': [['13:00', '13:30'], ['14:00', '14:30']],\n    'Elizabeth': [['09:00', '09:30'], ['11:00', '11:30']],\n    'Denise': [['09:00', '10:00'], ['10:30', '11:30'], ['12:30', '13:00'], ['13:30', '14:00'], ['14:30', '16:00'], ['16:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Mason', 'Bruce', 'Christopher']\nschedules = {\n    'Mason': [['09:30', '10:00'], ['11:00', '11:30'], ['14:30', '15:00'], ['16:30', '17:00']],\n    'Bruce': [],\n    'Christopher': [['09:30', '10:30'], ['11:30', '12:30'], ['15:00', '17:00']]\n}\npreferences = [['12:30', '17:00']]\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:30:12:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available and (preferences is None or is_preferred(time_slot, preferences)):\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\ndef is_preferred(time_slot, preferences):\n    for preference in preferences:\n        if preference[0] <= time_slot[0] and time_slot[1] <= preference[1]:\n            return True\n    return False\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Roger', 'Karen', 'Dorothy']\nschedules = {\n    'Roger': [],\n    'Karen': [['10:00', '10:30'], ['11:30', '12:00'], ['12:30', '13:00'], ['14:00', '15:00'], ['15:30', '16:00']],\n    'Dorothy': [['09:00', '10:00'], ['10:30', '11:00'], ['11:30', '12:00'], ['12:30', '13:00'], ['14:00', '15:30'], ['16:00', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Douglas', 'Lawrence', 'Isabella']\nschedules = {\n    'Douglas': [['12:00', '12:30'], ['15:00', '15:30']],\n    'Lawrence': [['10:30', '12:00'], ['13:00', '13:30'], ['14:00', '14:30'], ['15:30', '16:00']],\n    'Isabella': [['09:00', '12:30'], ['13:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 60\nparticipants = ['Joshua', 'Denise', 'Jeremy']\nschedules = {\n    'Joshua': [['10:00', '10:30'], ['12:00', '12:30'], ['14:00', '14:30'], ['15:00', '15:30']],\n    'Denise': [],\n    'Jeremy': [['09:30', '10:30'], ['12:00', '13:00'], ['13:30', '14:00'], ['14:30', '15:00'], ['15:30', '16:00'], ['16:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Alan', 'Elizabeth', 'Denise']\nschedules = {\n    'Alan': [['13:00', '13:30'], ['14:00', '14:30']],\n    'Elizabeth': [['09:00', '09:30'], ['11:00', '11:30']],\n    'Denise': [['09:00', '10:00'], ['10:30', '11:30'], ['12:30', '13:00'], ['13:30', '14:00'], ['14:30', '16:00'], ['16:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Mason', 'Bruce', 'Christopher']\nschedules = {\n    'Mason': [['09:30', '10:00'], ['11:00', '11:30'], ['14:30', '15:00'], ['16:30', '17:00']],\n    'Bruce': [],\n    'Christopher': [['09:30', '10:30'], ['11:30', '12:30'], ['15:00', '17:00']]\n}\npreferences = [['12:30', '17:00']]\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 30\nparticipants = ['Arthur', 'Theresa', 'Carl']\nschedules = {\n    'Arthur': [['09:30', '10:00'], ['14:00', '14:30']],\n    'Theresa': [['09:00', '09:30'], ['12:00', '13:00'], ['15:00', '16:30']],\n    'Carl': [['09:00', '11:30'], ['12:00', '14:00'], ['14:30', '17:00']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_46"
        },
        {
            "final_program_time": "{13:00:14:00}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available and (preferences is None or is_preferred(time_slot, preferences)):\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\ndef is_preferred(time_slot, preferences):\n    for preference in preferences:\n        if preference[0] <= time_slot[0] and time_slot[1] <= preference[1]:\n            return True\n    return False\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 60\nparticipants = ['David', 'Eric', 'Roger']\nschedules = {\n    'David': [],\n    'Eric': [['09:00', '09:30'], ['10:30', '11:30'], ['15:00', '15:30']],\n    'Roger': [['09:30', '10:30'], ['11:00', '12:00'], ['12:30', '13:00'], ['14:30', '15:00'], ['15:30', '16:30']]\n}\npreferences = None\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_47"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    possible_time_slots = []\n    current_time = start_time\n\n    while current_time < end_time:\n        time_slot = [current_time, add_minutes(current_time, meeting_duration)]\n        if time_slot[1] > end_time:\n            break\n\n        is_available = True\n        for participant, schedule in schedules.items():\n            if schedule:\n                for scheduled_time in schedule:\n                    if is_conflicting(time_slot, scheduled_time):\n                        is_available = False\n                        break\n                if not is_available:\n                    break\n\n        if is_available and (preferences is None or is_preferred(time_slot, preferences)):\n            possible_time_slots.append(time_slot)\n\n        current_time = add_minutes(current_time, 30)\n\n    return possible_time_slots[0]\n\n\ndef add_minutes(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    hours %= 24\n    return f'{hours:02d}:{mins:02d}'\n\n\ndef is_conflicting(time_slot, scheduled_time):\n    return (time_slot[0] >= scheduled_time[0] and time_slot[0] < scheduled_time[1]) or \\\n           (time_slot[1] > scheduled_time[0] and time_slot[1] <= scheduled_time[1]) or \\\n           (time_slot[0] <= scheduled_time[0] and time_slot[1] >= scheduled_time[1])\n\n\ndef is_preferred(time_slot, preferences):\n    for preference in preferences:\n        if preference[0] <= time_slot[0] and time_slot[1] <= preference[1]:\n            return True\n    return False\n\n\nstart_time = '09:00'\nend_time = '17:00'\nmeeting_duration = 60\nparticipants = ['Janet', 'Rachel', 'Cynthia']\nschedules = {\n    'Janet': [['09:30', '10:30'], ['12:30', '13:00'], ['14:00', '14:30']],\n    'Rachel': [],\n    'Cynthia': [['09:30', '10:00'], ['11:00', '11:30'], ['12:30', '14:30'], ['16:00', '17:00']]\n}\npreferences = [['13:30', '17:00']]\n\nmeeting_time = find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences)\nprint('{' + meeting_time[0] + ':' + meeting_time[1] + '}')\n```",
            "count": "calendar_scheduling_example_48"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, start_time, end_time, preferences=None):\n    # Define the schedule for each participant\n    schedules = {\n        'Teresa': [(9, 10), (13, 13.5), (14, 14.5), (15, 15.5), (16.5, 17)],\n        'Kathleen': [(9, 9.5), (12.5, 13), (13.5, 14), (15, 15.5)],\n        'Patricia': [(9, 10.5), (11.5, 12), (13, 13.5), (14, 14.5), (15.5, 16), (16.5, 17)]\n    }\n\n    # Convert meeting duration to hours\n    meeting_duration = meeting_duration / 60\n\n    # Initialize the meeting time\n    meeting_time = None\n\n    # Iterate over the time slots\n    for hour in range(int(start_time), int(end_time)):\n        for minute in range(0, 60, 30):\n            # Convert the time to hours\n            time = hour + minute / 60\n\n            # Check if the time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    if start <= time < end + meeting_duration:\n                        available = False\n                        break\n                if not available:\n                    break\n\n            # Check if Kathleen prefers not to meet after 14:30\n            if preferences and 'Kathleen' in preferences and time > 14.5:\n                available = False\n\n            # Schedule the meeting if the time slot is available\n            if available:\n                meeting_time = (hour, minute)\n                break\n\n        # Break the loop if the meeting time is scheduled\n        if meeting_time:\n            break\n\n    # Return the meeting time\n    if meeting_time:\n        start_hour, start_minute = meeting_time\n        end_hour, end_minute = start_hour + meeting_duration, start_minute\n        return '{:02d}:{:02d}:{:02d}:{:02d}'.format(int(start_hour), int(start_minute), int(end_hour), int(end_minute))\n    else:\n        return None\n\n\n# Test the function\nprint(schedule_meeting(['Teresa', 'Kathleen', 'Patricia'], 30, 9, 17, preferences={'Kathleen': 'before 14:30'}))\n```",
            "count": "calendar_scheduling_example_49"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [],\n    [],\n    [\"09:00-10:30\", \"11:00-12:00\", \"12:30-13:30\", \"14:30-15:30\", \"16:00-16:30\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_50"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [\"11:30-12:00\", \"12:30-13:30\", \"14:00-14:30\"],\n    [\"10:00-10:30\", \"12:00-12:30\"],\n    [\"09:30-10:00\", \"10:30-11:00\", \"11:30-12:30\", \"13:00-14:30\", \"15:30-17:00\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_51"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [\"09:00-09:30\", \"10:00-11:00\", \"16:00-16:30\"],\n    [\"12:30-13:00\", \"16:00-16:30\"],\n    [\"09:00-14:30\", \"15:30-16:00\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_52"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:30:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    schedules = participants\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                break\n            time = f\"{hour}:{minute:02d}\"\n            end_time = f\"{hour + (minute + meeting_duration_minute) // 60}:{(minute + meeting_duration_minute) % 60:02d}\"\n            if all(is_available(time, end_time, schedule) for schedule in schedules):\n                return f\"{{{time}:{end_time}}}\"\n\ndef is_available(start_time, end_time, schedule):\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    for meeting in schedule:\n        meeting_start_time, meeting_end_time = meeting.split('-')\n        meeting_start_time_hour, meeting_start_time_minute = map(int, meeting_start_time.split(':'))\n        meeting_end_time_hour, meeting_end_time_minute = map(int, meeting_end_time.split(':'))\n        if (start_time_hour < meeting_end_time_hour or (start_time_hour == meeting_end_time_hour and start_time_minute < meeting_end_time_minute)) and \\\n           (end_time_hour > meeting_start_time_hour or (end_time_hour == meeting_start_time_hour and end_time_minute > meeting_start_time_minute)):\n            return False\n    return True\n\nparticipants = [\n    [],\n    [\"09:30-10:00\", \"12:30-13:00\", \"14:30-15:00\", \"16:30-17:00\"],\n    [\"09:00-09:30\", \"10:00-11:00\", \"11:30-12:00\", \"13:00-14:00\", \"15:00-15:30\", \"16:30-17:00\"]\n]\n\nstart_time = \"09:00\"\nend_time = \"17:00\"\nmeeting_duration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_53"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration, start_time, end_time, preferences=None):\n    meeting_time = None\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in [0, 30]:\n            time = datetime(start_time.year, start_time.month, start_time.day, hour, minute)\n            if time >= start_time and time < end_time:\n                if all(is_available(participant, time, duration) for participant in participants):\n                    if preferences and 'not_before' in preferences:\n                        if time >= preferences['not_before']:\n                            meeting_time = time\n                            break\n                    elif preferences and 'earliest_availability' in preferences:\n                        return f\"{{{time.strftime('%H:%M'):({(time + timedelta(minutes=duration)).strftime('%H:%M')})}}}\"\n                    else:\n                        meeting_time = time\n                        break\n        if meeting_time:\n            break\n    if preferences and 'earliest_availability' in preferences:\n        return f\"{{{meeting_time.strftime('%H:%M'):({(meeting_time + timedelta(minutes=duration)).strftime('%H:%M')})}}}\"\n    return f\"{{{meeting_time.strftime('%H:%M'):({(meeting_time + timedelta(minutes=duration)).strftime('%H:%M')})}}}\"\n\ndef is_available(participant, time, duration):\n    for busy_time in participant['busy']:\n        start = datetime.strptime(busy_time[0], '%H:%M')\n        end = datetime.strptime(busy_time[1], '%H:%M')\n        if time >= start and time < end:\n            return False\n        if time + timedelta(minutes=duration) > start and time < end:\n            return False\n    return True\n\ndef main():\n    participants = [\n        {'name': 'Isabella', 'busy': [['11:00', '11:30'], ['15:30', '16:00']]},\n        {'name': 'Tyler', 'busy': [['09:00', '10:00']]},\n        {'name': 'Jordan', 'busy': [['09:00', '10:00'], ['10:30', '11:00'], ['12:30', '13:30'], ['14:00', '14:30'], ['15:00', '16:00']]},\n    ]\n    duration = 60\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('17:00', '%H:%M')\n    preferences = {'not_after': datetime.strptime('16:00', '%H:%M')}\n    print(find_meeting_time(participants, duration, start_time, end_time, preferences))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_54"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Roger': [],\n        'Karen': [(10, 0, 10, 30), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 0), (15, 30, 16, 0)],\n        'Dorothy': [(9, 0, 10, 0), (10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 30), (16, 0, 17, 0)],\n        'Douglas': [(12, 0, 12, 30), (15, 0, 15, 30)],\n        'Lawrence': [(10, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n        'Isabella': [(9, 0, 12, 30), (13, 30, 17, 0)],\n        'Joshua': [(10, 0, 10, 30), (12, 0, 12, 30), (14, 0, 14, 30), (15, 0, 15, 30)],\n        'Denise': [],\n        'Jeremy': [(9, 30, 10, 30), (12, 0, 13, 0), (13, 30, 14, 0), (14, 30, 15, 0), (15, 30, 16, 0), (16, 30, 17, 0)],\n        'Alan': [(13, 0, 13, 30), (14, 0, 14, 30)],\n        'Elizabeth': [(9, 0, 9, 30), (11, 0, 11, 30)],\n        'Mason': [(9, 30, 10, 0), (11, 0, 11, 30), (14, 30, 15, 0), (16, 30, 17, 0)],\n        'Bruce': [],\n        'Christopher': [(9, 30, 10, 30), (11, 30, 12, 30), (15, 0, 17, 0)],\n        'Keith': [(14, 0, 14, 30), (16, 0, 16, 30)],\n        'Christine': [],\n        'Cynthia': [(9, 0, 10, 30), (11, 30, 17, 0)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                if preferences and'start_after' in preferences:\n                    if time_slot[0] < preferences['start_after'][0] or (time_slot[0] == preferences['start_after'][0] and time_slot[1] < preferences['start_after'][1]):\n                        continue\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Keith', 'Christine', 'Cynthia']\nmeeting_duration = '01:00'\nwork_hours = ('09:00', '17:00')\n\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_55"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Roger': [],\n        'Karen': [(10, 0, 10, 30), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 0), (15, 30, 16, 0)],\n        'Dorothy': [(9, 0, 10, 0), (10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 30), (16, 0, 17, 0)],\n        'Douglas': [(12, 0, 12, 30), (15, 0, 15, 30)],\n        'Lawrence': [(10, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n        'Isabella': [(9, 0, 12, 30), (13, 30, 17, 0)],\n        'Joshua': [(10, 0, 10, 30), (12, 0, 12, 30), (14, 0, 14, 30), (15, 0, 15, 30)],\n        'Denise': [],\n        'Jeremy': [(9, 30, 10, 30), (12, 0, 13, 0), (13, 30, 14, 0), (14, 30, 15, 0), (15, 30, 16, 0), (16, 30, 17, 0)],\n        'Alan': [(13, 0, 13, 30), (14, 0, 14, 30)],\n        'Elizabeth': [(9, 0, 9, 30), (11, 0, 11, 30)],\n        'Mason': [(9, 30, 10, 0), (11, 0, 11, 30), (14, 30, 15, 0), (16, 30, 17, 0)],\n        'Bruce': [],\n        'Christopher': [(9, 30, 10, 30), (11, 30, 12, 30), (15, 0, 17, 0)],\n        'Donna': [(9, 30, 10, 0), (13, 0, 13, 30), (16, 0, 17, 0)],\n        'Robert': [(9, 0, 11, 0), (11, 30, 12, 0), (12, 30, 17, 0)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Jeremy', 'Donna', 'Robert']\nmeeting_duration = '00:30'\nwork_hours = ('09:00', '17:00')\n\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_56"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:16:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Roger': [],\n        'Karen': [(10, 0, 10, 30), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 0), (15, 30, 16, 0)],\n        'Dorothy': [(9, 0, 10, 0), (10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 30), (16, 0, 17, 0)],\n        'Douglas': [(12, 0, 12, 30), (15, 0, 15, 30)],\n        'Lawrence': [(10, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n        'Isabella': [(9, 0, 12, 30), (13, 30, 17, 0)],\n        'Joshua': [(10, 0, 10, 30), (12, 0, 12, 30), (14, 0, 14, 30), (15, 0, 15, 30)],\n        'Denise': [],\n        'Jeremy': [(9, 30, 10, 30), (12, 0, 13, 0), (13, 30, 14, 0), (14, 30, 15, 0), (15, 30, 16, 0), (16, 30, 17, 0)],\n        'Alan': [(13, 0, 13, 30), (14, 0, 14, 30)],\n        'Elizabeth': [(9, 0, 9, 30), (11, 0, 11, 30)],\n        'Mason': [(9, 30, 10, 0), (11, 0, 11, 30), (14, 30, 15, 0), (16, 30, 17, 0)],\n        'Bruce': [],\n        'Christopher': [(9, 30, 10, 30), (11, 30, 12, 30), (15, 0, 17, 0)],\n        'Virginia': [(10, 0, 12, 0)],\n        'Charles': [(12, 0, 12, 30), (13, 0, 13, 30)],\n        'Megan': [(9, 0, 12, 0), (13, 30, 16, 0), (16, 30, 17, 0)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                if preferences and'start_after' in preferences:\n                    if time_slot[0] < preferences['start_after'][0] or (time_slot[0] == preferences['start_after'][0] and time_slot[1] < preferences['start_after'][1]):\n                        continue\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Virginia', 'Charles', 'Megan']\nmeeting_duration = '00:30'\nwork_hours = ('09:00', '17:00')\npreferences = {'start_after': (14, 30)}\n\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_57"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_time, end_time = work_hours\n    start_time_hour, start_time_minute = map(int, start_time.split(':'))\n    end_time_hour, end_time_minute = map(int, end_time.split(':'))\n    meeting_duration_hour, meeting_duration_minute = map(int, meeting_duration.split(':'))\n\n    participant_schedules = {\n        'Roger': [],\n        'Karen': [(10, 0, 10, 30), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 0), (15, 30, 16, 0)],\n        'Dorothy': [(9, 0, 10, 0), (10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 15, 30), (16, 0, 17, 0)],\n        'Douglas': [(12, 0, 12, 30), (15, 0, 15, 30)],\n        'Lawrence': [(10, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 30, 16, 0)],\n        'Isabella': [(9, 0, 12, 30), (13, 30, 17, 0)],\n        'Joshua': [(10, 0, 10, 30), (12, 0, 12, 30), (14, 0, 14, 30), (15, 0, 15, 30)],\n        'Denise': [],\n        'Jeremy': [(9, 30, 10, 30), (12, 0, 13, 0), (13, 30, 14, 0), (14, 30, 15, 0), (15, 30, 16, 0), (16, 30, 17, 0)],\n        'Alan': [(13, 0, 13, 30), (14, 0, 14, 30)],\n        'Elizabeth': [(9, 0, 9, 30), (11, 0, 11, 30)],\n        'Mason': [(9, 30, 10, 0), (11, 0, 11, 30), (14, 30, 15, 0), (16, 30, 17, 0)],\n        'Bruce': [],\n        'Christopher': [(9, 30, 10, 30), (11, 30, 12, 30), (15, 0, 17, 0)],\n        'Joan': [(11, 0, 11, 30), (12, 30, 13, 0)],\n        'Theresa': [(12, 0, 12, 30), (15, 0, 15, 30)],\n        'Shirley': [(9, 30, 10, 30), (11, 0, 12, 0), (13, 0, 14, 0), (15, 30, 16, 30)]\n    }\n\n    for hour in range(start_time_hour, end_time_hour + 1):\n        for minute in range(0, 60):\n            if minute + meeting_duration_minute >= 60:\n                next_hour = hour + 1\n                next_minute = minute + meeting_duration_minute - 60\n            else:\n                next_hour = hour\n                next_minute = minute + meeting_duration_minute\n\n            if next_hour >= end_time_hour and next_minute > end_time_minute:\n                break\n\n            time_slot = (hour, minute, next_hour, next_minute)\n\n            if all(not any(\n                schedule[0] <= time_slot[0] < schedule[2] or\n                schedule[0] < time_slot[2] <= schedule[2] or\n                time_slot[0] <= schedule[0] < time_slot[2] or\n                time_slot[0] < schedule[2] <= time_slot[2]\n                for schedule in participant_schedules[participant]\n            ) for participant in participants):\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(*time_slot)\n\n\nparticipants = ['Joan', 'Theresa', 'Shirley']\nmeeting_duration = '01:00'\nwork_hours = ('09:00', '17:00')\n\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_58"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{15:00:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_time = work_hours[0]\n    end_time = work_hours[1]\n\n    while start_time < end_time:\n        meeting_end_time = start_time + timedelta(minutes=meeting_duration)\n        if meeting_end_time > end_time:\n            break\n\n        if all(is_available(participant, start_time, meeting_end_time) for participant in participants):\n            if preferences and 'earliest' in preferences:\n                return f\"{{{start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}}}\"\n            elif preferences and 'after' in preferences:\n                if start_time >= preferences['after']:\n                    return f\"{{{start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}}}\"\n            else:\n                return f\"{{{start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}}}\"\n\n        start_time += timedelta(minutes=30)\n\ndef is_available(participant, start_time, end_time):\n    for busy_time in participant['busy']:\n        busy_start, busy_end = busy_time\n        if (start_time >= busy_start and start_time < busy_end) or (end_time > busy_start and end_time <= busy_end):\n            return False\n    return True\n\ndef main():\n    # Task 1\n    roger = {'name': 'Roger', 'busy': []}\n    karen = {'name': 'Karen', 'busy': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                                        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                                        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                                        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]}\n    dorothy = {'name': 'Dorothy', 'busy': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                                            (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                                            (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                                            (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                                            (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                                            (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    print(find_meeting_time([roger, karen, dorothy], 30, (datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')), preferences={'earliest': datetime.strptime('9:00', '%H:%M')}))\n\n    # Task 2\n    douglas = {'name': 'Douglas', 'busy': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                            (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]}\n    lawrence = {'name': 'Lawrence', 'busy': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                                              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                                              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                                              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))]}\n    isabella = {'name': 'Isabella', 'busy': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    print(find_meeting_time([douglas, lawrence, isabella], 30, (datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))))\n\n    # Task 3\n    joshua = {'name': 'Joshua', 'busy': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                          (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                          (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                                          (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))]}\n    denise = {'name': 'Denise', 'busy': []}\n    jeremy = {'name': 'Jeremy', 'busy': [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                          (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                                          (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                                          (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                                          (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                                          (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    print(find_meeting_time([joshua, denise, jeremy], 60, (datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))))\n\n    # Task 4\n    alan = {'name': 'Alan', 'busy': [(datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                                       (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))]}\n    elizabeth = {'name': 'Elizabeth', 'busy': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\n                                                (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M'))]}\n    denise = {'name': 'Denise', 'busy': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                                          (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                                          (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                                          (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                                          (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                                          (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    print(find_meeting_time([alan, elizabeth, denise], 30, (datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')), preferences={'earliest': datetime.strptime('9:00', '%H:%M')}))\n\n    # Task 5\n    mason = {'name': 'Mason', 'busy': [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                                        (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                                        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                                        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    bruce = {'name': 'Bruce', 'busy': []}\n    christopher = {'name': 'Christopher', 'busy': [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                                                    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                                                    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    print(find_meeting_time([mason, bruce, christopher], 30, (datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')), preferences={'after': datetime.strptime('12:30', '%H:%M')}))\n\n    # Task 6\n    jeffrey = {'name': 'Jeffrey', 'busy': []}\n    jack = {'name': 'Jack', 'busy': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                                      (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                                      (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                                      (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    judith = {'name': 'Judith', 'busy': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                                          (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                                          (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                                          (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                                          (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]}\n    print(find_meeting_time([jeffrey, jack, judith], 30, (datetime.strptime('9:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')), preferences={'after': datetime.strptime('14:00', '%H:%M')}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_59"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours, preferences=None):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Apply preferences\n    preferred_time_ranges = available_time_ranges\n    if preferences:\n        preferred_time_ranges = []\n        for start_time, end_time in available_time_ranges:\n            is_preferred = True\n            for participant, preference in preferences.items():\n                if preference and start_time >= int(preference.split(':')[0]) * 60 + int(preference.split(':')[1]):\n                    is_preferred = False\n                    break\n            if is_preferred:\n                preferred_time_ranges.append((start_time, end_time))\n\n    # Return the first available time range\n    if preferred_time_ranges:\n        start_time, end_time = preferred_time_ranges[0]\n    else:\n        start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Lisa': ['10:30 to 11:00', '11:30 to 12:00', '14:00 to 15:00'],\n    'Dorothy': [],\n    'Raymond': ['9:00 to 10:00', '10:30 to 11:00', '11:30 to 15:00', '16:00 to 17:00']\n}\nmeeting_duration = '0:30'\nwork_hours = '9:00 to 17:00'\npreferences = {\n    'Dorothy': '10:30'\n}\nprint(find_meeting_time(participants, meeting_duration, work_hours, preferences))\n```",
            "count": "calendar_scheduling_example_60"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Return the first available time range\n    start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Roger': [],\n    'Karen': ['10:00 to 10:30', '11:30 to 12:00', '12:30 to 13:00', '14:00 to 15:00', '15:30 to 16:00'],\n    'Dorothy': ['9:00 to 10:00', '10:30 to 11:00', '11:30 to 12:00', '12:30 to 13:00', '14:00 to 15:30', '16:00 to 17:00']\n}\nmeeting_duration = '0:30'\nwork_hours = '9:00 to 17:00'\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_61"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:14:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Return the first available time range\n    start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Abigail': [],\n    'Michael': [],\n    'Sharon': ['9:00 to 13:00', '14:00 to 17:00']\n}\nmeeting_duration = '1:00'\nwork_hours = '9:00 to 17:00'\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_62"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, work_hours):\n    start_hour, end_hour = map(int, work_hours.split(':'))\n    meeting_duration_hours, meeting_duration_minutes = map(int, meeting_duration.split(':'))\n    meeting_duration_minutes += meeting_duration_hours * 60\n\n    # Convert existing schedules to minutes\n    schedules = {}\n    for participant, schedule in participants.items():\n        schedules[participant] = []\n        for time_range in schedule:\n            start_time, end_time = time_range.split(' to ')\n            start_hour, start_minute = map(int, start_time.split(':'))\n            end_hour, end_minute = map(int, end_time.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            schedules[participant].append((start_time_minutes, end_time_minutes))\n\n    # Find available time ranges\n    available_time_ranges = []\n    for time in range(start_hour * 60, end_hour * 60 - meeting_duration_minutes + 1):\n        is_available = True\n        for participant, schedule in schedules.items():\n            for start_time, end_time in schedule:\n                if time >= start_time and time < end_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time_ranges.append((time, time + meeting_duration_minutes))\n\n    # Return the first available time range\n    start_time, end_time = available_time_ranges[0]\n    start_hour = start_time // 60\n    start_minute = start_time % 60\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    return '{' + f'{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}' + '}'\n\n# Example usage\nparticipants = {\n    'Madison': [],\n    'Judith': ['10:00 to 10:30', '11:00 to 12:00', '12:30 to 13:00'],\n    'Roger': ['9:00 to 9:30', '10:30 to 11:00', '12:00 to 12:30', '13:00 to 13:30', '14:00 to 16:00']\n}\nmeeting_duration = '1:00'\nwork_hours = '9:00 to 17:00'\nprint(find_meeting_time(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_63"
        },
        {
            "final_program_time": "{14:30:15:30}",
            "expected_time": "{14:30:15:30}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_time = datetime.strptime(start_time, '%H:%M')\n    end_time = datetime.strptime(end_time, '%H:%M')\n    duration = timedelta(minutes=duration)\n\n    schedule = {}\n    for participant in participants:\n        schedule[participant['name']] = []\n        for time_range in participant['schedule']:\n            start, end = time_range.split(' - ')\n            schedule[participant['name']].append((datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')))\n\n    current_time = start_time\n    while current_time < end_time:\n        end_current_time = current_time + duration\n        is_available = True\n        for participant in participants:\n            if participant.get('preference') and current_time < datetime.strptime(participant['preference'], '%H:%M'):\n                is_available = False\n                break\n            for time_range in schedule[participant['name']]:\n                if time_range[0] < end_current_time and time_range[1] > current_time:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            return f\"{{{current_time.strftime('%H:%M')}:{end_current_time.strftime('%H:%M')}}}\"\n        current_time += timedelta(minutes=30)\n\nparticipants = [\n    {'name': 'Nancy','schedule': ['9:30 - 10:00', '12:30 - 13:00']},\n    {'name': 'Albert','schedule': []},\n    {'name': 'Nathan','schedule': ['9:00 - 12:30', '13:00 - 14:30', '16:00 - 17:00']}\n]\n\nprint(find_meeting_time(participants, '9:00', '17:00', 60))\n```",
            "count": "calendar_scheduling_example_64"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time, preferences=None):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Roger', [(0, 0)]),\n        ('Karen', [(600, 630), (690, 720), (780, 810), (840, 900), (930, 960)]),\n        ('Dorothy', [(0, 600), (630, 660), (690, 720), (780, 810), (840, 930), (960, 1020)]),\n        ('Douglas', [(720, 750), (900, 930)]),\n        ('Lawrence', [(630, 720), (780, 810), (840, 870), (930, 960)]),\n        ('Isabella', [(0, 750), (810, 1020)]),\n        ('Joshua', [(600, 630), (720, 750), (840, 870), (900, 930)]),\n        ('Denise', [(0, 0)]),\n        ('Jeremy', [(570, 630), (720, 780), (810, 840), (870, 900), (930, 960), (990, 1020)]),\n        ('Alan', [(780, 810), (840, 870)]),\n        ('Elizabeth', [(0, 570), (660, 690)]),\n        ('Mason', [(570, 600), (660, 690), (870, 900), (990, 1020)]),\n        ('Bruce', [(0, 0)]),\n        ('Christopher', [(570, 630), (810, 840), (900, 1020)]),\n        ('John', [(780, 810), (930, 960)]),\n        ('Andrea', [(0, 570), (660, 780), (900, 930), (960, 990)]),\n        ('Lisa', [(0, 600), (630, 660), (720, 750), (840, 930), (960, 990)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if preferences and any(meeting_start >= preference for preference in preferences):\n            break\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Roger', 'Karen', 'Dorothy'], 30, 540, 1020))\nprint(find_meeting_time(['Douglas', 'Lawrence', 'Isabella'], 30, 540, 1020))\nprint(find_meeting_time(['Joshua', 'Denise', 'Jeremy'], 60, 540, 1020))\nprint(find_meeting_time(['Alan', 'Elizabeth', 'Denise'], 30, 540, 1020))\nprint(find_meeting_time(['Mason', 'Bruce', 'Christopher'], 30, 540, 1020, [780]))\nprint(find_meeting_time(['John', 'Andrea', 'Lisa'], 30, 540, 1020))\n```",
            "count": "calendar_scheduling_example_65"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time, preferences=None):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Roger', [(0, 0)]),\n        ('Karen', [(600, 630), (690, 720), (780, 810), (840, 900), (930, 960)]),\n        ('Dorothy', [(0, 600), (630, 660), (690, 720), (780, 810), (840, 930), (960, 1020)]),\n        ('Douglas', [(720, 750), (900, 930)]),\n        ('Lawrence', [(630, 720), (780, 810), (840, 870), (930, 960)]),\n        ('Isabella', [(0, 750), (810, 1020)]),\n        ('Joshua', [(600, 630), (720, 750), (840, 870), (900, 930)]),\n        ('Denise', [(0, 0)]),\n        ('Jeremy', [(570, 630), (720, 780), (810, 840), (870, 900), (930, 960), (990, 1020)]),\n        ('Alan', [(780, 810), (840, 870)]),\n        ('Elizabeth', [(0, 570), (660, 690)]),\n        ('Mason', [(570, 600), (660, 690), (870, 900), (990, 1020)]),\n        ('Bruce', [(0, 0)]),\n        ('Christopher', [(570, 630), (810, 840), (900, 1020)]),\n        ('Ronald', [(0, 0)]),\n        ('Maria', [(0, 0)]),\n        ('Charles', [(540, 630), (660, 690), (810, 840), (870, 900), (930, 990)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if preferences and any(meeting_start >= preference for preference in preferences):\n            break\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Roger', 'Karen', 'Dorothy'], 30, 540, 1020))\nprint(find_meeting_time(['Douglas', 'Lawrence', 'Isabella'], 30, 540, 1020))\nprint(find_meeting_time(['Joshua', 'Denise', 'Jeremy'], 60, 540, 1020))\nprint(find_meeting_time(['Alan', 'Elizabeth', 'Denise'], 30, 540, 1020))\nprint(find_meeting_time(['Mason', 'Bruce', 'Christopher'], 30, 540, 1020, [780]))\nprint(find_meeting_time(['Ronald', 'Maria', 'Charles'], 60, 540, 1020))\n```",
            "count": "calendar_scheduling_example_66"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time, preferences=None):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Roger', [(0, 0)]),\n        ('Karen', [(600, 630), (690, 720), (780, 810), (840, 900), (930, 960)]),\n        ('Dorothy', [(0, 600), (630, 660), (690, 720), (780, 810), (840, 930), (960, 1020)]),\n        ('Douglas', [(720, 750), (900, 930)]),\n        ('Lawrence', [(630, 720), (780, 810), (840, 870), (930, 960)]),\n        ('Isabella', [(0, 750), (810, 1020)]),\n        ('Joshua', [(600, 630), (720, 750), (840, 870), (900, 930)]),\n        ('Denise', [(0, 0)]),\n        ('Jeremy', [(570, 630), (720, 780), (810, 840), (870, 900), (930, 960), (990, 1020)]),\n        ('Alan', [(780, 810), (840, 870)]),\n        ('Elizabeth', [(0, 570), (660, 690)]),\n        ('Mason', [(570, 600), (660, 690), (870, 900), (990, 1020)]),\n        ('Bruce', [(0, 0)]),\n        ('Christopher', [(570, 630), (810, 840), (900, 1020)]),\n        ('Jacqueline', [(780, 810), (960, 990)]),\n        ('Christian', [(0, 0)]),\n        ('Linda', [(540, 630), (690, 780), (840, 870), (930, 990)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if preferences and any(meeting_start >= preference for preference in preferences):\n            break\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            if meeting_end <= 840 and 'Linda' in participants:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n            elif 'Mason' in participants and meeting_start >= 780:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n            else:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Roger', 'Karen', 'Dorothy'], 30, 540, 1020))\nprint(find_meeting_time(['Douglas', 'Lawrence', 'Isabella'], 30, 540, 1020))\nprint(find_meeting_time(['Joshua', 'Denise', 'Jeremy'], 60, 540, 1020))\nprint(find_meeting_time(['Alan', 'Elizabeth', 'Denise'], 30, 540, 1020))\nprint(find_meeting_time(['Mason', 'Bruce', 'Christopher'], 30, 540, 1020))\nprint(find_meeting_time(['Jacqueline', 'Christian', 'Linda'], 30, 540, 1020))\n```",
            "count": "calendar_scheduling_example_67"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    schedules = {}\n    for participant in participants:\n        schedules[participant] = []\n    for participant, schedule in [\n        ('Roger', [(0, 0)]),\n        ('Karen', [(600, 630), (690, 720), (780, 810), (840, 900), (930, 960)]),\n        ('Dorothy', [(0, 600), (630, 660), (690, 720), (780, 810), (840, 930), (960, 1020)]),\n        ('Douglas', [(720, 750), (900, 930)]),\n        ('Lawrence', [(630, 720), (780, 810), (840, 870), (930, 960)]),\n        ('Isabella', [(0, 750), (810, 1020)]),\n        ('Joshua', [(600, 630), (720, 750), (840, 870), (900, 930)]),\n        ('Denise', [(0, 0)]),\n        ('Jeremy', [(570, 630), (720, 780), (810, 840), (870, 900), (930, 960), (990, 1020)]),\n        ('Alan', [(780, 810), (840, 870)]),\n        ('Elizabeth', [(0, 570), (660, 690)]),\n        ('Mason', [(570, 600), (660, 690), (870, 900), (990, 1020)]),\n        ('Bruce', [(0, 0)]),\n        ('Christopher', [(570, 630), (810, 840), (900, 1020)]),\n        ('Michael', [(600, 630), (690, 720), (810, 840), (930, 960)]),\n        ('Bryan', [(0, 0)]),\n        ('Lauren', [(540, 630), (870, 1020)]),\n    ]:\n        schedules[participant] = schedule\n\n    meeting_start = start_time\n    while meeting_start < end_time:\n        meeting_end = meeting_start + meeting_duration\n        if not any(any(start <= meeting_start < end for start, end in schedules[participant]) or \n                   any(start <= meeting_end < end for start, end in schedules[participant]) \n                   for participant in participants):\n            return '{:02d}:{:02d}:{:02d}:{:02d}'.format(meeting_start//60, meeting_start%60, meeting_end//60, meeting_end%60)\n        meeting_start += 30\n    return None\n\nprint(find_meeting_time(['Roger', 'Karen', 'Dorothy'], 30, 540, 1020))\nprint(find_meeting_time(['Douglas', 'Lawrence', 'Isabella'], 30, 540, 1020))\nprint(find_meeting_time(['Joshua', 'Denise', 'Jeremy'], 60, 540, 1020))\nprint(find_meeting_time(['Alan', 'Elizabeth', 'Denise'], 30, 540, 1020))\nprint(find_meeting_time(['Mason', 'Bruce', 'Christopher'], 30, 540, 1020))\nprint(find_meeting_time(['Michael', 'Bryan', 'Lauren'], 30, 540, 1020))\n```",
            "count": "calendar_scheduling_example_68"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:11:00}",
            "type_error": "ValueError",
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    participants = {name: [tuple(map(int, time.split('-'))) for time in times.split(',')] for name, times in participants.items()}\n    for time in range(start_time, end_time - meeting_duration + 1):\n        if all(not any(start <= time < end or start < time + meeting_duration <= end for start, end in times) for times in participants.values()):\n            return f\"{{{time:02d}:{(time + meeting_duration):02d}}}\"\n\ndef main():\n    participants = {\n        \"Shirley\": \"11:00-11:30,14:00-15:00,16:00-16:30\",\n        \"Stephen\": \"13:00-13:30,15:30-16:00\",\n        \"Paul\": \"09:00-10:00,11:00-17:00\"\n    }\n    meeting_duration = 1\n    start_time = 9\n    end_time = 17\n    print(\"{\" + find_meeting_time(participants, meeting_duration, start_time, end_time).replace('-',':').replace(' ',',') + \"}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_69"
        },
        {
            "final_program_time": null,
            "expected_time": "{11:30:12:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Denise','schedules': ['12:00-12:30', '15:30-16:00']},\n    {'name': 'Angela','schedules': []},\n    {'name': 'Natalie','schedules': ['9:00-11:30', '12:00-13:00', '14:00-14:30', '15:00-17:00']}\n]\n\nmeeting_duration = 0.5\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:00:10:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n        if 'preferences' in participant:\n            preference_start, preference_end = map(int, participant['preferences'].split('-')[0].split(':')), map(int, participant['preferences'].split('-')[1].split(':'))\n            preference_start, preference_end = preference_start[0] * 60 + preference_start[1], preference_end[0] * 60 + preference_end[1]\n            time_slots = [i for i in time_slots if i >= preference_start and i <= preference_end - meeting_duration]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Roger','schedules': []},\n    {'name': 'Karen','schedules': ['10:00-10:30', '11:30-12:00', '12:30-13:00', '14:00-15:00', '15:30-16:00']},\n    {'name': 'Dorothy','schedules': ['9:00-10:00', '10:30-11:00', '11:30-12:00', '12:30-13:00', '14:00-15:30', '16:00-17:00']}\n]\n\nmeeting_duration = 0.5\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_71"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:30}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Roger','schedules': []},\n    {'name': 'Karen','schedules': ['10:00-10:30', '11:30-12:00', '12:30-13:00', '14:00-15:00', '15:30-16:00']},\n    {'name': 'Dorothy','schedules': ['9:00-10:00', '10:30-11:00', '11:30-12:00', '12:30-13:00', '14:00-15:30', '16:00-17:00']}\n]\n\nmeeting_duration = 0.5\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_72"
        },
        {
            "final_program_time": null,
            "expected_time": "{10:30:11:00}",
            "type_error": "TypeError",
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, work_hours):\n    start_time, end_time = map(int, work_hours.split('-')[0].split(':')), map(int, work_hours.split('-')[1].split(':'))\n    start_time, end_time = start_time[0] * 60 + start_time[1], end_time[0] * 60 + end_time[1]\n    meeting_duration = meeting_duration * 60\n\n    time_slots = [i for i in range(start_time, end_time - meeting_duration + 1)]\n\n    for participant in participants:\n        for schedule in participant['schedules']:\n            schedule_start, schedule_end = map(int, schedule.split('-')[0].split(':')), map(int, schedule.split('-')[1].split(':'))\n            schedule_start, schedule_end = schedule_start[0] * 60 + schedule_start[1], schedule_end[0] * 60 + schedule_end[1]\n            time_slots = [i for i in time_slots if i < schedule_start or i + meeting_duration > schedule_end]\n\n    if time_slots:\n        start_time = min(time_slots)\n        hours, minutes = divmod(start_time, 60)\n        end_time = start_time + meeting_duration\n        end_hours, end_minutes = divmod(end_time, 60)\n        return '{' + f'{hours}:{minutes:02d}:{end_hours}:{end_minutes:02d}' + '}'\n    else:\n        return '{' + f'No available time' + '}'\n\nparticipants = [\n    {'name': 'Roger','schedules': []},\n    {'name': 'Karen','schedules': ['10:00-10:30', '11:30-12:00', '12:30-13:00', '14:00-15:00', '15:30-16:00']},\n    {'name': 'Dorothy','schedules': ['9:00-10:00', '10:30-11:00', '11:30-12:00', '12:30-13:00', '14:00-15:30', '16:00-17:00']}\n]\n\nmeeting_duration = 0.5\nwork_hours = '9:00-17:00'\n\nprint(schedule_meeting(participants, meeting_duration, work_hours))\n```",
            "count": "calendar_scheduling_example_73"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{14:00:15:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, meeting_duration, start_time, end_time):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if time[0] >= busy_time[0] and time[0] < busy_time[1]:\n                return False\n            if time[1] > busy_time[0] and time[1] <= busy_time[1]:\n                return False\n        return True\n\n    for time in [(start_time + i, start_time + i + meeting_duration) for i in range(0, end_time - start_time, 30)]:\n        if all(is_available(participant, time) for participant in participants):\n            if 'preference' in participants[0] and participants[0]['preference'] == 'after':\n                if time[0] >= participants[0]['preference_time']:\n                    return time\n            elif 'preference' in participants[0] and participants[0]['preference'] == 'before':\n                if time[0] < participants[0]['preference_time']:\n                    return time\n            else:\n                return time\n\ndef format_time(time):\n    return '{' + ':'.join(f'{t//60:02d}:{t%60:02d}' for t in time) + '}'\n\n# TASK 1\nparticipants = [\n    {'name': 'Roger', 'busy': []},\n    {'name': 'Karen', 'busy': [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]},\n    {'name': 'Dorothy', 'busy': [(9*60, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]},\n]\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, meeting_duration, start_time, end_time)))\n\n# TASK 2\nparticipants = [\n    {'name': 'Douglas', 'busy': [(12*60, 12*60+30), (15*60, 15*60+30)]},\n    {'name': 'Lawrence', 'busy': [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]},\n    {'name': 'Isabella', 'busy': [(9*60, 12*60+30), (13*60+30, 17*60)]},\n]\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, meeting_duration, start_time, end_time)))\n\n# TASK 3\nparticipants = [\n    {'name': 'Joshua', 'busy': [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]},\n    {'name': 'Denise', 'busy': []},\n    {'name': 'Jeremy', 'busy': [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]},\n]\nmeeting_duration = 60\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, meeting_duration, start_time, end_time)))\n\n# TASK 4\nparticipants = [\n    {'name': 'Alan', 'busy': [(13*60, 13*60+30), (14*60, 14*60+30)]},\n    {'name': 'Elizabeth', 'busy': [(9*60, 9*60+30), (11*60, 11*60+30)]},\n    {'name': 'Denise', 'busy': [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]},\n]\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, meeting_duration, start_time, end_time)))\n\n# TASK 5\nparticipants = [\n    {'name': 'Mason', 'busy': [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]},\n    {'name': 'Bruce', 'busy': []},\n    {'name': 'Christopher', 'busy': [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]},\n]\nmeeting_duration = 30\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, meeting_duration, start_time, end_time)))\n\n# TASK 6\nparticipants = [\n    {'name': 'Eric', 'busy': [(10*60, 12*60)], 'preference': 'before', 'preference_time': 15*60+30},\n    {'name': 'Albert', 'busy': [(12*60, 12*60+30), (15*60+30, 16*60)]},\n    {'name': 'Katherine', 'busy': [(10*60, 11*60), (11*60+30, 14*60), (15*60, 15*60+30)]},\n]\nmeeting_duration = 60\nstart_time = 9*60\nend_time = 17*60\nprint(format_time(find_meeting_time(participants, meeting_duration, start_time, end_time)))\n```",
            "count": "calendar_scheduling_example_74"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if all(is_available(person, time) for person in participants):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Task 1\nroger = []\nkaren = [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy = [(9*60, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\nprint(find_meeting_time([roger, karen, dorothy], 9*60, 17*60, 30))\n\n# Task 2\ndouglas = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella = [(9*60, 12*60+30), (13*60+30, 17*60)]\nprint(find_meeting_time([douglas, lawrence, isabella], 9*60, 17*60, 30))\n\n# Task 3\njoshua = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise = []\njeremy = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([joshua, denise, jeremy], 9*60, 17*60, 60))\n\n# Task 4\nalan = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([alan, elizabeth, denise], 9*60, 17*60, 30))\n\n# Task 5\nmason = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce = []\nchristopher = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\nprint(find_meeting_time([mason, bruce, christopher], 12*60+30, 17*60, 30))\n\n# Task 6\njacob = [(9*60, 9*60+30), (12*60+30, 13*60), (14*60+30, 15*60), (16*60+30, 17*60)]\namanda = [(10*60, 10*60+30), (12*60, 12*60+30)]\nlisa = [(11*60, 13*60), (14*60+30, 16*60+30)]\nprint(find_meeting_time([jacob, amanda, lisa], 9*60, 17*60, 60))\n```",
            "count": "calendar_scheduling_example_75"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if all(is_available(person, time) for person in participants):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Task 1\nroger = []\nkaren = [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy = [(9*60, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\nprint(find_meeting_time([roger, karen, dorothy], 9*60, 17*60, 30))\n\n# Task 2\ndouglas = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella = [(9*60, 12*60+30), (13*60+30, 17*60)]\nprint(find_meeting_time([douglas, lawrence, isabella], 9*60, 17*60, 30))\n\n# Task 3\njoshua = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise = []\njeremy = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([joshua, denise, jeremy], 9*60, 17*60, 60))\n\n# Task 4\nalan = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([alan, elizabeth, denise], 9*60, 17*60, 30))\n\n# Task 5\nmason = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce = []\nchristopher = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\nprint(find_meeting_time([mason, bruce, christopher], 12*60+30, 17*60, 30))\n\n# Task 6\njoyce = []\nbeverly = [(9*60+30, 10*60), (11*60, 11*60+30), (12*60+30, 13*60), (14*60, 14*60+30), (15*60+30, 16*60), (16*60+30, 17*60)]\npeter = [(9*60+30, 10*60+30), (11*60+30, 13*60), (14*60+30, 15*60+30), (16*60+30, 17*60)]\nprint(find_meeting_time([joyce, beverly, peter], 9*60, 17*60, 60))\n```",
            "count": "calendar_scheduling_example_76"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if all(is_available(person, time) for person in participants):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Task 1\nroger = []\nkaren = [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy = [(9*60, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\nprint(find_meeting_time([roger, karen, dorothy], 9*60, 17*60, 30))\n\n# Task 2\ndouglas = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella = [(9*60, 12*60+30), (13*60+30, 17*60)]\nprint(find_meeting_time([douglas, lawrence, isabella], 9*60, 17*60, 30))\n\n# Task 3\njoshua = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise = []\njeremy = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([joshua, denise, jeremy], 9*60, 17*60, 60))\n\n# Task 4\nalan = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([alan, elizabeth, denise], 9*60, 17*60, 30))\n\n# Task 5\nmason = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce = []\nchristopher = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\nprint(find_meeting_time([mason, bruce, christopher], 12*60+30, 17*60, 30))\n\n# Task 6\ndonald = [(10*60, 10*60+30), (11*60, 11*60+30), (12*60, 12*60+30), (13*60, 13*60+30), (15*60+30, 16*60+30)]\njoyce = [(11*60, 13*60), (14*60+30, 15*60), (16*60, 16*60+30)]\nabigail = [(9*60+30, 10*60), (11*60+30, 12*60), (13*60, 14*60), (15*60, 17*60)]\nprint(find_meeting_time([donald, joyce, abigail], 9*60, 12*60, 30))\n```",
            "count": "calendar_scheduling_example_77"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{12:30:13:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    def is_available(person, time):\n        for busy in person:\n            if (time >= busy[0] and time < busy[1]) or (time + duration > busy[0] and time + duration <= busy[1]):\n                return False\n        return True\n\n    for time in range(start_time, end_time - duration + 1):\n        if all(is_available(person, time) for person in participants):\n            start_hour = time // 60\n            start_minute = time % 60\n            end_hour = (time + duration) // 60\n            end_minute = (time + duration) % 60\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Task 1\nroger = []\nkaren = [(10*60, 10*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60), (15*60+30, 16*60)]\ndorothy = [(9*60, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (12*60+30, 13*60), (14*60, 15*60+30), (16*60, 17*60)]\nprint(find_meeting_time([roger, karen, dorothy], 9*60, 17*60, 30))\n\n# Task 2\ndouglas = [(12*60, 12*60+30), (15*60, 15*60+30)]\nlawrence = [(10*60+30, 12*60), (13*60, 13*60+30), (14*60, 14*60+30), (15*60+30, 16*60)]\nisabella = [(9*60, 12*60+30), (13*60+30, 17*60)]\nprint(find_meeting_time([douglas, lawrence, isabella], 9*60, 17*60, 30))\n\n# Task 3\njoshua = [(10*60, 10*60+30), (12*60, 12*60+30), (14*60, 14*60+30), (15*60, 15*60+30)]\ndenise = []\njeremy = [(9*60+30, 10*60+30), (12*60, 13*60), (13*60+30, 14*60), (14*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([joshua, denise, jeremy], 9*60, 17*60, 60))\n\n# Task 4\nalan = [(13*60, 13*60+30), (14*60, 14*60+30)]\nelizabeth = [(9*60, 9*60+30), (11*60, 11*60+30)]\ndenise = [(9*60, 10*60), (10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 16*60), (16*60+30, 17*60)]\nprint(find_meeting_time([alan, elizabeth, denise], 9*60, 17*60, 30))\n\n# Task 5\nmason = [(9*60+30, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (16*60+30, 17*60)]\nbruce = []\nchristopher = [(9*60+30, 10*60+30), (11*60+30, 12*60+30), (15*60, 17*60)]\nprint(find_meeting_time([mason, bruce, christopher], 12*60+30, 17*60, 30))\n\n# Task 6\nronald = [(9*60, 10*60), (11*60, 12*60)]\nteresa = [(10*60+30, 11*60), (14*60, 14*60+30)]\ncarol = [(9*60, 12*60+30), (14*60, 15*60+30), (16*60, 17*60)]\nprint(find_meeting_time([ronald, teresa, carol], 9*60, 17*60, 60))\n```",
            "count": "calendar_scheduling_example_78"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:10:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    participants_schedules = {}\n    for participant in participants:\n        participants_schedules[participant] = []\n\n    for participant, schedule in participants_schedules.items():\n        for time_range in participants[participant]:\n            schedule.append((time_range[0], time_range[1]))\n\n    participants_schedules = {k: sorted(v) for k, v in participants_schedules.items()}\n\n    start_time_minutes = start_time[0] * 60 + start_time[1]\n    end_time_minutes = end_time[0] * 60 + end_time[1]\n    duration_minutes = duration * 60\n\n    for time in range(start_time_minutes, end_time_minutes - duration_minutes + 1):\n        meeting_start_time = (time // 60, time % 60)\n        meeting_end_time = (meeting_start_time[0] + duration, meeting_start_time[1])\n\n        if meeting_start_time[1] + duration_minutes > 60:\n            meeting_end_time = (meeting_end_time[0] + 1, meeting_end_time[1] - 60)\n\n        is_available = True\n        for participant, schedule in participants_schedules.items():\n            for time_range in schedule:\n                if (meeting_start_time[0] < time_range[1] and meeting_start_time[0] >= time_range[0]) or \\\n                   (meeting_end_time[0] < time_range[1] and meeting_end_time[0] >= time_range[0]) or \\\n                   (meeting_start_time[0] <= time_range[0] and meeting_end_time[0] >= time_range[1]):\n                    is_available = False\n                    break\n            if not is_available:\n                break\n\n        if is_available:\n            return f\"{{{meeting_start_time[0]:02d}:{meeting_start_time[1]:02d}:{meeting_end_time[0]:02d}:{meeting_end_time[1]:02d}}}\"\n\n\nparticipants = {\n    \"Amy\": [(11, 0), (11, 30), (12, 0), (12, 30)],\n    \"Emma\": [],\n    \"John\": [(10, 0), (10, 30), (11, 30), (12, 0), (12, 30), (16, 0), (16, 30), (17, 0)]\n}\n\nprint(find_meeting_time(participants, (9, 0), (17, 0), 1))\n```",
            "count": "calendar_scheduling_example_79"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{13:00:13:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preferences=None):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    def apply_preferences(participants, time_range, preferences):\n        for participant, preference in preferences.items():\n            if preference and time_range[1] > preference:\n                time_range = find_time(participants, time_range[0], preference, meeting_duration)\n        return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n    if preferences:\n        time_range = apply_preferences(participants, time_range, preferences)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Michelle', 'busy': [(9.5, 10), (12.5, 13)]},\n    {'name': 'Billy', 'busy': [(10.5, 11), (11.5, 12), (14.5, 15), (16, 16.5)]},\n    {'name': 'Alexis', 'busy': [(9.5, 10.5), (11, 12), (12.5, 13), (13.5, 14.5), (16, 16.5)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 30\npreferences = {'Alexis': 15 * 60}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_80"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{12:00:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Roger', 'busy': []},\n    {'name': 'Karen', 'busy': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]},\n    {'name': 'Dorothy', 'busy': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_81"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{12:00:12:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Roger', 'busy': []},\n    {'name': 'Karen', 'busy': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]},\n    {'name': 'Dorothy', 'busy': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": "{09:00:09:30}",
            "expected_time": "{10:00:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, meeting_duration):\n    def is_available(participant, time):\n        for busy_time in participant['busy']:\n            if (time[0] < busy_time[1] and time[1] > busy_time[0]):\n                return False\n        return True\n\n    def find_time(participants, start_time, end_time, meeting_duration):\n        for time in range(start_time, end_time - meeting_duration + 1):\n            time_range = (time, time + meeting_duration)\n            if all(is_available(participant, time_range) for participant in participants):\n                return time_range\n\n    time_range = find_time(participants, start_time, end_time, meeting_duration)\n\n    start_hour, start_minute = divmod(time_range[0], 60)\n    end_hour, end_minute = divmod(time_range[1], 60)\n    return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\nparticipants = [\n    {'name': 'Roger', 'busy': []},\n    {'name': 'Karen', 'busy': [(10, 10.5), (11.5, 12), (12.5, 13), (14, 15), (15.5, 16)]},\n    {'name': 'Dorothy', 'busy': [(9, 10), (10.5, 11), (11.5, 12), (12.5, 13), (14, 15.5), (16, 17)]}\n]\n\nstart_time = 9 * 60\nend_time = 17 * 60\nmeeting_duration = 30\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_83"
        },
        {
            "final_program_time": "{09:00:10:00}",
            "expected_time": "{11:30:12:30}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration):\n    start_time = 9 * 60\n    end_time = 17 * 60\n    schedule = {}\n\n    for participant in participants:\n        schedule[participant['name']] = participant['schedule']\n\n    for time in range(start_time, end_time - meeting_duration + 1):\n        valid_time = True\n        for participant, times in schedule.items():\n            for start, end in times:\n                if time >= start and time + meeting_duration <= end:\n                    valid_time = False\n                    break\n            if not valid_time:\n                break\n        if valid_time:\n            start_hour, start_minute = divmod(time, 60)\n            end_hour, end_minute = divmod(time + meeting_duration, 60)\n            return f\"{{{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\ndef main():\n    participants = [\n        {'name': 'Kevin','schedule': [(9*60+30, 10*60), (10*60+30, 11*60), (15*60, 16*60)]},\n        {'name': 'Ryan','schedule': [(10*60+30, 11*60+30), (12*60+30, 13*60), (13*60+30, 14*60)]},\n        {'name': 'Eugene','schedule': [(9*60, 9*60+30), (10*60, 11*60), (12*60+30, 17*60)]}\n    ]\n    meeting_duration = 60\n    print(schedule_meeting(participants, meeting_duration))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_84"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{11:00:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration, preferences=None):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Apply preferences\n    if preferences:\n        for preference in preferences:\n            start_hour, start_minute = map(int, preference.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if hour * 60 + minute < start_time_minutes]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Kelly\": [],\n    \"Julia\": [[\"09:30\", \"10:00\"], [\"14:00\", \"14:30\"], [\"15:00\", \"15:30\"], [\"16:30\", \"17:00\"]],\n    \"Martha\": [[\"09:00\", \"11:00\"], [\"12:00\", \"15:00\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"00:30\"\npreferences = [\"13:30\"]\n\nprint(find_meeting_time(participants, start_time, end_time, duration, preferences))\n```",
            "count": "calendar_scheduling_example_85"
        },
        {
            "final_program_time": "{09:30:10:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Samuel\": [[\"09:00\", \"09:30\"], [\"10:00\", \"10:30\"], [\"12:00\", \"12:30\"], [\"14:00\", \"15:00\"], [\"16:00\", \"16:30\"]],\n    \"Emma\": [],\n    \"Brittany\": [[\"11:30\", \"14:30\"], [\"15:00\", \"15:30\"], [\"16:30\", \"17:00\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_86"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{10:30:11:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Brittany\": [[\"12:00\", \"13:30\"], [\"14:30\", \"15:00\"], [\"15:30\", \"16:00\"], [\"16:30\", \"17:00\"]],\n    \"Wayne\": [[\"09:30\", \"10:00\"], [\"13:00\", \"15:00\"], [\"16:30\", \"17:00\"]],\n    \"Charles\": [[\"09:00\", \"09:30\"], [\"10:00\", \"10:30\"], [\"11:30\", \"13:30\"], [\"14:30\", \"16:30\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"00:30\"\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_87"
        },
        {
            "final_program_time": "{10:30:11:30}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(participants, start_time, end_time, duration):\n    start_hour, start_minute = map(int, start_time.split(':'))\n    end_hour, end_minute = map(int, end_time.split(':'))\n    duration_hour, duration_minute = map(int, duration.split(':'))\n\n    # Convert time to minutes\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    duration_minutes = duration_hour * 60 + duration_minute\n\n    # Initialize available time slots\n    available_time_slots = []\n    for hour in range(start_hour, end_hour + 1):\n        for minute in range(60):\n            if hour * 60 + minute >= start_time_minutes and hour * 60 + minute <= end_time_minutes:\n                available_time_slots.append((hour, minute))\n\n    # Filter out unavailable time slots for each participant\n    for participant, schedule in participants.items():\n        for start, end in schedule:\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            start_time_minutes = start_hour * 60 + start_minute\n            end_time_minutes = end_hour * 60 + end_minute\n            available_time_slots = [(hour, minute) for hour, minute in available_time_slots \n                                    if not (hour * 60 + minute >= start_time_minutes and hour * 60 + minute < end_time_minutes)]\n\n    # Find a time slot that fits the meeting duration\n    for hour, minute in available_time_slots:\n        end_hour = hour + duration_hour\n        end_minute = minute + duration_minute\n        if end_hour < 24 and end_minute < 60:\n            return f\"{{{hour:02d}:{minute:02d}:{end_hour:02d}:{end_minute:02d}}}\"\n\n# Example usage\nparticipants = {\n    \"Dennis\": [],\n    \"Joseph\": [[\"09:00\", \"09:30\"], [\"12:30\", \"13:00\"]],\n    \"Isabella\": [[\"09:00\", \"10:30\"], [\"11:30\", \"12:00\"], [\"13:30\", \"14:00\"], [\"14:30\", \"17:00\"]]\n}\nstart_time = \"09:00\"\nend_time = \"17:00\"\nduration = \"01:00\"\n\nprint(find_meeting_time(participants, start_time, end_time, duration))\n```",
            "count": "calendar_scheduling_example_88"
        },
        {
            "final_program_time": "{09:30:10:30}",
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, start_time, end_time, preferences=None):\n    participants_schedule = {}\n    for participant, schedule in participants.items():\n        participants_schedule[participant] = []\n        for start, end in schedule:\n            participants_schedule[participant].append((datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')))\n\n    available_time = []\n    for time in range(int((end_time - start_time).total_seconds() / 60)):\n        current_time = start_time + timedelta(minutes=time)\n        is_available = True\n        for participant, schedule in participants_schedule.items():\n            for start, end in schedule:\n                if start <= current_time < end:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        if is_available:\n            available_time.append(current_time)\n\n    meeting_start = None\n    for time in available_time:\n        if time + timedelta(minutes=meeting_duration) <= end_time:\n            meeting_start = time\n            break\n\n    if meeting_start is None:\n        return None\n\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    if preferences is not None:\n        for preference in preferences:\n            preference_start = datetime.strptime(preference[0], '%H:%M')\n            preference_end = datetime.strptime(preference[1], '%H:%M')\n            if preference_start <= meeting_start < preference_end or preference_start < meeting_end <= preference_end:\n                return None\n\n    return '{:%H:%M}:{:%H:%M}'.format(meeting_start, meeting_end)\n\nparticipants = {\n    'Michelle': [('11:00', '12:00'), ('14:00', '15:00')],\n    'Andrea': [('09:00', '09:30'), ('11:30', '12:30'), ('13:30', '14:00'), ('14:30', '15:00'), ('16:00', '16:30')],\n    'Douglas': [('09:00', '09:30'), ('10:00', '10:30'), ('11:00', '15:00'), ('16:00', '17:00')]\n}\nmeeting_duration = 60\nstart_time = datetime.strptime('09:00', '%H:%M')\nend_time = datetime.strptime('17:00', '%H:%M')\n\nprint('{' + find_meeting_time(participants, meeting_duration, start_time, end_time) + '}')\n```",
            "count": "calendar_scheduling_example_89"
        },
        {
            "final_program_time": "{12:30:12:60}",
            "expected_time": "{13:30:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(adam_schedule, willie_schedule, gloria_schedule, start_time, end_time, meeting_duration, gloria_preference):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(adam_schedule, time_range) or not is_time_available(willie_schedule, time_range) or not is_time_available(gloria_schedule, time_range):\n                continue\n            if hour >= gloria_preference and minute >= 30:\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\nadam_schedule = [\"9:30-10:00\", \"10:30-11:00\", \"11:30-12:00\", \"16:30-17:00\"]\nwillie_schedule = [\"9:00-9:30\", \"15:30-16:00\"]\ngloria_schedule = [\"9:30-12:30\", \"13:00-13:30\", \"15:30-16:00\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 30\ngloria_preference = 15\n\nprint(find_meeting_time(adam_schedule, willie_schedule, gloria_schedule, start_time, end_time, meeting_duration, gloria_preference))\n```",
            "count": "calendar_scheduling_example_90"
        },
        {
            "final_program_time": "{11:00:11:30}",
            "expected_time": "{13:00:14:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, start_time, end_time, meeting_duration):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(roger_schedule, time_range) or not is_time_available(karen_schedule, time_range) or not is_time_available(dorothy_schedule, time_range):\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\nroger_schedule = []\nkaren_schedule = [\"10:00-10:30\", \"11:30-12:00\", \"12:30-13:00\", \"14:00-15:00\", \"15:30-16:00\"]\ndorothy_schedule = [\"9:00-10:00\", \"10:30-11:00\", \"11:30-12:00\", \"12:30-13:00\", \"14:00-15:30\", \"16:00-17:00\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 30\n\nprint(find_meeting_time(roger_schedule, karen_schedule, dorothy_schedule, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": "{11:00:11:60}",
            "expected_time": "{10:30:11:30}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, start_time, end_time, meeting_duration):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(jacqueline_schedule, time_range) or not is_time_available(henry_schedule, time_range) or not is_time_available(william_schedule, time_range):\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\njacqueline_schedule = [\"9:30-10:00\", \"16:30-17:00\"]\nhenry_schedule = []\nwilliam_schedule = [\"9:30-10:30\", \"12:30-15:00\", \"15:30-17:00\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 60\n\nprint(find_meeting_time(jacqueline_schedule, henry_schedule, william_schedule, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_92"
        },
        {
            "final_program_time": "{12:30:12:60}",
            "expected_time": "{12:30:13:00}",
            "type_error": null,
            "full_response": "```python\ndef find_meeting_time(austin_schedule, danielle_schedule, charles_schedule, start_time, end_time, meeting_duration):\n    for hour in range(start_time, end_time):\n        for minute in range(0, 60, meeting_duration):\n            if minute + meeting_duration > 60:\n                break\n            time_range = f\"{hour}:{minute:02d}-{hour}:{minute + meeting_duration:02d}\"\n            if not is_time_available(austin_schedule, time_range) or not is_time_available(danielle_schedule, time_range) or not is_time_available(charles_schedule, time_range):\n                continue\n            return f\"{{{hour}:{minute:02d}:{hour}:{minute + meeting_duration:02d}}}\"\n\ndef is_time_available(schedule, time_range):\n    start_time, end_time = time_range.split(\"-\")\n    start_hour, start_minute = map(int, start_time.split(\":\"))\n    end_hour, end_minute = map(int, end_time.split(\":\"))\n    for busy_time in schedule:\n        busy_start_time, busy_end_time = busy_time.split(\"-\")\n        busy_start_hour, busy_start_minute = map(int, busy_start_time.split(\":\"))\n        busy_end_hour, busy_end_minute = map(int, busy_end_time.split(\":\"))\n        if (start_hour < busy_end_hour or (start_hour == busy_end_hour and start_minute < busy_end_minute)) and (end_hour > busy_start_hour or (end_hour == busy_start_hour and end_minute > busy_start_minute)):\n            return False\n    return True\n\naustin_schedule = [\"10:30-11:00\", \"13:30-14:00\"]\ndanielle_schedule = [\"9:00-10:00\", \"11:00-12:00\", \"13:00-13:30\", \"15:30-16:00\"]\ncharles_schedule = [\"9:00-11:30\", \"12:00-12:30\", \"13:00-17:00\"]\nstart_time = 9\nend_time = 17\nmeeting_duration = 30\n\nprint(find_meeting_time(austin_schedule, danielle_schedule, charles_schedule, start_time, end_time, meeting_duration))\n```",
            "count": "calendar_scheduling_example_93"
        },
        {
            "final_program_time": null,
            "expected_time": "{14:30:15:00}",
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration, start_time, end_time, constraints=None):\n    if constraints is None:\n        constraints = []\n    for hour in range(start_time.hour, end_time.hour + 1):\n        for minute in range(0, 60, 30):\n            start = datetime.combine(start_time.date(), datetime.min.time())\n            start = start.replace(hour=hour, minute=minute)\n            end = start + timedelta(minutes=duration)\n            if end > end_time:\n                break\n            if all(not (start <= participant['busy'][i][0] < end or start < participant['busy'][i][1] <= end) for participant in participants for i in range(len(participant['busy']))):\n                if all(constraint(start, end) for constraint in constraints):\n                    return '{:02d}:{:02d}:{:02d}:{:02d}'.format(start.hour, start.minute, end.hour, end.minute)\n\ndef constraint1(start, end):\n    return start >= datetime.combine(start.date(), datetime.min.time()).replace(hour=13)\n\ndef main():\n    # TASK: You need to schedule a meeting for Nicholas, Elizabeth and Sandra for half an hour between the work hours of 9:00 to 17:00 on Monday.\n    participants = [\n        {'name': 'Nicholas', 'busy': []},\n        {'name': 'Elizabeth', 'busy': [\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=9, minute=30), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=10, minute=0)),\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=11, minute=30), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=12, minute=0)),\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=13, minute=30), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=14, minute=30)),\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=15, minute=0), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=15, minute=30)),\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=16, minute=30), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=17, minute=0)),\n        ]},\n        {'name': 'Sandra', 'busy': [\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=9, minute=0), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=9, minute=30)),\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=10, minute=0), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=10, minute=30)),\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=11, minute=30), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=13, minute=30)),\n            (datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=15, minute=30), datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=16, minute=30)),\n        ]},\n    ]\n    start_time = datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=9, minute=0)\n    end_time = datetime.combine(datetime.now().date(), datetime.min.time()).replace(hour=17, minute=0)\n    duration = 30\n    constraints = [constraint1]\n    print(find_meeting_time(participants, duration, start_time, end_time, constraints))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_94"
        },
        {
            "final_program_time": null,
            "expected_time": "{12:30:13:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, preferences=None):\n    # Define the schedules for each participant\n    schedules = {\n        'Jennifer': [(12, 0, 12, 30), (16, 0, 16, 30)],\n        'Gary': [(9, 30, 10, 0), (10, 30, 11, 0), (11, 30, 12, 30), (14, 0, 14, 30), (16, 30, 17, 0)],\n        'Frances': [(9, 0, 11, 0), (11, 30, 12, 30), (13, 0, 17, 0)],\n    }\n\n    # Define the preferences for each participant\n    if preferences is None:\n        preferences = {}\n\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                # Check if the participant has any preferences\n                if participant in preferences:\n                    preference_start = datetime.strptime(f\"{preferences[participant][0]}:{preferences[participant][1]}\", \"%H:%M\")\n                    if current_time < preference_start:\n                        available = False\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, and preferences\nparticipants = ['Jennifer', 'Gary', 'Frances']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 30\npreferences = {'Jennifer': (12, 30)}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, preferences))\n```",
            "count": "calendar_scheduling_example_95"
        },
        {
            "final_program_time": null,
            "expected_time": "{9:00:9:30}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules):\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, and schedules\nparticipants = ['Christopher', 'Robert', 'Wayne']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 30\nschedules = {\n    'Christopher': [(9, 30, 10, 0), (10, 30, 11, 0), (11, 30, 13, 0), (15, 0, 15, 30)],\n    'Robert': [(9, 30, 10, 0), (11, 0, 11, 30), (12, 0, 12, 30), (13, 30, 14, 30), (15, 0, 15, 30)],\n    'Wayne': [(10, 0, 17, 0)],\n}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, schedules))\n```",
            "count": "calendar_scheduling_example_96"
        },
        {
            "final_program_time": null,
            "expected_time": "{16:00:17:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                # Check if the participant has any preferences\n                if participant in preferences:\n                    preference_start = datetime.strptime(f\"{preferences[participant][0]}:{preferences[participant][1]}\", \"%H:%M\")\n                    if current_time < preference_start:\n                        available = False\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, schedules, and preferences\nparticipants = ['Joseph', 'Kyle', 'Joan']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 60\nschedules = {\n    'Joseph': [(9, 0, 10, 0), (10, 30, 11, 0), (12, 30, 13, 0), (14, 30, 15, 30)],\n    'Kyle': [(12, 30, 13, 30)],\n    'Joan': [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 11, 30), (12, 30, 14, 0), (14, 30, 15, 0), (15, 30, 16, 0)],\n}\npreferences = {'Joseph': (14, 30)}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences))\n```",
            "count": "calendar_scheduling_example_97"
        },
        {
            "final_program_time": null,
            "expected_time": "{13:30:14:00}",
            "type_error": "ValueError",
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences=None):\n    # Convert the start and end times to datetime objects\n    start_time = datetime.strptime(f\"{start_time[0]}:{start_time[1]}\", \"%H:%M\")\n    end_time = datetime.strptime(f\"{end_time[0]}:{end_time[1]}\", \"%H:%M\")\n\n    # Iterate over each possible time slot\n    for hour in range(start_time.hour, end_time.hour):\n        for minute in range(0, 60):\n            if minute == 0 and hour == start_time.hour:\n                current_time = start_time\n            else:\n                current_time = start_time + timedelta(hours=hour - start_time.hour, minutes=minute)\n\n            # Check if the current time slot is available for all participants\n            available = True\n            for participant, schedule in schedules.items():\n                for start, end in schedule:\n                    start_time = datetime.strptime(f\"{start[0]}:{start[1]}\", \"%H:%M\")\n                    end_time = datetime.strptime(f\"{end[0]}:{end[1]}\", \"%H:%M\")\n                    if start_time <= current_time < end_time:\n                        available = False\n                        break\n\n                # Check if the participant has any preferences\n                if participant in preferences:\n                    preference_end = datetime.strptime(f\"{preferences[participant][0]}:{preferences[participant][1]}\", \"%H:%M\")\n                    if current_time >= preference_end:\n                        available = False\n\n                if not available:\n                    break\n\n            # Check if the meeting duration can fit in the current time slot\n            meeting_end_time = current_time + timedelta(minutes=meeting_duration)\n            if meeting_end_time > end_time:\n                continue\n\n            # If all conditions are met, return the current time slot\n            if available:\n                return f\"{{{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}}}\"\n\n# Define the participants, start and end times, meeting duration, schedules, and preferences\nparticipants = ['Juan', 'Marilyn', 'Ronald']\nstart_time = (9, 0)\nend_time = (17, 0)\nmeeting_duration = 30\nschedules = {\n    'Juan': [(9, 0, 10, 30), (15, 30, 16, 0)],\n    'Marilyn': [(11, 0, 11, 30), (12, 30, 13, 0)],\n    'Ronald': [(9, 0, 10, 30), (12, 0, 12, 30), (13, 0, 13, 30), (14, 0, 16, 30)],\n}\npreferences = {'Juan': (16, 0)}\n\nprint(find_meeting_time(participants, start_time, end_time, meeting_duration, schedules, preferences))\n```",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": null,
            "expected_time": "{15:00:16:00}",
            "type_error": null,
            "full_response": "```python\ndef schedule_meeting(participants, meeting_duration, start_time, end_time):\n    participants_schedules = {}\n    for participant in participants:\n        schedule = []\n        for time_range in participant[1]:\n            schedule.append((time_range[0], time_range[1]))\n        participants_schedules[participant[0]] = schedule\n\n    earliest_time = start_time\n    while earliest_time < end_time:\n        time_range = (earliest_time, (earliest_time + meeting_duration) % 24)\n        if time_range[1] < time_range[0]:\n            time_range = (time_range[0], 24)\n            is_valid = True\n            for participant, schedule in participants_schedules.items():\n                for scheduled_time in schedule:\n                    if (scheduled_time[0] <= time_range[0] < scheduled_time[1]) or (scheduled_time[0] < time_range[1] <= scheduled_time[1]):\n                        is_valid = False\n                        break\n                    if (time_range[0] < scheduled_time[0] < time_range[1]) or (time_range[0] < scheduled_time[1] < time_range[1]):\n                        is_valid = False\n                        break\n                if not is_valid:\n                    break\n            if is_valid:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(time_range[0], 0, time_range[1], 0)\n            else:\n                earliest_time += 1\n        else:\n            is_valid = True\n            for participant, schedule in participants_schedules.items():\n                for scheduled_time in schedule:\n                    if (scheduled_time[0] <= time_range[0] < scheduled_time[1]) or (scheduled_time[0] < time_range[1] <= scheduled_time[1]):\n                        is_valid = False\n                        break\n                    if (time_range[0] < scheduled_time[0] < time_range[1]) or (time_range[0] < scheduled_time[1] < time_range[1]):\n                        is_valid = False\n                        break\n                if not is_valid:\n                    break\n            if is_valid:\n                return '{:02d}:{:02d}:{:02d}:{:02d}'.format(time_range[0], 0, time_range[1], 0)\n            else:\n                earliest_time += 1\n    return None\n\ndef main():\n    participants = [\n        ['Stephanie', [(9, 9.5), (13.5, 14)]],\n        ['Mark', []],\n        ['Scott', [(9, 10), (11, 12.5), (14.5, 15), (16, 17)]],\n    ]\n    meeting_duration = 1\n    start_time = 9\n    end_time = 17\n    print(schedule_meeting(participants, meeting_duration, start_time, end_time))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_99"
        }
    ]
}