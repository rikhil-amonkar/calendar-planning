{
    "0shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:20AM"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "12:30PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "12:30PM",
                    "duration": 19,
                    "to": "Marina District"
                },
                {
                    "action": "end",
                    "location": "Marina District",
                    "time": "12:49PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Mission District\n    travel_time = travel_distances[\"Marina District to Mission District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Mission District\"\n    })\n\n    # Wait for Stephanie\n    start_meet_time = datetime.strptime(constraints[\"stephanie_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Mission District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Mission District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Stephanie\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Marina District\n    travel_time = travel_distances[\"Mission District to Marina District\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Marina District\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    travel_distances = {\n        \"Marina District to Mission District\": 20,\n        \"Mission District to Marina District\": 19\n    }\n    constraints = {\n        \"stephanie_start_time\": \"10:30AM\",\n        \"min_meet_duration\": 120\n    }\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program calculates the optimal meeting schedule based on the given constraints and travel distances. The schedule is computed using logical rules and calculations, and the result is output as a JSON-formatted dictionary.",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:22AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "6:15PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "6:15PM",
                    "duration": 21,
                    "to": "Richmond District"
                },
                {
                    "action": "end",
                    "location": "Richmond District",
                    "time": "6:36PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Financial District\n    travel_time = travel_distances[\"Richmond District to Financial District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for Betty\n    start_meet_time = datetime.strptime(constraints[\"betty_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Betty\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Richmond District\n    travel_time = travel_distances[\"Financial District to Richmond District\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Richmond District\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Richmond District\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Richmond District to Financial District\": 22,\n        \"Financial District to Richmond District\": 21\n    }\n\n    constraints = {\n        \"betty_start_time\": \"5:15PM\",\n        \"min_meet_duration\": 60\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:15AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "4:45PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "4:45PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "end",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Sunset District\n    travel_time = travel_distances[\"Haight-Ashbury to Sunset District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Sunset District\"\n    })\n\n    # Wait for Jessica\n    start_meet_time = datetime.strptime(constraints[\"jessica_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Jessica\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time = travel_distances[\"Sunset District to Haight-Ashbury\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Haight-Ashbury\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Haight-Ashbury to Sunset District\": 15,\n        \"Sunset District to Haight-Ashbury\": 15\n    }\n\n    constraints = {\n        \"jessica_start_time\": \"3:15PM\",\n        \"min_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "10:52AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:52AM",
                    "duration": 23,
                    "to": "Bayview"
                },
                {
                    "action": "end",
                    "location": "Bayview",
                    "time": "11:15AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Golden Gate Park\n    travel_time = travel_distances[\"Bayview to Golden Gate Park\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Meet Barbara\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Bayview\n    travel_time = travel_distances[\"Golden Gate Park to Bayview\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Bayview\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Bayview\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Bayview to Golden Gate Park\": 22,\n        \"Golden Gate Park to Bayview\": 23\n    }\n\n    constraints = {\n        \"min_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:10AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:10AM",
                    "duration": 10,
                    "to": "Presidio"
                },
                {
                    "action": "end",
                    "location": "Presidio",
                    "time": "10:20AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Marina District\n    travel_time = travel_distances[\"Presidio to Marina District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Meet Jessica\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Presidio\n    travel_time = travel_distances[\"Marina District to Presidio\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Presidio\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Presidio\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Presidio to Marina District\": 10,\n        \"Marina District to Presidio\": 10\n    }\n\n    constraints = {\n        \"min_meet_duration\": 60\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "10:32AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "10:32AM",
                    "duration": 16,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "10:48AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to The Castro\n    travel_time = travel_distances[\"Nob Hill to The Castro\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet William\n    meet_duration = constraints[\"william_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Nob Hill\n    travel_time = travel_distances[\"The Castro to Nob Hill\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Nob Hill\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Nob Hill to The Castro\": 17,\n        \"The Castro to Nob Hill\": 16\n    }\n\n    constraints = {\n        \"william_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:41AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "10:41AM",
                    "duration": 11,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "end",
                    "location": "Fisherman's Wharf",
                    "time": "10:52AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Fisherman's Wharf to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet Kenneth\n    meet_duration = constraints[\"kenneth_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Fisherman's Wharf\n    travel_time = travel_distances[\"Nob Hill to Fisherman's Wharf\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Fisherman's Wharf to Nob Hill\": 11,\n        \"Nob Hill to Fisherman's Wharf\": 11\n    }\n\n    constraints = {\n        \"kenneth_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "10:32AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "10:32AM",
                    "duration": 18,
                    "to": "Richmond District"
                },
                {
                    "action": "end",
                    "location": "Richmond District",
                    "time": "10:50AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to North Beach\n    travel_time = travel_distances[\"Richmond District to North Beach\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n\n    # Meet John\n    meet_duration = constraints[\"john_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Richmond District\n    travel_time = travel_distances[\"North Beach to Richmond District\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Richmond District\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Richmond District\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Richmond District to North Beach\": 17,\n        \"North Beach to Richmond District\": 18\n    }\n\n    constraints = {\n        \"john_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:57AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:57AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "end",
                    "location": "Chinatown",
                    "time": "11:13AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Marina District\n    travel_time = travel_distances[\"Chinatown to Marina District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Meet Stephanie\n    meet_duration = constraints[\"stephanie_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Chinatown\n    travel_time = travel_distances[\"Marina District to Chinatown\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Chinatown\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Chinatown\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Chinatown to Marina District\": 12,\n        \"Marina District to Chinatown\": 16\n    }\n\n    constraints = {\n        \"stephanie_meet_duration\": 105\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:24AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "10:24AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "end",
                    "location": "Union Square",
                    "time": "10:31AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Union Square to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet Mary\n    meet_duration = constraints[\"mary_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Union Square\n    travel_time = travel_distances[\"Nob Hill to Union Square\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Union Square\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Union Square\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Union Square to Nob Hill\": 9,\n        \"Nob Hill to Union Square\": 7\n    }\n\n    constraints = {\n        \"mary_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:31AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:31AM",
                    "duration": 18,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "end",
                    "location": "Golden Gate Park",
                    "time": "9:49AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Marina District\n    travel_time = travel_distances[\"Golden Gate Park to Marina District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Meet James\n    meet_duration = constraints[\"james_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time = travel_distances[\"Marina District to Golden Gate Park\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Golden Gate Park to Marina District\": 16,\n        \"Marina District to Golden Gate Park\": 18\n    }\n\n    constraints = {\n        \"james_meet_duration\": 15\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:40AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "10:40AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "11:07AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Sunset District\n    travel_time = travel_distances[\"Nob Hill to Sunset District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Sunset District\"\n    })\n\n    # Meet Carol\n    meet_duration = constraints[\"carol_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Nob Hill\n    travel_time = travel_distances[\"Sunset District to Nob Hill\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Nob Hill\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Nob Hill to Sunset District\": 25,\n        \"Sunset District to Nob Hill\": 27\n    }\n\n    constraints = {\n        \"carol_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:46AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "10:46AM",
                    "duration": 15,
                    "to": "North Beach"
                },
                {
                    "action": "end",
                    "location": "North Beach",
                    "time": "11:01AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Alamo Square\n    travel_time = travel_distances[\"North Beach to Alamo Square\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Meet Barbara\n    meet_duration = constraints[\"barbara_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to North Beach\n    travel_time = travel_distances[\"Alamo Square to North Beach\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"North Beach\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"North Beach to Alamo Square\": 16,\n        \"Alamo Square to North Beach\": 15\n    }\n\n    constraints = {\n        \"barbara_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "7:00PM",
                    "duration": 4500
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Betty\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Betty\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n        {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\n# Input parameters\narrival_time = \"9:00AM\"\ndeparture_time = \"10:00PM\"\nmeeting_duration = 75\ntravel_time = 18\n\n# Compute and output the schedule\nschedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\nprint(json.dumps(schedule, indent=4))\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:00PM",
                    "duration": 7200
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Mary\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Marina District\"},\n                {\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Mary\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Marina District\"},\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Marina District\"},\n        {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 120\n    travel_time = 11\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "12:15AM",
                    "duration": 5400
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with John\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Golden Gate Park\"},\n                {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with John\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Golden Gate Park\"},\n                {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Golden Gate Park\"},\n        {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:15PM\"\n    meeting_duration = 90\n    travel_time = 21\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "12:30PM",
                    "duration": 6300
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Ronald\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n                {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Ronald\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n                {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 105\n    travel_time = 7\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "11:30PM",
                    "duration": 900
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Matthew\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Matthew\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n        {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:30PM\"\n    meeting_duration = 15\n    travel_time = 16\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 4500
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Betty\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Richmond District\"},\n                {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Betty\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Richmond District\"},\n                {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Richmond District\"},\n        {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 75\n    travel_time = 11\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "11:45PM",
                    "duration": 2700
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with John\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with John\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n        {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 45\n    travel_time = 16\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:15PM",
                    "duration": 4500
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Joseph\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Joseph\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:15PM\"\n    meeting_duration = 75\n    travel_time = 8\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:45AM",
                    "duration": 1800
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Margaret\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Mission District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Margaret\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n        {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:45PM\"\n    meeting_duration = 30\n    travel_time = 12\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "8:15AM",
                    "duration": 6300
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Andrew\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Andrew\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n        {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:15PM\"\n    meeting_duration = 105\n    travel_time = 22\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "6:00PM",
                    "duration": 4500
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with John\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n                {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with John\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n                {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 75\n    travel_time = 23\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "9:15AM",
                    "duration": 1800
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Matthew\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Matthew\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n        {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:15PM\"\n    meeting_duration = 30\n    travel_time = 17\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "12:45PM",
                    "duration": 6300
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with David\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with David\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 105\n    travel_time = 23\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "6:15AM",
                    "duration": 6300
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Sarah\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Sarah\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n        {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:15PM\"\n    meeting_duration = 105\n    travel_time = 7\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "4:45AM",
                    "duration": 900
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Margaret\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Margaret\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n        {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 15\n    travel_time = 7\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 4500
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Joshua\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Joshua\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 75\n    travel_time = 7\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "6:45PM",
                    "duration": 4500
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Nancy\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Nancy\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n        {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 75\n    travel_time = 15\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:15PM",
                    "duration": 7200
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Stephanie\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Stephanie\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n        {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:15PM\"\n    meeting_duration = 120\n    travel_time = 17\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:00PM",
                    "duration": 900
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Anthony\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Alamo Square\"},\n                {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Anthony\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Alamo Square\"},\n                {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Alamo Square\"},\n        {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:00PM\"\n    meeting_duration = 15\n    travel_time = 11\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:30AM",
                    "duration": 6300
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Jeffrey\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Golden Gate Park\"},\n                {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Jeffrey\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Golden Gate Park\"},\n                {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Golden Gate Park\"},\n        {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:30PM\"\n    meeting_duration = 105\n    travel_time = 11\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "6:30AM",
                    "duration": 900
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Sarah\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Sarah\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n        {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 15\n    travel_time = 30\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "8:15AM",
                    "duration": 6300
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Thomas\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Thomas\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n        {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:15PM\"\n    meeting_duration = 105\n    travel_time = 23\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 5400
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Jason\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Jason\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:30PM\"\n    meeting_duration = 90\n    travel_time = 18\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "8:45AM",
                    "duration": 3600
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Barbara\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Embarcadero\"},\n                {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Barbara\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Embarcadero\"},\n                {\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Embarcadero\"},\n        {\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 60\n    travel_time = 14\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:00PM",
                    "duration": 5400
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Jeffrey\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Financial District\"},\n                {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Jeffrey\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Financial District\"},\n                {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Financial District\"},\n        {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:00PM\"\n    meeting_duration = 90\n    travel_time = 19\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "1:30AM",
                    "duration": 2700
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Margaret\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Margaret\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n        {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:30PM\"\n    meeting_duration = 45\n    travel_time = 10\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:45PM",
                    "duration": 7200
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Stephanie\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Stephanie\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 120\n    travel_time = 11\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "5:00PM",
                    "duration": 4500
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Deborah\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Deborah\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n        {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:00PM\"\n    meeting_duration = 75\n    travel_time = 17\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "4:15PM",
                    "duration": 2700
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with George\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with George\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n        {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:15PM\"\n    meeting_duration = 45\n    travel_time = 18\n\n    # Compute and output the schedule\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:30PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, nob_hill_to_presidio, presidio_to_nob_hill, timothy_available_start, timothy_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to Presidio\n    travel_to_presidio = arrival + timedelta(minutes=nob_hill_to_presidio)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with Timothy\n    timothy_available_start_dt = datetime.strptime(timothy_available_start, '%I:%M%p')\n    timothy_available_end_dt = datetime.strptime(timothy_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(timothy_available_start_dt, travel_to_presidio)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within Timothy's available time\n    if latest_end <= timothy_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": nob_hill_to_presidio,\n            \"time\": travel_to_presidio.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": presidio_to_nob_hill,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Nob Hill\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": nob_hill_to_presidio,\n            \"time\": travel_to_presidio.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": travel_to_presidio.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": presidio_to_nob_hill,\n            \"time\": travel_to_presidio.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    \n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    nob_hill_to_presidio = 17\n    presidio_to_nob_hill = 18\n    timothy_available_start = \"1:00PM\"\n    timothy_available_end = \"7:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, nob_hill_to_presidio, presidio_to_nob_hill, timothy_available_start, timothy_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Marina District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Marina District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Marina District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Marina District at 9:00AM.\")\n    print(\"You travel to Chinatown in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 9:00AM.\")\n    print(\"You meet Sandra for 15 minutes from 9:00AM to 9:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"11:45AM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Pacific Heights\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 13 minutes and arrive at 9:13AM.\")\n    print(\"You wait until 8:45AM.\")\n    print(\"You meet Betty for 105 minutes from 8:45AM to 11:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"8:45AM\"\n    destination_available_end = \"6:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to North Beach\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Alamo Square in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 7:30PM.\")\n    print(\"You meet Emily for 15 minutes from 7:30PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"7:30PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Haight-Ashbury\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to North Beach in 19 minutes and arrive at 9:19AM.\")\n    print(\"You meet Robert for 90 minutes from 4:30PM to 6:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 19\n    destination_available_start = \"4:30PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Richmond District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Nob Hill in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet Paul for 15 minutes from 9:30AM to 9:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"11:15AM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Financial District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Union Square in 9 minutes and arrive at 9:09AM.\")\n    print(\"You meet Joseph for 15 minutes from 9:30PM to 9:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"9:30PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Richmond District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Bayview in 26 minutes and arrive at 9:26AM.\")\n    print(\"You meet Sarah for 45 minutes from 2:15PM to 3:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 26\n    destination_available_start = \"2:15PM\"\n    destination_available_end = \"5:30PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to North Beach\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Nob Hill in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Melissa for 75 minutes from 9:30AM to 10:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"8:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to The Castro\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Embarcadero in 22 minutes and arrive at 9:22AM.\")\n    print(\"You meet Laura for 15 minutes from 8:00AM to 8:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"8:00AM\"\n    destination_available_end = \"11:00AM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Richmond District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Russian Hill\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Richmond District in 14 minutes and arrive at 9:14AM.\")\n    print(\"You wait until 1:15PM.\")\n    print(\"You meet Barbara for 45 minutes from 1:15PM to 2:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 14\n    destination_available_start = \"1:15PM\"\n    destination_available_end = \"6:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Richmond District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Alamo Square in 13 minutes and arrive at 9:13AM.\")\n    print(\"You meet Ashley for 120 minutes from 10:15AM to 12:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"1:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Mission District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Financial District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Mission District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Mission District in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 1:15PM.\")\n    print(\"You meet William for 45 minutes from 1:15PM to 2:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"1:15PM\"\n    destination_available_end = \"2:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Financial District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Nob Hill in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 11:30AM.\")\n    print(\"You meet Helen for 45 minutes from 11:30AM to 12:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"11:30AM\"\n    destination_available_end = \"12:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Nob Hill in 8 minutes and arrive at 9:08AM.\")\n    print(\"You meet Joshua for 45 minutes from 10:15AM to 11:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"1:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Bayview\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Sunset District in 23 minutes and arrive at 9:23AM.\")\n    print(\"You meet Jessica for 60 minutes from 10:30AM to 11:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 23\n    destination_available_start = \"10:30AM\"\n    destination_available_end = \"5:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Financial District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to The Castro\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Financial District in 20 minutes and arrive at 9:20AM.\")\n    print(\"You meet Nancy for 30 minutes from 9:15AM to 9:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"9:15AM\"\n    destination_available_end = \"4:45PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Bayview\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 19 minutes and arrive at 9:19AM.\")\n    print(\"You meet Richard for 105 minutes from 7:00AM to 9:05AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 19\n    destination_available_start = \"7:00AM\"\n    destination_available_end = \"3:45PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Union Square\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Chinatown in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Carol for 45 minutes from 6:30PM to 7:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"6:30PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Golden Gate Park\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Presidio in 11 minutes and arrive at 9:11AM.\")\n    print(\"You wait until 7:15PM.\")\n    print(\"You meet Stephanie for 90 minutes from 7:15PM to 8:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"7:15PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Presidio\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Russian Hill in 14 minutes and arrive at 9:14AM.\")\n    print(\"You meet Amanda for 15 minutes from 11:30AM to 11:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 14\n    destination_available_start = \"11:30AM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Presidio\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Bayview in 31 minutes and arrive at 9:31AM.\")\n    print(\"You meet Nancy for 30 minutes from 7:15AM to 7:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 31\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"5:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Nob Hill\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 8 minutes and arrive at 9:08AM.\")\n    print(\"You meet Margaret for 45 minutes from 3:45PM to 4:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"3:45PM\"\n    destination_available_end = \"7:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Golden Gate Park\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Embarcadero in 25 minutes and arrive at 9:25AM.\")\n    print(\"You meet Sandra for 45 minutes from 7:00PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 25\n    destination_available_start = \"7:00PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Nob Hill\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Presidio in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet Robert for 120 minutes from 11:15AM to 1:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"11:15AM\"\n    destination_available_end = \"5:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Financial District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Golden Gate Park\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Financial District in 26 minutes and arrive at 9:26AM.\")\n    print(\"You wait until 8:00PM.\")\n    print(\"You meet Kenneth for 105 minutes from 8:00PM to 9:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 26\n    destination_available_start = \"8:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Haight-Ashbury\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Russian Hill in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet Patricia for 30 minutes from 7:45AM to 8:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"7:45AM\"\n    destination_available_end = \"2:15PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Union Square in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Mark for 90 minutes from 8:00AM to 9:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"8:00AM\"\n    destination_available_end = \"12:45PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Golden Gate Park\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to North Beach in 24 minutes and arrive at 9:24AM.\")\n    print(\"You meet Ronald for 30 minutes from 9:30AM to 10:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 24\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"6:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Haight-Ashbury\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Bayview in 18 minutes and arrive at 9:18AM.\")\n    print(\"You meet Paul for 90 minutes from 11:00AM to 12:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"11:00AM\"\n    destination_available_end = \"4:30PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Pacific Heights\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Alamo Square in 10 minutes and arrive at 9:10AM.\")\n    print(\"You meet John for 90 minutes from 9:45AM to 11:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"9:45AM\"\n    destination_available_end = \"2:30PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Russian Hill\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Barbara for 60 minutes from 7:15AM to 8:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "5:02PM",
                    "duration": 17,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, richard_start, richard_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to Nob Hill\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for Richard to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(richard_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Richmond District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n        return schedule\n\n    # Meet Richard\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Richmond District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    richard_start = \"4:00PM\"\n    richard_end = \"6:15PM\"\n    travel_time = 17\n    meeting_duration = 45\n\n    schedule = compute_schedule(arrival_time, richard_start, richard_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:45AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "11:58AM",
                    "duration": 13,
                    "to": "Pacific Heights"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Pacific Heights\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Pacific Heights\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Pacific Heights\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:30AM\"\n    friend_end = \"2:45PM\"\n    travel_time = 13\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "6:00PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "6:16PM",
                    "duration": 16,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Marina District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Marina District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"5:00PM\"\n    friend_end = \"8:15PM\"\n    travel_time = 16\n    meeting_duration = 60\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:18AM",
                    "duration": 9,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Richmond District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Richmond District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:15AM\"\n    friend_end = \"8:30PM\"\n    travel_time = 9\n    meeting_duration = 30\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "7:45PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "8:04PM",
                    "duration": 19,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Union Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Union Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Union Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:00PM\"\n    friend_end = \"8:00PM\"\n    travel_time = 19\n    meeting_duration = 105\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "2:37PM",
                    "duration": 22,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Bayview\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to North Beach\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"North Beach\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to North Beach\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"1:30PM\"\n    friend_end = \"7:45PM\"\n    travel_time = 22\n    meeting_duration = 45\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "12:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "12:57PM",
                    "duration": 12,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Mission District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:30AM\"\n    friend_end = \"10:00PM\"\n    travel_time = 12\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "1:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "1:58PM",
                    "duration": 13,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Richmond District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Richmond District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:30PM\"\n    friend_end = \"7:15PM\"\n    travel_time = 13\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "7:10PM",
                    "duration": 10,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Golden Gate Park\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Golden Gate Park\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"5:45PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 10\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "10:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:42PM",
                    "duration": 12,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Presidio\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Presidio\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Presidio\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:45PM\"\n    friend_end = \"10:30PM\"\n    travel_time = 12\n    meeting_duration = 45\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "11:35AM",
                    "duration": 5,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Alamo Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Alamo Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Alamo Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:00AM\"\n    friend_end = \"1:00PM\"\n    travel_time = 5\n    meeting_duration = 30\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_84",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:04AM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "1:34PM",
                    "duration": 4,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to North Beach\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"North Beach\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to North Beach\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"1:15PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 4\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "8:00PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "8:12PM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Marina District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Marina District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:45PM\"\n    friend_end = \"9:00PM\"\n    travel_time = 12\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "10:26AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "10:37AM",
                    "duration": 11,
                    "to": "Embarcadero"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:30AM\"\n    friend_end = \"3:00PM\"\n    travel_time = 11\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:00PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:11PM",
                    "duration": 11,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Sunset District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Sunset District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Sunset District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:45PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 11\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "7:00PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "7:15PM",
                    "duration": 15,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Bayview\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Mission District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:00PM\"\n    friend_end = \"7:30PM\"\n    travel_time = 15\n    meeting_duration = 60\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n    \n    # Travel to Laura's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Chinatown\"\n    })\n    \n    # Wait until Laura is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Laura\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"8:15AM\"\n    end_time = \"6:45PM\"\n    travel_time = 16  # Alamo Square to Chinatown\n    meeting_duration = 15  # Minimum meeting duration\n    \n    schedule = compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n    \n    # Account for return travel time\n    end_time = datetime.strptime(end_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time})\n    \n    # Travel to Daniel's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Richmond District\"\n    })\n    \n    # Wait until Daniel is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Richmond District\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Daniel\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"7:00PM\"\n    end_time = \"8:15PM\"\n    travel_time = 14  # Russian Hill to Richmond District\n    meeting_duration = 75  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time})\n    \n    # Travel to Carol's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"The Castro\"\n    })\n    \n    # Wait until Carol is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"The Castro\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Carol\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Financial District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"2:00PM\"\n    end_time = \"5:45PM\"\n    travel_time = 23  # Financial District to The Castro\n    meeting_duration = 45  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time})\n    \n    # Travel to Emily's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Chinatown\"\n    })\n    \n    # Wait until Emily is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Emily\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"7:00PM\"\n    end_time = \"9:00PM\"\n    travel_time = 6  # North Beach to Chinatown\n    meeting_duration = 75  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_93",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n    \n    # Travel to James' location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Wait until James is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet James\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"11:15AM\"\n    end_time = \"12:00PM\"\n    travel_time = 13  # Alamo Square to Russian Hill\n    meeting_duration = 15  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_94",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time})\n    \n    # Travel to Steven's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Bayview\"\n    })\n    \n    # Wait until Steven is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Bayview\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Steven\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"11:00AM\"\n    end_time = \"12:45PM\"\n    travel_time = 22  # North Beach to Bayview\n    meeting_duration = 90  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time})\n    \n    # Travel to Rebecca's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Wait until Rebecca is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Nob Hill\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Rebecca\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Sunset District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"9:00AM\"\n    end_time = \"6:15PM\"\n    travel_time = 27  # Sunset District to Nob Hill\n    meeting_duration = 30  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival_time})\n    \n    # Travel to Charles' location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Richmond District\"\n    })\n    \n    # Wait until Charles is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Richmond District\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Charles\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Chinatown\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"6:00PM\"\n    end_time = \"9:00PM\"\n    travel_time = 20  # Chinatown to Richmond District\n    meeting_duration = 75  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n    \n    # Travel to Timothy's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Richmond District\"\n    })\n    \n    # Wait until Timothy is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Richmond District\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Timothy\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"8:45PM\"\n    end_time = \"9:30PM\"\n    travel_time = 12  # Alamo Square to Richmond District\n    meeting_duration = 45  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival_time})\n    \n    # Travel to Kevin's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Union Square\"\n    })\n    \n    # Wait until Kevin is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Union Square\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Kevin\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Fisherman's Wharf\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    arrival_time = \"9:00AM\"\n    start_time = \"1:15PM\"\n    end_time = \"7:15PM\"\n    travel_time = 13  # Fisherman's Wharf to Union Square\n    meeting_duration = 15  # Minimum meeting duration\n    \n    compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ],
    "5shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Alamo Square\n    if \"Alamo Square\" in travel_distances:\n        travel_time = travel_distances[\"Marina District to Alamo Square\"]\n        departure_time = arrival_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time,\n            \"time\": departure_time.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n\n    # Travel to Embarcadero\n    elif \"Embarcadero\" in travel_distances:\n        travel_time = travel_distances[\"Pacific Heights to Embarcadero\"]\n        departure_time = arrival_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": departure_time.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n\n    # Travel to North Beach\n    elif \"North Beach\" in travel_distances:\n        travel_time = travel_distances[\"Haight-Ashbury to North Beach\"]\n        departure_time = arrival_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": departure_time.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n\n    # Travel to Embarcadero\n    elif \"Embarcadero\" in travel_distances:\n        travel_time = travel_distances[\"Presidio to Embarcadero\"]\n        departure_time = arrival_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": departure_time.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n\n    # Travel to Richmond District\n    elif \"Richmond District\" in travel_distances:\n        travel_time = travel_distances[\"Nob Hill to Richmond District\"]\n        departure_time = arrival_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": departure_time.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n\n    # Travel to Mission District\n    elif \"Mission District\" in travel_distances:\n        travel_time = travel_distances[\"Marina District to Mission District\"]\n        departure_time = arrival_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time,\n            \"time\": departure_time.strftime('%I:%M%p'),\n            \"to\": \"Mission District\"\n        })\n\n    # Wait for James\n    if \"James\" in constraints:\n        start_meet_time = datetime.strptime(constraints[\"james_start_time\"], '%I:%M%p')\n        wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": departure_time.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n        })\n\n    # Wait for Betty\n    elif \"Betty\" in constraints:\n        start_meet_time = datetime.strptime(constraints[\"betty_start_time\"], '%I:%M%p')\n        wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": departure_time.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n        })\n\n    # Wait for Stephanie\n    elif \"Stephanie\" in constraints:\n        start_meet_time = datetime.strptime(constraints[\"stephanie_start_time\"], '%I:%M%p')\n        wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": departure_time.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n        })\n\n    # Wait for Kevin\n    elif \"Kevin\" in constraints:\n        start_meet_time = datetime.strptime(constraints[\"kevin_start_time\"], '%I:%M%p')\n        wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": departure_time.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n        })\n\n    # Wait for Jason\n    elif \"Jason\" in constraints:\n        start_meet_time = datetime.strptime(constraints[\"jason_start_time\"], '%I:%M%p')\n        wait_time = max(0, (start_meet_time - arrival_time).total_seconds() / 60)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": arrival_time.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": (arrival_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n        })\n\n    # Meet James\n    if \"James\" in constraints:\n        meet_duration = constraints[\"min_meet_duration\"]\n        meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": meet_duration,\n            \"time\": meet_end_time.strftime('%I:%M%p')\n        })\n\n    # Meet Betty\n    elif \"Betty\" in constraints:\n        meet_duration = constraints[\"min_meet_duration\"]\n        meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"duration\": meet_duration,\n            \"time\": meet_end_time.strftime('%I:%M%p')\n        })\n\n    # Meet Stephanie\n    elif \"Stephanie\" in constraints:\n        meet_duration = constraints[\"min_meet_duration\"]\n        meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"duration\": meet_duration,\n            \"time\": meet_end_time.strftime('%I:%M%p')\n        })\n\n    # Meet Kevin\n    elif \"Kevin\" in constraints:\n        meet_duration = constraints[\"min_meet_duration\"]\n        meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"duration\": meet_duration,\n            \"time\": meet_end_time.strftime('%I:%M%p')\n        })\n\n    # Meet Jason\n    elif \"Jason\" in constraints:\n        meet_duration = constraints[\"min_meet_duration\"]\n        meet_end_time = (arrival_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": meet_duration,\n            \"time\": meet_end_time.strftime('%I:%M%p')\n        })\n\n    # Travel back to Marina District\n    if \"Marina District\" in travel_distances:\n        travel_time = travel_distances[\"Mission District to Marina District\"]\n        return_time = meet_end_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": meet_end_time.strftime('%I:%M%p'),\n            \"to\": \"Marina District\"\n        })\n        schedule.append({\n            \"action\": \"end\",\n            \"location\": \"Marina District\",\n            \"time\": return_time.strftime('%I:%M%p')\n        })\n\n    # Travel back to Pacific Heights\n    elif \"Pacific Heights\" in travel_distances:\n        travel_time = travel_distances[\"Embarcadero to Pacific Heights\"]\n        return_time = meet_end_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": meet_end_time.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"end\",\n            \"location\": \"Pacific Heights\",\n            \"time\": return_time.strftime('%I:%M%p')\n        })\n\n    # Travel back to Haight-Ashbury\n    elif \"Haight-Ashbury\" in travel_distances:\n        travel_time = travel_distances[\"North Beach to Haight-Ashbury\"]\n        return_time = meet_end_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": meet_end_time.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n        schedule.append({\n            \"action\": \"end\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": return_time.strftime('%I:%M%p')\n        })\n\n    # Travel back to Presidio\n    elif \"Presidio\" in travel_distances:\n        travel_time = travel_distances[\"Embarcadero to Presidio\"]\n        return_time = meet_end_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": meet_end_time.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"end\",\n            \"location\": \"Presidio\",\n            \"time\": return_time.strftime('%I:%M%p')\n        })\n\n    # Travel back to Nob Hill\n    elif \"Nob Hill\" in travel_distances:\n        travel_time = travel_distances[\"Richmond District to Nob Hill\"]\n        return_time = meet_end_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": meet_end_time.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"end\",\n            \"location\": \"Nob Hill\",\n            \"time\": return_time.strftime('%I:%M%p')\n        })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Marina District to Alamo Square\": 15,\n        \"Alamo Square to Marina District\": 15,\n        \"Pacific Heights to Embarcadero\": 10,\n        \"Embarcadero to Pacific Heights\": 11,\n        \"Haight-Ashbury to North Beach\": 19,\n        \"North Beach to Haight-Ashbury\": 18,\n        \"Presidio to Embarcadero\": 20,\n        \"Embarcadero to Presidio\": 20,\n        \"Nob Hill to Richmond District\": 14,\n        \"Richmond District to Nob Hill\": 17,\n        \"Marina District to Mission District\": 20,\n        \"Mission District to Marina District\": 19\n    }\n\n    constraints = {\n        \"james_start_time\": \"3:45PM\",\n        \"min_meet_duration\": 75,\n        \"betty_start_time\": \"3:15PM\",\n        \"min_meet_duration\": 60,\n        \"stephanie_start_time\": \"11:00AM\",\n        \"min_meet_duration\": 75,\n        \"kevin_start_time\": \"12:45PM\",\n        \"min_meet_duration\": 30,\n        \"jason_start_time\": \"7:00AM\",\n        \"min_meet_duration\": 120\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "2:45PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "3:15PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "3:15PM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "end",
                    "location": "Haight-Ashbury",
                    "time": "3:34PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:12AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "5:00PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:15AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "10:00PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:10AM"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "8:45PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:22AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "6:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Chinatown\n    travel_time = travel_distances[\"Haight-Ashbury to Chinatown\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Chinatown\"\n    })\n\n    # Wait for Joseph\n    start_meet_time = datetime.strptime(constraints[\"joseph_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Joseph\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time = travel_distances[\"Chinatown to Haight-Ashbury\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Haight-Ashbury\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Marina District to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet Timothy\n    meet_duration = constraints[\"timothy_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Golden Gate Park\n    travel_time = travel_distances[\"Mission District to Golden Gate Park\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for Elizabeth\n    start_meet_time = datetime.strptime(constraints[\"elizabeth_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Elizabeth\n    meet_duration = constraints[\"elizabeth_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Bayview\n    travel_time = travel_distances[\"Mission District to Bayview\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait for Jeffrey\n    start_meet_time = datetime.strptime(constraints[\"jeffrey_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Bayview\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Bayview\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Jeffrey\n    meet_duration = constraints[\"jeffrey_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Mission District\n    travel_time = travel_distances[\"Alamo Square to Mission District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Mission District\"\n    })\n\n    # Wait for Joshua\n    start_meet_time = datetime.strptime(constraints[\"joshua_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Mission District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Mission District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Joshua\n    meet_duration = constraints[\"joshua_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Financial District\n    travel_time = travel_distances[\"Richmond District to Financial District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for Betty\n    start_meet_time = datetime.strptime(constraints[\"betty_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Betty\n    meet_duration = constraints[\"betty_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Haight-Ashbury to Chinatown\": 19,\n        \"Chinatown to Haight-Ashbury\": 19,\n        \"Marina District to Nob Hill\": 12,\n        \"Nob Hill to Marina District\": 11,\n        \"Mission District to Golden Gate Park\": 17,\n        \"Golden Gate Park to Mission District\": 17,\n        \"Mission District to Bayview\": 15,\n        \"Bayview to Mission District\": 13,\n        \"Alamo Square to Mission District\": 10,\n        \"Mission District to Alamo Square\": 11,\n        \"Richmond District to Financial District\": 22,\n        \"Financial District to Richmond District\": 21\n    }\n\n    constraints = {\n        \"joseph_start_time\": \"2:45PM\",\n        \"min_meet_duration\": 30,\n        \"timothy_meet_duration\": 120,\n        \"elizabeth_start_time\": \"4:00PM\",\n        \"elizabeth_meet_duration\": 60,\n        \"jeffrey_start_time\": \"9:45PM\",\n        \"jeffrey_meet_duration\": 15,\n        \"joshua_start_time\": \"7:45PM\",\n        \"joshua_meet_duration\": 60,\n        \"betty_start_time\": \"5:15PM\",\n        \"betty_meet_duration\": 60\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:12AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "8:15PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:45PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:45PM",
                    "duration": 8,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "end",
                    "location": "Fisherman's Wharf",
                    "time": "9:53PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:24AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "5:30PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:15AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "2:45PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:20AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:45AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:15AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "4:45PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Chinatown\n    travel_time = travel_distances[\"Fisherman's Wharf to Chinatown\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Chinatown\"\n    })\n\n    # Wait for Emily\n    start_meet_time = datetime.strptime(constraints[\"emily_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Emily\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Fisherman's Wharf\n    travel_time = travel_distances[\"Chinatown to Fisherman's Wharf\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Union Square to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet Robert\n    meet_duration = constraints[\"robert_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Sunset District\n    travel_time = travel_distances[\"Marina District to Sunset District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Sunset District\"\n    })\n\n    # Wait for Rebecca\n    start_meet_time = datetime.strptime(constraints[\"rebecca_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Rebecca\n    meet_duration = constraints[\"rebecca_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Russian Hill\n    travel_time = travel_distances[\"Mission District to Russian Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Wait for Amanda\n    start_meet_time = datetime.strptime(constraints[\"amanda_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Amanda\n    meet_duration = constraints[\"amanda_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Financial District\n    travel_time = travel_distances[\"The Castro to Financial District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for Carol\n    start_meet_time = datetime.strptime(constraints[\"carol_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Carol\n    meet_duration = constraints[\"carol_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Sunset District\n    travel_time = travel_distances[\"Haight-Ashbury to Sunset District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Sunset District\"\n    })\n\n    # Wait for Jessica\n    start_meet_time = datetime.strptime(constraints[\"jessica_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Jessica\n    meet_duration = constraints[\"jessica_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Fisherman's Wharf to Chinatown\": 12,\n        \"Chinatown to Fisherman's Wharf\": 8,\n        \"Union Square to Nob Hill\": 9,\n        \"Nob Hill to Union Square\": 7,\n        \"Marina District to Sunset District\": 19,\n        \"Sunset District to Marina District\": 21,\n        \"Mission District to Russian Hill\": 15,\n        \"Russian Hill to Mission District\": 16,\n        \"The Castro to Financial District\": 20,\n        \"Financial District to The Castro\": 23,\n        \"Haight-Ashbury to Sunset District\": 15,\n        \"Sunset District to Haight-Ashbury\": 15\n    }\n\n    constraints = {\n        \"emily_start_time\": \"8:15PM\",\n        \"min_meet_duration\": 90,\n        \"robert_meet_duration\": 15,\n        \"rebecca_start_time\": \"3:30PM\",\n        \"rebecca_meet_duration\": 120,\n        \"amanda_start_time\": \"1:15PM\",\n        \"amanda_meet_duration\": 90,\n        \"carol_start_time\": \"9:30AM\",\n        \"carol_meet_duration\": 15,\n        \"jessica_start_time\": \"3:15PM\",\n        \"jessica_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:21AM",
                    "duration": 21,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:21AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "6:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "6:30PM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "end",
                    "location": "Financial District",
                    "time": "6:52PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "10:45AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "11:45AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "11:00AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "9:50AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:15AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "8:30PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "10:52AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Richmond District\n    travel_time = travel_distances[\"Financial District to Richmond District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Richmond District\"\n    })\n\n    # Wait for Barbara\n    start_meet_time = datetime.strptime(constraints[\"barbara_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Richmond District\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Richmond District\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Barbara\n    meet_duration = constraints[\"min_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Financial District\n    travel_time = travel_distances[\"Richmond District to Financial District\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Financial District\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Mission District to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Wait for Joseph\n    start_meet_time = datetime.strptime(constraints[\"joseph_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Embarcadero\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Embarcadero\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Joseph\n    meet_duration = constraints[\"joseph_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Richmond District to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Wait for Mary\n    start_meet_time = datetime.strptime(constraints[\"mary_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Embarcadero\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Embarcadero\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Mary\n    meet_duration = constraints[\"mary_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Mission District\n    travel_time = travel_distances[\"Marina District to Mission District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Mission District\"\n    })\n\n    # Meet Richard\n    meet_duration = constraints[\"richard_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Union Square\n    travel_time = travel_distances[\"Mission District to Union Square\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Union Square\"\n    })\n\n    # Wait for Jason\n    start_meet_time = datetime.strptime(constraints[\"jason_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Union Square\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Union Square\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Jason\n    meet_duration = constraints[\"jason_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Bayview\n    travel_time = travel_distances[\"Bayview to Golden Gate Park\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Meet Barbara\n    meet_duration = constraints[\"barbara_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Financial District to Richmond District\": 21,\n        \"Richmond District to Financial District\": 22,\n        \"Mission District to Embarcadero\": 19,\n        \"Embarcadero to Mission District\": 20,\n        \"Richmond District to Embarcadero\": 19,\n        \"Embarcadero to Richmond District\": 21,\n        \"Marina District to Mission District\": 20,\n        \"Mission District to Marina District\": 19,\n        \"Mission District to Union Square\": 15,\n        \"Union Square to Mission District\": 14,\n        \"Bayview to Golden Gate Park\": 22,\n        \"Golden Gate Park to Bayview\": 23\n    }\n\n    constraints = {\n        \"barbara_start_time\": \"5:00PM\",\n        \"min_meet_duration\": 90,\n        \"joseph_start_time\": \"10:45AM\",\n        \"joseph_meet_duration\": 60,\n        \"mary_start_time\": \"10:15AM\",\n        \"mary_meet_duration\": 45,\n        \"richard_meet_duration\": 30,\n        \"jason_start_time\": \"6:45PM\",\n        \"jason_meet_duration\": 105,\n        \"barbara_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "10:58AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "10:58AM",
                    "duration": 13,
                    "to": "Financial District"
                },
                {
                    "action": "end",
                    "location": "Financial District",
                    "time": "11:11AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:33AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "10:27AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:22AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "10:32AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:10AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Pacific Heights\n    travel_time = travel_distances[\"Financial District to Pacific Heights\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Meet Timothy\n    meet_duration = constraints[\"timothy_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Financial District\n    travel_time = travel_distances[\"Pacific Heights to Financial District\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Financial District\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Mission District\n    travel_time = travel_distances[\"Chinatown to Mission District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Mission District\"\n    })\n\n    # Meet Mary\n    meet_duration = constraints[\"mary_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Richmond District\n    travel_time = travel_distances[\"Sunset District to Richmond District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Richmond District\"\n    })\n\n    # Meet Rebecca\n    meet_duration = constraints[\"rebecca_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Union Square\n    travel_time = travel_distances[\"North Beach to Union Square\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Union Square\"\n    })\n\n    # Meet Daniel\n    meet_duration = constraints[\"daniel_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to The Castro\n    travel_time = travel_distances[\"Nob Hill to The Castro\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet Deborah\n    meet_duration = constraints[\"deborah_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Marina District\n    travel_time = travel_distances[\"Presidio to Marina District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Meet Jessica\n    meet_duration = constraints[\"jessica_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Financial District to Pacific Heights\": 13,\n        \"Pacific Heights to Financial District\": 13,\n        \"Chinatown to Mission District\": 18,\n        \"Mission District to Chinatown\": 16,\n        \"Sunset District to Richmond District\": 12,\n        \"Richmond District to Sunset District\": 11,\n        \"North Beach to Union Square\": 7,\n        \"Union Square to North Beach\": 10,\n        \"Nob Hill to The Castro\": 17,\n        \"The Castro to Nob Hill\": 16,\n        \"Presidio to Marina District\": 10,\n        \"Marina District to Presidio\": 10\n    }\n\n    constraints = {\n        \"timothy_meet_duration\": 105,\n        \"mary_meet_duration\": 75,\n        \"rebecca_meet_duration\": 75,\n        \"daniel_meet_duration\": 15,\n        \"deborah_meet_duration\": 75,\n        \"jessica_meet_duration\": 60\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:28AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:28AM",
                    "duration": 11,
                    "to": "Union Square"
                },
                {
                    "action": "end",
                    "location": "Union Square",
                    "time": "9:39AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "10:56AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "10:17AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "11:04AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:22AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "10:32AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Russian Hill\n    travel_time = travel_distances[\"Union Square to Russian Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Meet George\n    meet_duration = constraints[\"george_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Union Square\n    travel_time = travel_distances[\"Russian Hill to Union Square\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Union Square\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Union Square\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to The Castro\n    travel_time = travel_distances[\"Fisherman's Wharf to The Castro\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet Kimberly\n    meet_duration = constraints[\"kimberly_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to North Beach\n    travel_time = travel_distances[\"Richmond District to North Beach\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n\n    # Meet John\n    meet_duration = constraints[\"john_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to The Castro\n    travel_time = travel_distances[\"Union Square to The Castro\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet Karen\n    meet_duration = constraints[\"karen_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Haight-Ashbury\n    travel_time = travel_distances[\"Golden Gate Park to Haight-Ashbury\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Meet Barbara\n    meet_duration = constraints[\"barbara_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to The Castro\n    travel_time = travel_distances[\"Nob Hill to The Castro\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet William\n    meet_duration = constraints[\"william_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Union Square to Russian Hill\": 13,\n        \"Russian Hill to Union Square\": 11,\n        \"Fisherman's Wharf to The Castro\": 26,\n        \"The Castro to Fisherman's Wharf\": 24,\n        \"Richmond District to North Beach\": 17,\n        \"North Beach to Richmond District\": 18,\n        \"Union Square to The Castro\": 19,\n        \"The Castro to Union Square\": 19,\n        \"Golden Gate Park to Haight-Ashbury\": 7,\n        \"Haight-Ashbury to Golden Gate Park\": 7,\n        \"Nob Hill to The Castro\": 17,\n        \"The Castro to Nob Hill\": 16\n    }\n\n    constraints = {\n        \"george_meet_duration\": 15,\n        \"kimberly_meet_duration\": 90,\n        \"john_meet_duration\": 60,\n        \"karen_meet_duration\": 105,\n        \"barbara_meet_duration\": 15,\n        \"william_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "10:33AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "10:19AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:55AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:47AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:24AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "10:24AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:41AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Chinatown\n    travel_time = travel_distances[\"Bayview to Chinatown\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Chinatown\"\n    })\n\n    # Meet Ronald\n    meet_duration = constraints[\"ronald_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Bayview to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Meet Nancy\n    meet_duration = constraints[\"nancy_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Embarcadero to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet Mark\n    meet_duration = constraints[\"mark_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Alamo Square\n    travel_time = travel_distances[\"Chinatown to Alamo Square\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Meet Matthew\n    meet_duration = constraints[\"matthew_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to North Beach\n    travel_time = travel_distances[\"Golden Gate Park to North Beach\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n\n    # Meet Nancy\n    meet_duration = constraints[\"nancy_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Fisherman's Wharf to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet Kenneth\n    meet_duration = constraints[\"kenneth_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Bayview to Chinatown\": 18,\n        \"Chinatown to Bayview\": 22,\n        \"Bayview to Embarcadero\": 19,\n        \"Embarcadero to Bayview\": 21,\n        \"Embarcadero to Nob Hill\": 10,\n        \"Nob Hill to Embarcadero\": 9,\n        \"Chinatown to Alamo Square\": 17,\n        \"Alamo Square to Chinatown\": 16,\n        \"Golden Gate Park to North Beach\": 24,\n        \"North Beach to Golden Gate Park\": 22,\n        \"Fisherman's Wharf to Nob Hill\": 11,\n        \"Nob Hill to Fisherman's Wharf\": 11\n    }\n\n    constraints = {\n        \"ronald_meet_duration\": 75,\n        \"nancy_meet_duration\": 90,\n        \"mark_meet_duration\": 105,\n        \"matthew_meet_duration\": 30,\n        \"nancy_meet_duration\": 60,\n        \"kenneth_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:30AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:30AM",
                    "duration": 15,
                    "to": "Presidio"
                },
                {
                    "action": "end",
                    "location": "Presidio",
                    "time": "9:45AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "10:25AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:16AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "4:15PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:21AM",
                    "duration": 21,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:21AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "5:00PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:10AM"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:45AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "12:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Haight-Ashbury\n    travel_time = travel_distances[\"Presidio to Haight-Ashbury\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Meet Mary\n    meet_duration = constraints[\"mary_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Presidio\n    travel_time = travel_distances[\"Haight-Ashbury to Presidio\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Presidio\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Presidio\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Fisherman's Wharf\n    travel_time = travel_distances[\"Bayview to Fisherman's Wharf\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Meet Jessica\n    meet_duration = constraints[\"jessica_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Chinatown\n    travel_time = travel_distances[\"Alamo Square to Chinatown\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Chinatown\"\n    })\n\n    # Wait for Paul\n    start_meet_time = datetime.strptime(constraints[\"paul_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Paul\n    meet_duration = constraints[\"paul_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to North Beach\n    travel_time = travel_distances[\"Bayview to North Beach\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n\n    # Wait for Carol\n    start_meet_time = datetime.strptime(constraints[\"carol_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Carol\n    meet_duration = constraints[\"carol_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Fisherman's Wharf\n    travel_time = travel_distances[\"Financial District to Fisherman's Wharf\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Wait for Kevin\n    start_meet_time = datetime.strptime(constraints[\"kevin_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Kevin\n    meet_duration = constraints[\"kevin_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to North Beach\n    travel_time = travel_distances[\"Richmond District to North Beach\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n\n    # Wait for John\n    start_meet_time = datetime.strptime(constraints[\"john_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet John\n    meet_duration = constraints[\"john_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Presidio to Haight-Ashbury\": 15,\n        \"Haight-Ashbury to Presidio\": 15,\n        \"Bayview to Fisherman's Wharf\": 25,\n        \"Fisherman's Wharf to Bayview\": 26,\n        \"Alamo Square to Chinatown\": 16,\n        \"Chinatown to Alamo Square\": 17,\n        \"Bayview to North Beach\": 21,\n        \"North Beach to Bayview\": 22,\n        \"Financial District to Fisherman's Wharf\": 10,\n        \"Fisherman's Wharf to Financial District\": 11,\n        \"Richmond District to North Beach\": 17,\n        \"North Beach to Richmond District\": 18\n    }\n\n    constraints = {\n        \"mary_meet_duration\": 15,\n        \"jessica_meet_duration\": 60,\n        \"paul_start_time\": \"3:45PM\",\n        \"paul_meet_duration\": 30,\n        \"carol_start_time\": \"4:45PM\",\n        \"carol_meet_duration\": 15,\n        \"kevin_start_time\": \"11:45AM\",\n        \"kevin_meet_duration\": 45,\n        \"john_start_time\": \"3:15PM\",\n        \"john_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:40AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:40AM",
                    "duration": 11,
                    "to": "Financial District"
                },
                {
                    "action": "end",
                    "location": "Financial District",
                    "time": "9:51AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:21AM",
                    "duration": 21,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "10:21AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:55AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:20AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:47AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:57AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Russian Hill\n    travel_time = travel_distances[\"Financial District to Russian Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Meet Ashley\n    meet_duration = constraints[\"ashley_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Financial District\n    travel_time = travel_distances[\"Russian Hill to Financial District\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Financial District\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Financial District\n    travel_time = travel_distances[\"Haight-Ashbury to Financial District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n\n    # Meet Jessica\n    meet_duration = constraints[\"jessica_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Embarcadero to Golden Gate Park\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Meet Ashley\n    meet_duration = constraints[\"ashley_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Chinatown to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Meet Carol\n    meet_duration = constraints[\"carol_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Alamo Square to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Meet Ashley\n    meet_duration = constraints[\"ashley_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Marina District\n    travel_time = travel_distances[\"Chinatown to Marina District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Meet Stephanie\n    meet_duration = constraints[\"stephanie_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Financial District to Russian Hill\": 10,\n        \"Russian Hill to Financial District\": 11,\n        \"Haight-Ashbury to Financial District\": 21,\n        \"Financial District to Haight-Ashbury\": 19,\n        \"Embarcadero to Golden Gate Park\": 25,\n        \"Golden Gate Park to Embarcadero\": 25,\n        \"Chinatown to Embarcadero\": 5,\n        \"Embarcadero to Chinatown\": 7,\n        \"Alamo Square to Embarcadero\": 17,\n        \"Embarcadero to Alamo Square\": 19,\n        \"Chinatown to Marina District\": 12,\n        \"Marina District to Chinatown\": 16\n    }\n\n    constraints = {\n        \"ashley_meet_duration\": 45,\n        \"jessica_meet_duration\": 60,\n        \"ashley_meet_duration\": 120,\n        \"carol_meet_duration\": 15,\n        \"ashley_meet_duration\": 30,\n        \"stephanie_meet_duration\": 105\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "10:04AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "10:04AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "end",
                    "location": "Golden Gate Park",
                    "time": "10:25AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:11AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "12:30PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:11AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "11:00AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:06AM",
                    "duration": 6,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:06AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "8:15PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "7:45PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:24AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Russian Hill\n    travel_time = travel_distances[\"Golden Gate Park to Russian Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Meet Elizabeth\n    meet_duration = constraints[\"elizabeth_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time = travel_distances[\"Russian Hill to Golden Gate Park\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Golden Gate Park\n    travel_time = travel_distances[\"Sunset District to Golden Gate Park\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for Robert\n    start_meet_time = datetime.strptime(constraints[\"robert_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Robert\n    meet_duration = constraints[\"robert_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Golden Gate Park\n    travel_time = travel_distances[\"The Castro to Golden Gate Park\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for Mark\n    start_meet_time = datetime.strptime(constraints[\"mark_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Mark\n    meet_duration = constraints[\"mark_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to North Beach\n    travel_time = travel_distances[\"Fisherman's Wharf to North Beach\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n\n    # Wait for Barbara\n    start_meet_time = datetime.strptime(constraints[\"barbara_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Barbara\n    meet_duration = constraints[\"barbara_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Pacific Heights to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for Steven\n    start_meet_time = datetime.strptime(constraints[\"steven_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Nob Hill\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Nob Hill\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Steven\n    meet_duration = constraints[\"steven_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Union Square to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet Mary\n    meet_duration = constraints[\"mary_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Golden Gate Park to Russian Hill\": 19,\n        \"Russian Hill to Golden Gate Park\": 21,\n        \"Sunset District to Golden Gate Park\": 11,\n        \"Golden Gate Park to Sunset District\": 10,\n        \"The Castro to Golden Gate Park\": 11,\n        \"Golden Gate Park to The Castro\": 13,\n        \"Fisherman's Wharf to North Beach\": 6,\n        \"North Beach to Fisherman's Wharf\": 5,\n        \"Pacific Heights to Nob Hill\": 8,\n        \"Nob Hill to Pacific Heights\": 8,\n        \"Union Square to Nob Hill\": 9,\n        \"Nob Hill to Union Square\": 7\n    }\n\n    constraints = {\n        \"elizabeth_meet_duration\": 45,\n        \"robert_start_time\": \"12:00PM\",\n        \"robert_meet_duration\": 30,\n        \"mark_start_time\": \"9:15AM\",\n        \"mark_meet_duration\": 105,\n        \"barbara_start_time\": \"7:45PM\",\n        \"barbara_meet_duration\": 30,\n        \"steven_start_time\": \"6:45PM\",\n        \"steven_meet_duration\": 60,\n        \"mary_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:25AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "11:25AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "end",
                    "location": "Bayview",
                    "time": "11:51AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "10:10AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "10:35AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:22AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "10:46AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:31AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Fisherman's Wharf\n    travel_time = travel_distances[\"Bayview to Fisherman's Wharf\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Meet Lisa\n    meet_duration = constraints[\"lisa_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Bayview\n    travel_time = travel_distances[\"Fisherman's Wharf to Bayview\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Bayview\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Bayview\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Golden Gate Park to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Meet Elizabeth\n    meet_duration = constraints[\"elizabeth_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Financial District\n    travel_time = travel_distances[\"Chinatown to Financial District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n\n    # Meet Margaret\n    meet_duration = constraints[\"margaret_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Marina District\n    travel_time = travel_distances[\"Russian Hill to Marina District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Meet Helen\n    meet_duration = constraints[\"helen_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Pacific Heights\n    travel_time = travel_distances[\"The Castro to Pacific Heights\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Meet Richard\n    meet_duration = constraints[\"richard_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Marina District\n    travel_time = travel_distances[\"Golden Gate Park to Marina District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Meet James\n    meet_duration = constraints[\"james_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Bayview to Fisherman's Wharf\": 25,\n        \"Fisherman's Wharf to Bayview\": 26,\n        \"Golden Gate Park to Embarcadero\": 25,\n        \"Embarcadero to Golden Gate Park\": 25,\n        \"Chinatown to Financial District\": 5,\n        \"Financial District to Chinatown\": 5,\n        \"Russian Hill to Marina District\": 7,\n        \"Marina District to Russian Hill\": 8,\n        \"The Castro to Pacific Heights\": 16,\n        \"Pacific Heights to The Castro\": 16,\n        \"Golden Gate Park to Marina District\": 16,\n        \"Marina District to Golden Gate Park\": 18\n    }\n\n    constraints = {\n        \"lisa_meet_duration\": 120,\n        \"elizabeth_meet_duration\": 45,\n        \"margaret_meet_duration\": 90,\n        \"helen_meet_duration\": 75,\n        \"richard_meet_duration\": 90,\n        \"james_meet_duration\": 15\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "11:07AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "11:07AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "end",
                    "location": "Golden Gate Park",
                    "time": "11:16AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:31AM",
                    "duration": 31,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "10:16AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "5:00PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "9:37AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "11:17AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:40AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Richmond District\n    travel_time = travel_distances[\"Golden Gate Park to Richmond District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Richmond District\"\n    })\n\n    # Meet Karen\n    meet_duration = constraints[\"karen_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time = travel_distances[\"Richmond District to Golden Gate Park\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Sunset District to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Meet Michelle\n    meet_duration = constraints[\"michelle_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Chinatown\n    travel_time = travel_distances[\"Haight-Ashbury to Chinatown\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Chinatown\"\n    })\n\n    # Wait for Charles\n    start_meet_time = datetime.strptime(constraints[\"charles_start_time\"], '%I:%M%p')\n    wait_time = max(0, (start_meet_time - departure_time).total_seconds() / 60)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": departure_time.strftime('%I:%M%p')\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": (departure_time + timedelta(minutes=wait_time)).strftime('%I:%M%p')\n    })\n\n    # Meet Charles\n    meet_duration = constraints[\"charles_meet_duration\"]\n    meet_end_time = (departure_time + timedelta(minutes=wait_time)) + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Mission District\n    travel_time = travel_distances[\"The Castro to Mission District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Mission District\"\n    })\n\n    # Meet Joshua\n    meet_duration = constraints[\"joshua_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Mission District\n    travel_time = travel_distances[\"Financial District to Mission District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Mission District\"\n    })\n\n    # Meet Karen\n    meet_duration = constraints[\"karen_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Sunset District\n    travel_time = travel_distances[\"Nob Hill to Sunset District\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Sunset District\"\n    })\n\n    # Meet Carol\n    meet_duration = constraints[\"carol_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Golden Gate Park to Richmond District\": 7,\n        \"Richmond District to Golden Gate Park\": 9,\n        \"Sunset District to Embarcadero\": 31,\n        \"Embarcadero to Sunset District\": 30,\n        \"Haight-Ashbury to Chinatown\": 19,\n        \"Chinatown to Haight-Ashbury\": 19,\n        \"The Castro to Mission District\": 7,\n        \"Mission District to The Castro\": 7,\n        \"Financial District to Mission District\": 17,\n        \"Mission District to Financial District\": 17,\n        \"Nob Hill to Sunset District\": 25,\n        \"Sunset District to Nob Hill\": 27\n    }\n\n    constraints = {\n        \"karen_meet_duration\": 120,\n        \"michelle_meet_duration\": 45,\n        \"charles_start_time\": \"4:45PM\",\n        \"charles_meet_duration\": 15,\n        \"joshua_meet_duration\": 30,\n        \"karen_meet_duration\": 120,\n        \"carol_meet_duration\": 75\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "10:10AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "10:10AM",
                    "duration": 11,
                    "to": "Embarcadero"
                },
                {
                    "action": "end",
                    "location": "Embarcadero",
                    "time": "10:21AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "11:08AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "11:08AM",
                    "duration": 8,
                    "to": "Russian Hill"
                },
                {
                    "action": "end",
                    "location": "Russian Hill",
                    "time": "11:16AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:52AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:52AM",
                    "duration": 7,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "end",
                    "location": "Haight-Ashbury",
                    "time": "9:59AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:50AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "10:50AM",
                    "duration": 19,
                    "to": "Bayview"
                },
                {
                    "action": "end",
                    "location": "Bayview",
                    "time": "11:09AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "10:22AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "10:22AM",
                    "duration": 22,
                    "to": "Mission District"
                },
                {
                    "action": "end",
                    "location": "Mission District",
                    "time": "10:44AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:46AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "10:46AM",
                    "duration": 15,
                    "to": "North Beach"
                },
                {
                    "action": "end",
                    "location": "North Beach",
                    "time": "11:01AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, travel_distances, constraints):\n    # Convert arrival time to datetime object\n    arrival_time = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Union Square\n    travel_time = travel_distances[\"Embarcadero to Union Square\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Union Square\"\n    })\n\n    # Meet Richard\n    meet_duration = constraints[\"richard_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Union Square to Embarcadero\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Embarcadero\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Embarcadero\n    travel_time = travel_distances[\"Russian Hill to Embarcadero\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Meet Elizabeth\n    meet_duration = constraints[\"elizabeth_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Russian Hill\n    travel_time = travel_distances[\"Embarcadero to Russian Hill\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Russian Hill\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Russian Hill\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Golden Gate Park\n    travel_time = travel_distances[\"Haight-Ashbury to Golden Gate Park\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Meet Rebecca\n    meet_duration = constraints[\"rebecca_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time = travel_distances[\"Golden Gate Park to Haight-Ashbury\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Haight-Ashbury\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Nob Hill\n    travel_time = travel_distances[\"Bayview to Nob Hill\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet David\n    meet_duration = constraints[\"david_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Bayview\n    travel_time = travel_distances[\"Nob Hill to Bayview\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Bayview\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Bayview\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Fisherman's Wharf\n    travel_time = travel_distances[\"Mission District to Fisherman's Wharf\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Meet Richard\n    meet_duration = constraints[\"richard_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Mission District\n    travel_time = travel_distances[\"Fisherman's Wharf to Mission District\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"Mission District\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Mission District\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Alamo Square\n    travel_time = travel_distances[\"North Beach to Alamo Square\"]\n    departure_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Meet Barbara\n    meet_duration = constraints[\"barbara_meet_duration\"]\n    meet_end_time = departure_time + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meet_duration,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to North Beach\n    travel_time = travel_distances[\"Alamo Square to North Beach\"]\n    return_time = meet_end_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": meet_end_time.strftime('%I:%M%p'),\n        \"to\": \"North Beach\"\n    })\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"North Beach\",\n        \"time\": return_time.strftime('%I:%M%p')\n    })\n\n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Embarcadero to Union Square\": 10,\n        \"Union Square to Embarcadero\": 11,\n        \"Russian Hill to Embarcadero\": 8,\n        \"Embarcadero to Russian Hill\": 8,\n        \"Haight-Ashbury to Golden Gate Park\": 7,\n        \"Golden Gate Park to Haight-Ashbury\": 7,\n        \"Bayview to Nob Hill\": 20,\n        \"Nob Hill to Bayview\": 19,\n        \"Mission District to Fisherman's Wharf\": 22,\n        \"Fisherman's Wharf to Mission District\": 22,\n        \"North Beach to Alamo Square\": 16,\n        \"Alamo Square to North Beach\": 15\n    }\n\n    constraints = {\n        \"richard_meet_duration\": 90,\n        \"elizabeth_meet_duration\": 120,\n        \"rebecca_meet_duration\": 45,\n        \"david_meet_duration\": 90,\n        \"richard_meet_duration\": 60,\n        \"barbara_meet_duration\": 90\n    }\n\n    arrival_time = \"9:00AM\"\n\n    schedule = calculate_schedule(arrival_time, travel_distances, constraints)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with the friend\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Starting Point\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with the friend\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"wait\", \"location\": \"Destination\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n        {\"action\": \"wait\", \"location\": \"Destination\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:00PM\"\n    meeting_duration = 45\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 30\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 45\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 120\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 120\n    travel_time = 13\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 75\n    travel_time = 18\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with the friend\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Starting Point\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with the friend\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"wait\", \"location\": \"Destination\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n        {\"action\": \"wait\", \"location\": \"Destination\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 75\n    travel_time = 27\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 120\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 90\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:30PM\"\n    meeting_duration = 75\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:45PM\"\n    meeting_duration = 90\n    travel_time = 3\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 120\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with the friend\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Starting Point\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with the friend\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"wait\", \"location\": \"Destination\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n        {\"action\": \"wait\", \"location\": \"Destination\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45AM\"\n    meeting_duration = 15\n    travel_time = 13\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:45PM\"\n    meeting_duration = 90\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:45PM\"\n    meeting_duration = 105\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:15PM\"\n    meeting_duration = 60\n    travel_time = 5\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 120\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:15PM\"\n    meeting_duration = 90\n    travel_time = 21\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with the friend\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Starting Point\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with the friend\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"wait\", \"location\": \"Destination\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n        {\"action\": \"wait\", \"location\": \"Destination\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:00PM\"\n    meeting_duration = 75\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"11:30AM\"\n    meeting_duration = 75\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:15PM\"\n    meeting_duration = 45\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 45\n    travel_time = 9\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:15PM\"\n    meeting_duration = 75\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 105\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with the friend\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Starting Point\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with the friend\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n                {\"action\": \"wait\", \"location\": \"Destination\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Destination\"},\n        {\"action\": \"wait\", \"location\": \"Destination\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 90\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:45PM\"\n    meeting_duration = 60\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:45PM\"\n    meeting_duration = 105\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:00PM\"\n    meeting_duration = 60\n    travel_time = 13\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 120\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:30PM\"\n    meeting_duration = 15\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Richard\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Richard\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n                {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"North Beach\"},\n        {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:15PM\"\n    meeting_duration = 120\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:45PM\"\n    meeting_duration = 120\n    travel_time = 21\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:30PM\"\n    meeting_duration = 30\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 90\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:30PM\"\n    meeting_duration = 15\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 75\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Kimberly\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Kimberly\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n        {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:30PM\"\n    meeting_duration = 60\n    travel_time = 27\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:15PM\"\n    meeting_duration = 75\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45AM\"\n    meeting_duration = 90\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 120\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:15PM\"\n    meeting_duration = 30\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 45\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Steven\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Steven\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n        {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 30\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"11:45AM\"\n    meeting_duration = 105\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:45PM\"\n    meeting_duration = 120\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:45PM\"\n    meeting_duration = 105\n    travel_time = 31\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45AM\"\n    meeting_duration = 60\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:15PM\"\n    meeting_duration = 75\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with George\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Alamo Square\"},\n                {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with George\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Alamo Square\"},\n                {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Alamo Square\"},\n        {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 105\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:00PM\"\n    meeting_duration = 45\n    travel_time = 9\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 105\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 15\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 120\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:45PM\"\n    meeting_duration = 30\n    travel_time = 12\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Jeffrey\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Financial District\"},\n                {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Jeffrey\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Financial District\"},\n                {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Financial District\"},\n        {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 120\n    travel_time = 21\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:15PM\"\n    meeting_duration = 75\n    travel_time = 9\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 105\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:45PM\"\n    meeting_duration = 105\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 15\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:15PM\"\n    meeting_duration = 105\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Jeffrey\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Jeffrey\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:00PM\"\n    meeting_duration = 75\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:45PM\"\n    meeting_duration = 60\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:45PM\"\n    meeting_duration = 30\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:00PM\"\n    meeting_duration = 105\n    travel_time = 24\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 45\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 75\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Daniel\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"The Castro\"},\n                {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Daniel\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"The Castro\"},\n                {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"The Castro\"},\n        {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 45\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 75\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 45\n    travel_time = 24\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 75\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 90\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:15PM\"\n    meeting_duration = 30\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Daniel\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Mission District\"},\n                {\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Daniel\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Mission District\"},\n                {\"action\": \"wait\", \"location\": \"Mission District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Mission District\"},\n        {\"action\": \"wait\", \"location\": \"Mission District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:00PM\"\n    meeting_duration = 75\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:45PM\"\n    meeting_duration = 105\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 90\n    travel_time = 25\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 30\n    travel_time = 31\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 90\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 105\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Lisa\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Bayview\"},\n                {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Lisa\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Bayview\"},\n                {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Bayview\"},\n        {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:30AM\"\n    meeting_duration = 15\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:30PM\"\n    meeting_duration = 105\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:30PM\"\n    meeting_duration = 45\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 15\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"3:15PM\"\n    meeting_duration = 105\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Thomas\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Thomas\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n        {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:00PM\"\n    meeting_duration = 60\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:30PM\"\n    meeting_duration = 90\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:30PM\"\n    meeting_duration = 30\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 15\n    travel_time = 25\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:30PM\"\n    meeting_duration = 60\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 15\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Charles\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Charles\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n        {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 45\n    travel_time = 18\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:15PM\"\n    meeting_duration = 60\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:30PM\"\n    meeting_duration = 15\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:00PM\"\n    meeting_duration = 45\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:30PM\"\n    meeting_duration = 60\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 75\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Betty\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Betty\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:00PM\"\n    meeting_duration = 75\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 30\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 90\n    travel_time = 9\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 105\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 60\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 75\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Stephanie\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Stephanie\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n                {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Pacific Heights\"},\n        {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:30PM\"\n    meeting_duration = 15\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30AM\"\n    meeting_duration = 45\n    travel_time = 9\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:30PM\"\n    meeting_duration = 30\n    travel_time = 30\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 105\n    travel_time = 14\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 105\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:15PM\"\n    meeting_duration = 120\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Kimberly\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Mission District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Embarcadero\"},\n                {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Kimberly\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Embarcadero\"},\n                {\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Embarcadero\"},\n        {\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:45PM\"\n    meeting_duration = 105\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:15PM\"\n    meeting_duration = 45\n    travel_time = 18\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:15PM\"\n    meeting_duration = 120\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 15\n    travel_time = 18\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:15PM\"\n    meeting_duration = 105\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:00PM\"\n    meeting_duration = 15\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Patricia\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Patricia\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 75\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:15PM\"\n    meeting_duration = 90\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:30PM\"\n    meeting_duration = 15\n    travel_time = 31\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 60\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:00PM\"\n    meeting_duration = 30\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:00PM\"\n    meeting_duration = 105\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Michelle\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"The Castro\"},\n                {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Michelle\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"The Castro\"},\n                {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"The Castro\"},\n        {\"action\": \"wait\", \"location\": \"The Castro\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 60\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:00PM\"\n    meeting_duration = 90\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:15PM\"\n    meeting_duration = 105\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:00PM\"\n    meeting_duration = 60\n    travel_time = 14\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:45PM\"\n    meeting_duration = 90\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 15\n    travel_time = 30\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Anthony\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n                {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Anthony\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n                {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:30PM\"\n    meeting_duration = 15\n    travel_time = 24\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:45PM\"\n    meeting_duration = 105\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 30\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:00PM\"\n    meeting_duration = 30\n    travel_time = 12\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:30PM\"\n    meeting_duration = 15\n    travel_time = 20\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:15PM\"\n    meeting_duration = 105\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Nancy\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Nancy\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n        {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 45\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 15\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:00PM\"\n    meeting_duration = 15\n    travel_time = 5\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:45PM\"\n    meeting_duration = 15\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:30PM\"\n    meeting_duration = 30\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:30PM\"\n    meeting_duration = 90\n    travel_time = 18\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Jeffrey\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Fisherman's Wharf\"},\n                {\"action\": \"meet\", \"location\": \"Fisherman's Wharf\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Jeffrey\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Fisherman's Wharf\"},\n                {\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Fisherman's Wharf\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Fisherman's Wharf\"},\n        {\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Fisherman's Wharf\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:15PM\"\n    meeting_duration = 75\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 75\n    travel_time = 15\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 90\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 120\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 90\n    travel_time = 22\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 60\n    travel_time = 14\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with James\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with James\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n        {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:45PM\"\n    meeting_duration = 90\n    travel_time = 29\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:15PM\"\n    meeting_duration = 105\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:15PM\"\n    meeting_duration = 75\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 15\n    travel_time = 23\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:15PM\"\n    meeting_duration = 15\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"6:15PM\"\n    meeting_duration = 15\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Nancy\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Bayview\"},\n                {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Nancy\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Bayview\"},\n                {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Bayview\"},\n        {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:00PM\"\n    meeting_duration = 30\n    travel_time = 16\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 45\n    travel_time = 19\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:45PM\"\n    meeting_duration = 75\n    travel_time = 24\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:00PM\"\n    meeting_duration = 45\n    travel_time = 29\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"11:30AM\"\n    meeting_duration = 15\n    travel_time = 8\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:30PM\"\n    meeting_duration = 45\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Ashley\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Ashley\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Union Square\"},\n        {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 120\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:30PM\"\n    meeting_duration = 75\n    travel_time = 13\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:00PM\"\n    meeting_duration = 30\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 105\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 30\n    travel_time = 13\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"9:45PM\"\n    meeting_duration = 120\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with James\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with James\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n                {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Sunset District\"},\n        {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"2:15PM\"\n    meeting_duration = 60\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 120\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 120\n    travel_time = 11\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:00PM\"\n    meeting_duration = 90\n    travel_time = 18\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"4:30PM\"\n    meeting_duration = 90\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"8:00PM\"\n    meeting_duration = 75\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, departure_time, meeting_duration, travel_time):\n    # Convert times to datetime objects\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    departure = datetime.strptime(departure_time, '%I:%M%p')\n    meeting_duration_minutes = meeting_duration * 60\n\n    # Find the latest start time that allows for a meeting with Carol\n    latest_start = departure - timedelta(minutes=meeting_duration_minutes)\n    if latest_start < arrival:\n        return {\n            \"schedule\": [\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": arrival.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": latest_start.strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the earliest start time that allows for a meeting with Carol\n    earliest_start = arrival + timedelta(minutes=travel_time)\n    if earliest_start + timedelta(minutes=meeting_duration_minutes) > departure:\n        return {\n            \"schedule\": [\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": (earliest_start + timedelta(minutes=travel_time)).strftime('%I:%M%p')}\n            ]\n        }\n\n    # Find the optimal meeting schedule\n    optimal_start = earliest_start\n    optimal_end = optimal_start + timedelta(minutes=meeting_duration_minutes)\n    optimal_schedule = [\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time, \"time\": arrival.strftime('%I:%M%p'), \"to\": \"Presidio\"},\n        {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": optimal_start.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration_minutes, \"time\": optimal_end.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": optimal_schedule}\n\ndef solve_problem():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:45PM\"\n    meeting_duration = 45\n    travel_time = 10\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    departure_time = \"10:00PM\"\n    meeting_duration = 15\n    travel_time = 21\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    departure_time = \"7:45PM\"\n    meeting_duration = 45\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    departure_time = \"5:00PM\"\n    meeting_duration = 15\n    travel_time = 17\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    departure_time = \"12:45PM\"\n    meeting_duration = 120\n    travel_time = 7\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    departure_time = \"1:15PM\"\n    meeting_duration = 45\n    travel_time = 18\n    schedule = compute_schedule(arrival_time, departure_time, meeting_duration, travel_time)\n    print(json.dumps(schedule, indent=4))\n\nsolve_problem()\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Mission District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to North Beach\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Mission District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Mission District in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 10:15AM.\")\n    print(\"You meet Margaret for 75 minutes from 10:15AM to 11:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"1:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Richmond District in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 7:00AM.\")\n    print(\"You meet Emily for 105 minutes from 7:00AM to 8:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"7:00AM\"\n    destination_available_end = \"10:00AM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Financial District in 9 minutes and arrive at 9:09AM.\")\n    print(\"You wait until 3:15PM.\")\n    print(\"You meet Jessica for 15 minutes from 3:15PM to 3:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"3:15PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Alamo Square in 13 minutes and arrive at 9:13AM.\")\n    print(\"You wait until 4:30PM.\")\n    print(\"You meet Carol for 120 minutes from 4:30PM to 6:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"4:30PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to The Castro in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 12:30PM.\")\n    print(\"You meet George for 105 minutes from 12:30PM to 2:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"12:30PM\"\n    destination_available_end = \"4:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Presidio in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 1:00PM.\")\n    print(\"You meet Timothy for 30 minutes from 1:00PM to 1:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"1:00PM\"\n    destination_available_end = \"7:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Fisherman's Wharf\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 12 minutes and arrive at 9:12AM.\")\n    print(\"You wait until 2:30PM.\")\n    print(\"You meet George for 45 minutes from 2:30PM to 3:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 12\n    destination_available_start = \"2:30PM\"\n    destination_available_end = \"8:30PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Golden Gate Park in 22 minutes and arrive at 9:22AM.\")\n    print(\"You wait until 4:00PM.\")\n    print(\"You meet Robert for 120 minutes from 4:00PM to 6:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"4:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to Russian Hill in 13 minutes and arrive at 9:13AM.\")\n    print(\"You wait until 1:15PM.\")\n    print(\"You meet Stephanie for 105 minutes from 1:15PM to 3:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"1:15PM\"\n    destination_available_end = \"3:15PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Bayview in 22 minutes and arrive at 9:22AM.\")\n    print(\"You meet Ashley for 45 minutes from 9:22AM to 10:07AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"8:15AM\"\n    destination_available_end = \"5:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Embarcadero at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 21 minutes and arrive at 9:21AM.\")\n    print(\"You wait until 4:30PM.\")\n    print(\"You meet Karen for 105 minutes from 4:30PM to 6:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 21\n    destination_available_start = \"4:30PM\"\n    destination_available_end = \"7:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Marina District at 9:00AM.\")\n    print(\"You travel to Chinatown in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 9:00AM.\")\n    print(\"You meet Sandra for 15 minutes from 9:00AM to 9:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"11:45AM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Alamo Square\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to Sunset District in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 9:45AM.\")\n    print(\"You meet Charles for 30 minutes from 9:45AM to 10:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"9:45AM\"\n    destination_available_end = \"1:45PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Mission District in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 4:00PM.\")\n    print(\"You meet Carol for 30 minutes from 4:00PM to 4:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"4:00PM\"\n    destination_available_end = \"5:15PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Sunset District in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 6:45PM.\")\n    print(\"You meet George for 75 minutes from 6:45PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"6:45PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Russian Hill in 14 minutes and arrive at 9:14AM.\")\n    print(\"You wait until 8:30PM.\")\n    print(\"You meet David for 90 minutes from 8:30PM to 10:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 14\n    destination_available_start = \"8:30PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Sunset District in 27 minutes and arrive at 9:27AM.\")\n    print(\"You wait until 11:30AM.\")\n    print(\"You meet David for 30 minutes from 11:30AM to 12:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 27\n    destination_available_start = \"11:30AM\"\n    destination_available_end = \"1:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 13 minutes and arrive at 9:13AM.\")\n    print(\"You wait until 8:45AM.\")\n    print(\"You meet Betty for 105 minutes from 8:45AM to 11:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"8:45AM\"\n    destination_available_end = \"6:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Union Square\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Alamo Square in 15 minutes and arrive at 9:15AM.\")\n    print(\"You meet Ronald for 75 minutes from 9:15AM to 10:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"8:30AM\"\n    destination_available_end = \"3:00PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Chinatown in 16 minutes and arrive at 9:16AM.\")\n    print(\"You meet Jason for 15 minutes from 9:16AM to 9:31AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"8:30AM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 9:00PM.\")\n    print(\"You meet Margaret for 15 minutes from 9:00PM to 9:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"9:00PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 18 minutes and arrive at 9:18AM.\")\n    print(\"You meet Daniel for 105 minutes from 9:18AM to 11:03AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"8:45AM\"\n    destination_available_end = \"12:45PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to Bayview in 26 minutes and arrive at 9:26AM.\")\n    print(\"You wait until 11:30AM.\")\n    print(\"You meet Andrew for 90 minutes from 11:30AM to 1:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 26\n    destination_available_start = \"11:30AM\"\n    destination_available_end = \"6:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Alamo Square in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 7:30PM.\")\n    print(\"You meet Emily for 15 minutes from 7:30PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"7:30PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Marina District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Marina District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Marina District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Marina District in 12 minutes and arrive at 9:12AM.\")\n    print(\"You wait until 5:15PM.\")\n    print(\"You meet James for 60 minutes from 5:15PM to 6:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 12\n    destination_available_start = \"5:15PM\"\n    destination_available_end = \"6:30PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Chinatown in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 8:00PM.\")\n    print(\"You meet Sarah for 15 minutes from 8:00PM to 8:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"8:00PM\"\n    destination_available_end = \"8:45PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 6:00PM.\")\n    print(\"You meet Joshua for 90 minutes from 6:00PM to 7:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"6:00PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Embarcadero at 9:00AM.\")\n    print(\"You travel to Russian Hill in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 2:00PM.\")\n    print(\"You meet Patricia for 120 minutes from 2:00PM to 4:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"2:00PM\"\n    destination_available_end = \"7:30PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to North Beach in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 12:45PM.\")\n    print(\"You meet Lisa for 60 minutes from 12:45PM to 1:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"12:45PM\"\n    destination_available_end = \"6:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to North Beach in 19 minutes and arrive at 9:19AM.\")\n    print(\"You wait until 4:30PM.\")\n    print(\"You meet Robert for 90 minutes from 4:30PM to 6:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 19\n    destination_available_start = \"4:30PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Russian Hill\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Chinatown in 9 minutes and arrive at 9:09AM.\")\n    print(\"You wait until 4:30PM.\")\n    print(\"You meet Lisa for 120 minutes from 4:30PM to 6:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"4:30PM\"\n    destination_available_end = \"7:30PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Sunset District at 9:00AM.\")\n    print(\"You travel to Marina District in 21 minutes and arrive at 9:21AM.\")\n    print(\"You wait until 7:45PM.\")\n    print(\"You meet Mary for 15 minutes from 7:45PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 21\n    destination_available_start = \"7:45PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Mission District in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 6:00PM.\")\n    print(\"You meet Joseph for 120 minutes from 6:00PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"6:00PM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Alamo Square in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 3:30PM.\")\n    print(\"You meet Carol for 60 minutes from 3:30PM to 4:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"3:30PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 6:30PM.\")\n    print(\"You meet Kevin for 90 minutes from 6:30PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"6:30PM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Nob Hill in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet Paul for 15 minutes from 9:30AM to 9:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"11:15AM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Richmond District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Presidio in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 7:15PM.\")\n    print(\"You meet Barbara for 75 minutes from 7:15PM to 8:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"7:15PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to The Castro in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 2:15PM.\")\n    print(\"You meet Patricia for 30 minutes from 2:15PM to 2:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"2:15PM\"\n    destination_available_end = \"4:15PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Sunset District at 9:00AM.\")\n    print(\"You travel to Richmond District in 12 minutes and arrive at 9:12AM.\")\n    print(\"You wait until 2:15PM.\")\n    print(\"You meet Jessica for 45 minutes from 2:15PM to 3:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 12\n    destination_available_start = \"2:15PM\"\n    destination_available_end = \"3:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Alamo Square in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 2:15PM.\")\n    print(\"You meet David for 45 minutes from 2:15PM to 3:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"2:15PM\"\n    destination_available_end = \"4:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to Richmond District in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 6:30PM.\")\n    print(\"You meet Thomas for 90 minutes from 6:30PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"6:30PM\"\n    destination_available_end = \"8:15PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Union Square in 9 minutes and arrive at 9:09AM.\")\n    print(\"You meet Joseph for 15 minutes from 9:30PM to 9:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"9:30PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Russian Hill in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 12:00PM.\")\n    print(\"You meet Helen for 30 minutes from 12:00PM to 12:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"12:00PM\"\n    destination_available_end = \"1:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 5:15PM.\")\n    print(\"You meet Amanda for 15 minutes from 5:15PM to 5:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"5:15PM\"\n    destination_available_end = \"7:45PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Russian Hill in 23 minutes and arrive at 9:23AM.\")\n    print(\"You wait until 10:15AM.\")\n    print(\"You meet Mary for 15 minutes from 10:15AM to 10:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 23\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"12:00PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to Marina District in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 11:45AM.\")\n    print(\"You meet Sarah for 90 minutes from 11:45AM to 1:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"11:45AM\"\n    destination_available_end = \"2:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to Richmond District in 12 minutes and arrive at 9:12AM.\")\n    print(\"You wait until 5:00PM.\")\n    print(\"You meet Stephanie for 60 minutes from 5:00PM to 6:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 12\n    destination_available_start = \"5:00PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Bayview in 26 minutes and arrive at 9:26AM.\")\n    print(\"You meet Sarah for 45 minutes from 2:15PM to 3:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 26\n    destination_available_start = \"2:15PM\"\n    destination_available_end = \"5:30PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Embarcadero\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Embarcadero at 9:00AM.\")\n    print(\"You travel to Union Square in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 6:45PM.\")\n    print(\"You meet Rebecca for 60 minutes from 6:45PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"6:45PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Richmond District in 20 minutes and arrive at 9:20AM.\")\n    print(\"You wait until 5:00PM.\")\n    print(\"You meet Sarah for 60 minutes from 5:00PM to 6:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"5:00PM\"\n    destination_available_end = \"7:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to North Beach in 5 minutes and arrive at 9:05AM.\")\n    print(\"You wait until 10:15AM.\")\n    print(\"You meet Betty for 90 minutes from 10:15AM to 11:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 5\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"12:45PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Alamo Square in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 9:00PM.\")\n    print(\"You meet Michelle for 30 minutes from 9:00PM to 9:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"9:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Alamo Square in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 12:30PM.\")\n    print(\"You meet Laura for 60 minutes from 12:30PM to 1:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"12:30PM\"\n    destination_available_end = \"8:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Nob Hill in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Melissa for 75 minutes from 9:30AM to 10:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"8:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Financial District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Sunset District in 31 minutes and arrive at 9:31AM.\")\n    print(\"You wait until 10:15AM.\")\n    print(\"You meet Kevin for 45 minutes from 10:15AM to 11:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 31\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"7:45PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Marina District in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 6:30PM.\")\n    print(\"You meet Kevin for 120 minutes from 6:30PM to 8:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"6:30PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Marina District in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 6:00PM.\")\n    print(\"You meet Elizabeth for 105 minutes from 6:00PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"6:00PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Richmond District in 20 minutes and arrive at 9:20AM.\")\n    print(\"You wait until 2:15PM.\")\n    print(\"You meet Joseph for 15 minutes from 2:15PM to 2:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"2:15PM\"\n    destination_available_end = \"5:15PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Russian Hill in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 7:00PM.\")\n    print(\"You meet Melissa for 60 minutes from 7:00PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"7:00PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Embarcadero in 22 minutes and arrive at 9:22AM.\")\n    print(\"You meet Laura for 15 minutes from 8:00AM to 8:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"8:00AM\"\n    destination_available_end = \"11:00AM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Union Square\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 1:00PM.\")\n    print(\"You meet Mark for 120 minutes from 1:00PM to 3:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"1:00PM\"\n    destination_available_end = \"4:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Alamo Square in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 2:00PM.\")\n    print(\"You meet Andrew for 90 minutes from 2:00PM to 3:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"2:00PM\"\n    destination_available_end = \"3:45PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Marina District in 9 minutes and arrive at 9:09AM.\")\n    print(\"You wait until 10:00AM.\")\n    print(\"You meet Melissa for 15 minutes from 10:00AM to 10:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"10:00AM\"\n    destination_available_end = \"12:45PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Embarcadero in 22 minutes and arrive at 9:22AM.\")\n    print(\"You meet Carol for 75 minutes from 2:45PM to 4:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"2:45PM\"\n    destination_available_end = \"7:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You meet Stephanie for 105 minutes from 9:05AM to 10:50AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 5\n    destination_available_start = \"8:45AM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You meet Barbara for 45 minutes from 1:15PM to 2:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 14\n    destination_available_start = \"1:15PM\"\n    destination_available_end = \"6:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Nob Hill\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Golden Gate Park in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 6:45PM.\")\n    print(\"You meet Jessica for 120 minutes from 6:45PM to 8:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"6:45PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 22 minutes and arrive at 9:22AM.\")\n    print(\"You wait until 6:15PM.\")\n    print(\"You meet William for 90 minutes from 6:15PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"6:15PM\"\n    destination_available_end = \"8:45PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to The Castro in 26 minutes and arrive at 9:26AM.\")\n    print(\"You wait until 10:45AM.\")\n    print(\"You meet Sandra for 90 minutes from 10:45AM to 12:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 26\n    destination_available_start = \"10:45AM\"\n    destination_available_end = \"3:15PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 19 minutes and arrive at 9:19AM.\")\n    print(\"You wait until 3:30PM.\")\n    print(\"You meet Barbara for 90 minutes from 3:30PM to 5:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 19\n    destination_available_start = \"3:30PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Marina District at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 10 minutes and arrive at 9:10AM.\")\n    print(\"You meet Matthew for 75 minutes from 9:10AM to 10:25AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Alamo Square in 13 minutes and arrive at 9:13AM.\")\n    print(\"You meet Ashley for 120 minutes from 10:15AM to 12:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"1:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Haight-Ashbury\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Haight-Ashbury\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Golden Gate Park in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 2:45PM.\")\n    print(\"You meet Kevin for 75 minutes from 2:45PM to 4:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"2:45PM\"\n    destination_available_end = \"7:00PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Golden Gate Park in 23 minutes and arrive at 9:23AM.\")\n    print(\"You wait until 6:15PM.\")\n    print(\"You meet Matthew for 105 minutes from 6:15PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 23\n    destination_available_start = \"6:15PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Embarcadero at 9:00AM.\")\n    print(\"You travel to Richmond District in 21 minutes and arrive at 9:21AM.\")\n    print(\"You wait until 3:30PM.\")\n    print(\"You meet Melissa for 30 minutes from 3:30PM to 4:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 21\n    destination_available_start = \"3:30PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Alamo Square in 10 minutes and arrive at 9:10AM.\")\n    print(\"You meet Elizabeth for 45 minutes from 9:10AM to 9:55AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"8:30AM\"\n    destination_available_end = \"1:30PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 24 minutes and arrive at 9:24AM.\")\n    print(\"You wait until 12:30PM.\")\n    print(\"You meet Ashley for 15 minutes from 12:30PM to 12:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 24\n    destination_available_start = \"12:30PM\"\n    destination_available_end = \"12:45PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Mission District in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 1:15PM.\")\n    print(\"You meet William for 45 minutes from 1:15PM to 2:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"1:15PM\"\n    destination_available_end = \"2:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Nob Hill in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 8:00PM.\")\n    print(\"You meet Patricia for 75 minutes from 8:00PM to 9:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"8:00PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Chinatown in 11 minutes and arrive at 9:11AM.\")\n    print(\"You wait until 3:45PM.\")\n    print(\"You meet Betty for 120 minutes from 3:45PM to 5:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"3:45PM\"\n    destination_available_end = \"8:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Sunset District at 9:00AM.\")\n    print(\"You travel to Marina District in 21 minutes and arrive at 9:21AM.\")\n    print(\"You wait until 3:00PM.\")\n    print(\"You meet Sarah for 105 minutes from 3:00PM to 4:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 21\n    destination_available_start = \"3:00PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 4:45PM.\")\n    print(\"You meet Carol for 15 minutes from 4:45PM to 5:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"4:45PM\"\n    destination_available_end = \"6:45PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to Marina District in 9 minutes and arrive at 9:09AM.\")\n    print(\"You wait until 3:45PM.\")\n    print(\"You meet Carol for 30 minutes from 3:45PM to 4:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"3:45PM\"\n    destination_available_end = \"5:45PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Nob Hill in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 11:30AM.\")\n    print(\"You meet Helen for 45 minutes from 11:30AM to 12:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"11:30AM\"\n    destination_available_end = \"12:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Mission District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Richmond District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Mission District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Richmond District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Mission District in 20 minutes and arrive at 9:20AM.\")\n    print(\"You wait until 7:45PM.\")\n    print(\"You meet Jason for 75 minutes from 7:45PM to 9:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"7:45PM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Russian Hill in 4 minutes and arrive at 9:04AM.\")\n    print(\"You wait until 12:30PM.\")\n    print(\"You meet Stephanie for 30 minutes from 12:30PM to 1:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 4\n    destination_available_start = \"12:30PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Mission District in 13 minutes and arrive at 9:13AM.\")\n    print(\"You meet Nancy for 60 minutes from 9:13AM to 10:13AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"2:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 12 minutes and arrive at 9:12AM.\")\n    print(\"You meet Ashley for 60 minutes from 9:12AM to 10:12AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 12\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"7:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Richmond District in 14 minutes and arrive at 9:14AM.\")\n    print(\"You wait until 9:45AM.\")\n    print(\"You meet Daniel for 120 minutes from 9:45AM to 11:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 14\n    destination_available_start = \"9:45AM\"\n    destination_available_end = \"1:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Nob Hill in 8 minutes and arrive at 9:08AM.\")\n    print(\"You meet Joshua for 45 minutes from 10:15AM to 11:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"1:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Fisherman's Wharf\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to Russian Hill in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 10:30AM.\")\n    print(\"You meet Anthony for 15 minutes from 10:30AM to 10:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"10:30AM\"\n    destination_available_end = \"6:15PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Alamo Square in 10 minutes and arrive at 9:10AM.\")\n    print(\"You meet Michelle for 105 minutes from 9:10AM to 10:55AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"5:15PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Marina District in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 5:45PM.\")\n    print(\"You meet Mary for 30 minutes from 5:45PM to 6:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"5:45PM\"\n    destination_available_end = \"8:15PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Bayview in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 3:15PM.\")\n    print(\"You meet Barbara for 105 minutes from 3:15PM to 5:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"3:15PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to Sunset District in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 4:45PM.\")\n    print(\"You meet Nancy for 45 minutes from 4:45PM to 5:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"4:45PM\"\n    destination_available_end = \"8:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Sunset District in 23 minutes and arrive at 9:23AM.\")\n    print(\"You meet Jessica for 60 minutes from 10:30AM to 11:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 23\n    destination_available_start = \"10:30AM\"\n    destination_available_end = \"5:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Bayview\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Nob Hill in 20 minutes and arrive at 9:20AM.\")\n    print(\"You meet Daniel for 60 minutes from 9:20AM to 10:20AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"3:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Marina District at 9:00AM.\")\n    print(\"You travel to Russian Hill in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 2:45PM.\")\n    print(\"You meet Thomas for 75 minutes from 2:45PM to 4:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"2:45PM\"\n    destination_available_end = \"6:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to North Beach in 21 minutes and arrive at 9:21AM.\")\n    print(\"You wait until 10:45AM.\")\n    print(\"You meet Laura for 120 minutes from 10:45AM to 12:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 21\n    destination_available_start = \"10:45AM\"\n    destination_available_end = \"1:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Richmond District in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 5:30PM.\")\n    print(\"You meet Richard for 105 minutes from 5:30PM to 7:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"5:30PM\"\n    destination_available_end = \"7:15PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 9:30AM.\")\n    print(\"You meet Deborah for 15 minutes from 9:30AM to 9:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"2:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Financial District in 20 minutes and arrive at 9:20AM.\")\n    print(\"You meet Nancy for 30 minutes from 9:15AM to 9:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"9:15AM\"\n    destination_available_end = \"4:45PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Financial District\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Financial District\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Chinatown in 5 minutes and arrive at 9:05AM.\")\n    print(\"You meet Kenneth for 120 minutes from 9:05AM to 11:05AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 5\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"2:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Bayview in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 2:30PM.\")\n    print(\"You meet Ronald for 105 minutes from 2:30PM to 4:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"2:30PM\"\n    destination_available_end = \"5:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Presidio in 31 minutes and arrive at 9:31AM.\")\n    print(\"You wait until 9:00PM.\")\n    print(\"You meet Richard for 45 minutes from 9:00PM to 9:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 31\n    destination_available_start = \"9:00PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Sarah for 75 minutes from 9:07AM to 10:22AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"8:00AM\"\n    destination_available_end = \"12:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Bayview in 22 minutes and arrive at 9:22AM.\")\n    print(\"You meet Joseph for 75 minutes from 9:22AM to 10:37AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"8:00AM\"\n    destination_available_end = \"2:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 19 minutes and arrive at 9:19AM.\")\n    print(\"You meet Richard for 105 minutes from 7:00AM to 9:05AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 19\n    destination_available_start = \"7:00AM\"\n    destination_available_end = \"3:45PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Pacific Heights\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Bayview in 22 minutes and arrive at 9:22AM.\")\n    print(\"You wait until 11:15AM.\")\n    print(\"You meet John for 45 minutes from 11:15AM to 12:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"11:15AM\"\n    destination_available_end = \"7:30PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Presidio in 11 minutes and arrive at 9:11AM.\")\n    print(\"You wait until 5:15PM.\")\n    print(\"You meet James for 30 minutes from 5:15PM to 5:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"5:15PM\"\n    destination_available_end = \"6:45PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Marina District at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 1:15PM.\")\n    print(\"You meet Paul for 15 minutes from 1:15PM to 1:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"1:15PM\"\n    destination_available_end = \"3:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 11 minutes and arrive at 9:11AM.\")\n    print(\"You wait until 4:00PM.\")\n    print(\"You meet Jessica for 15 minutes from 4:00PM to 4:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"4:00PM\"\n    destination_available_end = \"6:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Mission District in 11 minutes and arrive at 9:11AM.\")\n    print(\"You wait until 11:15AM.\")\n    print(\"You meet John for 60 minutes from 11:15AM to 12:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"11:15AM\"\n    destination_available_end = \"8:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Chinatown in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Carol for 45 minutes from 6:30PM to 7:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"6:30PM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Embarcadero\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Embarcadero at 9:00AM.\")\n    print(\"You travel to The Castro in 25 minutes and arrive at 9:25AM.\")\n    print(\"You wait until 7:30PM.\")\n    print(\"You meet Kevin for 60 minutes from 7:30PM to 8:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 25\n    destination_available_start = \"7:30PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Mission District in 26 minutes and arrive at 9:26AM.\")\n    print(\"You wait until 12:00PM.\")\n    print(\"You meet Ronald for 90 minutes from 12:00PM to 1:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 26\n    destination_available_start = \"12:00PM\"\n    destination_available_end = \"7:45PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Presidio in 11 minutes and arrive at 9:11AM.\")\n    print(\"You wait until 5:00PM.\")\n    print(\"You meet William for 90 minutes from 5:00PM to 6:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"5:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Sunset District at 9:00AM.\")\n    print(\"You travel to Chinatown in 30 minutes and arrive at 9:30AM.\")\n    print(\"You wait until 12:00PM.\")\n    print(\"You meet Michelle for 45 minutes from 12:00PM to 12:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 30\n    destination_available_start = \"12:00PM\"\n    destination_available_end = \"7:30PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Bayview in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 11:30AM.\")\n    print(\"You meet Mark for 105 minutes from 11:30AM to 1:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"11:30AM\"\n    destination_available_end = \"6:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Presidio in 11 minutes and arrive at 9:11AM.\")\n    print(\"You wait until 7:15PM.\")\n    print(\"You meet Stephanie for 90 minutes from 7:15PM to 8:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"7:15PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Bayview\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to The Castro in 20 minutes and arrive at 9:20AM.\")\n    print(\"You wait until 9:45PM.\")\n    print(\"You meet David for 60 minutes from 9:45PM to 10:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"9:45PM\"\n    destination_available_end = \"10:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to The Castro in 21 minutes and arrive at 9:21AM.\")\n    print(\"You meet Jessica for 45 minutes from 9:21AM to 10:06AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 21\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"1:45PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to North Beach in 20 minutes and arrive at 9:20AM.\")\n    print(\"You wait until 2:00PM.\")\n    print(\"You meet Jeffrey for 120 minutes from 2:00PM to 4:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"2:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to The Castro in 21 minutes and arrive at 9:21AM.\")\n    print(\"You wait until 6:00PM.\")\n    print(\"You meet George for 60 minutes from 6:00PM to 7:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 21\n    destination_available_start = \"6:00PM\"\n    destination_available_end = \"8:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Golden Gate Park in 9 minutes and arrive at 9:09AM.\")\n    print(\"You wait until 4:45PM.\")\n    print(\"You meet John for 15 minutes from 4:45PM to 5:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"4:45PM\"\n    destination_available_end = \"7:15PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Russian Hill in 14 minutes and arrive at 9:14AM.\")\n    print(\"You meet Amanda for 15 minutes from 11:30AM to 11:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 14\n    destination_available_start = \"11:30AM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Golden Gate Park\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Bayview in 23 minutes and arrive at 9:23AM.\")\n    print(\"You wait until 2:00PM.\")\n    print(\"You meet Thomas for 75 minutes from 2:00PM to 3:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 23\n    destination_available_start = \"2:00PM\"\n    destination_available_end = \"6:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Bayview in 22 minutes and arrive at 9:22AM.\")\n    print(\"You wait until 11:00AM.\")\n    print(\"You meet Richard for 60 minutes from 11:00AM to 12:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"11:00AM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 13 minutes and arrive at 9:13AM.\")\n    print(\"You wait until 12:15PM.\")\n    print(\"You meet Carol for 45 minutes from 12:15PM to 1:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"12:15PM\"\n    destination_available_end = \"5:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 22 minutes and arrive at 9:22AM.\")\n    print(\"You wait until 10:45AM.\")\n    print(\"You meet Robert for 45 minutes from 10:45AM to 11:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"10:45AM\"\n    destination_available_end = \"6:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"8:00AM\"\n    destination_available_end = \"9:30AM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You meet Nancy for 30 minutes from 7:15AM to 7:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 31\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"5:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Embarcadero\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Embarcadero\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Embarcadero at 9:00AM.\")\n    print(\"You travel to North Beach in 5 minutes and arrive at 9:05AM.\")\n    print(\"You meet Michelle for 105 minutes from 3:00PM to 4:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 5\n    destination_available_start = \"3:00PM\"\n    destination_available_end = \"6:15PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Nob Hill in 9 minutes and arrive at 9:09AM.\")\n    print(\"You meet George for 45 minutes from 9:09AM to 9:54AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"8:45AM\"\n    destination_available_end = \"4:30PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Mission District in 13 minutes and arrive at 9:13AM.\")\n    print(\"You meet Emily for 105 minutes from 5:00PM to 6:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"5:00PM\"\n    destination_available_end = \"7:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to North Beach in 20 minutes and arrive at 9:20AM.\")\n    print(\"You meet Anthony for 15 minutes from 4:30PM to 4:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"4:30PM\"\n    destination_available_end = \"6:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Nob Hill in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet Emily for 15 minutes from 7:45PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"7:45PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You meet Margaret for 45 minutes from 3:45PM to 4:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"3:45PM\"\n    destination_available_end = \"7:15PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Alamo Square\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Alamo Square\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 2:45PM.\")\n    print(\"You meet Thomas for 60 minutes from 2:45PM to 3:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"2:45PM\"\n    destination_available_end = \"7:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Richmond District in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Matthew for 105 minutes from 9:07AM to 10:52AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"8:45AM\"\n    destination_available_end = \"2:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Embarcadero in 9 minutes and arrive at 9:09AM.\")\n    print(\"You wait until 11:00AM.\")\n    print(\"You meet Stephanie for 15 minutes from 11:00AM to 11:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"11:00AM\"\n    destination_available_end = \"1:45PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Sunset District at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 9:30AM.\")\n    print(\"You meet Steven for 30 minutes from 9:30AM to 10:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"3:45PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Bayview at 9:00AM.\")\n    print(\"You travel to Russian Hill in 23 minutes and arrive at 9:23AM.\")\n    print(\"You wait until 9:15PM.\")\n    print(\"You meet Stephanie for 60 minutes from 9:15PM to 10:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 23\n    destination_available_start = \"9:15PM\"\n    destination_available_end = \"10:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Embarcadero in 25 minutes and arrive at 9:25AM.\")\n    print(\"You meet Sandra for 45 minutes from 7:00PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 25\n    destination_available_start = \"7:00PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 7:45PM.\")\n    print(\"You meet Lisa for 60 minutes from 7:45PM to 8:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"7:45PM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Richmond District in 20 minutes and arrive at 9:20AM.\")\n    print(\"You wait until 9:45AM.\")\n    print(\"You meet Timothy for 120 minutes from 9:45AM to 11:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 20\n    destination_available_start = \"9:45AM\"\n    destination_available_end = \"8:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Chinatown in 19 minutes and arrive at 9:19AM.\")\n    print(\"You wait until 6:15PM.\")\n    print(\"You meet Brian for 90 minutes from 6:15PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 19\n    destination_available_start = \"6:15PM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Sunset District in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 8:45PM.\")\n    print(\"You meet Jeffrey for 30 minutes from 8:45PM to 9:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"8:45PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Mission District in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 6:45PM.\")\n    print(\"You meet Laura for 60 minutes from 6:45PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"6:45PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Presidio in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet Robert for 120 minutes from 11:15AM to 1:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"11:15AM\"\n    destination_available_end = \"5:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to North Beach in 3 minutes and arrive at 9:03AM.\")\n    print(\"You wait until 2:45PM.\")\n    print(\"You meet Karen for 105 minutes from 2:45PM to 4:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 3\n    destination_available_start = \"2:45PM\"\n    destination_available_end = \"6:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Alamo Square at 9:00AM.\")\n    print(\"You travel to Embarcadero in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 5:00PM.\")\n    print(\"You meet Stephanie for 75 minutes from 5:00PM to 6:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"5:00PM\"\n    destination_available_end = \"7:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 13 minutes and arrive at 9:13AM.\")\n    print(\"You meet William for 120 minutes from 9:13AM to 11:13AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Embarcadero in 6 minutes and arrive at 9:06AM.\")\n    print(\"You wait until 1:00PM.\")\n    print(\"You meet Deborah for 60 minutes from 1:00PM to 2:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 6\n    destination_available_start = \"1:00PM\"\n    destination_available_end = \"8:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Sunset District at 9:00AM.\")\n    print(\"You travel to The Castro in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 3:00PM.\")\n    print(\"You meet Patricia for 90 minutes from 3:00PM to 4:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"3:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Financial District in 26 minutes and arrive at 9:26AM.\")\n    print(\"You meet Kenneth for 105 minutes from 8:00PM to 9:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 26\n    destination_available_start = \"8:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Golden Gate Park\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Golden Gate Park\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to Sunset District in 10 minutes and arrive at 9:10AM.\")\n    print(\"You wait until 1:45PM.\")\n    print(\"You meet Kimberly for 60 minutes from 1:45PM to 2:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"1:45PM\"\n    destination_available_end = \"4:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Golden Gate Park in 12 minutes and arrive at 9:12AM.\")\n    print(\"You meet Kevin for 90 minutes from 9:12AM to 10:42AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 12\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"11:00AM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Embarcadero in 19 minutes and arrive at 9:19AM.\")\n    print(\"You meet Timothy for 90 minutes from 9:19AM to 10:49AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 19\n    destination_available_start = \"7:00AM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Nob Hill in 16 minutes and arrive at 9:16AM.\")\n    print(\"You meet Karen for 60 minutes from 9:16AM to 10:16AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"7:45AM\"\n    destination_available_end = \"3:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Marina District in 9 minutes and arrive at 9:09AM.\")\n    print(\"You wait until 6:00PM.\")\n    print(\"You meet Joshua for 45 minutes from 6:00PM to 6:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 9\n    destination_available_start = \"6:00PM\"\n    destination_available_end = \"9:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Russian Hill in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet Patricia for 30 minutes from 7:45AM to 8:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"7:45AM\"\n    destination_available_end = \"2:15PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Fisherman's Wharf\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Fisherman's Wharf\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to North Beach in 6 minutes and arrive at 9:06AM.\")\n    print(\"You wait until 4:30PM.\")\n    print(\"You meet William for 30 minutes from 4:30PM to 5:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 6\n    destination_available_start = \"4:30PM\"\n    destination_available_end = \"7:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Richmond District at 9:00AM.\")\n    print(\"You travel to Alamo Square in 13 minutes and arrive at 9:13AM.\")\n    print(\"You wait until 4:45PM.\")\n    print(\"You meet Amanda for 105 minutes from 4:45PM to 6:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"4:45PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Sunset District at 9:00AM.\")\n    print(\"You travel to Presidio in 16 minutes and arrive at 9:16AM.\")\n    print(\"You wait until 9:45AM.\")\n    print(\"You meet Kevin for 120 minutes from 9:45AM to 11:45AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 16\n    destination_available_start = \"9:45AM\"\n    destination_available_end = \"6:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Alamo Square in 17 minutes and arrive at 9:17AM.\")\n    print(\"You wait until 10:15AM.\")\n    print(\"You meet Thomas for 45 minutes from 10:15AM to 11:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"10:15AM\"\n    destination_available_end = \"3:45PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Nob Hill at 9:00AM.\")\n    print(\"You travel to Sunset District in 25 minutes and arrive at 9:25AM.\")\n    print(\"You meet Daniel for 30 minutes from 9:25AM to 9:55AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 25\n    destination_available_start = \"8:45AM\"\n    destination_available_end = \"7:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to Union Square in 7 minutes and arrive at 9:07AM.\")\n    print(\"You meet Mark for 90 minutes from 8:00AM to 9:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"8:00AM\"\n    destination_available_end = \"12:45PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to North Beach\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Pacific Heights in 8 minutes and arrive at 9:08AM.\")\n    print(\"You wait until 2:15PM.\")\n    print(\"You meet George for 120 minutes from 2:15PM to 4:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"2:15PM\"\n    destination_available_end = \"6:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Haight-Ashbury in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 6:45PM.\")\n    print(\"You meet Steven for 60 minutes from 6:45PM to 7:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"6:45PM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Marina District in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 3:30PM.\")\n    print(\"You meet Kenneth for 30 minutes from 3:30PM to 4:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"3:30PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Marina District in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 8:00PM.\")\n    print(\"You meet Karen for 120 minutes from 8:00PM to 10:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"8:00PM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to Embarcadero in 8 minutes and arrive at 9:08AM.\")\n    print(\"You meet Betty for 75 minutes from 9:08AM to 10:23AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"9:00AM\"\n    destination_available_end = \"2:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Golden Gate Park at 9:00AM.\")\n    print(\"You travel to North Beach in 24 minutes and arrive at 9:24AM.\")\n    print(\"You meet Ronald for 30 minutes from 9:30AM to 10:00AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 24\n    destination_available_start = \"9:30AM\"\n    destination_available_end = \"6:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Presidio\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Presidio\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Sunset District in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 11:15AM.\")\n    print(\"You meet Stephanie for 15 minutes from 11:15AM to 11:30AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"11:15AM\"\n    destination_available_end = \"2:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to Chinatown in 7 minutes and arrive at 9:07AM.\")\n    print(\"You wait until 4:15PM.\")\n    print(\"You meet Linda for 15 minutes from 4:15PM to 4:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"4:15PM\"\n    destination_available_end = \"8:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Sunset District in 24 minutes and arrive at 9:24AM.\")\n    print(\"You wait until 7:15PM.\")\n    print(\"You meet Rebecca for 120 minutes from 7:15PM to 9:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 24\n    destination_available_start = \"7:15PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at The Castro at 9:00AM.\")\n    print(\"You travel to Fisherman's Wharf in 24 minutes and arrive at 9:24AM.\")\n    print(\"You wait until 1:15PM.\")\n    print(\"You meet Betty for 15 minutes from 1:15PM to 1:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 24\n    destination_available_start = \"1:15PM\"\n    destination_available_end = \"3:45PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Presidio at 9:00AM.\")\n    print(\"You travel to Alamo Square in 18 minutes and arrive at 9:18AM.\")\n    print(\"You wait until 9:00PM.\")\n    print(\"You meet Melissa for 30 minutes from 9:00PM to 9:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"9:00PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 30\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Haight-Ashbury at 9:00AM.\")\n    print(\"You travel to Bayview in 18 minutes and arrive at 9:18AM.\")\n    print(\"You meet Paul for 90 minutes from 11:00AM to 12:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"11:00AM\"\n    destination_available_end = \"4:30PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"The Castro\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Chinatown at 9:00AM.\")\n    print(\"You travel to The Castro in 22 minutes and arrive at 9:22AM.\")\n    print(\"You wait until 11:15AM.\")\n    print(\"You meet Betty for 90 minutes from 11:15AM to 12:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 22\n    destination_available_start = \"11:15AM\"\n    destination_available_end = \"6:00PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Financial District at 9:00AM.\")\n    print(\"You travel to Marina District in 15 minutes and arrive at 9:15AM.\")\n    print(\"You wait until 6:15PM.\")\n    print(\"You meet Patricia for 15 minutes from 6:15PM to 6:30PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 15\n    destination_available_start = \"6:15PM\"\n    destination_available_end = \"8:15PM\"\n    min_meeting_duration = 15\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Golden Gate Park in 17 minutes and arrive at 9:17AM.\")\n    print(\"You meet David for 75 minutes from 9:17AM to 10:32AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 17\n    destination_available_start = \"8:30AM\"\n    destination_available_end = \"9:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Mission District at 9:00AM.\")\n    print(\"You travel to Alamo Square in 11 minutes and arrive at 9:11AM.\")\n    print(\"You meet Joseph for 75 minutes from 12:30PM to 1:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"12:30PM\"\n    destination_available_end = \"5:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Embarcadero in 8 minutes and arrive at 9:08AM.\")\n    print(\"You meet Michelle for 60 minutes from 12:45PM to 1:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 8\n    destination_available_start = \"12:45PM\"\n    destination_available_end = \"4:30PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Alamo Square in 10 minutes and arrive at 9:10AM.\")\n    print(\"You meet John for 90 minutes from 9:45AM to 11:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"9:45AM\"\n    destination_available_end = \"2:30PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration):\n    # Parse arrival time\n    arrival = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Schedule travel to destination\n    travel_to_destination = arrival + timedelta(minutes=travel_time)\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival.strftime('%I:%M%p')}\n    ]\n    \n    # Schedule meeting with friend\n    destination_available_start_dt = datetime.strptime(destination_available_start, '%I:%M%p')\n    destination_available_end_dt = datetime.strptime(destination_available_end, '%I:%M%p')\n    \n    # Find earliest available time slot that meets the minimum duration requirement\n    earliest_start = max(destination_available_start_dt, travel_to_destination)\n    latest_end = earliest_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be scheduled within friend's available time\n    if latest_end <= destination_available_end_dt:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"duration\": min_meeting_duration,\n            \"time\": earliest_start.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": latest_end.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    else:\n        # If the meeting cannot be scheduled, schedule travel back to Union Square\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"North Beach\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": travel_to_destination.strftime('%I:%M%p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time,\n            \"time\": travel_to_destination.strftime('%I:%M%p'),\n            \"to\": \"Union Square\"\n        })\n    \n    return schedule\n\ndef main():\n    print(\"SOLUTION:\")\n    print(\"You start at Union Square at 9:00AM.\")\n    print(\"You travel to North Beach in 10 minutes and arrive at 9:10AM.\")\n    print(\"You meet Jessica for 120 minutes from 4:15PM to 6:15PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 10\n    destination_available_start = \"4:15PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Pacific Heights at 9:00AM.\")\n    print(\"You travel to Chinatown in 11 minutes and arrive at 9:11AM.\")\n    print(\"You meet Ronald for 105 minutes from 3:15PM to 5:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 11\n    destination_available_start = \"3:15PM\"\n    destination_available_end = \"8:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at North Beach at 9:00AM.\")\n    print(\"You travel to Mission District in 18 minutes and arrive at 9:18AM.\")\n    print(\"You meet Joseph for 105 minutes from 7:00PM to 8:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 18\n    destination_available_start = \"7:00PM\"\n    destination_available_end = \"9:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You travel to Richmond District in 14 minutes and arrive at 9:14AM.\")\n    print(\"You meet Lisa for 120 minutes from 3:45PM to 5:45PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 14\n    destination_available_start = \"3:45PM\"\n    destination_available_end = \"7:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Fisherman's Wharf at 9:00AM.\")\n    print(\"You travel to Union Square in 13 minutes and arrive at 9:13AM.\")\n    print(\"You meet John for 60 minutes from 7:00PM to 8:00PM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 13\n    destination_available_start = \"7:00PM\"\n    destination_available_end = \"9:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    print(\"\\nSOLUTION:\")\n    print(\"You start at Russian Hill at 9:00AM.\")\n    print(\"You meet Barbara for 60 minutes from 7:15AM to 8:15AM.\")\n    \n    arrival_time = \"9:00AM\"\n    travel_time = 7\n    destination_available_start = \"7:15AM\"\n    destination_available_end = \"10:00PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(arrival_time, travel_time, destination_available_start, destination_available_end, min_meeting_duration)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Starting Location\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Friend's Location\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Friend's Location\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Friend's Location\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to starting location\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Starting Location\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Starting Location\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Friend's Location\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to starting location\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Starting Location\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Starting Location\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:30PM\"\n    friend_end = \"8:30PM\"\n    travel_time = 29\n    meeting_duration = 30\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:45PM\"\n    friend_end = \"10:00PM\"\n    travel_time = 5\n    meeting_duration = 120\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"3:00PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 13\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"2:15PM\"\n    friend_end = \"8:00PM\"\n    travel_time = 29\n    meeting_duration = 60\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"5:45PM\"\n    friend_end = \"7:00PM\"\n    travel_time = 17\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"4:00PM\"\n    friend_end = \"6:15PM\"\n    travel_time = 17\n    meeting_duration = 45\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Starting Location\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Friend's Location\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Friend's Location\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Friend's Location\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to starting location\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Starting Location\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Starting Location\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Friend's Location\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to starting location\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Starting Location\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Starting Location\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:45PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 10\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:30PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 5\n    meeting_duration = 90\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:45AM\"\n    friend_end = \"2:00PM\"\n    travel_time = 8\n    meeting_duration = 120\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:15AM\"\n    friend_end = \"1:30PM\"\n    travel_time = 11\n    meeting_duration = 120\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:45PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 10\n    meeting_duration = 45\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:30AM\"\n    friend_end = \"2:45PM\"\n    travel_time = 13\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Russian Hill\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Russian Hill\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Russian Hill\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Alamo Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Alamo Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Alamo Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Financial District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Financial District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Financial District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Mission District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Fisherman's Wharf\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Fisherman's Wharf\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Financial District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Financial District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Financial District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Marina District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Marina District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:30PM\"\n    friend_end = \"10:30PM\"\n    travel_time = 21\n    meeting_duration = 60\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:45PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 17\n    meeting_duration = 75\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:30AM\"\n    friend_end = \"8:15PM\"\n    travel_time = 5\n    meeting_duration = 75\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"4:45PM\"\n    friend_end = \"9:15PM\"\n    travel_time = 22\n    meeting_duration = 105\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:00AM\"\n    friend_end = \"7:30PM\"\n    travel_time = 22\n    meeting_duration = 120\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"5:00PM\"\n    friend_end = \"8:15PM\"\n    travel_time = 16\n    meeting_duration = 60\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Union Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Union Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Union Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Embarcadero\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Embarcadero\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Mission District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Bayview\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Presidio\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Presidio\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Presidio\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Richmond District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Richmond District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:00AM\"\n    friend_end = \"3:30PM\"\n    travel_time = 24\n    meeting_duration = 60\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:00AM\"\n    friend_end = \"2:15PM\"\n    travel_time = 21\n    meeting_duration = 60\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"3:45PM\"\n    friend_end = \"6:00PM\"\n    travel_time = 19\n    meeting_duration = 60\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"3:30PM\"\n    friend_end = \"8:15PM\"\n    travel_time = 31\n    meeting_duration = 30\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:00AM\"\n    friend_end = \"12:00PM\"\n    travel_time = 10\n    meeting_duration = 60\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:15AM\"\n    friend_end = \"8:30PM\"\n    travel_time = 9\n    meeting_duration = 30\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Nob Hill\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Nob Hill\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Nob Hill\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Haight-Ashbury\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Haight-Ashbury\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Mission District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Richmond District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Richmond District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Alamo Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Alamo Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Alamo Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to North Beach\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"North Beach\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to North Beach\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Union Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Union Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Union Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:45PM\"\n    friend_end = \"8:00PM\"\n    travel_time = 8\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:45PM\"\n    friend_end = \"10:45PM\"\n    travel_time = 17\n    meeting_duration = 60\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:45PM\"\n    friend_end = \"6:45PM\"\n    travel_time = 20\n    meeting_duration = 45\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:00PM\"\n    friend_end = \"4:45PM\"\n    travel_time = 8\n    meeting_duration = 90\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:15AM\"\n    friend_end = \"9:30PM\"\n    travel_time = 7\n    meeting_duration = 120\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:00PM\"\n    friend_end = \"8:00PM\"\n    travel_time = 19\n    meeting_duration = 105\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Haight-Ashbury\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Haight-Ashbury\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Embarcadero\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Embarcadero\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Embarcadero\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Embarcadero\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Chinatown\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Chinatown\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Chinatown\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Presidio\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Presidio\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Presidio\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Bayview\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to North Beach\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"North Beach\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to North Beach\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:15AM\"\n    friend_end = \"10:00PM\"\n    travel_time = 7\n    meeting_duration = 45\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:15AM\"\n    friend_end = \"10:30AM\"\n    travel_time = 21\n    meeting_duration = 90\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"2:30PM\"\n    friend_end = \"9:00PM\"\n    travel_time = 11\n    meeting_duration = 105\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:45PM\"\n    friend_end = \"9:00PM\"\n    travel_time = 12\n    meeting_duration = 75\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:00PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 12\n    meeting_duration = 30\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"1:30PM\"\n    friend_end = \"7:45PM\"\n    travel_time = 22\n    meeting_duration = 45\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Union Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Union Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Union Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Mission District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Russian Hill\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Russian Hill\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Russian Hill\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Financial District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Financial District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Financial District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Haight-Ashbury\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Haight-Ashbury\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Bayview\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Union Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Union Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Union Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Mission District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:30PM\"\n    friend_end = \"8:30PM\"\n    travel_time = 18\n    meeting_duration = 105\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"4:00PM\"\n    friend_end = \"8:45PM\"\n    travel_time = 16\n    meeting_duration = 105\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:45AM\"\n    friend_end = \"7:45PM\"\n    travel_time = 23\n    meeting_duration = 15\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:15PM\"\n    friend_end = \"5:00PM\"\n    travel_time = 6\n    meeting_duration = 90\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:00AM\"\n    friend_end = \"9:15PM\"\n    travel_time = 15\n    meeting_duration = 90\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:30AM\"\n    friend_end = \"10:00PM\"\n    travel_time = 12\n    meeting_duration = 75\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Sunset District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Sunset District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Sunset District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Haight-Ashbury\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Haight-Ashbury\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Russian Hill\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Russian Hill\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Russian Hill\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Sunset District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Sunset District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Sunset District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Marina District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Marina District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Richmond District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Richmond District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"2:00PM\"\n    friend_end = \"5:00PM\"\n    travel_time = 11\n    meeting_duration = 105\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:30PM\"\n    friend_end = \"10:15PM\"\n    travel_time = 7\n    meeting_duration = 15\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"4:00PM\"\n    friend_end = \"6:15PM\"\n    travel_time = 11\n    meeting_duration = 45\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:30PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 21\n    meeting_duration = 45\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:45AM\"\n    friend_end = \"1:00PM\"\n    travel_time = 17\n    meeting_duration = 120\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:30PM\"\n    friend_end = \"7:15PM\"\n    travel_time = 13\n    meeting_duration = 75\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Haight-Ashbury\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Haight-Ashbury\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Union Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Union Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Union Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Nob Hill\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Presidio\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Presidio\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Presidio\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Mission District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Golden Gate Park\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Golden Gate Park\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:15PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 20\n    meeting_duration = 75\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"1:45PM\"\n    friend_end = \"3:30PM\"\n    travel_time = 19\n    meeting_duration = 15\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:45AM\"\n    friend_end = \"10:45AM\"\n    travel_time = 8\n    meeting_duration = 45\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:45AM\"\n    friend_end = \"1:30PM\"\n    travel_time = 14\n    meeting_duration = 120\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:30AM\"\n    friend_end = \"5:30PM\"\n    travel_time = 17\n    meeting_duration = 75\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"5:45PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 10\n    meeting_duration = 75\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Embarcadero\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Embarcadero\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Nob Hill\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Haight-Ashbury\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Haight-Ashbury\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Marina District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Marina District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Presidio\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Presidio\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Presidio\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"1:00PM\"\n    friend_end = \"2:30PM\"\n    travel_time = 25\n    meeting_duration = 45\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:00AM\"\n    friend_end = \"3:45PM\"\n    travel_time = 19\n    meeting_duration = 75\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"2:15PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 17\n    meeting_duration = 60\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:45AM\"\n    friend_end = \"1:30PM\"\n    travel_time = 13\n    meeting_duration = 15\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"2:45PM\"\n    friend_end = \"9:00PM\"\n    travel_time = 22\n    meeting_duration = 90\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:45PM\"\n    friend_end = \"10:30PM\"\n    travel_time = 12\n    meeting_duration = 45\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Pacific Heights\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Pacific Heights\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Pacific Heights\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Golden Gate Park\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Golden Gate Park\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Union Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Union Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Union Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Sunset District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Alamo Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"3:30PM\"\n    friend_end = \"5:15PM\"\n    travel_time = 13\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"4:15PM\"\n    friend_end = \"10:00PM\"\n    travel_time = 25\n    meeting_duration = 90\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"4:15PM\"\n    friend_end = \"7:00PM\"\n    travel_time = 26\n    meeting_duration = 105\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:00AM\"\n    friend_end = \"5:00PM\"\n    travel_time = 6\n    meeting_duration = 15\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:15AM\"\n    friend_end = \"10:45AM\"\n    travel_time = 21\n    meeting_duration = 30\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:00AM\"\n    friend_end = \"1:00PM\"\n    travel_time = 5\n    meeting_duration = 30\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_84",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Nob Hill\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Nob Hill\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Nob Hill\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Bayview\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Bayview\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Bayview\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Bayview\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Richmond District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Richmond District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to North Beach\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"North Beach\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to North Beach\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:45AM\"\n    friend_end = \"5:15PM\"\n    travel_time = 8\n    meeting_duration = 60\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"3:15PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 19\n    meeting_duration = 105\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:00AM\"\n    friend_end = \"8:30PM\"\n    travel_time = 22\n    meeting_duration = 105\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"4:45PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 20\n    meeting_duration = 120\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:45AM\"\n    friend_end = \"9:45PM\"\n    travel_time = 5\n    meeting_duration = 60\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"1:15PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 4\n    meeting_duration = 15\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Mission District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Sunset District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Mission District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Golden Gate Park\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Golden Gate Park\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to The Castro\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"The Castro\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to The Castro\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Pacific Heights\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Marina District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Marina District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:00PM\"\n    friend_end = \"10:00PM\"\n    travel_time = 20\n    meeting_duration = 15\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:00AM\"\n    friend_end = \"4:15PM\"\n    travel_time = 21\n    meeting_duration = 105\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:30AM\"\n    friend_end = \"12:15PM\"\n    travel_time = 17\n    meeting_duration = 60\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"2:45PM\"\n    friend_end = \"3:45PM\"\n    travel_time = 21\n    meeting_duration = 30\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:45PM\"\n    friend_end = \"6:00PM\"\n    travel_time = 10\n    meeting_duration = 120\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:45PM\"\n    friend_end = \"9:00PM\"\n    travel_time = 12\n    meeting_duration = 15\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Haight-Ashbury\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Haight-Ashbury\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Presidio\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Presidio\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Presidio\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Embarcadero\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Embarcadero\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to The Castro\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"The Castro\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to The Castro\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Alamo Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Alamo Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Alamo Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Embarcadero\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:30AM\"\n    friend_end = \"8:30PM\"\n    travel_time = 15\n    meeting_duration = 30\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"11:45AM\"\n    friend_end = \"1:15PM\"\n    travel_time = 18\n    meeting_duration = 15\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:15PM\"\n    friend_end = \"8:45PM\"\n    travel_time = 30\n    meeting_duration = 30\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:30AM\"\n    friend_end = \"3:15PM\"\n    travel_time = 16\n    meeting_duration = 75\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:30AM\"\n    friend_end = \"3:30PM\"\n    travel_time = 18\n    meeting_duration = 120\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:30AM\"\n    friend_end = \"3:00PM\"\n    travel_time = 11\n    meeting_duration = 75\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Marina District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Marina District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Haight-Ashbury\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Pacific Heights\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Golden Gate Park\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Golden Gate Park\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Meet friend\n    meet_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Sunset District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"5:00PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 12\n    meeting_duration = 45\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:15AM\"\n    friend_end = \"1:00PM\"\n    travel_time = 25\n    meeting_duration = 120\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"12:45PM\"\n    friend_end = \"3:30PM\"\n    travel_time = 6\n    meeting_duration = 105\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"7:15AM\"\n    friend_end = \"1:00PM\"\n    travel_time = 16\n    meeting_duration = 120\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"9:00PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 20\n    meeting_duration = 45\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:45PM\"\n    friend_end = \"9:45PM\"\n    travel_time = 11\n    meeting_duration = 15\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Chinatown\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Chinatown\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Chinatown\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n\n    return schedule\n\ndef compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Alamo Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Alamo Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Alamo Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    return schedule\n\ndef compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Bayview\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Bayview\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Bayview\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    return schedule\n\ndef compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Golden Gate Park\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Golden Gate Park\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Golden Gate Park\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return schedule\n\ndef compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Alamo Square\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Alamo Square\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Alamo Square\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n\n    return schedule\n\ndef compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration):\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time})\n\n    # Travel to friend's location\n    travel_end_time = datetime.strptime(arrival_time, \"%I:%M%p\") + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait for friend to arrive\n    wait_start_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    wait_end_time = datetime.strptime(friend_start, \"%I:%M%p\")\n    if wait_start_time < wait_end_time:\n        wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Bayview\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    else:\n        # Travel back to Mission District\n        travel_time_back = travel_time\n        travel_end_time = datetime.strptime(travel_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_back,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        return schedule\n\n    # Meet friend\n    meet_start_time = datetime.strptime(wait_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Mission District\n    travel_time_back = travel_time\n    travel_end_time = datetime.strptime(meet_end_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_time_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_back,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n\n    return schedule\n\ndef main():\n    # Problem 1\n    arrival_time = \"9:00AM\"\n    friend_start = \"8:00PM\"\n    friend_end = \"9:30PM\"\n    travel_time = 7\n    meeting_duration = 90\n    schedule = compute_schedule(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 2\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:30PM\"\n    friend_end = \"8:00PM\"\n    travel_time = 18\n    meeting_duration = 75\n    schedule = compute_schedule2(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 3\n    arrival_time = \"9:00AM\"\n    friend_start = \"10:15AM\"\n    friend_end = \"7:45PM\"\n    travel_time = 20\n    meeting_duration = 15\n    schedule = compute_schedule3(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 4\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:00PM\"\n    friend_end = \"7:45PM\"\n    travel_time = 24\n    meeting_duration = 90\n    schedule = compute_schedule4(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 5\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:30PM\"\n    friend_end = \"8:45PM\"\n    travel_time = 17\n    meeting_duration = 105\n    schedule = compute_schedule5(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\n    # Problem 6\n    arrival_time = \"9:00AM\"\n    friend_start = \"6:00PM\"\n    friend_end = \"7:30PM\"\n    travel_time = 15\n    meeting_duration = 60\n    schedule = compute_schedule6(arrival_time, friend_start, friend_end, travel_time, meeting_duration)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time})\n    \n    # Travel to Laura's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Chinatown\"\n    })\n    \n    # Wait until Laura is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Laura\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Nob Hill to Chinatown\n    nob_hill_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 6,\n        \"start_time\": \"5:30PM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 75\n    }\n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_chinatown[\"arrival_time\"], nob_hill_to_chinatown[\"start_time\"], nob_hill_to_chinatown[\"end_time\"], nob_hill_to_chinatown[\"travel_time\"], nob_hill_to_chinatown[\"meeting_duration\"])\n    schedule.extend(nob_hill_schedule)\n    \n    # Golden Gate Park to Pacific Heights\n    golden_gate_park_to_pacific_heights = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"11:30AM\",\n        \"end_time\": \"2:30PM\",\n        \"meeting_duration\": 120\n    }\n    golden_gate_park_schedule = compute_meeting_schedule(golden_gate_park_to_pacific_heights[\"arrival_time\"], golden_gate_park_to_pacific_heights[\"start_time\"], golden_gate_park_to_pacific_heights[\"end_time\"], golden_gate_park_to_pacific_heights[\"travel_time\"], golden_gate_park_to_pacific_heights[\"meeting_duration\"])\n    schedule.extend(golden_gate_park_schedule)\n    \n    # Richmond District to Haight-Ashbury\n    richmond_district_to_haight_ashbury = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"12:45PM\",\n        \"end_time\": \"8:45PM\",\n        \"meeting_duration\": 105\n    }\n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_haight_ashbury[\"arrival_time\"], richmond_district_to_haight_ashbury[\"start_time\"], richmond_district_to_haight_ashbury[\"end_time\"], richmond_district_to_haight_ashbury[\"travel_time\"], richmond_district_to_haight_ashbury[\"meeting_duration\"])\n    schedule.extend(richmond_district_schedule)\n    \n    # North Beach to Haight-Ashbury\n    north_beach_to_haight_ashbury = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 18,\n        \"start_time\": \"7:00AM\",\n        \"end_time\": \"8:00AM\",\n        \"meeting_duration\": 45\n    }\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_haight_ashbury[\"arrival_time\"], north_beach_to_haight_ashbury[\"start_time\"], north_beach_to_haight_ashbury[\"end_time\"], north_beach_to_haight_ashbury[\"travel_time\"], north_beach_to_haight_ashbury[\"meeting_duration\"])\n    schedule.extend(north_beach_schedule)\n    \n    # North Beach to Sunset District\n    north_beach_to_sunset_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 27,\n        \"start_time\": \"8:00AM\",\n        \"end_time\": \"7:30PM\",\n        \"meeting_duration\": 60\n    }\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_sunset_district[\"arrival_time\"], north_beach_to_sunset_district[\"start_time\"], north_beach_to_sunset_district[\"end_time\"], north_beach_to_sunset_district[\"travel_time\"], north_beach_to_sunset_district[\"meeting_duration\"])\n    schedule.extend(north_beach_schedule)\n    \n    # Alamo Square to Chinatown\n    alamo_square_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"8:15AM\",\n        \"end_time\": \"6:45PM\",\n        \"meeting_duration\": 15\n    }\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_chinatown[\"arrival_time\"], alamo_square_to_chinatown[\"start_time\"], alamo_square_to_chinatown[\"end_time\"], alamo_square_to_chinatown[\"travel_time\"], alamo_square_to_chinatown[\"meeting_duration\"])\n    schedule.extend(alamo_square_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    nob_hill_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 6,\n        \"start_time\": \"5:30PM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 75\n    }\n    golden_gate_park_to_pacific_heights = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"11:30AM\",\n        \"end_time\": \"2:30PM\",\n        \"meeting_duration\": 120\n    }\n    richmond_district_to_haight_ashbury = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"12:45PM\",\n        \"end_time\": \"8:45PM\",\n        \"meeting_duration\": 105\n    }\n    north_beach_to_haight_ashbury = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 18,\n        \"start_time\": \"7:00AM\",\n        \"end_time\": \"8:00AM\",\n        \"meeting_duration\": 45\n    }\n    north_beach_to_sunset_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 27,\n        \"start_time\": \"8:00AM\",\n        \"end_time\": \"7:30PM\",\n        \"meeting_duration\": 60\n    }\n    alamo_square_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"8:15AM\",\n        \"end_time\": \"6:45PM\",\n        \"meeting_duration\": 15\n    }\n    \n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_chinatown[\"arrival_time\"], nob_hill_to_chinatown[\"start_time\"], nob_hill_to_chinatown[\"end_time\"], nob_hill_to_chinatown[\"travel_time\"], nob_hill_to_chinatown[\"meeting_duration\"])\n    golden_gate_park_schedule = compute_meeting_schedule(golden_gate_park_to_pacific_heights[\"arrival_time\"], golden_gate_park_to_pacific_heights[\"start_time\"], golden_gate_park_to_pacific_heights[\"end_time\"], golden_gate_park_to_pacific_heights[\"travel_time\"], golden_gate_park_to_pacific_heights[\"meeting_duration\"])\n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_haight_ashbury[\"arrival_time\"], richmond_district_to_haight_ashbury[\"start_time\"], richmond_district_to_haight_ashbury[\"end_time\"], richmond_district_to_haight_ashbury[\"travel_time\"], richmond_district_to_haight_ashbury[\"meeting_duration\"])\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_haight_ashbury[\"arrival_time\"], north_beach_to_haight_ashbury[\"start_time\"], north_beach_to_haight_ashbury[\"end_time\"], north_beach_to_haight_ashbury[\"travel_time\"], north_beach_to_haight_ashbury[\"meeting_duration\"])\n    north_beach_schedule_2 = compute_meeting_schedule(north_beach_to_sunset_district[\"arrival_time\"], north_beach_to_sunset_district[\"start_time\"], north_beach_to_sunset_district[\"end_time\"], north_beach_to_sunset_district[\"travel_time\"], north_beach_to_sunset_district[\"meeting_duration\"])\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_chinatown[\"arrival_time\"], alamo_square_to_chinatown[\"start_time\"], alamo_square_to_chinatown[\"end_time\"], alamo_square_to_chinatown[\"travel_time\"], alamo_square_to_chinatown[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(nob_hill_schedule + golden_gate_park_schedule + richmond_district_schedule + north_beach_schedule + north_beach_schedule_2 + alamo_square_schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival_time})\n    \n    # Travel to Steven's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"The Castro\"\n    })\n    \n    # Wait until Steven is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"The Castro\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Steven\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Chinatown\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n    \n    # Chinatown to The Castro\n    chinatown_to_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 22,\n        \"start_time\": \"1:45PM\",\n        \"end_time\": \"9:15PM\",\n        \"meeting_duration\": 45\n    }\n    chinatown_schedule = compute_meeting_schedule(chinatown_to_castro[\"arrival_time\"], chinatown_to_castro[\"start_time\"], chinatown_to_castro[\"end_time\"], chinatown_to_castro[\"travel_time\"], chinatown_to_castro[\"meeting_duration\"])\n    schedule.extend(chinatown_schedule)\n    \n    # Golden Gate Park to Bayview\n    golden_gate_park_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 23,\n        \"start_time\": \"10:15AM\",\n        \"end_time\": \"9:00PM\",\n        \"meeting_duration\": 75\n    }\n    golden_gate_park_schedule = compute_meeting_schedule(golden_gate_park_to_bayview[\"arrival_time\"], golden_gate_park_to_bayview[\"start_time\"], golden_gate_park_to_bayview[\"end_time\"], golden_gate_park_to_bayview[\"travel_time\"], golden_gate_park_to_bayview[\"meeting_duration\"])\n    schedule.extend(golden_gate_park_schedule)\n    \n    # Russian Hill to Embarcadero\n    russian_hill_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"1:00PM\",\n        \"end_time\": \"3:15PM\",\n        \"meeting_duration\": 60\n    }\n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_embarcadero[\"arrival_time\"], russian_hill_to_embarcadero[\"start_time\"], russian_hill_to_embarcadero[\"end_time\"], russian_hill_to_embarcadero[\"travel_time\"], russian_hill_to_embarcadero[\"meeting_duration\"])\n    schedule.extend(russian_hill_schedule)\n    \n    # Golden Gate Park to Richmond District\n    golden_gate_park_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"1:30PM\",\n        \"end_time\": \"5:45PM\",\n        \"meeting_duration\": 75\n    }\n    golden_gate_park_schedule = compute_meeting_schedule(golden_gate_park_to_richmond_district[\"arrival_time\"], golden_gate_park_to_richmond_district[\"start_time\"], golden_gate_park_to_richmond_district[\"end_time\"], golden_gate_park_to_richmond_district[\"travel_time\"], golden_gate_park_to_richmond_district[\"meeting_duration\"])\n    schedule.extend(golden_gate_park_schedule)\n    \n    # Richmond District to Alamo Square\n    richmond_district_to_alamo_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"9:45AM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 90\n    }\n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_alamo_square[\"arrival_time\"], richmond_district_to_alamo_square[\"start_time\"], richmond_district_to_alamo_square[\"end_time\"], richmond_district_to_alamo_square[\"travel_time\"], richmond_district_to_alamo_square[\"meeting_duration\"])\n    schedule.extend(richmond_district_schedule)\n    \n    # Russian Hill to Richmond District\n    russian_hill_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 14,\n        \"start_time\": \"7:00PM\",\n        \"end_time\": \"8:15PM\",\n        \"meeting_duration\": 75\n    }\n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_richmond_district[\"arrival_time\"], russian_hill_to_richmond_district[\"start_time\"], russian_hill_to_richmond_district[\"end_time\"], russian_hill_to_richmond_district[\"travel_time\"], russian_hill_to_richmond_district[\"meeting_duration\"])\n    schedule.extend(russian_hill_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    chinatown_to_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 22,\n        \"start_time\": \"1:45PM\",\n        \"end_time\": \"9:15PM\",\n        \"meeting_duration\": 45\n    }\n    golden_gate_park_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 23,\n        \"start_time\": \"10:15AM\",\n        \"end_time\": \"9:00PM\",\n        \"meeting_duration\": 75\n    }\n    russian_hill_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"1:00PM\",\n        \"end_time\": \"3:15PM\",\n        \"meeting_duration\": 60\n    }\n    golden_gate_park_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"1:30PM\",\n        \"end_time\": \"5:45PM\",\n        \"meeting_duration\": 75\n    }\n    richmond_district_to_alamo_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"9:45AM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 90\n    }\n    russian_hill_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 14,\n        \"start_time\": \"7:00PM\",\n        \"end_time\": \"8:15PM\",\n        \"meeting_duration\": 75\n    }\n    \n    chinatown_schedule = compute_meeting_schedule(chinatown_to_castro[\"arrival_time\"], chinatown_to_castro[\"start_time\"], chinatown_to_castro[\"end_time\"], chinatown_to_castro[\"travel_time\"], chinatown_to_castro[\"meeting_duration\"])\n    golden_gate_park_schedule = compute_meeting_schedule(golden_gate_park_to_bayview[\"arrival_time\"], golden_gate_park_to_bayview[\"start_time\"], golden_gate_park_to_bayview[\"end_time\"], golden_gate_park_to_bayview[\"travel_time\"], golden_gate_park_to_bayview[\"meeting_duration\"])\n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_embarcadero[\"arrival_time\"], russian_hill_to_embarcadero[\"start_time\"], russian_hill_to_embarcadero[\"end_time\"], russian_hill_to_embarcadero[\"travel_time\"], russian_hill_to_embarcadero[\"meeting_duration\"])\n    golden_gate_park_schedule_2 = compute_meeting_schedule(golden_gate_park_to_richmond_district[\"arrival_time\"], golden_gate_park_to_richmond_district[\"start_time\"], golden_gate_park_to_richmond_district[\"end_time\"], golden_gate_park_to_richmond_district[\"travel_time\"], golden_gate_park_to_richmond_district[\"meeting_duration\"])\n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_alamo_square[\"arrival_time\"], richmond_district_to_alamo_square[\"start_time\"], richmond_district_to_alamo_square[\"end_time\"], richmond_district_to_alamo_square[\"travel_time\"], richmond_district_to_alamo_square[\"meeting_duration\"])\n    russian_hill_schedule_2 = compute_meeting_schedule(russian_hill_to_richmond_district[\"arrival_time\"], russian_hill_to_richmond_district[\"start_time\"], russian_hill_to_richmond_district[\"end_time\"], russian_hill_to_richmond_district[\"travel_time\"], russian_hill_to_richmond_district[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(chinatown_schedule + golden_gate_park_schedule + russian_hill_schedule + golden_gate_park_schedule_2 + richmond_district_schedule + russian_hill_schedule_2, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n    \n    # Travel to John's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Sunset District\"\n    })\n    \n    # Wait until John is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet John\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # The Castro to Chinatown\n    the_castro_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"7:00AM\",\n        \"end_time\": \"8:45AM\",\n        \"meeting_duration\": 90\n    }\n    the_castro_schedule = compute_meeting_schedule(the_castro_to_chinatown[\"arrival_time\"], the_castro_to_chinatown[\"start_time\"], the_castro_to_chinatown[\"end_time\"], the_castro_to_chinatown[\"travel_time\"], the_castro_to_chinatown[\"meeting_duration\"])\n    schedule.extend(the_castro_schedule)\n    \n    # The Castro to Bayview\n    the_castro_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 19,\n        \"start_time\": \"6:45PM\",\n        \"end_time\": \"9:15PM\",\n        \"meeting_duration\": 45\n    }\n    the_castro_schedule = compute_meeting_schedule(the_castro_to_bayview[\"arrival_time\"], the_castro_to_bayview[\"start_time\"], the_castro_to_bayview[\"end_time\"], the_castro_to_bayview[\"travel_time\"], the_castro_to_bayview[\"meeting_duration\"])\n    schedule.extend(the_castro_schedule)\n    \n    # The Castro to North Beach\n    the_castro_to_north_beach = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"7:45PM\",\n        \"end_time\": \"8:30PM\",\n        \"meeting_duration\": 45\n    }\n    the_castro_schedule = compute_meeting_schedule(the_castro_to_north_beach[\"arrival_time\"], the_castro_to_north_beach[\"start_time\"], the_castro_to_north_beach[\"end_time\"], the_castro_to_north_beach[\"travel_time\"], the_castro_to_north_beach[\"meeting_duration\"])\n    schedule.extend(the_castro_schedule)\n    \n    # Alamo Square to Russian Hill\n    alamo_square_to_russian_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"11:15AM\",\n        \"end_time\": \"2:15PM\",\n        \"meeting_duration\": 15\n    }\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_russian_hill[\"arrival_time\"], alamo_square_to_russian_hill[\"start_time\"], alamo_square_to_russian_hill[\"end_time\"], alamo_square_to_russian_hill[\"travel_time\"], alamo_square_to_russian_hill[\"meeting_duration\"])\n    schedule.extend(alamo_square_schedule)\n    \n    # Financial District to The Castro\n    financial_district_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 23,\n        \"start_time\": \"2:00PM\",\n        \"end_time\": \"5:45PM\",\n        \"meeting_duration\": 45\n    }\n    financial_district_schedule = compute_meeting_schedule(financial_district_to_the_castro[\"arrival_time\"], financial_district_to_the_castro[\"start_time\"], financial_district_to_the_castro[\"end_time\"], financial_district_to_the_castro[\"travel_time\"], financial_district_to_the_castro[\"meeting_duration\"])\n    schedule.extend(financial_district_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    alamo_square_to_sunset_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"7:00PM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 75\n    }\n    the_castro_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"7:00AM\",\n        \"end_time\": \"8:45AM\",\n        \"meeting_duration\": 90\n    }\n    the_castro_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 19,\n        \"start_time\": \"6:45PM\",\n        \"end_time\": \"9:15PM\",\n        \"meeting_duration\": 45\n    }\n    the_castro_to_north_beach = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"7:45PM\",\n        \"end_time\": \"8:30PM\",\n        \"meeting_duration\": 45\n    }\n    alamo_square_to_russian_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"11:15AM\",\n        \"end_time\": \"2:15PM\",\n        \"meeting_duration\": 15\n    }\n    financial_district_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 23,\n        \"start_time\": \"2:00PM\",\n        \"end_time\": \"5:45PM\",\n        \"meeting_duration\": 45\n    }\n    \n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_sunset_district[\"arrival_time\"], alamo_square_to_sunset_district[\"start_time\"], alamo_square_to_sunset_district[\"end_time\"], alamo_square_to_sunset_district[\"travel_time\"], alamo_square_to_sunset_district[\"meeting_duration\"])\n    the_castro_schedule = compute_meeting_schedule(the_castro_to_chinatown[\"arrival_time\"], the_castro_to_chinatown[\"start_time\"], the_castro_to_chinatown[\"end_time\"], the_castro_to_chinatown[\"travel_time\"], the_castro_to_chinatown[\"meeting_duration\"])\n    the_castro_schedule_2 = compute_meeting_schedule(the_castro_to_bayview[\"arrival_time\"], the_castro_to_bayview[\"start_time\"], the_castro_to_bayview[\"end_time\"], the_castro_to_bayview[\"travel_time\"], the_castro_to_bayview[\"meeting_duration\"])\n    the_castro_schedule_3 = compute_meeting_schedule(the_castro_to_north_beach[\"arrival_time\"], the_castro_to_north_beach[\"start_time\"], the_castro_to_north_beach[\"end_time\"], the_castro_to_north_beach[\"travel_time\"], the_castro_to_north_beach[\"meeting_duration\"])\n    alamo_square_schedule_2 = compute_meeting_schedule(alamo_square_to_russian_hill[\"arrival_time\"], alamo_square_to_russian_hill[\"start_time\"], alamo_square_to_russian_hill[\"end_time\"], alamo_square_to_russian_hill[\"travel_time\"], alamo_square_to_russian_hill[\"meeting_duration\"])\n    financial_district_schedule = compute_meeting_schedule(financial_district_to_the_castro[\"arrival_time\"], financial_district_to_the_castro[\"start_time\"], financial_district_to_the_castro[\"end_time\"], financial_district_to_the_castro[\"travel_time\"], financial_district_to_the_castro[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(alamo_square_schedule + the_castro_schedule + the_castro_schedule_2 + the_castro_schedule_3 + alamo_square_schedule_2 + financial_district_schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n    \n    # Travel to Kimberly's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Wait until Kimberly is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Kimberly\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Embarcadero\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n    \n    # Marina District to North Beach\n    marina_district_to_north_beach = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"4:00PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 15\n    }\n    marina_district_schedule = compute_meeting_schedule(marina_district_to_north_beach[\"arrival_time\"], marina_district_to_north_beach[\"start_time\"], marina_district_to_north_beach[\"end_time\"], marina_district_to_north_beach[\"travel_time\"], marina_district_to_north_beach[\"meeting_duration\"])\n    schedule.extend(marina_district_schedule)\n    \n    # Russian Hill to Marina District\n    russian_hill_to_marina_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"7:15PM\",\n        \"end_time\": \"8:30PM\",\n        \"meeting_duration\": 30\n    }\n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_marina_district[\"arrival_time\"], russian_hill_to_marina_district[\"start_time\"], russian_hill_to_marina_district[\"end_time\"], russian_hill_to_marina_district[\"travel_time\"], russian_hill_to_marina_district[\"meeting_duration\"])\n    schedule.extend(russian_hill_schedule)\n    \n    # Embarcadero to The Castro\n    embarcadero_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 25,\n        \"start_time\": \"4:30PM\",\n        \"end_time\": \"8:15PM\",\n        \"meeting_duration\": 75\n    }\n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_the_castro[\"arrival_time\"], embarcadero_to_the_castro[\"start_time\"], embarcadero_to_the_castro[\"end_time\"], embarcadero_to_the_castro[\"travel_time\"], embarcadero_to_the_castro[\"meeting_duration\"])\n    schedule.extend(embarcadero_schedule)\n    \n    # Nob Hill to Embarcadero\n    nob_hill_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 9,\n        \"start_time\": \"7:15AM\",\n        \"end_time\": \"5:15PM\",\n        \"meeting_duration\": 30\n    }\n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_embarcadero[\"arrival_time\"], nob_hill_to_embarcadero[\"start_time\"], nob_hill_to_embarcadero[\"end_time\"], nob_hill_to_embarcadero[\"travel_time\"], nob_hill_to_embarcadero[\"meeting_duration\"])\n    schedule.extend(nob_hill_schedule)\n    \n    # North Beach to Chinatown\n    north_beach_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 6,\n        \"start_time\": \"7:00PM\",\n        \"end_time\": \"9:00PM\",\n        \"meeting_duration\": 75\n    }\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_chinatown[\"arrival_time\"], north_beach_to_chinatown[\"start_time\"], north_beach_to_chinatown[\"end_time\"], north_beach_to_chinatown[\"travel_time\"], north_beach_to_chinatown[\"meeting_duration\"])\n    schedule.extend(north_beach_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    embarcadero_to_russian_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"12:15PM\",\n        \"end_time\": \"3:30PM\",\n        \"meeting_duration\": 30\n    }\n    marina_district_to_north_beach = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"4:00PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 15\n    }\n    russian_hill_to_marina_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"7:15PM\",\n        \"end_time\": \"8:30PM\",\n        \"meeting_duration\": 30\n    }\n    embarcadero_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 25,\n        \"start_time\": \"4:30PM\",\n        \"end_time\": \"8:15PM\",\n        \"meeting_duration\": 75\n    }\n    nob_hill_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 9,\n        \"start_time\": \"7:15AM\",\n        \"end_time\": \"5:15PM\",\n        \"meeting_duration\": 30\n    }\n    north_beach_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 6,\n        \"start_time\": \"7:00PM\",\n        \"end_time\": \"9:00PM\",\n        \"meeting_duration\": 75\n    }\n    \n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_russian_hill[\"arrival_time\"], embarcadero_to_russian_hill[\"start_time\"], embarcadero_to_russian_hill[\"end_time\"], embarcadero_to_russian_hill[\"travel_time\"], embarcadero_to_russian_hill[\"meeting_duration\"])\n    marina_district_schedule = compute_meeting_schedule(marina_district_to_north_beach[\"arrival_time\"], marina_district_to_north_beach[\"start_time\"], marina_district_to_north_beach[\"end_time\"], marina_district_to_north_beach[\"travel_time\"], marina_district_to_north_beach[\"meeting_duration\"])\n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_marina_district[\"arrival_time\"], russian_hill_to_marina_district[\"start_time\"], russian_hill_to_marina_district[\"end_time\"], russian_hill_to_marina_district[\"travel_time\"], russian_hill_to_marina_district[\"meeting_duration\"])\n    embarcadero_schedule_2 = compute_meeting_schedule(embarcadero_to_the_castro[\"arrival_time\"], embarcadero_to_the_castro[\"start_time\"], embarcadero_to_the_castro[\"end_time\"], embarcadero_to_the_castro[\"travel_time\"], embarcadero_to_the_castro[\"meeting_duration\"])\n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_embarcadero[\"arrival_time\"], nob_hill_to_embarcadero[\"start_time\"], nob_hill_to_embarcadero[\"end_time\"], nob_hill_to_embarcadero[\"travel_time\"], nob_hill_to_embarcadero[\"meeting_duration\"])\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_chinatown[\"arrival_time\"], north_beach_to_chinatown[\"start_time\"], north_beach_to_chinatown[\"end_time\"], north_beach_to_chinatown[\"travel_time\"], north_beach_to_chinatown[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(embarcadero_schedule + marina_district_schedule + russian_hill_schedule + embarcadero_schedule_2 + nob_hill_schedule + north_beach_schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_93",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n    \n    # Travel to Kimberly's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"The Castro\"\n    })\n    \n    # Wait until Kimberly is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"The Castro\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Kimberly\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Richmond District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Embarcadero to Russian Hill\n    embarcadero_to_russian_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"4:30PM\",\n        \"end_time\": \"6:15PM\",\n        \"meeting_duration\": 105\n    }\n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_russian_hill[\"arrival_time\"], embarcadero_to_russian_hill[\"start_time\"], embarcadero_to_russian_hill[\"end_time\"], embarcadero_to_russian_hill[\"travel_time\"], embarcadero_to_russian_hill[\"meeting_duration\"])\n    schedule.extend(embarcadero_schedule)\n    \n    # Alamo Square to Mission District\n    alamo_square_to_mission_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"12:45PM\",\n        \"end_time\": \"5:15PM\",\n        \"meeting_duration\": 105\n    }\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_mission_district[\"arrival_time\"], alamo_square_to_mission_district[\"start_time\"], alamo_square_to_mission_district[\"end_time\"], alamo_square_to_mission_district[\"travel_time\"], alamo_square_to_mission_district[\"meeting_duration\"])\n    schedule.extend(alamo_square_schedule)\n    \n    # Nob Hill to Fisherman's Wharf\n    nob_hill_to_fishermans_wharf = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"11:15AM\",\n        \"end_time\": \"2:30PM\",\n        \"meeting_duration\": 120\n    }\n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_fishermans_wharf[\"arrival_time\"], nob_hill_to_fishermans_wharf[\"start_time\"], nob_hill_to_fishermans_wharf[\"end_time\"], nob_hill_to_fishermans_wharf[\"travel_time\"], nob_hill_to_fishermans_wharf[\"meeting_duration\"])\n    schedule.extend(nob_hill_schedule)\n    \n    # Pacific Heights to Embarcadero\n    pacific_heights_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"8:00PM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 75\n    }\n    pacific_heights_schedule = compute_meeting_schedule(pacific_heights_to_embarcadero[\"arrival_time\"], pacific_heights_to_embarcadero[\"start_time\"], pacific_heights_to_embarcadero[\"end_time\"], pacific_heights_to_embarcadero[\"travel_time\"], pacific_heights_to_embarcadero[\"meeting_duration\"])\n    schedule.extend(pacific_heights_schedule)\n    \n    # Alamo Square to Russian Hill\n    alamo_square_to_russian_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"11:15AM\",\n        \"end_time\": \"12:00PM\",\n        \"meeting_duration\": 15\n    }\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_russian_hill[\"arrival_time\"], alamo_square_to_russian_hill[\"start_time\"], alamo_square_to_russian_hill[\"end_time\"], alamo_square_to_russian_hill[\"travel_time\"], alamo_square_to_russian_hill[\"meeting_duration\"])\n    schedule.extend(alamo_square_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    richmond_district_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"11:45AM\",\n        \"end_time\": \"1:15PM\",\n        \"meeting_duration\": 75\n    }\n    embarcadero_to_russian_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"4:30PM\",\n        \"end_time\": \"6:15PM\",\n        \"meeting_duration\": 105\n    }\n    alamo_square_to_mission_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"12:45PM\",\n        \"end_time\": \"5:15PM\",\n        \"meeting_duration\": 105\n    }\n    nob_hill_to_fishermans_wharf = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"11:15AM\",\n        \"end_time\": \"2:30PM\",\n        \"meeting_duration\": 120\n    }\n    pacific_heights_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"8:00PM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 75\n    }\n    alamo_square_to_russian_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"11:15AM\",\n        \"end_time\": \"12:00PM\",\n        \"meeting_duration\": 15\n    }\n    \n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_the_castro[\"arrival_time\"], richmond_district_to_the_castro[\"start_time\"], richmond_district_to_the_castro[\"end_time\"], richmond_district_to_the_castro[\"travel_time\"], richmond_district_to_the_castro[\"meeting_duration\"])\n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_russian_hill[\"arrival_time\"], embarcadero_to_russian_hill[\"start_time\"], embarcadero_to_russian_hill[\"end_time\"], embarcadero_to_russian_hill[\"travel_time\"], embarcadero_to_russian_hill[\"meeting_duration\"])\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_mission_district[\"arrival_time\"], alamo_square_to_mission_district[\"start_time\"], alamo_square_to_mission_district[\"end_time\"], alamo_square_to_mission_district[\"travel_time\"], alamo_square_to_mission_district[\"meeting_duration\"])\n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_fishermans_wharf[\"arrival_time\"], nob_hill_to_fishermans_wharf[\"start_time\"], nob_hill_to_fishermans_wharf[\"end_time\"], nob_hill_to_fishermans_wharf[\"travel_time\"], nob_hill_to_fishermans_wharf[\"meeting_duration\"])\n    pacific_heights_schedule = compute_meeting_schedule(pacific_heights_to_embarcadero[\"arrival_time\"], pacific_heights_to_embarcadero[\"start_time\"], pacific_heights_to_embarcadero[\"end_time\"], pacific_heights_to_embarcadero[\"travel_time\"], pacific_heights_to_embarcadero[\"meeting_duration\"])\n    alamo_square_schedule_2 = compute_meeting_schedule(alamo_square_to_russian_hill[\"arrival_time\"], alamo_square_to_russian_hill[\"start_time\"], alamo_square_to_russian_hill[\"end_time\"], alamo_square_to_russian_hill[\"travel_time\"], alamo_square_to_russian_hill[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(richmond_district_schedule + embarcadero_schedule + alamo_square_schedule + nob_hill_schedule + pacific_heights_schedule + alamo_square_schedule_2, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_94",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n    \n    # Travel to Margaret's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Sunset District\"\n    })\n    \n    # Wait until Margaret is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Margaret\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Richmond District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Mission District to Chinatown\n    mission_district_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"7:15PM\",\n        \"end_time\": \"8:30PM\",\n        \"meeting_duration\": 75\n    }\n    mission_district_schedule = compute_meeting_schedule(mission_district_to_chinatown[\"arrival_time\"], mission_district_to_chinatown[\"start_time\"], mission_district_to_chinatown[\"end_time\"], mission_district_to_chinatown[\"travel_time\"], mission_district_to_chinatown[\"meeting_duration\"])\n    schedule.extend(mission_district_schedule)\n    \n    # Bayview to Sunset District\n    bayview_to_sunset_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 23,\n        \"start_time\": \"5:00PM\",\n        \"end_time\": \"8:45PM\",\n        \"meeting_duration\": 60\n    }\n    bayview_schedule = compute_meeting_schedule(bayview_to_sunset_district[\"arrival_time\"], bayview_to_sunset_district[\"start_time\"], bayview_to_sunset_district[\"end_time\"], bayview_to_sunset_district[\"travel_time\"], bayview_to_sunset_district[\"meeting_duration\"])\n    schedule.extend(bayview_schedule)\n    \n    # Union Square to Marina District\n    union_square_to_marina_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 18,\n        \"start_time\": \"9:15AM\",\n        \"end_time\": \"4:15PM\",\n        \"meeting_duration\": 45\n    }\n    union_square_schedule = compute_meeting_schedule(union_square_to_marina_district[\"arrival_time\"], union_square_to_marina_district[\"start_time\"], union_square_to_marina_district[\"end_time\"], union_square_to_marina_district[\"travel_time\"], union_square_to_marina_district[\"meeting_duration\"])\n    schedule.extend(union_square_schedule)\n    \n    # Presidio to The Castro\n    presidio_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 21,\n        \"start_time\": \"4:30PM\",\n        \"end_time\": \"7:30PM\",\n        \"meeting_duration\": 105\n    }\n    presidio_schedule = compute_meeting_schedule(presidio_to_the_castro[\"arrival_time\"], presidio_to_the_castro[\"start_time\"], presidio_to_the_castro[\"end_time\"], presidio_to_the_castro[\"travel_time\"], presidio_to_the_castro[\"meeting_duration\"])\n    schedule.extend(presidio_schedule)\n    \n    # North Beach to Bayview\n    north_beach_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 22,\n        \"start_time\": \"11:00AM\",\n        \"end_time\": \"12:45PM\",\n        \"meeting_duration\": 90\n    }\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_bayview[\"arrival_time\"], north_beach_to_bayview[\"start_time\"], north_beach_to_bayview[\"end_time\"], north_beach_to_bayview[\"travel_time\"], north_beach_to_bayview[\"meeting_duration\"])\n    schedule.extend(north_beach_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    richmond_district_to_sunset_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"2:00PM\",\n        \"end_time\": \"3:45PM\",\n        \"meeting_duration\": 45\n    }\n    mission_district_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"7:15PM\",\n        \"end_time\": \"8:30PM\",\n        \"meeting_duration\": 75\n    }\n    bayview_to_sunset_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 23,\n        \"start_time\": \"5:00PM\",\n        \"end_time\": \"8:45PM\",\n        \"meeting_duration\": 60\n    }\n    union_square_to_marina_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 18,\n        \"start_time\": \"9:15AM\",\n        \"end_time\": \"4:15PM\",\n        \"meeting_duration\": 45\n    }\n    presidio_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 21,\n        \"start_time\": \"4:30PM\",\n        \"end_time\": \"7:30PM\",\n        \"meeting_duration\": 105\n    }\n    north_beach_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 22,\n        \"start_time\": \"11:00AM\",\n        \"end_time\": \"12:45PM\",\n        \"meeting_duration\": 90\n    }\n    \n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_sunset_district[\"arrival_time\"], richmond_district_to_sunset_district[\"start_time\"], richmond_district_to_sunset_district[\"end_time\"], richmond_district_to_sunset_district[\"travel_time\"], richmond_district_to_sunset_district[\"meeting_duration\"])\n    mission_district_schedule = compute_meeting_schedule(mission_district_to_chinatown[\"arrival_time\"], mission_district_to_chinatown[\"start_time\"], mission_district_to_chinatown[\"end_time\"], mission_district_to_chinatown[\"travel_time\"], mission_district_to_chinatown[\"meeting_duration\"])\n    bayview_schedule = compute_meeting_schedule(bayview_to_sunset_district[\"arrival_time\"], bayview_to_sunset_district[\"start_time\"], bayview_to_sunset_district[\"end_time\"], bayview_to_sunset_district[\"travel_time\"], bayview_to_sunset_district[\"meeting_duration\"])\n    union_square_schedule = compute_meeting_schedule(union_square_to_marina_district[\"arrival_time\"], union_square_to_marina_district[\"start_time\"], union_square_to_marina_district[\"end_time\"], union_square_to_marina_district[\"travel_time\"], union_square_to_marina_district[\"meeting_duration\"])\n    presidio_schedule = compute_meeting_schedule(presidio_to_the_castro[\"arrival_time\"], presidio_to_the_castro[\"start_time\"], presidio_to_the_castro[\"end_time\"], presidio_to_the_castro[\"travel_time\"], presidio_to_the_castro[\"meeting_duration\"])\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_bayview[\"arrival_time\"], north_beach_to_bayview[\"start_time\"], north_beach_to_bayview[\"end_time\"], north_beach_to_bayview[\"travel_time\"], north_beach_to_bayview[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(richmond_district_schedule + mission_district_schedule + bayview_schedule + union_square_schedule + presidio_schedule + north_beach_schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time})\n    \n    # Travel to Steven's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Presidio\"\n    })\n    \n    # Wait until Steven is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Presidio\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Steven\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Mission District to The Castro\n    mission_district_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"8:30AM\",\n        \"end_time\": \"3:15PM\",\n        \"meeting_duration\": 90\n    }\n    mission_district_schedule = compute_meeting_schedule(mission_district_to_the_castro[\"arrival_time\"], mission_district_to_the_castro[\"start_time\"], mission_district_to_the_castro[\"end_time\"], mission_district_to_the_castro[\"travel_time\"], mission_district_to_the_castro[\"meeting_duration\"])\n    schedule.extend(mission_district_schedule)\n    \n    # Russian Hill to Union Square\n    russian_hill_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"8:45PM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 15\n    }\n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_union_square[\"arrival_time\"], russian_hill_to_union_square[\"start_time\"], russian_hill_to_union_square[\"end_time\"], russian_hill_to_union_square[\"travel_time\"], russian_hill_to_union_square[\"meeting_duration\"])\n    schedule.extend(russian_hill_schedule)\n    \n    # Embarcadero to Golden Gate Park\n    embarcadero_to_golden_gate_park = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 25,\n        \"start_time\": \"6:30PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 60\n    }\n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_golden_gate_park[\"arrival_time\"], embarcadero_to_golden_gate_park[\"start_time\"], embarcadero_to_golden_gate_park[\"end_time\"], embarcadero_to_golden_gate_park[\"travel_time\"], embarcadero_to_golden_gate_park[\"meeting_duration\"])\n    schedule.extend(embarcadero_schedule)\n    \n    # Sunset District to Presidio\n    sunset_district_to_presidio = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"7:00AM\",\n        \"end_time\": \"2:45PM\",\n        \"meeting_duration\": 45\n    }\n    sunset_district_schedule = compute_meeting_schedule(sunset_district_to_presidio[\"arrival_time\"], sunset_district_to_presidio[\"start_time\"], sunset_district_to_presidio[\"end_time\"], sunset_district_to_presidio[\"travel_time\"], sunset_district_to_presidio[\"meeting_duration\"])\n    schedule.extend(sunset_district_schedule)\n    \n    # Sunset District to Nob Hill\n    sunset_district_to_nob_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 27,\n        \"start_time\": \"9:00AM\",\n        \"end_time\": \"6:15PM\",\n        \"meeting_duration\": 30\n    }\n    sunset_district_schedule = compute_meeting_schedule(sunset_district_to_nob_hill[\"arrival_time\"], sunset_district_to_nob_hill[\"start_time\"], sunset_district_to_nob_hill[\"end_time\"], sunset_district_to_nob_hill[\"travel_time\"], sunset_district_to_nob_hill[\"meeting_duration\"])\n    schedule.extend(sunset_district_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    russian_hill_to_presidio = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 14,\n        \"start_time\": \"8:30AM\",\n        \"end_time\": \"10:45AM\",\n        \"meeting_duration\": 105\n    }\n    mission_district_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"8:30AM\",\n        \"end_time\": \"3:15PM\",\n        \"meeting_duration\": 90\n    }\n    russian_hill_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"8:45PM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 15\n    }\n    embarcadero_to_golden_gate_park = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 25,\n        \"start_time\": \"6:30PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 60\n    }\n    sunset_district_to_presidio = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"7:00AM\",\n        \"end_time\": \"2:45PM\",\n        \"meeting_duration\": 45\n    }\n    sunset_district_to_nob_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 27,\n        \"start_time\": \"9:00AM\",\n        \"end_time\": \"6:15PM\",\n        \"meeting_duration\": 30\n    }\n    \n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_presidio[\"arrival_time\"], russian_hill_to_presidio[\"start_time\"], russian_hill_to_presidio[\"end_time\"], russian_hill_to_presidio[\"travel_time\"], russian_hill_to_presidio[\"meeting_duration\"])\n    mission_district_schedule = compute_meeting_schedule(mission_district_to_the_castro[\"arrival_time\"], mission_district_to_the_castro[\"start_time\"], mission_district_to_the_castro[\"end_time\"], mission_district_to_the_castro[\"travel_time\"], mission_district_to_the_castro[\"meeting_duration\"])\n    russian_hill_schedule_2 = compute_meeting_schedule(russian_hill_to_union_square[\"arrival_time\"], russian_hill_to_union_square[\"start_time\"], russian_hill_to_union_square[\"end_time\"], russian_hill_to_union_square[\"travel_time\"], russian_hill_to_union_square[\"meeting_duration\"])\n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_golden_gate_park[\"arrival_time\"], embarcadero_to_golden_gate_park[\"start_time\"], embarcadero_to_golden_gate_park[\"end_time\"], embarcadero_to_golden_gate_park[\"travel_time\"], embarcadero_to_golden_gate_park[\"meeting_duration\"])\n    sunset_district_schedule = compute_meeting_schedule(sunset_district_to_presidio[\"arrival_time\"], sunset_district_to_presidio[\"start_time\"], sunset_district_to_presidio[\"end_time\"], sunset_district_to_presidio[\"travel_time\"], sunset_district_to_presidio[\"meeting_duration\"])\n    sunset_district_schedule_2 = compute_meeting_schedule(sunset_district_to_nob_hill[\"arrival_time\"], sunset_district_to_nob_hill[\"start_time\"], sunset_district_to_nob_hill[\"end_time\"], sunset_district_to_nob_hill[\"travel_time\"], sunset_district_to_nob_hill[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(russian_hill_schedule + mission_district_schedule + russian_hill_schedule_2 + embarcadero_schedule + sunset_district_schedule + sunset_district_schedule_2, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time})\n    \n    # Travel to Rebecca's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Wait until Rebecca is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Alamo Square\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Rebecca\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Fisherman's Wharf to Mission District\n    fishermans_wharf_to_mission_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 22,\n        \"start_time\": \"12:00PM\",\n        \"end_time\": \"2:15PM\",\n        \"meeting_duration\": 75\n    }\n    fishermans_wharf_schedule = compute_meeting_schedule(fishermans_wharf_to_mission_district[\"arrival_time\"], fishermans_wharf_to_mission_district[\"start_time\"], fishermans_wharf_to_mission_district[\"end_time\"], fishermans_wharf_to_mission_district[\"travel_time\"], fishermans_wharf_to_mission_district[\"meeting_duration\"])\n    schedule.extend(fishermans_wharf_schedule)\n    \n    # Golden Gate Park to Embarcadero\n    golden_gate_park_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 25,\n        \"start_time\": \"8:30PM\",\n        \"end_time\": \"9:15PM\",\n        \"meeting_duration\": 30\n    }\n    golden_gate_park_schedule = compute_meeting_schedule(golden_gate_park_to_embarcadero[\"arrival_time\"], golden_gate_park_to_embarcadero[\"start_time\"], golden_gate_park_to_embarcadero[\"end_time\"], golden_gate_park_to_embarcadero[\"travel_time\"], golden_gate_park_to_embarcadero[\"meeting_duration\"])\n    schedule.extend(golden_gate_park_schedule)\n    \n    # Pacific Heights to The Castro\n    pacific_heights_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"3:15PM\",\n        \"end_time\": \"6:15PM\",\n        \"meeting_duration\": 105\n    }\n    pacific_heights_schedule = compute_meeting_schedule(pacific_heights_to_the_castro[\"arrival_time\"], pacific_heights_to_the_castro[\"start_time\"], pacific_heights_to_the_castro[\"end_time\"], pacific_heights_to_the_castro[\"travel_time\"], pacific_heights_to_the_castro[\"meeting_duration\"])\n    schedule.extend(pacific_heights_schedule)\n    \n    # North Beach to Financial District\n    north_beach_to_financial_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"8:15AM\",\n        \"end_time\": \"10:30AM\",\n        \"meeting_duration\": 45\n    }\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_financial_district[\"arrival_time\"], north_beach_to_financial_district[\"start_time\"], north_beach_to_financial_district[\"end_time\"], north_beach_to_financial_district[\"travel_time\"], north_beach_to_financial_district[\"meeting_duration\"])\n    schedule.extend(north_beach_schedule)\n    \n    # Chinatown to Richmond District\n    chinatown_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"6:00PM\",\n        \"end_time\": \"9:00PM\",\n        \"meeting_duration\": 75\n    }\n    chinatown_schedule = compute_meeting_schedule(chinatown_to_richmond_district[\"arrival_time\"], chinatown_to_richmond_district[\"start_time\"], chinatown_to_richmond_district[\"end_time\"], chinatown_to_richmond_district[\"travel_time\"], chinatown_to_richmond_district[\"meeting_duration\"])\n    schedule.extend(chinatown_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    nob_hill_to_alamo_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 11,\n        \"start_time\": \"4:00PM\",\n        \"end_time\": \"8:30PM\",\n        \"meeting_duration\": 15\n    }\n    fishermans_wharf_to_mission_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 22,\n        \"start_time\": \"12:00PM\",\n        \"end_time\": \"2:15PM\",\n        \"meeting_duration\": 75\n    }\n    golden_gate_park_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 25,\n        \"start_time\": \"8:30PM\",\n        \"end_time\": \"9:15PM\",\n        \"meeting_duration\": 30\n    }\n    pacific_heights_to_the_castro = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 16,\n        \"start_time\": \"3:15PM\",\n        \"end_time\": \"6:15PM\",\n        \"meeting_duration\": 105\n    }\n    north_beach_to_financial_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"8:15AM\",\n        \"end_time\": \"10:30AM\",\n        \"meeting_duration\": 45\n    }\n    chinatown_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"6:00PM\",\n        \"end_time\": \"9:00PM\",\n        \"meeting_duration\": 75\n    }\n    \n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_alamo_square[\"arrival_time\"], nob_hill_to_alamo_square[\"start_time\"], nob_hill_to_alamo_square[\"end_time\"], nob_hill_to_alamo_square[\"travel_time\"], nob_hill_to_alamo_square[\"meeting_duration\"])\n    fishermans_wharf_schedule = compute_meeting_schedule(fishermans_wharf_to_mission_district[\"arrival_time\"], fishermans_wharf_to_mission_district[\"start_time\"], fishermans_wharf_to_mission_district[\"end_time\"], fishermans_wharf_to_mission_district[\"travel_time\"], fishermans_wharf_to_mission_district[\"meeting_duration\"])\n    golden_gate_park_schedule = compute_meeting_schedule(golden_gate_park_to_embarcadero[\"arrival_time\"], golden_gate_park_to_embarcadero[\"start_time\"], golden_gate_park_to_embarcadero[\"end_time\"], golden_gate_park_to_embarcadero[\"travel_time\"], golden_gate_park_to_embarcadero[\"meeting_duration\"])\n    pacific_heights_schedule = compute_meeting_schedule(pacific_heights_to_the_castro[\"arrival_time\"], pacific_heights_to_the_castro[\"start_time\"], pacific_heights_to_the_castro[\"end_time\"], pacific_heights_to_the_castro[\"travel_time\"], pacific_heights_to_the_castro[\"meeting_duration\"])\n    north_beach_schedule = compute_meeting_schedule(north_beach_to_financial_district[\"arrival_time\"], north_beach_to_financial_district[\"start_time\"], north_beach_to_financial_district[\"end_time\"], north_beach_to_financial_district[\"travel_time\"], north_beach_to_financial_district[\"meeting_duration\"])\n    chinatown_schedule = compute_meeting_schedule(chinatown_to_richmond_district[\"arrival_time\"], chinatown_to_richmond_district[\"start_time\"], chinatown_to_richmond_district[\"end_time\"], chinatown_to_richmond_district[\"travel_time\"], chinatown_to_richmond_district[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(nob_hill_schedule + fishermans_wharf_schedule + golden_gate_park_schedule + pacific_heights_schedule + north_beach_schedule + chinatown_schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time})\n    \n    # Travel to Betty's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Fisherman's Wharf\"\n    })\n    \n    # Meet Betty\n    meet_time = datetime.strptime(start_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Richmond District to Chinatown\n    richmond_district_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"1:00PM\",\n        \"end_time\": \"7:45PM\",\n        \"meeting_duration\": 60\n    }\n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_chinatown[\"arrival_time\"], richmond_district_to_chinatown[\"start_time\"], richmond_district_to_chinatown[\"end_time\"], richmond_district_to_chinatown[\"travel_time\"], richmond_district_to_chinatown[\"meeting_duration\"])\n    schedule.extend(richmond_district_schedule)\n    \n    # Mission District to Bayview\n    mission_district_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 15,\n        \"start_time\": \"7:30PM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 105\n    }\n    mission_district_schedule = compute_meeting_schedule(mission_district_to_bayview[\"arrival_time\"], mission_district_to_bayview[\"start_time\"], mission_district_to_bayview[\"end_time\"], mission_district_to_bayview[\"travel_time\"], mission_district_to_bayview[\"meeting_duration\"])\n    schedule.extend(mission_district_schedule)\n    \n    # Fisherman's Wharf to Embarcadero\n    fishermans_wharf_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"1:15PM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 45\n    }\n    fishermans_wharf_schedule = compute_meeting_schedule(fishermans_wharf_to_embarcadero[\"arrival_time\"], fishermans_wharf_to_embarcadero[\"start_time\"], fishermans_wharf_to_embarcadero[\"end_time\"], fishermans_wharf_to_embarcadero[\"travel_time\"], fishermans_wharf_to_embarcadero[\"meeting_duration\"])\n    schedule.extend(fishermans_wharf_schedule)\n    \n    # Nob Hill to Union Square\n    nob_hill_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"10:15AM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 45\n    }\n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_union_square[\"arrival_time\"], nob_hill_to_union_square[\"start_time\"], nob_hill_to_union_square[\"end_time\"], nob_hill_to_union_square[\"travel_time\"], nob_hill_to_union_square[\"meeting_duration\"])\n    schedule.extend(nob_hill_schedule)\n    \n    # Alamo Square to Richmond District\n    alamo_square_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 12,\n        \"start_time\": \"8:45PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 45\n    }\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_richmond_district[\"arrival_time\"], alamo_square_to_richmond_district[\"start_time\"], alamo_square_to_richmond_district[\"end_time\"], alamo_square_to_richmond_district[\"travel_time\"], alamo_square_to_richmond_district[\"meeting_duration\"])\n    schedule.extend(alamo_square_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    russian_hill_to_fishermans_wharf = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"7:45AM\",\n        \"end_time\": \"2:00PM\",\n        \"meeting_duration\": 105\n    }\n    richmond_district_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 20,\n        \"start_time\": \"1:00PM\",\n        \"end_time\": \"7:45PM\",\n        \"meeting_duration\": 60\n    }\n    mission_district_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 15,\n        \"start_time\": \"7:30PM\",\n        \"end_time\": \"9:45PM\",\n        \"meeting_duration\": 105\n    }\n    fishermans_wharf_to_embarcadero = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 8,\n        \"start_time\": \"1:15PM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 45\n    }\n    nob_hill_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"10:15AM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 45\n    }\n    alamo_square_to_richmond_district = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 12,\n        \"start_time\": \"8:45PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 45\n    }\n    \n    russian_hill_schedule = compute_meeting_schedule(russian_hill_to_fishermans_wharf[\"arrival_time\"], russian_hill_to_fishermans_wharf[\"start_time\"], russian_hill_to_fishermans_wharf[\"end_time\"], russian_hill_to_fishermans_wharf[\"travel_time\"], russian_hill_to_fishermans_wharf[\"meeting_duration\"])\n    richmond_district_schedule = compute_meeting_schedule(richmond_district_to_chinatown[\"arrival_time\"], richmond_district_to_chinatown[\"start_time\"], richmond_district_to_chinatown[\"end_time\"], richmond_district_to_chinatown[\"travel_time\"], richmond_district_to_chinatown[\"meeting_duration\"])\n    mission_district_schedule = compute_meeting_schedule(mission_district_to_bayview[\"arrival_time\"], mission_district_to_bayview[\"start_time\"], mission_district_to_bayview[\"end_time\"], mission_district_to_bayview[\"travel_time\"], mission_district_to_bayview[\"meeting_duration\"])\n    fishermans_wharf_schedule = compute_meeting_schedule(fishermans_wharf_to_embarcadero[\"arrival_time\"], fishermans_wharf_to_embarcadero[\"start_time\"], fishermans_wharf_to_embarcadero[\"end_time\"], fishermans_wharf_to_embarcadero[\"travel_time\"], fishermans_wharf_to_embarcadero[\"meeting_duration\"])\n    nob_hill_schedule = compute_meeting_schedule(nob_hill_to_union_square[\"arrival_time\"], nob_hill_to_union_square[\"start_time\"], nob_hill_to_union_square[\"end_time\"], nob_hill_to_union_square[\"travel_time\"], nob_hill_to_union_square[\"meeting_duration\"])\n    alamo_square_schedule = compute_meeting_schedule(alamo_square_to_richmond_district[\"arrival_time\"], alamo_square_to_richmond_district[\"start_time\"], alamo_square_to_richmond_district[\"end_time\"], alamo_square_to_richmond_district[\"travel_time\"], alamo_square_to_richmond_district[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(russian_hill_schedule + richmond_district_schedule + mission_district_schedule + fishermans_wharf_schedule + nob_hill_schedule + alamo_square_schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(arrival_time, start_time, end_time, travel_time, meeting_duration):\n    schedule = []\n    \n    # Start at arrival time\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n    \n    # Travel to Linda's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": \"Bayview\"\n    })\n    \n    # Wait until Linda is available\n    available_time = datetime.strptime(start_time, \"%I:%M%p\")\n    wait_time = available_time - datetime.strptime(arrival_time, \"%I:%M%p\")\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Bayview\",\n        \"time\": arrival_time,\n        \"duration\": wait_time.seconds // 60\n    })\n    \n    # Meet Linda\n    meet_time = available_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel back to Marina District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": meet_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n    \n    # Chinatown to Union Square\n    chinatown_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"3:00PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 105\n    }\n    chinatown_schedule = compute_meeting_schedule(chinatown_to_union_square[\"arrival_time\"], chinatown_to_union_square[\"start_time\"], chinatown_to_union_square[\"end_time\"], chinatown_to_union_square[\"travel_time\"], chinatown_to_union_square[\"meeting_duration\"])\n    schedule.extend(chinatown_schedule)\n    \n    # Embarcadero to Nob Hill\n    embarcadero_to_nob_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"7:30PM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 60\n    }\n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_nob_hill[\"arrival_time\"], embarcadero_to_nob_hill[\"start_time\"], embarcadero_to_nob_hill[\"end_time\"], embarcadero_to_nob_hill[\"travel_time\"], embarcadero_to_nob_hill[\"meeting_duration\"])\n    schedule.extend(embarcadero_schedule)\n    \n    # Marina District to Nob Hill\n    marina_district_to_nob_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 12,\n        \"start_time\": \"5:15PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 120\n    }\n    marina_district_schedule = compute_meeting_schedule(marina_district_to_nob_hill[\"arrival_time\"], marina_district_to_nob_hill[\"start_time\"], marina_district_to_nob_hill[\"end_time\"], marina_district_to_nob_hill[\"travel_time\"], marina_district_to_nob_hill[\"meeting_duration\"])\n    schedule.extend(marina_district_schedule)\n    \n    # Presidio to Chinatown\n    presidio_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 21,\n        \"start_time\": \"2:30PM\",\n        \"end_time\": \"6:00PM\",\n        \"meeting_duration\": 30\n    }\n    presidio_schedule = compute_meeting_schedule(presidio_to_chinatown[\"arrival_time\"], presidio_to_chinatown[\"start_time\"], presidio_to_chinatown[\"end_time\"], presidio_to_chinatown[\"travel_time\"], presidio_to_chinatown[\"meeting_duration\"])\n    schedule.extend(presidio_schedule)\n    \n    # Fisherman's Wharf to Union Square\n    fishermans_wharf_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"1:15PM\",\n        \"end_time\": \"7:15PM\",\n        \"meeting_duration\": 15\n    }\n    fishermans_wharf_schedule = compute_meeting_schedule(fishermans_wharf_to_union_square[\"arrival_time\"], fishermans_wharf_to_union_square[\"start_time\"], fishermans_wharf_to_union_square[\"end_time\"], fishermans_wharf_to_union_square[\"travel_time\"], fishermans_wharf_to_union_square[\"meeting_duration\"])\n    schedule.extend(fishermans_wharf_schedule)\n    \n    json_schedule = json.dumps(schedule, indent=4)\n    print(json_schedule)\n\ndef main():\n    marina_district_to_bayview = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 27,\n        \"start_time\": \"10:15AM\",\n        \"end_time\": \"1:00PM\",\n        \"meeting_duration\": 45\n    }\n    chinatown_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 7,\n        \"start_time\": \"3:00PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 105\n    }\n    embarcadero_to_nob_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 10,\n        \"start_time\": \"7:30PM\",\n        \"end_time\": \"10:00PM\",\n        \"meeting_duration\": 60\n    }\n    marina_district_to_nob_hill = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 12,\n        \"start_time\": \"5:15PM\",\n        \"end_time\": \"9:30PM\",\n        \"meeting_duration\": 120\n    }\n    presidio_to_chinatown = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 21,\n        \"start_time\": \"2:30PM\",\n        \"end_time\": \"6:00PM\",\n        \"meeting_duration\": 30\n    }\n    fishermans_wharf_to_union_square = {\n        \"arrival_time\": \"9:00AM\",\n        \"travel_time\": 13,\n        \"start_time\": \"1:15PM\",\n        \"end_time\": \"7:15PM\",\n        \"meeting_duration\": 15\n    }\n    \n    marina_district_schedule = compute_meeting_schedule(marina_district_to_bayview[\"arrival_time\"], marina_district_to_bayview[\"start_time\"], marina_district_to_bayview[\"end_time\"], marina_district_to_bayview[\"travel_time\"], marina_district_to_bayview[\"meeting_duration\"])\n    chinatown_schedule = compute_meeting_schedule(chinatown_to_union_square[\"arrival_time\"], chinatown_to_union_square[\"start_time\"], chinatown_to_union_square[\"end_time\"], chinatown_to_union_square[\"travel_time\"], chinatown_to_union_square[\"meeting_duration\"])\n    embarcadero_schedule = compute_meeting_schedule(embarcadero_to_nob_hill[\"arrival_time\"], embarcadero_to_nob_hill[\"start_time\"], embarcadero_to_nob_hill[\"end_time\"], embarcadero_to_nob_hill[\"travel_time\"], embarcadero_to_nob_hill[\"meeting_duration\"])\n    marina_district_schedule_2 = compute_meeting_schedule(marina_district_to_nob_hill[\"arrival_time\"], marina_district_to_nob_hill[\"start_time\"], marina_district_to_nob_hill[\"end_time\"], marina_district_to_nob_hill[\"travel_time\"], marina_district_to_nob_hill[\"meeting_duration\"])\n    presidio_schedule = compute_meeting_schedule(presidio_to_chinatown[\"arrival_time\"], presidio_to_chinatown[\"start_time\"], presidio_to_chinatown[\"end_time\"], presidio_to_chinatown[\"travel_time\"], presidio_to_chinatown[\"meeting_duration\"])\n    fishermans_wharf_schedule = compute_meeting_schedule(fishermans_wharf_to_union_square[\"arrival_time\"], fishermans_wharf_to_union_square[\"start_time\"], fishermans_wharf_to_union_square[\"end_time\"], fishermans_wharf_to_union_square[\"travel_time\"], fishermans_wharf_to_union_square[\"meeting_duration\"])\n    \n    json_schedule = json.dumps(marina_district_schedule + chinatown_schedule + embarcadero_schedule + marina_district_schedule_2 + presidio_schedule + fishermans_wharf_schedule, indent=4)\n    print(json_schedule)\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ]
}