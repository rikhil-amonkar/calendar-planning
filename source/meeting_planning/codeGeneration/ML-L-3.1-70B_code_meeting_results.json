{
    "0shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "12:49PM",
                    "duration": 19,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate travel time from friend\n    travel_from_friend_minutes = meeting_end_minutes + travel_time_from_friend\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_time_from_friend, \n                     \"time\": minutes_to_time(travel_from_friend_minutes), \"to\": arrival_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Marina District'\n    friend_location = 'Mission District'\n    friend_available_time = ['10:30AM', '1:30PM']\n    travel_time_to_friend = 20\n    travel_time_from_friend = 19\n    meeting_duration = 120\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Richmond District'\n    friend_location = 'Financial District'\n    friend_available_time = ['5:15PM', '9:45PM']\n    travel_time_to_friend = 22\n    travel_time_from_friend = 21\n    meeting_duration = 60\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_1",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Haight-Ashbury'\n    friend_location = 'Sunset District'\n    friend_available_time = ['3:15PM', '8:15PM']\n    travel_time_to_friend = 15\n    travel_time_from_friend = 15\n    meeting_duration = 90\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Bayview'\n    friend_location = 'Golden Gate Park'\n    friend_available_time = ['8:00AM', '11:30AM']\n    travel_time_to_friend = 22\n    travel_time_from_friend = 23\n    meeting_duration = 90\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Presidio'\n    friend_location = 'Marina District'\n    friend_available_time = ['9:15AM', '5:45PM']\n    travel_time_to_friend = 10\n    travel_time_from_friend = 10\n    meeting_duration = 60\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_4",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Nob Hill'\n    friend_location = 'The Castro'\n    friend_available_time = ['12:15PM', '10:00PM']\n    travel_time_to_friend = 17\n    travel_time_from_friend = 16\n    meeting_duration = 75\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_5",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "2:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Fisherman\\'s Wharf'\n    friend_location = 'Nob Hill'\n    friend_available_time = ['2:15PM', '7:45PM']\n    travel_time_to_friend = 11\n    travel_time_from_friend = 11\n    meeting_duration = 90\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Richmond District'\n    friend_location = 'North Beach'\n    friend_available_time = ['3:15PM', '5:15PM']\n    travel_time_to_friend = 17\n    travel_time_from_friend = 18\n    meeting_duration = 75\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Chinatown'\n    friend_location = 'Marina District'\n    friend_available_time = ['8:00AM', '3:00PM']\n    travel_time_to_friend = 12\n    travel_time_from_friend = 16\n    meeting_duration = 105\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Union Square'\n    friend_location = 'Nob Hill'\n    friend_available_time = ['12:00PM', '4:15PM']\n    travel_time_to_friend = 9\n    travel_time_from_friend = 7\n    meeting_duration = 75\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_9",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    arrival_time = '9:00AM'\n    arrival_location = 'Golden Gate Park'\n    friend_location = 'Marina District'\n    friend_available_time = ['10:15AM', '1:30PM']\n    travel_time_to_friend = 16\n    travel_time_from_friend = 18\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                                  travel_time_to_friend, travel_time_from_friend, meeting_duration)\n    \n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_10",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:42PM",
                    "duration": 27,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, carol_start_time, carol_end_time, meeting_duration, \n                       travel_time_to_carol, travel_time_from_carol):\n    # Initialize schedule\n    schedule = []\n\n    # Start at Nob Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to Sunset District\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_carol)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_to_carol,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n\n    # Wait for Carol\n    wait_end_time = max(travel_end_time, carol_start_time)\n    if travel_end_time < carol_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet Carol\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Nob Hill\n    if meet_end_time < carol_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_carol)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time_from_carol,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Nob Hill\"\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    carol_start_time = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    carol_end_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_carol = 25\n    travel_time_from_carol = 27\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, carol_start_time, carol_end_time, \n                                  meeting_duration, travel_time_to_carol, travel_time_from_carol)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:45PM",
                    "duration": 15,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    travel_time_to_friend = 16\n    travel_time_from_friend = 15\n    start_location = \"North Beach\"\n    friend_location = \"Alamo Square\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "8:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "8:17PM",
                    "duration": 17,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 18\n    travel_time_from_friend = 17\n    start_location = \"Presidio\"\n    friend_location = \"North Beach\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:00PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 120\n    travel_time_to_friend = 11\n    travel_time_from_friend = 12\n    start_location = \"Nob Hill\"\n    friend_location = \"Marina District\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:21AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "2:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "2:49PM",
                    "duration": 19,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    travel_time_to_friend = 21\n    travel_time_from_friend = 19\n    start_location = \"Russian Hill\"\n    friend_location = \"Golden Gate Park\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:00PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "5:09PM",
                    "duration": 9,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 7\n    travel_time_from_friend = 9\n    start_location = \"Chinatown\"\n    friend_location = \"Russian Hill\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:45PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "2:02PM",
                    "duration": 17,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_time_to_friend = 16\n    travel_time_from_friend = 17\n    start_location = \"Alamo Square\"\n    friend_location = \"Sunset District\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "9:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:54PM",
                    "duration": 9,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 11\n    travel_time_from_friend = 9\n    start_location = \"Marina District\"\n    friend_location = \"Richmond District\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "8:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "8:45PM",
                    "duration": 15,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    travel_time_to_friend = 16\n    travel_time_from_friend = 15\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Pacific Heights\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "12:51PM",
                    "duration": 6,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 8\n    travel_time_from_friend = 6\n    start_location = \"Chinatown\"\n    friend_location = \"Nob Hill\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:42AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:53AM",
                    "duration": 11,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    travel_time_to_friend = 12\n    travel_time_from_friend = 11\n    start_location = \"Mission District\"\n    friend_location = \"Haight-Ashbury\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:00PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "1:24PM",
                    "duration": 24,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 22\n    travel_time_from_friend = 24\n    start_location = \"Presidio\"\n    friend_location = \"Union Square\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "6:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "7:08PM",
                    "duration": 23,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 23\n    travel_time_from_friend = 23\n    start_location = \"Bayview\"\n    friend_location = \"Russian Hill\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:30AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "11:48AM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    travel_time_to_friend = 17\n    travel_time_from_friend = 18\n    start_location = \"Nob Hill\"\n    friend_location = \"Presidio\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "5:45PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "6:08PM",
                    "duration": 23,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 23\n    travel_time_from_friend = 23\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Chinatown\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "3:00PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "3:07PM",
                    "duration": 7,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 7\n    travel_time_from_friend = 7\n    start_location = \"Richmond District\"\n    friend_location = \"Presidio\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:15PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "7:21PM",
                    "duration": 6,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_time_to_friend = 7\n    travel_time_from_friend = 6\n    start_location = \"Marina District\"\n    friend_location = \"Pacific Heights\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "7:22PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 7\n    travel_time_from_friend = 7\n    start_location = \"Union Square\"\n    friend_location = \"Chinatown\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "8:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00PM",
                    "duration": 15,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 15\n    travel_time_from_friend = 15\n    start_location = \"Sunset District\"\n    friend_location = \"Haight-Ashbury\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "11:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "11:48AM",
                    "duration": 18,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    meeting_duration = 120\n    travel_time_to_friend = 17\n    travel_time_from_friend = 18\n    start_location = \"Richmond District\"\n    friend_location = \"North Beach\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:26AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:37AM",
                    "duration": 11,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_time_to_friend = 11\n    travel_time_from_friend = 11\n    start_location = \"Nob Hill\"\n    friend_location = \"Alamo Square\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "10:56AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "11:09AM",
                    "duration": 13,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 11\n    travel_time_from_friend = 13\n    start_location = \"The Castro\"\n    friend_location = \"Golden Gate Park\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "12:45PM",
                    "duration": 26,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Sunset District\"\n    meeting_time = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    meeting_location = \"Union Square\"\n    meeting_duration = 15\n    travel_time_to_meeting = 30\n    travel_time_from_meeting = 26\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "2:00PM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    meeting_location = \"Pacific Heights\"\n    meeting_duration = 105\n    travel_time_to_meeting = 23\n    travel_time_from_meeting = 22\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "10:30AM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_location = \"Chinatown\"\n    meeting_duration = 90\n    travel_time_to_meeting = 18\n    travel_time_from_meeting = 22\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "2:30PM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Marina District\"\n    meeting_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    meeting_location = \"Embarcadero\"\n    meeting_duration = 60\n    travel_time_to_meeting = 14\n    travel_time_from_meeting = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "1:45PM",
                    "duration": 19,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    meeting_location = \"Financial District\"\n    meeting_duration = 90\n    travel_time_to_meeting = 19\n    travel_time_from_meeting = 19\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "10:30PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Union Square\"\n    meeting_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    meeting_location = \"North Beach\"\n    meeting_duration = 45\n    travel_time_to_meeting = 10\n    travel_time_from_meeting = 7\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "6:45PM",
                    "duration": 11,
                    "to": "Fisherman's Wharf"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Fisherman's Wharf\"\n    meeting_time = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 120\n    travel_time_to_meeting = 11\n    travel_time_from_meeting = 11\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:30PM",
                    "duration": 17,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"The Castro\"\n    meeting_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_location = \"Sunset District\"\n    meeting_duration = 75\n    travel_time_to_meeting = 17\n    travel_time_from_meeting = 17\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:45AM",
                    "duration": 19,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    meeting_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_location = \"Haight-Ashbury\"\n    meeting_duration = 45\n    travel_time_to_meeting = 18\n    travel_time_from_meeting = 19\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:30PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    meeting_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    meeting_location = \"Presidio\"\n    meeting_duration = 30\n    travel_time_to_meeting = 17\n    travel_time_from_meeting = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:15AM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Marina District\"\n    meeting_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_location = \"Chinatown\"\n    meeting_duration = 15\n    travel_time_to_meeting = 16\n    travel_time_from_meeting = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "8:45AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "10:30AM",
                    "duration": 12,
                    "to": "Pacific Heights"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Pacific Heights\"\n    meeting_time = datetime.strptime(\"8:45AM\", \"%I:%M%p\")\n    meeting_location = \"Fisherman's Wharf\"\n    meeting_duration = 105\n    travel_time_to_meeting = 13\n    travel_time_from_meeting = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:45PM",
                    "duration": 15,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    meeting_time = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    meeting_location = \"Alamo Square\"\n    meeting_duration = 15\n    travel_time_to_meeting = 16\n    travel_time_from_meeting = 15\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "6:00PM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Haight-Ashbury\"\n    meeting_time = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    meeting_location = \"North Beach\"\n    meeting_duration = 90\n    travel_time_to_meeting = 19\n    travel_time_from_meeting = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:45AM",
                    "duration": 14,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    meeting_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 15\n    travel_time_to_meeting = 17\n    travel_time_from_meeting = 14\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting can happen immediately after arrival\n    if arrival_time + timedelta(minutes=travel_time) <= meeting_time:\n        # Add travel to meeting location\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_time,\n            \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n            \"to\": meeting_location\n        })\n        \n        # Add meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_duration,\n            \"time\": meeting_time.strftime(\"%I:%M%p\")\n        })\n    else:\n        # Add travel to meeting location\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_time,\n            \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n            \"to\": meeting_location\n        })\n        \n        # Calculate wait time\n        wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n        wait_minutes = wait_time.total_seconds() / 60\n        \n        # Add wait\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n        })\n        \n        # Add meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_duration,\n            \"time\": meeting_time.strftime(\"%I:%M%p\")\n        })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Financial District\"\n    meeting_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\") - timedelta(minutes=15)\n    meeting_location = \"Union Square\"\n    meeting_duration = 15\n    travel_time = 9\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:26AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    meeting_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_location = \"Bayview\"\n    meeting_duration = 45\n    travel_time = 26\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting can happen immediately after arrival\n    if arrival_time + timedelta(minutes=travel_time) <= meeting_time:\n        # Add travel to meeting location\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_time,\n            \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n            \"to\": meeting_location\n        })\n        \n        # Calculate wait time\n        wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n        wait_minutes = wait_time.total_seconds() / 60\n        \n        # Add wait\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n        })\n        \n        # Add meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_duration,\n            \"time\": meeting_time.strftime(\"%I:%M%p\")\n        })\n    else:\n        # Add travel to meeting location\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_time,\n            \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n            \"to\": meeting_location\n        })\n        \n        # Add meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_duration,\n            \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n        })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    meeting_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 75\n    travel_time = 7\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:45AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"The Castro\"\n    meeting_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\") + timedelta(minutes=105)\n    meeting_location = \"Embarcadero\"\n    meeting_duration = 15\n    travel_time = 22\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Russian Hill\"\n    meeting_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_location = \"Richmond District\"\n    meeting_duration = 45\n    travel_time = 14\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    meeting_time = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_location = \"Alamo Square\"\n    meeting_duration = 120\n    travel_time = 13\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Financial District\"\n    meeting_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_location = \"Mission District\"\n    meeting_duration = 45\n    travel_time = 17\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Financial District\"\n    meeting_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 45\n    travel_time = 8\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Chinatown\"\n    meeting_time = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 45\n    travel_time = 8\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"10:30AM\", \"%I:%M%p\")\n    meeting_location = \"Sunset District\"\n    meeting_duration = 60\n    travel_time = 23\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:15AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"The Castro\"\n    meeting_time = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    meeting_location = \"Financial District\"\n    meeting_duration = 30\n    travel_time = 20\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_location = \"Haight-Ashbury\"\n    meeting_duration = 105\n    travel_time = 19\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Union Square\"\n    meeting_time = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    meeting_location = \"Chinatown\"\n    meeting_duration = 45\n    travel_time = 7\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Golden Gate Park\"\n    meeting_time = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    meeting_location = \"Presidio\"\n    meeting_duration = 90\n    travel_time = 11\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    meeting_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_location = \"Russian Hill\"\n    meeting_duration = 15\n    travel_time = 14\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:31AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    meeting_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_location = \"Bayview\"\n    meeting_duration = 30\n    travel_time = 31\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, margaret_start, margaret_end, travel_duration, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at Nob Hill\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to Pacific Heights\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_time = travel_end\n    \n    # Wait for Margaret\n    wait_end = max(current_time, margaret_start)\n    if current_time < margaret_start:\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet Margaret\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > margaret_end:\n        meet_end = margaret_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    margaret_start = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    margaret_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    travel_duration = 8\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, margaret_start, margaret_end, travel_duration, meeting_duration)\n    \n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    travel_duration = 25\n    meeting_duration = 45\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Embarcadero\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    travel_duration = 17\n    meeting_duration = 120\n    start_location = \"Nob Hill\"\n    friend_location = \"Presidio\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_duration = 26\n    meeting_duration = 105\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Financial District\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"7:45AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    travel_duration = 17\n    meeting_duration = 30\n    start_location = \"Haight-Ashbury\"\n    friend_location = \"Russian Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\n    travel_duration = 7\n    meeting_duration = 90\n    start_location = \"Chinatown\"\n    friend_location = \"Union Square\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    travel_duration = 24\n    meeting_duration = 30\n    start_location = \"Golden Gate Park\"\n    friend_location = \"North Beach\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    travel_duration = 18\n    meeting_duration = 90\n    start_location = \"Haight-Ashbury\"\n    friend_location = \"Bayview\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"9:45AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    travel_duration = 10\n    meeting_duration = 90\n    start_location = \"Pacific Heights\"\n    friend_location = \"Alamo Square\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_duration = 7\n    meeting_duration = 60\n    start_location = \"Russian Hill\"\n    friend_location = \"Pacific Heights\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    travel_duration = 17\n    meeting_duration = 45\n    start_location = \"Richmond District\"\n    friend_location = \"Nob Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"2:45PM\", \"%I:%M%p\")\n    travel_duration = 13\n    meeting_duration = 15\n    start_location = \"Pacific Heights\"\n    friend_location = \"Fisherman's Wharf\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    travel_duration = 16\n    meeting_duration = 60\n    start_location = \"Marina District\"\n    friend_location = \"Haight-Ashbury\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    travel_duration = 9\n    meeting_duration = 30\n    start_location = \"Richmond District\"\n    friend_location = \"Golden Gate Park\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    travel_duration = 19\n    meeting_duration = 105\n    start_location = \"Union Square\"\n    friend_location = \"The Castro\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    travel_duration = 22\n    meeting_duration = 45\n    start_location = \"North Beach\"\n    friend_location = \"Bayview\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_duration = 12\n    meeting_duration = 75\n    start_location = \"Mission District\"\n    friend_location = \"Haight-Ashbury\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    travel_duration = 13\n    meeting_duration = 75\n    start_location = \"Richmond District\"\n    friend_location = \"Alamo Square\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location)\n    \n    print(\"SOLUTION:\")\n    print({\"schedule\": schedule})\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "7:09PM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    ashley_available_from = datetime.strptime('5:45PM', '%I:%M%p')\n    ashley_available_to = datetime.strptime('9:30PM', '%I:%M%p')\n    min_meeting_duration = 75  # minutes\n    travel_time_golden_gate_to_alamo = 10  # minutes\n    travel_time_alamo_to_golden_gate = 9  # minutes\n\n    # Calculate schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Alamo Square\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_golden_gate_to_alamo)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_golden_gate_to_alamo,\n        \"time\": travel_end_time.strftime('%I:%M%p'),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Wait for Ashley\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, ashley_available_from)\n    if wait_start_time < wait_end_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": wait_end_time.strftime('%I:%M%p')\n        })\n\n    # Meet Ashley\n    meet_start_time = wait_end_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), ashley_available_to)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": (meet_end_time - meet_start_time).seconds // 60,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Golden Gate Park\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_alamo_to_golden_gate)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_alamo_to_golden_gate,\n        \"time\": travel_end_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "10:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:41PM",
                    "duration": 11,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    carol_available_from = datetime.strptime('9:45PM', '%I:%M%p')\n    carol_available_to = datetime.strptime('10:30PM', '%I:%M%p')\n    min_meeting_duration = 45  # minutes\n    travel_time_presidio_to_golden_gate = 12  # minutes\n    travel_time_golden_gate_to_presidio = 11  # minutes\n\n    # Calculate schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Golden Gate Park\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_presidio_to_golden_gate)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_presidio_to_golden_gate,\n        \"time\": travel_end_time.strftime('%I:%M%p'),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait for Carol\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, carol_available_from)\n    if wait_start_time < wait_end_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": wait_end_time.strftime('%I:%M%p')\n        })\n\n    # Meet Carol\n    meet_start_time = wait_end_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), carol_available_to)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": (meet_end_time - meet_start_time).seconds // 60,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Presidio\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_golden_gate_to_presidio)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_golden_gate_to_presidio,\n        \"time\": travel_end_time.strftime('%I:%M%p'),\n        \"to\": \"Presidio\"\n    })\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "11:35AM",
                    "duration": 5,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    thomas_available_from = datetime.strptime('11:00AM', '%I:%M%p')\n    thomas_available_to = datetime.strptime('1:00PM', '%I:%M%p')\n    min_meeting_duration = 30  # minutes\n    travel_time_alamo_to_haight = 5  # minutes\n    travel_time_haight_to_alamo = 5  # minutes\n\n    # Calculate schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time.strftime('%I:%M%p')}\n    ]\n\n    # Travel to Haight-Ashbury\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_alamo_to_haight)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_alamo_to_haight,\n        \"time\": travel_end_time.strftime('%I:%M%p'),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Wait for Thomas\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, thomas_available_from)\n    if wait_start_time < wait_end_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": wait_end_time.strftime('%I:%M%p')\n        })\n\n    # Meet Thomas\n    meet_start_time = wait_end_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), thomas_available_to)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": (meet_end_time - meet_start_time).seconds // 60,\n        \"time\": meet_end_time.strftime('%I:%M%p')\n    })\n\n    # Travel back to Alamo Square\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_haight_to_alamo)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_haight_to_alamo,\n        \"time\": travel_end_time.strftime('%I:%M%p'),\n        \"to\": \"Alamo Square\"\n    })\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
            "count": "meeting_planning_example_84",
            "is_correct": false
        }
    ],
    "5shot": [
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Marina District', 'friend_location': 'Alamo Square', \n         'friend_available_time': ['3:45PM', '8:00PM'], 'travel_time_to_friend': 15, 'travel_time_from_friend': 15, \n        'meeting_duration': 75},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Pacific Heights', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['3:15PM', '6:30PM'], 'travel_time_to_friend': 10, 'travel_time_from_friend': 11, \n        'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Haight-Ashbury', 'friend_location': 'North Beach', \n         'friend_available_time': ['11:00AM', '1:15PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 18, \n        'meeting_duration': 75},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Presidio', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['12:45PM', '6:15PM'], 'travel_time_to_friend': 20, 'travel_time_from_friend': 20, \n        'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Nob Hill', 'friend_location': 'Richmond District', \n         'friend_available_time': ['7:00AM', '10:15AM'], 'travel_time_to_friend': 14, 'travel_time_from_friend': 17, \n        'meeting_duration': 120},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Marina District', 'friend_location': 'Mission District', \n         'friend_available_time': ['10:30AM', '1:30PM'], 'travel_time_to_friend': 20, 'travel_time_from_friend': 19, \n        'meeting_duration': 120}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Haight-Ashbury', 'friend_location': 'Chinatown', \n         'friend_available_time': ['2:45PM', '7:00PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 19, \n       'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Marina District', 'friend_location': 'Nob Hill', \n         'friend_available_time': ['7:45AM', '4:30PM'], 'travel_time_to_friend': 12, 'travel_time_from_friend': 11, \n       'meeting_duration': 120},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Mission District', 'friend_location': 'Golden Gate Park', \n         'friend_available_time': ['4:00PM', '7:30PM'], 'travel_time_to_friend': 17, 'travel_time_from_friend': 17, \n       'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Mission District', 'friend_location': 'Bayview', \n         'friend_available_time': ['9:45PM', '10:15PM'], 'travel_time_to_friend': 15, 'travel_time_from_friend': 13, \n       'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Alamo Square', 'friend_location': 'Mission District', \n         'friend_available_time': ['7:45PM', '9:30PM'], 'travel_time_to_friend': 10, 'travel_time_from_friend': 11, \n       'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Richmond District', 'friend_location': 'Financial District', \n         'friend_available_time': ['5:15PM', '9:45PM'], 'travel_time_to_friend': 22, 'travel_time_from_friend': 21, \n       'meeting_duration': 60}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Fisherman\\'s Wharf', 'friend_location': 'Chinatown', \n         'friend_available_time': ['8:15PM', '10:00PM'], 'travel_time_to_friend': 12, 'travel_time_from_friend': 8, \n       'meeting_duration': 90},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Union Square', 'friend_location': 'Nob Hill', \n         'friend_available_time': ['4:15PM', '7:45PM'], 'travel_time_to_friend': 9, 'travel_time_from_friend': 7, \n       'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Marina District', 'friend_location': 'Sunset District', \n         'friend_available_time': ['3:30PM', '5:45PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 21, \n       'meeting_duration': 120},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Mission District', 'friend_location': 'Russian Hill', \n         'friend_available_time': ['1:15PM', '7:00PM'], 'travel_time_to_friend': 15, 'travel_time_from_friend': 16, \n       'meeting_duration': 90},\n        {'arrival_time': '9:00AM', 'arrival_location': 'The Castro', 'friend_location': 'Financial District', \n         'friend_available_time': ['9:30AM', '12:30PM'], 'travel_time_to_friend': 20, 'travel_time_from_friend': 23, \n       'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Haight-Ashbury', 'friend_location': 'Sunset District', \n         'friend_available_time': ['3:15PM', '8:15PM'], 'travel_time_to_friend': 15, 'travel_time_from_friend': 15, \n       'meeting_duration': 90}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Financial District', 'friend_location': 'Richmond District', \n         'friend_available_time': ['5:00PM', '8:45PM'], 'travel_time_to_friend': 21, 'travel_time_from_friend': 22, \n      'meeting_duration': 90},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Mission District', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['10:45AM', '8:15PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 20, \n      'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Richmond District', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['10:15AM', '7:15PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 21, \n      'meeting_duration': 45},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Marina District', 'friend_location': 'Mission District', \n         'friend_available_time': ['9:00AM', '2:15PM'], 'travel_time_to_friend': 20, 'travel_time_from_friend': 19, \n      'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Mission District', 'friend_location': 'Union Square', \n         'friend_available_time': ['6:45PM', '9:15PM'], 'travel_time_to_friend': 15, 'travel_time_from_friend': 14, \n      'meeting_duration': 105},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Bayview', 'friend_location': 'Golden Gate Park', \n         'friend_available_time': ['8:00AM', '11:30AM'], 'travel_time_to_friend': 22, 'travel_time_from_friend': 23, \n      'meeting_duration': 90}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Financial District', 'friend_location': 'Pacific Heights', \n         'friend_available_time': ['2:15PM', '4:30PM'], 'travel_time_to_friend': 13, 'travel_time_from_friend': 13, \n     'meeting_duration': 105},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Chinatown', 'friend_location': 'Mission District', \n         'friend_available_time': ['7:00PM', '9:00PM'], 'travel_time_to_friend': 18, 'travel_time_from_friend': 16, \n     'meeting_duration': 75},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Sunset District', 'friend_location': 'Richmond District', \n         'friend_available_time': ['7:15PM', '10:00PM'], 'travel_time_to_friend': 12, 'travel_time_from_friend': 11, \n     'meeting_duration': 75},\n        {'arrival_time': '9:00AM', 'arrival_location': 'North Beach', 'friend_location': 'Union Square', \n         'friend_available_time': ['8:30PM', '9:15PM'], 'travel_time_to_friend': 7, 'travel_time_from_friend': 10, \n     'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Nob Hill', 'friend_location': 'The Castro', \n         'friend_available_time': ['5:30PM', '7:00PM'], 'travel_time_to_friend': 17, 'travel_time_from_friend': 16, \n     'meeting_duration': 75},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Presidio', 'friend_location': 'Marina District', \n         'friend_available_time': ['9:15AM', '5:45PM'], 'travel_time_to_friend': 10, 'travel_time_from_friend': 10, \n     'meeting_duration': 60}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Union Square', 'friend_location': 'Russian Hill', \n         'friend_available_time': ['8:45PM', '9:15PM'], 'travel_time_to_friend': 13, 'travel_time_from_friend': 11, \n     'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Fisherman\\'s Wharf', 'friend_location': 'The Castro', \n         'friend_available_time': ['2:15PM', '6:45PM'], 'travel_time_to_friend': 26, 'travel_time_from_friend': 24, \n     'meeting_duration': 90},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Richmond District', 'friend_location': 'North Beach', \n         'friend_available_time': ['7:15AM', '2:45PM'], 'travel_time_to_friend': 17, 'travel_time_from_friend': 18, \n     'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Union Square', 'friend_location': 'The Castro', \n         'friend_available_time': ['9:00AM', '12:45PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 19, \n     'meeting_duration': 105},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Golden Gate Park', 'friend_location': 'Haight-Ashbury', \n         'friend_available_time': ['8:00PM', '9:00PM'], 'travel_time_to_friend': 7, 'travel_time_from_friend': 7, \n     'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Nob Hill', 'friend_location': 'The Castro', \n         'friend_available_time': ['12:15PM', '10:00PM'], 'travel_time_to_friend': 17, 'travel_time_from_friend': 16, \n     'meeting_duration': 75}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Bayview', 'friend_location': 'Chinatown', \n         'friend_available_time': ['7:00AM', '10:30AM'], 'travel_time_to_friend': 18, 'travel_time_from_friend': 22, \n    'meeting_duration': 75},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Bayview', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['12:00PM', '5:45PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 21, \n    'meeting_duration': 90},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Embarcadero', 'friend_location': 'Nob Hill', \n         'friend_available_time': ['10:30AM', '10:00PM'], 'travel_time_to_friend': 10, 'travel_time_from_friend': 9, \n    'meeting_duration': 105},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Chinatown', 'friend_location': 'Alamo Square', \n         'friend_available_time': ['12:45PM', '5:15PM'], 'travel_time_to_friend': 17, 'travel_time_from_friend': 16, \n    'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Golden Gate Park', 'friend_location': 'North Beach', \n         'friend_available_time': ['6:30PM', '7:45PM'], 'travel_time_to_friend': 24, 'travel_time_from_friend': 22, \n    'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Fisherman\\'s Wharf', 'friend_location': 'Nob Hill', \n         'friend_available_time': ['2:15PM', '7:45PM'], 'travel_time_to_friend': 11, 'travel_time_from_friend': 11, \n    'meeting_duration': 90}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Presidio', 'friend_location': 'Haight-Ashbury', \n         'friend_available_time': ['8:00AM', '2:00PM'], 'travel_time_to_friend': 15, 'travel_time_from_friend': 15, \n    'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Bayview', 'friend_location': 'Fisherman\\'s Wharf', \n         'friend_available_time': ['7:00AM', '2:45PM'], 'travel_time_to_friend': 25, 'travel_time_from_friend': 26, \n    'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Alamo Square', 'friend_location': 'Chinatown', \n         'friend_available_time': ['3:45PM', '4:30PM'], 'travel_time_to_friend': 16, 'travel_time_from_friend': 17, \n    'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Bayview', 'friend_location': 'North Beach', \n         'friend_available_time': ['4:45PM', '5:15PM'], 'travel_time_to_friend': 21, 'travel_time_from_friend': 22, \n    'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Financial District', 'friend_location': 'Fisherman\\'s Wharf', \n         'friend_available_time': ['11:45AM', '2:45PM'], 'travel_time_to_friend': 10, 'travel_time_from_friend': 11, \n    'meeting_duration': 45},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Richmond District', 'friend_location': 'North Beach', \n         'friend_available_time': ['3:15PM', '5:15PM'], 'travel_time_to_friend': 17, 'travel_time_from_friend': 18, \n    'meeting_duration': 75}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Financial District', 'friend_location': 'Russian Hill', \n         'friend_available_time': ['10:00AM', '12:00PM'], 'travel_time_to_friend': 10, 'travel_time_from_friend': 11, \n   'meeting_duration': 45},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Haight-Ashbury', 'friend_location': 'Financial District', \n         'friend_available_time': ['1:00PM', '9:15PM'], 'travel_time_to_friend': 21, 'travel_time_from_friend': 19, \n   'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Embarcadero', 'friend_location': 'Golden Gate Park', \n         'friend_available_time': ['4:15PM', '9:15PM'], 'travel_time_to_friend': 25, 'travel_time_from_friend': 25, \n   'meeting_duration': 120},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Chinatown', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['6:30PM', '8:45PM'], 'travel_time_to_friend': 5, 'travel_time_from_friend': 7, \n   'meeting_duration': 15},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Alamo Square', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['5:30PM', '6:45PM'], 'travel_time_to_friend': 17, 'travel_time_from_friend': 19, \n   'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Chinatown', 'friend_location': 'Marina District', \n         'friend_available_time': ['8:00AM', '3:00PM'], 'travel_time_to_friend': 12, 'travel_time_from_friend': 16, \n   'meeting_duration': 105}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Golden Gate Park', 'friend_location': 'Russian Hill', \n         'friend_available_time': ['9:00AM', '3:00PM'], 'travel_time_to_friend': 19, 'travel_time_from_friend': 21, \n   'meeting_duration': 45},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Sunset District', 'friend_location': 'Golden Gate Park', \n         'friend_available_time': ['12:00PM', '6:30PM'], 'travel_time_to_friend': 11, 'travel_time_from_friend': 10, \n   'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'The Castro', 'friend_location': 'Golden Gate Park', \n         'friend_available_time': ['9:15AM', '2:45PM'], 'travel_time_to_friend': 11, 'travel_time_from_friend': 13, \n   'meeting_duration': 105},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Fisherman\\'s Wharf', 'friend_location': 'North Beach', \n         'friend_available_time': ['7:45PM', '8:30PM'], 'travel_time_to_friend': 6, 'travel_time_from_friend': 5, \n   'meeting_duration': 30},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Pacific Heights', 'friend_location': 'Nob Hill', \n         'friend_available_time': ['6:45PM', '8:00PM'], 'travel_time_to_friend': 8, 'travel_time_from_friend': 8, \n   'meeting_duration': 60},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Union Square', 'friend_location': 'Nob Hill', \n         'friend_available_time': ['12:00PM', '4:15PM'], 'travel_time_to_friend': 9, 'travel_time_from_friend': 7, \n   'meeting_duration': 75}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_available_time, \n                       travel_time_to_friend, travel_time_from_friend, meeting_duration):\n    schedule = []\n    \n    # Convert time to minutes\n    def time_to_minutes(time):\n        hours, minutes = map(int, time[:-2].split(':'))\n        if time.endswith('PM') and hours!= 12:\n            hours += 12\n        elif time.endswith('AM') and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    \n    # Convert minutes to time\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        minutes %= 60\n        suffix = 'AM' if hours < 12 else 'PM'\n        hours = hours if hours <= 12 else hours - 12\n        return f'{hours}:{minutes:02d}{suffix}'\n    \n    # Add start action to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time})\n    \n    # Calculate travel time to friend\n    arrival_minutes = time_to_minutes(arrival_time)\n    travel_minutes = arrival_minutes + travel_time_to_friend\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": minutes_to_time(travel_minutes), \"to\": friend_location})\n    \n    # Calculate wait time\n    friend_available_minutes = time_to_minutes(friend_available_time[0])\n    wait_minutes = friend_available_minutes - travel_minutes\n    if wait_minutes > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": minutes_to_time(friend_available_minutes)})\n    \n    # Calculate meeting time\n    meeting_end_minutes = friend_available_minutes + meeting_duration\n    if meeting_end_minutes <= time_to_minutes(friend_available_time[1]):\n        schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                         \"time\": minutes_to_time(friend_available_minutes)})\n    else:\n        return []\n    \n    return schedule\n\ndef main():\n    constraints = [\n        {'arrival_time': '9:00AM', 'arrival_location': 'Bayview', 'friend_location': 'Fisherman\\'s Wharf', \n         'friend_available_time': ['4:00PM', '7:30PM'], 'travel_time_to_friend': 25, 'travel_time_from_friend': 26, \n  'meeting_duration': 120},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Golden Gate Park', 'friend_location': 'Embarcadero', \n         'friend_available_time': ['7:45AM', '1:30PM'], 'travel_time_to_friend': 25, 'travel_time_from_friend': 25, \n  'meeting_duration': 45},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Chinatown', 'friend_location': 'Financial District', \n         'friend_available_time': ['7:45AM', '11:15AM'], 'travel_time_to_friend': 5, 'travel_time_from_friend': 5, \n  'meeting_duration': 90},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Russian Hill', 'friend_location': 'Marina District', \n         'friend_available_time': ['8:30PM', '10:00PM'], 'travel_time_to_friend': 7, 'travel_time_from_friend': 8, \n  'meeting_duration': 75},\n        {'arrival_time': '9:00AM', 'arrival_location': 'The Castro', 'friend_location': 'Pacific Heights', \n         'friend_available_time': ['9:45AM', '3:00PM'], 'travel_time_to_friend': 16, 'travel_time_from_friend': 16, \n  'meeting_duration': 90},\n        {'arrival_time': '9:00AM', 'arrival_location': 'Golden Gate Park', 'friend_location': 'Marina District', \n         'friend_available_time': ['10:15AM', '1:30PM'], 'travel_time_to_friend': 16, 'travel_time_from_friend': 18, \n  'meeting_duration': 15}\n    ]\n    \n    for constraint in constraints:\n        schedule = calculate_schedule(constraint['arrival_time'], constraint['arrival_location'], \n                                      constraint['friend_location'], constraint['friend_available_time'], \n                                      constraint['travel_time_to_friend'], constraint['travel_time_from_friend'], \n                                      constraint['meeting_duration'])\n        \n        if schedule:\n            print(json.dumps({\"schedule\": schedule}, indent=4))\n        else:\n            print('No possible schedule found')\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:42PM",
                    "duration": 27,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 25\n    travel_time_from_friend = 27\n    start_location = \"Nob Hill\"\n    friend_location = \"Sunset District\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:45PM",
                    "duration": 15,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    travel_time_to_friend = 16\n    travel_time_from_friend = 15\n    start_location = \"North Beach\"\n    friend_location = \"Alamo Square\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "8:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "8:17PM",
                    "duration": 17,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 18\n    travel_time_from_friend = 17\n    start_location = \"Presidio\"\n    friend_location = \"North Beach\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:00PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 120\n    travel_time_to_friend = 11\n    travel_time_from_friend = 12\n    start_location = \"Nob Hill\"\n    friend_location = \"Marina District\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:21AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "2:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "2:49PM",
                    "duration": 19,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    travel_time_to_friend = 21\n    travel_time_from_friend = 19\n    start_location = \"Russian Hill\"\n    friend_location = \"Golden Gate Park\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:00PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "5:09PM",
                    "duration": 9,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 7\n    travel_time_from_friend = 9\n    start_location = \"Chinatown\"\n    friend_location = \"Russian Hill\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:45PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "2:02PM",
                    "duration": 17,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_time_to_friend = 16\n    travel_time_from_friend = 17\n    start_location = \"Alamo Square\"\n    friend_location = \"Sunset District\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "9:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:54PM",
                    "duration": 9,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 11\n    travel_time_from_friend = 9\n    start_location = \"Marina District\"\n    friend_location = \"Richmond District\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "8:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "8:45PM",
                    "duration": 15,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    travel_time_to_friend = 16\n    travel_time_from_friend = 15\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Pacific Heights\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "12:51PM",
                    "duration": 6,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 8\n    travel_time_from_friend = 6\n    start_location = \"Chinatown\"\n    friend_location = \"Nob Hill\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:42AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:53AM",
                    "duration": 11,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    travel_time_to_friend = 12\n    travel_time_from_friend = 11\n    start_location = \"Mission District\"\n    friend_location = \"Haight-Ashbury\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:00PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "1:24PM",
                    "duration": 24,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 22\n    travel_time_from_friend = 24\n    start_location = \"Presidio\"\n    friend_location = \"Union Square\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "6:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "7:08PM",
                    "duration": 23,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 23\n    travel_time_from_friend = 23\n    start_location = \"Bayview\"\n    friend_location = \"Russian Hill\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:30AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "11:48AM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    travel_time_to_friend = 17\n    travel_time_from_friend = 18\n    start_location = \"Nob Hill\"\n    friend_location = \"Presidio\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "5:45PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "6:08PM",
                    "duration": 23,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 23\n    travel_time_from_friend = 23\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Chinatown\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "3:00PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "3:07PM",
                    "duration": 7,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 7\n    travel_time_from_friend = 7\n    start_location = \"Richmond District\"\n    friend_location = \"Presidio\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:15PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "7:21PM",
                    "duration": 6,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_time_to_friend = 7\n    travel_time_from_friend = 6\n    start_location = \"Marina District\"\n    friend_location = \"Pacific Heights\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "7:22PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 7\n    travel_time_from_friend = 7\n    start_location = \"Union Square\"\n    friend_location = \"Chinatown\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "8:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00PM",
                    "duration": 15,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_time_to_friend = 15\n    travel_time_from_friend = 15\n    start_location = \"Sunset District\"\n    friend_location = \"Haight-Ashbury\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "11:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "11:48AM",
                    "duration": 18,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    meeting_duration = 120\n    travel_time_to_friend = 17\n    travel_time_from_friend = 18\n    start_location = \"Richmond District\"\n    friend_location = \"North Beach\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:26AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:37AM",
                    "duration": 11,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_time_to_friend = 11\n    travel_time_from_friend = 11\n    start_location = \"Nob Hill\"\n    friend_location = \"Alamo Square\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "10:56AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "11:09AM",
                    "duration": 13,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       travel_time_to_friend, travel_time_from_friend, start_location, friend_location):\n    # Initialize schedule\n    schedule = []\n\n    # Start at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend_location\n    travel_end_time = arrival_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n\n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if travel_end_time < friend_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_end_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to start_location\n    if meet_end_time < friend_end_time:\n        travel_back_end_time = meet_end_time + timedelta(minutes=travel_time_from_friend)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": friend_location,\n            \"duration\": travel_time_from_friend,\n            \"time\": travel_back_end_time.strftime(\"%I:%M%p\"),\n            \"to\": start_location\n        })\n\n    return schedule\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    travel_time_to_friend = 11\n    travel_time_from_friend = 13\n    start_location = \"The Castro\"\n    friend_location = \"Golden Gate Park\"\n\n    # Calculate schedule\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, \n                                  meeting_duration, travel_time_to_friend, travel_time_from_friend, \n                                  start_location, friend_location)\n\n    # Output schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "12:45PM",
                    "duration": 26,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Sunset District\"\n    meeting_time = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    meeting_location = \"Union Square\"\n    meeting_duration = 15\n    travel_time_to_meeting = 30\n    travel_time_from_meeting = 26\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "2:00PM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    meeting_location = \"Pacific Heights\"\n    meeting_duration = 105\n    travel_time_to_meeting = 23\n    travel_time_from_meeting = 22\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "8:30AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "10:00AM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"8:30AM\", \"%I:%M%p\")\n    meeting_location = \"Chinatown\"\n    meeting_duration = 90\n    travel_time_to_meeting = 18\n    travel_time_from_meeting = 22\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "2:30PM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Marina District\"\n    meeting_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    meeting_location = \"Embarcadero\"\n    meeting_duration = 60\n    travel_time_to_meeting = 14\n    travel_time_from_meeting = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "1:45PM",
                    "duration": 19,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    meeting_location = \"Financial District\"\n    meeting_duration = 90\n    travel_time_to_meeting = 19\n    travel_time_from_meeting = 19\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "10:30PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Union Square\"\n    meeting_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    meeting_location = \"North Beach\"\n    meeting_duration = 45\n    travel_time_to_meeting = 10\n    travel_time_from_meeting = 7\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "6:45PM",
                    "duration": 11,
                    "to": "Fisherman's Wharf"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Fisherman's Wharf\"\n    meeting_time = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 120\n    travel_time_to_meeting = 11\n    travel_time_from_meeting = 11\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:30PM",
                    "duration": 17,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"The Castro\"\n    meeting_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_location = \"Sunset District\"\n    meeting_duration = 75\n    travel_time_to_meeting = 17\n    travel_time_from_meeting = 17\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:30AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "8:15AM",
                    "duration": 19,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    meeting_time = datetime.strptime(\"7:30AM\", \"%I:%M%p\")\n    meeting_location = \"Haight-Ashbury\"\n    meeting_duration = 45\n    travel_time_to_meeting = 18\n    travel_time_from_meeting = 19\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:30PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    meeting_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    meeting_location = \"Presidio\"\n    meeting_duration = 30\n    travel_time_to_meeting = 17\n    travel_time_from_meeting = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:15AM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Marina District\"\n    meeting_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_location = \"Chinatown\"\n    meeting_duration = 15\n    travel_time_to_meeting = 16\n    travel_time_from_meeting = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "8:45AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "10:30AM",
                    "duration": 12,
                    "to": "Pacific Heights"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Pacific Heights\"\n    meeting_time = datetime.strptime(\"8:45AM\", \"%I:%M%p\")\n    meeting_location = \"Fisherman's Wharf\"\n    meeting_duration = 105\n    travel_time_to_meeting = 13\n    travel_time_from_meeting = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:45PM",
                    "duration": 15,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    meeting_time = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    meeting_location = \"Alamo Square\"\n    meeting_duration = 15\n    travel_time_to_meeting = 16\n    travel_time_from_meeting = 15\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "6:00PM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Haight-Ashbury\"\n    meeting_time = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    meeting_location = \"North Beach\"\n    meeting_duration = 90\n    travel_time_to_meeting = 19\n    travel_time_from_meeting = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:45AM",
                    "duration": 14,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting):\n    schedule = []\n    \n    # Start at arrival location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to meeting location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_to_meeting,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n\n    # Wait until meeting time\n    wait_start_time = travel_end_time\n    wait_end_time = meeting_time\n    wait_duration = (wait_end_time - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet\n    meet_start_time = meeting_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_time_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_from_meeting,\n        \"time\": travel_back_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    meeting_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 15\n    travel_time_to_meeting = 17\n    travel_time_from_meeting = 14\n\n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time_to_meeting, travel_time_from_meeting)\n\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:09AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Financial District\"\n    meeting_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\") - timedelta(minutes=15)\n    meeting_location = \"Union Square\"\n    meeting_duration = 15\n    travel_time = 9\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:26AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    meeting_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_location = \"Bayview\"\n    meeting_duration = 45\n    travel_time = 26\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    meeting_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 75\n    travel_time = 7\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:45AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"The Castro\"\n    meeting_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\") + timedelta(minutes=105)\n    meeting_location = \"Embarcadero\"\n    meeting_duration = 15\n    travel_time = 22\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Russian Hill\"\n    meeting_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_location = \"Richmond District\"\n    meeting_duration = 45\n    travel_time = 14\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    meeting_time = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_location = \"Alamo Square\"\n    meeting_duration = 120\n    travel_time = 13\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Financial District\"\n    meeting_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_location = \"Mission District\"\n    meeting_duration = 45\n    travel_time = 17\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Financial District\"\n    meeting_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 45\n    travel_time = 8\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Chinatown\"\n    meeting_time = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_location = \"Nob Hill\"\n    meeting_duration = 45\n    travel_time = 8\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"10:30AM\", \"%I:%M%p\")\n    meeting_location = \"Sunset District\"\n    meeting_duration = 60\n    travel_time = 23\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:15AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"The Castro\"\n    meeting_time = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    meeting_location = \"Financial District\"\n    meeting_duration = 30\n    travel_time = 20\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    meeting_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_location = \"Haight-Ashbury\"\n    meeting_duration = 105\n    travel_time = 19\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Union Square\"\n    meeting_time = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    meeting_location = \"Chinatown\"\n    meeting_duration = 45\n    travel_time = 7\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Golden Gate Park\"\n    meeting_time = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    meeting_location = \"Presidio\"\n    meeting_duration = 90\n    travel_time = 11\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    meeting_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_location = \"Russian Hill\"\n    meeting_duration = 15\n    travel_time = 14\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:31AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "7:15AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time):\n    schedule = []\n    \n    # Add arrival to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Add travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Calculate wait time\n    wait_time = meeting_time - (arrival_time + timedelta(minutes=travel_time))\n    wait_minutes = wait_time.total_seconds() / 60\n    \n    # Add wait\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": (arrival_time + timedelta(minutes=travel_time)).strftime(\"%I:%M%p\")\n    })\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    meeting_time = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    meeting_location = \"Bayview\"\n    meeting_duration = 30\n    travel_time = 31\n    \n    schedule = calculate_schedule(arrival_time, arrival_location, meeting_time, meeting_location, meeting_duration, travel_time)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 5,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"4:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 9,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"5:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 20,\n            \"meeting_duration\": 15,\n            \"start_location\": \"The Castro\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Pacific Heights\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"2:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"1:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 9,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:30AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"3:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Haight-Ashbury\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 23,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Bayview\",\n            \"friend_location\": \"Russian Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 25,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Embarcadero\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 20,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 19,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"5:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Presidio\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"2:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 3,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"5:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"1:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 6,\n            \"meeting_duration\": 60,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 26,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Financial District\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"1:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"4:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"11:00AM\", \"%I:%M%p\"),\n            \"travel_duration\": 12,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 19,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"3:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 60,\n            \"start_location\": \"The Castro\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 9,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Russian Hill\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 6,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Fisherman's Wharf\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Presidio\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"10:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"3:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 25,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"12:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Union Square\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"2:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 120,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 60,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Haight-Ashbury\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Financial District\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Fisherman's Wharf\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:30AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 24,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"North Beach\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 24,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"1:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"3:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 24,\n            \"meeting_duration\": 15,\n            \"start_location\": \"The Castro\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"4:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Bayview\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 22,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Financial District\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:30AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"12:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"5:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 11,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"12:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"4:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Alamo Square\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 11,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 105,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 14,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Fisherman's Wharf\",\n            \"friend_location\": \"Union Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Pacific Heights\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 29,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 5,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Russian Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"2:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 29,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"5:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Financial District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Nob Hill\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 5,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Russian Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"1:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 11,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Marina District\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:30AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 21,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Financial District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"10:30AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 5,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Financial District\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 22,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Fisherman's Wharf\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 22,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Financial District\",\n            \"friend_location\": \"Presidio\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"5:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Marina District\",\n            \"friend_location\": \"Haight-Ashbury\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"10:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"3:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 24,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Presidio\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"2:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 21,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 19,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"3:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 31,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Bayview\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"12:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 9,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Golden Gate Park\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"12:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 20,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"12:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"4:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 120,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"6:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 19,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"The Castro\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"10:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:15AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:30AM\", \"%I:%M%p\"),\n            \"travel_duration\": 21,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Haight-Ashbury\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"2:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 11,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 12,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 12,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"1:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 22,\n            \"meeting_duration\": 45,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Bayview\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"12:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"8:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:45PM\", \"%I:%M%p\"),\n            \"travel_duration\": 23,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Financial District\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"12:15PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"5:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 6,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:00AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Bayview\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"11:30AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 12,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Haight-Ashbury\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start, friend_end, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    current_time = arrival_time\n    \n    # Start at start_location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \"time\": travel_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    current_time = travel_end\n    \n    # Wait for friend\n    wait_end = max(current_time, friend_start)\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end.strftime(\"%I:%M%p\")})\n    current_time = wait_end\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=meeting_duration)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        meeting_duration = (meet_end - current_time).total_seconds() / 60\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_end.strftime(\"%I:%M%p\")})\n    current_time = meet_end\n    \n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"2:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"5:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 11,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"10:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"4:00PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"6:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 11,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Financial District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"8:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"9:30PM\", \"%I:%M%p\"),\n            \"travel_duration\": 21,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"10:45AM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"1:00PM\", \"%I:%M%p\"),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Marina District\",\n            \"friend_location\": \"Financial District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime(\"9:00AM\", \"%I:%M%p\"),\n            \"friend_start\": datetime.strptime(\"12:30PM\", \"%I:%M%p\"),\n            \"friend_end\": datetime.strptime(\"7:15PM\", \"%I:%M%p\"),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Alamo Square\"\n        }\n    ]\n    \n    for i, test_case in enumerate(test_cases):\n        print(f\"SOLUTION: {i+1}\")\n        schedule = calculate_schedule(\n            test_case[\"arrival_time\"],\n            test_case[\"friend_start\"],\n            test_case[\"friend_end\"],\n            test_case[\"travel_duration\"],\n            test_case[\"meeting_duration\"],\n            test_case[\"start_location\"],\n            test_case[\"friend_location\"]\n        )\n        print({\"schedule\": schedule})\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": [],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Input parameters\n    locations = [\n        {\n            \"name\": \"Haight-Ashbury\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Jessica\",\n                \"location\": \"Embarcadero\",\n                \"available_from\": datetime.strptime('8:15PM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('9:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 75  # minutes\n            },\n            \"travel_time_to_friend\": 20,  # minutes\n            \"travel_time_from_friend\": 21  # minutes\n        },\n        {\n            \"name\": \"Union Square\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Nancy\",\n                \"location\": \"The Castro\",\n                \"available_from\": datetime.strptime('1:45PM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('3:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 15  # minutes\n            },\n            \"travel_time_to_friend\": 19,  # minutes\n            \"travel_time_from_friend\": 19  # minutes\n        },\n        {\n            \"name\": \"Nob Hill\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Kevin\",\n                \"location\": \"Pacific Heights\",\n                \"available_from\": datetime.strptime('8:45AM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('10:45AM', '%I:%M%p'),\n                \"min_meeting_duration\": 45  # minutes\n            },\n            \"travel_time_to_friend\": 8,  # minutes\n            \"travel_time_from_friend\": 8  # minutes\n        },\n        {\n            \"name\": \"Presidio\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Karen\",\n                \"location\": \"Russian Hill\",\n                \"available_from\": datetime.strptime('8:45AM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('1:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 120  # minutes\n            },\n            \"travel_time_to_friend\": 14,  # minutes\n            \"travel_time_from_friend\": 14  # minutes\n        },\n        {\n            \"name\": \"Mission District\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Betty\",\n                \"location\": \"Financial District\",\n                \"available_from\": datetime.strptime('7:30AM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('5:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 75  # minutes\n            },\n            \"travel_time_to_friend\": 17,  # minutes\n            \"travel_time_from_friend\": 17  # minutes\n        },\n        {\n            \"name\": \"Golden Gate Park\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Ashley\",\n                \"location\": \"Alamo Square\",\n                \"available_from\": datetime.strptime('5:45PM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('9:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 75  # minutes\n            },\n            \"travel_time_to_friend\": 10,  # minutes\n            \"travel_time_from_friend\": 9  # minutes\n        }\n    ]\n\n    # Calculate schedule\n    schedules = []\n    for location in locations:\n        schedule = [\n            {\"action\": \"start\", \"location\": location[\"name\"], \"time\": location[\"arrival_time\"].strftime('%I:%M%p')}\n        ]\n\n        # Travel to friend's location\n        travel_start_time = location[\"arrival_time\"]\n        travel_end_time = travel_start_time + timedelta(minutes=location[\"travel_time_to_friend\"])\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": location[\"friend\"][\"location\"],\n            \"duration\": location[\"travel_time_to_friend\"],\n            \"time\": travel_end_time.strftime('%I:%M%p'),\n            \"to\": location[\"friend\"][\"location\"]\n        })\n\n        # Wait for friend\n        wait_start_time = travel_end_time\n        wait_end_time = max(wait_start_time, location[\"friend\"][\"available_from\"])\n        if wait_start_time < wait_end_time:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location[\"friend\"][\"location\"],\n                \"time\": wait_end_time.strftime('%I:%M%p')\n            })\n\n        # Meet friend\n        meet_start_time = wait_end_time\n        meet_end_time = min(meet_start_time + timedelta(minutes=location[\"friend\"][\"min_meeting_duration\"]), location[\"friend\"][\"available_to\"])\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location[\"friend\"][\"location\"],\n            \"duration\": (meet_end_time - meet_start_time).seconds // 60,\n            \"time\": meet_end_time.strftime('%I:%M%p')\n        })\n\n        # Travel back to original location\n        travel_start_time = meet_end_time\n        travel_end_time = travel_start_time + timedelta(minutes=location[\"travel_time_from_friend\"])\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": location[\"name\"],\n            \"duration\": location[\"travel_time_from_friend\"],\n            \"time\": travel_end_time.strftime('%I:%M%p'),\n            \"to\": location[\"name\"]\n        })\n\n        schedules.append({\"location\": location[\"name\"], \"schedule\": schedule})\n\n    return {\"schedules\": schedules}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Input parameters\n    locations = [\n        {\n            \"name\": \"Embarcadero\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Emily\",\n                \"location\": \"Golden Gate Park\",\n                \"available_from\": datetime.strptime('1:00PM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('2:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 45  # minutes\n            },\n            \"travel_time_to_friend\": 25,  # minutes\n            \"travel_time_from_friend\": 25  # minutes\n        },\n        {\n            \"name\": \"Nob Hill\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Andrew\",\n                \"location\": \"Bayview\",\n                \"available_from\": datetime.strptime('8:00AM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('3:45PM', '%I:%M%p'),\n                \"min_meeting_duration\": 75  # minutes\n            },\n            \"travel_time_to_friend\": 19,  # minutes\n            \"travel_time_from_friend\": 20  # minutes\n        },\n        {\n            \"name\": \"Haight-Ashbury\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Deborah\",\n                \"location\": \"Russian Hill\",\n                \"available_from\": datetime.strptime('2:15PM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('9:45PM', '%I:%M%p'),\n                \"min_meeting_duration\": 60  # minutes\n            },\n            \"travel_time_to_friend\": 17,  # minutes\n            \"travel_time_from_friend\": 17  # minutes\n        },\n        {\n            \"name\": \"Golden Gate Park\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"James\",\n                \"location\": \"The Castro\",\n                \"available_from\": datetime.strptime('7:45AM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('1:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 15  # minutes\n            },\n            \"travel_time_to_friend\": 13,  # minutes\n            \"travel_time_from_friend\": 11  # minutes\n        },\n        {\n            \"name\": \"Marina District\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Kevin\",\n                \"location\": \"The Castro\",\n                \"available_from\": datetime.strptime('2:45PM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('9:00PM', '%I:%M%p'),\n                \"min_meeting_duration\": 90  # minutes\n            },\n            \"travel_time_to_friend\": 22,  # minutes\n            \"travel_time_from_friend\": 21  # minutes\n        },\n        {\n            \"name\": \"Presidio\",\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend\": {\n                \"name\": \"Carol\",\n                \"location\": \"Golden Gate Park\",\n                \"available_from\": datetime.strptime('9:45PM', '%I:%M%p'),\n                \"available_to\": datetime.strptime('10:30PM', '%I:%M%p'),\n                \"min_meeting_duration\": 45  # minutes\n            },\n            \"travel_time_to_friend\": 12,  # minutes\n            \"travel_time_from_friend\": 11  # minutes\n        }\n    ]\n\n    # Calculate schedule\n    schedules = []\n    for location in locations:\n        schedule = [\n            {\"action\": \"start\", \"location\": location[\"name\"], \"time\": location[\"arrival_time\"].strftime('%I:%M%p')}\n        ]\n\n        # Travel to friend's location\n        travel_start_time = location[\"arrival_time\"]\n        travel_end_time = travel_start_time + timedelta(minutes=location[\"travel_time_to_friend\"])\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": location[\"friend\"][\"location\"],\n            \"duration\": location[\"travel_time_to_friend\"],\n            \"time\": travel_end_time.strftime('%I:%M%p'),\n            \"to\": location[\"friend\"][\"location\"]\n        })\n\n        # Wait for friend\n        wait_start_time = travel_end_time\n        wait_end_time = max(wait_start_time, location[\"friend\"][\"available_from\"])\n        if wait_start_time < wait_end_time:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location[\"friend\"][\"location\"],\n                \"time\": wait_end_time.strftime('%I:%M%p')\n            })\n\n        # Meet friend\n        meet_start_time = wait_end_time\n        meet_end_time = min(meet_start_time + timedelta(minutes=location[\"friend\"][\"min_meeting_duration\"]), location[\"friend\"][\"available_to\"])\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location[\"friend\"][\"location\"],\n            \"duration\": (meet_end_time - meet_start_time).seconds // 60,\n            \"time\": meet_end_time.strftime('%I:%M%p')\n        })\n\n        # Travel back to original location\n        travel_start_time = meet_end_time\n        travel_end_time = travel_start_time + timedelta(minutes=location[\"travel_time_from_friend\"])\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": location[\"name\"],\n            \"duration\": location[\"travel_time_from_friend\"],\n            \"time\": travel_end_time.strftime('%I:%M%p'),\n            \"to\": location[\"name\"]\n        })\n\n        schedules.append({\"location\": location[\"name\"], \"schedule\": schedule})\n\n    return {\"schedules\": schedules}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        }
    ]
}