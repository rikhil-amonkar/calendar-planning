{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "9:10",
                        "end_time": "10:25"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "16:56",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "21:45",
                        "end_time": "22:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "16:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "21:45",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Haight-Ashbury': {'Fisherman\\'s Wharf': 23, 'Richmond District': 10, 'Mission District': 11, 'Bayview': 18},\n    'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Richmond District': 18, 'Mission District': 22, 'Bayview': 26},\n    'Richmond District': {'Haight-Ashbury': 10, 'Fisherman\\'s Wharf': 18, 'Mission District': 20, 'Bayview': 26},\n    'Mission District': {'Haight-Ashbury': 12, 'Fisherman\\'s Wharf': 22, 'Richmond District': 20, 'Bayview': 15},\n    'Bayview': {'Haight-Ashbury': 19, 'Fisherman\\'s Wharf': 25, 'Richmond District': 25, 'Mission District': 13}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Sarah': {'location': 'Fisherman\\'s Wharf','start_time': '14:45', 'end_time': '17:30','min_duration': 105},\n    'Mary': {'location': 'Richmond District','start_time': '13:00', 'end_time': '19:15','min_duration': 75},\n    'Helen': {'location': 'Mission District','start_time': '21:45', 'end_time': '22:30','min_duration': 30},\n    'Thomas': {'location': 'Bayview','start_time': '15:15', 'end_time': '18:45','min_duration': 120}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Haight-Ashbury'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n           'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_389"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joshua",
                        "start_time": "9:18",
                        "end_time": "10:03"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "12:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Betty",
                        "start_time": "14:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kimberly",
                        "start_time": "15:30",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "17:15",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Barbara",
                        "start_time": "17:37",
                        "end_time": "19:37"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "19:42",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Daniel",
                        "start_time": "21:03",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Sandra",
                        "start_time": "19:47",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joshua",
                        "start_time": "10:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kimberly",
                        "start_time": "15:30",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "16:03",
                        "end_time": "16:33"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Betty",
                        "start_time": "16:57",
                        "end_time": "17:57"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Daniel",
                        "start_time": "18:30",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Union Square': {'Presidio': 24, 'Alamo Square': 15, 'Marina District': 18, 'Financial District': 9, 'Nob Hill': 9, 'Sunset District': 27, 'Chinatown': 7, 'Russian Hill': 13, 'North Beach': 10, 'Haight-Ashbury': 18},\n    'Presidio': {'Union Square': 22, 'Alamo Square': 19, 'Marina District': 11, 'Financial District': 23, 'Nob Hill': 18, 'Sunset District': 15, 'Chinatown': 21, 'Russian Hill': 14, 'North Beach': 18, 'Haight-Ashbury': 15},\n    'Alamo Square': {'Union Square': 14, 'Presidio': 17, 'Marina District': 15, 'Financial District': 17, 'Nob Hill': 11, 'Sunset District': 16, 'Chinatown': 15, 'Russian Hill': 13, 'North Beach': 15, 'Haight-Ashbury': 5},\n    'Marina District': {'Union Square': 16, 'Presidio': 10, 'Alamo Square': 15, 'Financial District': 17, 'Nob Hill': 12, 'Sunset District': 19, 'Chinatown': 15, 'Russian Hill': 8, 'North Beach': 11, 'Haight-Ashbury': 16},\n    'Financial District': {'Union Square': 9, 'Presidio': 22, 'Alamo Square': 17, 'Marina District': 15, 'Nob Hill': 8, 'Sunset District': 30, 'Chinatown': 5, 'Russian Hill': 11, 'North Beach': 7, 'Haight-Ashbury': 19},\n    'Nob Hill': {'Union Square': 7, 'Presidio': 17, 'Alamo Square': 11, 'Marina District': 11, 'Financial District': 9, 'Sunset District': 24, 'Chinatown': 6, 'Russian Hill': 5, 'North Beach': 8, 'Haight-Ashbury': 13},\n    'Sunset District': {'Union Square': 30, 'Presidio': 16, 'Alamo Square': 17, 'Marina District': 21, 'Financial District': 30, 'Nob Hill': 27, 'Chinatown': 30, 'Russian Hill': 24, 'North Beach': 28, 'Haight-Ashbury': 15},\n    'Chinatown': {'Union Square': 7, 'Presidio': 19, 'Alamo Square': 17, 'Marina District': 12, 'Financial District': 5, 'Nob Hill': 9, 'Sunset District': 29, 'Russian Hill': 7, 'North Beach': 3, 'Haight-Ashbury': 19},\n    'Russian Hill': {'Union Square': 10, 'Presidio': 14, 'Alamo Square': 15, 'Marina District': 7, 'Financial District': 11, 'Nob Hill': 5, 'Sunset District': 23, 'Chinatown': 9, 'North Beach': 5, 'Haight-Ashbury': 17},\n    'North Beach': {'Union Square': 7, 'Presidio': 17, 'Alamo Square': 16, 'Marina District': 9, 'Financial District': 8, 'Nob Hill': 7, 'Sunset District': 27, 'Chinatown': 6, 'Russian Hill': 4, 'Haight-Ashbury': 18},\n    'Haight-Ashbury': {'Union Square': 19, 'Presidio': 15, 'Alamo Square': 5, 'Marina District': 17, 'Financial District': 21, 'Nob Hill': 15, 'Sunset District': 15, 'Chinatown': 19, 'Russian Hill': 17, 'North Beach': 19}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Kimberly': {'location': 'Presidio','start_time': '15:30', 'end_time': '16:00','min_duration': 15},\n    'Elizabeth': {'location': 'Alamo Square','start_time': '19:15', 'end_time': '20:15','min_duration': 15},\n    'Joshua': {'location': 'Marina District','start_time': '10:30', 'end_time': '14:15','min_duration': 45},\n    'Sandra': {'location': 'Financial District','start_time': '19:30', 'end_time': '20:15','min_duration': 45},\n    'Kenneth': {'location': 'Nob Hill','start_time': '12:45', 'end_time': '21:45','min_duration': 30},\n    'Betty': {'location': 'Sunset District','start_time': '14:00', 'end_time': '19:00','min_duration': 60},\n    'Deborah': {'location': 'Chinatown','start_time': '17:15', 'end_time': '20:30','min_duration': 15},\n    'Barbara': {'location': 'Russian Hill','start_time': '17:30', 'end_time': '21:15','min_duration': 120},\n    'Steven': {'location': 'North Beach','start_time': '17:45', 'end_time': '20:45','min_duration': 90},\n    'Daniel': {'location': 'Haight-Ashbury','start_time': '18:30', 'end_time': '18:45','min_duration': 15}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Union Square'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n           'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_912"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "9:26",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "13:48",
                        "end_time": "14:03"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "14:15",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:47",
                        "end_time": "16:02"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "12:52",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Richmond District': {'Marina District': 9, 'Chinatown': 20, 'Financial District': 22, 'Bayview': 26, 'Union Square': 21},\n    'Marina District': {'Richmond District': 11, 'Chinatown': 16, 'Financial District': 17, 'Bayview': 27, 'Union Square': 16},\n    'Chinatown': {'Richmond District': 20, 'Marina District': 12, 'Financial District': 5, 'Bayview': 22, 'Union Square': 7},\n    'Financial District': {'Richmond District': 21, 'Marina District': 15, 'Chinatown': 5, 'Bayview': 19, 'Union Square': 9},\n    'Bayview': {'Richmond District': 25, 'Marina District': 25, 'Chinatown': 18, 'Financial District': 19, 'Union Square': 17},\n    'Union Square': {'Richmond District': 20, 'Marina District': 18, 'Chinatown': 7, 'Financial District': 9, 'Bayview': 15}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Kimberly': {'location': 'Marina District','start_time': '13:15', 'end_time': '16:45','min_duration': 15},\n    'Robert': {'location': 'Chinatown','start_time': '12:15', 'end_time': '20:15','min_duration': 15},\n    'Rebecca': {'location': 'Financial District','start_time': '13:15', 'end_time': '16:45','min_duration': 75},\n    'Margaret': {'location': 'Bayview','start_time': '09:30', 'end_time': '13:30','min_duration': 30},\n    'Kenneth': {'location': 'Union Square','start_time': '19:30', 'end_time': '21:15','min_duration': 75}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Richmond District'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n          'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_446"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "9:31",
                        "end_time": "10:31"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Laura",
                        "start_time": "12:30",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ronald",
                        "start_time": "13:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mary",
                        "start_time": "15:51",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Emily",
                        "start_time": "16:43",
                        "end_time": "17:43"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "9:31",
                        "end_time": "10:31"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Laura",
                        "start_time": "12:30",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ronald",
                        "start_time": "13:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Financial District': {'Russian Hill': 10, 'Sunset District': 31, 'North Beach': 7, 'The Castro': 23, 'Golden Gate Park': 23},\n    'Russian Hill': {'Financial District': 11, 'Sunset District': 23, 'North Beach': 5, 'The Castro': 21, 'Golden Gate Park': 21},\n    'Sunset District': {'Financial District': 30, 'Russian Hill': 24, 'North Beach': 29, 'The Castro': 17, 'Golden Gate Park': 11},\n    'North Beach': {'Financial District': 8, 'Russian Hill': 4, 'Sunset District': 27, 'The Castro': 22, 'Golden Gate Park': 22},\n    'The Castro': {'Financial District': 20, 'Russian Hill': 18, 'Sunset District': 17, 'North Beach': 20, 'Golden Gate Park': 11},\n    'Golden Gate Park': {'Financial District': 26, 'Russian Hill': 19, 'Sunset District': 10, 'North Beach': 24, 'The Castro': 13}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Ronald': {'location': 'Russian Hill','start_time': '13:45', 'end_time': '17:15','min_duration': 105},\n    'Patricia': {'location': 'Sunset District','start_time': '09:15', 'end_time': '22:00','min_duration': 60},\n    'Laura': {'location': 'North Beach','start_time': '12:30', 'end_time': '12:45','min_duration': 15},\n    'Emily': {'location': 'The Castro','start_time': '16:15', 'end_time': '18:30','min_duration': 60},\n    'Mary': {'location': 'Golden Gate Park','start_time': '15:00', 'end_time': '16:30','min_duration': 60}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Financial District'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n          'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_444"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "11:01",
                        "end_time": "11:46"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "11:59",
                        "end_time": "13:59"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "20:30",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "10:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "10:56",
                        "end_time": "12:26"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "12:47",
                        "end_time": "14:47"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "20:30",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Bayview': {'Pacific Heights': 23, 'Mission District': 13, 'Haight-Ashbury': 19, 'Financial District': 19},\n    'Pacific Heights': {'Bayview': 22, 'Mission District': 15, 'Haight-Ashbury': 11, 'Financial District': 13},\n    'Mission District': {'Bayview': 15, 'Pacific Heights': 16, 'Haight-Ashbury': 12, 'Financial District': 17},\n    'Haight-Ashbury': {'Bayview': 18, 'Pacific Heights': 12, 'Mission District': 11, 'Financial District': 21},\n    'Financial District': {'Bayview': 19, 'Pacific Heights': 13, 'Mission District': 17, 'Haight-Ashbury': 19}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Mary': {'location': 'Pacific Heights','start_time': '10:00', 'end_time': '19:00','min_duration': 45},\n    'Lisa': {'location': 'Mission District','start_time': '20:30', 'end_time': '22:00','min_duration': 75},\n    'Betty': {'location': 'Haight-Ashbury','start_time': '07:15', 'end_time': '17:15','min_duration': 90},\n    'Charles': {'location': 'Financial District','start_time': '11:15', 'end_time': '15:00','min_duration': 120}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Bayview'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n         'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_350"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "9:12",
                        "end_time": "11:12"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Amanda",
                        "start_time": "11:27",
                        "end_time": "11:42"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "12:06",
                        "end_time": "12:21"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Kimberly",
                        "start_time": "12:48",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "14:58",
                        "end_time": "16:28"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "16:47",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "15:15",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "18:15",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "19:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "9:12",
                        "end_time": "11:12"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:25",
                        "end_time": "11:40"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "15:15",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Kimberly",
                        "start_time": "16:27",
                        "end_time": "18:12"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Amanda",
                        "start_time": "18:23",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "18:45",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "19:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Haight-Ashbury': {'Mission District': 11, 'Union Square': 19, 'Pacific Heights': 12, 'Bayview': 18, 'Fisherman\\'s Wharf': 23, 'Marina District': 17, 'Richmond District': 10, 'Sunset District': 15, 'Golden Gate Park': 7},\n    'Mission District': {'Haight-Ashbury': 12, 'Union Square': 15, 'Pacific Heights': 16, 'Bayview': 14, 'Fisherman\\'s Wharf': 22, 'Marina District': 19, 'Richmond District': 20, 'Sunset District': 24, 'Golden Gate Park': 17},\n    'Union Square': {'Haight-Ashbury': 18, 'Mission District': 14, 'Pacific Heights': 15, 'Bayview': 15, 'Fisherman\\'s Wharf': 15, 'Marina District': 18, 'Richmond District': 20, 'Sunset District': 27, 'Golden Gate Park': 22},\n    'Pacific Heights': {'Haight-Ashbury': 11, 'Mission District': 15, 'Union Square': 12, 'Bayview': 22, 'Fisherman\\'s Wharf': 13, 'Marina District': 6, 'Richmond District': 12, 'Sunset District': 21, 'Golden Gate Park': 15},\n    'Bayview': {'Haight-Ashbury': 19, 'Mission District': 13, 'Union Square': 18, 'Pacific Heights': 23, 'Fisherman\\'s Wharf': 25, 'Marina District': 27, 'Richmond District': 25, 'Sunset District': 23, 'Golden Gate Park': 22},\n    'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Mission District': 22, 'Union Square': 13, 'Pacific Heights': 12, 'Bayview': 26, 'Marina District': 9, 'Richmond District': 18, 'Sunset District': 27, 'Golden Gate Park': 25},\n    'Marina District': {'Haight-Ashbury': 16, 'Mission District': 20, 'Union Square': 16, 'Pacific Heights': 7, 'Bayview': 27, 'Fisherman\\'s Wharf': 10, 'Richmond District': 11, 'Sunset District': 19, 'Golden Gate Park': 18},\n    'Richmond District': {'Haight-Ashbury': 10, 'Mission District': 20, 'Union Square': 21, 'Pacific Heights': 10, 'Bayview': 27, 'Fisherman\\'s Wharf': 18, 'Marina District': 9, 'Sunset District': 11, 'Golden Gate Park': 9},\n    'Sunset District': {'Haight-Ashbury': 15, 'Mission District': 25, 'Union Square': 30, 'Pacific Heights': 21, 'Bayview': 22, 'Fisherman\\'s Wharf': 29, 'Marina District': 21, 'Richmond District': 12, 'Golden Gate Park': 11},\n    'Golden Gate Park': {'Haight-Ashbury': 7, 'Mission District': 17, 'Union Square': 22, 'Pacific Heights': 16, 'Bayview': 23, 'Fisherman\\'s Wharf': 24, 'Marina District': 16, 'Richmond District': 7, 'Sunset District': 10}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Elizabeth': {'location': 'Mission District','start_time': '10:30', 'end_time': '20:00','min_duration': 90},\n    'David': {'location': 'Union Square','start_time': '15:15', 'end_time': '19:00','min_duration': 45},\n    'Sandra': {'location': 'Pacific Heights','start_time': '07:00', 'end_time': '20:00','min_duration': 120},\n    'Thomas': {'location': 'Bayview','start_time': '19:30', 'end_time': '20:30','min_duration': 30},\n    'Robert': {'location': 'Fisherman\\'s Wharf','start_time': '10:00', 'end_time': '15:00','min_duration': 15},\n    'Kenneth': {'location': 'Marina District','start_time': '10:45', 'end_time': '13:00','min_duration': 45},\n    'Melissa': {'location': 'Richmond District','start_time': '18:15', 'end_time': '20:00','min_duration': 15},\n    'Kimberly': {'location': 'Sunset District','start_time': '10:15', 'end_time': '18:15','min_duration': 105},\n    'Amanda': {'location': 'Golden Gate Park','start_time': '07:45', 'end_time': '18:45','min_duration': 15}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Haight-Ashbury'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n           'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_867"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Elizabeth",
                        "start_time": "9:12",
                        "end_time": "10:57"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Brian",
                        "start_time": "11:23",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jason",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Laura",
                        "start_time": "14:51",
                        "end_time": "16:06"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "18:45",
                        "end_time": "19:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jason",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Brian",
                        "start_time": "14:52",
                        "end_time": "15:07"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Elizabeth",
                        "start_time": "15:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Laura",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "19:02",
                        "end_time": "19:47"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Presidio': {'Richmond District': 7, 'North Beach': 18, 'Financial District': 23, 'Golden Gate Park': 12, 'Union Square': 22},\n    'Richmond District': {'Presidio': 7, 'North Beach': 17, 'Financial District': 22, 'Golden Gate Park': 9, 'Union Square': 21},\n    'North Beach': {'Presidio': 17, 'Richmond District': 18, 'Financial District': 8, 'Golden Gate Park': 22, 'Union Square': 7},\n    'Financial District': {'Presidio': 22, 'Richmond District': 21, 'North Beach': 7, 'Golden Gate Park': 23, 'Union Square': 9},\n    'Golden Gate Park': {'Presidio': 11, 'Richmond District': 7, 'North Beach': 24, 'Financial District': 26, 'Union Square': 22},\n    'Union Square': {'Presidio': 24, 'Richmond District': 20, 'North Beach': 10, 'Financial District': 9, 'Golden Gate Park': 22}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Jason': {'location': 'Richmond District','start_time': '13:00', 'end_time': '20:45','min_duration': 90},\n    'Melissa': {'location': 'North Beach','start_time': '18:45', 'end_time': '20:15','min_duration': 45},\n    'Brian': {'location': 'Financial District','start_time': '09:45', 'end_time': '21:45','min_duration': 15},\n    'Elizabeth': {'location': 'Golden Gate Park','start_time': '08:45', 'end_time': '21:30','min_duration': 105},\n    'Laura': {'location': 'Union Square','start_time': '14:15', 'end_time': '19:30','min_duration': 75}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Presidio'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n        'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_423"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joseph",
                        "start_time": "9:12",
                        "end_time": "10:57"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "11:10",
                        "end_time": "11:40"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "11:59",
                        "end_time": "12:29"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Robert",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "15:04",
                        "end_time": "17:04"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Amanda",
                        "start_time": "17:13",
                        "end_time": "18:58"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "19:05",
                        "end_time": "20:50"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "21:05",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "9:30",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "10:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joseph",
                        "start_time": "13:24",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Amanda",
                        "start_time": "15:25",
                        "end_time": "17:10"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "19:31",
                        "end_time": "21:16"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Presidio': {'Marina District': 11, 'The Castro': 21, 'Fisherman\\'s Wharf': 19, 'Bayview': 31, 'Pacific Heights': 11, 'Mission District': 26, 'Alamo Square': 19, 'Golden Gate Park': 12},\n    'Marina District': {'Presidio': 10, 'The Castro': 22, 'Fisherman\\'s Wharf': 10, 'Bayview': 27, 'Pacific Heights': 7, 'Mission District': 20, 'Alamo Square': 15, 'Golden Gate Park': 18},\n    'The Castro': {'Presidio': 20, 'Marina District': 21, 'Fisherman\\'s Wharf': 24, 'Bayview': 19, 'Pacific Heights': 16, 'Mission District': 7, 'Alamo Square': 8, 'Golden Gate Park': 11},\n    'Fisherman\\'s Wharf': {'Presidio': 17, 'Marina District': 9, 'The Castro': 27, 'Bayview': 26, 'Pacific Heights': 12, 'Mission District': 22, 'Alamo Square': 21, 'Golden Gate Park': 25},\n    'Bayview': {'Presidio': 32, 'Marina District': 27, 'The Castro': 19, 'Fisherman\\'s Wharf': 25, 'Pacific Heights': 23, 'Mission District': 13, 'Alamo Square': 16, 'Golden Gate Park': 22},\n    'Pacific Heights': {'Presidio': 11, 'Marina District': 6, 'The Castro': 16, 'Fisherman\\'s Wharf': 13, 'Bayview': 22, 'Mission District': 15, 'Alamo Square': 10, 'Golden Gate Park': 15},\n    'Mission District': {'Presidio': 25, 'Marina District': 19, 'The Castro': 7, 'Fisherman\\'s Wharf': 22, 'Bayview': 14, 'Pacific Heights': 16, 'Alamo Square': 11, 'Golden Gate Park': 17},\n    'Alamo Square': {'Presidio': 17, 'Marina District': 15, 'The Castro': 8, 'Fisherman\\'s Wharf': 19, 'Bayview': 16, 'Pacific Heights': 10, 'Mission District': 10, 'Golden Gate Park': 9},\n    'Golden Gate Park': {'Presidio': 11, 'Marina District': 16, 'The Castro': 13, 'Fisherman\\'s Wharf': 24, 'Bayview': 23, 'Pacific Heights': 16, 'Mission District': 17, 'Alamo Square': 9}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Amanda': {'location': 'Marina District','start_time': '14:45', 'end_time': '19:30','min_duration': 105},\n    'Melissa': {'location': 'The Castro','start_time': '09:30', 'end_time': '17:00','min_duration': 30},\n    'Jeffrey': {'location': 'Fisherman\\'s Wharf','start_time': '12:45', 'end_time': '18:45','min_duration': 120},\n    'Matthew': {'location': 'Bayview','start_time': '10:15', 'end_time': '13:15','min_duration': 30},\n    'Nancy': {'location': 'Pacific Heights','start_time': '17:00', 'end_time': '21:30','min_duration': 105},\n    'Karen': {'location': 'Mission District','start_time': '17:30', 'end_time': '20:30','min_duration': 105},\n    'Robert': {'location': 'Alamo Square','start_time': '11:15', 'end_time': '17:30','min_duration': 120},\n    'Joseph': {'location': 'Golden Gate Park','start_time': '08:30', 'end_time': '21:15','min_duration': 105}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Presidio'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n          'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_715"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Robert",
                        "start_time": "9:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Anthony",
                        "start_time": "10:41",
                        "end_time": "10:56"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "11:05",
                        "end_time": "12:20"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kevin",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Stephanie",
                        "start_time": "20:37",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "9:07",
                        "end_time": "10:22"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Anthony",
                        "start_time": "10:32",
                        "end_time": "10:47"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Stephanie",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kevin",
                        "start_time": "20:22",
                        "end_time": "21:37"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Haight-Ashbury': {'Russian Hill': 17, 'Fisherman\\'s Wharf': 23, 'Nob Hill': 15, 'Golden Gate Park': 7, 'Alamo Square': 5, 'Pacific Heights': 12},\n    'Russian Hill': {'Haight-Ashbury': 17, 'Fisherman\\'s Wharf': 7, 'Nob Hill': 5, 'Golden Gate Park': 21, 'Alamo Square': 15, 'Pacific Heights': 7},\n    'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Russian Hill': 7, 'Nob Hill': 11, 'Golden Gate Park': 25, 'Alamo Square': 20, 'Pacific Heights': 12},\n    'Nob Hill': {'Haight-Ashbury': 13, 'Russian Hill': 5, 'Fisherman\\'s Wharf': 11, 'Golden Gate Park': 17, 'Alamo Square': 11, 'Pacific Heights': 8},\n    'Golden Gate Park': {'Haight-Ashbury': 7, 'Russian Hill': 19, 'Fisherman\\'s Wharf': 24, 'Nob Hill': 20, 'Alamo Square': 10, 'Pacific Heights': 16},\n    'Alamo Square': {'Haight-Ashbury': 5, 'Russian Hill': 13, 'Fisherman\\'s Wharf': 19, 'Nob Hill': 11, 'Golden Gate Park': 9, 'Pacific Heights': 10},\n    'Pacific Heights': {'Haight-Ashbury': 11, 'Russian Hill': 7, 'Fisherman\\'s Wharf': 13, 'Nob Hill': 8, 'Golden Gate Park': 15, 'Alamo Square': 10}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Stephanie': {'location': 'Russian Hill','start_time': '20:00', 'end_time': '20:45','min_duration': 15},\n    'Kevin': {'location': 'Fisherman\\'s Wharf','start_time': '19:15', 'end_time': '21:45','min_duration': 75},\n    'Robert': {'location': 'Nob Hill','start_time': '07:45', 'end_time': '10:30','min_duration': 90},\n    'Steven': {'location': 'Golden Gate Park','start_time': '08:30', 'end_time': '17:00','min_duration': 75},\n    'Anthony': {'location': 'Alamo Square','start_time': '07:45', 'end_time': '19:45','min_duration': 15},\n    'Sandra': {'location': 'Pacific Heights','start_time': '14:45', 'end_time': '21:45','min_duration': 45}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Haight-Ashbury'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n         'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_577"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Elizabeth",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ashley",
                        "start_time": "11:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "12:25",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "14:39",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "15:21",
                        "end_time": "17:06"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "17:29",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Helen",
                        "start_time": "17:57",
                        "end_time": "19:42"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Elizabeth",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "11:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "15:22",
                        "end_time": "17:07"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:18",
                        "end_time": "17:48"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Helen",
                        "start_time": "18:12",
                        "end_time": "19:57"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ashley",
                        "start_time": "20:21",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Marina District': {'Mission District': 20, 'Fisherman\\'s Wharf': 10, 'Presidio': 10, 'Union Square': 16, 'Sunset District': 19, 'Financial District': 17, 'Haight-Ashbury': 16, 'Russian Hill': 8},\n    'Mission District': {'Marina District': 19, 'Fisherman\\'s Wharf': 22, 'Presidio': 25, 'Union Square': 15, 'Sunset District': 24, 'Financial District': 15, 'Haight-Ashbury': 12, 'Russian Hill': 15},\n    'Fisherman\\'s Wharf': {'Marina District': 9, 'Mission District': 22, 'Presidio': 17, 'Union Square': 13, 'Sunset District': 27, 'Financial District': 11, 'Haight-Ashbury': 22, 'Russian Hill': 7},\n    'Presidio': {'Marina District': 11, 'Mission District': 26, 'Fisherman\\'s Wharf': 19, 'Union Square': 22, 'Sunset District': 15, 'Financial District': 23, 'Haight-Ashbury': 15, 'Russian Hill': 14},\n    'Union Square': {'Marina District': 18, 'Mission District': 14, 'Fisherman\\'s Wharf': 15, 'Presidio': 24, 'Sunset District': 27, 'Financial District': 9, 'Haight-Ashbury': 18, 'Russian Hill': 13},\n    'Sunset District': {'Marina District': 21, 'Mission District': 25, 'Fisherman\\'s Wharf': 29, 'Presidio': 16, 'Union Square': 30, 'Financial District': 30, 'Haight-Ashbury': 15, 'Russian Hill': 24},\n    'Financial District': {'Marina District': 15, 'Mission District': 17, 'Fisherman\\'s Wharf': 10, 'Presidio': 22, 'Union Square': 9, 'Sunset District': 30, 'Haight-Ashbury': 19, 'Russian Hill': 11},\n    'Haight-Ashbury': {'Marina District': 17, 'Mission District': 11, 'Fisherman\\'s Wharf': 23, 'Presidio': 15, 'Union Square': 19, 'Sunset District': 15, 'Financial District': 21, 'Russian Hill': 17},\n    'Russian Hill': {'Marina District': 7, 'Mission District': 16, 'Fisherman\\'s Wharf': 7, 'Presidio': 14, 'Union Square': 10, 'Sunset District': 23, 'Financial District': 11, 'Haight-Ashbury': 17}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Karen': {'location': 'Mission District','start_time': '14:15', 'end_time': '22:00','min_duration': 30},\n    'Richard': {'location': 'Fisherman\\'s Wharf','start_time': '14:30', 'end_time': '17:30','min_duration': 30},\n    'Robert': {'location': 'Presidio','start_time': '21:45', 'end_time': '22:45','min_duration': 60},\n    'Joseph': {'location': 'Union Square','start_time': '11:45', 'end_time': '14:45','min_duration': 120},\n    'Helen': {'location': 'Sunset District','start_time': '14:45', 'end_time': '20:45','min_duration': 105},\n    'Elizabeth': {'location': 'Financial District','start_time': '10:00', 'end_time': '12:45','min_duration': 75},\n    'Kimberly': {'location': 'Haight-Ashbury','start_time': '14:15', 'end_time': '17:30','min_duration': 105},\n    'Ashley': {'location': 'Russian Hill','start_time': '11:30', 'end_time': '21:30','min_duration': 45}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Marina District'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n        'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_728"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "9:19",
                        "end_time": "11:19"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "11:34",
                        "end_time": "11:49"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Laura",
                        "start_time": "12:09",
                        "end_time": "13:09"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "13:27",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jason",
                        "start_time": "13:11",
                        "end_time": "14:56"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Margaret",
                        "start_time": "15:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Elizabeth",
                        "start_time": "17:00",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "18:00",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "10:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "12:06",
                        "end_time": "14:06"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Margaret",
                        "start_time": "14:22",
                        "end_time": "15:52"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "15:59",
                        "end_time": "16:14"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Laura",
                        "start_time": "16:34",
                        "end_time": "17:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Presidio': {'Fisherman\\'s Wharf': 19, 'Alamo Square': 19, 'Financial District': 23, 'Union Square': 22, 'Sunset District': 15, 'Embarcadero': 20, 'Golden Gate Park': 12, 'Chinatown': 21, 'Richmond District': 7},\n    'Fisherman\\'s Wharf': {'Presidio': 17, 'Alamo Square': 21, 'Financial District': 11, 'Union Square': 13, 'Sunset District': 27, 'Embarcadero': 8, 'Golden Gate Park': 25, 'Chinatown': 12, 'Richmond District': 18},\n    'Alamo Square': {'Presidio': 17, 'Fisherman\\'s Wharf': 19, 'Financial District': 17, 'Union Square': 14, 'Sunset District': 16, 'Embarcadero': 16, 'Golden Gate Park': 9, 'Chinatown': 15, 'Richmond District': 11},\n    'Financial District': {'Presidio': 22, 'Fisherman\\'s Wharf': 10, 'Alamo Square': 17, 'Union Square': 9, 'Sunset District': 30, 'Embarcadero': 4, 'Golden Gate Park': 23, 'Chinatown': 5, 'Richmond District': 21},\n    'Union Square': {'Presidio': 24, 'Fisherman\\'s Wharf': 15, 'Alamo Square': 15, 'Financial District': 9, 'Sunset District': 27, 'Embarcadero': 11, 'Golden Gate Park': 22, 'Chinatown': 7, 'Richmond District': 20},\n    'Sunset District': {'Presidio': 16, 'Fisherman\\'s Wharf': 29, 'Alamo Square': 17, 'Financial District': 30, 'Union Square': 30, 'Embarcadero': 30, 'Golden Gate Park': 11, 'Chinatown': 30, 'Richmond District': 12},\n    'Embarcadero': {'Presidio': 20, 'Fisherman\\'s Wharf': 6, 'Alamo Square': 19, 'Financial District': 5, 'Union Square': 10, 'Sunset District': 30, 'Golden Gate Park': 25, 'Chinatown': 7, 'Richmond District': 21},\n    'Golden Gate Park': {'Presidio': 11, 'Fisherman\\'s Wharf': 24, 'Alamo Square': 9, 'Financial District': 26, 'Union Square': 22, 'Sunset District': 10, 'Embarcadero': 25, 'Chinatown': 23, 'Richmond District': 7},\n    'Chinatown': {'Presidio': 19, 'Fisherman\\'s Wharf': 8, 'Alamo Square': 17, 'Financial District': 5, 'Union Square': 7, 'Sunset District': 29, 'Embarcadero': 5, 'Golden Gate Park': 23, 'Richmond District': 20},\n    'Richmond District': {'Presidio': 7, 'Fisherman\\'s Wharf': 18, 'Alamo Square': 13, 'Financial District': 22, 'Union Square': 21, 'Sunset District': 11, 'Embarcadero': 19, 'Golden Gate Park': 9, 'Chinatown': 20}\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    'Jeffrey': {'location': 'Fisherman\\'s Wharf','start_time': '10:15', 'end_time': '13:00','min_duration': 90},\n    'Ronald': {'location': 'Alamo Square','start_time': '07:45', 'end_time': '14:45','min_duration': 120},\n    'Jason': {'location': 'Financial District','start_time': '10:45', 'end_time': '16:00','min_duration': 105},\n    'Melissa': {'location': 'Union Square','start_time': '17:45', 'end_time': '18:15','min_duration': 15},\n    'Elizabeth': {'location': 'Sunset District','start_time': '14:45', 'end_time': '17:30','min_duration': 105},\n    'Margaret': {'location': 'Embarcadero','start_time': '13:15', 'end_time': '19:00','min_duration': 90},\n    'George': {'location': 'Golden Gate Park','start_time': '19:00', 'end_time': '22:00','min_duration': 75},\n    'Richard': {'location': 'Chinatown','start_time': '09:30', 'end_time': '21:00','min_duration': 15},\n    'Laura': {'location': 'Richmond District','start_time': '09:45', 'end_time': '18:00','min_duration': 60}\n}\n\ndef calculate_meeting_schedule(travel_distances, meeting_constraints):\n    itinerary = []\n    current_time = '09:00'\n    current_location = 'Presidio'\n\n    # Sort meeting constraints by start time\n    sorted_meetings = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    for person, meeting in sorted_meetings:\n        travel_time = travel_distances[current_location][meeting['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        if arrival_time > meeting['start_time']:\n            start_time = arrival_time\n        else:\n            start_time = meeting['start_time']\n\n        end_time = add_time(start_time, meeting['min_duration'])\n\n        if end_time > meeting['end_time']:\n            end_time = meeting['end_time']\n\n        itinerary.append({\n            'action':'meet',\n            'location': meeting['location'],\n            'person': person,\n          'start_time': start_time,\n            'end_time': end_time\n        })\n\n        current_time = end_time\n        current_location = meeting['location']\n\n    return itinerary\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef main():\n    meeting_schedule = calculate_meeting_schedule(travel_distances, meeting_constraints)\n    print(json.dumps({'itinerary': meeting_schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_831"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "17:55",
                        "end_time": "19:55"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "19:30",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Union Square': {'Russian Hill': 13, 'Alamo Square': 15, 'Haight-Ashbury': 18, 'Marina District': 18, 'Bayview': 15, 'Chinatown': 7, 'Presidio': 24, 'Sunset District': 27},\n    'Russian Hill': {'Union Square': 10, 'Alamo Square': 15, 'Haight-Ashbury': 17, 'Marina District': 7, 'Bayview': 23, 'Chinatown': 9, 'Presidio': 14, 'Sunset District': 23},\n    'Alamo Square': {'Union Square': 14, 'Russian Hill': 13, 'Haight-Ashbury': 5, 'Marina District': 15, 'Bayview': 16, 'Chinatown': 15, 'Presidio': 17, 'Sunset District': 16},\n    'Haight-Ashbury': {'Union Square': 19, 'Russian Hill': 17, 'Alamo Square': 5, 'Marina District': 17, 'Bayview': 18, 'Chinatown': 19, 'Presidio': 15, 'Sunset District': 15},\n    'Marina District': {'Union Square': 16, 'Russian Hill': 8, 'Alamo Square': 15, 'Haight-Ashbury': 16, 'Bayview': 27, 'Chinatown': 15, 'Presidio': 10, 'Sunset District': 19},\n    'Bayview': {'Union Square': 18, 'Russian Hill': 23, 'Alamo Square': 16, 'Haight-Ashbury': 19, 'Marina District': 27, 'Chinatown': 19, 'Presidio': 32, 'Sunset District': 23},\n    'Chinatown': {'Union Square': 7, 'Russian Hill': 7, 'Alamo Square': 17, 'Haight-Ashbury': 19, 'Marina District': 12, 'Bayview': 20, 'Presidio': 19, 'Sunset District': 29},\n    'Presidio': {'Union Square': 22, 'Russian Hill': 14, 'Alamo Square': 19, 'Haight-Ashbury': 15, 'Marina District': 11, 'Bayview': 31, 'Chinatown': 21, 'Sunset District': 15},\n    'Sunset District': {'Union Square': 30, 'Russian Hill': 24, 'Alamo Square': 17, 'Haight-Ashbury': 15, 'Marina District': 21, 'Bayview': 22, 'Chinatown': 30, 'Presidio': 16}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Betty', 'location': 'Russian Hill','start_time': '07:00', 'end_time': '16:45','min_time': 105},\n    {'person': 'Melissa', 'location': 'Alamo Square','start_time': '09:30', 'end_time': '17:15','min_time': 105},\n    {'person': 'Joshua', 'location': 'Haight-Ashbury','start_time': '12:15', 'end_time': '19:00','min_time': 90},\n    {'person': 'Jeffrey', 'location': 'Marina District','start_time': '12:15', 'end_time': '18:00','min_time': 45},\n    {'person': 'James', 'location': 'Bayview','start_time': '07:30', 'end_time': '20:00','min_time': 90},\n    {'person': 'Anthony', 'location': 'Chinatown','start_time': '11:45', 'end_time': '13:30','min_time': 75},\n    {'person': 'Timothy', 'location': 'Presidio','start_time': '12:30', 'end_time': '14:45','min_time': 90},\n    {'person': 'Emily', 'location': 'Sunset District','start_time': '19:30', 'end_time': '21:30','min_time': 120}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Union Square'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n               'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_789"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "9:08",
                        "end_time": "10:53"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "11:07",
                        "end_time": "12:07"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "William",
                        "start_time": "12:14",
                        "end_time": "13:59"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'The Castro': {'Alamo Square': 8, 'Union Square': 19, 'Chinatown': 20},\n    'Alamo Square': {'The Castro': 8, 'Union Square': 14, 'Chinatown': 16},\n    'Union Square': {'The Castro': 19, 'Alamo Square': 15, 'Chinatown': 7},\n    'Chinatown': {'The Castro': 22, 'Alamo Square': 17, 'Union Square': 7}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Emily', 'location': 'Alamo Square','start_time': '11:45', 'end_time': '15:15','min_time': 105},\n    {'person': 'Barbara', 'location': 'Union Square','start_time': '16:45', 'end_time': '18:15','min_time': 60},\n    {'person': 'William', 'location': 'Chinatown','start_time': '17:15', 'end_time': '19:00','min_time': 105}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'The Castro'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n               'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_219"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "9:26",
                        "end_time": "11:11"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "11:22",
                        "end_time": "11:37"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "11:56",
                        "end_time": "12:26"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "12:31",
                        "end_time": "13:01"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Fisherman\\'s Wharf': {'The Castro': 26, 'Golden Gate Park': 25, 'Embarcadero': 8, 'Russian Hill': 7, 'Nob Hill': 11, 'Alamo Square': 20, 'North Beach': 6},\n    'The Castro': {'Fisherman\\'s Wharf': 24, 'Golden Gate Park': 11, 'Embarcadero': 22, 'Russian Hill': 18, 'Nob Hill': 16, 'Alamo Square': 8, 'North Beach': 20},\n    'Golden Gate Park': {'Fisherman\\'s Wharf': 24, 'The Castro': 13, 'Embarcadero': 25, 'Russian Hill': 19, 'Nob Hill': 20, 'Alamo Square': 10, 'North Beach': 24},\n    'Embarcadero': {'Fisherman\\'s Wharf': 6, 'The Castro': 25, 'Golden Gate Park': 25, 'Russian Hill': 8, 'Nob Hill': 10, 'Alamo Square': 19, 'North Beach': 5},\n    'Russian Hill': {'Fisherman\\'s Wharf': 7, 'The Castro': 21, 'Golden Gate Park': 21, 'Embarcadero': 8, 'Nob Hill': 5, 'Alamo Square': 15, 'North Beach': 5},\n    'Nob Hill': {'Fisherman\\'s Wharf': 11, 'The Castro': 17, 'Golden Gate Park': 17, 'Embarcadero': 9, 'Russian Hill': 5, 'Alamo Square': 11, 'North Beach': 8},\n    'Alamo Square': {'Fisherman\\'s Wharf': 19, 'The Castro': 8, 'Golden Gate Park': 9, 'Embarcadero': 17, 'Russian Hill': 13, 'Nob Hill': 11, 'North Beach': 15},\n    'North Beach': {'Fisherman\\'s Wharf': 5, 'The Castro': 22, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Russian Hill': 4, 'Nob Hill': 7, 'Alamo Square': 16}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Laura', 'location': 'The Castro','start_time': '19:45', 'end_time': '21:30','min_time': 105},\n    {'person': 'Daniel', 'location': 'Golden Gate Park','start_time': '21:15', 'end_time': '21:45','min_time': 15},\n    {'person': 'William', 'location': 'Embarcadero','start_time': '07:00', 'end_time': '09:00','min_time': 90},\n    {'person': 'Karen', 'location': 'Russian Hill','start_time': '14:30', 'end_time': '19:45','min_time': 30},\n    {'person': 'Stephanie', 'location': 'Nob Hill','start_time': '07:30', 'end_time': '09:30','min_time': 45},\n    {'person': 'Joseph', 'location': 'Alamo Square','start_time': '11:30', 'end_time': '12:45','min_time': 15},\n    {'person': 'Kimberly', 'location': 'North Beach','start_time': '15:45', 'end_time': '19:15','min_time': 30}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Fisherman\\'s Wharf'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n              'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_604"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "9:14",
                        "end_time": "9:59"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Russian Hill': {'Richmond District': 14},\n    'Richmond District': {'Russian Hill': 13}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Barbara', 'location': 'Richmond District','start_time': '13:15', 'end_time': '18:15','min_time': 45}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Russian Hill'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n               'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_52"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "10:58",
                        "end_time": "11:43"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "13:53",
                        "end_time": "14:38"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Financial District': {'Chinatown': 5, 'Golden Gate Park': 23},\n    'Chinatown': {'Financial District': 5, 'Golden Gate Park': 23},\n    'Golden Gate Park': {'Financial District': 26, 'Chinatown': 23}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Kenneth', 'location': 'Chinatown','start_time': '12:00', 'end_time': '15:00','min_time': 90},\n    {'person': 'Barbara', 'location': 'Golden Gate Park','start_time': '08:15', 'end_time': '19:00','min_time': 45}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Financial District'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n              'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_137"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "9:20",
                        "end_time": "9:35"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Sarah",
                        "start_time": "9:57",
                        "end_time": "11:12"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Brian",
                        "start_time": "11:37",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "13:43",
                        "end_time": "14:13"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "James",
                        "start_time": "14:20",
                        "end_time": "16:20"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Elizabeth",
                        "start_time": "16:42",
                        "end_time": "17:42"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "9:16",
                        "end_time": "10:46"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Stephanie",
                        "start_time": "10:59",
                        "end_time": "12:14"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Elizabeth",
                        "start_time": "12:33",
                        "end_time": "13:33"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Robert",
                        "start_time": "13:42",
                        "end_time": "14:27"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "14:48",
                        "end_time": "15:18"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "James",
                        "start_time": "15:25",
                        "end_time": "17:25"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Sarah",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'The Castro': {'North Beach': 20, 'Golden Gate Park': 11, 'Embarcadero': 22, 'Haight-Ashbury': 6, 'Richmond District': 16, 'Nob Hill': 16, 'Marina District': 21, 'Presidio': 20, 'Union Square': 19, 'Financial District': 21},\n    'North Beach': {'The Castro': 23, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Haight-Ashbury': 18, 'Richmond District': 18, 'Nob Hill': 7, 'Marina District': 9, 'Presidio': 17, 'Union Square': 7, 'Financial District': 8},\n    'Golden Gate Park': {'The Castro': 13, 'North Beach': 23, 'Embarcadero': 25, 'Haight-Ashbury': 7, 'Richmond District': 7, 'Nob Hill': 20, 'Marina District': 16, 'Presidio': 11, 'Union Square': 22, 'Financial District': 26},\n    'Embarcadero': {'The Castro': 25, 'North Beach': 5, 'Golden Gate Park': 25, 'Haight-Ashbury': 21, 'Richmond District': 21, 'Nob Hill': 10, 'Marina District': 12, 'Presidio': 20, 'Union Square': 10, 'Financial District': 5},\n    'Haight-Ashbury': {'The Castro': 6, 'North Beach': 19, 'Golden Gate Park': 7, 'Embarcadero': 20, 'Richmond District': 10, 'Nob Hill': 15, 'Marina District': 17, 'Presidio': 15, 'Union Square': 19, 'Financial District': 21},\n    'Richmond District': {'The Castro': 16, 'North Beach': 17, 'Golden Gate Park': 9, 'Embarcadero': 19, 'Haight-Ashbury': 10, 'Nob Hill': 17, 'Marina District': 9, 'Presidio': 7, 'Union Square': 21, 'Financial District': 22},\n    'Nob Hill': {'The Castro': 17, 'North Beach': 8, 'Golden Gate Park': 17, 'Embarcadero': 9, 'Haight-Ashbury': 13, 'Richmond District': 14, 'Marina District': 11, 'Presidio': 17, 'Union Square': 7, 'Financial District': 9},\n    'Marina District': {'The Castro': 22, 'North Beach': 11, 'Golden Gate Park': 18, 'Embarcadero': 14, 'Haight-Ashbury': 16, 'Richmond District': 11, 'Nob Hill': 12, 'Presidio': 10, 'Union Square': 16, 'Financial District': 17},\n    'Presidio': {'The Castro': 21, 'North Beach': 18, 'Golden Gate Park': 12, 'Embarcadero': 20, 'Haight-Ashbury': 15, 'Richmond District': 7, 'Nob Hill': 18, 'Marina District': 11, 'Union Square': 22, 'Financial District': 23},\n    'Union Square': {'The Castro': 17, 'North Beach': 10, 'Golden Gate Park': 22, 'Embarcadero': 11, 'Haight-Ashbury': 18, 'Richmond District': 20, 'Nob Hill': 9, 'Marina District': 18, 'Presidio': 24, 'Financial District': 9},\n    'Financial District': {'The Castro': 20, 'North Beach': 7, 'Golden Gate Park': 23, 'Embarcadero': 4, 'Haight-Ashbury': 19, 'Richmond District': 21, 'Nob Hill': 8, 'Marina District': 15, 'Presidio': 22, 'Union Square': 9}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Steven', 'location': 'North Beach','start_time': '17:30', 'end_time': '20:30','min_time': 15},\n    {'person': 'Sarah', 'location': 'Golden Gate Park','start_time': '17:00', 'end_time': '19:15','min_time': 75},\n    {'person': 'Brian', 'location': 'Embarcadero','start_time': '14:15', 'end_time': '16:00','min_time': 105},\n    {'person': 'Stephanie', 'location': 'Haight-Ashbury','start_time': '10:15', 'end_time': '12:15','min_time': 75},\n    {'person': 'Melissa', 'location': 'Richmond District','start_time': '14:00', 'end_time': '19:30','min_time': 30},\n    {'person': 'Nancy', 'location': 'Nob Hill','start_time': '08:15', 'end_time': '12:45','min_time': 90},\n    {'person': 'David', 'location': 'Marina District','start_time': '11:15', 'end_time': '13:15','min_time': 120},\n    {'person': 'James', 'location': 'Presidio','start_time': '15:00', 'end_time': '18:15','min_time': 120},\n    {'person': 'Elizabeth', 'location': 'Union Square','start_time': '11:30', 'end_time': '21:00','min_time': 60},\n    {'person': 'Robert', 'location': 'Financial District','start_time': '13:15', 'end_time': '15:15','min_time': 45}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'The Castro'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n             'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_911"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "9:14",
                        "end_time": "9:29"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Margaret",
                        "start_time": "9:51",
                        "end_time": "11:06"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Ronald",
                        "start_time": "11:13",
                        "end_time": "11:58"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Deborah",
                        "start_time": "12:20",
                        "end_time": "13:50"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Deborah",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Margaret",
                        "start_time": "16:30",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "19:33",
                        "end_time": "19:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Nob Hill': {'Richmond District': 14, 'Financial District': 9, 'North Beach': 8, 'The Castro': 17, 'Golden Gate Park': 17},\n    'Richmond District': {'Nob Hill': 17, 'Financial District': 22, 'North Beach': 17, 'The Castro': 16, 'Golden Gate Park': 9},\n    'Financial District': {'Nob Hill': 8, 'Richmond District': 21, 'North Beach': 7, 'The Castro': 23, 'Golden Gate Park': 23},\n    'North Beach': {'Nob Hill': 7, 'Richmond District': 18, 'Financial District': 8, 'The Castro': 22, 'Golden Gate Park': 22},\n    'The Castro': {'Nob Hill': 16, 'Richmond District': 16, 'Financial District': 20, 'North Beach': 20, 'Golden Gate Park': 11},\n    'Golden Gate Park': {'Nob Hill': 20, 'Richmond District': 7, 'Financial District': 26, 'North Beach': 24, 'The Castro': 13}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Emily', 'location': 'Richmond District','start_time': '19:00', 'end_time': '21:00','min_time': 15},\n    {'person': 'Margaret', 'location': 'Financial District','start_time': '16:30', 'end_time': '20:15','min_time': 75},\n    {'person': 'Ronald', 'location': 'North Beach','start_time': '18:30', 'end_time': '19:30','min_time': 45},\n    {'person': 'Deborah', 'location': 'The Castro','start_time': '13:45', 'end_time': '21:15','min_time': 90},\n    {'person': 'Jeffrey', 'location': 'Golden Gate Park','start_time': '11:15', 'end_time': '14:30','min_time': 120}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Nob Hill'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n              'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_433"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "9:10",
                        "end_time": "9:25"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "9:37",
                        "end_time": "10:52"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "11:07",
                        "end_time": "12:37"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "11:12",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:42",
                        "end_time": "14:12"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Financial District': {'Fisherman\\'s Wharf': 10, 'Pacific Heights': 13, 'Mission District': 17},\n    'Fisherman\\'s Wharf': {'Financial District': 11, 'Pacific Heights': 12, 'Mission District': 22},\n    'Pacific Heights': {'Financial District': 13, 'Fisherman\\'s Wharf': 13, 'Mission District': 15},\n    'Mission District': {'Financial District': 17, 'Fisherman\\'s Wharf': 22, 'Pacific Heights': 16}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'David', 'location': 'Fisherman\\'s Wharf','start_time': '10:45', 'end_time': '15:30','min_time': 15},\n    {'person': 'Timothy', 'location': 'Pacific Heights','start_time': '09:00', 'end_time': '15:30','min_time': 75},\n    {'person': 'Robert', 'location': 'Mission District','start_time': '12:15', 'end_time': '19:45','min_time': 90}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Financial District'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n             'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_203"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "9:51",
                        "end_time": "11:36"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "11:43",
                        "end_time": "13:43"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Fisherman\\'s Wharf': {'Golden Gate Park': 25, 'Presidio': 17, 'Richmond District': 18},\n    'Golden Gate Park': {'Fisherman\\'s Wharf': 24, 'Presidio': 11, 'Richmond District': 7},\n    'Presidio': {'Fisherman\\'s Wharf': 19, 'Golden Gate Park': 12, 'Richmond District': 7},\n    'Richmond District': {'Fisherman\\'s Wharf': 18, 'Golden Gate Park': 9, 'Presidio': 7}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Melissa', 'location': 'Golden Gate Park','start_time': '08:30', 'end_time': '20:00','min_time': 15},\n    {'person': 'Nancy', 'location': 'Presidio','start_time': '19:45', 'end_time': '22:00','min_time': 105},\n    {'person': 'Emily', 'location': 'Richmond District','start_time': '16:45', 'end_time': '22:00','min_time': 120}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Fisherman\\'s Wharf'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n            'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_224"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "9:14",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "11:20",
                        "end_time": "12:35"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "12:53",
                        "end_time": "14:53"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "15:15",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "16:07",
                        "end_time": "16:22"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "16:33",
                        "end_time": "17:18"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "9:15",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "11:04",
                        "end_time": "12:49"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "13:10",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "14:43",
                        "end_time": "16:43"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "17:05",
                        "end_time": "17:50"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "19:41",
                        "end_time": "20:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Marina District': {'Embarcadero': 14, 'Bayview': 27, 'Union Square': 16, 'Chinatown': 15, 'Sunset District': 19, 'Golden Gate Park': 18, 'Financial District': 17, 'Haight-Ashbury': 16, 'Mission District': 20},\n    'Embarcadero': {'Marina District': 12, 'Bayview': 21, 'Union Square': 10, 'Chinatown': 7, 'Sunset District': 30, 'Golden Gate Park': 25, 'Financial District': 5, 'Haight-Ashbury': 21, 'Mission District': 20},\n    'Bayview': {'Marina District': 27, 'Embarcadero': 19, 'Union Square': 18, 'Chinatown': 19, 'Sunset District': 23, 'Golden Gate Park': 22, 'Financial District': 19, 'Haight-Ashbury': 19, 'Mission District': 13},\n    'Union Square': {'Marina District': 18, 'Embarcadero': 11, 'Bayview': 15, 'Chinatown': 7, 'Sunset District': 27, 'Golden Gate Park': 22, 'Financial District': 9, 'Haight-Ashbury': 18, 'Mission District': 14},\n    'Chinatown': {'Marina District': 12, 'Embarcadero': 5, 'Bayview': 20, 'Union Square': 7, 'Sunset District': 29, 'Golden Gate Park': 23, 'Financial District': 5, 'Haight-Ashbury': 19, 'Mission District': 17},\n    'Sunset District': {'Marina District': 21, 'Embarcadero': 30, 'Bayview': 22, 'Union Square': 30, 'Chinatown': 30, 'Golden Gate Park': 11, 'Financial District': 30, 'Haight-Ashbury': 15, 'Mission District': 25},\n    'Golden Gate Park': {'Marina District': 16, 'Embarcadero': 25, 'Bayview': 23, 'Union Square': 22, 'Chinatown': 23, 'Sunset District': 10, 'Financial District': 26, 'Haight-Ashbury': 7, 'Mission District': 17},\n    'Financial District': {'Marina District': 15, 'Embarcadero': 4, 'Bayview': 19, 'Union Square': 9, 'Chinatown': 5, 'Sunset District': 30, 'Golden Gate Park': 23, 'Haight-Ashbury': 19, 'Mission District': 17},\n    'Haight-Ashbury': {'Marina District': 17, 'Embarcadero': 20, 'Bayview': 18, 'Union Square': 19, 'Chinatown': 19, 'Sunset District': 15, 'Golden Gate Park': 7, 'Financial District': 21, 'Mission District': 11},\n    'Mission District': {'Marina District': 19, 'Embarcadero': 19, 'Bayview': 14, 'Union Square': 15, 'Chinatown': 16, 'Sunset District': 24, 'Golden Gate Park': 17, 'Financial District': 15, 'Haight-Ashbury': 12}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Joshua', 'location': 'Embarcadero','start_time': '09:45', 'end_time': '18:00','min_time': 105},\n    {'person': 'Jeffrey', 'location': 'Bayview','start_time': '09:45', 'end_time': '20:15','min_time': 75},\n    {'person': 'Charles', 'location': 'Union Square','start_time': '10:45', 'end_time': '20:15','min_time': 120},\n    {'person': 'Joseph', 'location': 'Chinatown','start_time': '07:00', 'end_time': '15:30','min_time': 60},\n    {'person': 'Elizabeth', 'location': 'Sunset District','start_time': '09:00', 'end_time': '09:45','min_time': 45},\n    {'person': 'Matthew', 'location': 'Golden Gate Park','start_time': '11:00', 'end_time': '19:30','min_time': 45},\n    {'person': 'Carol', 'location': 'Financial District','start_time': '10:45', 'end_time': '11:15','min_time': 15},\n    {'person': 'Paul', 'location': 'Haight-Ashbury','start_time': '19:15', 'end_time': '20:30','min_time': 15},\n    {'person': 'Rebecca', 'location': 'Mission District','start_time': '17:00', 'end_time': '21:45','min_time': 45}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Marina District'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n            'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_813"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "9:07",
                        "end_time": "9:52"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "10:05",
                        "end_time": "12:05"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "16:00",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "19:00",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'North Beach': {'Union Square': 7, 'Russian Hill': 4},\n    'Union Square': {'North Beach': 10, 'Russian Hill': 13},\n    'Russian Hill': {'North Beach': 5, 'Union Square': 11}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Emily', 'location': 'Union Square','start_time': '16:00', 'end_time': '17:15','min_time': 45},\n    {'person': 'Margaret', 'location': 'Russian Hill','start_time': '19:00', 'end_time': '21:00','min_time': 120}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'North Beach'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n           'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_170"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Charles",
                        "start_time": "9:27",
                        "end_time": "10:12"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Robert",
                        "start_time": "10:35",
                        "end_time": "11:05"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "11:17",
                        "end_time": "12:17"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Rebecca",
                        "start_time": "12:34",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "14:10",
                        "end_time": "16:10"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Patricia",
                        "start_time": "16:29",
                        "end_time": "17:14"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:31",
                        "end_time": "18:01"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Laura",
                        "start_time": "9:14",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Charles",
                        "start_time": "11:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "14:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Rebecca",
                        "start_time": "16:24",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:59",
                        "end_time": "18:29"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Patricia",
                        "start_time": "18:46",
                        "end_time": "19:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Robert",
                        "start_time": "19:46",
                        "end_time": "20:16"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "20:28",
                        "end_time": "21:28"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Marina District': {'Bayview': 27, 'Sunset District': 19, 'Richmond District': 11, 'Nob Hill': 12, 'Chinatown': 15, 'Haight-Ashbury': 16, 'North Beach': 11, 'Russian Hill': 8, 'Embarcadero': 14},\n    'Bayview': {'Marina District': 27, 'Sunset District': 23, 'Richmond District': 25, 'Nob Hill': 20, 'Chinatown': 19, 'Haight-Ashbury': 19, 'North Beach': 22, 'Russian Hill': 23, 'Embarcadero': 19},\n    'Sunset District': {'Marina District': 21, 'Bayview': 22, 'Richmond District': 12, 'Nob Hill': 27, 'Chinatown': 30, 'Haight-Ashbury': 15, 'North Beach': 28, 'Russian Hill': 24, 'Embarcadero': 30},\n    'Richmond District': {'Marina District': 9, 'Bayview': 27, 'Sunset District': 11, 'Nob Hill': 17, 'Chinatown': 20, 'Haight-Ashbury': 10, 'North Beach': 17, 'Russian Hill': 13, 'Embarcadero': 19},\n    'Nob Hill': {'Marina District': 11, 'Bayview': 19, 'Sunset District': 24, 'Richmond District': 14, 'Chinatown': 6, 'Haight-Ashbury': 13, 'North Beach': 8, 'Russian Hill': 5, 'Embarcadero': 9},\n    'Chinatown': {'Marina District': 12, 'Bayview': 20, 'Sunset District': 29, 'Richmond District': 20, 'Nob Hill': 9, 'Haight-Ashbury': 19, 'North Beach': 3, 'Russian Hill': 7, 'Embarcadero': 5},\n    'Haight-Ashbury': {'Marina District': 17, 'Bayview': 18, 'Sunset District': 15, 'Richmond District': 10, 'Nob Hill': 15, 'Chinatown': 19, 'North Beach': 19, 'Russian Hill': 17, 'Embarcadero': 20},\n    'North Beach': {'Marina District': 9, 'Bayview': 25, 'Sunset District': 27, 'Richmond District': 18, 'Nob Hill': 7, 'Chinatown': 6, 'Haight-Ashbury': 18, 'Russian Hill': 4, 'Embarcadero': 6},\n    'Russian Hill': {'Marina District': 7, 'Bayview': 23, 'Sunset District': 23, 'Richmond District': 14, 'Nob Hill': 5, 'Chinatown': 9, 'Haight-Ashbury': 17, 'North Beach': 5, 'Embarcadero': 8},\n    'Embarcadero': {'Marina District': 12, 'Bayview': 21, 'Sunset District': 30, 'Richmond District': 21, 'Nob Hill': 10, 'Chinatown': 7, 'Haight-Ashbury': 21, 'North Beach': 5, 'Russian Hill': 8}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Charles', 'location': 'Bayview','start_time': '11:30', 'end_time': '14:30','min_time': 45},\n    {'person': 'Robert', 'location': 'Sunset District','start_time': '16:45', 'end_time': '21:00','min_time': 30},\n    {'person': 'Karen', 'location': 'Richmond District','start_time': '19:15', 'end_time': '21:30','min_time': 60},\n    {'person': 'Rebecca', 'location': 'Nob Hill','start_time': '16:15', 'end_time': '20:30','min_time': 90},\n    {'person': 'Margaret', 'location': 'Chinatown','start_time': '14:15', 'end_time': '19:45','min_time': 120},\n    {'person': 'Patricia', 'location': 'Haight-Ashbury','start_time': '14:30', 'end_time': '20:30','min_time': 45},\n    {'person': 'Mark', 'location': 'North Beach','start_time': '14:00', 'end_time': '18:30','min_time': 105},\n    {'person': 'Melissa', 'location': 'Russian Hill','start_time': '13:00', 'end_time': '19:45','min_time': 30},\n    {'person': 'Laura', 'location': 'Embarcadero','start_time': '07:45', 'end_time': '13:15','min_time': 105}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Marina District'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n           'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_892"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "9:20",
                        "end_time": "10:05"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "10:12",
                        "end_time": "11:42"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "12:00",
                        "end_time": "14:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "10:15",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "14:48",
                        "end_time": "16:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Embarcadero': {'Presidio': 20, 'Richmond District': 21, 'Fisherman\\'s Wharf': 6},\n    'Presidio': {'Embarcadero': 20, 'Richmond District': 7, 'Fisherman\\'s Wharf': 19},\n    'Richmond District': {'Embarcadero': 19, 'Presidio': 7, 'Fisherman\\'s Wharf': 18},\n    'Fisherman\\'s Wharf': {'Embarcadero': 8, 'Presidio': 17, 'Richmond District': 18}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Betty', 'location': 'Presidio','start_time': '10:15', 'end_time': '21:30','min_time': 45},\n    {'person': 'David', 'location': 'Richmond District','start_time': '13:00', 'end_time': '20:15','min_time': 90},\n    {'person': 'Barbara', 'location': 'Fisherman\\'s Wharf','start_time': '09:15', 'end_time': '20:15','min_time': 120}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Embarcadero'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n          'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_258"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Emily",
                        "start_time": "9:51",
                        "end_time": "10:21"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "10:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "12:00",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Laura",
                        "start_time": "14:16",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mary",
                        "start_time": "15:58",
                        "end_time": "16:43"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "11:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mary",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "18:26",
                        "end_time": "19:41"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Presidio': {'Pacific Heights': 11, 'Golden Gate Park': 12, 'Fisherman\\'s Wharf': 19, 'Marina District': 11, 'Alamo Square': 19, 'Sunset District': 15, 'Nob Hill': 18, 'North Beach': 18},\n    'Pacific Heights': {'Presidio': 11, 'Golden Gate Park': 15, 'Fisherman\\'s Wharf': 13, 'Marina District': 6, 'Alamo Square': 10, 'Sunset District': 21, 'Nob Hill': 8, 'North Beach': 9},\n    'Golden Gate Park': {'Presidio': 11, 'Pacific Heights': 16, 'Fisherman\\'s Wharf': 24, 'Marina District': 16, 'Alamo Square': 9, 'Sunset District': 10, 'Nob Hill': 20, 'North Beach': 23},\n    'Fisherman\\'s Wharf': {'Presidio': 17, 'Pacific Heights': 12, 'Golden Gate Park': 25, 'Marina District': 9, 'Alamo Square': 21, 'Sunset District': 27, 'Nob Hill': 11, 'North Beach': 6},\n    'Marina District': {'Presidio': 10, 'Pacific Heights': 7, 'Golden Gate Park': 18, 'Fisherman\\'s Wharf': 10, 'Alamo Square': 15, 'Sunset District': 19, 'Nob Hill': 12, 'North Beach': 11},\n    'Alamo Square': {'Presidio': 17, 'Pacific Heights': 10, 'Golden Gate Park': 9, 'Fisherman\\'s Wharf': 19, 'Marina District': 15, 'Sunset District': 16, 'Nob Hill': 11, 'North Beach': 15},\n    'Sunset District': {'Presidio': 16, 'Pacific Heights': 21, 'Golden Gate Park': 11, 'Fisherman\\'s Wharf': 29, 'Marina District': 21, 'Alamo Square': 17, 'Nob Hill': 27, 'North Beach': 28},\n    'Nob Hill': {'Presidio': 17, 'Pacific Heights': 8, 'Golden Gate Park': 17, 'Fisherman\\'s Wharf': 10, 'Marina District': 11, 'Alamo Square': 11, 'Sunset District': 24, 'North Beach': 8},\n    'North Beach': {'Presidio': 17, 'Pacific Heights': 8, 'Golden Gate Park': 22, 'Fisherman\\'s Wharf': 5, 'Marina District': 9, 'Alamo Square': 16, 'Sunset District': 27, 'Nob Hill': 7}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Kevin', 'location': 'Pacific Heights','start_time': '07:15', 'end_time': '08:45','min_time': 90},\n    {'person': 'Michelle', 'location': 'Golden Gate Park','start_time': '20:00', 'end_time': '21:00','min_time': 15},\n    {'person': 'Emily', 'location': 'Fisherman\\'s Wharf','start_time': '16:15', 'end_time': '19:00','min_time': 30},\n    {'person': 'Mark', 'location': 'Marina District','start_time': '18:15', 'end_time': '19:45','min_time': 75},\n    {'person': 'Barbara', 'location': 'Alamo Square','start_time': '17:00', 'end_time': '19:00','min_time': 120},\n    {'person': 'Laura', 'location': 'Sunset District','start_time': '19:00', 'end_time': '21:15','min_time': 75},\n    {'person': 'Mary', 'location': 'Nob Hill','start_time': '17:30', 'end_time': '19:00','min_time': 45},\n    {'person': 'Helen', 'location': 'North Beach','start_time': '11:00', 'end_time': '12:15','min_time': 45}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Presidio'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n             'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_700"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "9:19",
                        "end_time": "9:34"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:40",
                        "end_time": "10:10"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:21",
                        "end_time": "12:06"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:25",
                        "end_time": "9:55"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:06",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Bayview': {'Embarcadero': 19, 'Fisherman\\'s Wharf': 25, 'Financial District': 19},\n    'Embarcadero': {'Bayview': 21, 'Fisherman\\'s Wharf': 6, 'Financial District': 5},\n    'Fisherman\\'s Wharf': {'Bayview': 26, 'Embarcadero': 8, 'Financial District': 11},\n    'Financial District': {'Bayview': 19, 'Embarcadero': 4, 'Fisherman\\'s Wharf': 10}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Betty', 'location': 'Embarcadero','start_time': '19:45', 'end_time': '21:45','min_time': 15},\n    {'person': 'Karen', 'location': 'Fisherman\\'s Wharf','start_time': '08:45', 'end_time': '15:00','min_time': 30},\n    {'person': 'Anthony', 'location': 'Financial District','start_time': '09:15', 'end_time': '21:30','min_time': 105}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Bayview'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n             'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_263"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "9:11",
                        "end_time": "9:41"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "9:56",
                        "end_time": "11:26"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "11:37",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "13:54",
                        "end_time": "15:24"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "11:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "13:26",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "18:15",
                        "end_time": "19:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Richmond District': {'Sunset District': 11, 'Haight-Ashbury': 10, 'Mission District': 20, 'Golden Gate Park': 9},\n    'Sunset District': {'Richmond District': 12, 'Haight-Ashbury': 15, 'Mission District': 24, 'Golden Gate Park': 11},\n    'Haight-Ashbury': {'Richmond District': 10, 'Sunset District': 15, 'Mission District': 11, 'Golden Gate Park': 7},\n    'Mission District': {'Richmond District': 20, 'Sunset District': 24, 'Haight-Ashbury': 12, 'Golden Gate Park': 17},\n    'Golden Gate Park': {'Richmond District': 7, 'Sunset District': 10, 'Haight-Ashbury': 7, 'Mission District': 17}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Sarah', 'location': 'Sunset District','start_time': '10:45', 'end_time': '19:00','min_time': 30},\n    {'person': 'Richard', 'location': 'Haight-Ashbury','start_time': '11:45', 'end_time': '15:45','min_time': 90},\n    {'person': 'Elizabeth', 'location': 'Mission District','start_time': '11:00', 'end_time': '17:15','min_time': 120},\n    {'person': 'Michelle', 'location': 'Golden Gate Park','start_time': '18:15', 'end_time': '20:45','min_time': 90}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Richmond District'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n           'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_312"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Ronald",
                        "start_time": "9:08",
                        "end_time": "10:53"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "11:10",
                        "end_time": "13:10"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Joshua",
                        "start_time": "13:27",
                        "end_time": "14:57"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Margaret",
                        "start_time": "15:12",
                        "end_time": "16:12"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Ronald",
                        "start_time": "10:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "13:30",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Joshua",
                        "start_time": "15:47",
                        "end_time": "17:17"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Margaret",
                        "start_time": "17:32",
                        "end_time": "18:32"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Pacific Heights': {'Nob Hill': 8, 'Russian Hill': 7, 'The Castro': 16, 'Sunset District': 21, 'Haight-Ashbury': 11},\n    'Nob Hill': {'Pacific Heights': 8, 'Russian Hill': 5, 'The Castro': 17, 'Sunset District': 25, 'Haight-Ashbury': 13},\n    'Russian Hill': {'Pacific Heights': 7, 'Nob Hill': 5, 'The Castro': 21, 'Sunset District': 23, 'Haight-Ashbury': 17},\n    'The Castro': {'Pacific Heights': 16, 'Nob Hill': 16, 'Russian Hill': 18, 'Sunset District': 17, 'Haight-Ashbury': 6},\n    'Sunset District': {'Pacific Heights': 21, 'Nob Hill': 27, 'Russian Hill': 24, 'The Castro': 17, 'Haight-Ashbury': 15},\n    'Haight-Ashbury': {'Pacific Heights': 12, 'Nob Hill': 15, 'Russian Hill': 17, 'The Castro': 6, 'Sunset District': 15}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Ronald', 'location': 'Nob Hill','start_time': '10:00', 'end_time': '17:00','min_time': 105},\n    {'person': 'Sarah', 'location': 'Russian Hill','start_time': '07:15', 'end_time': '09:30','min_time': 45},\n    {'person': 'Helen', 'location': 'The Castro','start_time': '13:30', 'end_time': '17:00','min_time': 120},\n    {'person': 'Joshua', 'location': 'Sunset District','start_time': '14:15', 'end_time': '19:30','min_time': 90},\n    {'person': 'Margaret', 'location': 'Haight-Ashbury','start_time': '10:15', 'end_time': '22:00','min_time': 60}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Pacific Heights'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n          'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_488"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "16:45",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "16:45",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('Bayview', 'Embarcadero'): 19,\n    ('Bayview', 'Richmond District'): 25,\n    ('Bayview', 'Fisherman\\'s Wharf'): 25,\n    ('Embarcadero', 'Bayview'): 21,\n    ('Embarcadero', 'Richmond District'): 21,\n    ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n    ('Richmond District', 'Bayview'): 26,\n    ('Richmond District', 'Embarcadero'): 19,\n    ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n    ('Fisherman\\'s Wharf', 'Bayview'): 26,\n    ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n    ('Fisherman\\'s Wharf', 'Richmond District'): 18\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Jessica', 'location': 'Embarcadero','start_time': '16:45', 'end_time': '19:00','min_duration': 30},\n    {'person': 'Sandra', 'location': 'Richmond District','start_time': '18:30', 'end_time': '21:45','min_duration': 120},\n    {'person': 'Jason', 'location': 'Fisherman\\'s Wharf','start_time': '16:00', 'end_time': '16:45','min_duration': 30}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'Bayview'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n       'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_215"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Laura",
                        "start_time": "11:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "14:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Carol",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "9:13",
                        "end_time": "10:28"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Laura",
                        "start_time": "11:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Deborah",
                        "start_time": "13:05",
                        "end_time": "14:50"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "15:03",
                        "end_time": "17:03"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "17:08",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Elizabeth",
                        "start_time": "18:44",
                        "end_time": "19:59"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Carol",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('Golden Gate Park', 'Haight-Ashbury'): 7,\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'The Castro'): 13,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'Alamo Square'): 10,\n    ('Golden Gate Park', 'North Beach'): 24,\n    ('Golden Gate Park', 'Russian Hill'): 19,\n    ('Haight-Ashbury', 'Golden Gate Park'): 7,\n    ('Haight-Ashbury', 'Fisherman\\'s Wharf'): 23,\n    ('Haight-Ashbury', 'The Castro'): 6,\n    ('Haight-Ashbury', 'Chinatown'): 19,\n    ('Haight-Ashbury', 'Alamo Square'): 5,\n    ('Haight-Ashbury', 'North Beach'): 19,\n    ('Haight-Ashbury', 'Russian Hill'): 17,\n    ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n    ('Fisherman\\'s Wharf', 'Haight-Ashbury'): 22,\n    ('Fisherman\\'s Wharf', 'The Castro'): 26,\n    ('Fisherman\\'s Wharf', 'Chinatown'): 12,\n    ('Fisherman\\'s Wharf', 'Alamo Square'): 20,\n    ('Fisherman\\'s Wharf', 'North Beach'): 6,\n    ('Fisherman\\'s Wharf', 'Russian Hill'): 7,\n    ('The Castro', 'Golden Gate Park'): 11,\n    ('The Castro', 'Haight-Ashbury'): 6,\n    ('The Castro', 'Fisherman\\'s Wharf'): 24,\n    ('The Castro', 'Chinatown'): 20,\n    ('The Castro', 'Alamo Square'): 8,\n    ('The Castro', 'North Beach'): 20,\n    ('The Castro', 'Russian Hill'): 18,\n    ('Chinatown', 'Golden Gate Park'): 23,\n    ('Chinatown', 'Haight-Ashbury'): 19,\n    ('Chinatown', 'Fisherman\\'s Wharf'): 8,\n    ('Chinatown', 'The Castro'): 22,\n    ('Chinatown', 'Alamo Square'): 17,\n    ('Chinatown', 'North Beach'): 3,\n    ('Chinatown', 'Russian Hill'): 7,\n    ('Alamo Square', 'Golden Gate Park'): 9,\n    ('Alamo Square', 'Haight-Ashbury'): 5,\n    ('Alamo Square', 'Fisherman\\'s Wharf'): 19,\n    ('Alamo Square', 'The Castro'): 8,\n    ('Alamo Square', 'Chinatown'): 16,\n    ('Alamo Square', 'North Beach'): 15,\n    ('Alamo Square', 'Russian Hill'): 13,\n    ('North Beach', 'Golden Gate Park'): 22,\n    ('North Beach', 'Haight-Ashbury'): 18,\n    ('North Beach', 'Fisherman\\'s Wharf'): 5,\n    ('North Beach', 'The Castro'): 22,\n    ('North Beach', 'Chinatown'): 6,\n    ('North Beach', 'Alamo Square'): 16,\n    ('North Beach', 'Russian Hill'): 4,\n    ('Russian Hill', 'Golden Gate Park'): 21,\n    ('Russian Hill', 'Haight-Ashbury'): 17,\n    ('Russian Hill', 'Fisherman\\'s Wharf'): 7,\n    ('Russian Hill', 'The Castro'): 21,\n    ('Russian Hill', 'Chinatown'): 9,\n    ('Russian Hill', 'Alamo Square'): 15,\n    ('Russian Hill', 'North Beach'): 5\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Carol', 'location': 'Haight-Ashbury','start_time': '21:30', 'end_time': '22:30','min_duration': 60},\n    {'person': 'Laura', 'location': 'Fisherman\\'s Wharf','start_time': '11:45', 'end_time': '21:30','min_duration': 60},\n    {'person': 'Karen', 'location': 'The Castro','start_time': '07:15', 'end_time': '14:00','min_duration': 75},\n    {'person': 'Elizabeth', 'location': 'Chinatown','start_time': '12:15', 'end_time': '21:30','min_duration': 75},\n    {'person': 'Deborah', 'location': 'Alamo Square','start_time': '12:00', 'end_time': '15:00','min_duration': 105},\n    {'person': 'Jason', 'location': 'North Beach','start_time': '14:45', 'end_time': '19:00','min_duration': 90},\n    {'person': 'Steven', 'location': 'Russian Hill','start_time': '14:45', 'end_time': '18:30','min_duration': 120}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'Golden Gate Park'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n       'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_624"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "John",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "11:19",
                        "end_time": "11:34"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "12:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "John",
                        "start_time": "14:07",
                        "end_time": "14:52"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "19:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n    ('Embarcadero', 'Financial District'): 5,\n    ('Embarcadero', 'Russian Hill'): 8,\n    ('Embarcadero', 'Marina District'): 12,\n    ('Embarcadero', 'Richmond District'): 21,\n    ('Embarcadero', 'Pacific Heights'): 11,\n    ('Embarcadero', 'Haight-Ashbury'): 21,\n    ('Embarcadero', 'Presidio'): 20,\n    ('Embarcadero', 'Nob Hill'): 10,\n    ('Embarcadero', 'The Castro'): 25,\n    ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'Russian Hill'): 7,\n    ('Fisherman\\'s Wharf', 'Marina District'): 9,\n    ('Fisherman\\'s Wharf', 'Richmond District'): 18,\n    ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n    ('Fisherman\\'s Wharf', 'Haight-Ashbury'): 22,\n    ('Fisherman\\'s Wharf', 'Presidio'): 17,\n    ('Fisherman\\'s Wharf', 'Nob Hill'): 11,\n    ('Fisherman\\'s Wharf', 'The Castro'): 27,\n    ('Financial District', 'Embarcadero'): 4,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Financial District', 'Russian Hill'): 11,\n    ('Financial District', 'Marina District'): 15,\n    ('Financial District', 'Richmond District'): 21,\n    ('Financial District', 'Pacific Heights'): 13,\n    ('Financial District', 'Haight-Ashbury'): 19,\n    ('Financial District', 'Presidio'): 22,\n    ('Financial District', 'Nob Hill'): 8,\n    ('Financial District', 'The Castro'): 20,\n    ('Russian Hill', 'Embarcadero'): 8,\n    ('Russian Hill', 'Fisherman\\'s Wharf'): 7,\n    ('Russian Hill', 'Financial District'): 11,\n    ('Russian Hill', 'Marina District'): 7,\n    ('Russian Hill', 'Richmond District'): 14,\n    ('Russian Hill', 'Pacific Heights'): 7,\n    ('Russian Hill', 'Haight-Ashbury'): 17,\n    ('Russian Hill', 'Presidio'): 14,\n    ('Russian Hill', 'Nob Hill'): 5,\n    ('Russian Hill', 'The Castro'): 21,\n    ('Marina District', 'Embarcadero'): 14,\n    ('Marina District', 'Fisherman\\'s Wharf'): 10,\n    ('Marina District', 'Financial District'): 17,\n    ('Marina District', 'Russian Hill'): 8,\n    ('Marina District', 'Richmond District'): 11,\n    ('Marina District', 'Pacific Heights'): 7,\n    ('Marina District', 'Haight-Ashbury'): 16,\n    ('Marina District', 'Presidio'): 10,\n    ('Marina District', 'Nob Hill'): 12,\n    ('Marina District', 'The Castro'): 22,\n    ('Richmond District', 'Embarcadero'): 19,\n    ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n    ('Richmond District', 'Financial District'): 22,\n    ('Richmond District', 'Russian Hill'): 13,\n    ('Richmond District', 'Marina District'): 9,\n    ('Richmond District', 'Pacific Heights'): 10,\n    ('Richmond District', 'Haight-Ashbury'): 10,\n    ('Richmond District', 'Presidio'): 7,\n    ('Richmond District', 'Nob Hill'): 17,\n    ('Richmond District', 'The Castro'): 16,\n    ('Pacific Heights', 'Embarcadero'): 10,\n    ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n    ('Pacific Heights', 'Financial District'): 13,\n    ('Pacific Heights', 'Russian Hill'): 7,\n    ('Pacific Heights', 'Marina District'): 6,\n    ('Pacific Heights', 'Richmond District'): 12,\n    ('Pacific Heights', 'Haight-Ashbury'): 11,\n    ('Pacific Heights', 'Presidio'): 11,\n    ('Pacific Heights', 'Nob Hill'): 8,\n    ('Pacific Heights', 'The Castro'): 16,\n    ('Haight-Ashbury', 'Embarcadero'): 20,\n    ('Haight-Ashbury', 'Fisherman\\'s Wharf'): 23,\n    ('Haight-Ashbury', 'Financial District'): 21,\n    ('Haight-Ashbury', 'Russian Hill'): 17,\n    ('Haight-Ashbury', 'Marina District'): 17,\n    ('Haight-Ashbury', 'Richmond District'): 10,\n    ('Haight-Ashbury', 'Pacific Heights'): 12,\n    ('Haight-Ashbury', 'Presidio'): 15,\n    ('Haight-Ashbury', 'Nob Hill'): 15,\n    ('Haight-Ashbury', 'The Castro'): 6,\n    ('Presidio', 'Embarcadero'): 20,\n    ('Presidio', 'Fisherman\\'s Wharf'): 19,\n    ('Presidio', 'Financial District'): 23,\n    ('Presidio', 'Russian Hill'): 14,\n    ('Presidio', 'Marina District'): 11,\n    ('Presidio', 'Richmond District'): 7,\n    ('Presidio', 'Pacific Heights'): 11,\n    ('Presidio', 'Haight-Ashbury'): 15,\n    ('Presidio', 'Nob Hill'): 18,\n    ('Presidio', 'The Castro'): 21,\n    ('Nob Hill', 'Embarcadero'): 9,\n    ('Nob Hill', 'Fisherman\\'s Wharf'): 10,\n    ('Nob Hill', 'Financial District'): 9,\n    ('Nob Hill', 'Russian Hill'): 5,\n    ('Nob Hill', 'Marina District'): 11,\n    ('Nob Hill', 'Richmond District'): 14,\n    ('Nob Hill', 'Pacific Heights'): 8,\n    ('Nob Hill', 'Haight-Ashbury'): 13,\n    ('Nob Hill', 'Presidio'): 17,\n    ('Nob Hill', 'The Castro'): 17,\n    ('The Castro', 'Embarcadero'): 22,\n    ('The Castro', 'Fisherman\\'s Wharf'): 24,\n    ('The Castro', 'Financial District'): 21,\n    ('The Castro', 'Russian Hill'): 18,\n    ('The Castro', 'Marina District'): 21,\n    ('The Castro', 'Richmond District'): 16,\n    ('The Castro', 'Pacific Heights'): 16,\n    ('The Castro', 'Haight-Ashbury'): 6,\n    ('The Castro', 'Presidio'): 20,\n    ('The Castro', 'Nob Hill'): 16\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Stephanie', 'location': 'Fisherman\\'s Wharf','start_time': '15:30', 'end_time': '22:00','min_duration': 30},\n    {'person': 'Lisa', 'location': 'Financial District','start_time': '10:45', 'end_time': '17:15','min_duration': 15},\n    {'person': 'Melissa', 'location': 'Russian Hill','start_time': '17:00', 'end_time': '21:45','min_duration': 120},\n    {'person': 'Betty', 'location': 'Marina District','start_time': '10:45', 'end_time': '14:15','min_duration': 60},\n    {'person': 'Sarah', 'location': 'Richmond District','start_time': '16:15', 'end_time': '19:30','min_duration': 105},\n    {'person': 'Daniel', 'location': 'Pacific Heights','start_time': '18:30', 'end_time': '21:45','min_duration': 60},\n    {'person': 'Joshua', 'location': 'Haight-Ashbury','start_time': '09:00', 'end_time': '15:30','min_duration': 15},\n    {'person': 'Joseph', 'location': 'Presidio','start_time': '07:00', 'end_time': '13:00','min_duration': 45},\n    {'person': 'Andrew', 'location': 'Nob Hill','start_time': '19:45', 'end_time': '22:00','min_duration': 105},\n    {'person': 'John', 'location': 'The Castro','start_time': '13:15', 'end_time': '19:45','min_duration': 45}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'Embarcadero'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n      'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_978"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "11:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "13:15",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "17:30",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "20:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "11:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Sarah",
                        "start_time": "12:04",
                        "end_time": "13:34"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "13:49",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:52",
                        "end_time": "16:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Thomas",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "20:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('Nob Hill', 'Embarcadero'): 9,\n    ('Nob Hill', 'The Castro'): 17,\n    ('Nob Hill', 'Haight-Ashbury'): 13,\n    ('Nob Hill', 'Union Square'): 7,\n    ('Nob Hill', 'North Beach'): 8,\n    ('Nob Hill', 'Pacific Heights'): 8,\n    ('Nob Hill', 'Chinatown'): 6,\n    ('Nob Hill', 'Golden Gate Park'): 17,\n    ('Nob Hill', 'Marina District'): 11,\n    ('Nob Hill', 'Russian Hill'): 5,\n    ('Embarcadero', 'Nob Hill'): 10,\n    ('Embarcadero', 'The Castro'): 25,\n    ('Embarcadero', 'Haight-Ashbury'): 21,\n    ('Embarcadero', 'Union Square'): 10,\n    ('Embarcadero', 'North Beach'): 5,\n    ('Embarcadero', 'Pacific Heights'): 11,\n    ('Embarcadero', 'Chinatown'): 7,\n    ('Embarcadero', 'Golden Gate Park'): 25,\n    ('Embarcadero', 'Marina District'): 12,\n    ('Embarcadero', 'Russian Hill'): 8,\n    ('The Castro', 'Nob Hill'): 16,\n    ('The Castro', 'Embarcadero'): 22,\n    ('The Castro', 'Haight-Ashbury'): 6,\n    ('The Castro', 'Union Square'): 19,\n    ('The Castro', 'North Beach'): 20,\n    ('The Castro', 'Pacific Heights'): 16,\n    ('The Castro', 'Chinatown'): 22,\n    ('The Castro', 'Golden Gate Park'): 11,\n    ('The Castro', 'Marina District'): 21,\n    ('The Castro', 'Russian Hill'): 18,\n    ('Haight-Ashbury', 'Nob Hill'): 15,\n    ('Haight-Ashbury', 'Embarcadero'): 20,\n    ('Haight-Ashbury', 'The Castro'): 6,\n    ('Haight-Ashbury', 'Union Square'): 19,\n    ('Haight-Ashbury', 'North Beach'): 19,\n    ('Haight-Ashbury', 'Pacific Heights'): 12,\n    ('Haight-Ashbury', 'Chinatown'): 19,\n    ('Haight-Ashbury', 'Golden Gate Park'): 7,\n    ('Haight-Ashbury', 'Marina District'): 17,\n    ('Haight-Ashbury', 'Russian Hill'): 17,\n    ('Union Square', 'Nob Hill'): 9,\n    ('Union Square', 'Embarcadero'): 11,\n    ('Union Square', 'The Castro'): 17,\n    ('Union Square', 'Haight-Ashbury'): 18,\n    ('Union Square', 'North Beach'): 10,\n    ('Union Square', 'Pacific Heights'): 15,\n    ('Union Square', 'Chinatown'): 7,\n    ('Union Square', 'Golden Gate Park'): 22,\n    ('Union Square', 'Marina District'): 18,\n    ('Union Square', 'Russian Hill'): 13,\n    ('North Beach', 'Nob Hill'): 7,\n    ('North Beach', 'Embarcadero'): 6,\n    ('North Beach', 'The Castro'): 23,\n    ('North Beach', 'Haight-Ashbury'): 18,\n    ('North Beach', 'Union Square'): 7,\n    ('North Beach', 'Pacific Heights'): 8,\n    ('North Beach', 'Chinatown'): 6,\n    ('North Beach', 'Golden Gate Park'): 22,\n    ('North Beach', 'Marina District'): 9,\n    ('North Beach', 'Russian Hill'): 4,\n    ('Pacific Heights', 'Nob Hill'): 8,\n    ('Pacific Heights', 'Embarcadero'): 10,\n    ('Pacific Heights', 'The Castro'): 16,\n    ('Pacific Heights', 'Haight-Ashbury'): 11,\n    ('Pacific Heights', 'Union Square'): 12,\n    ('Pacific Heights', 'North Beach'): 9,\n    ('Pacific Heights', 'Chinatown'): 11,\n    ('Pacific Heights', 'Golden Gate Park'): 15,\n    ('Pacific Heights', 'Marina District'): 6,\n    ('Pacific Heights', 'Russian Hill'): 7,\n    ('Chinatown', 'Nob Hill'): 9,\n    ('Chinatown', 'Embarcadero'): 5,\n    ('Chinatown', 'The Castro'): 22,\n    ('Chinatown', 'Haight-Ashbury'): 19,\n    ('Chinatown', 'Union Square'): 7,\n    ('Chinatown', 'North Beach'): 3,\n    ('Chinatown', 'Pacific Heights'): 10,\n    ('Chinatown', 'Golden Gate Park'): 23,\n    ('Chinatown', 'Marina District'): 12,\n    ('Chinatown', 'Russian Hill'): 7,\n    ('Golden Gate Park', 'Nob Hill'): 20,\n    ('Golden Gate Park', 'Embarcadero'): 25,\n    ('Golden Gate Park', 'The Castro'): 13,\n    ('Golden Gate Park', 'Haight-Ashbury'): 7,\n    ('Golden Gate Park', 'Union Square'): 22,\n    ('Golden Gate Park', 'North Beach'): 23,\n    ('Golden Gate Park', 'Pacific Heights'): 16,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'Marina District'): 16,\n    ('Golden Gate Park', 'Russian Hill'): 19,\n    ('Marina District', 'Nob Hill'): 12,\n    ('Marina District', 'Embarcadero'): 14,\n    ('Marina District', 'The Castro'): 22,\n    ('Marina District', 'Haight-Ashbury'): 16,\n    ('Marina District', 'Union Square'): 16,\n    ('Marina District', 'North Beach'): 11,\n    ('Marina District', 'Pacific Heights'): 7,\n    ('Marina District', 'Chinatown'): 15,\n    ('Marina District', 'Golden Gate Park'): 18,\n    ('Marina District', 'Russian Hill'): 8,\n    ('Russian Hill', 'Nob Hill'): 5,\n    ('Russian Hill', 'Embarcadero'): 8,\n    ('Russian Hill', 'The Castro'): 21,\n    ('Russian Hill', 'Haight-Ashbury'): 17,\n    ('Russian Hill', 'Union Square'): 10,\n    ('Russian Hill', 'North Beach'): 5,\n    ('Russian Hill', 'Pacific Heights'): 7,\n    ('Russian Hill', 'Chinatown'): 9,\n    ('Russian Hill', 'Golden Gate Park'): 21,\n    ('Russian Hill', 'Marina District'): 7\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Mary', 'location': 'Embarcadero','start_time': '20:00', 'end_time': '21:15','min_duration': 75},\n    {'person': 'Kenneth', 'location': 'The Castro','start_time': '11:15', 'end_time': '19:15','min_duration': 30},\n    {'person': 'Joseph', 'location': 'Haight-Ashbury','start_time': '20:00', 'end_time': '22:00','min_duration': 120},\n    {'person': 'Sarah', 'location': 'Union Square','start_time': '11:45', 'end_time': '14:30','min_duration': 90},\n    {'person': 'Thomas', 'location': 'North Beach','start_time': '19:15', 'end_time': '19:45','min_duration': 15},\n    {'person': 'Daniel', 'location': 'Pacific Heights','start_time': '13:45', 'end_time': '20:30','min_duration': 15},\n    {'person': 'Richard', 'location': 'Chinatown','start_time': '08:00', 'end_time': '18:45','min_duration': 30},\n    {'person': 'Mark', 'location': 'Golden Gate Park','start_time': '17:30', 'end_time': '21:30','min_duration': 120},\n    {'person': 'David', 'location': 'Marina District','start_time': '20:00', 'end_time': '21:00','min_duration': 60},\n    {'person': 'Karen', 'location': 'Russian Hill','start_time': '13:15', 'end_time': '18:30','min_duration': 120}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'Nob Hill'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n     'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_934"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "15:19",
                        "end_time": "16:34"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "16:57",
                        "end_time": "17:27"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:42",
                        "end_time": "19:27"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Rebecca",
                        "start_time": "19:42",
                        "end_time": "20:42"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('The Castro', 'Presidio'): 20,\n    ('The Castro', 'Sunset District'): 17,\n    ('The Castro', 'Haight-Ashbury'): 6,\n    ('The Castro', 'Mission District'): 7,\n    ('The Castro', 'Golden Gate Park'): 11,\n    ('The Castro', 'Russian Hill'): 18,\n    ('Presidio', 'The Castro'): 21,\n    ('Presidio', 'Sunset District'): 15,\n    ('Presidio', 'Haight-Ashbury'): 15,\n    ('Presidio', 'Mission District'): 26,\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Presidio', 'Russian Hill'): 14,\n    ('Sunset District', 'The Castro'): 17,\n    ('Sunset District', 'Presidio'): 16,\n    ('Sunset District', 'Haight-Ashbury'): 15,\n    ('Sunset District', 'Mission District'): 24,\n    ('Sunset District', 'Golden Gate Park'): 11,\n    ('Sunset District', 'Russian Hill'): 24,\n    ('Haight-Ashbury', 'The Castro'): 6,\n    ('Haight-Ashbury', 'Presidio'): 15,\n    ('Haight-Ashbury', 'Sunset District'): 15,\n    ('Haight-Ashbury', 'Mission District'): 11,\n    ('Haight-Ashbury', 'Golden Gate Park'): 7,\n    ('Haight-Ashbury', 'Russian Hill'): 17,\n    ('Mission District', 'The Castro'): 7,\n    ('Mission District', 'Presidio'): 25,\n    ('Mission District', 'Sunset District'): 24,\n    ('Mission District', 'Haight-Ashbury'): 12,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Mission District', 'Russian Hill'): 15,\n    ('Golden Gate Park', 'The Castro'): 13,\n    ('Golden Gate Park', 'Presidio'): 11,\n    ('Golden Gate Park', 'Sunset District'): 10,\n    ('Golden Gate Park', 'Haight-Ashbury'): 7,\n    ('Golden Gate Park', 'Mission District'): 17,\n    ('Golden Gate Park', 'Russian Hill'): 19,\n    ('Russian Hill', 'The Castro'): 21,\n    ('Russian Hill', 'Presidio'): 14,\n    ('Russian Hill', 'Sunset District'): 23,\n    ('Russian Hill', 'Haight-Ashbury'): 17,\n    ('Russian Hill', 'Mission District'): 16,\n    ('Russian Hill', 'Golden Gate Park'): 21\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Rebecca', 'location': 'Presidio','start_time': '18:15', 'end_time': '20:45','min_duration': 60},\n    {'person': 'Linda', 'location': 'Sunset District','start_time': '15:30', 'end_time': '19:45','min_duration': 30},\n    {'person': 'Elizabeth', 'location': 'Haight-Ashbury','start_time': '17:15', 'end_time': '19:30','min_duration': 105},\n    {'person': 'William', 'location': 'Mission District','start_time': '13:15', 'end_time': '19:30','min_duration': 30},\n    {'person': 'Robert', 'location': 'Golden Gate Park','start_time': '14:15', 'end_time': '21:30','min_duration': 45},\n    {'person': 'Mark', 'location': 'Russian Hill','start_time': '10:00', 'end_time': '21:15','min_duration': 75}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'The Castro'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n    'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_575"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('Bayview', 'North Beach'): 21,\n    ('Bayview', 'Presidio'): 31,\n    ('Bayview', 'Haight-Ashbury'): 19,\n    ('Bayview', 'Union Square'): 17,\n    ('North Beach', 'Bayview'): 22,\n    ('North Beach', 'Presidio'): 17,\n    ('North Beach', 'Haight-Ashbury'): 18,\n    ('North Beach', 'Union Square'): 7,\n    ('Presidio', 'Bayview'): 31,\n    ('Presidio', 'North Beach'): 18,\n    ('Presidio', 'Haight-Ashbury'): 15,\n    ('Presidio', 'Union Square'): 22,\n    ('Haight-Ashbury', 'Bayview'): 18,\n    ('Haight-Ashbury', 'North Beach'): 19,\n    ('Haight-Ashbury', 'Presidio'): 15,\n    ('Haight-Ashbury', 'Union Square'): 17,\n    ('Union Square', 'Bayview'): 15,\n    ('Union Square', 'North Beach'): 10,\n    ('Union Square', 'Presidio'): 24,\n    ('Union Square', 'Haight-Ashbury'): 18\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Barbara', 'location': 'North Beach','start_time': '13:45', 'end_time': '20:15','min_duration': 60},\n    {'person': 'Margaret', 'location': 'Presidio','start_time': '10:15', 'end_time': '15:15','min_duration': 30},\n    {'person': 'Kevin', 'location': 'Haight-Ashbury','start_time': '20:00', 'end_time': '20:45','min_duration': 30},\n    {'person': 'Kimberly', 'location': 'Union Square','start_time': '07:45', 'end_time': '16:45','min_duration': 30}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'Bayview'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n   'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_356"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "11:30",
                        "end_time": "13:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Karen",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "14:58",
                        "end_time": "16:58"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('Union Square', 'Mission District'): 14,\n    ('Union Square', 'Bayview'): 15,\n    ('Union Square', 'Sunset District'): 26,\n    ('Mission District', 'Union Square'): 15,\n    ('Mission District', 'Bayview'): 15,\n    ('Mission District', 'Sunset District'): 24,\n    ('Bayview', 'Union Square'): 17,\n    ('Bayview', 'Mission District'): 13,\n    ('Bayview', 'Sunset District'): 23,\n    ('Sunset District', 'Union Square'): 30,\n    ('Sunset District', 'Mission District'): 24,\n    ('Sunset District', 'Bayview'): 22\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Rebecca', 'location': 'Mission District','start_time': '11:30', 'end_time': '20:15','min_duration': 120},\n    {'person': 'Karen', 'location': 'Bayview','start_time': '12:45', 'end_time': '15:00','min_duration': 120},\n    {'person': 'Carol', 'location': 'Sunset District','start_time': '10:15', 'end_time': '11:45','min_duration': 30}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'Union Square'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n  'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_286"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joseph",
                        "start_time": "18:14",
                        "end_time": "20:14"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joseph",
                        "start_time": "18:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Melissa",
                        "start_time": "20:29",
                        "end_time": "21:44"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Fisherman\\'s Wharf': {'Presidio': 17, 'Richmond District': 18, 'Financial District': 11},\n    'Presidio': {'Fisherman\\'s Wharf': 19, 'Richmond District': 7, 'Financial District': 23},\n    'Richmond District': {'Fisherman\\'s Wharf': 18, 'Presidio': 7, 'Financial District': 22},\n    'Financial District': {'Fisherman\\'s Wharf': 10, 'Presidio': 22, 'Richmond District': 21}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Emily': {'location': 'Presidio','start_time': '16:15', 'end_time': '21:00', 'duration': 105},\n    'Joseph': {'location': 'Richmond District','start_time': '17:15', 'end_time': '22:00', 'duration': 120},\n    'Melissa': {'location': 'Financial District','start_time': '15:45', 'end_time': '21:45', 'duration': 75}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Fisherman\\'s Wharf'\n    current_time = '9:00'\n\n    # Calculate the schedule for each person\n    for person, constraint in meeting_constraints.items():\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n           'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n        # Add travel time to the next location\n        next_person = next((p for p, c in meeting_constraints.items() if c['location']!= current_location), None)\n        if next_person:\n            next_location = meeting_constraints[next_person]['location']\n            travel_time = travel_distances[current_location][next_location]\n            current_time = add_time(current_time, travel_time)\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_210"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "11:34",
                        "end_time": "13:19"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Andrew",
                        "start_time": "20:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "15:57",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Alamo Square': {'Russian Hill': 13, 'Presidio': 18, 'Chinatown': 16, 'Sunset District': 16, 'The Castro': 8, 'Embarcadero': 17, 'Golden Gate Park': 9},\n    'Russian Hill': {'Alamo Square': 15, 'Presidio': 14, 'Chinatown': 9, 'Sunset District': 23, 'The Castro': 21, 'Embarcadero': 8, 'Golden Gate Park': 21},\n    'Presidio': {'Alamo Square': 18, 'Russian Hill': 14, 'Chinatown': 21, 'Sunset District': 15, 'The Castro': 21, 'Embarcadero': 20, 'Golden Gate Park': 12},\n    'Chinatown': {'Alamo Square': 17, 'Russian Hill': 7, 'Presidio': 19, 'Sunset District': 29, 'The Castro': 22, 'Embarcadero': 5, 'Golden Gate Park': 23},\n    'Sunset District': {'Alamo Square': 17, 'Russian Hill': 24, 'Presidio': 16, 'Chinatown': 30, 'The Castro': 17, 'Embarcadero': 31, 'Golden Gate Park': 11},\n    'The Castro': {'Alamo Square': 8, 'Russian Hill': 18, 'Presidio': 20, 'Chinatown': 20, 'Sunset District': 17, 'Embarcadero': 22, 'Golden Gate Park': 11},\n    'Embarcadero': {'Alamo Square': 19, 'Russian Hill': 8, 'Presidio': 20, 'Chinatown': 7, 'Sunset District': 30, 'The Castro': 25, 'Golden Gate Park': 25},\n    'Golden Gate Park': {'Alamo Square': 10, 'Russian Hill': 19, 'Presidio': 11, 'Chinatown': 23, 'Sunset District': 10, 'The Castro': 13, 'Embarcadero': 25}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Emily': {'location': 'Russian Hill','start_time': '12:15', 'end_time': '14:15', 'duration': 105},\n    'Mark': {'location': 'Presidio','start_time': '14:45', 'end_time': '19:30', 'duration': 60},\n    'Deborah': {'location': 'Chinatown','start_time': '07:30', 'end_time': '15:30', 'duration': 45},\n    'Margaret': {'location': 'Sunset District','start_time': '21:30', 'end_time': '22:30', 'duration': 60},\n    'George': {'location': 'The Castro','start_time': '07:30', 'end_time': '14:15', 'duration': 60},\n    'Andrew': {'location': 'Embarcadero','start_time': '20:15', 'end_time': '22:00', 'duration': 75},\n    'Steven': {'location': 'Golden Gate Park','start_time': '11:15', 'end_time': '21:15', 'duration': 105}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Alamo Square'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n          'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_612"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Linda",
                        "start_time": "9:17",
                        "end_time": "9:32"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Anthony",
                        "start_time": "9:43",
                        "end_time": "11:28"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:39",
                        "end_time": "13:39"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "13:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Paul",
                        "start_time": "14:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Margaret",
                        "start_time": "16:33",
                        "end_time": "17:18"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "17:45",
                        "end_time": "19:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "9:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Linda",
                        "start_time": "11:26",
                        "end_time": "11:41"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Anthony",
                        "start_time": "11:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "13:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Paul",
                        "start_time": "14:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "17:30",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "19:52",
                        "end_time": "21:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Russian Hill': {'Pacific Heights': 7, 'North Beach': 5, 'Golden Gate Park': 21, 'Embarcadero': 8, 'Haight-Ashbury': 17, 'Fisherman\\'s Wharf': 7, 'Mission District': 16, 'Alamo Square': 15, 'Bayview': 23, 'Richmond District': 14},\n    'Pacific Heights': {'Russian Hill': 7, 'North Beach': 9, 'Golden Gate Park': 15, 'Embarcadero': 10, 'Haight-Ashbury': 11, 'Fisherman\\'s Wharf': 13, 'Mission District': 15, 'Alamo Square': 10, 'Bayview': 22, 'Richmond District': 12},\n    'North Beach': {'Russian Hill': 4, 'Pacific Heights': 8, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Haight-Ashbury': 18, 'Fisherman\\'s Wharf': 5, 'Mission District': 18, 'Alamo Square': 16, 'Bayview': 25, 'Richmond District': 18},\n    'Golden Gate Park': {'Russian Hill': 19, 'Pacific Heights': 16, 'North Beach': 23, 'Embarcadero': 25, 'Haight-Ashbury': 7, 'Fisherman\\'s Wharf': 24, 'Mission District': 17, 'Alamo Square': 9, 'Bayview': 23, 'Richmond District': 7},\n    'Embarcadero': {'Russian Hill': 8, 'Pacific Heights': 11, 'North Beach': 5, 'Golden Gate Park': 25, 'Haight-Ashbury': 21, 'Fisherman\\'s Wharf': 6, 'Mission District': 20, 'Alamo Square': 19, 'Bayview': 21, 'Richmond District': 21},\n    'Haight-Ashbury': {'Russian Hill': 17, 'Pacific Heights': 12, 'North Beach': 19, 'Golden Gate Park': 7, 'Embarcadero': 20, 'Fisherman\\'s Wharf': 23, 'Mission District': 11, 'Alamo Square': 5, 'Bayview': 18, 'Richmond District': 10},\n    'Fisherman\\'s Wharf': {'Russian Hill': 7, 'Pacific Heights': 12, 'North Beach': 6, 'Golden Gate Park': 25, 'Embarcadero': 8, 'Haight-Ashbury': 22, 'Mission District': 22, 'Alamo Square': 21, 'Bayview': 26, 'Richmond District': 18},\n    'Mission District': {'Russian Hill': 15, 'Pacific Heights': 16, 'North Beach': 17, 'Golden Gate Park': 17, 'Embarcadero': 19, 'Haight-Ashbury': 12, 'Fisherman\\'s Wharf': 22, 'Alamo Square': 11, 'Bayview': 14, 'Richmond District': 20},\n    'Alamo Square': {'Russian Hill': 13, 'Pacific Heights': 10, 'North Beach': 15, 'Golden Gate Park': 9, 'Embarcadero': 16, 'Haight-Ashbury': 5, 'Fisherman\\'s Wharf': 19, 'Mission District': 10, 'Bayview': 16, 'Richmond District': 11},\n    'Bayview': {'Russian Hill': 23, 'Pacific Heights': 23, 'North Beach': 22, 'Golden Gate Park': 22, 'Embarcadero': 19, 'Haight-Ashbury': 19, 'Fisherman\\'s Wharf': 25, 'Mission District': 13, 'Alamo Square': 16, 'Richmond District': 25},\n    'Richmond District': {'Russian Hill': 13, 'Pacific Heights': 10, 'North Beach': 17, 'Golden Gate Park': 9, 'Embarcadero': 19, 'Haight-Ashbury': 10, 'Fisherman\\'s Wharf': 18, 'Mission District': 20, 'Alamo Square': 13, 'Bayview': 27}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Emily': {'location': 'Pacific Heights','start_time': '09:15', 'end_time': '13:45', 'duration': 120},\n    'Helen': {'location': 'North Beach','start_time': '13:45', 'end_time': '18:45', 'duration': 30},\n    'Kimberly': {'location': 'Golden Gate Park','start_time': '18:45', 'end_time': '21:15', 'duration': 75},\n    'James': {'location': 'Embarcadero','start_time': '10:30', 'end_time': '11:30', 'duration': 30},\n    'Linda': {'location': 'Haight-Ashbury','start_time': '07:30', 'end_time': '19:15', 'duration': 15},\n    'Paul': {'location': 'Fisherman\\'s Wharf','start_time': '14:45', 'end_time': '18:45', 'duration': 90},\n    'Anthony': {'location': 'Mission District','start_time': '08:00', 'end_time': '14:45', 'duration': 105},\n    'Nancy': {'location': 'Alamo Square','start_time': '08:30', 'end_time': '13:45', 'duration': 120},\n    'William': {'location': 'Bayview','start_time': '17:30', 'end_time': '20:30', 'duration': 120},\n    'Margaret': {'location': 'Richmond District','start_time': '15:15', 'end_time': '18:15', 'duration': 45}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Russian Hill'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n           'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_901"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joshua",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Anthony",
                        "start_time": "9:41",
                        "end_time": "10:11"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Helen",
                        "start_time": "10:23",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "11:51",
                        "end_time": "12:06"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Karen",
                        "start_time": "12:21",
                        "end_time": "12:36"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "13:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "William",
                        "start_time": "15:51",
                        "end_time": "16:51"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "17:05",
                        "end_time": "17:50"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "19:00",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joshua",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Anthony",
                        "start_time": "9:41",
                        "end_time": "10:11"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Helen",
                        "start_time": "10:23",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "11:51",
                        "end_time": "12:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "William",
                        "start_time": "15:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "16:45",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Karen",
                        "start_time": "17:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "18:13",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "20:23",
                        "end_time": "21:23"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'The Castro': {'Alamo Square': 8, 'Richmond District': 16, 'Financial District': 21, 'Union Square': 19, 'Fisherman\\'s Wharf': 24, 'Marina District': 21, 'Haight-Ashbury': 6, 'Mission District': 7, 'Pacific Heights': 16, 'Golden Gate Park': 11},\n    'Alamo Square': {'The Castro': 8, 'Richmond District': 11, 'Financial District': 17, 'Union Square': 14, 'Fisherman\\'s Wharf': 19, 'Marina District': 15, 'Haight-Ashbury': 5, 'Mission District': 10, 'Pacific Heights': 10, 'Golden Gate Park': 9},\n    'Richmond District': {'The Castro': 16, 'Alamo Square': 13, 'Financial District': 22, 'Union Square': 21, 'Fisherman\\'s Wharf': 18, 'Marina District': 9, 'Haight-Ashbury': 10, 'Mission District': 20, 'Pacific Heights': 10, 'Golden Gate Park': 9},\n    'Financial District': {'The Castro': 20, 'Alamo Square': 17, 'Richmond District': 21, 'Union Square': 9, 'Fisherman\\'s Wharf': 10, 'Marina District': 15, 'Haight-Ashbury': 19, 'Mission District': 17, 'Pacific Heights': 13, 'Golden Gate Park': 23},\n    'Union Square': {'The Castro': 17, 'Alamo Square': 15, 'Richmond District': 20, 'Financial District': 9, 'Fisherman\\'s Wharf': 15, 'Marina District': 18, 'Haight-Ashbury': 18, 'Mission District': 14, 'Pacific Heights': 15, 'Golden Gate Park': 22},\n    'Fisherman\\'s Wharf': {'The Castro': 27, 'Alamo Square': 21, 'Richmond District': 18, 'Financial District': 11, 'Union Square': 13, 'Marina District': 9, 'Haight-Ashbury': 22, 'Mission District': 22, 'Pacific Heights': 12, 'Golden Gate Park': 25},\n    'Marina District': {'The Castro': 22, 'Alamo Square': 15, 'Richmond District': 11, 'Financial District': 17, 'Union Square': 16, 'Fisherman\\'s Wharf': 10, 'Haight-Ashbury': 16, 'Mission District': 20, 'Pacific Heights': 7, 'Golden Gate Park': 18},\n    'Haight-Ashbury': {'The Castro': 6, 'Alamo Square': 5, 'Richmond District': 10, 'Financial District': 21, 'Union Square': 19, 'Fisherman\\'s Wharf': 23, 'Marina District': 17, 'Mission District': 11, 'Pacific Heights': 12, 'Golden Gate Park': 7},\n    'Mission District': {'The Castro': 7, 'Alamo Square': 11, 'Richmond District': 20, 'Financial District': 15, 'Union Square': 15, 'Fisherman\\'s Wharf': 22, 'Marina District': 19, 'Haight-Ashbury': 12, 'Pacific Heights': 16, 'Golden Gate Park': 17},\n    'Pacific Heights': {'The Castro': 16, 'Alamo Square': 10, 'Richmond District': 12, 'Financial District': 13, 'Union Square': 12, 'Fisherman\\'s Wharf': 13, 'Marina District': 6, 'Haight-Ashbury': 11, 'Mission District': 15, 'Golden Gate Park': 15},\n    'Golden Gate Park': {'The Castro': 13, 'Alamo Square': 9, 'Richmond District': 7, 'Financial District': 26, 'Union Square': 22, 'Fisherman\\'s Wharf': 24, 'Marina District': 16, 'Haight-Ashbury': 7, 'Mission District': 17, 'Pacific Heights': 16}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'William': {'location': 'Alamo Square','start_time': '15:15', 'end_time': '17:15', 'duration': 60},\n    'Joshua': {'location': 'Richmond District','start_time': '07:00', 'end_time': '20:00', 'duration': 15},\n    'Joseph': {'location': 'Financial District','start_time': '11:15', 'end_time': '13:30', 'duration': 15},\n    'David': {'location': 'Union Square','start_time': '16:45', 'end_time': '19:15', 'duration': 45},\n    'Brian': {'location': 'Fisherman\\'s Wharf','start_time': '13:45', 'end_time': '20:45', 'duration': 105},\n    'Karen': {'location': 'Marina District','start_time': '11:30', 'end_time': '18:30', 'duration': 15},\n    'Anthony': {'location': 'Haight-Ashbury','start_time': '07:15', 'end_time': '10:30', 'duration': 30},\n    'Matthew': {'location': 'Mission District','start_time': '17:15', 'end_time': '19:15', 'duration': 120},\n    'Helen': {'location': 'Pacific Heights','start_time': '08:00', 'end_time': '12:00', 'duration': 75},\n    'Jeffrey': {'location': 'Golden Gate Park','start_time': '19:00', 'end_time': '21:30', 'duration': 60}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'The Castro'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n         'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_956"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Russian Hill': {'Pacific Heights': 7},\n    'Pacific Heights': {'Russian Hill': 7}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Barbara': {'location': 'Pacific Heights','start_time': '07:15', 'end_time': '22:00', 'duration': 60}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Russian Hill'\n    current_time = '9:00'\n\n    # Calculate the schedule for each person\n    for person, constraint in meeting_constraints.items():\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n           'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_73"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "9:22",
                        "end_time": "9:52"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "10:19",
                        "end_time": "11:04"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "11:22",
                        "end_time": "12:07"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "14:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Ronald",
                        "start_time": "16:42",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Robert",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "9:30",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "10:38",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "11:35",
                        "end_time": "12:20"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "15:24",
                        "end_time": "17:24"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Ronald",
                        "start_time": "17:51",
                        "end_time": "18:51"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Steven",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Pacific Heights': {'Golden Gate Park': 15, 'The Castro': 16, 'Bayview': 22, 'Marina District': 6, 'Union Square': 12, 'Sunset District': 21, 'Alamo Square': 10, 'Financial District': 13, 'Mission District': 15},\n    'Golden Gate Park': {'Pacific Heights': 16, 'The Castro': 13, 'Bayview': 23, 'Marina District': 16, 'Union Square': 22, 'Sunset District': 10, 'Alamo Square': 9, 'Financial District': 26, 'Mission District': 17},\n    'The Castro': {'Pacific Heights': 16, 'Golden Gate Park': 11, 'Bayview': 19, 'Marina District': 21, 'Union Square': 19, 'Sunset District': 17, 'Alamo Square': 8, 'Financial District': 21, 'Mission District': 7},\n    'Bayview': {'Pacific Heights': 23, 'Golden Gate Park': 22, 'The Castro': 19, 'Marina District': 27, 'Union Square': 18, 'Sunset District': 23, 'Alamo Square': 16, 'Financial District': 19, 'Mission District': 13},\n    'Marina District': {'Pacific Heights': 7, 'Golden Gate Park': 18, 'The Castro': 22, 'Bayview': 27, 'Union Square': 16, 'Sunset District': 19, 'Alamo Square': 15, 'Financial District': 17, 'Mission District': 20},\n    'Union Square': {'Pacific Heights': 15, 'Golden Gate Park': 22, 'The Castro': 17, 'Bayview': 15, 'Marina District': 18, 'Sunset District': 27, 'Alamo Square': 15, 'Financial District': 9, 'Mission District': 14},\n    'Sunset District': {'Pacific Heights': 21, 'Golden Gate Park': 11, 'The Castro': 17, 'Bayview': 22, 'Marina District': 21, 'Union Square': 30, 'Alamo Square': 17, 'Financial District': 30, 'Mission District': 25},\n    'Alamo Square': {'Pacific Heights': 10, 'Golden Gate Park': 9, 'The Castro': 8, 'Bayview': 16, 'Marina District': 15, 'Union Square': 14, 'Sunset District': 16, 'Financial District': 17, 'Mission District': 10},\n    'Financial District': {'Pacific Heights': 13, 'Golden Gate Park': 23, 'The Castro': 20, 'Bayview': 19, 'Marina District': 15, 'Union Square': 9, 'Sunset District': 30, 'Alamo Square': 17, 'Mission District': 17},\n    'Mission District': {'Pacific Heights': 16, 'Golden Gate Park': 17, 'The Castro': 7, 'Bayview': 14, 'Marina District': 19, 'Union Square': 15, 'Sunset District': 24, 'Alamo Square': 11, 'Financial District': 15}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Helen': {'location': 'Golden Gate Park','start_time': '09:30', 'end_time': '12:15', 'duration': 45},\n    'Steven': {'location': 'The Castro','start_time': '20:15', 'end_time': '22:00', 'duration': 105},\n    'Deborah': {'location': 'Bayview','start_time': '08:30', 'end_time': '12:00', 'duration': 30},\n    'Matthew': {'location': 'Marina District','start_time': '09:15', 'end_time': '14:15', 'duration': 45},\n    'Joseph': {'location': 'Union Square','start_time': '14:15', 'end_time': '18:45', 'duration': 120},\n    'Ronald': {'location': 'Sunset District','start_time': '16:00', 'end_time': '20:45', 'duration': 60},\n    'Robert': {'location': 'Alamo Square','start_time': '18:30', 'end_time': '21:15', 'duration': 120},\n    'Rebecca': {'location': 'Financial District','start_time': '14:45', 'end_time': '16:15', 'duration': 30},\n    'Elizabeth': {'location': 'Mission District','start_time': '18:30', 'end_time': '21:00', 'duration': 120}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Pacific Heights'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n          'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_835"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "11:03",
                        "end_time": "12:03"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "12:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "14:38",
                        "end_time": "14:53"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "13:38",
                        "end_time": "15:38"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Haight-Ashbury': {'Mission District': 11, 'Bayview': 18, 'Pacific Heights': 12, 'Russian Hill': 17, 'Fisherman\\'s Wharf': 23},\n    'Mission District': {'Haight-Ashbury': 12, 'Bayview': 15, 'Pacific Heights': 16, 'Russian Hill': 15, 'Fisherman\\'s Wharf': 22},\n    'Bayview': {'Haight-Ashbury': 19, 'Mission District': 13, 'Pacific Heights': 23, 'Russian Hill': 23, 'Fisherman\\'s Wharf': 25},\n    'Pacific Heights': {'Haight-Ashbury': 11, 'Mission District': 15, 'Bayview': 22, 'Russian Hill': 7, 'Fisherman\\'s Wharf': 13},\n    'Russian Hill': {'Haight-Ashbury': 17, 'Mission District': 16, 'Bayview': 23, 'Pacific Heights': 7, 'Fisherman\\'s Wharf': 7},\n    'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Mission District': 22, 'Bayview': 26, 'Pacific Heights': 12, 'Russian Hill': 7}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Stephanie': {'location': 'Mission District','start_time': '08:15', 'end_time': '13:45', 'duration': 90},\n    'Sandra': {'location': 'Bayview','start_time': '13:00', 'end_time': '19:30', 'duration': 15},\n    'Richard': {'location': 'Pacific Heights','start_time': '07:15', 'end_time': '10:15', 'duration': 75},\n    'Brian': {'location': 'Russian Hill','start_time': '12:15', 'end_time': '16:00', 'duration': 120},\n    'Jason': {'location': 'Fisherman\\'s Wharf','start_time': '08:30', 'end_time': '17:45', 'duration': 60}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Haight-Ashbury'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n          'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_482"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "14:30",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "16:37",
                        "end_time": "17:07"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "15:00",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "15:40",
                        "end_time": "17:40"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Financial District': {'Golden Gate Park': 23, 'Chinatown': 5, 'Union Square': 9, 'Fisherman\\'s Wharf': 10, 'Pacific Heights': 13, 'North Beach': 7},\n    'Golden Gate Park': {'Financial District': 26, 'Chinatown': 23, 'Union Square': 22, 'Fisherman\\'s Wharf': 24, 'Pacific Heights': 16, 'North Beach': 24},\n    'Chinatown': {'Financial District': 5, 'Golden Gate Park': 23, 'Union Square': 7, 'Fisherman\\'s Wharf': 8, 'Pacific Heights': 10, 'North Beach': 3},\n    'Union Square': {'Financial District': 9, 'Golden Gate Park': 22, 'Chinatown': 7, 'Fisherman\\'s Wharf': 15, 'Pacific Heights': 15, 'North Beach': 10},\n    'Fisherman\\'s Wharf': {'Financial District': 11, 'Golden Gate Park': 25, 'Chinatown': 12, 'Union Square': 13, 'Pacific Heights': 12, 'North Beach': 6},\n    'Pacific Heights': {'Financial District': 13, 'Golden Gate Park': 15, 'Chinatown': 11, 'Union Square': 12, 'Fisherman\\'s Wharf': 13, 'North Beach': 9},\n    'North Beach': {'Financial District': 8, 'Golden Gate Park': 22, 'Chinatown': 6, 'Union Square': 7, 'Fisherman\\'s Wharf': 5, 'Pacific Heights': 8}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Stephanie': {'location': 'Golden Gate Park','start_time': '11:00', 'end_time': '15:00', 'duration': 105},\n    'Karen': {'location': 'Chinatown','start_time': '13:45', 'end_time': '16:30', 'duration': 15},\n    'Brian': {'location': 'Union Square','start_time': '15:00', 'end_time': '17:15', 'duration': 30},\n    'Rebecca': {'location': 'Fisherman\\'s Wharf','start_time': '08:00', 'end_time': '11:15', 'duration': 30},\n    'Joseph': {'location': 'Pacific Heights','start_time': '08:15', 'end_time': '09:30', 'duration': 60},\n    'Steven': {'location': 'North Beach','start_time': '14:30', 'end_time': '20:45', 'duration': 120}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Financial District'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n         'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_502"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "15:00",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:25",
                        "end_time": "17:25"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "17:07",
                        "end_time": "18:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Sunset District': {'North Beach': 29, 'Union Square': 30, 'Alamo Square': 17},\n    'North Beach': {'Sunset District': 27, 'Union Square': 7, 'Alamo Square': 16},\n    'Union Square': {'Sunset District': 26, 'North Beach': 10, 'Alamo Square': 15},\n    'Alamo Square': {'Sunset District': 16, 'North Beach': 15, 'Union Square': 14}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Sarah': {'location': 'North Beach','start_time': '16:00', 'end_time': '18:15', 'duration': 60},\n    'Jeffrey': {'location': 'Union Square','start_time': '15:00', 'end_time': '22:00', 'duration': 75},\n    'Brian': {'location': 'Alamo Square','start_time': '16:00', 'end_time': '17:30', 'duration': 75}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Sunset District'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n         'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_225"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "9:11",
                        "end_time": "9:26"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "9:45",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Charles",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "20:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "9:24",
                        "end_time": "9:54"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "10:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Charles",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "20:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Sunset District': {'Alamo Square': 17, 'Russian Hill': 24, 'Golden Gate Park': 11, 'Mission District': 24},\n    'Alamo Square': {'Sunset District': 16, 'Russian Hill': 13, 'Golden Gate Park': 9, 'Mission District': 10},\n    'Russian Hill': {'Sunset District': 23, 'Alamo Square': 15, 'Golden Gate Park': 21, 'Mission District': 16},\n    'Golden Gate Park': {'Sunset District': 10, 'Alamo Square': 10, 'Russian Hill': 19, 'Mission District': 17},\n    'Mission District': {'Sunset District': 24, 'Alamo Square': 11, 'Russian Hill': 15, 'Golden Gate Park': 17}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Charles': {'location': 'Alamo Square','start_time': '18:00', 'end_time': '20:45', 'duration': 90},\n    'Margaret': {'location': 'Russian Hill','start_time': '09:00', 'end_time': '16:00', 'duration': 30},\n    'Daniel': {'location': 'Golden Gate Park','start_time': '08:00', 'end_time': '13:30', 'duration': 15},\n    'Stephanie': {'location': 'Mission District','start_time': '20:30', 'end_time': '22:00', 'duration': 90}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Sunset District'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n        'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_372"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Daniel",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kevin",
                        "start_time": "13:41",
                        "end_time": "14:11"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Betty",
                        "start_time": "14:31",
                        "end_time": "15:01"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Steven",
                        "start_time": "16:30",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Lisa",
                        "start_time": "19:15",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Daniel",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kevin",
                        "start_time": "13:41",
                        "end_time": "14:11"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Betty",
                        "start_time": "14:31",
                        "end_time": "15:01"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Steven",
                        "start_time": "16:30",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Lisa",
                        "start_time": "19:15",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    'Mission District': {'The Castro': 7, 'Nob Hill': 12, 'Presidio': 25, 'Marina District': 19, 'Pacific Heights': 16, 'Golden Gate Park': 17, 'Chinatown': 16, 'Richmond District': 20},\n    'The Castro': {'Mission District': 7, 'Nob Hill': 16, 'Presidio': 20, 'Marina District': 21, 'Pacific Heights': 16, 'Golden Gate Park': 11, 'Chinatown': 22, 'Richmond District': 16},\n    'Nob Hill': {'Mission District': 13, 'The Castro': 17, 'Presidio': 17, 'Marina District': 11, 'Pacific Heights': 8, 'Golden Gate Park': 17, 'Chinatown': 6, 'Richmond District': 14},\n    'Presidio': {'Mission District': 26, 'The Castro': 21, 'Nob Hill': 18, 'Marina District': 11, 'Pacific Heights': 11, 'Golden Gate Park': 12, 'Chinatown': 21, 'Richmond District': 7},\n    'Marina District': {'Mission District': 20, 'The Castro': 22, 'Nob Hill': 12, 'Presidio': 10, 'Pacific Heights': 7, 'Golden Gate Park': 18, 'Chinatown': 15, 'Richmond District': 11},\n    'Pacific Heights': {'Mission District': 15, 'The Castro': 16, 'Nob Hill': 8, 'Presidio': 11, 'Marina District': 6, 'Golden Gate Park': 15, 'Chinatown': 11, 'Richmond District': 12},\n    'Golden Gate Park': {'Mission District': 17, 'The Castro': 13, 'Nob Hill': 20, 'Presidio': 11, 'Marina District': 16, 'Pacific Heights': 16, 'Chinatown': 23, 'Richmond District': 7},\n    'Chinatown': {'Mission District': 17, 'The Castro': 22, 'Nob Hill': 9, 'Presidio': 19, 'Marina District': 12, 'Pacific Heights': 10, 'Golden Gate Park': 23, 'Richmond District': 20},\n    'Richmond District': {'Mission District': 20, 'The Castro': 16, 'Nob Hill': 17, 'Presidio': 7, 'Marina District': 9, 'Pacific Heights': 10, 'Golden Gate Park': 9, 'Chinatown': 20}\n}\n\n# Define meeting constraints\nmeeting_constraints = {\n    'Lisa': {'location': 'The Castro','start_time': '19:15', 'end_time': '21:15', 'duration': 120},\n    'Daniel': {'location': 'Nob Hill','start_time': '08:15', 'end_time': '11:00', 'duration': 15},\n    'Elizabeth': {'location': 'Presidio','start_time': '21:15', 'end_time': '22:15', 'duration': 45},\n    'Steven': {'location': 'Marina District','start_time': '16:30', 'end_time': '20:45', 'duration': 90},\n    'Timothy': {'location': 'Pacific Heights','start_time': '12:00', 'end_time': '18:00', 'duration': 90},\n    'Ashley': {'location': 'Golden Gate Park','start_time': '20:45', 'end_time': '21:45', 'duration': 60},\n    'Kevin': {'location': 'Chinatown','start_time': '12:00', 'end_time': '19:00', 'duration': 30},\n    'Betty': {'location': 'Richmond District','start_time': '13:15', 'end_time': '15:45', 'duration': 30}\n}\n\ndef calculate_meeting_schedule():\n    # Initialize the schedule\n    schedule = []\n    current_location = 'Mission District'\n    current_time = '9:00'\n\n    # Sort the meeting constraints by start time\n    sorted_constraints = sorted(meeting_constraints.items(), key=lambda x: x[1]['start_time'])\n\n    # Calculate the schedule for each person\n    for person, constraint in sorted_constraints:\n        # Calculate the travel time to the person's location\n        travel_time = travel_distances[current_location][constraint['location']]\n        arrival_time = add_time(current_time, travel_time)\n\n        # Check if we can meet the person within their available time\n        if arrival_time < constraint['start_time']:\n            # Wait until the person is available\n            start_time = constraint['start_time']\n        else:\n            start_time = arrival_time\n\n        # Calculate the end time of the meeting\n        end_time = add_time(start_time, constraint['duration'])\n\n        # Check if the meeting ends within the person's available time\n        if end_time > constraint['end_time']:\n            # We cannot meet the person within their available time\n            continue\n\n        # Add the meeting to the schedule\n        schedule.append({\n            'action':'meet',\n            'location': constraint['location'],\n            'person': person,\n        'start_time': start_time,\n            'end_time': end_time\n        })\n\n        # Update the current location and time\n        current_location = constraint['location']\n        current_time = end_time\n\n    return schedule\n\ndef add_time(time, minutes):\n    dt = datetime.strptime(time, '%H:%M')\n    dt += timedelta(minutes=minutes)\n    return dt.strftime('%H:%M')\n\ndef main():\n    schedule = calculate_meeting_schedule()\n    print(json.dumps({'itinerary': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_701"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Ronald",
                        "start_time": "25:00",
                        "end_time": "43:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Stephanie",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Lisa",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Helen",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Laura",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Elizabeth",
                        "start_time": "",
                        "end_time": ""
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Timothy",
                        "start_time": "",
                        "end_time": ""
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "9:20",
                        "end_time": "11:05"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "11:25",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Lisa",
                        "start_time": "18:07",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Timothy",
                        "start_time": "19:45",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{start_time}:{00:02d}\" if start_time < 10 else f\"{start_time}:00\", f\"{end_time}:{00:02d}\" if end_time < 10 else f\"{end_time}:00\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"The Castro\", \"Marina District\"): 21,\n        (\"The Castro\", \"Presidio\"): 20,\n        (\"The Castro\", \"North Beach\"): 20,\n        (\"The Castro\", \"Embarcadero\"): 22,\n        (\"The Castro\", \"Haight-Ashbury\"): 6,\n        (\"The Castro\", \"Golden Gate Park\"): 11,\n        (\"The Castro\", \"Richmond District\"): 16,\n        (\"The Castro\", \"Alamo Square\"): 8,\n        (\"The Castro\", \"Financial District\"): 21,\n        (\"The Castro\", \"Sunset District\"): 17,\n        (\"Marina District\", \"The Castro\"): 22,\n        (\"Marina District\", \"Presidio\"): 10,\n        (\"Marina District\", \"North Beach\"): 11,\n        (\"Marina District\", \"Embarcadero\"): 14,\n        (\"Marina District\", \"Haight-Ashbury\"): 16,\n        (\"Marina District\", \"Golden Gate Park\"): 18,\n        (\"Marina District\", \"Richmond District\"): 11,\n        (\"Marina District\", \"Alamo Square\"): 15,\n        (\"Marina District\", \"Financial District\"): 17,\n        (\"Marina District\", \"Sunset District\"): 19,\n        (\"Presidio\", \"The Castro\"): 21,\n        (\"Presidio\", \"Marina District\"): 11,\n        (\"Presidio\", \"North Beach\"): 18,\n        (\"Presidio\", \"Embarcadero\"): 20,\n        (\"Presidio\", \"Haight-Ashbury\"): 15,\n        (\"Presidio\", \"Golden Gate Park\"): 12,\n        (\"Presidio\", \"Richmond District\"): 7,\n        (\"Presidio\", \"Alamo Square\"): 19,\n        (\"Presidio\", \"Financial District\"): 23,\n        (\"Presidio\", \"Sunset District\"): 15,\n        (\"North Beach\", \"The Castro\"): 23,\n        (\"North Beach\", \"Marina District\"): 9,\n        (\"North Beach\", \"Presidio\"): 17,\n        (\"North Beach\", \"Embarcadero\"): 6,\n        (\"North Beach\", \"Haight-Ashbury\"): 18,\n        (\"North Beach\", \"Golden Gate Park\"): 22,\n        (\"North Beach\", \"Richmond District\"): 18,\n        (\"North Beach\", \"Alamo Square\"): 16,\n        (\"North Beach\", \"Financial District\"): 8,\n        (\"North Beach\", \"Sunset District\"): 27,\n        (\"Embarcadero\", \"The Castro\"): 25,\n        (\"Embarcadero\", \"Marina District\"): 12,\n        (\"Embarcadero\", \"Presidio\"): 20,\n        (\"Embarcadero\", \"North Beach\"): 5,\n        (\"Embarcadero\", \"Haight-Ashbury\"): 21,\n        (\"Embarcadero\", \"Golden Gate Park\"): 25,\n        (\"Embarcadero\", \"Richmond District\"): 21,\n        (\"Embarcadero\", \"Alamo Square\"): 19,\n        (\"Embarcadero\", \"Financial District\"): 5,\n        (\"Embarcadero\", \"Sunset District\"): 30,\n        (\"Haight-Ashbury\", \"The Castro\"): 6,\n        (\"Haight-Ashbury\", \"Marina District\"): 17,\n        (\"Haight-Ashbury\", \"Presidio\"): 15,\n        (\"Haight-Ashbury\", \"North Beach\"): 19,\n        (\"Haight-Ashbury\", \"Embarcadero\"): 20,\n        (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n        (\"Haight-Ashbury\", \"Richmond District\"): 10,\n        (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n        (\"Haight-Ashbury\", \"Financial District\"): 21,\n        (\"Haight-Ashbury\", \"Sunset District\"): 15,\n        (\"Golden Gate Park\", \"The Castro\"): 13,\n        (\"Golden Gate Park\", \"Marina District\"): 16,\n        (\"Golden Gate Park\", \"Presidio\"): 11,\n        (\"Golden Gate Park\", \"North Beach\"): 23,\n        (\"Golden Gate Park\", \"Embarcadero\"): 25,\n        (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n        (\"Golden Gate Park\", \"Richmond District\"): 7,\n        (\"Golden Gate Park\", \"Alamo Square\"): 9,\n        (\"Golden Gate Park\", \"Financial District\"): 26,\n        (\"Golden Gate Park\", \"Sunset District\"): 10,\n        (\"Richmond District\", \"The Castro\"): 16,\n        (\"Richmond District\", \"Marina District\"): 9,\n        (\"Richmond District\", \"Presidio\"): 7,\n        (\"Richmond District\", \"North Beach\"): 17,\n        (\"Richmond District\", \"Embarcadero\"): 19,\n        (\"Richmond District\", \"Haight-Ashbury\"): 10,\n        (\"Richmond District\", \"Golden Gate Park\"): 9,\n        (\"Richmond District\", \"Alamo Square\"): 13,\n        (\"Richmond District\", \"Financial District\"): 22,\n        (\"Richmond District\", \"Sunset District\"): 11,\n        (\"Alamo Square\", \"The Castro\"): 8,\n        (\"Alamo Square\", \"Marina District\"): 15,\n        (\"Alamo Square\", \"Presidio\"): 17,\n        (\"Alamo Square\", \"North Beach\"): 15,\n        (\"Alamo Square\", \"Embarcadero\"): 16,\n        (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n        (\"Alamo Square\", \"Golden Gate Park\"): 9,\n        (\"Alamo Square\", \"Richmond District\"): 11,\n        (\"Alamo Square\", \"Financial District\"): 17,\n        (\"Alamo Square\", \"Sunset District\"): 16,\n        (\"Financial District\", \"The Castro\"): 20,\n        (\"Financial District\", \"Marina District\"): 15,\n        (\"Financial District\", \"Presidio\"): 22,\n        (\"Financial District\", \"North Beach\"): 7,\n        (\"Financial District\", \"Embarcadero\"): 4,\n        (\"Financial District\", \"Haight-Ashbury\"): 19,\n        (\"Financial District\", \"Golden Gate Park\"): 23,\n        (\"Financial District\", \"Richmond District\"): 21,\n        (\"Financial District\", \"Alamo Square\"): 17,\n        (\"Financial District\", \"Sunset District\"): 30,\n        (\"Sunset District\", \"The Castro\"): 17,\n        (\"Sunset District\", \"Marina District\"): 21,\n        (\"Sunset District\", \"Presidio\"): 16,\n        (\"Sunset District\", \"North Beach\"): 28,\n        (\"Sunset District\", \"Embarcadero\"): 30,\n        (\"Sunset District\", \"Haight-Ashbury\"): 15,\n        (\"Sunset District\", \"Golden Gate Park\"): 11,\n        (\"Sunset District\", \"Richmond District\"): 12,\n        (\"Sunset District\", \"Alamo Square\"): 17,\n        (\"Sunset District\", \"Financial District\"): 30\n    }\n\n    meetings = [\n        {\"person\": \"Elizabeth\", \"location\": \"Marina District\", \"start_time\": 19, \"end_time\": 20.75, \"duration\": 105},\n        {\"person\": \"Joshua\", \"location\": \"Presidio\", \"start_time\": 8.5, \"end_time\": 13.25, \"duration\": 105},\n        {\"person\": \"Timothy\", \"location\": \"North Beach\", \"start_time\": 19.75, \"end_time\": 22, \"duration\": 90},\n        {\"person\": \"David\", \"location\": \"Embarcadero\", \"start_time\": 10.75, \"end_time\": 12.5, \"duration\": 30},\n        {\"person\": \"Kimberly\", \"location\": \"Haight-Ashbury\", \"start_time\": 16.75, \"end_time\": 21.5, \"duration\": 75},\n        {\"person\": \"Lisa\", \"location\": \"Golden Gate Park\", \"start_time\": 17.5, \"end_time\": 21.75, \"duration\": 45},\n        {\"person\": \"Ronald\", \"location\": \"Richmond District\", \"start_time\": 8, \"end_time\": 9.5, \"duration\": 90},\n        {\"person\": \"Stephanie\", \"location\": \"Alamo Square\", \"start_time\": 15.5, \"end_time\": 16.5, \"duration\": 30},\n        {\"person\": \"Helen\", \"location\": \"Financial District\", \"start_time\": 17.5, \"end_time\": 18.5, \"duration\": 45},\n        {\"person\": \"Laura\", \"location\": \"Sunset District\", \"start_time\": 17.75, \"end_time\": 21.25, \"duration\": 90}\n    ]\n\n    itinerary = []\n    current_location = \"The Castro\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_962"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joshua",
                        "start_time": "20:45",
                        "end_time": "21:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joshua",
                        "start_time": "20:45",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Sunset District\", \"Golden Gate Park\"): 11,\n        (\"Golden Gate Park\", \"Sunset District\"): 10\n    }\n\n    meetings = [\n        {\"person\": \"Joshua\", \"location\": \"Golden Gate Park\", \"start_time\": 20.75, \"end_time\": 21.75, \"duration\": 15}\n    ]\n\n    itinerary = []\n    current_location = \"Sunset District\"\n    current_time = 9\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_88"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "35:00",
                        "end_time": "36:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Ronald",
                        "start_time": "52:45",
                        "end_time": "30:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "William",
                        "start_time": "57:15",
                        "end_time": "33:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "79:30",
                        "end_time": "32:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Ashley",
                        "start_time": "103:00",
                        "end_time": "32:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "9:26",
                        "end_time": "11:11"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Ronald",
                        "start_time": "11:27",
                        "end_time": "12:57"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Ashley",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "William",
                        "start_time": "19:21",
                        "end_time": "19:36"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Presidio\", \"Golden Gate Park\"): 12,\n        (\"Presidio\", \"Bayview\"): 31,\n        (\"Presidio\", \"Chinatown\"): 21,\n        (\"Presidio\", \"North Beach\"): 18,\n        (\"Presidio\", \"Mission District\"): 26,\n        (\"Golden Gate Park\", \"Presidio\"): 11,\n        (\"Golden Gate Park\", \"Bayview\"): 23,\n        (\"Golden Gate Park\", \"Chinatown\"): 23,\n        (\"Golden Gate Park\", \"North Beach\"): 24,\n        (\"Golden Gate Park\", \"Mission District\"): 17,\n        (\"Bayview\", \"Presidio\"): 31,\n        (\"Bayview\", \"Golden Gate Park\"): 22,\n        (\"Bayview\", \"Chinatown\"): 18,\n        (\"Bayview\", \"North Beach\"): 21,\n        (\"Bayview\", \"Mission District\"): 13,\n        (\"Chinatown\", \"Presidio\"): 19,\n        (\"Chinatown\", \"Golden Gate Park\"): 23,\n        (\"Chinatown\", \"Bayview\"): 22,\n        (\"Chinatown\", \"North Beach\"): 3,\n        (\"Chinatown\", \"Mission District\"): 18,\n        (\"North Beach\", \"Presidio\"): 17,\n        (\"North Beach\", \"Golden Gate Park\"): 22,\n        (\"North Beach\", \"Bayview\"): 22,\n        (\"North Beach\", \"Chinatown\"): 6,\n        (\"North Beach\", \"Mission District\"): 18,\n        (\"Mission District\", \"Presidio\"): 25,\n        (\"Mission District\", \"Golden Gate Park\"): 17,\n        (\"Mission District\", \"Bayview\"): 15,\n        (\"Mission District\", \"Chinatown\"): 16,\n        (\"Mission District\", \"North Beach\"): 17\n    }\n\n    meetings = [\n        {\"person\": \"Jessica\", \"location\": \"Golden Gate Park\", \"start_time\": 13.75, \"end_time\": 15, \"duration\": 30},\n        {\"person\": \"Ashley\", \"location\": \"Bayview\", \"start_time\": 17.25, \"end_time\": 20, \"duration\": 105},\n        {\"person\": \"Ronald\", \"location\": \"Chinatown\", \"start_time\": 7.25, \"end_time\": 14.75, \"duration\": 90},\n        {\"person\": \"William\", \"location\": \"North Beach\", \"start_time\": 13.25, \"end_time\": 20.25, \"duration\": 15},\n        {\"person\": \"Daniel\", \"location\": \"Mission District\", \"start_time\": 7, \"end_time\": 11.25, \"duration\": 105}\n    ]\n\n    itinerary = []\n    current_location = \"Presidio\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_454"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "29:00",
                        "end_time": "30:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "43:30",
                        "end_time": "44:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Russian Hill\", \"Nob Hill\"): 5,\n        (\"Russian Hill\", \"Mission District\"): 16,\n        (\"Russian Hill\", \"Embarcadero\"): 8,\n        (\"Nob Hill\", \"Russian Hill\"): 5,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Nob Hill\", \"Embarcadero\"): 9,\n        (\"Mission District\", \"Russian Hill\"): 15,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Mission District\", \"Embarcadero\"): 19,\n        (\"Embarcadero\", \"Russian Hill\"): 8,\n        (\"Embarcadero\", \"Nob Hill\"): 10,\n        (\"Embarcadero\", \"Mission District\"): 20\n    }\n\n    meetings = [\n        {\"person\": \"Timothy\", \"location\": \"Embarcadero\", \"start_time\": 9.75, \"end_time\": 17.75, \"duration\": 120},\n        {\"person\": \"Patricia\", \"location\": \"Nob Hill\", \"start_time\": 18.5, \"end_time\": 21.75, \"duration\": 90},\n        {\"person\": \"Ashley\", \"location\": \"Mission District\", \"start_time\": 20.5, \"end_time\": 21.25, \"duration\": 45}\n    ]\n\n    itinerary = []\n    current_location = \"Russian Hill\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_272"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "16:00",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "23:15",
                        "end_time": "25:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "47:15",
                        "end_time": "47:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "70:30",
                        "end_time": "24:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Carol",
                        "start_time": "90:00",
                        "end_time": "42:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "James",
                        "start_time": "106:15",
                        "end_time": "36:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "9:30",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "14:08",
                        "end_time": "14:23"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "14:43",
                        "end_time": "14:58"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Carol",
                        "start_time": "18:15",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "James",
                        "start_time": "20:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"North Beach\", \"Pacific Heights\"): 8,\n        (\"North Beach\", \"Chinatown\"): 6,\n        (\"North Beach\", \"Union Square\"): 7,\n        (\"North Beach\", \"Mission District\"): 18,\n        (\"North Beach\", \"Golden Gate Park\"): 22,\n        (\"North Beach\", \"Nob Hill\"): 7,\n        (\"Pacific Heights\", \"North Beach\"): 9,\n        (\"Pacific Heights\", \"Chinatown\"): 11,\n        (\"Pacific Heights\", \"Union Square\"): 12,\n        (\"Pacific Heights\", \"Mission District\"): 15,\n        (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n        (\"Pacific Heights\", \"Nob Hill\"): 8,\n        (\"Chinatown\", \"North Beach\"): 3,\n        (\"Chinatown\", \"Pacific Heights\"): 10,\n        (\"Chinatown\", \"Union Square\"): 7,\n        (\"Chinatown\", \"Mission District\"): 18,\n        (\"Chinatown\", \"Golden Gate Park\"): 23,\n        (\"Chinatown\", \"Nob Hill\"): 8,\n        (\"Union Square\", \"North Beach\"): 10,\n        (\"Union Square\", \"Pacific Heights\"): 15,\n        (\"Union Square\", \"Chinatown\"): 7,\n        (\"Union Square\", \"Mission District\"): 14,\n        (\"Union Square\", \"Golden Gate Park\"): 22,\n        (\"Union Square\", \"Nob Hill\"): 9,\n        (\"Mission District\", \"North Beach\"): 17,\n        (\"Mission District\", \"Pacific Heights\"): 16,\n        (\"Mission District\", \"Chinatown\"): 16,\n        (\"Mission District\", \"Union Square\"): 15,\n        (\"Mission District\", \"Golden Gate Park\"): 17,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Golden Gate Park\", \"North Beach\"): 24,\n        (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n        (\"Golden Gate Park\", \"Chinatown\"): 23,\n        (\"Golden Gate Park\", \"Union Square\"): 22,\n        (\"Golden Gate Park\", \"Mission District\"): 17,\n        (\"Golden Gate Park\", \"Nob Hill\"): 20,\n        (\"Nob Hill\", \"North Beach\"): 8,\n        (\"Nob Hill\", \"Pacific Heights\"): 8,\n        (\"Nob Hill\", \"Chinatown\"): 6,\n        (\"Nob Hill\", \"Union Square\"): 7,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Nob Hill\", \"Golden Gate Park\"): 17\n    }\n\n    meetings = [\n        {\"person\": \"Sandra\", \"location\": \"Nob Hill\", \"start_time\": 8, \"end_time\": 15.5, \"duration\": 15},\n        {\"person\": \"Jeffrey\", \"location\": \"Union Square\", \"start_time\": 9.5, \"end_time\": 15.5, \"duration\": 120},\n        {\"person\": \"Robert\", \"location\": \"Chinatown\", \"start_time\": 12.25, \"end_time\": 16.75, \"duration\": 90},\n        {\"person\": \"Mark\", \"location\": \"Golden Gate Park\", \"start_time\": 11.5, \"end_time\": 17.75, \"duration\": 15},\n        {\"person\": \"Carol\", \"location\": \"Mission District\", \"start_time\": 18.25, \"end_time\": 21.25, \"duration\": 15},\n        {\"person\": \"James\", \"location\": \"Pacific Heights\", \"start_time\": 20, \"end_time\": 22, \"duration\": 120}\n    ]\n\n    itinerary = []\n    current_location = \"North Beach\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_592"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "16:00",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "34:15",
                        "end_time": "34:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "12:15",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "13:47",
                        "end_time": "14:17"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"The Castro\", \"Mission District\"): 7,\n        (\"The Castro\", \"Financial District\"): 20,\n        (\"Mission District\", \"The Castro\"): 7,\n        (\"Mission District\", \"Financial District\"): 17,\n        (\"Financial District\", \"The Castro\"): 23,\n        (\"Financial District\", \"Mission District\"): 17\n    }\n\n    meetings = [\n        {\"person\": \"Laura\", \"location\": \"Mission District\", \"start_time\": 12.25, \"end_time\": 19.75, \"duration\": 75},\n        {\"person\": \"Anthony\", \"location\": \"Financial District\", \"start_time\": 12.5, \"end_time\": 14.75, \"duration\": 30}\n    ]\n\n    itinerary = []\n    current_location = \"The Castro\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_144"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "19:00",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "30:15",
                        "end_time": "30:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "35:45",
                        "end_time": "37:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "47:45",
                        "end_time": "25:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "64:00",
                        "end_time": "40:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "71:30",
                        "end_time": "24:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "James",
                        "start_time": "87:00",
                        "end_time": "41:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Rebecca",
                        "start_time": "98:00",
                        "end_time": "27:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Matthew",
                        "start_time": "116:45",
                        "end_time": "45:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "136:30",
                        "end_time": "42:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "11:15",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "11:45",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "13:00",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "James",
                        "start_time": "14:31",
                        "end_time": "16:31"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "16:38",
                        "end_time": "17:08"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Matthew",
                        "start_time": "17:29",
                        "end_time": "18:14"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "18:33",
                        "end_time": "20:03"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "20:30",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Richmond District\", \"The Castro\"): 16,\n        (\"Richmond District\", \"Nob Hill\"): 17,\n        (\"Richmond District\", \"Marina District\"): 9,\n        (\"Richmond District\", \"Pacific Heights\"): 10,\n        (\"Richmond District\", \"Haight-Ashbury\"): 10,\n        (\"Richmond District\", \"Mission District\"): 20,\n        (\"Richmond District\", \"Chinatown\"): 20,\n        (\"Richmond District\", \"Russian Hill\"): 13,\n        (\"Richmond District\", \"Alamo Square\"): 13,\n        (\"Richmond District\", \"Bayview\"): 27,\n        (\"The Castro\", \"Richmond District\"): 16,\n        (\"The Castro\", \"Nob Hill\"): 16,\n        (\"The Castro\", \"Marina District\"): 21,\n        (\"The Castro\", \"Pacific Heights\"): 16,\n        (\"The Castro\", \"Haight-Ashbury\"): 6,\n        (\"The Castro\", \"Mission District\"): 7,\n        (\"The Castro\", \"Chinatown\"): 22,\n        (\"The Castro\", \"Russian Hill\"): 18,\n        (\"The Castro\", \"Alamo Square\"): 8,\n        (\"The Castro\", \"Bayview\"): 19,\n        (\"Nob Hill\", \"Richmond District\"): 14,\n        (\"Nob Hill\", \"The Castro\"): 17,\n        (\"Nob Hill\", \"Marina District\"): 11,\n        (\"Nob Hill\", \"Pacific Heights\"): 8,\n        (\"Nob Hill\", \"Haight-Ashbury\"): 13,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Nob Hill\", \"Chinatown\"): 6,\n        (\"Nob Hill\", \"Russian Hill\"): 5,\n        (\"Nob Hill\", \"Alamo Square\"): 11,\n        (\"Nob Hill\", \"Bayview\"): 19,\n        (\"Marina District\", \"Richmond District\"): 11,\n        (\"Marina District\", \"The Castro\"): 22,\n        (\"Marina District\", \"Nob Hill\"): 12,\n        (\"Marina District\", \"Pacific Heights\"): 7,\n        (\"Marina District\", \"Haight-Ashbury\"): 16,\n        (\"Marina District\", \"Mission District\"): 20,\n        (\"Marina District\", \"Chinatown\"): 15,\n        (\"Marina District\", \"Russian Hill\"): 8,\n        (\"Marina District\", \"Alamo Square\"): 15,\n        (\"Marina District\", \"Bayview\"): 27,\n        (\"Pacific Heights\", \"Richmond District\"): 12,\n        (\"Pacific Heights\", \"The Castro\"): 16,\n        (\"Pacific Heights\", \"Nob Hill\"): 8,\n        (\"Pacific Heights\", \"Marina District\"): 6,\n        (\"Pacific Heights\", \"Haight-Ashbury\"): 11,\n        (\"Pacific Heights\", \"Mission District\"): 15,\n        (\"Pacific Heights\", \"Chinatown\"): 11,\n        (\"Pacific Heights\", \"Russian Hill\"): 7,\n        (\"Pacific Heights\", \"Alamo Square\"): 10,\n        (\"Pacific Heights\", \"Bayview\"): 22,\n        (\"Haight-Ashbury\", \"Richmond District\"): 10,\n        (\"Haight-Ashbury\", \"The Castro\"): 6,\n        (\"Haight-Ashbury\", \"Nob Hill\"): 15,\n        (\"Haight-Ashbury\", \"Marina District\"): 17,\n        (\"Haight-Ashbury\", \"Pacific Heights\"): 12,\n        (\"Haight-Ashbury\", \"Mission District\"): 11,\n        (\"Haight-Ashbury\", \"Chinatown\"): 19,\n        (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n        (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n        (\"Haight-Ashbury\", \"Bayview\"): 18,\n        (\"Mission District\", \"Richmond District\"): 20,\n        (\"Mission District\", \"The Castro\"): 7,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Mission District\", \"Marina District\"): 19,\n        (\"Mission District\", \"Pacific Heights\"): 16,\n        (\"Mission District\", \"Haight-Ashbury\"): 12,\n        (\"Mission District\", \"Chinatown\"): 16,\n        (\"Mission District\", \"Russian Hill\"): 15,\n        (\"Mission District\", \"Alamo Square\"): 11,\n        (\"Mission District\", \"Bayview\"): 14,\n        (\"Chinatown\", \"Richmond District\"): 20,\n        (\"Chinatown\", \"The Castro\"): 22,\n        (\"Chinatown\", \"Nob Hill\"): 9,\n        (\"Chinatown\", \"Marina District\"): 12,\n        (\"Chinatown\", \"Pacific Heights\"): 10,\n        (\"Chinatown\", \"Haight-Ashbury\"): 19,\n        (\"Chinatown\", \"Mission District\"): 17,\n        (\"Chinatown\", \"Russian Hill\"): 7,\n        (\"Chinatown\", \"Alamo Square\"): 17,\n        (\"Chinatown\", \"Bayview\"): 20,\n        (\"Russian Hill\", \"Richmond District\"): 14,\n        (\"Russian Hill\", \"The Castro\"): 21,\n        (\"Russian Hill\", \"Nob Hill\"): 5,\n        (\"Russian Hill\", \"Marina District\"): 7,\n        (\"Russian Hill\", \"Pacific Heights\"): 7,\n        (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n        (\"Russian Hill\", \"Mission District\"): 16,\n        (\"Russian Hill\", \"Chinatown\"): 9,\n        (\"Russian Hill\", \"Alamo Square\"): 15,\n        (\"Russian Hill\", \"Bayview\"): 23,\n        (\"Alamo Square\", \"Richmond District\"): 11,\n        (\"Alamo Square\", \"The Castro\"): 8,\n        (\"Alamo Square\", \"Nob Hill\"): 11,\n        (\"Alamo Square\", \"Marina District\"): 15,\n        (\"Alamo Square\", \"Pacific Heights\"): 10,\n        (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n        (\"Alamo Square\", \"Mission District\"): 10,\n        (\"Alamo Square\", \"Chinatown\"): 15,\n        (\"Alamo Square\", \"Russian Hill\"): 13,\n        (\"Alamo Square\", \"Bayview\"): 16,\n        (\"Bayview\", \"Richmond District\"): 25,\n        (\"Bayview\", \"The Castro\"): 19,\n        (\"Bayview\", \"Nob Hill\"): 20,\n        (\"Bayview\", \"Marina District\"): 27,\n        (\"Bayview\", \"Pacific Heights\"): 23,\n        (\"Bayview\", \"Haight-Ashbury\"): 19,\n        (\"Bayview\", \"Mission District\"): 13,\n        (\"Bayview\", \"Chinatown\"): 19,\n        (\"Bayview\", \"Russian Hill\"): 23,\n        (\"Bayview\", \"Alamo Square\"): 16\n    }\n\n    meetings = [\n        {\"person\": \"Elizabeth\", \"location\": \"Alamo Square\", \"start_time\": 13, \"end_time\": 17.25, \"duration\": 120},\n        {\"person\": \"Emily\", \"location\": \"Pacific Heights\", \"start_time\": 11.25, \"end_time\": 19.75, \"duration\": 15},\n        {\"person\": \"Karen\", \"location\": \"Haight-Ashbury\", \"start_time\": 11.75, \"end_time\": 17.5, \"duration\": 30},\n        {\"person\": \"Stephanie\", \"location\": \"Mission District\", \"start_time\": 13, \"end_time\": 15.75, \"duration\": 75},\n        {\"person\": \"Brian\", \"location\": \"Marina District\", \"start_time\": 14.25, \"end_time\": 22, \"duration\": 30},\n        {\"person\": \"Rebecca\", \"location\": \"Nob Hill\", \"start_time\": 15.25, \"end_time\": 19.25, \"duration\": 105},\n        {\"person\": \"James\", \"location\": \"Chinatown\", \"start_time\": 14.5, \"end_time\": 19, \"duration\": 120},\n        {\"person\": \"Steven\", \"location\": \"Russian Hill\", \"start_time\": 14, \"end_time\": 20, \"duration\": 30},\n        {\"person\": \"Matthew\", \"location\": \"The Castro\", \"start_time\": 16.5, \"end_time\": 20, \"duration\": 45},\n        {\"person\": \"William\", \"location\": \"Bayview\", \"start_time\": 18.25, \"end_time\": 20.25, \"duration\": 90}\n    ]\n\n    itinerary = []\n    current_location = \"Richmond District\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_900"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Jason",
                        "start_time": "9:21",
                        "end_time": "10:36"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kenneth",
                        "start_time": "10:39",
                        "end_time": "11:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "11:18",
                        "end_time": "12:33"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Kimberly",
                        "start_time": "12:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "14:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "15:47",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "16:57",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "18:51",
                        "end_time": "19:51"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "21:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Presidio\", \"Haight-Ashbury\"): 15,\n        (\"Presidio\", \"Nob Hill\"): 18,\n        (\"Presidio\", \"Russian Hill\"): 14,\n        (\"Presidio\", \"North Beach\"): 18,\n        (\"Presidio\", \"Chinatown\"): 21,\n        (\"Presidio\", \"Union Square\"): 22,\n        (\"Presidio\", \"Embarcadero\"): 20,\n        (\"Presidio\", \"Financial District\"): 23,\n        (\"Presidio\", \"Marina District\"): 11,\n        (\"Haight-Ashbury\", \"Presidio\"): 15,\n        (\"Haight-Ashbury\", \"Nob Hill\"): 15,\n        (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n        (\"Haight-Ashbury\", \"North Beach\"): 19,\n        (\"Haight-Ashbury\", \"Chinatown\"): 19,\n        (\"Haight-Ashbury\", \"Union Square\"): 19,\n        (\"Haight-Ashbury\", \"Embarcadero\"): 20,\n        (\"Haight-Ashbury\", \"Financial District\"): 21,\n        (\"Haight-Ashbury\", \"Marina District\"): 17,\n        (\"Nob Hill\", \"Presidio\"): 17,\n        (\"Nob Hill\", \"Haight-Ashbury\"): 13,\n        (\"Nob Hill\", \"Russian Hill\"): 5,\n        (\"Nob Hill\", \"North Beach\"): 8,\n        (\"Nob Hill\", \"Chinatown\"): 6,\n        (\"Nob Hill\", \"Union Square\"): 7,\n        (\"Nob Hill\", \"Embarcadero\"): 9,\n        (\"Nob Hill\", \"Financial District\"): 9,\n        (\"Nob Hill\", \"Marina District\"): 11,\n        (\"Russian Hill\", \"Presidio\"): 14,\n        (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n        (\"Russian Hill\", \"Nob Hill\"): 5,\n        (\"Russian Hill\", \"North Beach\"): 5,\n        (\"Russian Hill\", \"Chinatown\"): 9,\n        (\"Russian Hill\", \"Union Square\"): 10,\n        (\"Russian Hill\", \"Embarcadero\"): 8,\n        (\"Russian Hill\", \"Financial District\"): 11,\n        (\"Russian Hill\", \"Marina District\"): 7,\n        (\"North Beach\", \"Presidio\"): 17,\n        (\"North Beach\", \"Haight-Ashbury\"): 18,\n        (\"North Beach\", \"Nob Hill\"): 7,\n        (\"North Beach\", \"Russian Hill\"): 4,\n        (\"North Beach\", \"Chinatown\"): 6,\n        (\"North Beach\", \"Union Square\"): 7,\n        (\"North Beach\", \"Embarcadero\"): 6,\n        (\"North Beach\", \"Financial District\"): 8,\n        (\"North Beach\", \"Marina District\"): 9,\n        (\"Chinatown\", \"Presidio\"): 19,\n        (\"Chinatown\", \"Haight-Ashbury\"): 19,\n        (\"Chinatown\", \"Nob Hill\"): 9,\n        (\"Chinatown\", \"Russian Hill\"): 7,\n        (\"Chinatown\", \"North Beach\"): 3,\n        (\"Chinatown\", \"Union Square\"): 7,\n        (\"Chinatown\", \"Embarcadero\"): 5,\n        (\"Chinatown\", \"Financial District\"): 5,\n        (\"Chinatown\", \"Marina District\"): 12,\n        (\"Union Square\", \"Presidio\"): 24,\n        (\"Union Square\", \"Haight-Ashbury\"): 18,\n        (\"Union Square\", \"Nob Hill\"): 9,\n        (\"Union Square\", \"Russian Hill\"): 13,\n        (\"Union Square\", \"North Beach\"): 10,\n        (\"Union Square\", \"Chinatown\"): 7,\n        (\"Union Square\", \"Embarcadero\"): 11,\n        (\"Union Square\", \"Financial District\"): 9,\n        (\"Union Square\", \"Marina District\"): 18,\n        (\"Embarcadero\", \"Presidio\"): 20,\n        (\"Embarcadero\", \"Haight-Ashbury\"): 21,\n        (\"Embarcadero\", \"Nob Hill\"): 10,\n        (\"Embarcadero\", \"Russian Hill\"): 8,\n        (\"Embarcadero\", \"North Beach\"): 5,\n        (\"Embarcadero\", \"Chinatown\"): 7,\n        (\"Embarcadero\", \"Union Square\"): 10,\n        (\"Embarcadero\", \"Financial District\"): 5,\n        (\"Embarcadero\", \"Marina District\"): 12,\n        (\"Financial District\", \"Presidio\"): 22,\n        (\"Financial District\", \"Haight-Ashbury\"): 19,\n        (\"Financial District\", \"Nob Hill\"): 8,\n        (\"Financial District\", \"Russian Hill\"): 11,\n        (\"Financial District\", \"North Beach\"): 7,\n        (\"Financial District\", \"Chinatown\"): 5,\n        (\"Financial District\", \"Union Square\"): 9,\n        (\"Financial District\", \"Embarcadero\"): 4,\n        (\"Financial District\", \"Marina District\"): 15,\n        (\"Marina District\", \"Presidio\"): 10,\n        (\"Marina District\", \"Haight-Ashbury\"): 16,\n        (\"Marina District\", \"Nob Hill\"): 12,\n        (\"Marina District\", \"Russian Hill\"): 8,\n        (\"Marina District\", \"North Beach\"): 11,\n        (\"Marina District\", \"Chinatown\"): 15,\n        (\"Marina District\", \"Union Square\"): 16,\n        (\"Marina District\", \"Embarcadero\"): 14,\n        (\"Marina District\", \"Financial District\"): 17\n    }\n\n    meetings = [\n        {\"person\": \"Mark\", \"location\": \"Marina District\", \"start_time\": 10.25, \"end_time\": 13, \"duration\": 75},\n        {\"person\": \"Jason\", \"location\": \"Chinatown\", \"start_time\": 8.25, \"end_time\": 11.75, \"duration\": 75},\n        (\"Financial District\", \"Presidio\"): 22,\n        (\"Financial District\", \"Haight-Ashbury\"): 19,\n        (\"Financial District\", \"Nob Hill\"): 8,\n        (\"Financial District\", \"Russian Hill\"): 11,\n        (\"Financial District\", \"North Beach\"): 7,\n        (\"Financial District\", \"Chinatown\"): 5,\n        (\"Financial District\", \"Union Square\"): 9,\n        (\"Financial District\", \"Embarcadero\"): 4,\n        (\"Financial District\", \"Marina District\"): 15,\n        (\"Marina District\", \"Presidio\"): 10,\n        (\"Marina District\", \"Haight-Ashbury\"): 16,\n        (\"Marina District\", \"Nob Hill\"): 12,\n        (\"Marina District\", \"Russian Hill\"): 8,\n        (\"Marina District\", \"North Beach\"): 11,\n        (\"Marina District\", \"Chinatown\"): 15,\n        (\"Marina District\", \"Union Square\"): 16,\n        (\"Marina District\", \"Embarcadero\"): 14,\n        (\"Marina District\", \"Financial District\"): 17\n    ]\n\n    meetings = [\n        {\"person\": \"Mark\", \"location\": \"Marina District\", \"start_time\": 10.25, \"end_time\": 13, \"duration\": 75},\n        {\"person\": \"Jason\", \"location\": \"Chinatown\", \"start_time\": 8.25, \"end_time\": 11.75, \"duration\": 75},\n        {\"person\": \"Steven\", \"location\": \"Financial District\", \"start_time\": 7.25, \"end_time\": 21.25, \"duration\": 60},\n        {\"person\": \"Kimberly\", \"location\": \"Embarcadero\", \"start_time\": 9.75, \"end_time\": 19.5, \"duration\": 75},\n        {\"person\": \"Kenneth\", \"location\": \"North Beach\", \"start_time\": 9.75, \"end_time\": 21, \"duration\": 30},\n        {\"person\": \"Stephanie\", \"location\": \"Union Square\", \"start_time\": 14.75, \"end_time\": 18.75, \"duration\": 105},\n        {\"person\": \"Brian\", \"location\": \"Russian Hill\", \"start_time\": 15.5, \"end_time\": 21.75, \"duration\": 60},\n        {\"person\": \"Jessica\", \"location\": \"Nob Hill\", \"start_time\": 13.75, \"end_time\": 21, \"duration\": 90},\n        {\"person\": \"Karen\", \"location\": \"Haight-Ashbury\", \"start_time\": 21, \"end_time\": 21.75, \"duration\": 45}\n    ]\n\n    itinerary = []\n    current_location = \"Presidio\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_872"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "40:00",
                        "end_time": "40:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "54:30",
                        "end_time": "31:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "60:45",
                        "end_time": "37:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "78:45",
                        "end_time": "31:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Carol",
                        "start_time": "98:30",
                        "end_time": "28:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "115:30",
                        "end_time": "44:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Patricia",
                        "start_time": "127:15",
                        "end_time": "32:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "20:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "20:56",
                        "end_time": "21:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Bayview\", \"Nob Hill\"): 20,\n        (\"Bayview\", \"Union Square\"): 17,\n        (\"Bayview\", \"Chinatown\"): 18,\n        (\"Bayview\", \"The Castro\"): 20,\n        (\"Bayview\", \"Presidio\"): 31,\n        (\"Bayview\", \"Pacific Heights\"): 23,\n        (\"Bayview\", \"Russian Hill\"): 23,\n        (\"Nob Hill\", \"Bayview\"): 19,\n        (\"Nob Hill\", \"Union Square\"): 7,\n        (\"Nob Hill\", \"Chinatown\"): 6,\n        (\"Nob Hill\", \"The Castro\"): 17,\n        (\"Nob Hill\", \"Presidio\"): 17,\n        (\"Nob Hill\", \"Pacific Heights\"): 8,\n        (\"Nob Hill\", \"Russian Hill\"): 5,\n        (\"Union Square\", \"Bayview\"): 15,\n        (\"Union Square\", \"Nob Hill\"): 9,\n        (\"Union Square\", \"Chinatown\"): 7,\n        (\"Union Square\", \"The Castro\"): 19,\n        (\"Union Square\", \"Presidio\"): 24,\n        (\"Union Square\", \"Pacific Heights\"): 15,\n        (\"Union Square\", \"Russian Hill\"): 13,\n        (\"Chinatown\", \"Bayview\"): 22,\n        (\"Chinatown\", \"Nob Hill\"): 8,\n        (\"Chinatown\", \"Union Square\"): 7,\n        (\"Chinatown\", \"The Castro\"): 22,\n        (\"Chinatown\", \"Presidio\"): 19,\n        (\"Chinatown\", \"Pacific Heights\"): 10,\n        (\"Chinatown\", \"Russian Hill\"): 7,\n        (\"The Castro\", \"Bayview\"): 19,\n        (\"The Castro\", \"Nob Hill\"): 16,\n        (\"The Castro\", \"Union Square\"): 19,\n        (\"The Castro\", \"Chinatown\"): 20,\n        (\"The Castro\", \"Presidio\"): 20,\n        (\"The Castro\", \"Pacific Heights\"): 16,\n        (\"The Castro\", \"Russian Hill\"): 18,\n        (\"Presidio\", \"Bayview\"): 31,\n        (\"Presidio\", \"Nob Hill\"): 18,\n        (\"Presidio\", \"Union Square\"): 22,\n        (\"Presidio\", \"Chinatown\"): 21,\n        (\"Presidio\", \"The Castro\"): 21,\n        (\"Presidio\", \"Pacific Heights\"): 11,\n        (\"Presidio\", \"Russian Hill\"): 14,\n        (\"Pacific Heights\", \"Bayview\"): 22,\n        (\"Pacific Heights\", \"Nob Hill\"): 8,\n        (\"Pacific Heights\", \"Union Square\"): 12,\n        (\"Pacific Heights\", \"Chinatown\"): 11,\n        (\"Pacific Heights\", \"The Castro\"): 16,\n        (\"Pacific Heights\", \"Presidio\"): 11,\n        (\"Pacific Heights\", \"Russian Hill\"): 7,\n        (\"Russian Hill\", \"Bayview\"): 23,\n        (\"Russian Hill\", \"Nob Hill\"): 5,\n        (\"Russian Hill\", \"Union Square\"): 11,\n        (\"Russian Hill\", \"Chinatown\"): 9,\n        (\"Russian Hill\", \"The Castro\"): 21,\n        (\"Russian Hill\", \"Presidio\"): 14,\n        (\"Russian Hill\", \"Pacific Heights\"): 7\n    }\n\n    meetings = [\n        {\"person\": \"Nancy\", \"location\": \"Presidio\", \"start_time\": 11.75, \"end_time\": 22, \"duration\": 30},\n        {\"person\": \"Matthew\", \"location\": \"Russian Hill\", \"start_time\": 15.75, \"end_time\": 21.75, \"duration\": 75},\n        {\"person\": \"Karen\", \"location\": \"The Castro\", \"start_time\": 17, \"end_time\": 19, \"duration\": 45},\n        {\"person\": \"Paul\", \"location\": \"Nob Hill\", \"start_time\": 16.25, \"end_time\": 21.25, \"duration\": 60},\n        {\"person\": \"Jeffrey\", \"location\": \"Pacific Heights\", \"start_time\": 20, \"end_time\": 20.75, \"duration\": 45},\n        {\"person\": \"Patricia\", \"location\": \"Chinatown\", \"start_time\": 20, \"end_time\": 21.75, \"duration\": 75},\n        {\"person\": \"Carol\", \"location\": \"Union Square\", \"start_time\": 18, \"end_time\": 20.25, \"duration\": 120}\n    ]\n\n    itinerary = []\n    current_location = \"Bayview\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_695"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "19:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "33:45",
                        "end_time": "34:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "48:45",
                        "end_time": "25:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "19:59",
                        "end_time": "20:59"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Golden Gate Park\", \"Alamo Square\"): 10,\n        (\"Golden Gate Park\", \"Presidio\"): 11,\n        (\"Golden Gate Park\", \"Russian Hill\"): 19,\n        (\"Alamo Square\", \"Golden Gate Park\"): 9,\n        (\"Alamo Square\", \"Presidio\"): 18,\n        (\"Alamo Square\", \"Russian Hill\"): 13,\n        (\"Presidio\", \"Golden Gate Park\"): 12,\n        (\"Presidio\", \"Alamo Square\"): 18,\n        (\"Presidio\", \"Russian Hill\"): 14,\n        (\"Russian Hill\", \"Golden Gate Park\"): 21,\n        (\"Russian Hill\", \"Alamo Square\"): 15,\n        (\"Russian Hill\", \"Presidio\"): 14\n    }\n\n    meetings = [\n        {\"person\": \"Timothy\", \"location\": \"Alamo Square\", \"start_time\": 12, \"end_time\": 16.25, \"duration\": 105},\n        {\"person\": \"Joseph\", \"location\": \"Russian Hill\", \"start_time\": 16.75, \"end_time\": 21.5, \"duration\": 60},\n        {\"person\": \"Mark\", \"location\": \"Presidio\", \"start_time\": 18.75, \"end_time\": 21, \"duration\": 60}\n    ]\n\n    itinerary = []\n    current_location = \"Golden Gate Park\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_268"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "20:00",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "14:15",
                        "end_time": "15:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n        (\"Nob Hill\", \"Fisherman's Wharf\"): 11\n    }\n\n    meetings = [\n        {\"person\": \"Kenneth\", \"location\": \"Nob Hill\", \"start_time\": 14.25, \"end_time\": 19.75, \"duration\": 90}\n    ]\n\n    itinerary = []\n    current_location = \"Fisherman's Wharf\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jeffrey",
                        "start_time": "26:00",
                        "end_time": "27:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "38:45",
                        "end_time": "39:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "48:00",
                        "end_time": "24:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "53:45",
                        "end_time": "30:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "9:08",
                        "end_time": "9:23"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "13:30",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "18:00",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_travel_time(origin, destination, travel_times):\n    return travel_times.get((origin, destination), 0)\n\ndef calculate_meeting_time(person, start_time, duration):\n    end_time = (start_time + duration) % 24\n    if end_time < start_time:\n        end_time += 24\n    return f\"{int(start_time):02d}:{int((start_time % 1) * 60):02d}\", f\"{int(end_time):02d}:{int((end_time % 1) * 60):02d}\"\n\ndef plan_meeting(person, location, start_time, duration, travel_times, current_location, current_time):\n    travel_time = calculate_travel_time(current_location, location, travel_times)\n    meeting_start_time, meeting_end_time = calculate_meeting_time(person, current_time + travel_time, duration / 60)\n    return {\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": meeting_start_time,\n        \"end_time\": meeting_end_time\n    }\n\ndef main():\n    travel_times = {\n        (\"Nob Hill\", \"Presidio\"): 17,\n        (\"Nob Hill\", \"North Beach\"): 8,\n        (\"Nob Hill\", \"Fisherman's Wharf\"): 11,\n        (\"Nob Hill\", \"Pacific Heights\"): 8,\n        (\"Presidio\", \"Nob Hill\"): 18,\n        (\"Presidio\", \"North Beach\"): 18,\n        (\"Presidio\", \"Fisherman's Wharf\"): 19,\n        (\"Presidio\", \"Pacific Heights\"): 11,\n        (\"North Beach\", \"Nob Hill\"): 7,\n        (\"North Beach\", \"Presidio\"): 17,\n        (\"North Beach\", \"Fisherman's Wharf\"): 5,\n        (\"North Beach\", \"Pacific Heights\"): 8,\n        (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n        (\"Fisherman's Wharf\", \"Presidio\"): 17,\n        (\"Fisherman's Wharf\", \"North Beach\"): 6,\n        (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n        (\"Pacific Heights\", \"Nob Hill\"): 8,\n        (\"Pacific Heights\", \"Presidio\"): 11,\n        (\"Pacific Heights\", \"North Beach\"): 9,\n        (\"Pacific Heights\", \"Fisherman's Wharf\"): 13\n    }\n\n    meetings = [\n        {\"person\": \"John\", \"location\": \"Pacific Heights\", \"start_time\": 9, \"end_time\": 13.5, \"duration\": 15},\n        {\"person\": \"Jeffrey\", \"location\": \"Presidio\", \"start_time\": 8, \"end_time\": 10, \"duration\": 105},\n        {\"person\": \"Steven\", \"location\": \"North Beach\", \"start_time\": 13.5, \"end_time\": 22, \"duration\": 45},\n        {\"person\": \"Barbara\", \"location\": \"Fisherman's Wharf\", \"start_time\": 18, \"end_time\": 21.5, \"duration\": 30}\n    ]\n\n    itinerary = []\n    current_location = \"Nob Hill\"\n    current_time = 9\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x[\"start_time\"])\n\n    for meeting in meetings:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"], travel_times)\n        if current_time + travel_time < meeting[\"start_time\"]:\n            current_time = meeting[\"start_time\"] - travel_time\n        itinerary.append(plan_meeting(meeting[\"person\"], meeting[\"location\"], current_time + travel_time, meeting[\"duration\"], travel_times, current_location, current_time))\n        current_location = meeting[\"location\"]\n        current_time += travel_time + meeting[\"duration\"] / 60\n\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_385"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "9:20",
                        "end_time": "9:50"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Stephanie",
                        "start_time": "11:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "12:40",
                        "end_time": "14:40"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Laura",
                        "start_time": "14:49",
                        "end_time": "16:04"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nimport itertools\n\n# Define the locations and travel times\nlocations = {\n    \"Mission District\": {},\n    \"Alamo Square\": {},\n    \"Presidio\": {},\n    \"Russian Hill\": {},\n    \"North Beach\": {},\n    \"Golden Gate Park\": {},\n    \"Richmond District\": {},\n    \"Embarcadero\": {},\n    \"Financial District\": {},\n    \"Marina District\": {}\n}\n\ntravel_times = {\n    (\"Mission District\", \"Alamo Square\"): 11,\n    (\"Mission District\", \"Presidio\"): 25,\n    (\"Mission District\", \"Russian Hill\"): 15,\n    (\"Mission District\", \"North Beach\"): 17,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Mission District\", \"Richmond District\"): 20,\n    (\"Mission District\", \"Embarcadero\"): 19,\n    (\"Mission District\", \"Financial District\"): 15,\n    (\"Mission District\", \"Marina District\"): 19,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Alamo Square\", \"Presidio\"): 17,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Richmond District\"): 11,\n    (\"Alamo Square\", \"Embarcadero\"): 16,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Marina District\"): 15,\n    (\"Presidio\", \"Mission District\"): 26,\n    (\"Presidio\", \"Alamo Square\"): 19,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Russian Hill\", \"Mission District\"): 16,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Embarcadero\"): 8,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"North Beach\", \"Mission District\"): 18,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Embarcadero\"): 6,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Marina District\"): 9,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Golden Gate Park\", \"Alamo Square\"): 9,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"North Beach\"): 23,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Richmond District\", \"Mission District\"): 20,\n    (\"Richmond District\", \"Alamo Square\"): 13,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"Russian Hill\"): 13,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Embarcadero\", \"Mission District\"): 20,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Russian Hill\"): 8,\n    (\"Embarcadero\", \"North Beach\"): 5,\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Marina District\"): 12,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Russian Hill\"): 11,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Marina District\", \"Mission District\"): 20,\n    (\"Marina District\", \"Alamo Square\"): 15,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"Marina District\", \"Golden Gate Park\"): 18,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"Embarcadero\"): 14,\n    (\"Marina District\", \"Financial District\"): 17\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Alamo Square\", \"person\": \"Laura\", \"start_time\": 14.5, \"end_time\": 16.25, \"duration\": 75},\n    {\"location\": \"Presidio\", \"person\": \"Brian\", \"start_time\": 10.25, \"end_time\": 17, \"duration\": 30},\n    {\"location\": \"Russian Hill\", \"person\": \"Karen\", \"start_time\": 18, \"end_time\": 20.25, \"duration\": 90},\n    {\"location\": \"North Beach\", \"person\": \"Stephanie\", \"start_time\": 10.25, \"end_time\": 16, \"duration\": 75},\n    {\"location\": \"Golden Gate Park\", \"person\": \"Helen\", \"start_time\": 11.5, \"end_time\": 21.75, \"duration\": 120},\n    {\"location\": \"Richmond District\", \"person\": \"Sandra\", \"start_time\": 8, \"end_time\": 15.25, \"duration\": 30},\n    {\"location\": \"Embarcadero\", \"person\": \"Mary\", \"start_time\": 16.75, \"end_time\": 18.75, \"duration\": 120},\n    {\"location\": \"Financial District\", \"person\": \"Deborah\", \"start_time\": 19, \"end_time\": 20.75, \"duration\": 105},\n    {\"location\": \"Marina District\", \"person\": \"Elizabeth\", \"start_time\": 8.5, \"end_time\": 13.25, \"duration\": 105}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Mission District\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_862"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "10:53",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:23",
                        "end_time": "13:23"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "John",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nimport itertools\n\n# Define the locations and travel times\nlocations = {\n    \"Embarcadero\": {},\n    \"Richmond District\": {},\n    \"Union Square\": {},\n    \"Financial District\": {},\n    \"Pacific Heights\": {},\n    \"Nob Hill\": {},\n    \"Bayview\": {}\n}\n\ntravel_times = {\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Union Square\"): 10,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Pacific Heights\"): 11,\n    (\"Embarcadero\", \"Nob Hill\"): 10,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Pacific Heights\"): 10,\n    (\"Richmond District\", \"Nob Hill\"): 17,\n    (\"Richmond District\", \"Bayview\"): 26,\n    (\"Union Square\", \"Embarcadero\"): 11,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"Nob Hill\"): 9,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"Nob Hill\"): 8,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Pacific Heights\", \"Embarcadero\"): 10,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Nob Hill\", \"Embarcadero\"): 9,\n    (\"Nob Hill\", \"Richmond District\"): 14,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"Financial District\"): 9,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"Bayview\"): 19,\n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Union Square\"): 17,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Pacific Heights\"): 23,\n    (\"Bayview\", \"Nob Hill\"): 20\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Richmond District\", \"person\": \"Kenneth\", \"start_time\": 21.25, \"end_time\": 22, \"duration\": 30},\n    {\"location\": \"Union Square\", \"person\": \"Lisa\", \"start_time\": 9, \"end_time\": 16.5, \"duration\": 45},\n    {\"location\": \"Financial District\", \"person\": \"Joshua\", \"start_time\": 12, \"end_time\": 15.25, \"duration\": 15},\n    {\"location\": \"Pacific Heights\", \"person\": \"Nancy\", \"start_time\": 8, \"end_time\": 11.5, \"duration\": 90},\n    {\"location\": \"Nob Hill\", \"person\": \"Andrew\", \"start_time\": 11.5, \"end_time\": 20.25, \"duration\": 60},\n    {\"location\": \"Bayview\", \"person\": \"John\", \"start_time\": 16.75, \"end_time\": 21.5, \"duration\": 75}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Embarcadero\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_546"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Russian Hill\": {},\n    \"Richmond District\": {}\n}\n\ntravel_times = {\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Richmond District\", \"Russian Hill\"): 13\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Richmond District\", \"person\": \"Daniel\", \"start_time\": 19, \"end_time\": 20.25, \"duration\": 75}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Russian Hill\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_91"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "David",
                        "start_time": "9:18",
                        "end_time": "10:03"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kenneth",
                        "start_time": "14:00",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Deborah",
                        "start_time": "16:09",
                        "end_time": "17:39"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "18:31",
                        "end_time": "18:46"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nimport itertools\n\n# Define the locations and travel times\nlocations = {\n    \"Chinatown\": {},\n    \"Mission District\": {},\n    \"Alamo Square\": {},\n    \"Pacific Heights\": {},\n    \"Union Square\": {},\n    \"Golden Gate Park\": {},\n    \"Sunset District\": {},\n    \"Presidio\": {}\n}\n\ntravel_times = {\n    (\"Chinatown\", \"Mission District\"): 18,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Pacific Heights\"): 10,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Mission District\", \"Chinatown\"): 16,\n    (\"Mission District\", \"Alamo Square\"): 11,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"Union Square\"): 15,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Mission District\", \"Presidio\"): 25,\n    (\"Alamo Square\", \"Chinatown\"): 16,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"Presidio\"): 18,\n    (\"Pacific Heights\", \"Chinatown\"): 11,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"Sunset District\"): 21,\n    (\"Pacific Heights\", \"Presidio\"): 11,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Mission District\"): 14,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Sunset District\"): 26,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Pacific Heights\"): 21,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Mission District\"): 26,\n    (\"Presidio\", \"Alamo Square\"): 18,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Sunset District\"): 15\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Mission District\", \"person\": \"David\", \"start_time\": 8, \"end_time\": 19.75, \"duration\": 45},\n    {\"location\": \"Alamo Square\", \"person\": \"Kenneth\", \"start_time\": 14, \"end_time\": 19.75, \"duration\": 120},\n    {\"location\": \"Pacific Heights\", \"person\": \"John\", \"start_time\": 17, \"end_time\": 20, \"duration\": 15},\n    {\"location\": \"Union Square\", \"person\": \"Charles\", \"start_time\": 21.75, \"end_time\": 22.75, \"duration\": 60},\n    {\"location\": \"Golden Gate Park\", \"person\": \"Deborah\", \"start_time\": 7, \"end_time\": 18.25, \"duration\": 90},\n    {\"location\": \"Sunset District\", \"person\": \"Karen\", \"start_time\": 17.75, \"end_time\": 21.25, \"duration\": 15},\n    {\"location\": \"Presidio\", \"person\": \"Carol\", \"start_time\": 8.25, \"end_time\": 9.25, \"duration\": 30}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Chinatown\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_609"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Betty",
                        "start_time": "10:06",
                        "end_time": "10:21"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "10:40",
                        "end_time": "11:10"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joseph",
                        "start_time": "11:31",
                        "end_time": "13:01"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "13:11",
                        "end_time": "14:26"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Lisa",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Patricia",
                        "start_time": "16:34",
                        "end_time": "18:34"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:47",
                        "end_time": "19:47"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "20:10",
                        "end_time": "21:55"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nimport itertools\n\n# Define the locations and travel times\nlocations = {\n    \"Financial District\": {},\n    \"Fisherman's Wharf\": {},\n    \"Presidio\": {},\n    \"Bayview\": {},\n    \"Haight-Ashbury\": {},\n    \"Russian Hill\": {},\n    \"The Castro\": {},\n    \"Marina District\": {},\n    \"Richmond District\": {},\n    \"Union Square\": {},\n    \"Sunset District\": {}\n}\n\ntravel_times = {\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Haight-Ashbury\"): 19,\n    (\"Financial District\", \"Russian Hill\"): 11,\n    (\"Financial District\", \"The Castro\"): 20,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Sunset District\"): 30,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Haight-Ashbury\"): 22,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"The Castro\"): 27,\n    (\"Fisherman's Wharf\", \"Marina District\"): 9,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Fisherman's Wharf\", \"Union Square\"): 13,\n    (\"Fisherman's Wharf\", \"Sunset District\"): 27,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Bayview\", \"Presidio\"): 32,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Russian Hill\"): 23,\n    (\"Bayview\", \"The Castro\"): 19,\n    (\"Bayview\", \"Marina District\"): 27,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Union Square\"): 18,\n    (\"Bayview\", \"Sunset District\"): 23,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Haight-Ashbury\", \"Fisherman's Wharf\"): 23,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"The Castro\"): 6,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Haight-Ashbury\", \"Union Square\"): 19,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Union Square\"): 10,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"The Castro\", \"Financial District\"): 21,\n    (\"The Castro\", \"Fisherman's Wharf\"): 24,\n    (\"The Castro\", \"Presidio\"): 20,\n    (\"The Castro\", \"Bayview\"): 19,\n    (\"The Castro\", \"Haight-Ashbury\"): 6,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"Fisherman's Wharf\"): 10,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"Bayview\"): 27,\n    (\"Marina District\", \"Haight-Ashbury\"): 16,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"Bayview\"): 27,\n    (\"Richmond District\", \"Haight-Ashbury\"): 10,\n    (\"Richmond District\", \"Russian Hill\"): 13,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Fisherman's Wharf\"): 15,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Union Square\", \"The Castro\"): 17,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Sunset District\", \"Financial District\"): 30,\n    (\"Sunset District\", \"Fisherman's Wharf\"): 29,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Bayview\"): 22,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Union Square\"): 30\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Fisherman's Wharf\", \"person\": \"Mark\", \"start_time\": 8.25, \"end_time\": 10, \"duration\": 30},\n    {\"location\": \"Presidio\", \"person\": \"Stephanie\", \"start_time\": 12.25, \"end_time\": 15, \"duration\": 75},\n    {\"location\": \"Bayview\", \"person\": \"Betty\", \"start_time\": 7.25, \"end_time\": 20.5, \"duration\": 15},\n    {\"location\": \"Haight-Ashbury\", \"person\": \"Lisa\", \"start_time\": 15.5, \"end_time\": 18.5, \"duration\": 45},\n    {\"location\": \"Russian Hill\", \"person\": \"William\", \"start_time\": 18.75, \"end_time\": 20, \"duration\": 60},\n    {\"location\": \"The Castro\", \"person\": \"Brian\", \"start_time\": 9.25, \"end_time\": 13.25, \"duration\": 30},\n    {\"location\": \"Marina District\", \"person\": \"Joseph\", \"start_time\": 10.75, \"end_time\": 15, \"duration\": 90},\n    {\"location\": \"Richmond District\", \"person\": \"Ashley\", \"start_time\": 9.75, \"end_time\": 11.25, \"duration\": 45},\n    {\"location\": \"Union Square\", \"person\": \"Patricia\", \"start_time\": 16.5, \"end_time\": 20, \"duration\": 120},\n    {\"location\": \"Sunset District\", \"person\": \"Karen\", \"start_time\": 16.5, \"end_time\": 22, \"duration\": 105}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Financial District\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_908"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Amanda",
                        "start_time": "19:45",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:09",
                        "end_time": "9:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Pacific Heights\": {},\n    \"North Beach\": {},\n    \"Financial District\": {},\n    \"Alamo Square\": {},\n    \"Mission District\": {}\n}\n\ntravel_times = {\n    (\"Pacific Heights\", \"North Beach\"): 9,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"North Beach\", \"Pacific Heights\"): 8,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"North Beach\", \"Mission District\"): 18,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"North Beach\"): 17,\n    (\"Mission District\", \"Financial District\"): 17,\n    (\"Mission District\", \"Alamo Square\"): 11\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"North Beach\", \"person\": \"Helen\", \"start_time\": 9, \"end_time\": 17, \"duration\": 15},\n    {\"location\": \"Financial District\", \"person\": \"Betty\", \"start_time\": 19, \"end_time\": 21.75, \"duration\": 90},\n    {\"location\": \"Alamo Square\", \"person\": \"Amanda\", \"start_time\": 19.75, \"end_time\": 21, \"duration\": 60},\n    {\"location\": \"Mission District\", \"person\": \"Kevin\", \"start_time\": 10.75, \"end_time\": 14.75, \"duration\": 45}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Pacific Heights\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_335"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Michelle",
                        "start_time": "10:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "13:37",
                        "end_time": "14:07"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jessica",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Linda",
                        "start_time": "16:56",
                        "end_time": "18:26"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Sunset District\": {},\n    \"Russian Hill\": {},\n    \"The Castro\": {},\n    \"Richmond District\": {},\n    \"Marina District\": {},\n    \"North Beach\": {},\n    \"Union Square\": {},\n    \"Golden Gate Park\": {}\n}\n\ntravel_times = {\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"North Beach\"): 29,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Union Square\"): 11,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Richmond District\", \"Russian Hill\"): 13,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Golden Gate Park\"): 18,\n    (\"North Beach\", \"Sunset District\"): 27,\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"North Beach\", \"The Castro\"): 22,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Marina District\"): 9,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Sunset District\"): 26,\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Union Square\", \"The Castro\"): 19,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Golden Gate Park\", \"Union Square\"): 22\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Russian Hill\", \"person\": \"Karen\", \"start_time\": 20.75, \"end_time\": 21.75, \"duration\": 60},\n    {\"location\": \"The Castro\", \"person\": \"Jessica\", \"start_time\": 15.75, \"end_time\": 19.5, \"duration\": 60},\n    {\"location\": \"Richmond District\", \"person\": \"Matthew\", \"start_time\": 7.5, \"end_time\": 15.25, \"duration\": 15},\n    {\"location\": \"Marina District\", \"person\": \"Michelle\", \"start_time\": 10.5, \"end_time\": 18.75, \"duration\": 75},\n    {\"location\": \"North Beach\", \"person\": \"Carol\", \"start_time\": 12, \"end_time\": 17, \"duration\": 90},\n    {\"location\": \"Union Square\", \"person\": \"Stephanie\", \"start_time\": 10.75, \"end_time\": 14.25, \"duration\": 30},\n    {\"location\": \"Golden Gate Park\", \"person\": \"Linda\", \"start_time\": 10.75, \"end_time\": 22, \"duration\": 90}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Sunset District\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_607"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Joseph",
                        "start_time": "9:24",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "11:16",
                        "end_time": "11:46"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Barbara",
                        "start_time": "12:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Golden Gate Park\": {},\n    \"Fisherman's Wharf\": {},\n    \"Bayview\": {},\n    \"Mission District\": {},\n    \"Embarcadero\": {},\n    \"Financial District\": {}\n}\n\ntravel_times = {\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Mission District\"): 22,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Bayview\", \"Golden Gate Park\"): 22,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Bayview\", \"Mission District\"): 13,\n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Mission District\", \"Fisherman's Wharf\"): 22,\n    (\"Mission District\", \"Bayview\"): 15,\n    (\"Mission District\", \"Embarcadero\"): 19,\n    (\"Mission District\", \"Financial District\"): 17,\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Embarcadero\", \"Mission District\"): 20,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Financial District\", \"Embarcadero\"): 4\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Fisherman's Wharf\", \"person\": \"Joseph\", \"start_time\": 8, \"end_time\": 17.5, \"duration\": 90},\n    {\"location\": \"Bayview\", \"person\": \"Jeffrey\", \"start_time\": 17.5, \"end_time\": 21.5, \"duration\": 60},\n    {\"location\": \"Mission District\", \"person\": \"Kevin\", \"start_time\": 11.25, \"end_time\": 15.25, \"duration\": 30},\n    {\"location\": \"Embarcadero\", \"person\": \"David\", \"start_time\": 8.25, \"end_time\": 9, \"duration\": 30},\n    {\"location\": \"Financial District\", \"person\": \"Barbara\", \"start_time\": 10.5, \"end_time\": 16.5, \"duration\": 15}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Golden Gate Park\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_432"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Financial District\": {},\n    \"Chinatown\": {},\n    \"Alamo Square\": {},\n    \"Bayview\": {},\n    \"Fisherman's Wharf\": {}\n}\n\ntravel_times = {\n    (\"Financial District\", \"Chinatown\"): 5,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Chinatown\", \"Financial District\"): 5,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Bayview\"): 22,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Chinatown\"): 16,\n    (\"Alamo Square\", \"Bayview\"): 16,\n    (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Chinatown\"): 18,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 20,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Chinatown\", \"person\": \"Nancy\", \"start_time\": 9.5, \"end_time\": 13.5, \"duration\": 90},\n    {\"location\": \"Alamo Square\", \"person\": \"Mary\", \"start_time\": 7, \"end_time\": 21, \"duration\": 75},\n    {\"location\": \"Bayview\", \"person\": \"Jessica\", \"start_time\": 11.25, \"end_time\": 13.75, \"duration\": 45},\n    {\"location\": \"Fisherman's Wharf\", \"person\": \"Rebecca\", \"start_time\": 7, \"end_time\": 8.5, \"duration\": 45}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Financial District\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_309"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Michelle",
                        "start_time": "9:30",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "George",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:19",
                        "end_time": "11:49"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:30",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Sunset District\": {},\n    \"Russian Hill\": {},\n    \"Chinatown\": {},\n    \"Presidio\": {},\n    \"Fisherman's Wharf\": {}\n}\n\ntravel_times = {\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Fisherman's Wharf\"): 29,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Chinatown\", \"Russian Hill\"): 7,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Fisherman's Wharf\", \"Sunset District\"): 27,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Russian Hill\", \"person\": \"William\", \"start_time\": 18.5, \"end_time\": 20.75, \"duration\": 105},\n    {\"location\": \"Chinatown\", \"person\": \"Michelle\", \"start_time\": 8.25, \"end_time\": 14, \"duration\": 15},\n    {\"location\": \"Presidio\", \"person\": \"George\", \"start_time\": 10.5, \"end_time\": 18.75, \"duration\": 30},\n    {\"location\": \"Fisherman's Wharf\", \"person\": \"Robert\", \"start_time\": 9, \"end_time\": 13.75, \"duration\": 30}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Sunset District\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_322"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mary",
                        "start_time": "9:25",
                        "end_time": "10:10"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "10:17",
                        "end_time": "11:47"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "12:02",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Emily",
                        "start_time": "17:19",
                        "end_time": "19:04"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Embarcadero\": {},\n    \"Golden Gate Park\": {},\n    \"Haight-Ashbury\": {},\n    \"Bayview\": {},\n    \"Presidio\": {},\n    \"Financial District\": {}\n}\n\ntravel_times = {\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Embarcadero\", \"Haight-Ashbury\"): 21,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Haight-Ashbury\", \"Embarcadero\"): 20,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Bayview\", \"Golden Gate Park\"): 22,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Presidio\"): 31,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Haight-Ashbury\"): 19,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Presidio\"): 22\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Golden Gate Park\", \"person\": \"Mary\", \"start_time\": 8.75, \"end_time\": 11.75, \"duration\": 45},\n    {\"location\": \"Haight-Ashbury\", \"person\": \"Kevin\", \"start_time\": 10.25, \"end_time\": 16.25, \"duration\": 90},\n    {\"location\": \"Bayview\", \"person\": \"Deborah\", \"start_time\": 15, \"end_time\": 19.25, \"duration\": 120},\n    {\"location\": \"Presidio\", \"person\": \"Stephanie\", \"start_time\": 10, \"end_time\": 17.25, \"duration\": 120},\n    {\"location\": \"Financial District\", \"person\": \"Emily\", \"start_time\": 11.5, \"end_time\": 21.75, \"duration\": 105}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Embarcadero\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_479"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Timothy",
                        "start_time": "20:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Alamo Square\": {},\n    \"Richmond District\": {}\n}\n\ntravel_times = {\n    (\"Alamo Square\", \"Richmond District\"): 12,\n    (\"Richmond District\", \"Alamo Square\"): 13\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Richmond District\", \"person\": \"Timothy\", \"start_time\": 20.75, \"end_time\": 21.5, \"duration\": 45}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Alamo Square\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_98"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:08",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kimberly",
                        "start_time": "16:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Patricia",
                        "start_time": "18:00",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Nob Hill\": {},\n    \"North Beach\": {},\n    \"Fisherman's Wharf\": {},\n    \"Bayview\": {}\n}\n\ntravel_times = {\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 11,\n    (\"Nob Hill\", \"Bayview\"): 19,\n    (\"North Beach\", \"Nob Hill\"): 7,\n    (\"North Beach\", \"Fisherman's Wharf\"): 5,\n    (\"North Beach\", \"Bayview\"): 22,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"North Beach\"): 6,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Bayview\", \"Nob Hill\"): 20,\n    (\"Bayview\", \"North Beach\"): 21,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"North Beach\", \"person\": \"Helen\", \"start_time\": 7, \"end_time\": 16.75, \"duration\": 120},\n    {\"location\": \"Fisherman's Wharf\", \"person\": \"Kimberly\", \"start_time\": 16.5, \"end_time\": 21, \"duration\": 45},\n    {\"location\": \"Bayview\", \"person\": \"Patricia\", \"start_time\": 18, \"end_time\": 21.25, \"duration\": 120}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Nob Hill\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_222"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "21:15",
                        "end_time": "22:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Matthew",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "15:16",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Kenneth",
                        "start_time": "15:53",
                        "end_time": "16:53"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "17:11",
                        "end_time": "18:41"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Helen",
                        "start_time": "19:45",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "21:15",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"Russian Hill\": {},\n    \"Presidio\": {},\n    \"Chinatown\": {},\n    \"Pacific Heights\": {},\n    \"Richmond District\": {},\n    \"Fisherman's Wharf\": {},\n    \"Golden Gate Park\": {},\n    \"Bayview\": {}\n}\n\ntravel_times = {\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Chinatown\", \"Russian Hill\"): 7,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Pacific Heights\"): 10,\n    (\"Chinatown\", \"Richmond District\"): 20,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Chinatown\", \"Bayview\"): 22,\n    (\"Pacific Heights\", \"Russian Hill\"): 7,\n    (\"Pacific Heights\", \"Presidio\"): 11,\n    (\"Pacific Heights\", \"Chinatown\"): 11,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Richmond District\", \"Russian Hill\"): 13,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"Chinatown\"): 20,\n    (\"Richmond District\", \"Pacific Heights\"): 10,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Bayview\", \"Russian Hill\"): 23,\n    (\"Bayview\", \"Presidio\"): 31,\n    (\"Bayview\", \"Chinatown\"): 18,\n    (\"Bayview\", \"Pacific Heights\"): 23,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Bayview\", \"Golden Gate Park\"): 22\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Presidio\", \"person\": \"Matthew\", \"start_time\": 11, \"end_time\": 21, \"duration\": 90},\n    {\"location\": \"Chinatown\", \"person\": \"Margaret\", \"start_time\": 9.25, \"end_time\": 18.75, \"duration\": 90},\n    {\"location\": \"Pacific Heights\", \"person\": \"Nancy\", \"start_time\": 14.25, \"end_time\": 17, \"duration\": 15},\n    {\"location\": \"Richmond District\", \"person\": \"Helen\", \"start_time\": 19.75, \"end_time\": 22, \"duration\": 60},\n    {\"location\": \"Fisherman's Wharf\", \"person\": \"Rebecca\", \"start_time\": 21.25, \"end_time\": 22.25, \"duration\": 60},\n    {\"location\": \"Golden Gate Park\", \"person\": \"Kimberly\", \"start_time\": 13, \"end_time\": 16.5, \"duration\": 120},\n    {\"location\": \"Bayview\", \"person\": \"Kenneth\", \"start_time\": 14.5, \"end_time\": 18, \"duration\": 60}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"Russian Hill\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_629"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Rebecca",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "James",
                        "start_time": "11:05",
                        "end_time": "12:35"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "14:49",
                        "end_time": "16:19"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Amanda",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define the locations and travel times\nlocations = {\n    \"The Castro\": {},\n    \"Bayview\": {},\n    \"Pacific Heights\": {},\n    \"Alamo Square\": {},\n    \"Fisherman's Wharf\": {},\n    \"Golden Gate Park\": {}\n}\n\ntravel_times = {\n    (\"The Castro\", \"Bayview\"): 19,\n    (\"The Castro\", \"Pacific Heights\"): 16,\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"Fisherman's Wharf\"): 24,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"Bayview\", \"The Castro\"): 20,\n    (\"Bayview\", \"Pacific Heights\"): 23,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Bayview\", \"Golden Gate Park\"): 22,\n    (\"Pacific Heights\", \"The Castro\"): 16,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Alamo Square\", \"The Castro\"): 8,\n    (\"Alamo Square\", \"Bayview\"): 16,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Fisherman's Wharf\", \"The Castro\"): 26,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 20,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24\n}\n\n# Define the meeting constraints\nmeetings = [\n    {\"location\": \"Bayview\", \"person\": \"Rebecca\", \"start_time\": 9, \"end_time\": 12.75, \"duration\": 90},\n    {\"location\": \"Pacific Heights\", \"person\": \"Amanda\", \"start_time\": 18.5, \"end_time\": 21.75, \"duration\": 90},\n    {\"location\": \"Alamo Square\", \"person\": \"James\", \"start_time\": 9.75, \"end_time\": 21.25, \"duration\": 90},\n    {\"location\": \"Fisherman's Wharf\", \"person\": \"Sarah\", \"start_time\": 8, \"end_time\": 21.5, \"duration\": 90},\n    {\"location\": \"Golden Gate Park\", \"person\": \"Melissa\", \"start_time\": 9, \"end_time\": 18.75, \"duration\": 90}\n]\n\n# Define the start time and location\nstart_time = 9\nstart_location = \"The Castro\"\n\n# Function to calculate the travel time between two locations\ndef get_travel_time(location1, location2):\n    return travel_times.get((location1, location2), float('inf'))\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting, current_time, current_location):\n    travel_time = get_travel_time(current_location, meeting[\"location\"])\n    if current_time + travel_time > meeting[\"start_time\"]:\n        return False\n    if current_time + travel_time + meeting[\"duration\"] / 60 > meeting[\"end_time\"]:\n        return False\n    return True\n\n# Function to generate the itinerary\ndef generate_itinerary(meetings, start_time, start_location):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    for meeting in meetings:\n        if can_schedule_meeting(meeting, current_time, current_location):\n            travel_time = get_travel_time(current_location, meeting[\"location\"])\n            start_time = max(current_time + travel_time, meeting[\"start_time\"])\n            end_time = start_time + meeting[\"duration\"] / 60\n            itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": f\"{int(start_time)}:{int((start_time % 1) * 60):02}\", \"end_time\": f\"{int(end_time)}:{int((end_time % 1) * 60):02}\"})\n            current_time = end_time\n            current_location = meeting[\"location\"]\n    return itinerary\n\n# Generate the itinerary\nitinerary = generate_itinerary(meetings, start_time, start_location)\n\n# Print the itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_468"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Stephanie",
                        "start_time": "16:15",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "William",
                        "start_time": "1:06",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "18:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Joseph",
                        "start_time": "15:19",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Anthony",
                        "start_time": "14:35",
                        "end_time": "15:50"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Barbara",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "23:35",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sandra",
                        "start_time": "16:27",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "William",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sandra",
                        "start_time": "11:40",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "14:09",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Anthony",
                        "start_time": "15:32",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Stephanie",
                        "start_time": "16:54",
                        "end_time": "18:09"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Barbara",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Marina District\": {\n        \"Richmond District\": 11,\n        \"Union Square\": 16,\n        \"Nob Hill\": 12,\n        \"Fisherman's Wharf\": 10,\n        \"Golden Gate Park\": 18,\n        \"Embarcadero\": 14,\n        \"Financial District\": 17,\n        \"North Beach\": 11,\n        \"Presidio\": 10\n    },\n    \"Richmond District\": {\n        \"Marina District\": 9,\n        \"Union Square\": 21,\n        \"Nob Hill\": 17,\n        \"Fisherman's Wharf\": 18,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 19,\n        \"Financial District\": 22,\n        \"North Beach\": 17,\n        \"Presidio\": 7\n    },\n    \"Union Square\": {\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Nob Hill\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 11,\n        \"Financial District\": 9,\n        \"North Beach\": 10,\n        \"Presidio\": 24\n    },\n    \"Nob Hill\": {\n        \"Marina District\": 11,\n        \"Richmond District\": 14,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 10,\n        \"Golden Gate Park\": 17,\n        \"Embarcadero\": 9,\n        \"Financial District\": 9,\n        \"North Beach\": 8,\n        \"Presidio\": 17\n    },\n    \"Fisherman's Wharf\": {\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 13,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 25,\n        \"Embarcadero\": 8,\n        \"Financial District\": 11,\n        \"North Beach\": 6,\n        \"Presidio\": 17\n    },\n    \"Golden Gate Park\": {\n        \"Marina District\": 16,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Nob Hill\": 20,\n        \"Fisherman's Wharf\": 24,\n        \"Embarcadero\": 25,\n        \"Financial District\": 26,\n        \"North Beach\": 23,\n        \"Presidio\": 11\n    },\n    \"Embarcadero\": {\n        \"Marina District\": 12,\n        \"Richmond District\": 21,\n        \"Union Square\": 10,\n        \"Nob Hill\": 10,\n        \"Fisherman's Wharf\": 6,\n        \"Golden Gate Park\": 25,\n        \"Financial District\": 5,\n        \"North Beach\": 5,\n        \"Presidio\": 20\n    },\n    \"Financial District\": {\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Nob Hill\": 8,\n        \"Fisherman's Wharf\": 10,\n        \"Golden Gate Park\": 23,\n        \"Embarcadero\": 4,\n        \"North Beach\": 7,\n        \"Presidio\": 22\n    },\n    \"North Beach\": {\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 7,\n        \"Nob Hill\": 7,\n        \"Fisherman's Wharf\": 5,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 6,\n        \"Financial District\": 8,\n        \"Presidio\": 17\n    },\n    \"Presidio\": {\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Nob Hill\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Golden Gate Park\": 12,\n        \"Embarcadero\": 20,\n        \"Financial District\": 23,\n        \"North Beach\": 18\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Stephanie\", \"location\": \"Richmond District\", \"start_time\": \"16:15\", \"end_time\": \"21:30\", \"duration\": 75},\n    {\"name\": \"William\", \"location\": \"Union Square\", \"start_time\": \"10:45\", \"end_time\": \"17:30\", \"duration\": 45},\n    {\"name\": \"Elizabeth\", \"location\": \"Nob Hill\", \"start_time\": \"12:15\", \"end_time\": \"15:00\", \"duration\": 105},\n    {\"name\": \"Joseph\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"12:45\", \"end_time\": \"14:00\", \"duration\": 75},\n    {\"name\": \"Anthony\", \"location\": \"Golden Gate Park\", \"start_time\": \"13:00\", \"end_time\": \"20:30\", \"duration\": 75},\n    {\"name\": \"Barbara\", \"location\": \"Embarcadero\", \"start_time\": \"19:15\", \"end_time\": \"20:30\", \"duration\": 75},\n    {\"name\": \"Carol\", \"location\": \"Financial District\", \"start_time\": \"11:45\", \"end_time\": \"16:15\", \"duration\": 60},\n    {\"name\": \"Sandra\", \"location\": \"North Beach\", \"start_time\": \"10:00\", \"end_time\": \"12:30\", \"duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Presidio\", \"start_time\": \"21:15\", \"end_time\": \"22:15\", \"duration\": 45}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Marina District\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_828"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "20:15",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "8:20",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joseph",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "21:44",
                        "end_time": "21:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "22:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "17:43",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "18:51",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Steven",
                        "start_time": "19:30",
                        "end_time": "21:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "0:53",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "9:10",
                        "end_time": "9:25"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "14:10",
                        "end_time": "14:55"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joseph",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "20:36",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "21:14",
                        "end_time": "21:29"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Union Square\": {\n        \"The Castro\": 17,\n        \"North Beach\": 10,\n        \"Embarcadero\": 11,\n        \"Alamo Square\": 15,\n        \"Nob Hill\": 9,\n        \"Presidio\": 24,\n        \"Fisherman's Wharf\": 15,\n        \"Mission District\": 14,\n        \"Haight-Ashbury\": 18\n    },\n    \"The Castro\": {\n        \"Union Square\": 19,\n        \"North Beach\": 20,\n        \"Embarcadero\": 22,\n        \"Alamo Square\": 8,\n        \"Nob Hill\": 16,\n        \"Presidio\": 20,\n        \"Fisherman's Wharf\": 24,\n        \"Mission District\": 7,\n        \"Haight-Ashbury\": 6\n    },\n    \"North Beach\": {\n        \"Union Square\": 7,\n        \"The Castro\": 23,\n        \"Embarcadero\": 6,\n        \"Alamo Square\": 16,\n        \"Nob Hill\": 7,\n        \"Presidio\": 17,\n        \"Fisherman's Wharf\": 5,\n        \"Mission District\": 18,\n        \"Haight-Ashbury\": 18\n    },\n    \"Embarcadero\": {\n        \"Union Square\": 10,\n        \"The Castro\": 25,\n        \"North Beach\": 5,\n        \"Alamo Square\": 19,\n        \"Nob Hill\": 10,\n        \"Presidio\": 20,\n        \"Fisherman's Wharf\": 6,\n        \"Mission District\": 20,\n        \"Haight-Ashbury\": 21\n    },\n    \"Alamo Square\": {\n        \"Union Square\": 14,\n        \"The Castro\": 8,\n        \"North Beach\": 15,\n        \"Embarcadero\": 16,\n        \"Nob Hill\": 11,\n        \"Presidio\": 17,\n        \"Fisherman's Wharf\": 19,\n        \"Mission District\": 10,\n        \"Haight-Ashbury\": 5\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"The Castro\": 17,\n        \"North Beach\": 8,\n        \"Embarcadero\": 9,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Mission District\": 13,\n        \"Haight-Ashbury\": 13\n    },\n    \"Presidio\": {\n        \"Union Square\": 22,\n        \"The Castro\": 21,\n        \"North Beach\": 18,\n        \"Embarcadero\": 20,\n        \"Alamo Square\": 19,\n        \"Nob Hill\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Mission District\": 26,\n        \"Haight-Ashbury\": 15\n    },\n    \"Fisherman's Wharf\": {\n        \"Union Square\": 13,\n        \"The Castro\": 27,\n        \"North Beach\": 6,\n        \"Embarcadero\": 8,\n        \"Alamo Square\": 21,\n        \"Nob Hill\": 11,\n        \"Presidio\": 17,\n        \"Mission District\": 22,\n        \"Haight-Ashbury\": 22\n    },\n    \"Mission District\": {\n        \"Union Square\": 15,\n        \"The Castro\": 7,\n        \"North Beach\": 17,\n        \"Embarcadero\": 19,\n        \"Alamo Square\": 11,\n        \"Nob Hill\": 12,\n        \"Presidio\": 25,\n        \"Fisherman's Wharf\": 22,\n        \"Haight-Ashbury\": 12\n    },\n    \"Haight-Ashbury\": {\n        \"Union Square\": 19,\n        \"The Castro\": 6,\n        \"North Beach\": 19,\n        \"Embarcadero\": 20,\n        \"Alamo Square\": 5,\n        \"Nob Hill\": 15,\n        \"Presidio\": 15,\n        \"Fisherman's Wharf\": 23,\n        \"Mission District\": 11\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Melissa\", \"location\": \"The Castro\", \"start_time\": \"20:15\", \"end_time\": \"21:15\", \"duration\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"North Beach\", \"start_time\": \"07:00\", \"end_time\": \"10:30\", \"duration\": 15},\n    {\"name\": \"Joseph\", \"location\": \"Embarcadero\", \"start_time\": \"15:30\", \"end_time\": \"19:30\", \"duration\": 75},\n    {\"name\": \"Barbara\", \"location\": \"Alamo Square\", \"start_time\": \"20:45\", \"end_time\": \"21:45\", \"duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Nob Hill\", \"start_time\": \"12:15\", \"end_time\": \"17:15\", \"duration\": 105},\n    {\"name\": \"Joshua\", \"location\": \"Presidio\", \"start_time\": \"16:30\", \"end_time\": \"18:15\", \"duration\": 105},\n    {\"name\": \"Brian\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"09:30\", \"end_time\": \"15:30\", \"duration\": 45},\n    {\"name\": \"Steven\", \"location\": \"Mission District\", \"start_time\": \"19:30\", \"end_time\": \"21:00\", \"duration\": 90},\n    {\"name\": \"Betty\", \"location\": \"Haight-Ashbury\", \"start_time\": \"19:00\", \"end_time\": \"20:30\", \"duration\": 90}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Union Square\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_800"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:52",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Jessica",
                        "start_time": "20:29",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jason",
                        "start_time": "15:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "John",
                        "start_time": "17:34",
                        "end_time": "17:49"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "18:06",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "19:16",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Amanda",
                        "start_time": "20:00",
                        "end_time": "21:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "22:51",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Rebecca",
                        "start_time": "13:40",
                        "end_time": "14:55"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Jessica",
                        "start_time": "9:13",
                        "end_time": "11:13"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "John",
                        "start_time": "11:18",
                        "end_time": "11:33"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "11:40",
                        "end_time": "12:25"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Rebecca",
                        "start_time": "12:49",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jason",
                        "start_time": "15:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "18:28",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Union Square\": {\n        \"Mission District\": 14,\n        \"Fisherman's Wharf\": 15,\n        \"Russian Hill\": 13,\n        \"Marina District\": 18,\n        \"North Beach\": 10,\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 15,\n        \"The Castro\": 17,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 27\n    },\n    \"Mission District\": {\n        \"Union Square\": 15,\n        \"Fisherman's Wharf\": 22,\n        \"Russian Hill\": 15,\n        \"Marina District\": 19,\n        \"North Beach\": 17,\n        \"Chinatown\": 16,\n        \"Pacific Heights\": 16,\n        \"The Castro\": 7,\n        \"Nob Hill\": 12,\n        \"Sunset District\": 24\n    },\n    \"Fisherman's Wharf\": {\n        \"Union Square\": 13,\n        \"Mission District\": 22,\n        \"Russian Hill\": 7,\n        \"Marina District\": 9,\n        \"North Beach\": 6,\n        \"Chinatown\": 12,\n        \"Pacific Heights\": 12,\n        \"The Castro\": 27,\n        \"Nob Hill\": 11,\n        \"Sunset District\": 27\n    },\n    \"Russian Hill\": {\n        \"Union Square\": 10,\n        \"Mission District\": 16,\n        \"Fisherman's Wharf\": 7,\n        \"Marina District\": 7,\n        \"North Beach\": 5,\n        \"Chinatown\": 9,\n        \"Pacific Heights\": 7,\n        \"The Castro\": 21,\n        \"Nob Hill\": 5,\n        \"Sunset District\": 23\n    },\n    \"Marina District\": {\n        \"Union Square\": 16,\n        \"Mission District\": 20,\n        \"Fisherman's Wharf\": 10,\n        \"Russian Hill\": 8,\n        \"North Beach\": 11,\n        \"Chinatown\": 15,\n        \"Pacific Heights\": 7,\n        \"The Castro\": 22,\n        \"Nob Hill\": 12,\n        \"Sunset District\": 19\n    },\n    \"North Beach\": {\n        \"Union Square\": 7,\n        \"Mission District\": 18,\n        \"Fisherman's Wharf\": 5,\n        \"Russian Hill\": 4,\n        \"Marina District\": 9,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8,\n        \"The Castro\": 23,\n        \"Nob Hill\": 7,\n        \"Sunset District\": 27\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Mission District\": 17,\n        \"Fisherman's Wharf\": 8,\n        \"Russian Hill\": 7,\n        \"Marina District\": 12,\n        \"North Beach\": 3,\n        \"Pacific Heights\": 10,\n        \"The Castro\": 22,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 29\n    },\n    \"Pacific Heights\": {\n        \"Union Square\": 12,\n        \"Mission District\": 15,\n        \"Fisherman's Wharf\": 13,\n        \"Russian Hill\": 7,\n        \"Marina District\": 6,\n        \"North Beach\": 9,\n        \"Chinatown\": 11,\n        \"The Castro\": 16,\n        \"Nob Hill\": 8,\n        \"Sunset District\": 21\n    },\n    \"The Castro\": {\n        \"Union Square\": 19,\n        \"Mission District\": 7,\n        \"Fisherman's Wharf\": 24,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"North Beach\": 20,\n        \"Chinatown\": 22,\n        \"Pacific Heights\": 16,\n        \"Nob Hill\": 16,\n        \"Sunset District\": 17\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"Mission District\": 13,\n        \"Fisherman's Wharf\": 10,\n        \"Russian Hill\": 5,\n        \"Marina District\": 11,\n        \"North Beach\": 8,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8,\n        \"The Castro\": 17,\n        \"Sunset District\": 24\n    },\n    \"Sunset District\": {\n        \"Union Square\": 30,\n        \"Mission District\": 25,\n        \"Fisherman's Wharf\": 29,\n        \"Russian Hill\": 24,\n        \"Marina District\": 21,\n        \"North Beach\": 28,\n        \"Chinatown\": 30,\n        \"Pacific Heights\": 21,\n        \"The Castro\": 17,\n        \"Nob Hill\": 27\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Kevin\", \"location\": \"Mission District\", \"start_time\": \"20:45\", \"end_time\": \"21:45\", \"duration\": 60},\n    {\"name\": \"Mark\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"17:15\", \"end_time\": \"20:00\", \"duration\": 90},\n    {\"name\": \"Jessica\", \"location\": \"Russian Hill\", \"start_time\": \"09:00\", \"end_time\": \"15:00\", \"duration\": 120},\n    {\"name\": \"Jason\", \"location\": \"Marina District\", \"start_time\": \"15:15\", \"end_time\": \"21:45\", \"duration\": 120},\n    {\"name\": \"John\", \"location\": \"North Beach\", \"start_time\": \"09:45\", \"end_time\": \"18:00\", \"duration\": 15},\n    {\"name\": \"Karen\", \"location\": \"Chinatown\", \"start_time\": \"16:45\", \"end_time\": \"19:00\", \"duration\": 75},\n    {\"name\": \"Sarah\", \"location\": \"Pacific Heights\", \"start_time\": \"17:30\", \"end_time\": \"18:15\", \"duration\": 45},\n    {\"name\": \"Amanda\", \"location\": \"The Castro\", \"start_time\": \"20:00\", \"end_time\": \"21:15\", \"duration\": 60},\n    {\"name\": \"Nancy\", \"location\": \"Nob Hill\", \"start_time\": \"09:45\", \"end_time\": \"13:00\", \"duration\": 45},\n    {\"name\": \"Rebecca\", \"location\": \"Sunset District\", \"start_time\": \"08:45\", \"end_time\": \"15:00\", \"duration\": 75}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Union Square\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_940"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kevin",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "11:02",
                        "end_time": "11:32"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Thomas",
                        "start_time": "2:23",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kevin",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Thomas",
                        "start_time": "19:38",
                        "end_time": "20:23"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Sunset District\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 24,\n        \"Presidio\": 16,\n        \"Financial District\": 30\n    },\n    \"Alamo Square\": {\n        \"Sunset District\": 16,\n        \"Russian Hill\": 13,\n        \"Presidio\": 18,\n        \"Financial District\": 17\n    },\n    \"Russian Hill\": {\n        \"Sunset District\": 23,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"Financial District\": 11\n    },\n    \"Presidio\": {\n        \"Sunset District\": 15,\n        \"Alamo Square\": 18,\n        \"Russian Hill\": 14,\n        \"Financial District\": 23\n    },\n    \"Financial District\": {\n        \"Sunset District\": 31,\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 10,\n        \"Presidio\": 22\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Kevin\", \"location\": \"Alamo Square\", \"start_time\": \"08:15\", \"end_time\": \"21:30\", \"duration\": 75},\n    {\"name\": \"Kimberly\", \"location\": \"Russian Hill\", \"start_time\": \"08:45\", \"end_time\": \"12:30\", \"duration\": 30},\n    {\"name\": \"Joseph\", \"location\": \"Presidio\", \"start_time\": \"18:30\", \"end_time\": \"19:15\", \"duration\": 45},\n    {\"name\": \"Thomas\", \"location\": \"Financial District\", \"start_time\": \"19:00\", \"end_time\": \"21:45\", \"duration\": 45}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Sunset District\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_391"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "6:10",
                        "end_time": "17:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"North Beach\": {\n        \"Pacific Heights\": 8,\n        \"Embarcadero\": 6\n    },\n    \"Pacific Heights\": {\n        \"North Beach\": 9,\n        \"Embarcadero\": 10\n    },\n    \"Embarcadero\": {\n        \"North Beach\": 5,\n        \"Pacific Heights\": 11\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Karen\", \"location\": \"Pacific Heights\", \"start_time\": \"18:45\", \"end_time\": \"20:15\", \"duration\": 90},\n    {\"name\": \"Mark\", \"location\": \"Embarcadero\", \"start_time\": \"13:00\", \"end_time\": \"17:45\", \"duration\": 120}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"North Beach\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_143"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "10:13",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "20:17",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "19:46",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "12:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "15:46",
                        "end_time": "17:31"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Union Square\": {\n        \"Nob Hill\": 9,\n        \"Haight-Ashbury\": 18,\n        \"Chinatown\": 7,\n        \"Marina District\": 18\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"Haight-Ashbury\": 13,\n        \"Chinatown\": 6,\n        \"Marina District\": 11\n    },\n    \"Haight-Ashbury\": {\n        \"Union Square\": 17,\n        \"Nob Hill\": 15,\n        \"Chinatown\": 19,\n        \"Marina District\": 17\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Nob Hill\": 8,\n        \"Haight-Ashbury\": 19,\n        \"Marina District\": 12\n    },\n    \"Marina District\": {\n        \"Union Square\": 16,\n        \"Nob Hill\": 12,\n        \"Haight-Ashbury\": 16,\n        \"Chinatown\": 16\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Karen\", \"location\": \"Nob Hill\", \"start_time\": \"21:15\", \"end_time\": \"21:45\", \"duration\": 30},\n    {\"name\": \"Joseph\", \"location\": \"Haight-Ashbury\", \"start_time\": \"12:30\", \"end_time\": \"19:45\", \"duration\": 90},\n    {\"name\": \"Sandra\", \"location\": \"Chinatown\", \"start_time\": \"07:15\", \"end_time\": \"19:15\", \"duration\": 75},\n    {\"name\": \"Nancy\", \"location\": \"Marina District\", \"start_time\": \"11:00\", \"end_time\": \"20:15\", \"duration\": 105}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Union Square\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_352"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "0:22",
                        "end_time": "21:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Laura",
                        "start_time": "22:27",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "18:45",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Patricia",
                        "start_time": "21:54",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Laura",
                        "start_time": "9:11",
                        "end_time": "9:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "19:16",
                        "end_time": "20:01"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Patricia",
                        "start_time": "20:15",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Fisherman's Wharf\": {\n        \"Bayview\": 26,\n        \"Golden Gate Park\": 25,\n        \"Nob Hill\": 11,\n        \"Marina District\": 9,\n        \"Embarcadero\": 8\n    },\n    \"Bayview\": {\n        \"Fisherman's Wharf\": 25,\n        \"Golden Gate Park\": 22,\n        \"Nob Hill\": 20,\n        \"Marina District\": 25,\n        \"Embarcadero\": 19\n    },\n    \"Golden Gate Park\": {\n        \"Fisherman's Wharf\": 24,\n        \"Bayview\": 23,\n        \"Nob Hill\": 20,\n        \"Marina District\": 16,\n        \"Embarcadero\": 25\n    },\n    \"Nob Hill\": {\n        \"Fisherman's Wharf\": 11,\n        \"Bayview\": 19,\n        \"Golden Gate Park\": 17,\n        \"Marina District\": 11,\n        \"Embarcadero\": 9\n    },\n    \"Marina District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Bayview\": 27,\n        \"Golden Gate Park\": 18,\n        \"Nob Hill\": 12,\n        \"Embarcadero\": 14\n    },\n    \"Embarcadero\": {\n        \"Fisherman's Wharf\": 6,\n        \"Bayview\": 21,\n        \"Golden Gate Park\": 25,\n        \"Nob Hill\": 10,\n        \"Marina District\": 12\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Thomas\", \"location\": \"Bayview\", \"start_time\": \"15:30\", \"end_time\": \"18:30\", \"duration\": 120},\n    {\"name\": \"Stephanie\", \"location\": \"Golden Gate Park\", \"start_time\": \"18:30\", \"end_time\": \"21:45\", \"duration\": 30},\n    {\"name\": \"Laura\", \"location\": \"Nob Hill\", \"start_time\": \"08:45\", \"end_time\": \"16:15\", \"duration\": 30},\n    {\"name\": \"Betty\", \"location\": \"Marina District\", \"start_time\": \"18:45\", \"end_time\": \"21:45\", \"duration\": 45},\n    {\"name\": \"Patricia\", \"location\": \"Embarcadero\", \"start_time\": \"17:30\", \"end_time\": \"22:00\", \"duration\": 45}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Fisherman's Wharf\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_409"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Brian",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "18:35",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Ashley",
                        "start_time": "15:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "18:55",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "20:00",
                        "end_time": "21:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Deborah",
                        "start_time": "23:22",
                        "end_time": "22:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "22:37",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Matthew",
                        "start_time": "21:47",
                        "end_time": "9:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "13:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Anthony",
                        "start_time": "20:09",
                        "end_time": "16:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "11:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:11",
                        "end_time": "13:26"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Brian",
                        "start_time": "13:34",
                        "end_time": "15:04"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Anthony",
                        "start_time": "15:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Ashley",
                        "start_time": "15:53",
                        "end_time": "17:23"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Deborah",
                        "start_time": "17:42",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "18:57",
                        "end_time": "19:42"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "20:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Bayview\": {\n        \"North Beach\": 22,\n        \"Fisherman's Wharf\": 25,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 20,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 18,\n        \"Alamo Square\": 16,\n        \"Presidio\": 32,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 23\n    },\n    \"North Beach\": {\n        \"Bayview\": 25,\n        \"Fisherman's Wharf\": 5,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 7,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 7,\n        \"Alamo Square\": 16,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Fisherman's Wharf\": {\n        \"Bayview\": 26,\n        \"North Beach\": 6,\n        \"Haight-Ashbury\": 22,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 25,\n        \"Union Square\": 13,\n        \"Alamo Square\": 21,\n        \"Presidio\": 17,\n        \"Chinatown\": 12,\n        \"Pacific Heights\": 12\n    },\n    \"Haight-Ashbury\": {\n        \"Bayview\": 18,\n        \"North Beach\": 19,\n        \"Fisherman's Wharf\": 23,\n        \"Nob Hill\": 15,\n        \"Golden Gate Park\": 7,\n        \"Union Square\": 19,\n        \"Alamo Square\": 5,\n        \"Presidio\": 15,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 12\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"North Beach\": 8,\n        \"Fisherman's Wharf\": 10,\n        \"Haight-Ashbury\": 13,\n        \"Golden Gate Park\": 17,\n        \"Union Square\": 7,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Golden Gate Park\": {\n        \"Bayview\": 23,\n        \"North Beach\": 23,\n        \"Fisherman's Wharf\": 24,\n        \"Haight-Ashbury\": 7,\n        \"Nob Hill\": 20,\n        \"Union Square\": 22,\n        \"Alamo Square\": 9,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"Pacific Heights\": 16\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"North Beach\": 10,\n        \"Fisherman's Wharf\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 22,\n        \"Alamo Square\": 15,\n        \"Presidio\": 24,\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 15\n    },\n    \"Alamo Square\": {\n        \"Bayview\": 16,\n        \"North Beach\": 15,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 5,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 9,\n        \"Union Square\": 14,\n        \"Presidio\": 17,\n        \"Chinatown\": 15,\n        \"Pacific Heights\": 10\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"North Beach\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 15,\n        \"Nob Hill\": 18,\n        \"Golden Gate Park\": 12,\n        \"Union Square\": 22,\n        \"Alamo Square\": 19,\n        \"Chinatown\": 21,\n        \"Pacific Heights\": 11\n    },\n    \"Chinatown\": {\n        \"Bayview\": 20,\n        \"North Beach\": 3,\n        \"Fisherman's Wharf\": 8,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 23,\n        \"Union Square\": 7,\n        \"Alamo Square\": 17,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 11\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"North Beach\": 9,\n        \"Fisherman's Wharf\": 13,\n        \"Haight-Ashbury\": 11,\n        \"Nob Hill\": 8,\n        \"Golden Gate Park\": 15,\n        \"Union Square\": 12,\n        \"Alamo Square\": 10,\n        \"Presidio\": 11,\n        \"Chinatown\": 11\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Brian\", \"location\": \"North Beach\", \"start_time\": \"13:00\", \"end_time\": \"19:00\", \"duration\": 90},\n    {\"name\": \"Richard\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"11:00\", \"end_time\": \"12:45\", \"duration\": 60},\n    {\"name\": \"Ashley\", \"location\": \"Haight-Ashbury\", \"start_time\": \"15:00\", \"end_time\": \"20:30\", \"duration\": 90},\n    {\"name\": \"Elizabeth\", \"location\": \"Nob Hill\", \"start_time\": \"11:45\", \"end_time\": \"18:30\", \"duration\": 75},\n    {\"name\": \"Jessica\", \"location\": \"Golden Gate Park\", \"start_time\": \"20:00\", \"end_time\": \"21:45\", \"duration\": 105},\n    {\"name\": \"Deborah\", \"location\": \"Union Square\", \"start_time\": \"17:30\", \"end_time\": \"22:00\", \"duration\": 60},\n    {\"name\": \"Kimberly\", \"location\": \"Alamo Square\", \"start_time\": \"17:30\", \"end_time\": \"21:15\", \"duration\": 45},\n    {\"name\": \"Matthew\", \"location\": \"Presidio\", \"start_time\": \"08:15\", \"end_time\": \"09:00\", \"duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Chinatown\", \"start_time\": \"13:45\", \"end_time\": \"19:30\", \"duration\": 105},\n    {\"name\": \"Anthony\", \"location\": \"Pacific Heights\", \"start_time\": \"14:15\", \"end_time\": \"16:00\", \"duration\": 30}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Bayview\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_952"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Linda",
                        "start_time": "18:00",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "3:52",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kimberly",
                        "start_time": "16:53",
                        "end_time": "17:23"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Paul",
                        "start_time": "21:00",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "0:53",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "12:39",
                        "end_time": "13:54"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "16:15",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "18:56",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "18:47",
                        "end_time": "20:02"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kimberly",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "15:01",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "15:51",
                        "end_time": "17:06"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "17:24",
                        "end_time": "18:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "18:37",
                        "end_time": "19:07"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "19:22",
                        "end_time": "20:37"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Paul",
                        "start_time": "21:00",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Linda",
                        "start_time": "21:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Pacific Heights\": {\n        \"Marina District\": 6,\n        \"The Castro\": 16,\n        \"Richmond District\": 12,\n        \"Alamo Square\": 10,\n        \"Financial District\": 13,\n        \"Presidio\": 11,\n        \"Mission District\": 15,\n        \"Nob Hill\": 8,\n        \"Russian Hill\": 7\n    },\n    \"Marina District\": {\n        \"Pacific Heights\": 7,\n        \"The Castro\": 22,\n        \"Richmond District\": 11,\n        \"Alamo Square\": 15,\n        \"Financial District\": 17,\n        \"Presidio\": 10,\n        \"Mission District\": 20,\n        \"Nob Hill\": 12,\n        \"Russian Hill\": 8\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Alamo Square\": 8,\n        \"Financial District\": 21,\n        \"Presidio\": 20,\n        \"Mission District\": 7,\n        \"Nob Hill\": 16,\n        \"Russian Hill\": 18\n    },\n    \"Richmond District\": {\n        \"Pacific Heights\": 10,\n        \"Marina District\": 9,\n        \"The Castro\": 16,\n        \"Alamo Square\": 13,\n        \"Financial District\": 22,\n        \"Presidio\": 7,\n        \"Mission District\": 20,\n        \"Nob Hill\": 17,\n        \"Russian Hill\": 13\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10,\n        \"Marina District\": 15,\n        \"The Castro\": 8,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Presidio\": 17,\n        \"Mission District\": 10,\n        \"Nob Hill\": 11,\n        \"Russian Hill\": 13\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13,\n        \"Marina District\": 15,\n        \"The Castro\": 20,\n        \"Richmond District\": 21,\n        \"Alamo Square\": 17,\n        \"Presidio\": 22,\n        \"Mission District\": 17,\n        \"Nob Hill\": 8,\n        \"Russian Hill\": 11\n    },\n    \"Presidio\": {\n        \"Pacific Heights\": 11,\n        \"Marina District\": 11,\n        \"The Castro\": 21,\n        \"Richmond District\": 7,\n        \"Alamo Square\": 19,\n        \"Financial District\": 23,\n        \"Mission District\": 26,\n        \"Nob Hill\": 18,\n        \"Russian Hill\": 14\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16,\n        \"Marina District\": 19,\n        \"The Castro\": 7,\n        \"Richmond District\": 20,\n        \"Alamo Square\": 11,\n        \"Financial District\": 15,\n        \"Presidio\": 25,\n        \"Nob Hill\": 12,\n        \"Russian Hill\": 15\n    },\n    \"Nob Hill\": {\n        \"Pacific Heights\": 8,\n        \"Marina District\": 11,\n        \"The Castro\": 17,\n        \"Richmond District\": 14,\n        \"Alamo Square\": 11,\n        \"Financial District\": 9,\n        \"Presidio\": 17,\n        \"Mission District\": 13,\n        \"Russian Hill\": 5\n    },\n    \"Russian Hill\": {\n        \"Pacific Heights\": 7,\n        \"Marina District\": 7,\n        \"The Castro\": 21,\n        \"Richmond District\": 14,\n        \"Alamo Square\": 15,\n        \"Financial District\": 11,\n        \"Presidio\": 14,\n        \"Mission District\": 16,\n        \"Nob Hill\": 5\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Linda\", \"location\": \"Marina District\", \"start_time\": \"18:00\", \"end_time\": \"22:00\", \"duration\": 30},\n    {\"name\": \"Kenneth\", \"location\": \"The Castro\", \"start_time\": \"14:45\", \"end_time\": \"16:15\", \"duration\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"Richmond District\", \"start_time\": \"14:15\", \"end_time\": \"22:00\", \"duration\": 30},\n    {\"name\": \"Paul\", \"location\": \"Alamo Square\", \"start_time\": \"21:00\", \"end_time\": \"21:30\", \"duration\": 15},\n    {\"name\": \"Carol\", \"location\": \"Financial District\", \"start_time\": \"10:15\", \"end_time\": \"12:00\", \"duration\": 60},\n    {\"name\": \"Brian\", \"location\": \"Presidio\", \"start_time\": \"10:00\", \"end_time\": \"21:30\", \"duration\": 75},\n    {\"name\": \"Laura\", \"location\": \"Mission District\", \"start_time\": \"16:15\", \"end_time\": \"20:30\", \"duration\": 30},\n    {\"name\": \"Sandra\", \"location\": \"Nob Hill\", \"start_time\": \"09:15\", \"end_time\": \"18:30\", \"duration\": 60},\n    {\"name\": \"Karen\", \"location\": \"Russian Hill\", \"start_time\": \"18:30\", \"end_time\": \"22:00\", \"duration\": 75}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Pacific Heights\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_870"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "9:20",
                        "end_time": "11:20"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "12:30",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Matthew",
                        "start_time": "14:22",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jessica",
                        "start_time": "14:19",
                        "end_time": "15:04"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "15:28",
                        "end_time": "16:13"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "16:26",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Karen",
                        "start_time": "21:51",
                        "end_time": "22:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Laura",
                        "start_time": "22:35",
                        "end_time": "22:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "9:20",
                        "end_time": "11:20"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Matthew",
                        "start_time": "11:37",
                        "end_time": "13:07"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "13:23",
                        "end_time": "14:08"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "14:36",
                        "end_time": "15:21"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "15:27",
                        "end_time": "16:12"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jessica",
                        "start_time": "16:17",
                        "end_time": "17:02"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Karen",
                        "start_time": "19:57",
                        "end_time": "21:57"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Richmond District\": {\n        \"Chinatown\": 20,\n        \"Sunset District\": 11,\n        \"Alamo Square\": 13,\n        \"Financial District\": 22,\n        \"North Beach\": 17,\n        \"Embarcadero\": 19,\n        \"Presidio\": 7,\n        \"Golden Gate Park\": 9,\n        \"Bayview\": 27\n    },\n    \"Chinatown\": {\n        \"Richmond District\": 20,\n        \"Sunset District\": 29,\n        \"Alamo Square\": 17,\n        \"Financial District\": 5,\n        \"North Beach\": 3,\n        \"Embarcadero\": 5,\n        \"Presidio\": 19,\n        \"Golden Gate Park\": 23,\n        \"Bayview\": 20\n    },\n    \"Sunset District\": {\n        \"Richmond District\": 12,\n        \"Chinatown\": 30,\n        \"Alamo Square\": 17,\n        \"Financial District\": 30,\n        \"North Beach\": 28,\n        \"Embarcadero\": 30,\n        \"Presidio\": 16,\n        \"Golden Gate Park\": 11,\n        \"Bayview\": 22\n    },\n    \"Alamo Square\": {\n        \"Richmond District\": 11,\n        \"Chinatown\": 15,\n        \"Sunset District\": 16,\n        \"Financial District\": 17,\n        \"North Beach\": 15,\n        \"Embarcadero\": 16,\n        \"Presidio\": 17,\n        \"Golden Gate Park\": 9,\n        \"Bayview\": 16\n    },\n    \"Financial District\": {\n        \"Richmond District\": 21,\n        \"Chinatown\": 5,\n        \"Sunset District\": 30,\n        \"Alamo Square\": 17,\n        \"North Beach\": 7,\n        \"Embarcadero\": 4,\n        \"Presidio\": 22,\n        \"Golden Gate Park\": 23,\n        \"Bayview\": 19\n    },\n    \"North Beach\": {\n        \"Richmond District\": 18,\n        \"Chinatown\": 6,\n        \"Sunset District\": 27,\n        \"Alamo Square\": 16,\n        \"Financial District\": 8,\n        \"Embarcadero\": 6,\n        \"Presidio\": 17,\n        \"Golden Gate Park\": 22,\n        \"Bayview\": 25\n    },\n    \"Embarcadero\": {\n        \"Richmond District\": 21,\n        \"Chinatown\": 7,\n        \"Sunset District\": 30,\n        \"Alamo Square\": 19,\n        \"Financial District\": 5,\n        \"North Beach\": 5,\n        \"Presidio\": 20,\n        \"Golden Gate Park\": 25,\n        \"Bayview\": 21\n    },\n    \"Presidio\": {\n        \"Richmond District\": 7,\n        \"Chinatown\": 21,\n        \"Sunset District\": 15,\n        \"Alamo Square\": 19,\n        \"Financial District\": 23,\n        \"North Beach\": 18,\n        \"Embarcadero\": 20,\n        \"Golden Gate Park\": 12,\n        \"Bayview\": 31\n    },\n    \"Golden Gate Park\": {\n        \"Richmond District\": 7,\n        \"Chinatown\": 23,\n        \"Sunset District\": 10,\n        \"Alamo Square\": 9,\n        \"Financial District\": 26,\n        \"North Beach\": 23,\n        \"Embarcadero\": 25,\n        \"Presidio\": 11,\n        \"Bayview\": 23\n    },\n    \"Bayview\": {\n        \"Richmond District\": 25,\n        \"Chinatown\": 19,\n        \"Sunset District\": 23,\n        \"Alamo Square\": 16,\n        \"Financial District\": 19,\n        \"North Beach\": 22,\n        \"Embarcadero\": 19,\n        \"Presidio\": 32,\n        \"Golden Gate Park\": 22\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Robert\", \"location\": \"Chinatown\", \"start_time\": \"07:45\", \"end_time\": \"17:30\", \"duration\": 120},\n    {\"name\": \"David\", \"location\": \"Sunset District\", \"start_time\": \"12:30\", \"end_time\": \"19:45\", \"duration\": 45},\n    {\"name\": \"Matthew\", \"location\": \"Alamo Square\", \"start_time\": \"08:45\", \"end_time\": \"13:45\", \"duration\": 90},\n    {\"name\": \"Jessica\", \"location\": \"Financial District\", \"start_time\": \"09:30\", \"end_time\": \"18:45\", \"duration\": 45},\n    {\"name\": \"Melissa\", \"location\": \"North Beach\", \"start_time\": \"07:15\", \"end_time\": \"16:45\", \"duration\": 45},\n    {\"name\": \"Mark\", \"location\": \"Embarcadero\", \"start_time\": \"15:15\", \"end_time\": \"17:00\", \"duration\": 45},\n    {\"name\": \"Deborah\", \"location\": \"Presidio\", \"start_time\": \"19:00\", \"end_time\": \"19:45\", \"duration\": 45},\n    {\"name\": \"Karen\", \"location\": \"Golden Gate Park\", \"start_time\": \"19:30\", \"end_time\": \"22:00\", \"duration\": 120},\n    {\"name\": \"Laura\", \"location\": \"Bayview\", \"start_time\": \"21:15\", \"end_time\": \"22:15\", \"duration\": 15}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Richmond District\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_884"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "17:52",
                        "end_time": "15:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "14:07",
                        "end_time": "14:37"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"North Beach\": {\n        \"Mission District\": 18,\n        \"The Castro\": 22\n    },\n    \"Mission District\": {\n        \"North Beach\": 17,\n        \"The Castro\": 7\n    },\n    \"The Castro\": {\n        \"North Beach\": 20,\n        \"Mission District\": 7\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"James\", \"location\": \"Mission District\", \"start_time\": \"12:45\", \"end_time\": \"14:00\", \"duration\": 75},\n    {\"name\": \"Robert\", \"location\": \"The Castro\", \"start_time\": \"12:45\", \"end_time\": \"15:15\", \"duration\": 30}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"North Beach\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_180"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "23:30",
                        "end_time": "15:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Nob Hill\": {\n        \"Pacific Heights\": 8,\n        \"Mission District\": 13\n    },\n    \"Pacific Heights\": {\n        \"Nob Hill\": 8,\n        \"Mission District\": 15\n    },\n    \"Mission District\": {\n        \"Nob Hill\": 12,\n        \"Pacific Heights\": 16\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Thomas\", \"location\": \"Pacific Heights\", \"start_time\": \"15:30\", \"end_time\": \"19:15\", \"duration\": 75},\n    {\"name\": \"Kenneth\", \"location\": \"Mission District\", \"start_time\": \"12:00\", \"end_time\": \"15:45\", \"duration\": 45}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Nob Hill\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_174"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "19:15",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "7:49",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Sarah",
                        "start_time": "21:51",
                        "end_time": "21:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "22:13",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "19:13",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Charles",
                        "start_time": "0:15",
                        "end_time": "22:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "22:37",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "20:25",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "19:15",
                        "end_time": "18:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "13:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "15:09",
                        "end_time": "16:09"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "16:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "18:37",
                        "end_time": "19:37"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "19:52",
                        "end_time": "21:52"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Embarcadero\": {\n        \"Bayview\": 21,\n        \"Chinatown\": 7,\n        \"Alamo Square\": 19,\n        \"Nob Hill\": 10,\n        \"Presidio\": 20,\n        \"Union Square\": 10,\n        \"The Castro\": 25,\n        \"North Beach\": 5,\n        \"Fisherman's Wharf\": 6,\n        \"Marina District\": 12\n    },\n    \"Bayview\": {\n        \"Embarcadero\": 19,\n        \"Chinatown\": 19,\n        \"Alamo Square\": 16,\n        \"Nob Hill\": 20,\n        \"Presidio\": 32,\n        \"Union Square\": 18,\n        \"The Castro\": 19,\n        \"North Beach\": 22,\n        \"Fisherman's Wharf\": 25,\n        \"Marina District\": 27\n    },\n    \"Chinatown\": {\n        \"Embarcadero\": 5,\n        \"Bayview\": 20,\n        \"Alamo Square\": 17,\n        \"Nob Hill\": 9,\n        \"Presidio\": 19,\n        \"Union Square\": 7,\n        \"The Castro\": 22,\n        \"North Beach\": 3,\n        \"Fisherman's Wharf\": 8,\n        \"Marina District\": 12\n    },\n    \"Alamo Square\": {\n        \"Embarcadero\": 16,\n        \"Bayview\": 16,\n        \"Chinatown\": 15,\n        \"Nob Hill\": 11,\n        \"Presidio\": 17,\n        \"Union Square\": 14,\n        \"The Castro\": 8,\n        \"North Beach\": 15,\n        \"Fisherman's Wharf\": 19,\n        \"Marina District\": 15\n    },\n    \"Nob Hill\": {\n        \"Embarcadero\": 9,\n        \"Bayview\": 19,\n        \"Chinatown\": 6,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17,\n        \"Union Square\": 7,\n        \"The Castro\": 17,\n        \"North Beach\": 8,\n        \"Fisherman's Wharf\": 10,\n        \"Marina District\": 11\n    },\n    \"Presidio\": {\n        \"Embarcadero\": 20,\n        \"Bayview\": 31,\n        \"Chinatown\": 21,\n        \"Alamo Square\": 19,\n        \"Nob Hill\": 18,\n        \"Union Square\": 22,\n        \"The Castro\": 21,\n        \"North Beach\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Marina District\": 11\n    },\n    \"Union Square\": {\n        \"Embarcadero\": 11,\n        \"Bayview\": 15,\n        \"Chinatown\": 7,\n        \"Alamo Square\": 15,\n        \"Nob Hill\": 9,\n        \"Presidio\": 24,\n        \"The Castro\": 17,\n        \"North Beach\": 10,\n        \"Fisherman's Wharf\": 15,\n        \"Marina District\": 18\n    },\n    \"The Castro\": {\n        \"Embarcadero\": 22,\n        \"Bayview\": 19,\n        \"Chinatown\": 22,\n        \"Alamo Square\": 8,\n        \"Nob Hill\": 16,\n        \"Presidio\": 20,\n        \"Union Square\": 19,\n        \"North Beach\": 20,\n        \"Fisherman's Wharf\": 24,\n        \"Marina District\": 21\n    },\n    \"North Beach\": {\n        \"Embarcadero\": 6,\n        \"Bayview\": 25,\n        \"Chinatown\": 6,\n        \"Alamo Square\": 16,\n        \"Nob Hill\": 7,\n        \"Presidio\": 17,\n        \"Union Square\": 7,\n        \"The Castro\": 23,\n        \"Fisherman's Wharf\": 5,\n        \"Marina District\": 9\n    },\n    \"Fisherman's Wharf\": {\n        \"Embarcadero\": 8,\n        \"Bayview\": 26,\n        \"Chinatown\": 12,\n        \"Alamo Square\": 21,\n        \"Nob Hill\": 11,\n        \"Presidio\": 17,\n        \"Union Square\": 13,\n        \"The Castro\": 27,\n        \"North Beach\": 6,\n        \"Marina District\": 10\n    },\n    \"Marina District\": {\n        \"Embarcadero\": 14,\n        \"Bayview\": 27,\n        \"Chinatown\": 15,\n        \"Alamo Square\": 15,\n        \"Nob Hill\": 12,\n        \"Presidio\": 10,\n        \"Union Square\": 16,\n        \"The Castro\": 22,\n        \"North Beach\": 11,\n        \"Fisherman's Wharf\": 10\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Matthew\", \"location\": \"Bayview\", \"start_time\": \"19:15\", \"end_time\": \"22:00\", \"duration\": 120},\n    {\"name\": \"Karen\", \"location\": \"Chinatown\", \"start_time\": \"19:15\", \"end_time\": \"21:15\", \"duration\": 90},\n    {\"name\": \"Sarah\", \"location\": \"Alamo Square\", \"start_time\": \"20:00\", \"end_time\": \"21:45\", \"duration\": 105},\n    {\"name\": \"Jessica\", \"location\": \"Nob Hill\", \"start_time\": \"16:30\", \"end_time\": \"18:45\", \"duration\": 120},\n    {\"name\": \"Stephanie\", \"location\": \"Presidio\", \"start_time\": \"07:30\", \"end_time\": \"10:15\", \"duration\": 60},\n    {\"name\": \"Mary\", \"location\": \"Union Square\", \"start_time\": \"16:45\", \"end_time\": \"21:30\", \"duration\": 60},\n    {\"name\": \"Charles\", \"location\": \"The Castro\", \"start_time\": \"16:30\", \"end_time\": \"22:00\", \"duration\": 105},\n    {\"name\": \"Nancy\", \"location\": \"North Beach\", \"start_time\": \"14:45\", \"end_time\": \"20:00\", \"duration\": 15},\n    {\"name\": \"Thomas\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"13:30\", \"end_time\": \"19:00\", \"duration\": 30},\n    {\"name\": \"Brian\", \"location\": \"Marina District\", \"start_time\": \"12:15\", \"end_time\": \"18:00\", \"duration\": 60}\n]\n\ndef calculate_itinerary(meetings, travel_distances):\n    itinerary = []\n    current_location = \"Embarcadero\"\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    for meeting in meetings:\n        travel_time = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\")\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\")\n\n        if arrival_time < start_time:\n            wait_time = start_time - arrival_time\n            current_time = start_time\n        else:\n            wait_time = timedelta(0)\n\n        meeting_start_time = max(arrival_time, start_time)\n        meeting_end_time = min(meeting_start_time + timedelta(minutes=meeting[\"duration\"]), end_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"name\"],\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n        })\n\n        current_time = meeting_end_time + wait_time + timedelta(minutes=travel_time)\n        current_location = meeting[\"location\"]\n\n    return itinerary\n\nitinerary = calculate_itinerary(meetings, travel_distances)\nprint(json.dumps({\"itinerary\": itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_976"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "11:17",
                        "end_time": "12:47"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Matthew",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "13:52",
                        "end_time": "15:37"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "15:54",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Linda",
                        "start_time": "18:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "19:27",
                        "end_time": "20:57"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Russian Hill': {'Marina District': 7, 'Financial District': 11, 'Alamo Square': 15, 'Golden Gate Park': 21, 'The Castro': 21, 'Bayview': 23, 'Sunset District': 23, 'Haight-Ashbury': 17, 'Nob Hill': 5},\n    'Marina District': {'Russian Hill': 8, 'Financial District': 17, 'Alamo Square': 15, 'Golden Gate Park': 18, 'The Castro': 22, 'Bayview': 27, 'Sunset District': 19, 'Haight-Ashbury': 16, 'Nob Hill': 12},\n    'Financial District': {'Russian Hill': 11, 'Marina District': 15, 'Alamo Square': 17, 'Golden Gate Park': 23, 'The Castro': 20, 'Bayview': 19, 'Sunset District': 30, 'Haight-Ashbury': 19, 'Nob Hill': 8},\n    'Alamo Square': {'Russian Hill': 13, 'Marina District': 15, 'Financial District': 17, 'Golden Gate Park': 9, 'The Castro': 8, 'Bayview': 16, 'Sunset District': 16, 'Haight-Ashbury': 5, 'Nob Hill': 11},\n    'Golden Gate Park': {'Russian Hill': 19, 'Marina District': 16, 'Financial District': 26, 'Alamo Square': 9, 'The Castro': 13, 'Bayview': 23, 'Sunset District': 10, 'Haight-Ashbury': 7, 'Nob Hill': 20},\n    'The Castro': {'Russian Hill': 18, 'Marina District': 21, 'Financial District': 21, 'Alamo Square': 8, 'Golden Gate Park': 11, 'Bayview': 19, 'Sunset District': 17, 'Haight-Ashbury': 6, 'Nob Hill': 16},\n    'Bayview': {'Russian Hill': 23, 'Marina District': 27, 'Financial District': 19, 'Alamo Square': 16, 'Golden Gate Park': 22, 'The Castro': 19, 'Sunset District': 23, 'Haight-Ashbury': 19, 'Nob Hill': 20},\n    'Sunset District': {'Russian Hill': 24, 'Marina District': 21, 'Financial District': 30, 'Alamo Square': 17, 'Golden Gate Park': 11, 'The Castro': 17, 'Bayview': 22, 'Haight-Ashbury': 15, 'Nob Hill': 27},\n    'Haight-Ashbury': {'Russian Hill': 17, 'Marina District': 17, 'Financial District': 21, 'Alamo Square': 5, 'Golden Gate Park': 7, 'The Castro': 6, 'Bayview': 18, 'Sunset District': 15, 'Nob Hill': 15},\n    'Nob Hill': {'Russian Hill': 5, 'Marina District': 11, 'Financial District': 9, 'Alamo Square': 11, 'Golden Gate Park': 17, 'The Castro': 17, 'Bayview': 19, 'Sunset District': 24, 'Haight-Ashbury': 13}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Mark': {'location': 'Marina District','start_time': '18:45', 'end_time': '21:00', 'duration': 90},\n    'Karen': {'location': 'Financial District','start_time': '09:30', 'end_time': '12:45', 'duration': 90},\n    'Barbara': {'location': 'Alamo Square','start_time': '10:00', 'end_time': '19:30', 'duration': 90},\n    'Nancy': {'location': 'Golden Gate Park','start_time': '16:45', 'end_time': '20:00', 'duration': 105},\n    'David': {'location': 'The Castro','start_time': '09:00', 'end_time': '18:00', 'duration': 120},\n    'Linda': {'location': 'Bayview','start_time': '18:15', 'end_time': '19:45', 'duration': 45},\n    'Kevin': {'location': 'Sunset District','start_time': '10:00', 'end_time': '17:45', 'duration': 120},\n    'Matthew': {'location': 'Haight-Ashbury','start_time': '10:15', 'end_time': '15:30', 'duration': 45},\n    'Andrew': {'location': 'Nob Hill','start_time': '11:45', 'end_time': '16:45', 'duration': 105}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Russian Hill'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n               'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_885"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "9:23",
                        "end_time": "9:38"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "William",
                        "start_time": "9:54",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mary",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "15:42",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Charles",
                        "start_time": "17:56",
                        "end_time": "18:11"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Russian Hill': {'Sunset District': 23, 'Union Square': 10, 'Nob Hill': 5, 'Marina District': 7, 'Richmond District': 14, 'Financial District': 11, 'Embarcadero': 8, 'The Castro': 21, 'Alamo Square': 15, 'Presidio': 14},\n    'Sunset District': {'Russian Hill': 24, 'Union Square': 30, 'Nob Hill': 27, 'Marina District': 21, 'Richmond District': 12, 'Financial District': 30, 'Embarcadero': 30, 'The Castro': 17, 'Alamo Square': 17, 'Presidio': 16},\n    'Union Square': {'Russian Hill': 13, 'Sunset District': 27, 'Nob Hill': 9, 'Marina District': 18, 'Richmond District': 20, 'Financial District': 9, 'Embarcadero': 11, 'The Castro': 17, 'Alamo Square': 15, 'Presidio': 24},\n    'Nob Hill': {'Russian Hill': 5, 'Sunset District': 24, 'Union Square': 7, 'Marina District': 11, 'Richmond District': 14, 'Financial District': 9, 'Embarcadero': 9, 'The Castro': 17, 'Alamo Square': 11, 'Presidio': 17},\n    'Marina District': {'Russian Hill': 8, 'Sunset District': 19, 'Union Square': 16, 'Nob Hill': 12, 'Richmond District': 11, 'Financial District': 17, 'Embarcadero': 14, 'The Castro': 22, 'Alamo Square': 15, 'Presidio': 10},\n    'Richmond District': {'Russian Hill': 13, 'Sunset District': 11, 'Union Square': 21, 'Nob Hill': 17, 'Marina District': 9, 'Financial District': 22, 'Embarcadero': 19, 'The Castro': 16, 'Alamo Square': 13, 'Presidio': 7},\n    'Financial District': {'Russian Hill': 11, 'Sunset District': 30, 'Union Square': 9, 'Nob Hill': 8, 'Marina District': 15, 'Richmond District': 21, 'Embarcadero': 4, 'The Castro': 20, 'Alamo Square': 17, 'Presidio': 22},\n    'Embarcadero': {'Russian Hill': 8, 'Sunset District': 30, 'Union Square': 10, 'Nob Hill': 10, 'Marina District': 12, 'Richmond District': 21, 'Financial District': 5, 'The Castro': 25, 'Alamo Square': 19, 'Presidio': 20},\n    'The Castro': {'Russian Hill': 18, 'Sunset District': 17, 'Union Square': 19, 'Nob Hill': 16, 'Marina District': 21, 'Richmond District': 16, 'Financial District': 21, 'Embarcadero': 22, 'Alamo Square': 8, 'Presidio': 20},\n    'Alamo Square': {'Russian Hill': 13, 'Sunset District': 16, 'Union Square': 14, 'Nob Hill': 11, 'Marina District': 15, 'Richmond District': 11, 'Financial District': 17, 'Embarcadero': 16, 'The Castro': 8, 'Presidio': 17},\n    'Presidio': {'Russian Hill': 14, 'Sunset District': 15, 'Union Square': 22, 'Nob Hill': 18, 'Marina District': 11, 'Richmond District': 7, 'Financial District': 23, 'Embarcadero': 20, 'The Castro': 21, 'Alamo Square': 19}\n}\n\n# Define meeting constraints\nmeetings = {\n    'David': {'location': 'Sunset District','start_time': '09:15', 'end_time': '22:00', 'duration': 15},\n    'Kenneth': {'location': 'Union Square','start_time': '21:15', 'end_time': '21:45', 'duration': 15},\n    'Patricia': {'location': 'Nob Hill','start_time': '15:00', 'end_time': '19:15', 'duration': 120},\n    'Mary': {'location': 'Marina District','start_time': '14:45', 'end_time': '16:45', 'duration': 45},\n    'Charles': {'location': 'Richmond District','start_time': '17:15', 'end_time': '21:00', 'duration': 15},\n    'Joshua': {'location': 'Financial District','start_time': '14:30', 'end_time': '17:15', 'duration': 90},\n    'Ronald': {'location': 'Embarcadero','start_time': '18:15', 'end_time': '20:45', 'duration': 30},\n    'George': {'location': 'The Castro','start_time': '14:15', 'end_time': '19:00', 'duration': 105},\n    'Kimberly': {'location': 'Alamo Square','start_time': '09:00', 'end_time': '14:30', 'duration': 105},\n    'William': {'location': 'Presidio','start_time': '07:00', 'end_time': '12:45', 'duration': 60}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Russian Hill'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n               'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_937"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Andrew",
                        "start_time": "11:45",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "13:13",
                        "end_time": "13:43"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "16:15",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Rebecca",
                        "start_time": "18:51",
                        "end_time": "20:21"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Union Square': {'Golden Gate Park': 22, 'Pacific Heights': 15, 'Presidio': 24, 'Chinatown': 7, 'The Castro': 19},\n    'Golden Gate Park': {'Union Square': 22, 'Pacific Heights': 16, 'Presidio': 11, 'Chinatown': 23, 'The Castro': 13},\n    'Pacific Heights': {'Union Square': 12, 'Golden Gate Park': 15, 'Presidio': 11, 'Chinatown': 11, 'The Castro': 16},\n    'Presidio': {'Union Square': 22, 'Golden Gate Park': 12, 'Pacific Heights': 11, 'Chinatown': 21, 'The Castro': 21},\n    'Chinatown': {'Union Square': 7, 'Golden Gate Park': 23, 'Pacific Heights': 10, 'Presidio': 19, 'The Castro': 22},\n    'The Castro': {'Union Square': 19, 'Golden Gate Park': 11, 'Pacific Heights': 16, 'Presidio': 20, 'Chinatown': 20}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Andrew': {'location': 'Golden Gate Park','start_time': '11:45', 'end_time': '14:30', 'duration': 75},\n    'Sarah': {'location': 'Pacific Heights','start_time': '16:15', 'end_time': '18:45', 'duration': 15},\n    'Nancy': {'location': 'Presidio','start_time': '17:30', 'end_time': '19:15', 'duration': 60},\n    'Rebecca': {'location': 'Chinatown','start_time': '09:45', 'end_time': '21:30', 'duration': 90},\n    'Robert': {'location': 'The Castro','start_time': '08:30', 'end_time': '14:15', 'duration': 30}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Union Square'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n              'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_403"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "David",
                        "start_time": "16:00",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Golden Gate Park': {'Chinatown': 23},\n    'Chinatown': {'Golden Gate Park': 23}\n}\n\n# Define meeting constraints\nmeetings = {\n    'David': {'location': 'Chinatown','start_time': '16:00', 'end_time': '21:45', 'duration': 105}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Golden Gate Park'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n             'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_25"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Richard",
                        "start_time": "9:17",
                        "end_time": "11:17"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Bayview': {'Union Square': 17, 'Presidio': 31},\n    'Union Square': {'Bayview': 15, 'Presidio': 24},\n    'Presidio': {'Bayview': 31, 'Union Square': 22}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Richard': {'location': 'Union Square','start_time': '08:45', 'end_time': '13:00', 'duration': 120},\n    'Charles': {'location': 'Presidio','start_time': '09:45', 'end_time': '13:00', 'duration': 120}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Bayview'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n            'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_118"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "17:00",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "18:15",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Sarah",
                        "start_time": "19:04",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Robert",
                        "start_time": "21:06",
                        "end_time": "21:21"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Golden Gate Park': {'Haight-Ashbury': 7, 'Sunset District': 10, 'Marina District': 16, 'Financial District': 26, 'Union Square': 22},\n    'Haight-Ashbury': {'Golden Gate Park': 7, 'Sunset District': 15, 'Marina District': 17, 'Financial District': 21, 'Union Square': 17},\n    'Sunset District': {'Golden Gate Park': 11, 'Haight-Ashbury': 15, 'Marina District': 21, 'Financial District': 30, 'Union Square': 30},\n    'Marina District': {'Golden Gate Park': 18, 'Haight-Ashbury': 16, 'Sunset District': 19, 'Financial District': 17, 'Union Square': 16},\n    'Financial District': {'Golden Gate Park': 23, 'Haight-Ashbury': 19, 'Sunset District': 31, 'Marina District': 15, 'Union Square': 9},\n    'Union Square': {'Golden Gate Park': 22, 'Haight-Ashbury': 18, 'Sunset District': 26, 'Marina District': 18, 'Financial District': 9}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Sarah': {'location': 'Haight-Ashbury','start_time': '17:00', 'end_time': '21:30', 'duration': 105},\n    'Patricia': {'location': 'Sunset District','start_time': '17:00', 'end_time': '19:45', 'duration': 45},\n    'Matthew': {'location': 'Marina District','start_time': '09:15', 'end_time': '12:00', 'duration': 15},\n    'Joseph': {'location': 'Financial District','start_time': '14:15', 'end_time': '18:45', 'duration': 30},\n    'Robert': {'location': 'Union Square','start_time': '10:15', 'end_time': '21:45', 'duration': 15}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Golden Gate Park'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n           'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_402"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "9:23",
                        "end_time": "10:23"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jeffrey",
                        "start_time": "12:47",
                        "end_time": "13:32"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "16:45",
                        "end_time": "17:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Bayview': {'Russian Hill': 23, 'Alamo Square': 16, 'North Beach': 21, 'Financial District': 19},\n    'Russian Hill': {'Bayview': 23, 'Alamo Square': 15, 'North Beach': 5, 'Financial District': 11},\n    'Alamo Square': {'Bayview': 16, 'Russian Hill': 13, 'North Beach': 15, 'Financial District': 17},\n    'North Beach': {'Bayview': 22, 'Russian Hill': 4, 'Alamo Square': 16, 'Financial District': 8},\n    'Financial District': {'Bayview': 19, 'Russian Hill': 10, 'Alamo Square': 17, 'North Beach': 7}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Joseph': {'location': 'Russian Hill','start_time': '08:30', 'end_time': '19:15', 'duration': 60},\n    'Nancy': {'location': 'Alamo Square','start_time': '11:00', 'end_time': '16:00', 'duration': 90},\n    'Jason': {'location': 'North Beach','start_time': '16:45', 'end_time': '21:45', 'duration': 15},\n    'Jeffrey': {'location': 'Financial District','start_time': '10:30', 'end_time': '15:45', 'duration': 45}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Bayview'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n             'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_368"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Richmond District': {'Pacific Heights': 10, 'Marina District': 9},\n    'Pacific Heights': {'Richmond District': 12, 'Marina District': 6},\n    'Marina District': {'Richmond District': 11, 'Pacific Heights': 7}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Jessica': {'location': 'Pacific Heights','start_time': '15:30', 'end_time': '16:45', 'duration': 45},\n    'Carol': {'location': 'Marina District','start_time': '11:30', 'end_time': '15:00', 'duration': 60}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Richmond District'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n              'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_115"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Nob Hill': {'Presidio': 17},\n    'Presidio': {'Nob Hill': 18}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Robert': {'location': 'Presidio','start_time': '11:15', 'end_time': '17:45', 'duration': 120}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Nob Hill'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n            'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_66"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Embarcadero': {'Financial District': 5, 'Alamo Square': 19},\n    'Financial District': {'Embarcadero': 4, 'Alamo Square': 17},\n    'Alamo Square': {'Embarcadero': 17, 'Financial District': 17}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Stephanie': {'location': 'Financial District','start_time': '08:15', 'end_time': '11:30', 'duration': 90},\n    'John': {'location': 'Alamo Square','start_time': '10:15', 'end_time': '20:45', 'duration': 30}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Embarcadero'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n            'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_125"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jason",
                        "start_time": "10:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Pacific Heights': {'Presidio': 11, 'Marina District': 6},\n    'Presidio': {'Pacific Heights': 11, 'Marina District': 10},\n    'Marina District': {'Pacific Heights': 7, 'Presidio': 10}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Jason': {'location': 'Presidio','start_time': '10:00', 'end_time': '16:15', 'duration': 90},\n    'Kenneth': {'location': 'Marina District','start_time': '15:30', 'end_time': '16:45', 'duration': 45}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Pacific Heights'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n            'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_131"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jeffrey",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Charles",
                        "start_time": "13:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Robert",
                        "start_time": "15:18",
                        "end_time": "16:48"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "17:00",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Karen",
                        "start_time": "18:29",
                        "end_time": "19:29"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Brian",
                        "start_time": "19:49",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joshua",
                        "start_time": "21:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Sunset District': {'Presidio': 16, 'Nob Hill': 27, 'Pacific Heights': 21, 'Mission District': 25, 'Marina District': 21, 'North Beach': 28, 'Russian Hill': 24, 'Richmond District': 12, 'Embarcadero': 30, 'Alamo Square': 17},\n    'Presidio': {'Sunset District': 15, 'Nob Hill': 18, 'Pacific Heights': 11, 'Mission District': 26, 'Marina District': 11, 'North Beach': 18, 'Russian Hill': 14, 'Richmond District': 7, 'Embarcadero': 20, 'Alamo Square': 19},\n    'Nob Hill': {'Sunset District': 24, 'Presidio': 17, 'Pacific Heights': 8, 'Mission District': 13, 'Marina District': 11, 'North Beach': 8, 'Russian Hill': 5, 'Richmond District': 14, 'Embarcadero': 9, 'Alamo Square': 11},\n    'Pacific Heights': {'Sunset District': 21, 'Presidio': 11, 'Nob Hill': 8, 'Mission District': 15, 'Marina District': 6, 'North Beach': 9, 'Russian Hill': 7, 'Richmond District': 12, 'Embarcadero': 10, 'Alamo Square': 10},\n    'Mission District': {'Sunset District': 24, 'Presidio': 25, 'Nob Hill': 12, 'Pacific Heights': 16, 'Marina District': 19, 'North Beach': 17, 'Russian Hill': 15, 'Richmond District': 20, 'Embarcadero': 19, 'Alamo Square': 10},\n    'Marina District': {'Sunset District': 19, 'Presidio': 10, 'Nob Hill': 12, 'Pacific Heights': 7, 'Mission District': 20, 'North Beach': 11, 'Russian Hill': 8, 'Richmond District': 11, 'Embarcadero': 14, 'Alamo Square': 15},\n    'North Beach': {'Sunset District': 27, 'Presidio': 17, 'Nob Hill': 7, 'Pacific Heights': 8, 'Mission District': 18, 'Marina District': 9, 'Russian Hill': 4, 'Richmond District': 18, 'Embarcadero': 6, 'Alamo Square': 16},\n    'Russian Hill': {'Sunset District': 23, 'Presidio': 14, 'Nob Hill': 5, 'Pacific Heights': 7, 'Mission District': 16, 'Marina District': 7, 'North Beach': 5, 'Richmond District': 14, 'Embarcadero': 8, 'Alamo Square': 15},\n    'Richmond District': {'Sunset District': 11, 'Presidio': 7, 'Nob Hill': 17, 'Pacific Heights': 10, 'Mission District': 20, 'Marina District': 9, 'North Beach': 17, 'Russian Hill': 13, 'Embarcadero': 19, 'Alamo Square': 11},\n    'Embarcadero': {'Sunset District': 30, 'Presidio': 20, 'Nob Hill': 10, 'Pacific Heights': 11, 'Mission District': 20, 'Marina District': 12, 'North Beach': 5, 'Russian Hill': 8, 'Richmond District': 21, 'Alamo Square': 16},\n    'Alamo Square': {'Sunset District': 16, 'Presidio': 17, 'Nob Hill': 11, 'Pacific Heights': 10, 'Mission District': 10, 'Marina District': 15, 'North Beach': 15, 'Russian Hill': 13, 'Richmond District': 11, 'Embarcadero': 16}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Charles': {'location': 'Presidio','start_time': '13:15', 'end_time': '15:00', 'duration': 105},\n    'Robert': {'location': 'Nob Hill','start_time': '13:15', 'end_time': '17:30', 'duration': 90},\n    'Nancy': {'location': 'Pacific Heights','start_time': '14:45', 'end_time': '22:00', 'duration': 105},\n    'Brian': {'location': 'Mission District','start_time': '15:30', 'end_time': '22:00', 'duration': 60},\n    'Kimberly': {'location': 'Marina District','start_time': '17:00', 'end_time': '19:45', 'duration': 75},\n    'David': {'location': 'North Beach','start_time': '14:45', 'end_time': '16:30', 'duration': 75},\n    'William': {'location': 'Russian Hill','start_time': '12:30', 'end_time': '19:15', 'duration': 120},\n    'Jeffrey': {'location': 'Richmond District','start_time': '12:00', 'end_time': '19:15', 'duration': 45},\n    'Karen': {'location': 'Embarcadero','start_time': '14:15', 'end_time': '20:45', 'duration': 60},\n    'Joshua': {'location': 'Alamo Square','start_time': '18:45', 'end_time': '22:00', 'duration': 60}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Sunset District'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n            'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_974"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mark",
                        "start_time": "15:57",
                        "end_time": "16:42"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Richard",
                        "start_time": "16:52",
                        "end_time": "18:22"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Margaret",
                        "start_time": "18:28",
                        "end_time": "18:43"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:50",
                        "end_time": "20:20"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Chinatown': {'Embarcadero': 5, 'Pacific Heights': 10, 'Russian Hill': 7, 'Haight-Ashbury': 19, 'Golden Gate Park': 23, 'Fisherman\\'s Wharf': 8, 'Sunset District': 29, 'The Castro': 22},\n    'Embarcadero': {'Chinatown': 7, 'Pacific Heights': 11, 'Russian Hill': 8, 'Haight-Ashbury': 21, 'Golden Gate Park': 25, 'Fisherman\\'s Wharf': 6, 'Sunset District': 30, 'The Castro': 25},\n    'Pacific Heights': {'Chinatown': 11, 'Embarcadero': 10, 'Russian Hill': 7, 'Haight-Ashbury': 11, 'Golden Gate Park': 15, 'Fisherman\\'s Wharf': 13, 'Sunset District': 21, 'The Castro': 16},\n    'Russian Hill': {'Chinatown': 9, 'Embarcadero': 8, 'Pacific Heights': 7, 'Haight-Ashbury': 17, 'Golden Gate Park': 21, 'Fisherman\\'s Wharf': 7, 'Sunset District': 23, 'The Castro': 21},\n    'Haight-Ashbury': {'Chinatown': 19, 'Embarcadero': 20, 'Pacific Heights': 12, 'Russian Hill': 17, 'Golden Gate Park': 7, 'Fisherman\\'s Wharf': 23, 'Sunset District': 15, 'The Castro': 6},\n    'Golden Gate Park': {'Chinatown': 23, 'Embarcadero': 25, 'Pacific Heights': 16, 'Russian Hill': 19, 'Haight-Ashbury': 7, 'Fisherman\\'s Wharf': 24, 'Sunset District': 10, 'The Castro': 13},\n    'Fisherman\\'s Wharf': {'Chinatown': 12, 'Embarcadero': 8, 'Pacific Heights': 12, 'Russian Hill': 7, 'Haight-Ashbury': 22, 'Golden Gate Park': 25, 'Sunset District': 27, 'The Castro': 27},\n    'Sunset District': {'Chinatown': 30, 'Embarcadero': 30, 'Pacific Heights': 21, 'Russian Hill': 24, 'Haight-Ashbury': 15, 'Golden Gate Park': 11, 'Fisherman\\'s Wharf': 29, 'The Castro': 17},\n    'The Castro': {'Chinatown': 22, 'Embarcadero': 22, 'Pacific Heights': 16, 'Russian Hill': 18, 'Haight-Ashbury': 6, 'Golden Gate Park': 11, 'Fisherman\\'s Wharf': 24, 'Sunset District': 17}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Richard': {'location': 'Embarcadero','start_time': '15:15', 'end_time': '18:45', 'duration': 90},\n    'Mark': {'location': 'Pacific Heights','start_time': '15:00', 'end_time': '17:00', 'duration': 45},\n    'Matthew': {'location': 'Russian Hill','start_time': '17:30', 'end_time': '21:00', 'duration': 90},\n    'Rebecca': {'location': 'Haight-Ashbury','start_time': '14:45', 'end_time': '18:00', 'duration': 60},\n    'Melissa': {'location': 'Golden Gate Park','start_time': '13:45', 'end_time': '17:30', 'duration': 90},\n    'Margaret': {'location': 'Fisherman\\'s Wharf','start_time': '14:45', 'end_time': '20:15', 'duration': 15},\n    'Emily': {'location': 'Sunset District','start_time': '15:45', 'end_time': '17:00', 'duration': 45},\n    'George': {'location': 'The Castro','start_time': '14:00', 'end_time': '16:15', 'duration': 75}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Chinatown'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n           'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_763"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\n# Define travel times between locations\ntravel_times = {\n    'Sunset District': {'Chinatown': 30, 'Russian Hill': 24, 'North Beach': 29},\n    'Chinatown': {'Sunset District': 29, 'Russian Hill': 7, 'North Beach': 3},\n    'Russian Hill': {'Sunset District': 23, 'Chinatown': 9, 'North Beach': 5},\n    'North Beach': {'Sunset District': 27, 'Chinatown': 6, 'Russian Hill': 4}\n}\n\n# Define meeting constraints\nmeetings = {\n    'Anthony': {'location': 'Chinatown','start_time': '13:15', 'end_time': '14:30', 'duration': 60},\n    'Rebecca': {'location': 'Russian Hill','start_time': '19:30', 'end_time': '21:15', 'duration': 105},\n    'Melissa': {'location': 'North Beach','start_time': '08:15', 'end_time': '13:30', 'duration': 105}\n}\n\ndef calculate_meeting_time(current_time, travel_time, meeting_duration):\n    meeting_start_time = add_time(current_time, travel_time)\n    meeting_end_time = add_time(meeting_start_time, meeting_duration)\n    return meeting_start_time, meeting_end_time\n\ndef add_time(time, minutes):\n    hours, mins = map(int, time.split(':'))\n    mins += minutes\n    hours += mins // 60\n    mins %= 60\n    return f'{hours}:{mins:02d}'\n\ndef is_meeting_possible(current_time, meeting_start_time, meeting_end_time):\n    return meeting_start_time <= current_time < meeting_end_time\n\ndef plan_meetings():\n    current_time = '09:00'\n    current_location = 'Sunset District'\n    itinerary = []\n\n    for person, meeting in meetings.items():\n        travel_time = travel_times[current_location][meeting['location']]\n        meeting_start_time, meeting_end_time = calculate_meeting_time(current_time, travel_time, meeting['duration'])\n        if is_meeting_possible(meeting_start_time, meeting['start_time'], meeting['end_time']):\n            itinerary.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': person,\n           'start_time': meeting_start_time,\n                'end_time': meeting_end_time\n            })\n            current_time = meeting_end_time\n            current_location = meeting['location']\n\n    return itinerary\n\ndef main():\n    itinerary = plan_meetings()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_209"
        }
    ]
}