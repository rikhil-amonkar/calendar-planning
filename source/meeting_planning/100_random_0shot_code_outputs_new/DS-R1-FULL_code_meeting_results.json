{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "16:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "21:45",
                        "end_time": "22:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "16:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "21:45",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ninitial_location = \"Haight-Ashbury\"\ninitial_time = \"9:00\"\n\n# Friends' availability\nfriends = [\n    {\n        \"name\": \"Sarah\",\n        \"location\": \"Fisherman's Wharf\",\n        \"start\": \"14:45\",\n        \"end\": \"17:30\",\n        \"duration\": 105\n    },\n    {\n        \"name\": \"Mary\",\n        \"location\": \"Richmond District\",\n        \"start\": \"13:00\",\n        \"end\": \"19:15\",\n        \"duration\": 75\n    },\n    {\n        \"name\": \"Helen\",\n        \"location\": \"Mission District\",\n        \"start\": \"21:45\",\n        \"end\": \"22:30\",\n        \"duration\": 30\n    },\n    {\n        \"name\": \"Thomas\",\n        \"location\": \"Bayview\",\n        \"start\": \"15:15\",\n        \"end\": \"18:45\",\n        \"duration\": 120\n    }\n]\n\n# Travel times in minutes\ntravel_times = {\n    \"Haight-Ashbury\": {\n        \"Fisherman's Wharf\": 23,\n        \"Richmond District\": 10,\n        \"Mission District\": 11,\n        \"Bayview\": 18\n    },\n    \"Fisherman's Wharf\": {\n        \"Haight-Ashbury\": 22,\n        \"Richmond District\": 18,\n        \"Mission District\": 22,\n        \"Bayview\": 26\n    },\n    \"Richmond District\": {\n        \"Haight-Ashbury\": 10,\n        \"Fisherman's Wharf\": 18,\n        \"Mission District\": 20,\n        \"Bayview\": 26\n    },\n    \"Mission District\": {\n        \"Haight-Ashbury\": 12,\n        \"Fisherman's Wharf\": 22,\n        \"Richmond District\": 20,\n        \"Bayview\": 15\n    },\n    \"Bayview\": {\n        \"Haight-Ashbury\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Richmond District\": 25,\n        \"Mission District\": 13\n    }\n}\n\ndef calculate_schedule(order):\n    current_location = initial_location\n    current_time = time_to_minutes(initial_time)\n    schedule = []\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        \n        # Travel to friend's location\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        friend_start = time_to_minutes(friend[\"start\"])\n        friend_end = time_to_minutes(friend[\"end\"])\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, friend_start)\n        meeting_end = min(meeting_start + friend[\"duration\"], friend_end)\n        \n        if meeting_end - meeting_start >= friend[\"duration\"]:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"person\": friend[\"name\"],\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            met_friends.add(friend_name)\n            current_time = meeting_end\n            current_location = friend[\"location\"]\n    \n    # Meet Helen last if possible\n    helen = next(f for f in friends if f[\"name\"] == \"Helen\")\n    if \"Helen\" not in met_friends:\n        travel_time = travel_times[current_location][helen[\"location\"]]\n        arrival_time = current_time + travel_time\n        helen_start = time_to_minutes(helen[\"start\"])\n        helen_end = time_to_minutes(helen[\"end\"])\n        \n        meeting_start = max(arrival_time, helen_start)\n        meeting_end = min(meeting_start + helen[\"duration\"], helen_end)\n        \n        if meeting_end - meeting_start >= helen[\"duration\"]:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": helen[\"location\"],\n                \"person\": helen[\"name\"],\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            met_friends.add(\"Helen\")\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of meeting friends (excluding Helen)\nfriend_names = [f[\"name\"] for f in friends if f[\"name\"] != \"Helen\"]\nbest_schedule = []\nmax_met = 0\n\n# Try all permutations of the first three friends\nfor perm in permutations(friend_names):\n    schedule, num_met = calculate_schedule(perm)\n    if num_met > max_met or (num_met == max_met and len(schedule) < len(best_schedule)):\n        best_schedule = schedule\n        max_met = num_met\n\n# Output the best schedule\nresult = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_389"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joshua",
                        "start_time": "10:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kimberly",
                        "start_time": "15:30",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "16:03",
                        "end_time": "16:33"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Betty",
                        "start_time": "16:57",
                        "end_time": "17:57"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Daniel",
                        "start_time": "18:30",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Union Square': {\n        'Presidio': 24, 'Alamo Square': 15, 'Marina District': 18, 'Financial District': 9,\n        'Nob Hill': 9, 'Sunset District': 27, 'Chinatown': 7, 'Russian Hill': 13,\n        'North Beach': 10, 'Haight-Ashbury': 18\n    },\n    'Presidio': {\n        'Union Square': 22, 'Alamo Square': 19, 'Marina District': 11, 'Financial District': 23,\n        'Nob Hill': 18, 'Sunset District': 15, 'Chinatown': 21, 'Russian Hill': 14,\n        'North Beach': 18, 'Haight-Ashbury': 15\n    },\n    'Alamo Square': {\n        'Union Square': 14, 'Presidio': 17, 'Marina District': 15, 'Financial District': 17,\n        'Nob Hill': 11, 'Sunset District': 16, 'Chinatown': 15, 'Russian Hill': 13,\n        'North Beach': 15, 'Haight-Ashbury': 5\n    },\n    'Marina District': {\n        'Union Square': 16, 'Presidio': 10, 'Alamo Square': 15, 'Financial District': 17,\n        'Nob Hill': 12, 'Sunset District': 19, 'Chinatown': 15, 'Russian Hill': 8,\n        'North Beach': 11, 'Haight-Ashbury': 16\n    },\n    'Financial District': {\n        'Union Square': 9, 'Presidio': 22, 'Alamo Square': 17, 'Marina District': 15,\n        'Nob Hill': 8, 'Sunset District': 30, 'Chinatown': 5, 'Russian Hill': 11,\n        'North Beach': 7, 'Haight-Ashbury': 19\n    },\n    'Nob Hill': {\n        'Union Square': 7, 'Presidio': 17, 'Alamo Square': 11, 'Marina District': 11,\n        'Financial District': 9, 'Sunset District': 24, 'Chinatown': 6, 'Russian Hill': 5,\n        'North Beach': 8, 'Haight-Ashbury': 13\n    },\n    'Sunset District': {\n        'Union Square': 30, 'Presidio': 16, 'Alamo Square': 17, 'Marina District': 21,\n        'Financial District': 30, 'Nob Hill': 27, 'Chinatown': 30, 'Russian Hill': 24,\n        'North Beach': 28, 'Haight-Ashbury': 15\n    },\n    'Chinatown': {\n        'Union Square': 7, 'Presidio': 19, 'Alamo Square': 17, 'Marina District': 12,\n        'Financial District': 5, 'Nob Hill': 9, 'Sunset District': 29, 'Russian Hill': 7,\n        'North Beach': 3, 'Haight-Ashbury': 19\n    },\n    'Russian Hill': {\n        'Union Square': 10, 'Presidio': 14, 'Alamo Square': 15, 'Marina District': 7,\n        'Financial District': 11, 'Nob Hill': 5, 'Sunset District': 23, 'Chinatown': 9,\n        'North Beach': 5, 'Haight-Ashbury': 17\n    },\n    'North Beach': {\n        'Union Square': 7, 'Presidio': 17, 'Alamo Square': 16, 'Marina District': 9,\n        'Financial District': 8, 'Nob Hill': 7, 'Sunset District': 27, 'Chinatown': 6,\n        'Russian Hill': 4, 'Haight-Ashbury': 18\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19, 'Presidio': 15, 'Alamo Square': 5, 'Marina District': 17,\n        'Financial District': 21, 'Nob Hill': 15, 'Sunset District': 15, 'Chinatown': 19,\n        'Russian Hill': 17, 'North Beach': 19\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'Kimberly', 'location': 'Presidio', 'start': 15.5, 'end': 16.0, 'duration': 0.25},\n    {'name': 'Elizabeth', 'location': 'Alamo Square', 'start': 19.25, 'end': 20.25, 'duration': 0.25},\n    {'name': 'Joshua', 'location': 'Marina District', 'start': 10.5, 'end': 14.25, 'duration': 0.75},\n    {'name': 'Sandra', 'location': 'Financial District', 'start': 19.5, 'end': 20.25, 'duration': 0.75},\n    {'name': 'Kenneth', 'location': 'Nob Hill', 'start': 12.75, 'end': 21.75, 'duration': 0.5},\n    {'name': 'Betty', 'location': 'Sunset District', 'start': 14.0, 'end': 19.0, 'duration': 1.0},\n    {'name': 'Deborah', 'location': 'Chinatown', 'start': 17.25, 'end': 20.5, 'duration': 0.25},\n    {'name': 'Barbara', 'location': 'Russian Hill', 'start': 17.5, 'end': 21.25, 'duration': 2.0},\n    {'name': 'Steven', 'location': 'North Beach', 'start': 17.75, 'end': 20.75, 'duration': 1.5},\n    {'name': 'Daniel', 'location': 'Haight-Ashbury', 'start': 18.5, 'end': 18.75, 'duration': 0.25}\n]\n\ndef time_to_float(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours + minutes / 60.0\n\ndef float_to_time(time_float):\n    hours = int(time_float)\n    minutes = int((time_float - hours) * 60)\n    return f\"{hours}:{minutes:02d}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times[from_loc][to_loc] / 60.0\n\ndef is_schedule_valid(schedule):\n    current_time = 9.0  # Start at Union Square at 9:00 AM\n    current_location = 'Union Square'\n    \n    itinerary = []\n    \n    for friend in schedule:\n        # Travel to friend's location\n        travel_time = get_travel_time(current_location, friend['location'])\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet during their available time\n        meeting_start = max(arrival_time, friend['start'])\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end > friend['end']:\n            return None  # Can't meet for required duration\n        \n        itinerary.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': float_to_time(meeting_start),\n            'end_time': float_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = friend['location']\n    \n    return itinerary\n\ndef evaluate_schedule(schedule):\n    itinerary = is_schedule_valid(schedule)\n    if itinerary is None:\n        return -1\n    return len(itinerary)  # Maximize number of meetings\n\ndef find_best_schedule():\n    best_score = -1\n    best_itinerary = []\n    \n    # We'll try permutations of the friends, but limit to a reasonable number\n    # due to computational constraints (10! is too large)\n    for _ in range(1000):\n        import random\n        sample = random.sample(friends, len(friends))\n        score = evaluate_schedule(sample)\n        if score > best_score:\n            best_score = score\n            best_itinerary = is_schedule_valid(sample)\n    \n    return best_itinerary\n\ndef main():\n    itinerary = find_best_schedule()\n    if not itinerary:\n        print(json.dumps({\"itinerary\": []}))\n        return\n    \n    # Convert to the required output format\n    output = {\"itinerary\": itinerary}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_912"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "9:30",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:15",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "13:46",
                        "end_time": "14:01"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:06",
                        "end_time": "15:21"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "12:52",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Richmond District': {\n        'Marina District': 9,\n        'Chinatown': 20,\n        'Financial District': 22,\n        'Bayview': 26,\n        'Union Square': 21\n    },\n    'Marina District': {\n        'Richmond District': 11,\n        'Chinatown': 16,\n        'Financial District': 17,\n        'Bayview': 27,\n        'Union Square': 16\n    },\n    'Chinatown': {\n        'Richmond District': 20,\n        'Marina District': 12,\n        'Financial District': 5,\n        'Bayview': 22,\n        'Union Square': 7\n    },\n    'Financial District': {\n        'Richmond District': 21,\n        'Marina District': 15,\n        'Chinatown': 5,\n        'Bayview': 19,\n        'Union Square': 9\n    },\n    'Bayview': {\n        'Richmond District': 25,\n        'Marina District': 25,\n        'Chinatown': 18,\n        'Financial District': 19,\n        'Union Square': 17\n    },\n    'Union Square': {\n        'Richmond District': 20,\n        'Marina District': 18,\n        'Chinatown': 7,\n        'Financial District': 9,\n        'Bayview': 15\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Kimberly',\n        'location': 'Marina District',\n        'start': '13:15',\n        'end': '16:45',\n        'duration': 15\n    },\n    {\n        'name': 'Robert',\n        'location': 'Chinatown',\n        'start': '12:15',\n        'end': '20:15',\n        'duration': 15\n    },\n    {\n        'name': 'Rebecca',\n        'location': 'Financial District',\n        'start': '13:15',\n        'end': '16:45',\n        'duration': 75\n    },\n    {\n        'name': 'Margaret',\n        'location': 'Bayview',\n        'start': '9:30',\n        'end': '13:30',\n        'duration': 30\n    },\n    {\n        'name': 'Kenneth',\n        'location': 'Union Square',\n        'start': '19:30',\n        'end': '21:15',\n        'duration': 75\n    }\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef can_meet(current_time, friend, current_location):\n    start = time_to_minutes(friend['start'])\n    end = time_to_minutes(friend['end'])\n    travel_time = travel_times[current_location][friend['location']]\n    \n    arrival_time = current_time + travel_time\n    if arrival_time > end:\n        return None\n    \n    meeting_start = max(arrival_time, start)\n    meeting_end = meeting_start + friend['duration']\n    \n    if meeting_end > end:\n        return None\n    \n    return {\n        'start': meeting_start,\n        'end': meeting_end,\n        'location': friend['location'],\n        'name': friend['name'],\n        'travel_time': travel_time\n    }\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes('9:00')\n    current_location = 'Richmond District'\n    itinerary = []\n    met_friends = set()\n    \n    # First try to meet Margaret in the morning\n    margaret = next(f for f in friends if f['name'] == 'Margaret')\n    meeting = can_meet(current_time, margaret, current_location)\n    if meeting:\n        itinerary.append({\n            'action': 'meet',\n            'location': meeting['location'],\n            'person': meeting['name'],\n            'start_time': minutes_to_time(meeting['start']),\n            'end_time': minutes_to_time(meeting['end'])\n        })\n        current_time = meeting['end']\n        current_location = meeting['location']\n        met_friends.add('Margaret')\n    \n    # Then try to meet others in the given order\n    for friend_name in order:\n        if friend_name in met_friends:\n            continue\n            \n        friend = next(f for f in friends if f['name'] == friend_name)\n        meeting = can_meet(current_time, friend, current_location)\n        if meeting:\n            itinerary.append({\n                'action': 'meet',\n                'location': meeting['location'],\n                'person': meeting['name'],\n                'start_time': minutes_to_time(meeting['start']),\n                'end_time': minutes_to_time(meeting['end'])\n            })\n            current_time = meeting['end']\n            current_location = meeting['location']\n            met_friends.add(friend_name)\n    \n    # Finally try to meet Kenneth in the evening\n    kenneth = next(f for f in friends if f['name'] == 'Kenneth')\n    if 'Kenneth' not in met_friends:\n        meeting = can_meet(current_time, kenneth, current_location)\n        if meeting:\n            itinerary.append({\n                'action': 'meet',\n                'location': meeting['location'],\n                'person': meeting['name'],\n                'start_time': minutes_to_time(meeting['start']),\n                'end_time': minutes_to_time(meeting['end'])\n            })\n            met_friends.add('Kenneth')\n    \n    return {\n        'itinerary': itinerary,\n        'met_count': len(met_friends)\n    }\n\n# Generate all possible orders of meeting friends (excluding Margaret and Kenneth)\nfriend_names = [f['name'] for f in friends if f['name'] not in ['Margaret', 'Kenneth']]\nbest_schedule = None\nbest_count = 0\n\n# Try all permutations of the remaining friends\nfor order in permutations(friend_names):\n    schedule = evaluate_schedule(order)\n    if schedule['met_count'] > best_count:\n        best_count = schedule['met_count']\n        best_schedule = schedule\n    elif schedule['met_count'] == best_count and len(schedule['itinerary']) > len(best_schedule['itinerary']):\n        best_schedule = schedule\n\nprint(json.dumps(best_schedule, indent=2))\n```",
            "count": "meeting_planning_example_446"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "10:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "10:56",
                        "end_time": "12:26"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "12:47",
                        "end_time": "14:47"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "20:30",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "10:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "10:56",
                        "end_time": "12:26"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "12:47",
                        "end_time": "14:47"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "20:30",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str.endswith('AM') or time_str.endswith('PM'):\n        time_part, period = time_str[:-2].strip(), time_str[-2:]\n        hours, minutes = map(int, time_part.split(':'))\n        if period == 'PM' and hours != 12:\n            hours += 12\n        elif period == 'AM' and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    else:\n        hours, minutes = map(int, time_str.split(':'))\n        return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Bayview': {\n        'Pacific Heights': 23,\n        'Mission District': 13,\n        'Haight-Ashbury': 19,\n        'Financial District': 19\n    },\n    'Pacific Heights': {\n        'Bayview': 22,\n        'Mission District': 15,\n        'Haight-Ashbury': 11,\n        'Financial District': 13\n    },\n    'Mission District': {\n        'Bayview': 15,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 12,\n        'Financial District': 17\n    },\n    'Haight-Ashbury': {\n        'Bayview': 18,\n        'Pacific Heights': 12,\n        'Mission District': 11,\n        'Financial District': 21\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Pacific Heights': 13,\n        'Mission District': 17,\n        'Haight-Ashbury': 19\n    }\n}\n\nfriends = {\n    'Mary': {\n        'location': 'Pacific Heights',\n        'available_start': time_to_minutes('10:00AM'),\n        'available_end': time_to_minutes('7:00PM'),\n        'duration': 45\n    },\n    'Lisa': {\n        'location': 'Mission District',\n        'available_start': time_to_minutes('8:30PM'),\n        'available_end': time_to_minutes('10:00PM'),\n        'duration': 75\n    },\n    'Betty': {\n        'location': 'Haight-Ashbury',\n        'available_start': time_to_minutes('7:15AM'),\n        'available_end': time_to_minutes('5:15PM'),\n        'duration': 90\n    },\n    'Charles': {\n        'location': 'Financial District',\n        'available_start': time_to_minutes('11:15AM'),\n        'available_end': time_to_minutes('3:00PM'),\n        'duration': 120\n    }\n}\n\ncurrent_location = 'Bayview'\ncurrent_time = time_to_minutes('9:00AM')\n\n# Generate all possible orders to meet friends\nfriend_names = list(friends.keys())\npossible_orders = permutations(friend_names)\n\nbest_schedule = None\nmax_meetings = 0\n\nfor order in possible_orders:\n    temp_location = current_location\n    temp_time = current_time\n    schedule = []\n    meetings = 0\n    \n    for friend in order:\n        info = friends[friend]\n        location = info['location']\n        travel_time = travel_times[temp_location][location]\n        arrival_time = temp_time + travel_time\n        \n        # Calculate meeting window\n        start_time = max(arrival_time, info['available_start'])\n        end_time = min(start_time + info['duration'], info['available_end'])\n        \n        if end_time > start_time and start_time >= arrival_time:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': friend,\n                'start_time': minutes_to_time(start_time),\n                'end_time': minutes_to_time(end_time)\n            })\n            meetings += 1\n            temp_location = location\n            temp_time = end_time\n    \n    if meetings > max_meetings or (meetings == max_meetings and best_schedule is None):\n        max_meetings = meetings\n        best_schedule = schedule\n\n# Output the best schedule\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_350"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "9:12",
                        "end_time": "11:12"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:25",
                        "end_time": "11:40"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "15:15",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Kimberly",
                        "start_time": "16:27",
                        "end_time": "18:12"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Amanda",
                        "start_time": "18:23",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "18:45",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "19:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "9:12",
                        "end_time": "11:12"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:25",
                        "end_time": "11:40"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "15:15",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Kimberly",
                        "start_time": "16:27",
                        "end_time": "18:12"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Amanda",
                        "start_time": "18:23",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "18:45",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "19:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times dictionary: {from_location: {to_location: minutes}}\ntravel_times = {\n    'Haight-Ashbury': {\n        'Mission District': 11,\n        'Union Square': 19,\n        'Pacific Heights': 12,\n        'Bayview': 18,\n        'Fisherman\\'s Wharf': 23,\n        'Marina District': 17,\n        'Richmond District': 10,\n        'Sunset District': 15,\n        'Golden Gate Park': 7\n    },\n    'Mission District': {\n        'Haight-Ashbury': 12,\n        'Union Square': 15,\n        'Pacific Heights': 16,\n        'Bayview': 14,\n        'Fisherman\\'s Wharf': 22,\n        'Marina District': 19,\n        'Richmond District': 20,\n        'Sunset District': 24,\n        'Golden Gate Park': 17\n    },\n    'Union Square': {\n        'Haight-Ashbury': 18,\n        'Mission District': 14,\n        'Pacific Heights': 15,\n        'Bayview': 15,\n        'Fisherman\\'s Wharf': 15,\n        'Marina District': 18,\n        'Richmond District': 20,\n        'Sunset District': 27,\n        'Golden Gate Park': 22\n    },\n    'Pacific Heights': {\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Union Square': 12,\n        'Bayview': 22,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Richmond District': 12,\n        'Sunset District': 21,\n        'Golden Gate Park': 15\n    },\n    'Bayview': {\n        'Haight-Ashbury': 19,\n        'Mission District': 13,\n        'Union Square': 18,\n        'Pacific Heights': 23,\n        'Fisherman\\'s Wharf': 25,\n        'Marina District': 27,\n        'Richmond District': 25,\n        'Sunset District': 23,\n        'Golden Gate Park': 22\n    },\n    'Fisherman\\'s Wharf': {\n        'Haight-Ashbury': 22,\n        'Mission District': 22,\n        'Union Square': 13,\n        'Pacific Heights': 12,\n        'Bayview': 26,\n        'Marina District': 9,\n        'Richmond District': 18,\n        'Sunset District': 27,\n        'Golden Gate Park': 25\n    },\n    'Marina District': {\n        'Haight-Ashbury': 16,\n        'Mission District': 20,\n        'Union Square': 16,\n        'Pacific Heights': 7,\n        'Bayview': 27,\n        'Fisherman\\'s Wharf': 10,\n        'Richmond District': 11,\n        'Sunset District': 19,\n        'Golden Gate Park': 18\n    },\n    'Richmond District': {\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Union Square': 21,\n        'Pacific Heights': 10,\n        'Bayview': 27,\n        'Fisherman\\'s Wharf': 18,\n        'Marina District': 9,\n        'Sunset District': 11,\n        'Golden Gate Park': 9\n    },\n    'Sunset District': {\n        'Haight-Ashbury': 15,\n        'Mission District': 25,\n        'Union Square': 30,\n        'Pacific Heights': 21,\n        'Bayview': 22,\n        'Fisherman\\'s Wharf': 29,\n        'Marina District': 21,\n        'Richmond District': 12,\n        'Golden Gate Park': 11\n    },\n    'Golden Gate Park': {\n        'Haight-Ashbury': 7,\n        'Mission District': 17,\n        'Union Square': 22,\n        'Pacific Heights': 16,\n        'Bayview': 23,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Richmond District': 7,\n        'Sunset District': 10\n    }\n}\n\n# People data: {name: {'location': str, 'available_start': str, 'available_end': str, 'duration': int}}\npeople = {\n    'Elizabeth': {'location': 'Mission District', 'available_start': '10:30', 'available_end': '20:00', 'duration': 90},\n    'David': {'location': 'Union Square', 'available_start': '15:15', 'available_end': '19:00', 'duration': 45},\n    'Sandra': {'location': 'Pacific Heights', 'available_start': '7:00', 'available_end': '20:00', 'duration': 120},\n    'Thomas': {'location': 'Bayview', 'available_start': '19:30', 'available_end': '20:30', 'duration': 30},\n    'Robert': {'location': 'Fisherman\\'s Wharf', 'available_start': '10:00', 'available_end': '15:00', 'duration': 15},\n    'Kenneth': {'location': 'Marina District', 'available_start': '10:45', 'available_end': '13:00', 'duration': 45},\n    'Melissa': {'location': 'Richmond District', 'available_start': '18:15', 'available_end': '20:00', 'duration': 15},\n    'Kimberly': {'location': 'Sunset District', 'available_start': '10:15', 'available_end': '18:15', 'duration': 105},\n    'Amanda': {'location': 'Golden Gate Park', 'available_start': '7:45', 'available_end': '18:45', 'duration': 15}\n}\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get(from_loc, {}).get(to_loc, float('inf'))\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes('9:00')\n    current_location = 'Haight-Ashbury'\n    schedule = []\n    total_meetings = 0\n    \n    for person in order:\n        data = people[person]\n        location = data['location']\n        travel_time = get_travel_time(current_location, location)\n        \n        if travel_time == float('inf'):\n            return None, 0\n        \n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(data['available_start'])\n        available_end = time_to_minutes(data['available_end'])\n        duration = data['duration']\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + duration\n        \n        if meeting_end > available_end:\n            return None, 0\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': person,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = location\n        total_meetings += 1\n    \n    return schedule, total_meetings\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_count = 0\n    \n    # Try all permutations of people to find the maximum number of meetings\n    for perm in permutations(people.keys()):\n        schedule, count = evaluate_schedule(perm)\n        if count > best_count:\n            best_schedule = schedule\n            best_count = count\n        elif count == best_count and schedule:\n            # Prefer schedules that end earlier\n            if time_to_minutes(schedule[-1]['end_time']) < time_to_minutes(best_schedule[-1]['end_time']):\n                best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\nresult = {\n    \"itinerary\": optimal_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_867"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jason",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Brian",
                        "start_time": "14:52",
                        "end_time": "15:07"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Elizabeth",
                        "start_time": "15:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Laura",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "19:02",
                        "end_time": "19:47"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jason",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Brian",
                        "start_time": "14:52",
                        "end_time": "15:07"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Elizabeth",
                        "start_time": "15:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Laura",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "19:02",
                        "end_time": "19:47"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Locations\nlocations = [\n    \"Presidio\",\n    \"Richmond District\",\n    \"North Beach\",\n    \"Financial District\",\n    \"Golden Gate Park\",\n    \"Union Square\"\n]\n\n# Travel times in minutes (from_location, to_location) -> minutes\ntravel_times = {\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Golden Gate Park\"): 22\n}\n\n# People and their constraints\npeople = {\n    \"Jason\": {\n        \"location\": \"Richmond District\",\n        \"available_start\": \"13:00\",\n        \"available_end\": \"20:45\",\n        \"min_duration\": 90\n    },\n    \"Melissa\": {\n        \"location\": \"North Beach\",\n        \"available_start\": \"18:45\",\n        \"available_end\": \"20:15\",\n        \"min_duration\": 45\n    },\n    \"Brian\": {\n        \"location\": \"Financial District\",\n        \"available_start\": \"9:45\",\n        \"available_end\": \"21:45\",\n        \"min_duration\": 15\n    },\n    \"Elizabeth\": {\n        \"location\": \"Golden Gate Park\",\n        \"available_start\": \"8:45\",\n        \"available_end\": \"21:30\",\n        \"min_duration\": 105\n    },\n    \"Laura\": {\n        \"location\": \"Union Square\",\n        \"available_start\": \"14:15\",\n        \"available_end\": \"19:30\",\n        \"min_duration\": 75\n    }\n}\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get((from_loc, to_loc), float('inf'))\n\ndef can_schedule(person, start_time, end_time):\n    available_start = time_to_minutes(people[person][\"available_start\"])\n    available_end = time_to_minutes(people[person][\"available_end\"])\n    min_duration = people[person][\"min_duration\"]\n    \n    actual_start = max(start_time, available_start)\n    actual_end = min(end_time, available_end)\n    \n    if actual_end <= actual_start:\n        return False\n    \n    duration = actual_end - actual_start\n    return duration >= min_duration\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00\")  # Start at Presidio at 9:00\n    current_location = \"Presidio\"\n    schedule = []\n    \n    for person in order:\n        loc = people[person][\"location\"]\n        travel_time = get_travel_time(current_location, loc)\n        if travel_time == float('inf'):\n            return None\n        \n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(people[person][\"available_start\"])\n        available_end = time_to_minutes(people[person][\"available_end\"])\n        min_duration = people[person][\"min_duration\"]\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = min(meeting_start + min_duration, available_end)\n        \n        if meeting_end > available_end or (meeting_end - meeting_start) < min_duration:\n            return None\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": loc,\n            \"person\": person,\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = loc\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    return len(schedule)\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_score = 0\n    people_names = list(people.keys())\n    \n    # Try all permutations of people (limited to 5 for performance)\n    for order in permutations(people_names):\n        schedule = generate_schedule(order)\n        score = evaluate_schedule(schedule)\n        if score > best_score:\n            best_score = score\n            best_schedule = schedule\n            if best_score == len(people_names):\n                break  # Found optimal\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\nresult = {\n    \"itinerary\": optimal_schedule if optimal_schedule else []\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_423"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "9:30",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "10:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joseph",
                        "start_time": "13:24",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Amanda",
                        "start_time": "15:25",
                        "end_time": "17:10"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "19:31",
                        "end_time": "21:16"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    \"\"\"Convert time string 'H:MM' to minutes since midnight.\"\"\"\n    if isinstance(time_str, str):\n        h, m = map(int, time_str.split(':'))\n        return h * 60 + m\n    return time_str\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to time string 'H:MM'.\"\"\"\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times dictionary: {from_location: {to_location: minutes}}\ntravel_times = {\n    'Presidio': {\n        'Marina District': 11,\n        'The Castro': 21,\n        'Fisherman\\'s Wharf': 19,\n        'Bayview': 31,\n        'Pacific Heights': 11,\n        'Mission District': 26,\n        'Alamo Square': 19,\n        'Golden Gate Park': 12\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'The Castro': 22,\n        'Fisherman\\'s Wharf': 10,\n        'Bayview': 27,\n        'Pacific Heights': 7,\n        'Mission District': 20,\n        'Alamo Square': 15,\n        'Golden Gate Park': 18\n    },\n    'The Castro': {\n        'Presidio': 20,\n        'Marina District': 21,\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 19,\n        'Pacific Heights': 16,\n        'Mission District': 7,\n        'Alamo Square': 8,\n        'Golden Gate Park': 11\n    },\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Marina District': 9,\n        'The Castro': 27,\n        'Bayview': 26,\n        'Pacific Heights': 12,\n        'Mission District': 22,\n        'Alamo Square': 21,\n        'Golden Gate Park': 25\n    },\n    'Bayview': {\n        'Presidio': 32,\n        'Marina District': 27,\n        'The Castro': 19,\n        'Fisherman\\'s Wharf': 25,\n        'Pacific Heights': 23,\n        'Mission District': 13,\n        'Alamo Square': 16,\n        'Golden Gate Park': 22\n    },\n    'Pacific Heights': {\n        'Presidio': 11,\n        'Marina District': 6,\n        'The Castro': 16,\n        'Fisherman\\'s Wharf': 13,\n        'Bayview': 22,\n        'Mission District': 15,\n        'Alamo Square': 10,\n        'Golden Gate Park': 15\n    },\n    'Mission District': {\n        'Presidio': 25,\n        'Marina District': 19,\n        'The Castro': 7,\n        'Fisherman\\'s Wharf': 22,\n        'Bayview': 14,\n        'Pacific Heights': 16,\n        'Alamo Square': 11,\n        'Golden Gate Park': 17\n    },\n    'Alamo Square': {\n        'Presidio': 17,\n        'Marina District': 15,\n        'The Castro': 8,\n        'Fisherman\\'s Wharf': 19,\n        'Bayview': 16,\n        'Pacific Heights': 10,\n        'Mission District': 10,\n        'Golden Gate Park': 9\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Marina District': 16,\n        'The Castro': 13,\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23,\n        'Pacific Heights': 16,\n        'Mission District': 17,\n        'Alamo Square': 9\n    }\n}\n\n# Friend constraints: name, location, available_start, available_end, min_duration\nfriends = [\n    ('Amanda', 'Marina District', time_to_minutes('14:45'), time_to_minutes('19:30'), 105),\n    ('Melissa', 'The Castro', time_to_minutes('9:30'), time_to_minutes('17:00'), 30),\n    ('Jeffrey', 'Fisherman\\'s Wharf', time_to_minutes('12:45'), time_to_minutes('18:45'), 120),\n    ('Matthew', 'Bayview', time_to_minutes('10:15'), time_to_minutes('13:15'), 30),\n    ('Nancy', 'Pacific Heights', time_to_minutes('17:00'), time_to_minutes('21:30'), 105),\n    ('Karen', 'Mission District', time_to_minutes('17:30'), time_to_minutes('20:30'), 105),\n    ('Robert', 'Alamo Square', time_to_minutes('11:15'), time_to_minutes('17:30'), 120),\n    ('Joseph', 'Golden Gate Park', time_to_minutes('8:30'), time_to_minutes('21:15'), 105)\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00')  # Start at Presidio at 9:00\n    current_location = 'Presidio'\n    schedule = []\n    \n    for friend_idx in order:\n        name, loc, avail_start, avail_end, min_dur = friends[friend_idx]\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location][loc]\n        arrival_time = current_time + travel_time\n        \n        # Determine meeting window\n        meeting_start = max(arrival_time, avail_start)\n        meeting_end = min(meeting_start + min_dur, avail_end)\n        \n        if meeting_end - meeting_start < min_dur:\n            return None  # Can't meet minimum duration\n        \n        schedule.append({\n            'action': 'meet',\n            'location': loc,\n            'person': name,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = loc\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    \n    # Count number of friends met\n    return len(schedule)\n\ndef find_optimal_schedule():\n    best_schedule = []\n    best_score = 0\n    \n    # Try all possible orders (with some optimizations)\n    for order in permutations(range(len(friends))):\n        schedule = calculate_schedule(order)\n        score = evaluate_schedule(schedule)\n        \n        if score > best_score:\n            best_score = score\n            best_schedule = schedule\n            if best_score == len(friends):  # Found perfect schedule\n                break\n    \n    return best_schedule\n\ndef main():\n    optimal_schedule = find_optimal_schedule()\n    result = {\n        \"itinerary\": optimal_schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_715"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "9:07",
                        "end_time": "10:22"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Anthony",
                        "start_time": "10:32",
                        "end_time": "10:47"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kevin",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "9:07",
                        "end_time": "10:22"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Anthony",
                        "start_time": "10:32",
                        "end_time": "10:47"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Stephanie",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kevin",
                        "start_time": "20:22",
                        "end_time": "21:37"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times dictionary: {from_location: {to_location: minutes}}\ntravel_times = {\n    'Haight-Ashbury': {\n        'Russian Hill': 17,\n        'Fisherman\\'s Wharf': 23,\n        'Nob Hill': 15,\n        'Golden Gate Park': 7,\n        'Alamo Square': 5,\n        'Pacific Heights': 12\n    },\n    'Russian Hill': {\n        'Haight-Ashbury': 17,\n        'Fisherman\\'s Wharf': 7,\n        'Nob Hill': 5,\n        'Golden Gate Park': 21,\n        'Alamo Square': 15,\n        'Pacific Heights': 7\n    },\n    'Fisherman\\'s Wharf': {\n        'Haight-Ashbury': 22,\n        'Russian Hill': 7,\n        'Nob Hill': 11,\n        'Golden Gate Park': 25,\n        'Alamo Square': 20,\n        'Pacific Heights': 12\n    },\n    'Nob Hill': {\n        'Haight-Ashbury': 13,\n        'Russian Hill': 5,\n        'Fisherman\\'s Wharf': 11,\n        'Golden Gate Park': 17,\n        'Alamo Square': 11,\n        'Pacific Heights': 8\n    },\n    'Golden Gate Park': {\n        'Haight-Ashbury': 7,\n        'Russian Hill': 19,\n        'Fisherman\\'s Wharf': 24,\n        'Nob Hill': 20,\n        'Alamo Square': 10,\n        'Pacific Heights': 16\n    },\n    'Alamo Square': {\n        'Haight-Ashbury': 5,\n        'Russian Hill': 13,\n        'Fisherman\\'s Wharf': 19,\n        'Nob Hill': 11,\n        'Golden Gate Park': 9,\n        'Pacific Heights': 10\n    },\n    'Pacific Heights': {\n        'Haight-Ashbury': 11,\n        'Russian Hill': 7,\n        'Fisherman\\'s Wharf': 13,\n        'Nob Hill': 8,\n        'Golden Gate Park': 15,\n        'Alamo Square': 10\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Stephanie',\n        'location': 'Russian Hill',\n        'available_start': '20:00',\n        'available_end': '20:45',\n        'min_duration': 15\n    },\n    {\n        'name': 'Kevin',\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '19:15',\n        'available_end': '21:45',\n        'min_duration': 75\n    },\n    {\n        'name': 'Robert',\n        'location': 'Nob Hill',\n        'available_start': '7:45',\n        'available_end': '10:30',\n        'min_duration': 90\n    },\n    {\n        'name': 'Steven',\n        'location': 'Golden Gate Park',\n        'available_start': '8:30',\n        'available_end': '17:00',\n        'min_duration': 75\n    },\n    {\n        'name': 'Anthony',\n        'location': 'Alamo Square',\n        'available_start': '7:45',\n        'available_end': '19:45',\n        'min_duration': 15\n    },\n    {\n        'name': 'Sandra',\n        'location': 'Pacific Heights',\n        'available_start': '14:45',\n        'available_end': '21:45',\n        'min_duration': 45\n    }\n]\n\ndef calculate_schedule():\n    current_time = time_to_minutes('9:00')\n    current_location = 'Haight-Ashbury'\n    itinerary = []\n    met_friends = set()\n\n    # First, meet Robert (only available in the morning)\n    robert = next(f for f in friends if f['name'] == 'Robert')\n    travel_time = travel_times[current_location][robert['location']]\n    arrival_time = current_time + travel_time\n    available_start = time_to_minutes(robert['available_start'])\n    available_end = time_to_minutes(robert['available_end'])\n    \n    start_time = max(arrival_time, available_start)\n    end_time = start_time + robert['min_duration']\n    \n    if end_time <= available_end:\n        itinerary.append({\n            'action': 'meet',\n            'location': robert['location'],\n            'person': robert['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        current_time = end_time\n        current_location = robert['location']\n        met_friends.add(robert['name'])\n\n    # Next, meet Steven (available all day)\n    steven = next(f for f in friends if f['name'] == 'Steven')\n    travel_time = travel_times[current_location][steven['location']]\n    arrival_time = current_time + travel_time\n    available_start = time_to_minutes(steven['available_start'])\n    available_end = time_to_minutes(steven['available_end'])\n    \n    start_time = max(arrival_time, available_start)\n    end_time = start_time + steven['min_duration']\n    \n    if end_time <= available_end:\n        itinerary.append({\n            'action': 'meet',\n            'location': steven['location'],\n            'person': steven['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        current_time = end_time\n        current_location = steven['location']\n        met_friends.add(steven['name'])\n\n    # Next, meet Anthony (available all day)\n    anthony = next(f for f in friends if f['name'] == 'Anthony')\n    travel_time = travel_times[current_location][anthony['location']]\n    arrival_time = current_time + travel_time\n    available_start = time_to_minutes(anthony['available_start'])\n    available_end = time_to_minutes(anthony['available_end'])\n    \n    start_time = max(arrival_time, available_start)\n    end_time = start_time + anthony['min_duration']\n    \n    if end_time <= available_end:\n        itinerary.append({\n            'action': 'meet',\n            'location': anthony['location'],\n            'person': anthony['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        current_time = end_time\n        current_location = anthony['location']\n        met_friends.add(anthony['name'])\n\n    # Next, meet Sandra (afternoon/evening)\n    sandra = next(f for f in friends if f['name'] == 'Sandra')\n    travel_time = travel_times[current_location][sandra['location']]\n    arrival_time = current_time + travel_time\n    available_start = time_to_minutes(sandra['available_start'])\n    available_end = time_to_minutes(sandra['available_end'])\n    \n    start_time = max(arrival_time, available_start)\n    end_time = start_time + sandra['min_duration']\n    \n    if end_time <= available_end:\n        itinerary.append({\n            'action': 'meet',\n            'location': sandra['location'],\n            'person': sandra['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        current_time = end_time\n        current_location = sandra['location']\n        met_friends.add(sandra['name'])\n\n    # Next, meet Kevin (evening)\n    kevin = next(f for f in friends if f['name'] == 'Kevin')\n    travel_time = travel_times[current_location][kevin['location']]\n    arrival_time = current_time + travel_time\n    available_start = time_to_minutes(kevin['available_start'])\n    available_end = time_to_minutes(kevin['available_end'])\n    \n    start_time = max(arrival_time, available_start)\n    end_time = start_time + kevin['min_duration']\n    \n    if end_time <= available_end:\n        itinerary.append({\n            'action': 'meet',\n            'location': kevin['location'],\n            'person': kevin['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        current_time = end_time\n        current_location = kevin['location']\n        met_friends.add(kevin['name'])\n\n    # Finally, meet Stephanie (evening)\n    stephanie = next(f for f in friends if f['name'] == 'Stephanie')\n    travel_time = travel_times[current_location][stephanie['location']]\n    arrival_time = current_time + travel_time\n    available_start = time_to_minutes(stephanie['available_start'])\n    available_end = time_to_minutes(stephanie['available_end'])\n    \n    start_time = max(arrival_time, available_start)\n    end_time = start_time + stephanie['min_duration']\n    \n    if end_time <= available_end:\n        itinerary.append({\n            'action': 'meet',\n            'location': stephanie['location'],\n            'person': stephanie['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        met_friends.add(stephanie['name'])\n\n    return {'itinerary': itinerary}\n\nschedule = calculate_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_577"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Elizabeth",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ashley",
                        "start_time": "11:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "12:25",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "14:43",
                        "end_time": "16:28"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "16:51",
                        "end_time": "17:21"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Helen",
                        "start_time": "17:48",
                        "end_time": "19:33"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "19:58",
                        "end_time": "20:28"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Elizabeth",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "11:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "15:22",
                        "end_time": "17:07"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:18",
                        "end_time": "17:48"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Helen",
                        "start_time": "18:12",
                        "end_time": "19:57"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ashley",
                        "start_time": "20:21",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes = minutes % 60\n    return f\"{hours}:{minutes:02d}\"\n\n# Travel times dictionary: {from_location: {to_location: minutes}}\ntravel_times = {\n    'Marina District': {\n        'Mission District': 20,\n        'Fisherman\\'s Wharf': 10,\n        'Presidio': 10,\n        'Union Square': 16,\n        'Sunset District': 19,\n        'Financial District': 17,\n        'Haight-Ashbury': 16,\n        'Russian Hill': 8\n    },\n    'Mission District': {\n        'Marina District': 19,\n        'Fisherman\\'s Wharf': 22,\n        'Presidio': 25,\n        'Union Square': 15,\n        'Sunset District': 24,\n        'Financial District': 15,\n        'Haight-Ashbury': 12,\n        'Russian Hill': 15\n    },\n    'Fisherman\\'s Wharf': {\n        'Marina District': 9,\n        'Mission District': 22,\n        'Presidio': 17,\n        'Union Square': 13,\n        'Sunset District': 27,\n        'Financial District': 11,\n        'Haight-Ashbury': 22,\n        'Russian Hill': 7\n    },\n    'Presidio': {\n        'Marina District': 11,\n        'Mission District': 26,\n        'Fisherman\\'s Wharf': 19,\n        'Union Square': 22,\n        'Sunset District': 15,\n        'Financial District': 23,\n        'Haight-Ashbury': 15,\n        'Russian Hill': 14\n    },\n    'Union Square': {\n        'Marina District': 18,\n        'Mission District': 14,\n        'Fisherman\\'s Wharf': 15,\n        'Presidio': 24,\n        'Sunset District': 27,\n        'Financial District': 9,\n        'Haight-Ashbury': 18,\n        'Russian Hill': 13\n    },\n    'Sunset District': {\n        'Marina District': 21,\n        'Mission District': 25,\n        'Fisherman\\'s Wharf': 29,\n        'Presidio': 16,\n        'Union Square': 30,\n        'Financial District': 30,\n        'Haight-Ashbury': 15,\n        'Russian Hill': 24\n    },\n    'Financial District': {\n        'Marina District': 15,\n        'Mission District': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Presidio': 22,\n        'Union Square': 9,\n        'Sunset District': 30,\n        'Haight-Ashbury': 19,\n        'Russian Hill': 11\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17,\n        'Mission District': 11,\n        'Fisherman\\'s Wharf': 23,\n        'Presidio': 15,\n        'Union Square': 19,\n        'Sunset District': 15,\n        'Financial District': 21,\n        'Russian Hill': 17\n    },\n    'Russian Hill': {\n        'Marina District': 7,\n        'Mission District': 16,\n        'Fisherman\\'s Wharf': 7,\n        'Presidio': 14,\n        'Union Square': 10,\n        'Sunset District': 23,\n        'Financial District': 11,\n        'Haight-Ashbury': 17\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'Karen', 'location': 'Mission District', 'start': '14:15', 'end': '22:00', 'duration': 30},\n    {'name': 'Richard', 'location': 'Fisherman\\'s Wharf', 'start': '14:30', 'end': '17:30', 'duration': 30},\n    {'name': 'Robert', 'location': 'Presidio', 'start': '21:45', 'end': '22:45', 'duration': 60},\n    {'name': 'Joseph', 'location': 'Union Square', 'start': '11:45', 'end': '14:45', 'duration': 120},\n    {'name': 'Helen', 'location': 'Sunset District', 'start': '14:45', 'end': '20:45', 'duration': 105},\n    {'name': 'Elizabeth', 'location': 'Financial District', 'start': '10:00', 'end': '12:45', 'duration': 75},\n    {'name': 'Kimberly', 'location': 'Haight-Ashbury', 'start': '14:15', 'end': '17:30', 'duration': 105},\n    {'name': 'Ashley', 'location': 'Russian Hill', 'start': '11:30', 'end': '21:30', 'duration': 45}\n]\n\ndef calculate_schedule():\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try different permutations of friends to find the best schedule\n    for friend_order in permutations(friends):\n        current_location = 'Marina District'\n        current_time = time_to_minutes('9:00')\n        schedule = []\n        meetings = 0\n        \n        for friend in friend_order:\n            # Calculate travel time to friend's location\n            travel_time = travel_times[current_location][friend['location']]\n            arrival_time = current_time + travel_time\n            \n            # Check if we can meet this friend\n            friend_start = time_to_minutes(friend['start'])\n            friend_end = time_to_minutes(friend['end'])\n            \n            # Calculate possible meeting window\n            meeting_start = max(arrival_time, friend_start)\n            meeting_end = min(meeting_start + friend['duration'], friend_end)\n            \n            if meeting_end - meeting_start >= friend['duration']:\n                # Can meet this friend\n                schedule.append({\n                    'action': 'meet',\n                    'location': friend['location'],\n                    'person': friend['name'],\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                meetings += 1\n                current_time = meeting_end\n                current_location = friend['location']\n            else:\n                # Can't meet this friend, skip\n                continue\n        \n        # Check if this schedule is better than the current best\n        if meetings > max_meetings or (meetings == max_meetings and current_time < time_to_minutes('23:59')):\n            max_meetings = meetings\n            best_schedule = schedule\n    \n    return best_schedule\n\ndef main():\n    schedule = calculate_schedule()\n    result = {\n        'itinerary': schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_728"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "10:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "12:06",
                        "end_time": "14:06"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Elizabeth",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "17:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "18:07",
                        "end_time": "18:22"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "10:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "12:06",
                        "end_time": "14:06"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Margaret",
                        "start_time": "14:22",
                        "end_time": "15:52"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "15:59",
                        "end_time": "16:14"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Laura",
                        "start_time": "16:34",
                        "end_time": "17:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Presidio': {\n        'Fisherman\\'s Wharf': 19,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'Union Square': 22,\n        'Sunset District': 15,\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Chinatown': 21,\n        'Richmond District': 7\n    },\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Alamo Square': 21,\n        'Financial District': 11,\n        'Union Square': 13,\n        'Sunset District': 27,\n        'Embarcadero': 8,\n        'Golden Gate Park': 25,\n        'Chinatown': 12,\n        'Richmond District': 18\n    },\n    'Alamo Square': {\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 19,\n        'Financial District': 17,\n        'Union Square': 14,\n        'Sunset District': 16,\n        'Embarcadero': 16,\n        'Golden Gate Park': 9,\n        'Chinatown': 15,\n        'Richmond District': 11\n    },\n    'Financial District': {\n        'Presidio': 22,\n        'Fisherman\\'s Wharf': 10,\n        'Alamo Square': 17,\n        'Union Square': 9,\n        'Sunset District': 30,\n        'Embarcadero': 4,\n        'Golden Gate Park': 23,\n        'Chinatown': 5,\n        'Richmond District': 21\n    },\n    'Union Square': {\n        'Presidio': 24,\n        'Fisherman\\'s Wharf': 15,\n        'Alamo Square': 15,\n        'Financial District': 9,\n        'Sunset District': 27,\n        'Embarcadero': 11,\n        'Golden Gate Park': 22,\n        'Chinatown': 7,\n        'Richmond District': 20\n    },\n    'Sunset District': {\n        'Presidio': 16,\n        'Fisherman\\'s Wharf': 29,\n        'Alamo Square': 17,\n        'Financial District': 30,\n        'Union Square': 30,\n        'Embarcadero': 30,\n        'Golden Gate Park': 11,\n        'Chinatown': 30,\n        'Richmond District': 12\n    },\n    'Embarcadero': {\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 6,\n        'Alamo Square': 19,\n        'Financial District': 5,\n        'Union Square': 10,\n        'Sunset District': 30,\n        'Golden Gate Park': 25,\n        'Chinatown': 7,\n        'Richmond District': 21\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Fisherman\\'s Wharf': 24,\n        'Alamo Square': 9,\n        'Financial District': 26,\n        'Union Square': 22,\n        'Sunset District': 10,\n        'Embarcadero': 25,\n        'Chinatown': 23,\n        'Richmond District': 7\n    },\n    'Chinatown': {\n        'Presidio': 19,\n        'Fisherman\\'s Wharf': 8,\n        'Alamo Square': 17,\n        'Financial District': 5,\n        'Union Square': 7,\n        'Sunset District': 29,\n        'Embarcadero': 5,\n        'Golden Gate Park': 23,\n        'Richmond District': 20\n    },\n    'Richmond District': {\n        'Presidio': 7,\n        'Fisherman\\'s Wharf': 18,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Union Square': 21,\n        'Sunset District': 11,\n        'Embarcadero': 19,\n        'Golden Gate Park': 9,\n        'Chinatown': 20\n    }\n}\n\n# Friend data: name -> (location, start, end, min_duration)\nfriends = {\n    'Jeffrey': ('Fisherman\\'s Wharf', '10:15', '13:00', 90),\n    'Ronald': ('Alamo Square', '7:45', '14:45', 120),\n    'Jason': ('Financial District', '10:45', '16:00', 105),\n    'Melissa': ('Union Square', '17:45', '18:15', 15),\n    'Elizabeth': ('Sunset District', '14:45', '17:30', 105),\n    'Margaret': ('Embarcadero', '13:15', '19:00', 90),\n    'George': ('Golden Gate Park', '19:00', '22:00', 75),\n    'Richard': ('Chinatown', '9:30', '21:00', 15),\n    'Laura': ('Richmond District', '9:45', '18:00', 60)\n}\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule(order):\n    current_location = 'Presidio'\n    current_time = time_to_minutes('9:00')\n    schedule = []\n    met_friends = set()\n    \n    for friend in order:\n        name = friend\n        location, start_str, end_str, min_duration = friends[friend]\n        start = time_to_minutes(start_str)\n        end = time_to_minutes(end_str)\n        \n        # Travel to location\n        travel_time = travel_times[current_location].get(location, float('inf'))\n        arrival_time = current_time + travel_time\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, start)\n        meeting_end = min(meeting_start + min_duration, end)\n        \n        if meeting_end - meeting_start >= min_duration:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': name,\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            met_friends.add(name)\n            current_time = meeting_end\n            current_location = location\n    \n    # Add George at the end if not already met\n    if 'George' not in met_friends:\n        location, start_str, end_str, min_duration = friends['George']\n        travel_time = travel_times[current_location].get(location, float('inf'))\n        arrival_time = current_time + travel_time\n        start = time_to_minutes(start_str)\n        end = time_to_minutes(end_str)\n        \n        meeting_start = max(arrival_time, start)\n        meeting_end = min(meeting_start + min_duration, end)\n        \n        if meeting_end - meeting_start >= min_duration:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': 'George',\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            met_friends.add('George')\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    friend_names = [name for name in friends if name != 'George']\n    best_schedule = []\n    max_met = 0\n    \n    # Try all permutations of 5 friends (to keep computation reasonable)\n    from itertools import combinations\n    for friends_subset in combinations(friend_names, 5):\n        for order in permutations(friends_subset):\n            schedule, num_met = calculate_schedule(order)\n            if num_met > max_met or (num_met == max_met and len(schedule) > len(best_schedule)):\n                max_met = num_met\n                best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nresult = {\n    \"itinerary\": optimal_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_831"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "19:30",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Union Square': {\n        'Russian Hill': 13,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 18,\n        'Marina District': 18,\n        'Bayview': 15,\n        'Chinatown': 7,\n        'Presidio': 24,\n        'Sunset District': 27\n    },\n    'Russian Hill': {\n        'Union Square': 10,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 17,\n        'Marina District': 7,\n        'Bayview': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Sunset District': 23\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'Russian Hill': 13,\n        'Haight-Ashbury': 5,\n        'Marina District': 15,\n        'Bayview': 16,\n        'Chinatown': 15,\n        'Presidio': 17,\n        'Sunset District': 16\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'Russian Hill': 17,\n        'Alamo Square': 5,\n        'Marina District': 17,\n        'Bayview': 18,\n        'Chinatown': 19,\n        'Presidio': 15,\n        'Sunset District': 15\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Russian Hill': 8,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 16,\n        'Bayview': 27,\n        'Chinatown': 15,\n        'Presidio': 10,\n        'Sunset District': 19\n    },\n    'Bayview': {\n        'Union Square': 18,\n        'Russian Hill': 23,\n        'Alamo Square': 16,\n        'Haight-Ashbury': 19,\n        'Marina District': 27,\n        'Chinatown': 19,\n        'Presidio': 32,\n        'Sunset District': 23\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Russian Hill': 7,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 19,\n        'Marina District': 12,\n        'Bayview': 20,\n        'Presidio': 19,\n        'Sunset District': 29\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'Russian Hill': 14,\n        'Alamo Square': 19,\n        'Haight-Ashbury': 15,\n        'Marina District': 11,\n        'Bayview': 31,\n        'Chinatown': 21,\n        'Sunset District': 16\n    },\n    'Sunset District': {\n        'Union Square': 30,\n        'Russian Hill': 24,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 15,\n        'Marina District': 21,\n        'Bayview': 22,\n        'Chinatown': 30,\n        'Presidio': 16\n    }\n}\n\n# Friend data: name, location, available_start, available_end, min_duration (in minutes)\nfriends = [\n    ('Betty', 'Russian Hill', 7*60, 16*60+45, 105),\n    ('Melissa', 'Alamo Square', 9*60+30, 17*60+15, 105),\n    ('Joshua', 'Haight-Ashbury', 12*60+15, 19*60, 90),\n    ('Jeffrey', 'Marina District', 12*60+15, 18*60, 45),\n    ('James', 'Bayview', 7*60+30, 20*60, 90),\n    ('Anthony', 'Chinatown', 11*60+45, 13*60+30, 75),\n    ('Timothy', 'Presidio', 12*60+30, 14*60+45, 90),\n    ('Emily', 'Sunset District', 19*60+30, 21*60+30, 120)\n]\n\ndef time_to_str(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef evaluate_schedule(order):\n    current_time = 9 * 60  # Start at Union Square at 9:00 AM\n    current_location = 'Union Square'\n    schedule = []\n    met_friends = set()\n    \n    for friend_idx in order:\n        name, loc, avail_start, avail_end, min_dur = friends[friend_idx]\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location].get(loc, float('inf'))\n        if travel_time == float('inf'):\n            return None, 0\n        \n        arrival_time = current_time + travel_time\n        start_time = max(arrival_time, avail_start)\n        end_time = start_time + min_dur\n        \n        if end_time > avail_end:\n            return None, 0\n        \n        schedule.append({\n            'action': 'meet',\n            'location': loc,\n            'person': name,\n            'start_time': time_to_str(start_time),\n            'end_time': time_to_str(end_time)\n        })\n        \n        met_friends.add(friend_idx)\n        current_time = end_time\n        current_location = loc\n    \n    # Check if we can meet Emily in Sunset District at the end\n    travel_time = travel_times[current_location].get('Sunset District', float('inf'))\n    if travel_time == float('inf'):\n        return None, len(met_friends)\n    \n    arrival_time = current_time + travel_time\n    emily = friends[-1]  # Emily is last in the list\n    start_time = max(arrival_time, emily[2])\n    end_time = start_time + emily[4]\n    \n    if end_time <= emily[3]:\n        schedule.append({\n            'action': 'meet',\n            'location': 'Sunset District',\n            'person': 'Emily',\n            'start_time': time_to_str(start_time),\n            'end_time': time_to_str(end_time)\n        })\n        met_friends.add(len(friends)-1)\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_count = 0\n    \n    # We'll try permutations of friend indices (excluding Emily who must be last)\n    friend_indices = list(range(len(friends)-1))\n    \n    # Try all possible orders (but limit to 10000 permutations for performance)\n    for perm in permutations(friend_indices):\n        schedule, count = evaluate_schedule(perm)\n        if count > best_count or (count == best_count and schedule is not None):\n            best_schedule = schedule\n            best_count = count\n            if best_count == len(friends):  # Can't do better than meeting everyone\n                break\n    \n    return best_schedule\n\ndef main():\n    optimal_schedule = find_optimal_schedule()\n    result = {\n        \"itinerary\": optimal_schedule if optimal_schedule else []\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_789"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%H:%M')\n\ndef compute_schedule():\n    # Initialize locations and travel times\n    locations = ['The Castro', 'Alamo Square', 'Union Square', 'Chinatown']\n    travel_times = {\n        ('The Castro', 'Alamo Square'): 8,\n        ('The Castro', 'Union Square'): 19,\n        ('The Castro', 'Chinatown'): 20,\n        ('Alamo Square', 'The Castro'): 8,\n        ('Alamo Square', 'Union Square'): 14,\n        ('Alamo Square', 'Chinatown'): 16,\n        ('Union Square', 'The Castro'): 19,\n        ('Union Square', 'Alamo Square'): 15,\n        ('Union Square', 'Chinatown'): 7,\n        ('Chinatown', 'The Castro'): 22,\n        ('Chinatown', 'Alamo Square'): 17,\n        ('Chinatown', 'Union Square'): 7,\n    }\n\n    # Parse constraints\n    current_time = parse_time('9:00AM')\n    current_location = 'The Castro'\n\n    emily_available_start = parse_time('11:45AM')\n    emily_available_end = parse_time('3:15PM')\n    emily_min_duration = timedelta(minutes=105)\n\n    barbara_available_start = parse_time('4:45PM')\n    barbara_available_end = parse_time('6:15PM')\n    barbara_min_duration = timedelta(minutes=60)\n\n    william_available_start = parse_time('5:15PM')\n    william_available_end = parse_time('7:00PM')\n    william_min_duration = timedelta(minutes=105)\n\n    itinerary = []\n\n    # Try to meet Emily first\n    travel_to_alamo = travel_times[(current_location, 'Alamo Square')]\n    arrival_alamo = current_time + timedelta(minutes=travel_to_alamo)\n    if arrival_alamo <= emily_available_end - emily_min_duration:\n        meet_emily_start = max(arrival_alamo, emily_available_start)\n        meet_emily_end = meet_emily_start + emily_min_duration\n        if meet_emily_end <= emily_available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Alamo Square\",\n                \"person\": \"Emily\",\n                \"start_time\": format_time(meet_emily_start),\n                \"end_time\": format_time(meet_emily_end)\n            })\n            current_time = meet_emily_end\n            current_location = 'Alamo Square'\n\n    # Now try to meet Barbara and William\n    # First option: meet Barbara then William\n    option1 = []\n    travel_to_union = travel_times[(current_location, 'Union Square')]\n    arrival_union = current_time + timedelta(minutes=travel_to_union)\n    if arrival_union <= barbara_available_end - barbara_min_duration:\n        meet_barbara_start = max(arrival_union, barbara_available_start)\n        meet_barbara_end = meet_barbara_start + barbara_min_duration\n        if meet_barbara_end <= barbara_available_end:\n            option1.append({\n                \"action\": \"meet\",\n                \"location\": \"Union Square\",\n                \"person\": \"Barbara\",\n                \"start_time\": format_time(meet_barbara_start),\n                \"end_time\": format_time(meet_barbara_end)\n            })\n            travel_to_chinatown = travel_times[('Union Square', 'Chinatown')]\n            arrival_chinatown = meet_barbara_end + timedelta(minutes=travel_to_chinatown)\n            if arrival_chinatown <= william_available_end - william_min_duration:\n                meet_william_start = max(arrival_chinatown, william_available_start)\n                meet_william_end = meet_william_start + william_min_duration\n                if meet_william_end <= william_available_end:\n                    option1.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Chinatown\",\n                        \"person\": \"William\",\n                        \"start_time\": format_time(meet_william_start),\n                        \"end_time\": format_time(meet_william_end)\n                    })\n\n    # Second option: meet William then Barbara\n    option2 = []\n    travel_to_chinatown = travel_times[(current_location, 'Chinatown')]\n    arrival_chinatown = current_time + timedelta(minutes=travel_to_chinatown)\n    if arrival_chinatown <= william_available_end - william_min_duration:\n        meet_william_start = max(arrival_chinatown, william_available_start)\n        meet_william_end = meet_william_start + william_min_duration\n        if meet_william_end <= william_available_end:\n            option2.append({\n                \"action\": \"meet\",\n                \"location\": \"Chinatown\",\n                \"person\": \"William\",\n                \"start_time\": format_time(meet_william_start),\n                \"end_time\": format_time(meet_william_end)\n            })\n            travel_to_union = travel_times[('Chinatown', 'Union Square')]\n            arrival_union = meet_william_end + timedelta(minutes=travel_to_union)\n            if arrival_union <= barbara_available_end - barbara_min_duration:\n                meet_barbara_start = max(arrival_union, barbara_available_start)\n                meet_barbara_end = meet_barbara_start + barbara_min_duration\n                if meet_barbara_end <= barbara_available_end:\n                    option2.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Union Square\",\n                        \"person\": \"Barbara\",\n                        \"start_time\": format_time(meet_barbara_start),\n                        \"end_time\": format_time(meet_barbara_end)\n                    })\n\n    # Choose the best option\n    if len(option1) == 2:\n        itinerary.extend(option1)\n    elif len(option2) == 2:\n        itinerary.extend(option2)\n    else:\n        # Try to meet at least one person\n        if len(option1) >= len(option2):\n            itinerary.extend(option1)\n        else:\n            itinerary.extend(option2)\n\n    return {\"itinerary\": itinerary}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_219"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Fisherman\\'s Wharf': {\n        'The Castro': 26,\n        'Golden Gate Park': 25,\n        'Embarcadero': 8,\n        'Russian Hill': 7,\n        'Nob Hill': 11,\n        'Alamo Square': 20,\n        'North Beach': 6\n    },\n    'The Castro': {\n        'Fisherman\\'s Wharf': 24,\n        'Golden Gate Park': 11,\n        'Embarcadero': 22,\n        'Russian Hill': 18,\n        'Nob Hill': 16,\n        'Alamo Square': 8,\n        'North Beach': 20\n    },\n    'Golden Gate Park': {\n        'Fisherman\\'s Wharf': 24,\n        'The Castro': 13,\n        'Embarcadero': 25,\n        'Russian Hill': 19,\n        'Nob Hill': 20,\n        'Alamo Square': 10,\n        'North Beach': 24\n    },\n    'Embarcadero': {\n        'Fisherman\\'s Wharf': 6,\n        'The Castro': 25,\n        'Golden Gate Park': 25,\n        'Russian Hill': 8,\n        'Nob Hill': 10,\n        'Alamo Square': 19,\n        'North Beach': 5\n    },\n    'Russian Hill': {\n        'Fisherman\\'s Wharf': 7,\n        'The Castro': 21,\n        'Golden Gate Park': 21,\n        'Embarcadero': 8,\n        'Nob Hill': 5,\n        'Alamo Square': 15,\n        'North Beach': 5\n    },\n    'Nob Hill': {\n        'Fisherman\\'s Wharf': 11,\n        'The Castro': 17,\n        'Golden Gate Park': 17,\n        'Embarcadero': 9,\n        'Russian Hill': 5,\n        'Alamo Square': 11,\n        'North Beach': 8\n    },\n    'Alamo Square': {\n        'Fisherman\\'s Wharf': 19,\n        'The Castro': 8,\n        'Golden Gate Park': 9,\n        'Embarcadero': 17,\n        'Russian Hill': 13,\n        'Nob Hill': 11,\n        'North Beach': 15\n    },\n    'North Beach': {\n        'Fisherman\\'s Wharf': 5,\n        'The Castro': 22,\n        'Golden Gate Park': 22,\n        'Embarcadero': 6,\n        'Russian Hill': 4,\n        'Nob Hill': 7,\n        'Alamo Square': 16\n    }\n}\n\nfriends = [\n    {\n        'name': 'Laura',\n        'location': 'The Castro',\n        'start': '19:45',\n        'end': '21:30',\n        'duration': 105\n    },\n    {\n        'name': 'Daniel',\n        'location': 'Golden Gate Park',\n        'start': '21:15',\n        'end': '21:45',\n        'duration': 15\n    },\n    {\n        'name': 'William',\n        'location': 'Embarcadero',\n        'start': '7:00',\n        'end': '9:00',\n        'duration': 90\n    },\n    {\n        'name': 'Karen',\n        'location': 'Russian Hill',\n        'start': '14:30',\n        'end': '19:45',\n        'duration': 30\n    },\n    {\n        'name': 'Stephanie',\n        'location': 'Nob Hill',\n        'start': '7:30',\n        'end': '9:30',\n        'duration': 45\n    },\n    {\n        'name': 'Joseph',\n        'location': 'Alamo Square',\n        'start': '11:30',\n        'end': '12:45',\n        'duration': 15\n    },\n    {\n        'name': 'Kimberly',\n        'location': 'North Beach',\n        'start': '15:45',\n        'end': '19:15',\n        'duration': 30\n    }\n]\n\ndef get_possible_meetings(current_time, current_location, remaining_friends, visited):\n    possible = []\n    for friend in remaining_friends:\n        if friend['name'] in visited:\n            continue\n        \n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        \n        start_window = time_to_minutes(friend['start'])\n        end_window = time_to_minutes(friend['end'])\n        \n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end <= end_window:\n            possible.append((friend, meeting_start, meeting_end))\n    \n    return possible\n\ndef find_best_schedule(current_time, current_location, remaining_friends, visited, schedule):\n    if not remaining_friends or len(visited) == len(remaining_friends):\n        return schedule\n    \n    best_schedule = schedule.copy()\n    max_meetings = len(schedule)\n    \n    possible_meetings = get_possible_meetings(current_time, current_location, remaining_friends, visited)\n    \n    for meeting in possible_meetings:\n        friend, meeting_start, meeting_end = meeting\n        new_visited = visited.copy()\n        new_visited.add(friend['name'])\n        new_schedule = schedule.copy()\n        new_schedule.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        updated_schedule = find_best_schedule(\n            meeting_end,\n            friend['location'],\n            remaining_friends,\n            new_visited,\n            new_schedule\n        )\n        \n        if len(updated_schedule) > max_meetings:\n            best_schedule = updated_schedule\n            max_meetings = len(updated_schedule)\n    \n    return best_schedule\n\ndef main():\n    start_time = time_to_minutes('9:00')\n    start_location = 'Fisherman\\'s Wharf'\n    \n    # Filter out friends that can't be met due to time constraints\n    possible_friends = []\n    for friend in friends:\n        travel_time = travel_times[start_location][friend['location']]\n        arrival_time = start_time + travel_time\n        start_window = time_to_minutes(friend['start'])\n        end_window = time_to_minutes(friend['end'])\n        \n        if arrival_time <= end_window and (arrival_time + friend['duration']) <= end_window:\n            possible_friends.append(friend)\n    \n    best_schedule = find_best_schedule(start_time, start_location, possible_friends, set(), [])\n    \n    result = {\n        \"itinerary\": best_schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_604"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    arrival_time = \"9:00\"\n    arrival_location = \"Russian Hill\"\n    barbara_available_start = \"13:15\"\n    barbara_available_end = \"18:15\"\n    min_meeting_duration = 45  # minutes\n    travel_russian_to_richmond = 14  # minutes\n    travel_richmond_to_russian = 13  # minutes\n    \n    # Convert time strings to minutes since midnight\n    def time_to_minutes(time_str):\n        h, m = map(int, time_str.split(':'))\n        return h * 60 + m\n    \n    # Convert minutes back to time string\n    def minutes_to_time(minutes):\n        h = minutes // 60\n        m = minutes % 60\n        return f\"{h}:{m:02d}\"\n    \n    arrival_min = time_to_minutes(arrival_time)\n    barbara_start_min = time_to_minutes(barbara_available_start)\n    barbara_end_min = time_to_minutes(barbara_available_end)\n    \n    # Calculate earliest possible departure to meet Barbara\n    # Need to arrive at Richmond by barbara_start_min + min_meeting_duration at latest\n    latest_departure_for_meeting = barbara_end_min - min_meeting_duration - travel_russian_to_richmond\n    \n    # Check if we have time to meet Barbara\n    if arrival_min + travel_russian_to_richmond > barbara_end_min - min_meeting_duration:\n        # Not enough time to meet Barbara\n        itinerary = []\n    else:\n        # Calculate optimal meeting time (as early as possible)\n        meeting_start = max(barbara_start_min, arrival_min + travel_russian_to_richmond)\n        meeting_end = meeting_start + min_meeting_duration\n        \n        # Create itinerary\n        itinerary = [\n            {\n                \"action\": \"travel\",\n                \"location\": \"Richmond District\",\n                \"person\": \"\",\n                \"start_time\": minutes_to_time(arrival_min),\n                \"end_time\": minutes_to_time(arrival_min + travel_russian_to_richmond)\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Richmond District\",\n                \"person\": \"Barbara\",\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            }\n        ]\n    \n    # Prepare output\n    output = {\n        \"itinerary\": itinerary\n    }\n    \n    return json.dumps(output, indent=2)\n\n# Execute and print the result\nprint(calculate_optimal_schedule())\n```",
            "count": "meeting_planning_example_52"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "9:23",
                        "end_time": "10:08"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "13:53",
                        "end_time": "14:38"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef compute_optimal_schedule():\n    # Input parameters\n    travel_times = {\n        (\"Financial District\", \"Chinatown\"): 5,\n        (\"Financial District\", \"Golden Gate Park\"): 23,\n        (\"Chinatown\", \"Financial District\"): 5,\n        (\"Chinatown\", \"Golden Gate Park\"): 23,\n        (\"Golden Gate Park\", \"Financial District\"): 26,\n        (\"Golden Gate Park\", \"Chinatown\"): 23\n    }\n    \n    current_location = \"Financial District\"\n    current_time = parse_time(\"9:00\")\n    \n    kenneth_available_start = parse_time(\"12:00\")\n    kenneth_available_end = parse_time(\"15:00\")\n    kenneth_min_duration = timedelta(minutes=90)\n    \n    barbara_available_start = parse_time(\"8:15\")\n    barbara_available_end = parse_time(\"19:00\")\n    barbara_min_duration = timedelta(minutes=45)\n    \n    itinerary = []\n    \n    # Option 1: Meet Kenneth first, then Barbara\n    option1 = []\n    time = current_time\n    location = current_location\n    \n    # Travel to Chinatown to meet Kenneth\n    travel_time = travel_times[(location, \"Chinatown\")]\n    time += timedelta(minutes=travel_time)\n    location = \"Chinatown\"\n    \n    # Meet Kenneth\n    kenneth_start = max(time, kenneth_available_start)\n    kenneth_end = min(kenneth_start + kenneth_min_duration, kenneth_available_end)\n    if kenneth_end - kenneth_start >= kenneth_min_duration:\n        option1.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"Kenneth\",\n            \"start_time\": format_time(kenneth_start),\n            \"end_time\": format_time(kenneth_end)\n        })\n        time = kenneth_end\n        \n        # Travel to Golden Gate Park to meet Barbara\n        travel_time = travel_times[(location, \"Golden Gate Park\")]\n        time += timedelta(minutes=travel_time)\n        location = \"Golden Gate Park\"\n        \n        # Meet Barbara\n        barbara_start = max(time, barbara_available_start)\n        barbara_end = min(barbara_start + barbara_min_duration, barbara_available_end)\n        if barbara_end - barbara_start >= barbara_min_duration:\n            option1.append({\n                \"action\": \"meet\",\n                \"location\": \"Golden Gate Park\",\n                \"person\": \"Barbara\",\n                \"start_time\": format_time(barbara_start),\n                \"end_time\": format_time(barbara_end)\n            })\n    \n    # Option 2: Meet Barbara first, then Kenneth\n    option2 = []\n    time = current_time\n    location = current_location\n    \n    # Travel to Golden Gate Park to meet Barbara\n    travel_time = travel_times[(location, \"Golden Gate Park\")]\n    time += timedelta(minutes=travel_time)\n    location = \"Golden Gate Park\"\n    \n    # Meet Barbara\n    barbara_start = max(time, barbara_available_start)\n    barbara_end = min(barbara_start + barbara_min_duration, barbara_available_end)\n    if barbara_end - barbara_start >= barbara_min_duration:\n        option2.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"person\": \"Barbara\",\n            \"start_time\": format_time(barbara_start),\n            \"end_time\": format_time(barbara_end)\n        })\n        time = barbara_end\n        \n        # Travel to Chinatown to meet Kenneth\n        travel_time = travel_times[(location, \"Chinatown\")]\n        time += timedelta(minutes=travel_time)\n        location = \"Chinatown\"\n        \n        # Meet Kenneth\n        kenneth_start = max(time, kenneth_available_start)\n        kenneth_end = min(kenneth_start + kenneth_min_duration, kenneth_available_end)\n        if kenneth_end - kenneth_start >= kenneth_min_duration:\n            option2.append({\n                \"action\": \"meet\",\n                \"location\": \"Chinatown\",\n                \"person\": \"Kenneth\",\n                \"start_time\": format_time(kenneth_start),\n                \"end_time\": format_time(kenneth_end)\n            })\n    \n    # Determine the best option\n    if len(option1) == 2 and len(option2) == 2:\n        # Both options are valid, choose the one that finishes earlier\n        option1_end = parse_time(option1[-1][\"end_time\"])\n        option2_end = parse_time(option2[-1][\"end_time\"])\n        itinerary = option1 if option1_end <= option2_end else option2\n    elif len(option1) == 2:\n        itinerary = option1\n    elif len(option2) == 2:\n        itinerary = option2\n    else:\n        # Try to meet at least one person\n        if len(option1) > 0 or len(option2) > 0:\n            itinerary = option1 if len(option1) > len(option2) else option2\n    \n    return {\"itinerary\": itinerary}\n\nresult = compute_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_137"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "9:16",
                        "end_time": "10:46"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Stephanie",
                        "start_time": "10:59",
                        "end_time": "12:14"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Robert",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "14:20",
                        "end_time": "14:50"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "James",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Elizabeth",
                        "start_time": "17:22",
                        "end_time": "18:22"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "18:32",
                        "end_time": "18:47"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "9:16",
                        "end_time": "10:46"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Stephanie",
                        "start_time": "10:59",
                        "end_time": "12:14"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Elizabeth",
                        "start_time": "12:33",
                        "end_time": "13:33"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Robert",
                        "start_time": "13:42",
                        "end_time": "14:27"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "14:48",
                        "end_time": "15:18"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "James",
                        "start_time": "15:25",
                        "end_time": "17:25"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Sarah",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'The Castro': {\n        'North Beach': 20,\n        'Golden Gate Park': 11,\n        'Embarcadero': 22,\n        'Haight-Ashbury': 6,\n        'Richmond District': 16,\n        'Nob Hill': 16,\n        'Marina District': 21,\n        'Presidio': 20,\n        'Union Square': 19,\n        'Financial District': 21\n    },\n    'North Beach': {\n        'The Castro': 23,\n        'Golden Gate Park': 22,\n        'Embarcadero': 6,\n        'Haight-Ashbury': 18,\n        'Richmond District': 18,\n        'Nob Hill': 7,\n        'Marina District': 9,\n        'Presidio': 17,\n        'Union Square': 7,\n        'Financial District': 8\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'North Beach': 23,\n        'Embarcadero': 25,\n        'Haight-Ashbury': 7,\n        'Richmond District': 7,\n        'Nob Hill': 20,\n        'Marina District': 16,\n        'Presidio': 11,\n        'Union Square': 22,\n        'Financial District': 26\n    },\n    'Embarcadero': {\n        'The Castro': 25,\n        'North Beach': 5,\n        'Golden Gate Park': 25,\n        'Haight-Ashbury': 21,\n        'Richmond District': 21,\n        'Nob Hill': 10,\n        'Marina District': 12,\n        'Presidio': 20,\n        'Union Square': 10,\n        'Financial District': 5\n    },\n    'Haight-Ashbury': {\n        'The Castro': 6,\n        'North Beach': 19,\n        'Golden Gate Park': 7,\n        'Embarcadero': 20,\n        'Richmond District': 10,\n        'Nob Hill': 15,\n        'Marina District': 17,\n        'Presidio': 15,\n        'Union Square': 19,\n        'Financial District': 21\n    },\n    'Richmond District': {\n        'The Castro': 16,\n        'North Beach': 17,\n        'Golden Gate Park': 9,\n        'Embarcadero': 19,\n        'Haight-Ashbury': 10,\n        'Nob Hill': 17,\n        'Marina District': 9,\n        'Presidio': 7,\n        'Union Square': 21,\n        'Financial District': 22\n    },\n    'Nob Hill': {\n        'The Castro': 17,\n        'North Beach': 8,\n        'Golden Gate Park': 17,\n        'Embarcadero': 9,\n        'Haight-Ashbury': 13,\n        'Richmond District': 14,\n        'Marina District': 11,\n        'Presidio': 17,\n        'Union Square': 7,\n        'Financial District': 9\n    },\n    'Marina District': {\n        'The Castro': 22,\n        'North Beach': 11,\n        'Golden Gate Park': 18,\n        'Embarcadero': 14,\n        'Haight-Ashbury': 16,\n        'Richmond District': 11,\n        'Nob Hill': 12,\n        'Presidio': 10,\n        'Union Square': 16,\n        'Financial District': 17\n    },\n    'Presidio': {\n        'The Castro': 21,\n        'North Beach': 18,\n        'Golden Gate Park': 12,\n        'Embarcadero': 20,\n        'Haight-Ashbury': 15,\n        'Richmond District': 7,\n        'Nob Hill': 18,\n        'Marina District': 11,\n        'Union Square': 22,\n        'Financial District': 23\n    },\n    'Union Square': {\n        'The Castro': 17,\n        'North Beach': 10,\n        'Golden Gate Park': 22,\n        'Embarcadero': 11,\n        'Haight-Ashbury': 18,\n        'Richmond District': 20,\n        'Nob Hill': 9,\n        'Marina District': 18,\n        'Presidio': 24,\n        'Financial District': 9\n    },\n    'Financial District': {\n        'The Castro': 20,\n        'North Beach': 7,\n        'Golden Gate Park': 23,\n        'Embarcadero': 4,\n        'Haight-Ashbury': 19,\n        'Richmond District': 21,\n        'Nob Hill': 8,\n        'Marina District': 15,\n        'Presidio': 22,\n        'Union Square': 9\n    }\n}\n\n# Friend data: name, location, available_start, available_end, min_duration (minutes)\nfriends = [\n    ('Steven', 'North Beach', 17.5, 20.5, 15),\n    ('Sarah', 'Golden Gate Park', 17.0, 19.25, 75),\n    ('Brian', 'Embarcadero', 14.25, 16.0, 105),\n    ('Stephanie', 'Haight-Ashbury', 10.25, 12.25, 75),\n    ('Melissa', 'Richmond District', 14.0, 19.5, 30),\n    ('Nancy', 'Nob Hill', 8.25, 12.75, 90),\n    ('David', 'Marina District', 11.25, 13.25, 120),\n    ('James', 'Presidio', 15.0, 18.25, 120),\n    ('Elizabeth', 'Union Square', 11.5, 21.0, 60),\n    ('Robert', 'Financial District', 13.25, 15.25, 45)\n]\n\ndef time_to_float(time_str):\n    if isinstance(time_str, float):\n        return time_str\n    hours, minutes = map(float, time_str.split(':'))\n    return hours + minutes / 60\n\ndef float_to_time(time_float):\n    hours = int(time_float)\n    minutes = int((time_float - hours) * 60)\n    return f\"{hours}:{minutes:02d}\"\n\ndef get_travel_time(from_loc, to_loc):\n    if from_loc == to_loc:\n        return 0\n    try:\n        return travel_times[from_loc][to_loc] / 60\n    except KeyError:\n        return travel_times[to_loc][from_loc] / 60\n\ndef can_schedule(prev_end, friend, current_location):\n    travel_time = get_travel_time(current_location, friend[1])\n    available_start = friend[2]\n    available_end = friend[3]\n    min_duration = friend[4] / 60\n    \n    start_time = max(prev_end + travel_time, available_start)\n    end_time = start_time + min_duration\n    \n    if end_time > available_end:\n        return None\n    \n    return (start_time, end_time)\n\ndef evaluate_schedule(order):\n    current_time = 9.0  # Starting at The Castro at 9:00 AM\n    current_location = 'The Castro'\n    schedule = []\n    met_friends = set()\n    \n    for friend in order:\n        meeting = can_schedule(current_time, friend, current_location)\n        if not meeting:\n            continue\n        \n        start_time, end_time = meeting\n        schedule.append({\n            'action': 'meet',\n            'location': friend[1],\n            'person': friend[0],\n            'start_time': float_to_time(start_time),\n            'end_time': float_to_time(end_time)\n        })\n        met_friends.add(friend[0])\n        current_time = end_time\n        current_location = friend[1]\n    \n    # Try to meet Steven at the end if not already met\n    steven = next(f for f in friends if f[0] == 'Steven')\n    if 'Steven' not in met_friends:\n        meeting = can_schedule(current_time, steven, current_location)\n        if meeting:\n            start_time, end_time = meeting\n            schedule.append({\n                'action': 'meet',\n                'location': steven[1],\n                'person': steven[0],\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            met_friends.add('Steven')\n    \n    return len(met_friends), schedule\n\ndef find_optimal_schedule():\n    # We'll try permutations of friends to find the best schedule\n    # Since trying all permutations is too expensive, we'll try a subset\n    best_count = 0\n    best_schedule = []\n    \n    # Try different orders prioritizing friends with tighter time windows first\n    sorted_friends = sorted(friends, key=lambda x: x[3] - x[2])\n    \n    # Try several permutations\n    for _ in range(1000):\n        import random\n        random.shuffle(sorted_friends)\n        count, schedule = evaluate_schedule(sorted_friends)\n        if count > best_count or (count == best_count and len(schedule) > len(best_schedule)):\n            best_count = count\n            best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\noutput = {\n    \"itinerary\": optimal_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_911"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Deborah",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Margaret",
                        "start_time": "16:30",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "19:33",
                        "end_time": "19:48"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Deborah",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Margaret",
                        "start_time": "16:30",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "19:33",
                        "end_time": "19:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\nfriends = {\n    \"Emily\": {\n        \"location\": \"Richmond District\",\n        \"available_start\": \"19:00\",\n        \"available_end\": \"21:00\",\n        \"min_duration\": 15\n    },\n    \"Margaret\": {\n        \"location\": \"Financial District\",\n        \"available_start\": \"16:30\",\n        \"available_end\": \"20:15\",\n        \"min_duration\": 75\n    },\n    \"Ronald\": {\n        \"location\": \"North Beach\",\n        \"available_start\": \"18:30\",\n        \"available_end\": \"19:30\",\n        \"min_duration\": 45\n    },\n    \"Deborah\": {\n        \"location\": \"The Castro\",\n        \"available_start\": \"13:45\",\n        \"available_end\": \"21:15\",\n        \"min_duration\": 90\n    },\n    \"Jeffrey\": {\n        \"location\": \"Golden Gate Park\",\n        \"available_start\": \"11:15\",\n        \"available_end\": \"14:30\",\n        \"min_duration\": 120\n    }\n}\n\ntravel_times = {\n    \"Nob Hill\": {\n        \"Richmond District\": 14,\n        \"Financial District\": 9,\n        \"North Beach\": 8,\n        \"The Castro\": 17,\n        \"Golden Gate Park\": 17\n    },\n    \"Richmond District\": {\n        \"Nob Hill\": 17,\n        \"Financial District\": 22,\n        \"North Beach\": 17,\n        \"The Castro\": 16,\n        \"Golden Gate Park\": 9\n    },\n    \"Financial District\": {\n        \"Nob Hill\": 8,\n        \"Richmond District\": 21,\n        \"North Beach\": 7,\n        \"The Castro\": 23,\n        \"Golden Gate Park\": 23\n    },\n    \"North Beach\": {\n        \"Nob Hill\": 7,\n        \"Richmond District\": 18,\n        \"Financial District\": 8,\n        \"The Castro\": 22,\n        \"Golden Gate Park\": 22\n    },\n    \"The Castro\": {\n        \"Nob Hill\": 16,\n        \"Richmond District\": 16,\n        \"Financial District\": 20,\n        \"North Beach\": 20,\n        \"Golden Gate Park\": 11\n    },\n    \"Golden Gate Park\": {\n        \"Nob Hill\": 20,\n        \"Richmond District\": 7,\n        \"Financial District\": 26,\n        \"North Beach\": 24,\n        \"The Castro\": 13\n    }\n}\n\ncurrent_location = \"Nob Hill\"\ncurrent_time = time_to_minutes(\"9:00\")\nitinerary = []\n\ndef can_schedule_meeting(friend_order):\n    temp_itinerary = []\n    temp_location = current_location\n    temp_time = current_time\n    \n    for friend in friend_order:\n        data = friends[friend]\n        location = data[\"location\"]\n        travel_time = travel_times[temp_location].get(location, float('inf'))\n        \n        # Arrive at location\n        arrival_time = temp_time + travel_time\n        available_start = time_to_minutes(data[\"available_start\"])\n        available_end = time_to_minutes(data[\"available_end\"])\n        min_duration = data[\"min_duration\"]\n        \n        # Calculate meeting window\n        start_time = max(arrival_time, available_start)\n        end_time = min(start_time + min_duration, available_end)\n        \n        if end_time - start_time < min_duration:\n            return None\n        \n        temp_itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": friend,\n            \"start_time\": minutes_to_time(start_time),\n            \"end_time\": minutes_to_time(end_time)\n        })\n        \n        temp_location = location\n        temp_time = end_time\n    \n    return temp_itinerary\n\n# Try all possible orders to find the best schedule\nbest_itinerary = None\nmax_meetings = 0\n\nfor perm in permutations(friends.keys()):\n    itinerary = can_schedule_meeting(perm)\n    if itinerary and len(itinerary) > max_meetings:\n        best_itinerary = itinerary\n        max_meetings = len(itinerary)\n    elif itinerary and len(itinerary) == max_meetings and best_itinerary:\n        # Prefer longer total meeting time\n        current_duration = sum(time_to_minutes(m[\"end_time\"]) - time_to_minutes(m[\"start_time\"]) for m in itinerary)\n        best_duration = sum(time_to_minutes(m[\"end_time\"]) - time_to_minutes(m[\"start_time\"]) for m in best_itinerary)\n        if current_duration > best_duration:\n            best_itinerary = itinerary\n\nif not best_itinerary:\n    # Try to find partial schedules if full schedule isn't possible\n    for num_meetings in range(len(friends)-1, 0, -1):\n        for perm in permutations(friends.keys(), num_meetings):\n            itinerary = can_schedule_meeting(perm)\n            if itinerary:\n                best_itinerary = itinerary\n                break\n        if best_itinerary:\n            break\n\noutput = {\"itinerary\": best_itinerary} if best_itinerary else {\"itinerary\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_433"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "11:12",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:42",
                        "end_time": "14:12"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "11:12",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:42",
                        "end_time": "14:12"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ninitial_location = \"Financial District\"\ninitial_time = \"9:00\"\n\n# Friend constraints\nfriends = [\n    {\n        \"name\": \"David\",\n        \"location\": \"Fisherman's Wharf\",\n        \"available_start\": \"10:45\",\n        \"available_end\": \"15:30\",\n        \"min_duration\": 15\n    },\n    {\n        \"name\": \"Timothy\",\n        \"location\": \"Pacific Heights\",\n        \"available_start\": \"9:00\",\n        \"available_end\": \"15:30\",\n        \"min_duration\": 75\n    },\n    {\n        \"name\": \"Robert\",\n        \"location\": \"Mission District\",\n        \"available_start\": \"12:15\",\n        \"available_end\": \"19:45\",\n        \"min_duration\": 90\n    }\n]\n\n# Travel times in minutes\ntravel_times = {\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Pacific Heights\": 13,\n        \"Mission District\": 17\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Pacific Heights\": 12,\n        \"Mission District\": 22\n    },\n    \"Pacific Heights\": {\n        \"Financial District\": 13,\n        \"Fisherman's Wharf\": 13,\n        \"Mission District\": 15\n    },\n    \"Mission District\": {\n        \"Financial District\": 17,\n        \"Fisherman's Wharf\": 22,\n        \"Pacific Heights\": 16\n    }\n}\n\ndef calculate_schedule(order):\n    current_location = initial_location\n    current_time = time_to_minutes(initial_time)\n    schedule = []\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        if friend[\"name\"] in met_friends:\n            continue\n        \n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(friend[\"available_start\"])\n        available_end = time_to_minutes(friend[\"available_end\"])\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + friend[\"min_duration\"]\n        \n        if end_time > available_end:\n            return None\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(start_time),\n            \"end_time\": minutes_to_time(end_time)\n        })\n        \n        current_location = friend[\"location\"]\n        current_time = end_time\n        met_friends.add(friend[\"name\"])\n    \n    return schedule\n\nbest_schedule = None\nbest_meetings = 0\n\n# Try all possible meeting orders\nfor order in permutations([\"David\", \"Timothy\", \"Robert\"]):\n    met_friends = set()\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n    elif schedule and len(schedule) == best_meetings:\n        # Prefer schedules that meet more important friends first\n        pass\n\nif not best_schedule:\n    # Try meeting just two friends\n    for order in permutations([\"David\", \"Timothy\", \"Robert\"], 2):\n        met_friends = set()\n        schedule = calculate_schedule(order)\n        if schedule and len(schedule) > best_meetings:\n            best_schedule = schedule\n            best_meetings = len(schedule)\n\n# Output the best schedule found\nresult = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_203"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef format_time(dt):\n    return dt.strftime('%-H:%M')\n\ndef main():\n    # Travel times in minutes between locations\n    travel_times = {\n        'Fisherman\\'s Wharf': {\n            'Golden Gate Park': 25,\n            'Presidio': 17,\n            'Richmond District': 18\n        },\n        'Golden Gate Park': {\n            'Fisherman\\'s Wharf': 24,\n            'Presidio': 11,\n            'Richmond District': 7\n        },\n        'Presidio': {\n            'Fisherman\\'s Wharf': 19,\n            'Golden Gate Park': 12,\n            'Richmond District': 7\n        },\n        'Richmond District': {\n            'Fisherman\\'s Wharf': 18,\n            'Golden Gate Park': 9,\n            'Presidio': 7\n        }\n    }\n\n    # Constraints\n    current_location = 'Fisherman\\'s Wharf'\n    current_time = parse_time('9:00')\n    \n    friends = [\n        {\n            'name': 'Melissa',\n            'location': 'Golden Gate Park',\n            'available_start': parse_time('8:30'),\n            'available_end': parse_time('20:00'),\n            'min_duration': 15\n        },\n        {\n            'name': 'Nancy',\n            'location': 'Presidio',\n            'available_start': parse_time('19:45'),\n            'available_end': parse_time('22:00'),\n            'min_duration': 105\n        },\n        {\n            'name': 'Emily',\n            'location': 'Richmond District',\n            'available_start': parse_time('16:45'),\n            'available_end': parse_time('22:00'),\n            'min_duration': 120\n        }\n    ]\n\n    itinerary = []\n\n    # Try to meet Melissa first (earliest available)\n    melissa = friends[0]\n    travel_time = travel_times[current_location][melissa['location']]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    \n    # Check if we can meet Melissa\n    if arrival_time <= melissa['available_end']:\n        start_time = max(arrival_time, melissa['available_start'])\n        end_time = start_time + timedelta(minutes=melissa['min_duration'])\n        if end_time <= melissa['available_end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': melissa['location'],\n                'person': melissa['name'],\n                'start_time': format_time(start_time),\n                'end_time': format_time(end_time)\n            })\n            current_time = end_time\n            current_location = melissa['location']\n\n    # Now try to meet Emily (next earliest available)\n    emily = friends[2]\n    travel_time = travel_times[current_location][emily['location']]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    \n    if arrival_time <= emily['available_end']:\n        start_time = max(arrival_time, emily['available_start'])\n        end_time = start_time + timedelta(minutes=emily['min_duration'])\n        if end_time <= emily['available_end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': emily['location'],\n                'person': emily['name'],\n                'start_time': format_time(start_time),\n                'end_time': format_time(end_time)\n            })\n            current_time = end_time\n            current_location = emily['location']\n\n    # Finally try to meet Nancy (latest available)\n    nancy = friends[1]\n    travel_time = travel_times[current_location][nancy['location']]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    \n    if arrival_time <= nancy['available_end']:\n        start_time = max(arrival_time, nancy['available_start'])\n        end_time = start_time + timedelta(minutes=nancy['min_duration'])\n        if end_time <= nancy['available_end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': nancy['location'],\n                'person': nancy['name'],\n                'start_time': format_time(start_time),\n                'end_time': format_time(end_time)\n            })\n\n    # Output the itinerary\n    print(json.dumps({'itinerary': itinerary}, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_224"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "9:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "11:51",
                        "end_time": "13:06"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "13:24",
                        "end_time": "15:24"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "15:46",
                        "end_time": "16:31"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "9:15",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "11:04",
                        "end_time": "12:49"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "13:10",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "14:43",
                        "end_time": "16:43"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "17:05",
                        "end_time": "17:50"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "19:41",
                        "end_time": "20:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Marina District': {\n        'Embarcadero': 14,\n        'Bayview': 27,\n        'Union Square': 16,\n        'Chinatown': 15,\n        'Sunset District': 19,\n        'Golden Gate Park': 18,\n        'Financial District': 17,\n        'Haight-Ashbury': 16,\n        'Mission District': 20\n    },\n    'Embarcadero': {\n        'Marina District': 12,\n        'Bayview': 21,\n        'Union Square': 10,\n        'Chinatown': 7,\n        'Sunset District': 30,\n        'Golden Gate Park': 25,\n        'Financial District': 5,\n        'Haight-Ashbury': 21,\n        'Mission District': 20\n    },\n    'Bayview': {\n        'Marina District': 27,\n        'Embarcadero': 19,\n        'Union Square': 18,\n        'Chinatown': 19,\n        'Sunset District': 23,\n        'Golden Gate Park': 22,\n        'Financial District': 19,\n        'Haight-Ashbury': 19,\n        'Mission District': 13\n    },\n    'Union Square': {\n        'Marina District': 18,\n        'Embarcadero': 11,\n        'Bayview': 15,\n        'Chinatown': 7,\n        'Sunset District': 27,\n        'Golden Gate Park': 22,\n        'Financial District': 9,\n        'Haight-Ashbury': 18,\n        'Mission District': 14\n    },\n    'Chinatown': {\n        'Marina District': 12,\n        'Embarcadero': 5,\n        'Bayview': 20,\n        'Union Square': 7,\n        'Sunset District': 29,\n        'Golden Gate Park': 23,\n        'Financial District': 5,\n        'Haight-Ashbury': 19,\n        'Mission District': 17\n    },\n    'Sunset District': {\n        'Marina District': 21,\n        'Embarcadero': 30,\n        'Bayview': 22,\n        'Union Square': 30,\n        'Chinatown': 30,\n        'Golden Gate Park': 11,\n        'Financial District': 30,\n        'Haight-Ashbury': 15,\n        'Mission District': 25\n    },\n    'Golden Gate Park': {\n        'Marina District': 16,\n        'Embarcadero': 25,\n        'Bayview': 23,\n        'Union Square': 22,\n        'Chinatown': 23,\n        'Sunset District': 10,\n        'Financial District': 26,\n        'Haight-Ashbury': 7,\n        'Mission District': 17\n    },\n    'Financial District': {\n        'Marina District': 15,\n        'Embarcadero': 4,\n        'Bayview': 19,\n        'Union Square': 9,\n        'Chinatown': 5,\n        'Sunset District': 30,\n        'Golden Gate Park': 23,\n        'Haight-Ashbury': 19,\n        'Mission District': 17\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17,\n        'Embarcadero': 20,\n        'Bayview': 18,\n        'Union Square': 19,\n        'Chinatown': 19,\n        'Sunset District': 15,\n        'Golden Gate Park': 7,\n        'Financial District': 21,\n        'Mission District': 11\n    },\n    'Mission District': {\n        'Marina District': 19,\n        'Embarcadero': 19,\n        'Bayview': 14,\n        'Union Square': 15,\n        'Chinatown': 16,\n        'Sunset District': 24,\n        'Golden Gate Park': 17,\n        'Financial District': 15,\n        'Haight-Ashbury': 12\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'Joshua', 'location': 'Embarcadero', 'start': '9:45', 'end': '18:00', 'duration': 105},\n    {'name': 'Jeffrey', 'location': 'Bayview', 'start': '9:45', 'end': '20:15', 'duration': 75},\n    {'name': 'Charles', 'location': 'Union Square', 'start': '10:45', 'end': '20:15', 'duration': 120},\n    {'name': 'Joseph', 'location': 'Chinatown', 'start': '7:00', 'end': '15:30', 'duration': 60},\n    {'name': 'Elizabeth', 'location': 'Sunset District', 'start': '9:00', 'end': '9:45', 'duration': 45},\n    {'name': 'Matthew', 'location': 'Golden Gate Park', 'start': '11:00', 'end': '19:30', 'duration': 45},\n    {'name': 'Carol', 'location': 'Financial District', 'start': '10:45', 'end': '11:15', 'duration': 15},\n    {'name': 'Paul', 'location': 'Haight-Ashbury', 'start': '19:15', 'end': '20:30', 'duration': 15},\n    {'name': 'Rebecca', 'location': 'Mission District', 'start': '17:00', 'end': '21:45', 'duration': 45}\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef can_schedule(friend, start_time, end_time):\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    return start_time >= friend_start and end_time <= friend_end\n\ndef find_best_schedule():\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try all possible orders of meeting friends (limited to 5 for performance)\n    for friend_order in permutations(friends, min(5, len(friends))):\n        current_location = 'Marina District'\n        current_time = time_to_minutes('9:00')\n        schedule = []\n        meetings = 0\n        \n        for friend in friend_order:\n            # Calculate travel time\n            travel_time = travel_times[current_location][friend['location']]\n            arrival_time = current_time + travel_time\n            \n            # Calculate possible meeting window\n            meeting_start = max(arrival_time, time_to_minutes(friend['start']))\n            meeting_end = meeting_start + friend['duration']\n            \n            if can_schedule(friend, meeting_start, meeting_end):\n                # Add to schedule\n                schedule.append({\n                    'action': 'meet',\n                    'location': friend['location'],\n                    'person': friend['name'],\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                meetings += 1\n                current_location = friend['location']\n                current_time = meeting_end\n        \n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_schedule = schedule\n    \n    return best_schedule\n\ndef main():\n    schedule = find_best_schedule()\n    result = {'itinerary': schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_813"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "16:00",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "19:00",
                        "end_time": "21:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "16:00",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "19:00",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    travel_times = {\n        ('North Beach', 'Union Square'): 7,\n        ('North Beach', 'Russian Hill'): 4,\n        ('Union Square', 'North Beach'): 10,\n        ('Union Square', 'Russian Hill'): 13,\n        ('Russian Hill', 'North Beach'): 5,\n        ('Russian Hill', 'Union Square'): 11\n    }\n    \n    # Initial conditions\n    current_location = 'North Beach'\n    current_time = 9 * 60  # 9:00 AM in minutes\n    \n    # Friend constraints\n    emily_location = 'Union Square'\n    emily_start = 16 * 60  # 4:00 PM\n    emily_end = 17 * 60 + 15  # 5:15 PM\n    emily_min_duration = 45\n    \n    margaret_location = 'Russian Hill'\n    margaret_start = 19 * 60  # 7:00 PM\n    margaret_end = 21 * 60  # 9:00 PM\n    margaret_min_duration = 120\n    \n    itinerary = []\n    \n    # First, try to meet Emily\n    # Calculate travel time to Emily\n    travel_to_emily = travel_times[(current_location, emily_location)]\n    arrival_at_emily = current_time + travel_to_emily\n    \n    # Check if we can meet Emily\n    if arrival_at_emily <= emily_end - emily_min_duration:\n        meet_emily_start = max(arrival_at_emily, emily_start)\n        meet_emily_end = meet_emily_start + emily_min_duration\n        if meet_emily_end <= emily_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": emily_location,\n                \"person\": \"Emily\",\n                \"start_time\": f\"{meet_emily_start // 60}:{meet_emily_start % 60:02d}\",\n                \"end_time\": f\"{meet_emily_end // 60}:{meet_emily_end % 60:02d}\"\n            })\n            current_location = emily_location\n            current_time = meet_emily_end\n    \n    # Then try to meet Margaret\n    # Calculate travel time to Margaret\n    travel_to_margaret = travel_times[(current_location, margaret_location)]\n    arrival_at_margaret = current_time + travel_to_margaret\n    \n    # Check if we can meet Margaret\n    if arrival_at_margaret <= margaret_end - margaret_min_duration:\n        meet_margaret_start = max(arrival_at_margaret, margaret_start)\n        meet_margaret_end = meet_margaret_start + margaret_min_duration\n        if meet_margaret_end <= margaret_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": margaret_location,\n                \"person\": \"Margaret\",\n                \"start_time\": f\"{meet_margaret_start // 60}:{meet_margaret_start % 60:02d}\",\n                \"end_time\": f\"{meet_margaret_end // 60}:{meet_margaret_end % 60:02d}\"\n            })\n    \n    # If we couldn't meet both, try to meet just Margaret\n    if not itinerary:\n        # Reset to initial conditions\n        current_location = 'North Beach'\n        current_time = 9 * 60\n        \n        # Calculate travel time to Margaret\n        travel_to_margaret = travel_times[(current_location, margaret_location)]\n        arrival_at_margaret = current_time + travel_to_margaret\n        \n        # Check if we can meet Margaret\n        if arrival_at_margaret <= margaret_end - margaret_min_duration:\n            meet_margaret_start = max(arrival_at_margaret, margaret_start)\n            meet_margaret_end = meet_margaret_start + margaret_min_duration\n            if meet_margaret_end <= margaret_end:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": margaret_location,\n                    \"person\": \"Margaret\",\n                    \"start_time\": f\"{meet_margaret_start // 60}:{meet_margaret_start % 60:02d}\",\n                    \"end_time\": f\"{meet_margaret_end // 60}:{meet_margaret_end % 60:02d}\"\n                })\n    \n    return {\"itinerary\": itinerary}\n\nresult = calculate_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_170"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Laura",
                        "start_time": "9:14",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Charles",
                        "start_time": "11:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "13:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Mark",
                        "start_time": "14:00",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "15:51",
                        "end_time": "17:51"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Patricia",
                        "start_time": "18:10",
                        "end_time": "18:55"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Robert",
                        "start_time": "19:10",
                        "end_time": "19:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "19:52",
                        "end_time": "20:52"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Laura",
                        "start_time": "9:14",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Charles",
                        "start_time": "11:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "14:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Rebecca",
                        "start_time": "16:24",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:59",
                        "end_time": "18:29"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Patricia",
                        "start_time": "18:46",
                        "end_time": "19:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Robert",
                        "start_time": "19:46",
                        "end_time": "20:16"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "20:28",
                        "end_time": "21:28"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Initialize travel times as a dictionary\ntravel_times = {\n    'Marina District': {\n        'Bayview': 27,\n        'Sunset District': 19,\n        'Richmond District': 11,\n        'Nob Hill': 12,\n        'Chinatown': 15,\n        'Haight-Ashbury': 16,\n        'North Beach': 11,\n        'Russian Hill': 8,\n        'Embarcadero': 14\n    },\n    'Bayview': {\n        'Marina District': 27,\n        'Sunset District': 23,\n        'Richmond District': 25,\n        'Nob Hill': 20,\n        'Chinatown': 19,\n        'Haight-Ashbury': 19,\n        'North Beach': 22,\n        'Russian Hill': 23,\n        'Embarcadero': 19\n    },\n    'Sunset District': {\n        'Marina District': 21,\n        'Bayview': 22,\n        'Richmond District': 12,\n        'Nob Hill': 27,\n        'Chinatown': 30,\n        'Haight-Ashbury': 15,\n        'North Beach': 28,\n        'Russian Hill': 24,\n        'Embarcadero': 30\n    },\n    'Richmond District': {\n        'Marina District': 9,\n        'Bayview': 27,\n        'Sunset District': 11,\n        'Nob Hill': 17,\n        'Chinatown': 20,\n        'Haight-Ashbury': 10,\n        'North Beach': 17,\n        'Russian Hill': 13,\n        'Embarcadero': 19\n    },\n    'Nob Hill': {\n        'Marina District': 11,\n        'Bayview': 19,\n        'Sunset District': 24,\n        'Richmond District': 14,\n        'Chinatown': 6,\n        'Haight-Ashbury': 13,\n        'North Beach': 8,\n        'Russian Hill': 5,\n        'Embarcadero': 9\n    },\n    'Chinatown': {\n        'Marina District': 12,\n        'Bayview': 20,\n        'Sunset District': 29,\n        'Richmond District': 20,\n        'Nob Hill': 9,\n        'Haight-Ashbury': 19,\n        'North Beach': 3,\n        'Russian Hill': 7,\n        'Embarcadero': 5\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17,\n        'Bayview': 18,\n        'Sunset District': 15,\n        'Richmond District': 10,\n        'Nob Hill': 15,\n        'Chinatown': 19,\n        'North Beach': 19,\n        'Russian Hill': 17,\n        'Embarcadero': 20\n    },\n    'North Beach': {\n        'Marina District': 9,\n        'Bayview': 25,\n        'Sunset District': 27,\n        'Richmond District': 18,\n        'Nob Hill': 7,\n        'Chinatown': 6,\n        'Haight-Ashbury': 18,\n        'Russian Hill': 4,\n        'Embarcadero': 6\n    },\n    'Russian Hill': {\n        'Marina District': 7,\n        'Bayview': 23,\n        'Sunset District': 23,\n        'Richmond District': 14,\n        'Nob Hill': 5,\n        'Chinatown': 9,\n        'Haight-Ashbury': 17,\n        'North Beach': 5,\n        'Embarcadero': 8\n    },\n    'Embarcadero': {\n        'Marina District': 12,\n        'Bayview': 21,\n        'Sunset District': 30,\n        'Richmond District': 21,\n        'Nob Hill': 10,\n        'Chinatown': 7,\n        'Haight-Ashbury': 21,\n        'North Beach': 5,\n        'Russian Hill': 8\n    }\n}\n\n# Define friends and their constraints\nfriends = [\n    {'name': 'Charles', 'location': 'Bayview', 'start': '11:30', 'end': '14:30', 'duration': 45},\n    {'name': 'Robert', 'location': 'Sunset District', 'start': '16:45', 'end': '21:00', 'duration': 30},\n    {'name': 'Karen', 'location': 'Richmond District', 'start': '19:15', 'end': '21:30', 'duration': 60},\n    {'name': 'Rebecca', 'location': 'Nob Hill', 'start': '16:15', 'end': '20:30', 'duration': 90},\n    {'name': 'Margaret', 'location': 'Chinatown', 'start': '14:15', 'end': '19:45', 'duration': 120},\n    {'name': 'Patricia', 'location': 'Haight-Ashbury', 'start': '14:30', 'end': '20:30', 'duration': 45},\n    {'name': 'Mark', 'location': 'North Beach', 'start': '14:00', 'end': '18:30', 'duration': 105},\n    {'name': 'Melissa', 'location': 'Russian Hill', 'start': '13:00', 'end': '19:45', 'duration': 30},\n    {'name': 'Laura', 'location': 'Embarcadero', 'start': '7:45', 'end': '13:15', 'duration': 105}\n]\n\n# Initial position\ncurrent_location = 'Marina District'\ncurrent_time = time_to_minutes('9:00')\nitinerary = []\n\n# Sort friends by earliest possible meeting time\nfriends_sorted = sorted(friends, key=lambda x: time_to_minutes(x['start']))\n\n# Attempt to schedule meetings in order\nfor friend in friends_sorted:\n    start_window = time_to_minutes(friend['start'])\n    end_window = time_to_minutes(friend['end'])\n    duration = friend['duration']\n    \n    # Calculate travel time\n    travel_time = travel_times[current_location].get(friend['location'], float('inf'))\n    \n    # Earliest possible start time after travel\n    earliest_start = current_time + travel_time\n    if earliest_start > end_window:\n        continue  # Can't meet this friend\n    \n    # Latest possible start time to meet duration\n    latest_start = end_window - duration\n    if latest_start < start_window:\n        continue  # Can't meet for required duration\n    \n    # Determine actual start time\n    start_meeting = max(earliest_start, start_window)\n    end_meeting = start_meeting + duration\n    \n    if end_meeting > end_window:\n        continue  # Doesn't fit\n    \n    # Add to itinerary\n    itinerary.append({\n        'action': 'meet',\n        'location': friend['location'],\n        'person': friend['name'],\n        'start_time': minutes_to_time(start_meeting),\n        'end_time': minutes_to_time(end_meeting)\n    })\n    \n    # Update current location and time\n    current_location = friend['location']\n    current_time = end_meeting\n\n# Output the itinerary\noutput = {\n    'itinerary': itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_892"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "9:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "11:32",
                        "end_time": "12:17"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "10:15",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "14:48",
                        "end_time": "16:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Embarcadero': {\n        'Presidio': 20,\n        'Richmond District': 21,\n        'Fisherman\\'s Wharf': 6\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Presidio': 7,\n        'Fisherman\\'s Wharf': 18\n    },\n    'Fisherman\\'s Wharf': {\n        'Embarcadero': 8,\n        'Presidio': 17,\n        'Richmond District': 18\n    }\n}\n\nfriends = {\n    'Betty': {\n        'location': 'Presidio',\n        'available_start': '10:15',\n        'available_end': '21:30',\n        'duration': 45\n    },\n    'David': {\n        'location': 'Richmond District',\n        'available_start': '13:00',\n        'available_end': '20:15',\n        'duration': 90\n    },\n    'Barbara': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '9:15',\n        'available_end': '20:15',\n        'duration': 120\n    }\n}\n\ncurrent_location = 'Embarcadero'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        dest = friend['location']\n        travel_time = travel_times[loc][dest]\n        \n        # Travel to friend's location\n        arrival_time = time + travel_time\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        \n        # Determine meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end > available_end:\n            return None  # Doesn't fit\n        \n        schedule.append({\n            'action': 'meet',\n            'location': dest,\n            'person': friend_name,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        loc = dest\n        time = meeting_end\n    \n    return schedule\n\n# Try all possible orders to find the best schedule\nbest_schedule = None\nbest_meetings = 0\n\nfor order in permutations(friends.keys()):\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n    elif schedule and len(schedule) == best_meetings:\n        # Prefer schedules that end earlier\n        if not best_schedule or time_to_minutes(schedule[-1]['end_time']) < time_to_minutes(best_schedule[-1]['end_time']):\n            best_schedule = schedule\n\noutput = {\n    \"itinerary\": best_schedule if best_schedule else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_258"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "11:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Laura",
                        "start_time": "19:16",
                        "end_time": "20:31"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "20:42",
                        "end_time": "20:57"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "11:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mary",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "18:26",
                        "end_time": "19:41"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Presidio': {\n        'Pacific Heights': 11,\n        'Golden Gate Park': 12,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 11,\n        'Alamo Square': 19,\n        'Sunset District': 15,\n        'Nob Hill': 18,\n        'North Beach': 18\n    },\n    'Pacific Heights': {\n        'Presidio': 11,\n        'Golden Gate Park': 15,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Alamo Square': 10,\n        'Sunset District': 21,\n        'Nob Hill': 8,\n        'North Beach': 9\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Pacific Heights': 16,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Alamo Square': 9,\n        'Sunset District': 10,\n        'Nob Hill': 20,\n        'North Beach': 23\n    },\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 25,\n        'Marina District': 9,\n        'Alamo Square': 21,\n        'Sunset District': 27,\n        'Nob Hill': 11,\n        'North Beach': 6\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'Pacific Heights': 7,\n        'Golden Gate Park': 18,\n        'Fisherman\\'s Wharf': 10,\n        'Alamo Square': 15,\n        'Sunset District': 19,\n        'Nob Hill': 12,\n        'North Beach': 11\n    },\n    'Alamo Square': {\n        'Presidio': 17,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 15,\n        'Sunset District': 16,\n        'Nob Hill': 11,\n        'North Beach': 15\n    },\n    'Sunset District': {\n        'Presidio': 16,\n        'Pacific Heights': 21,\n        'Golden Gate Park': 11,\n        'Fisherman\\'s Wharf': 29,\n        'Marina District': 21,\n        'Alamo Square': 17,\n        'Nob Hill': 27,\n        'North Beach': 28\n    },\n    'Nob Hill': {\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Golden Gate Park': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Marina District': 11,\n        'Alamo Square': 11,\n        'Sunset District': 24,\n        'North Beach': 8\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Golden Gate Park': 22,\n        'Fisherman\\'s Wharf': 5,\n        'Marina District': 9,\n        'Alamo Square': 16,\n        'Sunset District': 27,\n        'Nob Hill': 7\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Kevin': {\n        'location': 'Pacific Heights',\n        'available_start': '7:15',\n        'available_end': '8:45',\n        'min_duration': 90,\n        'met': False\n    },\n    'Michelle': {\n        'location': 'Golden Gate Park',\n        'available_start': '20:00',\n        'available_end': '21:00',\n        'min_duration': 15,\n        'met': False\n    },\n    'Emily': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '16:15',\n        'available_end': '19:00',\n        'min_duration': 30,\n        'met': False\n    },\n    'Mark': {\n        'location': 'Marina District',\n        'available_start': '18:15',\n        'available_end': '19:45',\n        'min_duration': 75,\n        'met': False\n    },\n    'Barbara': {\n        'location': 'Alamo Square',\n        'available_start': '17:00',\n        'available_end': '19:00',\n        'min_duration': 120,\n        'met': False\n    },\n    'Laura': {\n        'location': 'Sunset District',\n        'available_start': '19:00',\n        'available_end': '21:15',\n        'min_duration': 75,\n        'met': False\n    },\n    'Mary': {\n        'location': 'Nob Hill',\n        'available_start': '17:30',\n        'available_end': '19:00',\n        'min_duration': 45,\n        'met': False\n    },\n    'Helen': {\n        'location': 'North Beach',\n        'available_start': '11:00',\n        'available_end': '12:15',\n        'min_duration': 45,\n        'met': False\n    }\n}\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef can_meet(friend, current_time, current_location):\n    loc = friend['location']\n    travel_time = travel_times[current_location][loc]\n    arrival_time = current_time + travel_time\n    \n    available_start = time_to_minutes(friend['available_start'])\n    available_end = time_to_minutes(friend['available_end'])\n    min_duration = friend['min_duration']\n    \n    if arrival_time > available_end:\n        return False\n    \n    start_time = max(arrival_time, available_start)\n    end_time = min(start_time + min_duration, available_end)\n    \n    if end_time - start_time >= min_duration:\n        return (start_time, end_time)\n    return False\n\ndef find_best_schedule():\n    current_time = time_to_minutes('9:00')\n    current_location = 'Presidio'\n    itinerary = []\n    remaining_friends = {name: data for name, data in friends.items() if not data['met']}\n    \n    # Try to meet Helen first (only available in morning)\n    if 'Helen' in remaining_friends:\n        helen = remaining_friends['Helen']\n        meeting = can_meet(helen, current_time, current_location)\n        if meeting:\n            start, end = meeting\n            itinerary.append({\n                'action': 'meet',\n                'location': helen['location'],\n                'person': 'Helen',\n                'start_time': minutes_to_time(start),\n                'end_time': minutes_to_time(end)\n            })\n            current_time = end\n            current_location = helen['location']\n            del remaining_friends['Helen']\n    \n    # Try to meet Barbara first in the afternoon (longest duration)\n    if 'Barbara' in remaining_friends:\n        barbara = remaining_friends['Barbara']\n        meeting = can_meet(barbara, current_time, current_location)\n        if meeting:\n            start, end = meeting\n            itinerary.append({\n                'action': 'meet',\n                'location': barbara['location'],\n                'person': 'Barbara',\n                'start_time': minutes_to_time(start),\n                'end_time': minutes_to_time(end)\n            })\n            current_time = end\n            current_location = barbara['location']\n            del remaining_friends['Barbara']\n    \n    # Try to meet Mary (short duration, same time as Barbara)\n    if 'Mary' in remaining_friends:\n        mary = remaining_friends['Mary']\n        meeting = can_meet(mary, current_time, current_location)\n        if meeting:\n            start, end = meeting\n            itinerary.append({\n                'action': 'meet',\n                'location': mary['location'],\n                'person': 'Mary',\n                'start_time': minutes_to_time(start),\n                'end_time': minutes_to_time(end)\n            })\n            current_time = end\n            current_location = mary['location']\n            del remaining_friends['Mary']\n    \n    # Try to meet Emily\n    if 'Emily' in remaining_friends:\n        emily = remaining_friends['Emily']\n        meeting = can_meet(emily, current_time, current_location)\n        if meeting:\n            start, end = meeting\n            itinerary.append({\n                'action': 'meet',\n                'location': emily['location'],\n                'person': 'Emily',\n                'start_time': minutes_to_time(start),\n                'end_time': minutes_to_time(end)\n            })\n            current_time = end\n            current_location = emily['location']\n            del remaining_friends['Emily']\n    \n    # Try to meet Mark\n    if 'Mark' in remaining_friends:\n        mark = remaining_friends['Mark']\n        meeting = can_meet(mark, current_time, current_location)\n        if meeting:\n            start, end = meeting\n            itinerary.append({\n                'action': 'meet',\n                'location': mark['location'],\n                'person': 'Mark',\n                'start_time': minutes_to_time(start),\n                'end_time': minutes_to_time(end)\n            })\n            current_time = end\n            current_location = mark['location']\n            del remaining_friends['Mark']\n    \n    # Try to meet Laura\n    if 'Laura' in remaining_friends:\n        laura = remaining_friends['Laura']\n        meeting = can_meet(laura, current_time, current_location)\n        if meeting:\n            start, end = meeting\n            itinerary.append({\n                'action': 'meet',\n                'location': laura['location'],\n                'person': 'Laura',\n                'start_time': minutes_to_time(start),\n                'end_time': minutes_to_time(end)\n            })\n            current_time = end\n            current_location = laura['location']\n            del remaining_friends['Laura']\n    \n    # Try to meet Michelle last\n    if 'Michelle' in remaining_friends:\n        michelle = remaining_friends['Michelle']\n        meeting = can_meet(michelle, current_time, current_location)\n        if meeting:\n            start, end = meeting\n            itinerary.append({\n                'action': 'meet',\n                'location': michelle['location'],\n                'person': 'Michelle',\n                'start_time': minutes_to_time(start),\n                'end_time': minutes_to_time(end)\n            })\n            current_time = end\n            current_location = michelle['location']\n            del remaining_friends['Michelle']\n    \n    return {'itinerary': itinerary}\n\n# Calculate and output the schedule\nschedule = find_best_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_700"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:25",
                        "end_time": "9:55"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:06",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:25",
                        "end_time": "9:55"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:06",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef format_time(dt):\n    return dt.strftime('%-H:%M')\n\ndef calculate_schedule():\n    # Input parameters\n    current_location = \"Bayview\"\n    current_time = parse_time(\"9:00\")\n    \n    # Friends' availability\n    friends = [\n        {\n            \"name\": \"Betty\",\n            \"location\": \"Embarcadero\",\n            \"start\": parse_time(\"19:45\"),\n            \"end\": parse_time(\"21:45\"),\n            \"duration\": timedelta(minutes=15)\n        },\n        {\n            \"name\": \"Karen\",\n            \"location\": \"Fisherman's Wharf\",\n            \"start\": parse_time(\"8:45\"),\n            \"end\": parse_time(\"15:00\"),\n            \"duration\": timedelta(minutes=30)\n        },\n        {\n            \"name\": \"Anthony\",\n            \"location\": \"Financial District\",\n            \"start\": parse_time(\"9:15\"),\n            \"end\": parse_time(\"21:30\"),\n            \"duration\": timedelta(minutes=105)\n        }\n    ]\n    \n    # Travel times matrix\n    travel_times = {\n        \"Bayview\": {\n            \"Embarcadero\": timedelta(minutes=19),\n            \"Fisherman's Wharf\": timedelta(minutes=25),\n            \"Financial District\": timedelta(minutes=19)\n        },\n        \"Embarcadero\": {\n            \"Bayview\": timedelta(minutes=21),\n            \"Fisherman's Wharf\": timedelta(minutes=6),\n            \"Financial District\": timedelta(minutes=5)\n        },\n        \"Fisherman's Wharf\": {\n            \"Bayview\": timedelta(minutes=26),\n            \"Embarcadero\": timedelta(minutes=8),\n            \"Financial District\": timedelta(minutes=11)\n        },\n        \"Financial District\": {\n            \"Bayview\": timedelta(minutes=19),\n            \"Embarcadero\": timedelta(minutes=4),\n            \"Fisherman's Wharf\": timedelta(minutes=10)\n        }\n    }\n    \n    itinerary = []\n    \n    # Helper function to find best meeting time\n    def find_best_meeting(current_loc, current_t, friend):\n        location = friend[\"location\"]\n        travel_time = travel_times[current_loc][location]\n        arrival_time = current_t + travel_time\n        \n        # Determine meeting window\n        meeting_start = max(arrival_time, friend[\"start\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        \n        if meeting_end <= friend[\"end\"]:\n            return {\n                \"start\": meeting_start,\n                \"end\": meeting_end,\n                \"travel_time\": travel_time\n            }\n        return None\n    \n    # Try different orders to maximize meetings\n    meeting_orders = [\n        [\"Karen\", \"Anthony\", \"Betty\"],\n        [\"Anthony\", \"Karen\", \"Betty\"],\n        [\"Karen\", \"Betty\", \"Anthony\"],\n        [\"Anthony\", \"Betty\", \"Karen\"],\n        [\"Betty\", \"Karen\", \"Anthony\"],\n        [\"Betty\", \"Anthony\", \"Karen\"]\n    ]\n    \n    best_itinerary = []\n    max_meetings = 0\n    \n    for order in meeting_orders:\n        temp_itinerary = []\n        temp_location = current_location\n        temp_time = current_time\n        meetings = 0\n        \n        for name in order:\n            friend = next(f for f in friends if f[\"name\"] == name)\n            meeting = find_best_meeting(temp_location, temp_time, friend)\n            if meeting:\n                temp_itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": friend[\"location\"],\n                    \"person\": friend[\"name\"],\n                    \"start_time\": format_time(meeting[\"start\"]),\n                    \"end_time\": format_time(meeting[\"end\"])\n                })\n                temp_location = friend[\"location\"]\n                temp_time = meeting[\"end\"]\n                meetings += 1\n        \n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_itinerary = temp_itinerary\n        elif meetings == max_meetings and meetings > 0:\n            # Prefer longer total meeting time\n            current_total = sum((parse_time(i[\"end_time\"]) - parse_time(i[\"start_time\"])).total_seconds() for i in best_itinerary)\n            new_total = sum((parse_time(i[\"end_time\"]) - parse_time(i[\"start_time\"])).total_seconds() for i in temp_itinerary)\n            if new_total > current_total:\n                best_itinerary = temp_itinerary\n    \n    return {\"itinerary\": best_itinerary}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_263"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "11:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "13:26",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "18:15",
                        "end_time": "19:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "11:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "13:26",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "18:15",
                        "end_time": "19:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times in minutes (from -> to)\ntravel_times = {\n    'Richmond District': {\n        'Sunset District': 11,\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Golden Gate Park': 9\n    },\n    'Sunset District': {\n        'Richmond District': 12,\n        'Haight-Ashbury': 15,\n        'Mission District': 24,\n        'Golden Gate Park': 11\n    },\n    'Haight-Ashbury': {\n        'Richmond District': 10,\n        'Sunset District': 15,\n        'Mission District': 11,\n        'Golden Gate Park': 7\n    },\n    'Mission District': {\n        'Richmond District': 20,\n        'Sunset District': 24,\n        'Haight-Ashbury': 12,\n        'Golden Gate Park': 17\n    },\n    'Golden Gate Park': {\n        'Richmond District': 7,\n        'Sunset District': 10,\n        'Haight-Ashbury': 7,\n        'Mission District': 17\n    }\n}\n\n# Constraints\nfriends = [\n    {\n        'name': 'Sarah',\n        'location': 'Sunset District',\n        'available_start': '10:45',\n        'available_end': '19:00',\n        'min_duration': 30\n    },\n    {\n        'name': 'Richard',\n        'location': 'Haight-Ashbury',\n        'available_start': '11:45',\n        'available_end': '15:45',\n        'min_duration': 90\n    },\n    {\n        'name': 'Elizabeth',\n        'location': 'Mission District',\n        'available_start': '11:00',\n        'available_end': '17:15',\n        'min_duration': 120\n    },\n    {\n        'name': 'Michelle',\n        'location': 'Golden Gate Park',\n        'available_start': '18:15',\n        'available_end': '20:45',\n        'min_duration': 90\n    }\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00')\n    current_location = 'Richmond District'\n    schedule = []\n    \n    for friend_idx in order:\n        friend = friends[friend_idx]\n        destination = friend['location']\n        travel_time = travel_times[current_location][destination]\n        \n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        # Calculate meeting start time\n        meeting_start = max(arrival_time, available_start)\n        if meeting_start + min_duration > available_end:\n            return None  # Not enough time to meet\n        \n        meeting_end = meeting_start + min_duration\n        schedule.append({\n            'action': 'meet',\n            'location': destination,\n            'person': friend['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = destination\n    \n    # Check if we can meet Michelle (last constraint)\n    michelle = friends[3]\n    if current_location != michelle['location']:\n        travel_time = travel_times[current_location][michelle['location']]\n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(michelle['available_start'])\n        available_end = time_to_minutes(michelle['available_end'])\n        min_duration = michelle['min_duration']\n        \n        meeting_start = max(arrival_time, available_start)\n        if meeting_start + min_duration > available_end:\n            return None\n        \n        meeting_end = meeting_start + min_duration\n        schedule.append({\n            'action': 'meet',\n            'location': michelle['location'],\n            'person': michelle['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n    \n    return schedule\n\n# Generate all possible orders of meeting Sarah, Richard, Elizabeth (Michelle is last)\npossible_orders = permutations([0, 1, 2])\nbest_schedule = None\nmax_meetings = 0\n\nfor order in possible_orders:\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > max_meetings:\n        best_schedule = schedule\n        max_meetings = len(schedule)\n\nif not best_schedule:\n    # Try meeting just some friends\n    for num_meetings in range(3, 0, -1):\n        for order in permutations([0, 1, 2], num_meetings):\n            schedule = calculate_schedule(order)\n            if schedule:\n                best_schedule = schedule\n                break\n        if best_schedule:\n            break\n\noutput = {\"itinerary\": best_schedule} if best_schedule else {\"itinerary\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_312"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Ronald",
                        "start_time": "10:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "13:30",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Joshua",
                        "start_time": "15:47",
                        "end_time": "17:17"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Margaret",
                        "start_time": "17:32",
                        "end_time": "18:32"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\nstart_location = \"Pacific Heights\"\nstart_time = \"9:00\"\n\nfriends = [\n    {\"name\": \"Ronald\", \"location\": \"Nob Hill\", \"available_start\": \"10:00\", \"available_end\": \"17:00\", \"min_duration\": 105},\n    {\"name\": \"Sarah\", \"location\": \"Russian Hill\", \"available_start\": \"7:15\", \"available_end\": \"9:30\", \"min_duration\": 45},\n    {\"name\": \"Helen\", \"location\": \"The Castro\", \"available_start\": \"13:30\", \"available_end\": \"17:00\", \"min_duration\": 120},\n    {\"name\": \"Joshua\", \"location\": \"Sunset District\", \"available_start\": \"14:15\", \"available_end\": \"19:30\", \"min_duration\": 90},\n    {\"name\": \"Margaret\", \"location\": \"Haight-Ashbury\", \"available_start\": \"10:15\", \"available_end\": \"22:00\", \"min_duration\": 60}\n]\n\n# Travel times in minutes (from -> to)\ntravel_times = {\n    \"Pacific Heights\": {\n        \"Nob Hill\": 8,\n        \"Russian Hill\": 7,\n        \"The Castro\": 16,\n        \"Sunset District\": 21,\n        \"Haight-Ashbury\": 11\n    },\n    \"Nob Hill\": {\n        \"Pacific Heights\": 8,\n        \"Russian Hill\": 5,\n        \"The Castro\": 17,\n        \"Sunset District\": 25,\n        \"Haight-Ashbury\": 13\n    },\n    \"Russian Hill\": {\n        \"Pacific Heights\": 7,\n        \"Nob Hill\": 5,\n        \"The Castro\": 21,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 17\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16,\n        \"Nob Hill\": 16,\n        \"Russian Hill\": 18,\n        \"Sunset District\": 17,\n        \"Haight-Ashbury\": 6\n    },\n    \"Sunset District\": {\n        \"Pacific Heights\": 21,\n        \"Nob Hill\": 27,\n        \"Russian Hill\": 24,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 15\n    },\n    \"Haight-Ashbury\": {\n        \"Pacific Heights\": 12,\n        \"Nob Hill\": 15,\n        \"Russian Hill\": 17,\n        \"The Castro\": 6,\n        \"Sunset District\": 15\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(start_time)\n    current_location = start_location\n    schedule = []\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        available_start = time_to_minutes(friend[\"available_start\"])\n        available_end = time_to_minutes(friend[\"available_end\"])\n        \n        # Adjust meeting time to fit within availability\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + friend[\"min_duration\"]\n        \n        if meeting_end > available_end:\n            return None  # Can't meet this friend with required duration\n        \n        # Add to schedule\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        met_friends.add(friend[\"name\"])\n        current_time = meeting_end\n        current_location = friend[\"location\"]\n    \n    return schedule if len(met_friends) == len(order) else None\n\n# Generate all possible meeting orders and find the best one\nbest_schedule = None\nmax_meetings = 0\n\n# Try all possible permutations of friends (up to 5! = 120 possibilities)\nfor friend_order in permutations([f[\"name\"] for f in friends]):\n    schedule = calculate_schedule(friend_order)\n    if schedule and len(schedule) > max_meetings:\n        best_schedule = schedule\n        max_meetings = len(schedule)\n    elif schedule and len(schedule) == max_meetings:\n        # Prefer schedules that end earlier\n        if not best_schedule or time_to_minutes(schedule[-1][\"end_time\"]) < time_to_minutes(best_schedule[-1][\"end_time\"]):\n            best_schedule = schedule\n\n# Output the result\nresult = {\"itinerary\": best_schedule} if best_schedule else {\"itinerary\": []}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_488"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "16:45",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "16:45",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Bayview': {\n        'Embarcadero': 19,\n        'Richmond District': 25,\n        'Fisherman\\'s Wharf': 25\n    },\n    'Embarcadero': {\n        'Bayview': 21,\n        'Richmond District': 21,\n        'Fisherman\\'s Wharf': 6\n    },\n    'Richmond District': {\n        'Bayview': 26,\n        'Embarcadero': 19,\n        'Fisherman\\'s Wharf': 18\n    },\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'Embarcadero': 8,\n        'Richmond District': 18\n    }\n}\n\nfriends = {\n    'Jessica': {\n        'location': 'Embarcadero',\n        'start': time_to_minutes('16:45'),\n        'end': time_to_minutes('19:00'),\n        'duration': 30\n    },\n    'Sandra': {\n        'location': 'Richmond District',\n        'start': time_to_minutes('18:30'),\n        'end': time_to_minutes('21:45'),\n        'duration': 120\n    },\n    'Jason': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': time_to_minutes('16:00'),\n        'end': time_to_minutes('16:45'),\n        'duration': 30\n    }\n}\n\ncurrent_location = 'Bayview'\ncurrent_time = time_to_minutes('9:00')\n\n# Generate all possible meeting orders\nmeeting_orders = permutations(friends.keys())\n\nbest_schedule = None\nmax_meetings = 0\n\nfor order in meeting_orders:\n    schedule = []\n    temp_location = current_location\n    temp_time = current_time\n    meetings = 0\n    \n    for person in order:\n        friend = friends[person]\n        # Travel to friend's location\n        travel_time = travel_times[temp_location][friend['location']]\n        arrival_time = temp_time + travel_time\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, friend['start'])\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end > friend['end']:\n            break  # Can't meet this friend\n        \n        # Add to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': person,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        meetings += 1\n        temp_location = friend['location']\n        temp_time = meeting_end\n    \n    if meetings > max_meetings or (meetings == max_meetings and (best_schedule is None or len(schedule) > len(best_schedule))):\n        max_meetings = meetings\n        best_schedule = schedule\n\n# Output the best schedule\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_215"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "9:13",
                        "end_time": "10:28"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Laura",
                        "start_time": "11:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Deborah",
                        "start_time": "13:05",
                        "end_time": "14:50"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "15:03",
                        "end_time": "17:03"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "17:08",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Elizabeth",
                        "start_time": "18:44",
                        "end_time": "19:59"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Carol",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "9:13",
                        "end_time": "10:28"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Laura",
                        "start_time": "11:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Deborah",
                        "start_time": "13:05",
                        "end_time": "14:50"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "15:03",
                        "end_time": "17:03"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "17:08",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Elizabeth",
                        "start_time": "18:44",
                        "end_time": "19:59"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Carol",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\nlocations = [\n    \"Golden Gate Park\", \"Haight-Ashbury\", \"Fisherman's Wharf\", \"The Castro\",\n    \"Chinatown\", \"Alamo Square\", \"North Beach\", \"Russian Hill\"\n]\n\n# Travel times matrix (minutes)\ntravel_times = {\n    \"Golden Gate Park\": {\n        \"Golden Gate Park\": 0,\n        \"Haight-Ashbury\": 7,\n        \"Fisherman's Wharf\": 24,\n        \"The Castro\": 13,\n        \"Chinatown\": 23,\n        \"Alamo Square\": 10,\n        \"North Beach\": 24,\n        \"Russian Hill\": 19\n    },\n    \"Haight-Ashbury\": {\n        \"Golden Gate Park\": 7,\n        \"Haight-Ashbury\": 0,\n        \"Fisherman's Wharf\": 23,\n        \"The Castro\": 6,\n        \"Chinatown\": 19,\n        \"Alamo Square\": 5,\n        \"North Beach\": 19,\n        \"Russian Hill\": 17\n    },\n    \"Fisherman's Wharf\": {\n        \"Golden Gate Park\": 25,\n        \"Haight-Ashbury\": 22,\n        \"Fisherman's Wharf\": 0,\n        \"The Castro\": 26,\n        \"Chinatown\": 12,\n        \"Alamo Square\": 20,\n        \"North Beach\": 6,\n        \"Russian Hill\": 7\n    },\n    \"The Castro\": {\n        \"Golden Gate Park\": 11,\n        \"Haight-Ashbury\": 6,\n        \"Fisherman's Wharf\": 24,\n        \"The Castro\": 0,\n        \"Chinatown\": 20,\n        \"Alamo Square\": 8,\n        \"North Beach\": 20,\n        \"Russian Hill\": 18\n    },\n    \"Chinatown\": {\n        \"Golden Gate Park\": 23,\n        \"Haight-Ashbury\": 19,\n        \"Fisherman's Wharf\": 8,\n        \"The Castro\": 22,\n        \"Chinatown\": 0,\n        \"Alamo Square\": 17,\n        \"North Beach\": 3,\n        \"Russian Hill\": 7\n    },\n    \"Alamo Square\": {\n        \"Golden Gate Park\": 9,\n        \"Haight-Ashbury\": 5,\n        \"Fisherman's Wharf\": 19,\n        \"The Castro\": 8,\n        \"Chinatown\": 16,\n        \"Alamo Square\": 0,\n        \"North Beach\": 15,\n        \"Russian Hill\": 13\n    },\n    \"North Beach\": {\n        \"Golden Gate Park\": 22,\n        \"Haight-Ashbury\": 18,\n        \"Fisherman's Wharf\": 5,\n        \"The Castro\": 22,\n        \"Chinatown\": 6,\n        \"Alamo Square\": 16,\n        \"North Beach\": 0,\n        \"Russian Hill\": 4\n    },\n    \"Russian Hill\": {\n        \"Golden Gate Park\": 21,\n        \"Haight-Ashbury\": 17,\n        \"Fisherman's Wharf\": 7,\n        \"The Castro\": 21,\n        \"Chinatown\": 9,\n        \"Alamo Square\": 15,\n        \"North Beach\": 5,\n        \"Russian Hill\": 0\n    }\n}\n\nfriends = [\n    {\n        \"name\": \"Carol\",\n        \"location\": \"Haight-Ashbury\",\n        \"available_start\": \"21:30\",\n        \"available_end\": \"22:30\",\n        \"duration\": 60\n    },\n    {\n        \"name\": \"Laura\",\n        \"location\": \"Fisherman's Wharf\",\n        \"available_start\": \"11:45\",\n        \"available_end\": \"21:30\",\n        \"duration\": 60\n    },\n    {\n        \"name\": \"Karen\",\n        \"location\": \"The Castro\",\n        \"available_start\": \"7:15\",\n        \"available_end\": \"14:00\",\n        \"duration\": 75\n    },\n    {\n        \"name\": \"Elizabeth\",\n        \"location\": \"Chinatown\",\n        \"available_start\": \"12:15\",\n        \"available_end\": \"21:30\",\n        \"duration\": 75\n    },\n    {\n        \"name\": \"Deborah\",\n        \"location\": \"Alamo Square\",\n        \"available_start\": \"12:00\",\n        \"available_end\": \"15:00\",\n        \"duration\": 105\n    },\n    {\n        \"name\": \"Jason\",\n        \"location\": \"North Beach\",\n        \"available_start\": \"14:45\",\n        \"available_end\": \"19:00\",\n        \"duration\": 90\n    },\n    {\n        \"name\": \"Steven\",\n        \"location\": \"Russian Hill\",\n        \"available_start\": \"14:45\",\n        \"available_end\": \"18:30\",\n        \"duration\": 120\n    }\n]\n\ndef get_available_time_slots(friend, current_time):\n    start = max(time_to_minutes(friend[\"available_start\"]), current_time)\n    end = time_to_minutes(friend[\"available_end\"])\n    duration = friend[\"duration\"]\n    \n    if start + duration > end:\n        return None\n    \n    return (start, start + duration)\n\ndef calculate_schedule(start_location, start_time, friends_list):\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try all possible orders of meeting friends\n    for order in permutations(friends_list):\n        current_location = start_location\n        current_time = time_to_minutes(start_time)\n        schedule = []\n        meetings = 0\n        \n        for friend in order:\n            travel_time = travel_times[current_location][friend[\"location\"]]\n            arrival_time = current_time + travel_time\n            \n            time_slot = get_available_time_slots(friend, arrival_time)\n            if time_slot:\n                start, end = time_slot\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": friend[\"location\"],\n                    \"person\": friend[\"name\"],\n                    \"start_time\": minutes_to_time(start),\n                    \"end_time\": minutes_to_time(end)\n                })\n                current_time = end\n                current_location = friend[\"location\"]\n                meetings += 1\n        \n        if meetings > max_meetings or (meetings == max_meetings and len(schedule) > len(best_schedule)):\n            max_meetings = meetings\n            best_schedule = schedule\n    \n    return best_schedule\n\n# Calculate optimal schedule\nstart_location = \"Golden Gate Park\"\nstart_time = \"9:00\"\noptimal_schedule = calculate_schedule(start_location, start_time, friends)\n\n# Prepare output\noutput = {\n    \"itinerary\": optimal_schedule\n}\n\n# Print JSON output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_624"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "16:11",
                        "end_time": "16:26"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "19:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "11:19",
                        "end_time": "11:34"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "12:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "John",
                        "start_time": "14:07",
                        "end_time": "14:52"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "19:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Embarcadero': {\n        'Fisherman\\'s Wharf': 6,\n        'Financial District': 5,\n        'Russian Hill': 8,\n        'Marina District': 12,\n        'Richmond District': 21,\n        'Pacific Heights': 11,\n        'Haight-Ashbury': 21,\n        'Presidio': 20,\n        'Nob Hill': 10,\n        'The Castro': 25\n    },\n    'Fisherman\\'s Wharf': {\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Russian Hill': 7,\n        'Marina District': 9,\n        'Richmond District': 18,\n        'Pacific Heights': 12,\n        'Haight-Ashbury': 22,\n        'Presidio': 17,\n        'Nob Hill': 11,\n        'The Castro': 27\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Fisherman\\'s Wharf': 10,\n        'Russian Hill': 11,\n        'Marina District': 15,\n        'Richmond District': 21,\n        'Pacific Heights': 13,\n        'Haight-Ashbury': 19,\n        'Presidio': 22,\n        'Nob Hill': 8,\n        'The Castro': 20\n    },\n    'Russian Hill': {\n        'Embarcadero': 8,\n        'Fisherman\\'s Wharf': 7,\n        'Financial District': 11,\n        'Marina District': 7,\n        'Richmond District': 14,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 17,\n        'Presidio': 14,\n        'Nob Hill': 5,\n        'The Castro': 21\n    },\n    'Marina District': {\n        'Embarcadero': 14,\n        'Fisherman\\'s Wharf': 10,\n        'Financial District': 17,\n        'Russian Hill': 8,\n        'Richmond District': 11,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 16,\n        'Presidio': 10,\n        'Nob Hill': 12,\n        'The Castro': 22\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Fisherman\\'s Wharf': 18,\n        'Financial District': 22,\n        'Russian Hill': 13,\n        'Marina District': 9,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 10,\n        'Presidio': 7,\n        'Nob Hill': 17,\n        'The Castro': 16\n    },\n    'Pacific Heights': {\n        'Embarcadero': 10,\n        'Fisherman\\'s Wharf': 13,\n        'Financial District': 13,\n        'Russian Hill': 7,\n        'Marina District': 6,\n        'Richmond District': 12,\n        'Haight-Ashbury': 11,\n        'Presidio': 11,\n        'Nob Hill': 8,\n        'The Castro': 16\n    },\n    'Haight-Ashbury': {\n        'Embarcadero': 20,\n        'Fisherman\\'s Wharf': 23,\n        'Financial District': 21,\n        'Russian Hill': 17,\n        'Marina District': 17,\n        'Richmond District': 10,\n        'Pacific Heights': 12,\n        'Presidio': 15,\n        'Nob Hill': 15,\n        'The Castro': 6\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Fisherman\\'s Wharf': 19,\n        'Financial District': 23,\n        'Russian Hill': 14,\n        'Marina District': 11,\n        'Richmond District': 7,\n        'Pacific Heights': 11,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'The Castro': 21\n    },\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'Fisherman\\'s Wharf': 10,\n        'Financial District': 9,\n        'Russian Hill': 5,\n        'Marina District': 11,\n        'Richmond District': 14,\n        'Pacific Heights': 8,\n        'Haight-Ashbury': 13,\n        'Presidio': 17,\n        'The Castro': 16\n    },\n    'The Castro': {\n        'Embarcadero': 22,\n        'Fisherman\\'s Wharf': 24,\n        'Financial District': 21,\n        'Russian Hill': 18,\n        'Marina District': 21,\n        'Richmond District': 16,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 6,\n        'Presidio': 20,\n        'Nob Hill': 16\n    }\n}\n\n# Friend availability\nfriends = {\n    'Stephanie': {'location': 'Fisherman\\'s Wharf', 'start': 15.5, 'end': 22.0, 'duration': 0.5},\n    'Lisa': {'location': 'Financial District', 'start': 10.75, 'end': 17.25, 'duration': 0.25},\n    'Melissa': {'location': 'Russian Hill', 'start': 17.0, 'end': 21.75, 'duration': 2.0},\n    'Betty': {'location': 'Marina District', 'start': 10.75, 'end': 14.25, 'duration': 1.0},\n    'Sarah': {'location': 'Richmond District', 'start': 16.25, 'end': 19.5, 'duration': 1.75},\n    'Daniel': {'location': 'Pacific Heights', 'start': 18.5, 'end': 21.75, 'duration': 1.0},\n    'Joshua': {'location': 'Haight-Ashbury', 'start': 9.0, 'end': 15.5, 'duration': 0.25},\n    'Joseph': {'location': 'Presidio', 'start': 7.0, 'end': 13.0, 'duration': 0.75},\n    'Andrew': {'location': 'Nob Hill', 'start': 19.75, 'end': 22.0, 'duration': 1.75},\n    'John': {'location': 'The Castro', 'start': 13.25, 'end': 19.75, 'duration': 0.75}\n}\n\ndef time_to_float(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours + minutes / 60.0\n\ndef float_to_time(time_float):\n    hours = int(time_float)\n    minutes = int((time_float - hours) * 60)\n    return f\"{hours}:{minutes:02d}\"\n\ndef calculate_schedule(order):\n    current_time = 9.0  # Start at Embarcadero at 9:00\n    current_location = 'Embarcadero'\n    schedule = []\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        location = friend['location']\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location][location] / 60.0\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        start_window = friend['start']\n        end_window = friend['end']\n        \n        # Determine meeting start time\n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end > end_window:\n            return None  # Can't meet this friend\n        \n        # Add to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend_name,\n            'start_time': float_to_time(meeting_start),\n            'end_time': float_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = location\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    return len(schedule)\n\n# Generate possible orders and find the best one\nbest_schedule = []\nbest_score = 0\n\n# We'll try permutations of a subset since full permutations would be too slow\nfor order in permutations(friends.keys(), 5):\n    schedule = calculate_schedule(order)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n    if best_score == len(friends):\n        break\n\n# If we didn't find a full schedule, try with fewer friends\nif best_score < 5:\n    for order in permutations(friends.keys(), 4):\n        schedule = calculate_schedule(order)\n        score = evaluate_schedule(schedule)\n        if score > best_score:\n            best_score = score\n            best_schedule = schedule\n        if best_score == 4:\n            break\n\n# Output the best schedule found\nresult = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_978"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "11:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Sarah",
                        "start_time": "12:04",
                        "end_time": "13:34"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "13:49",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:52",
                        "end_time": "16:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Thomas",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "20:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    \"Nob Hill\": {\n        \"Embarcadero\": 9,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 13,\n        \"Union Square\": 7,\n        \"North Beach\": 8,\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Golden Gate Park\": 17,\n        \"Marina District\": 11,\n        \"Russian Hill\": 5\n    },\n    \"Embarcadero\": {\n        \"Nob Hill\": 10,\n        \"The Castro\": 25,\n        \"Haight-Ashbury\": 21,\n        \"Union Square\": 10,\n        \"North Beach\": 5,\n        \"Pacific Heights\": 11,\n        \"Chinatown\": 7,\n        \"Golden Gate Park\": 25,\n        \"Marina District\": 12,\n        \"Russian Hill\": 8\n    },\n    \"The Castro\": {\n        \"Nob Hill\": 16,\n        \"Embarcadero\": 22,\n        \"Haight-Ashbury\": 6,\n        \"Union Square\": 19,\n        \"North Beach\": 20,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 22,\n        \"Golden Gate Park\": 11,\n        \"Marina District\": 21,\n        \"Russian Hill\": 18\n    },\n    \"Haight-Ashbury\": {\n        \"Nob Hill\": 15,\n        \"Embarcadero\": 20,\n        \"The Castro\": 6,\n        \"Union Square\": 19,\n        \"North Beach\": 19,\n        \"Pacific Heights\": 12,\n        \"Chinatown\": 19,\n        \"Golden Gate Park\": 7,\n        \"Marina District\": 17,\n        \"Russian Hill\": 17\n    },\n    \"Union Square\": {\n        \"Nob Hill\": 9,\n        \"Embarcadero\": 11,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 18,\n        \"North Beach\": 10,\n        \"Pacific Heights\": 15,\n        \"Chinatown\": 7,\n        \"Golden Gate Park\": 22,\n        \"Marina District\": 18,\n        \"Russian Hill\": 13\n    },\n    \"North Beach\": {\n        \"Nob Hill\": 7,\n        \"Embarcadero\": 6,\n        \"The Castro\": 23,\n        \"Haight-Ashbury\": 18,\n        \"Union Square\": 7,\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Golden Gate Park\": 22,\n        \"Marina District\": 9,\n        \"Russian Hill\": 4\n    },\n    \"Pacific Heights\": {\n        \"Nob Hill\": 8,\n        \"Embarcadero\": 10,\n        \"The Castro\": 16,\n        \"Haight-Ashbury\": 11,\n        \"Union Square\": 12,\n        \"North Beach\": 9,\n        \"Chinatown\": 11,\n        \"Golden Gate Park\": 15,\n        \"Marina District\": 6,\n        \"Russian Hill\": 7\n    },\n    \"Chinatown\": {\n        \"Nob Hill\": 9,\n        \"Embarcadero\": 5,\n        \"The Castro\": 22,\n        \"Haight-Ashbury\": 19,\n        \"Union Square\": 7,\n        \"North Beach\": 3,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 23,\n        \"Marina District\": 12,\n        \"Russian Hill\": 7\n    },\n    \"Golden Gate Park\": {\n        \"Nob Hill\": 20,\n        \"Embarcadero\": 25,\n        \"The Castro\": 13,\n        \"Haight-Ashbury\": 7,\n        \"Union Square\": 22,\n        \"North Beach\": 23,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 23,\n        \"Marina District\": 16,\n        \"Russian Hill\": 19\n    },\n    \"Marina District\": {\n        \"Nob Hill\": 12,\n        \"Embarcadero\": 14,\n        \"The Castro\": 22,\n        \"Haight-Ashbury\": 16,\n        \"Union Square\": 16,\n        \"North Beach\": 11,\n        \"Pacific Heights\": 7,\n        \"Chinatown\": 15,\n        \"Golden Gate Park\": 18,\n        \"Russian Hill\": 8\n    },\n    \"Russian Hill\": {\n        \"Nob Hill\": 5,\n        \"Embarcadero\": 8,\n        \"The Castro\": 21,\n        \"Haight-Ashbury\": 17,\n        \"Union Square\": 10,\n        \"North Beach\": 5,\n        \"Pacific Heights\": 7,\n        \"Chinatown\": 9,\n        \"Golden Gate Park\": 21,\n        \"Marina District\": 7\n    }\n}\n\n# Friend data: name, location, available_start, available_end, min_duration\nfriends = [\n    (\"Mary\", \"Embarcadero\", \"20:00\", \"21:15\", 75),\n    (\"Kenneth\", \"The Castro\", \"11:15\", \"19:15\", 30),\n    (\"Joseph\", \"Haight-Ashbury\", \"20:00\", \"22:00\", 120),\n    (\"Sarah\", \"Union Square\", \"11:45\", \"14:30\", 90),\n    (\"Thomas\", \"North Beach\", \"19:15\", \"19:45\", 15),\n    (\"Daniel\", \"Pacific Heights\", \"13:45\", \"20:30\", 15),\n    (\"Richard\", \"Chinatown\", \"8:00\", \"18:45\", 30),\n    (\"Mark\", \"Golden Gate Park\", \"17:30\", \"21:30\", 120),\n    (\"David\", \"Marina District\", \"20:00\", \"21:00\", 60),\n    (\"Karen\", \"Russian Hill\", \"13:15\", \"18:30\", 120)\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef get_possible_schedules():\n    # Filter friends that are impossible to meet (available time < min duration)\n    possible_friends = [f for f in friends if time_to_minutes(f[3]) - time_to_minutes(f[2]) >= f[4]]\n    \n    # We'll try to meet as many friends as possible in priority order\n    # Priority is given to friends with earliest availability and longest required duration\n    possible_friends.sort(key=lambda x: (time_to_minutes(x[2]), reverse=False)\n    possible_friends.sort(key=lambda x: x[4], reverse=True)\n    \n    best_schedule = []\n    max_meetings = 0\n    \n    # Try different orders to find the best possible schedule\n    for order in permutations(possible_friends, min(5, len(possible_friends))):\n        current_location = \"Nob Hill\"\n        current_time = time_to_minutes(\"9:00\")\n        schedule = []\n        \n        for friend in order:\n            name, location, avail_start, avail_end, min_duration = friend\n            travel_time = travel_times[current_location].get(location, float('inf'))\n            \n            # Calculate earliest possible start time at new location\n            earliest_arrival = current_time + travel_time\n            avail_start_min = time_to_minutes(avail_start)\n            avail_end_min = time_to_minutes(avail_end)\n            \n            # Can we meet this friend?\n            start_time = max(earliest_arrival, avail_start_min)\n            end_time = start_time + min_duration\n            \n            if end_time <= avail_end_min:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": name,\n                    \"start_time\": minutes_to_time(start_time),\n                    \"end_time\": minutes_to_time(end_time)\n                })\n                current_location = location\n                current_time = end_time\n        \n        if len(schedule) > max_meetings or (len(schedule) == max_meetings and len(schedule) > 0 and time_to_minutes(schedule[-1][\"end_time\"]) > current_time):\n            best_schedule = schedule\n            max_meetings = len(schedule)\n    \n    return best_schedule\n\ndef main():\n    optimal_schedule = get_possible_schedules()\n    result = {\n        \"itinerary\": optimal_schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_934"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "15:19",
                        "end_time": "16:34"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "16:57",
                        "end_time": "17:27"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:42",
                        "end_time": "19:27"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Rebecca",
                        "start_time": "19:42",
                        "end_time": "20:42"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "15:19",
                        "end_time": "16:34"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "16:57",
                        "end_time": "17:27"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:42",
                        "end_time": "19:27"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Rebecca",
                        "start_time": "19:42",
                        "end_time": "20:42"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    \"\"\"Convert time string 'H:MM' to minutes since midnight.\"\"\"\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to time string 'H:MM'.\"\"\"\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times dictionary: {from_location: {to_location: minutes}}\ntravel_times = {\n    'The Castro': {\n        'Presidio': 20,\n        'Sunset District': 17,\n        'Haight-Ashbury': 6,\n        'Mission District': 7,\n        'Golden Gate Park': 11,\n        'Russian Hill': 18\n    },\n    'Presidio': {\n        'The Castro': 21,\n        'Sunset District': 15,\n        'Haight-Ashbury': 15,\n        'Mission District': 26,\n        'Golden Gate Park': 12,\n        'Russian Hill': 14\n    },\n    'Sunset District': {\n        'The Castro': 17,\n        'Presidio': 16,\n        'Haight-Ashbury': 15,\n        'Mission District': 24,\n        'Golden Gate Park': 11,\n        'Russian Hill': 24\n    },\n    'Haight-Ashbury': {\n        'The Castro': 6,\n        'Presidio': 15,\n        'Sunset District': 15,\n        'Mission District': 11,\n        'Golden Gate Park': 7,\n        'Russian Hill': 17\n    },\n    'Mission District': {\n        'The Castro': 7,\n        'Presidio': 25,\n        'Sunset District': 24,\n        'Haight-Ashbury': 12,\n        'Golden Gate Park': 17,\n        'Russian Hill': 15\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Presidio': 11,\n        'Sunset District': 10,\n        'Haight-Ashbury': 7,\n        'Mission District': 17,\n        'Russian Hill': 19\n    },\n    'Russian Hill': {\n        'The Castro': 21,\n        'Presidio': 14,\n        'Sunset District': 23,\n        'Haight-Ashbury': 17,\n        'Mission District': 16,\n        'Golden Gate Park': 21\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Rebecca',\n        'location': 'Presidio',\n        'available_start': '18:15',\n        'available_end': '20:45',\n        'min_duration': 60\n    },\n    {\n        'name': 'Linda',\n        'location': 'Sunset District',\n        'available_start': '15:30',\n        'available_end': '19:45',\n        'min_duration': 30\n    },\n    {\n        'name': 'Elizabeth',\n        'location': 'Haight-Ashbury',\n        'available_start': '17:15',\n        'available_end': '19:30',\n        'min_duration': 105\n    },\n    {\n        'name': 'William',\n        'location': 'Mission District',\n        'available_start': '13:15',\n        'available_end': '19:30',\n        'min_duration': 30\n    },\n    {\n        'name': 'Robert',\n        'location': 'Golden Gate Park',\n        'available_start': '14:15',\n        'available_end': '21:30',\n        'min_duration': 45\n    },\n    {\n        'name': 'Mark',\n        'location': 'Russian Hill',\n        'available_start': '10:00',\n        'available_end': '21:15',\n        'min_duration': 75\n    }\n]\n\ndef calculate_schedule(start_time, current_location, remaining_friends, visited, current_schedule):\n    if not remaining_friends:\n        return current_schedule\n    \n    best_schedule = None\n    max_meetings = 0\n    \n    for friend in remaining_friends:\n        # Calculate travel time\n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = start_time + travel_time\n        \n        # Check if we can meet this friend\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        \n        # Determine meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = min(meeting_start + friend['min_duration'], available_end)\n        \n        if meeting_end - meeting_start >= friend['min_duration']:\n            new_visited = visited.copy()\n            new_visited.add(friend['name'])\n            \n            new_schedule = current_schedule.copy()\n            new_schedule.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            \n            next_remaining = [f for f in remaining_friends if f['name'] not in new_visited]\n            result_schedule = calculate_schedule(\n                meeting_end,\n                friend['location'],\n                next_remaining,\n                new_visited,\n                new_schedule\n            )\n            \n            if result_schedule and len(result_schedule) > max_meetings:\n                max_meetings = len(result_schedule)\n                best_schedule = result_schedule\n    \n    return best_schedule\n\n# Start at The Castro at 9:00 AM (540 minutes)\ninitial_time = time_to_minutes('9:00')\ninitial_location = 'The Castro'\n\n# Try all permutations to find the best schedule\nbest_schedule = None\nmax_meetings = 0\n\n# We'll try a subset of permutations to make it computationally feasible\nfrom itertools import islice\nfor perm in islice(permutations(friends), 1000):  # Limit permutations for practicality\n    schedule = calculate_schedule(initial_time, initial_location, perm, set(), [])\n    if schedule and len(schedule) > max_meetings:\n        max_meetings = len(schedule)\n        best_schedule = schedule\n\nif not best_schedule:\n    # Fallback to meeting as many as possible in order\n    best_schedule = calculate_schedule(initial_time, initial_location, friends, set(), [])\n\n# Prepare the output\noutput = {\n    \"itinerary\": best_schedule if best_schedule else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_575"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str.endswith('AM'):\n        time_str = time_str[:-2].strip()\n        hours, minutes = map(int, time_str.split(':'))\n        if hours == 12:\n            hours = 0\n    elif time_str.endswith('PM'):\n        time_str = time_str[:-2].strip()\n        hours, minutes = map(int, time_str.split(':'))\n        if hours != 12:\n            hours += 12\n    else:\n        hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times in minutes\ntravel_times = {\n    'Bayview': {\n        'North Beach': 21,\n        'Presidio': 31,\n        'Haight-Ashbury': 19,\n        'Union Square': 17\n    },\n    'North Beach': {\n        'Bayview': 22,\n        'Presidio': 17,\n        'Haight-Ashbury': 18,\n        'Union Square': 7\n    },\n    'Presidio': {\n        'Bayview': 31,\n        'North Beach': 18,\n        'Haight-Ashbury': 15,\n        'Union Square': 22\n    },\n    'Haight-Ashbury': {\n        'Bayview': 18,\n        'North Beach': 19,\n        'Presidio': 15,\n        'Union Square': 17\n    },\n    'Union Square': {\n        'Bayview': 15,\n        'North Beach': 10,\n        'Presidio': 24,\n        'Haight-Ashbury': 18\n    }\n}\n\n# Constraints\narrival_time = time_to_minutes('9:00AM')\nfriends = {\n    'Barbara': {\n        'location': 'North Beach',\n        'start': time_to_minutes('1:45PM'),\n        'end': time_to_minutes('8:15PM'),\n        'duration': 60\n    },\n    'Margaret': {\n        'location': 'Presidio',\n        'start': time_to_minutes('10:15AM'),\n        'end': time_to_minutes('3:15PM'),\n        'duration': 30\n    },\n    'Kevin': {\n        'location': 'Haight-Ashbury',\n        'start': time_to_minutes('8:00PM'),\n        'end': time_to_minutes('8:45PM'),\n        'duration': 30\n    },\n    'Kimberly': {\n        'location': 'Union Square',\n        'start': time_to_minutes('7:45AM'),\n        'end': time_to_minutes('4:45PM'),\n        'duration': 30\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = arrival_time\n    current_location = 'Bayview'\n    schedule = []\n    for friend in order:\n        friend_info = friends[friend]\n        location = friend_info['location']\n        travel_time = travel_times[current_location][location]\n        arrival = current_time + travel_time\n        start = max(arrival, friend_info['start'])\n        end = start + friend_info['duration']\n        if end > friend_info['end']:\n            return None\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend,\n            'start_time': minutes_to_time(start),\n            'end_time': minutes_to_time(end)\n        })\n        current_time = end\n        current_location = location\n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return -1\n    return len(schedule)\n\nbest_schedule = None\nbest_score = -1\n\n# Try all possible orders of meeting friends\nfor order in permutations(friends.keys()):\n    schedule = calculate_schedule(order)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\n# Output the best schedule\noutput = {\n    \"itinerary\": best_schedule if best_schedule else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_356"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Karen",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "14:58",
                        "end_time": "16:58"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Karen",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "14:58",
                        "end_time": "16:58"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    ('Union Square', 'Mission District'): 14,\n    ('Union Square', 'Bayview'): 15,\n    ('Union Square', 'Sunset District'): 26,\n    ('Mission District', 'Union Square'): 15,\n    ('Mission District', 'Bayview'): 15,\n    ('Mission District', 'Sunset District'): 24,\n    ('Bayview', 'Union Square'): 17,\n    ('Bayview', 'Mission District'): 13,\n    ('Bayview', 'Sunset District'): 23,\n    ('Sunset District', 'Union Square'): 30,\n    ('Sunset District', 'Mission District'): 24,\n    ('Sunset District', 'Bayview'): 22\n}\n\n# Friend constraints\nfriends = {\n    'Rebecca': {\n        'location': 'Mission District',\n        'available_start': (11, 30),\n        'available_end': (20, 15),\n        'min_duration': 120\n    },\n    'Karen': {\n        'location': 'Bayview',\n        'available_start': (12, 45),\n        'available_end': (15, 0),\n        'min_duration': 120\n    },\n    'Carol': {\n        'location': 'Sunset District',\n        'available_start': (10, 15),\n        'available_end': (11, 45),\n        'min_duration': 30\n    }\n}\n\ndef time_to_minutes(time_tuple):\n    return time_tuple[0] * 60 + time_tuple[1]\n\ndef minutes_to_time(minutes):\n    return (minutes // 60, minutes % 60)\n\ndef format_time(time_tuple):\n    return f\"{time_tuple[0]}:{time_tuple[1]:02d}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get((from_loc, to_loc), float('inf'))\n\ndef is_schedule_valid(schedule):\n    current_location = 'Union Square'\n    current_time = time_to_minutes((9, 0))\n    \n    for friend in schedule:\n        friend_info = friends[friend]\n        location = friend_info['location']\n        travel_time = get_travel_time(current_location, location)\n        \n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(friend_info['available_start'])\n        available_end = time_to_minutes(friend_info['available_end'])\n        min_duration = friend_info['min_duration']\n        \n        if arrival_time > available_end:\n            return False\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + min_duration\n        \n        if end_time > available_end:\n            return False\n        \n        current_time = end_time\n        current_location = location\n    \n    return True\n\ndef calculate_total_meeting_time(schedule):\n    total = 0\n    for friend in schedule:\n        total += friends[friend]['min_duration']\n    return total\n\ndef generate_itinerary(schedule):\n    itinerary = []\n    current_location = 'Union Square'\n    current_time = time_to_minutes((9, 0))\n    \n    for friend in schedule:\n        friend_info = friends[friend]\n        location = friend_info['location']\n        travel_time = get_travel_time(current_location, location)\n        \n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(friend_info['available_start'])\n        available_end = time_to_minutes(friend_info['available_end'])\n        min_duration = friend_info['min_duration']\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + min_duration\n        \n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": friend,\n            \"start_time\": format_time(minutes_to_time(start_time)),\n            \"end_time\": format_time(minutes_to_time(end_time))\n        })\n        \n        current_time = end_time\n        current_location = location\n    \n    return itinerary\n\ndef find_optimal_schedule():\n    friend_names = list(friends.keys())\n    best_schedule = None\n    best_time = 0\n    \n    for perm in permutations(friend_names):\n        if is_schedule_valid(perm):\n            total_time = calculate_total_meeting_time(perm)\n            if total_time > best_time:\n                best_time = total_time\n                best_schedule = perm\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nif optimal_schedule:\n    itinerary = generate_itinerary(optimal_schedule)\n    result = {\"itinerary\": itinerary}\nelse:\n    result = {\"itinerary\": []}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_286"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Emily",
                        "start_time": "9:17",
                        "end_time": "11:02"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joseph",
                        "start_time": "17:15",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Melissa",
                        "start_time": "19:37",
                        "end_time": "20:52"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joseph",
                        "start_time": "18:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Melissa",
                        "start_time": "20:29",
                        "end_time": "21:44"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Fisherman's Wharf\"\n    start_time = \"9:00\"\n    \n    # Friend constraints\n    friends = [\n        {\n            \"name\": \"Emily\",\n            \"location\": \"Presidio\",\n            \"available_start\": \"16:15\",\n            \"available_end\": \"21:00\",\n            \"min_duration\": 105,\n            \"travel_times\": {\n                \"Fisherman's Wharf\": 17,\n                \"Presidio\": 0,\n                \"Richmond District\": 7,\n                \"Financial District\": 23\n            }\n        },\n        {\n            \"name\": \"Joseph\",\n            \"location\": \"Richmond District\",\n            \"available_start\": \"17:15\",\n            \"available_end\": \"22:00\",\n            \"min_duration\": 120,\n            \"travel_times\": {\n                \"Fisherman's Wharf\": 18,\n                \"Presidio\": 7,\n                \"Richmond District\": 0,\n                \"Financial District\": 22\n            }\n        },\n        {\n            \"name\": \"Melissa\",\n            \"location\": \"Financial District\",\n            \"available_start\": \"15:45\",\n            \"available_end\": \"21:45\",\n            \"min_duration\": 75,\n            \"travel_times\": {\n                \"Fisherman's Wharf\": 11,\n                \"Presidio\": 23,\n                \"Richmond District\": 22,\n                \"Financial District\": 0\n            }\n        }\n    ]\n    \n    # Travel times lookup\n    travel_times = {\n        \"Fisherman's Wharf\": {\n            \"Presidio\": 17,\n            \"Richmond District\": 18,\n            \"Financial District\": 11\n        },\n        \"Presidio\": {\n            \"Fisherman's Wharf\": 19,\n            \"Richmond District\": 7,\n            \"Financial District\": 23\n        },\n        \"Richmond District\": {\n            \"Fisherman's Wharf\": 18,\n            \"Presidio\": 7,\n            \"Financial District\": 22\n        },\n        \"Financial District\": {\n            \"Fisherman's Wharf\": 10,\n            \"Presidio\": 22,\n            \"Richmond District\": 21\n        }\n    }\n    \n    # Generate all possible meeting orders\n    from itertools import permutations\n    best_schedule = None\n    max_meetings = 0\n    \n    for order in permutations(friends):\n        current_location = start_location\n        current_time = start_time\n        schedule = []\n        meetings = 0\n        \n        for friend in order:\n            # Calculate travel time to friend's location\n            travel_time = travel_times[current_location].get(friend[\"location\"], 0)\n            arrival_time = add_minutes(current_time, travel_time)\n            \n            # Determine meeting window\n            meeting_start = max(arrival_time, friend[\"available_start\"])\n            meeting_end = add_minutes(meeting_start, friend[\"min_duration\"])\n            \n            if parse_time(meeting_end) > parse_time(friend[\"available_end\"]):\n                continue  # Can't meet this friend\n            \n            # Add to schedule\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"person\": friend[\"name\"],\n                \"start_time\": meeting_start,\n                \"end_time\": meeting_end\n            })\n            meetings += 1\n            current_location = friend[\"location\"]\n            current_time = meeting_end\n        \n        if meetings > max_meetings or (meetings == max_meetings and best_schedule is None):\n            max_meetings = meetings\n            best_schedule = schedule\n    \n    # If no schedule meets all constraints, try with fewer meetings\n    if max_meetings < len(friends):\n        for order in permutations(friends, 2):\n            current_location = start_location\n            current_time = start_time\n            schedule = []\n            meetings = 0\n            \n            for friend in order:\n                travel_time = travel_times[current_location].get(friend[\"location\"], 0)\n                arrival_time = add_minutes(current_time, travel_time)\n                \n                meeting_start = max(arrival_time, friend[\"available_start\"])\n                meeting_end = add_minutes(meeting_start, friend[\"min_duration\"])\n                \n                if parse_time(meeting_end) > parse_time(friend[\"available_end\"]):\n                    break\n                \n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": friend[\"location\"],\n                    \"person\": friend[\"name\"],\n                    \"start_time\": meeting_start,\n                    \"end_time\": meeting_end\n                })\n                meetings += 1\n                current_location = friend[\"location\"]\n                current_time = meeting_end\n            \n            if meetings > max_meetings:\n                max_meetings = meetings\n                best_schedule = schedule\n    \n    return {\"itinerary\": best_schedule} if best_schedule else {\"itinerary\": []}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_210"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "14:21",
                        "end_time": "16:06"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "16:17",
                        "end_time": "17:17"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Andrew",
                        "start_time": "20:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "15:57",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef calculate_schedule():\n    # Define travel times as a dictionary of dictionaries\n    travel_times = {\n        'Alamo Square': {\n            'Russian Hill': 13,\n            'Presidio': 18,\n            'Chinatown': 16,\n            'Sunset District': 16,\n            'The Castro': 8,\n            'Embarcadero': 17,\n            'Golden Gate Park': 9\n        },\n        'Russian Hill': {\n            'Alamo Square': 15,\n            'Presidio': 14,\n            'Chinatown': 9,\n            'Sunset District': 23,\n            'The Castro': 21,\n            'Embarcadero': 8,\n            'Golden Gate Park': 21\n        },\n        'Presidio': {\n            'Alamo Square': 18,\n            'Russian Hill': 14,\n            'Chinatown': 21,\n            'Sunset District': 15,\n            'The Castro': 21,\n            'Embarcadero': 20,\n            'Golden Gate Park': 12\n        },\n        'Chinatown': {\n            'Alamo Square': 17,\n            'Russian Hill': 7,\n            'Presidio': 19,\n            'Sunset District': 29,\n            'The Castro': 22,\n            'Embarcadero': 5,\n            'Golden Gate Park': 23\n        },\n        'Sunset District': {\n            'Alamo Square': 17,\n            'Russian Hill': 24,\n            'Presidio': 16,\n            'Chinatown': 30,\n            'The Castro': 17,\n            'Embarcadero': 31,\n            'Golden Gate Park': 11\n        },\n        'The Castro': {\n            'Alamo Square': 8,\n            'Russian Hill': 18,\n            'Presidio': 20,\n            'Chinatown': 20,\n            'Sunset District': 17,\n            'Embarcadero': 22,\n            'Golden Gate Park': 11\n        },\n        'Embarcadero': {\n            'Alamo Square': 19,\n            'Russian Hill': 8,\n            'Presidio': 20,\n            'Chinatown': 7,\n            'Sunset District': 30,\n            'The Castro': 25,\n            'Golden Gate Park': 25\n        },\n        'Golden Gate Park': {\n            'Alamo Square': 10,\n            'Russian Hill': 19,\n            'Presidio': 11,\n            'Chinatown': 23,\n            'Sunset District': 10,\n            'The Castro': 13,\n            'Embarcadero': 25\n        }\n    }\n\n    # Define friends' availability and meeting requirements\n    friends = {\n        'Emily': {\n            'location': 'Russian Hill',\n            'start': '12:15',\n            'end': '14:15',\n            'duration': 105\n        },\n        'Mark': {\n            'location': 'Presidio',\n            'start': '14:45',\n            'end': '19:30',\n            'duration': 60\n        },\n        'Deborah': {\n            'location': 'Chinatown',\n            'start': '7:30',\n            'end': '15:30',\n            'duration': 45\n        },\n        'Margaret': {\n            'location': 'Sunset District',\n            'start': '21:30',\n            'end': '22:30',\n            'duration': 60\n        },\n        'George': {\n            'location': 'The Castro',\n            'start': '7:30',\n            'end': '14:15',\n            'duration': 60\n        },\n        'Andrew': {\n            'location': 'Embarcadero',\n            'start': '20:15',\n            'end': '22:00',\n            'duration': 75\n        },\n        'Steven': {\n            'location': 'Golden Gate Park',\n            'start': '11:15',\n            'end': '21:15',\n            'duration': 105\n        }\n    }\n\n    # Initial state\n    current_location = 'Alamo Square'\n    current_time = time_to_minutes('9:00')\n    itinerary = []\n\n    # We'll try to meet friends in different orders to find the best schedule\n    friend_names = ['Deborah', 'George', 'Steven', 'Emily', 'Mark', 'Andrew', 'Margaret']\n    best_itinerary = None\n    best_meetings = 0\n\n    # Try all possible orders (permutations) of meeting friends\n    for order in permutations(friend_names):\n        temp_itinerary = []\n        temp_location = current_location\n        temp_time = current_time\n        meetings = 0\n\n        for name in order:\n            friend = friends[name]\n            location = friend['location']\n            start_window = time_to_minutes(friend['start'])\n            end_window = time_to_minutes(friend['end'])\n            duration = friend['duration']\n\n            # Calculate travel time\n            travel_time = travel_times[temp_location][location]\n\n            # Earliest we can arrive at location\n            arrival_time = temp_time + travel_time\n\n            # Check if we can meet within the friend's window\n            meeting_start = max(arrival_time, start_window)\n            meeting_end = meeting_start + duration\n\n            if meeting_end <= end_window:\n                # Add meeting to itinerary\n                temp_itinerary.append({\n                    'action': 'meet',\n                    'location': location,\n                    'person': name,\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                meetings += 1\n                temp_location = location\n                temp_time = meeting_end\n\n        # Check if this order is better than previous best\n        if meetings > best_meetings:\n            best_meetings = meetings\n            best_itinerary = temp_itinerary\n        elif meetings == best_meetings and best_itinerary is None:\n            best_itinerary = temp_itinerary\n\n    # After trying all orders, return the best itinerary found\n    return {'itinerary': best_itinerary}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_612"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Linda",
                        "start_time": "9:17",
                        "end_time": "9:32"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Anthony",
                        "start_time": "9:43",
                        "end_time": "11:28"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:39",
                        "end_time": "13:39"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "13:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Paul",
                        "start_time": "14:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Margaret",
                        "start_time": "16:33",
                        "end_time": "17:18"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "17:45",
                        "end_time": "19:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "9:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Linda",
                        "start_time": "11:26",
                        "end_time": "11:41"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Anthony",
                        "start_time": "11:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "13:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Paul",
                        "start_time": "14:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "17:30",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "19:52",
                        "end_time": "21:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-H:%M')\n\ndef calculate_schedule():\n    # Initialize travel times as a dictionary of dictionaries\n    travel_times = {\n        'Russian Hill': {\n            'Pacific Heights': 7,\n            'North Beach': 5,\n            'Golden Gate Park': 21,\n            'Embarcadero': 8,\n            'Haight-Ashbury': 17,\n            'Fisherman\\'s Wharf': 7,\n            'Mission District': 16,\n            'Alamo Square': 15,\n            'Bayview': 23,\n            'Richmond District': 14\n        },\n        'Pacific Heights': {\n            'Russian Hill': 7,\n            'North Beach': 9,\n            'Golden Gate Park': 15,\n            'Embarcadero': 10,\n            'Haight-Ashbury': 11,\n            'Fisherman\\'s Wharf': 13,\n            'Mission District': 15,\n            'Alamo Square': 10,\n            'Bayview': 22,\n            'Richmond District': 12\n        },\n        'North Beach': {\n            'Russian Hill': 4,\n            'Pacific Heights': 8,\n            'Golden Gate Park': 22,\n            'Embarcadero': 6,\n            'Haight-Ashbury': 18,\n            'Fisherman\\'s Wharf': 5,\n            'Mission District': 18,\n            'Alamo Square': 16,\n            'Bayview': 25,\n            'Richmond District': 18\n        },\n        'Golden Gate Park': {\n            'Russian Hill': 19,\n            'Pacific Heights': 16,\n            'North Beach': 23,\n            'Embarcadero': 25,\n            'Haight-Ashbury': 7,\n            'Fisherman\\'s Wharf': 24,\n            'Mission District': 17,\n            'Alamo Square': 9,\n            'Bayview': 23,\n            'Richmond District': 7\n        },\n        'Embarcadero': {\n            'Russian Hill': 8,\n            'Pacific Heights': 11,\n            'North Beach': 5,\n            'Golden Gate Park': 25,\n            'Haight-Ashbury': 21,\n            'Fisherman\\'s Wharf': 6,\n            'Mission District': 20,\n            'Alamo Square': 19,\n            'Bayview': 21,\n            'Richmond District': 21\n        },\n        'Haight-Ashbury': {\n            'Russian Hill': 17,\n            'Pacific Heights': 12,\n            'North Beach': 19,\n            'Golden Gate Park': 7,\n            'Embarcadero': 20,\n            'Fisherman\\'s Wharf': 23,\n            'Mission District': 11,\n            'Alamo Square': 5,\n            'Bayview': 18,\n            'Richmond District': 10\n        },\n        'Fisherman\\'s Wharf': {\n            'Russian Hill': 7,\n            'Pacific Heights': 12,\n            'North Beach': 6,\n            'Golden Gate Park': 25,\n            'Embarcadero': 8,\n            'Haight-Ashbury': 22,\n            'Mission District': 22,\n            'Alamo Square': 21,\n            'Bayview': 26,\n            'Richmond District': 18\n        },\n        'Mission District': {\n            'Russian Hill': 15,\n            'Pacific Heights': 16,\n            'North Beach': 17,\n            'Golden Gate Park': 17,\n            'Embarcadero': 19,\n            'Haight-Ashbury': 12,\n            'Fisherman\\'s Wharf': 22,\n            'Alamo Square': 11,\n            'Bayview': 14,\n            'Richmond District': 20\n        },\n        'Alamo Square': {\n            'Russian Hill': 13,\n            'Pacific Heights': 10,\n            'North Beach': 15,\n            'Golden Gate Park': 9,\n            'Embarcadero': 16,\n            'Haight-Ashbury': 5,\n            'Fisherman\\'s Wharf': 19,\n            'Mission District': 10,\n            'Bayview': 16,\n            'Richmond District': 11\n        },\n        'Bayview': {\n            'Russian Hill': 23,\n            'Pacific Heights': 23,\n            'North Beach': 22,\n            'Golden Gate Park': 22,\n            'Embarcadero': 19,\n            'Haight-Ashbury': 19,\n            'Fisherman\\'s Wharf': 25,\n            'Mission District': 13,\n            'Alamo Square': 16,\n            'Richmond District': 27\n        },\n        'Richmond District': {\n            'Russian Hill': 13,\n            'Pacific Heights': 10,\n            'North Beach': 17,\n            'Golden Gate Park': 9,\n            'Embarcadero': 19,\n            'Haight-Ashbury': 10,\n            'Fisherman\\'s Wharf': 18,\n            'Mission District': 20,\n            'Alamo Square': 13,\n            'Bayview': 27\n        }\n    }\n\n    # Initialize meeting constraints\n    constraints = [\n        {'person': 'Emily', 'location': 'Pacific Heights', 'start': parse_time('9:15AM'), 'end': parse_time('1:45PM'), 'duration': 120},\n        {'person': 'Helen', 'location': 'North Beach', 'start': parse_time('1:45PM'), 'end': parse_time('6:45PM'), 'duration': 30},\n        {'person': 'Kimberly', 'location': 'Golden Gate Park', 'start': parse_time('6:45PM'), 'end': parse_time('9:15PM'), 'duration': 75},\n        {'person': 'James', 'location': 'Embarcadero', 'start': parse_time('10:30AM'), 'end': parse_time('11:30AM'), 'duration': 30},\n        {'person': 'Linda', 'location': 'Haight-Ashbury', 'start': parse_time('7:30AM'), 'end': parse_time('7:15PM'), 'duration': 15},\n        {'person': 'Paul', 'location': 'Fisherman\\'s Wharf', 'start': parse_time('2:45PM'), 'end': parse_time('6:45PM'), 'duration': 90},\n        {'person': 'Anthony', 'location': 'Mission District', 'start': parse_time('8:00AM'), 'end': parse_time('2:45PM'), 'duration': 105},\n        {'person': 'Nancy', 'location': 'Alamo Square', 'start': parse_time('8:30AM'), 'end': parse_time('1:45PM'), 'duration': 120},\n        {'person': 'William', 'location': 'Bayview', 'start': parse_time('5:30PM'), 'end': parse_time('8:30PM'), 'duration': 120},\n        {'person': 'Margaret', 'location': 'Richmond District', 'start': parse_time('3:15PM'), 'end': parse_time('6:15PM'), 'duration': 45}\n    ]\n\n    # Current time and location\n    current_time = parse_time('9:00AM')\n    current_location = 'Russian Hill'\n    itinerary = []\n\n    # Sort constraints by priority (earlier meetings first, then longer durations)\n    constraints.sort(key=lambda x: (x['start'], -x['duration']))\n\n    for constraint in constraints:\n        person = constraint['person']\n        location = constraint['location']\n        start = constraint['start']\n        end = constraint['end']\n        duration = constraint['duration']\n\n        # Calculate travel time\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if we can make it before the meeting window closes\n        if arrival_time > end:\n            continue  # Can't make it in time\n\n        # Determine the actual meeting start time\n        meeting_start = max(arrival_time, start)\n        meeting_end = meeting_start + timedelta(minutes=duration)\n\n        # Check if the meeting can fit within the window\n        if meeting_end > end:\n            continue  # Not enough time for this meeting\n\n        # Add to itinerary\n        itinerary.append({\n            'action': 'meet',\n            'location': location,\n            'person': person,\n            'start_time': format_time(meeting_start),\n            'end_time': format_time(meeting_end)\n        })\n\n        # Update current time and location\n        current_time = meeting_end\n        current_location = location\n\n    return {'itinerary': itinerary}\n\nif __name__ == '__main__':\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_901"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Anthony",
                        "start_time": "9:06",
                        "end_time": "9:36"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Helen",
                        "start_time": "9:48",
                        "end_time": "11:03"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "11:16",
                        "end_time": "11:31"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "William",
                        "start_time": "15:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Karen",
                        "start_time": "16:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "17:01",
                        "end_time": "17:46"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joshua",
                        "start_time": "18:06",
                        "end_time": "18:21"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "18:39",
                        "end_time": "20:24"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joshua",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Anthony",
                        "start_time": "9:41",
                        "end_time": "10:11"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Helen",
                        "start_time": "10:23",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "11:51",
                        "end_time": "12:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "William",
                        "start_time": "15:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "16:45",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Karen",
                        "start_time": "17:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "18:13",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "20:23",
                        "end_time": "21:23"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since midnight\ndef time_to_minutes(time_str):\n    if time_str.endswith('AM') or time_str.endswith('PM'):\n        time_str, period = time_str[:-2].strip(), time_str[-2:]\n        hours, minutes = map(int, time_str.split(':'))\n        if period == 'PM' and hours != 12:\n            hours += 12\n        if period == 'AM' and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    else:\n        hours, minutes = map(int, time_str.split(':'))\n        return hours * 60 + minutes\n\n# Convert minutes since midnight to time string\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times dictionary\ntravel_times = {\n    'The Castro': {\n        'Alamo Square': 8,\n        'Richmond District': 16,\n        'Financial District': 21,\n        'Union Square': 19,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 21,\n        'Haight-Ashbury': 6,\n        'Mission District': 7,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 11\n    },\n    'Alamo Square': {\n        'The Castro': 8,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Union Square': 14,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 15,\n        'Haight-Ashbury': 5,\n        'Mission District': 10,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9\n    },\n    'Richmond District': {\n        'The Castro': 16,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Union Square': 21,\n        'Fisherman\\'s Wharf': 18,\n        'Marina District': 9,\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9\n    },\n    'Financial District': {\n        'The Castro': 20,\n        'Alamo Square': 17,\n        'Richmond District': 21,\n        'Union Square': 9,\n        'Fisherman\\'s Wharf': 10,\n        'Marina District': 15,\n        'Haight-Ashbury': 19,\n        'Mission District': 17,\n        'Pacific Heights': 13,\n        'Golden Gate Park': 23\n    },\n    'Union Square': {\n        'The Castro': 17,\n        'Alamo Square': 15,\n        'Richmond District': 20,\n        'Financial District': 9,\n        'Fisherman\\'s Wharf': 15,\n        'Marina District': 18,\n        'Haight-Ashbury': 18,\n        'Mission District': 14,\n        'Pacific Heights': 15,\n        'Golden Gate Park': 22\n    },\n    'Fisherman\\'s Wharf': {\n        'The Castro': 27,\n        'Alamo Square': 21,\n        'Richmond District': 18,\n        'Financial District': 11,\n        'Union Square': 13,\n        'Marina District': 9,\n        'Haight-Ashbury': 22,\n        'Mission District': 22,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 25\n    },\n    'Marina District': {\n        'The Castro': 22,\n        'Alamo Square': 15,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Union Square': 16,\n        'Fisherman\\'s Wharf': 10,\n        'Haight-Ashbury': 16,\n        'Mission District': 20,\n        'Pacific Heights': 7,\n        'Golden Gate Park': 18\n    },\n    'Haight-Ashbury': {\n        'The Castro': 6,\n        'Alamo Square': 5,\n        'Richmond District': 10,\n        'Financial District': 21,\n        'Union Square': 19,\n        'Fisherman\\'s Wharf': 23,\n        'Marina District': 17,\n        'Mission District': 11,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 7\n    },\n    'Mission District': {\n        'The Castro': 7,\n        'Alamo Square': 11,\n        'Richmond District': 20,\n        'Financial District': 15,\n        'Union Square': 15,\n        'Fisherman\\'s Wharf': 22,\n        'Marina District': 19,\n        'Haight-Ashbury': 12,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 17\n    },\n    'Pacific Heights': {\n        'The Castro': 16,\n        'Alamo Square': 10,\n        'Richmond District': 12,\n        'Financial District': 13,\n        'Union Square': 12,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Golden Gate Park': 15\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Alamo Square': 9,\n        'Richmond District': 7,\n        'Financial District': 26,\n        'Union Square': 22,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Haight-Ashbury': 7,\n        'Mission District': 17,\n        'Pacific Heights': 16\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'William', 'location': 'Alamo Square', 'start': '15:15', 'end': '17:15', 'min_duration': 60},\n    {'name': 'Joshua', 'location': 'Richmond District', 'start': '7:00', 'end': '20:00', 'min_duration': 15},\n    {'name': 'Joseph', 'location': 'Financial District', 'start': '11:15', 'end': '13:30', 'min_duration': 15},\n    {'name': 'David', 'location': 'Union Square', 'start': '16:45', 'end': '19:15', 'min_duration': 45},\n    {'name': 'Brian', 'location': 'Fisherman\\'s Wharf', 'start': '13:45', 'end': '20:45', 'min_duration': 105},\n    {'name': 'Karen', 'location': 'Marina District', 'start': '11:30', 'end': '18:30', 'min_duration': 15},\n    {'name': 'Anthony', 'location': 'Haight-Ashbury', 'start': '7:15', 'end': '10:30', 'min_duration': 30},\n    {'name': 'Matthew', 'location': 'Mission District', 'start': '17:15', 'end': '19:15', 'min_duration': 120},\n    {'name': 'Helen', 'location': 'Pacific Heights', 'start': '8:00', 'end': '12:00', 'min_duration': 75},\n    {'name': 'Jeffrey', 'location': 'Golden Gate Park', 'start': '19:00', 'end': '21:30', 'min_duration': 60}\n]\n\n# Convert all times to minutes\nfor friend in friends:\n    friend['start_min'] = time_to_minutes(friend['start'])\n    friend['end_min'] = time_to_minutes(friend['end'])\n\n# Current time starts at 9:00 AM at The Castro\ncurrent_time = time_to_minutes('9:00')\ncurrent_location = 'The Castro'\n\nitinerary = []\n\n# Helper function to check if a meeting is possible\ndef can_meet(friend, arrival_time):\n    # Calculate available time window\n    window_start = max(arrival_time, friend['start_min'])\n    window_end = friend['end_min']\n    \n    # Check if there's enough time for the meeting\n    if window_end - window_start >= friend['min_duration']:\n        return True, window_start, min(window_end, window_start + friend['min_duration'])\n    return False, 0, 0\n\n# Greedy algorithm to schedule meetings\ndef schedule_meetings():\n    global current_time, current_location, itinerary\n    \n    # Sort friends by end time (earlier first)\n    sorted_friends = sorted(friends, key=lambda x: x['end_min'])\n    \n    for friend in sorted_friends:\n        # Calculate travel time\n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        possible, start_time, end_time = can_meet(friend, arrival_time)\n        \n        if possible:\n            # Add to itinerary\n            itinerary.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': minutes_to_time(start_time),\n                'end_time': minutes_to_time(end_time)\n            })\n            \n            # Update current time and location\n            current_time = end_time\n            current_location = friend['location']\n\n# Try scheduling meetings\nschedule_meetings()\n\n# Prepare output\noutput = {\n    \"itinerary\": itinerary\n}\n\n# Print JSON output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_956"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    arrival_time = \"9:00\"\n    arrival_location = \"Russian Hill\"\n    barbara_available_start = \"7:15\"\n    barbara_available_end = \"22:00\"\n    barbara_location = \"Pacific Heights\"\n    travel_time_to_pacific_heights = 7  # minutes\n    meeting_duration = 60  # minutes\n\n    # Convert time strings to minutes since midnight\n    def time_to_minutes(time_str):\n        hours, minutes = map(int, time_str.split(':'))\n        return hours * 60 + minutes\n\n    arrival_min = time_to_minutes(arrival_time)\n    barbara_start_min = time_to_minutes(barbara_available_start)\n    barbara_end_min = time_to_minutes(barbara_available_end)\n\n    # Calculate earliest possible meeting start time\n    earliest_meeting_start = arrival_min + travel_time_to_pacific_heights\n    if earliest_meeting_start < barbara_start_min:\n        earliest_meeting_start = barbara_start_min\n\n    # Calculate latest possible meeting end time\n    latest_meeting_end = barbara_end_min\n\n    # Check if meeting is possible\n    if earliest_meeting_start + meeting_duration > latest_meeting_end:\n        return {\"itinerary\": []}\n\n    # Schedule the meeting as early as possible\n    meeting_start = earliest_meeting_start\n    meeting_end = meeting_start + meeting_duration\n\n    # Convert minutes back to time string\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        return f\"{hours}:{mins:02d}\"\n\n    itinerary = [\n        {\n            \"action\": \"meet\",\n            \"location\": barbara_location,\n            \"person\": \"Barbara\",\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        }\n    ]\n\n    return {\"itinerary\": itinerary}\n\nresult = calculate_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_73"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "9:22",
                        "end_time": "9:52"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "10:14",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "11:15",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "14:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "16:24",
                        "end_time": "16:54"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Ronald",
                        "start_time": "17:24",
                        "end_time": "18:24"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Robert",
                        "start_time": "18:41",
                        "end_time": "20:41"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "20:51",
                        "end_time": "22:51"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "9:30",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "10:38",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "11:35",
                        "end_time": "12:20"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "15:24",
                        "end_time": "17:24"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Ronald",
                        "start_time": "17:51",
                        "end_time": "18:51"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Steven",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    \"Pacific Heights\": {\n        \"Golden Gate Park\": 15,\n        \"The Castro\": 16,\n        \"Bayview\": 22,\n        \"Marina District\": 6,\n        \"Union Square\": 12,\n        \"Sunset District\": 21,\n        \"Alamo Square\": 10,\n        \"Financial District\": 13,\n        \"Mission District\": 15\n    },\n    \"Golden Gate Park\": {\n        \"Pacific Heights\": 16,\n        \"The Castro\": 13,\n        \"Bayview\": 23,\n        \"Marina District\": 16,\n        \"Union Square\": 22,\n        \"Sunset District\": 10,\n        \"Alamo Square\": 9,\n        \"Financial District\": 26,\n        \"Mission District\": 17\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 11,\n        \"Bayview\": 19,\n        \"Marina District\": 21,\n        \"Union Square\": 19,\n        \"Sunset District\": 17,\n        \"Alamo Square\": 8,\n        \"Financial District\": 21,\n        \"Mission District\": 7\n    },\n    \"Bayview\": {\n        \"Pacific Heights\": 23,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Union Square\": 18,\n        \"Sunset District\": 23,\n        \"Alamo Square\": 16,\n        \"Financial District\": 19,\n        \"Mission District\": 13\n    },\n    \"Marina District\": {\n        \"Pacific Heights\": 7,\n        \"Golden Gate Park\": 18,\n        \"The Castro\": 22,\n        \"Bayview\": 27,\n        \"Union Square\": 16,\n        \"Sunset District\": 19,\n        \"Alamo Square\": 15,\n        \"Financial District\": 17,\n        \"Mission District\": 20\n    },\n    \"Union Square\": {\n        \"Pacific Heights\": 15,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 17,\n        \"Bayview\": 15,\n        \"Marina District\": 18,\n        \"Sunset District\": 27,\n        \"Alamo Square\": 15,\n        \"Financial District\": 9,\n        \"Mission District\": 14\n    },\n    \"Sunset District\": {\n        \"Pacific Heights\": 21,\n        \"Golden Gate Park\": 11,\n        \"The Castro\": 17,\n        \"Bayview\": 22,\n        \"Marina District\": 21,\n        \"Union Square\": 30,\n        \"Alamo Square\": 17,\n        \"Financial District\": 30,\n        \"Mission District\": 25\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9,\n        \"The Castro\": 8,\n        \"Bayview\": 16,\n        \"Marina District\": 15,\n        \"Union Square\": 14,\n        \"Sunset District\": 16,\n        \"Financial District\": 17,\n        \"Mission District\": 10\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13,\n        \"Golden Gate Park\": 23,\n        \"The Castro\": 20,\n        \"Bayview\": 19,\n        \"Marina District\": 15,\n        \"Union Square\": 9,\n        \"Sunset District\": 30,\n        \"Alamo Square\": 17,\n        \"Mission District\": 17\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 17,\n        \"The Castro\": 7,\n        \"Bayview\": 14,\n        \"Marina District\": 19,\n        \"Union Square\": 15,\n        \"Sunset District\": 24,\n        \"Alamo Square\": 11,\n        \"Financial District\": 15\n    }\n}\n\n# Friend data: name -> (location, start, end, min_duration)\nfriends = {\n    \"Helen\": (\"Golden Gate Park\", \"9:30\", \"12:15\", 45),\n    \"Steven\": (\"The Castro\", \"20:15\", \"22:00\", 105),\n    \"Deborah\": (\"Bayview\", \"8:30\", \"12:00\", 30),\n    \"Matthew\": (\"Marina District\", \"9:15\", \"14:15\", 45),\n    \"Joseph\": (\"Union Square\", \"14:15\", \"18:45\", 120),\n    \"Ronald\": (\"Sunset District\", \"16:00\", \"20:45\", 60),\n    \"Robert\": (\"Alamo Square\", \"18:30\", \"21:15\", 120),\n    \"Rebecca\": (\"Financial District\", \"14:45\", \"16:15\", 30),\n    \"Elizabeth\": (\"Mission District\", \"18:30\", \"21:00\", 120)\n}\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef can_schedule(current_time, travel_time, friend_start, friend_end, min_duration):\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(friend_start))\n    end_time = start_time + min_duration\n    return end_time <= time_to_minutes(friend_end)\n\ndef find_best_schedule():\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try all possible orders of meeting friends (limited to 5 friends for performance)\n    for friend_order in permutations(['Helen', 'Deborah', 'Matthew', 'Joseph', 'Rebecca', 'Ronald', 'Robert', 'Elizabeth', 'Steven'], 5):\n        current_location = \"Pacific Heights\"\n        current_time = time_to_minutes(\"9:00\")\n        schedule = []\n        \n        for friend in friend_order:\n            location, start, end, min_duration = friends[friend]\n            travel_time = travel_times[current_location][location]\n            \n            if can_schedule(current_time, travel_time, start, end, min_duration):\n                arrival_time = current_time + travel_time\n                start_time = max(arrival_time, time_to_minutes(start))\n                end_time = start_time + min_duration\n                \n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": friend,\n                    \"start_time\": minutes_to_time(start_time),\n                    \"end_time\": minutes_to_time(end_time)\n                })\n                \n                current_location = location\n                current_time = end_time\n        \n        # Check if we can fit Steven (must meet last)\n        if \"Steven\" not in [x[\"person\"] for x in schedule]:\n            friend = \"Steven\"\n            location, start, end, min_duration = friends[friend]\n            travel_time = travel_times[current_location][location]\n            \n            if can_schedule(current_time, travel_time, start, end, min_duration):\n                arrival_time = current_time + travel_time\n                start_time = max(arrival_time, time_to_minutes(start))\n                end_time = start_time + min_duration\n                \n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": friend,\n                    \"start_time\": minutes_to_time(start_time),\n                    \"end_time\": minutes_to_time(end_time)\n                })\n        \n        if len(schedule) > max_meetings:\n            max_meetings = len(schedule)\n            best_schedule = schedule\n    \n    return best_schedule\n\n# Find a feasible schedule (not necessarily optimal due to complexity)\ndef find_feasible_schedule():\n    current_location = \"Pacific Heights\"\n    current_time = time_to_minutes(\"9:00\")\n    schedule = []\n    \n    # Meet Deborah first (earliest availability)\n    friend = \"Deborah\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Helen next\n    friend = \"Helen\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Matthew\n    friend = \"Matthew\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Joseph\n    friend = \"Joseph\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Rebecca\n    friend = \"Rebecca\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Ronald\n    friend = \"Ronald\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Robert\n    friend = \"Robert\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Elizabeth\n    friend = \"Elizabeth\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": friend,\n        \"start_time\": minutes_to_time(start_time),\n        \"end_time\": minutes_to_time(end_time)\n    })\n    current_location = location\n    current_time = end_time\n    \n    # Meet Steven\n    friend = \"Steven\"\n    location, start, end, min_duration = friends[friend]\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    start_time = max(arrival_time, time_to_minutes(start))\n    end_time = start_time + min_duration\n    if end_time <= time_to_minutes(end):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": friend,\n            \"start_time\": minutes_to_time(start_time),\n            \"end_time\": minutes_to_time(end_time)\n        })\n    \n    return schedule\n\nschedule = find_feasible_schedule()\noutput = {\"itinerary\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_835"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "13:38",
                        "end_time": "15:38"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "13:38",
                        "end_time": "15:38"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule():\n    # Locations\n    locations = ['Haight-Ashbury', 'Mission District', 'Bayview', 'Pacific Heights', 'Russian Hill', 'Fisherman\\'s Wharf']\n    \n    # Travel times (from_location, to_location): minutes\n    travel_times = {\n        ('Haight-Ashbury', 'Mission District'): 11,\n        ('Haight-Ashbury', 'Bayview'): 18,\n        ('Haight-Ashbury', 'Pacific Heights'): 12,\n        ('Haight-Ashbury', 'Russian Hill'): 17,\n        ('Haight-Ashbury', 'Fisherman\\'s Wharf'): 23,\n        ('Mission District', 'Haight-Ashbury'): 12,\n        ('Mission District', 'Bayview'): 15,\n        ('Mission District', 'Pacific Heights'): 16,\n        ('Mission District', 'Russian Hill'): 15,\n        ('Mission District', 'Fisherman\\'s Wharf'): 22,\n        ('Bayview', 'Haight-Ashbury'): 19,\n        ('Bayview', 'Mission District'): 13,\n        ('Bayview', 'Pacific Heights'): 23,\n        ('Bayview', 'Russian Hill'): 23,\n        ('Bayview', 'Fisherman\\'s Wharf'): 25,\n        ('Pacific Heights', 'Haight-Ashbury'): 11,\n        ('Pacific Heights', 'Mission District'): 15,\n        ('Pacific Heights', 'Bayview'): 22,\n        ('Pacific Heights', 'Russian Hill'): 7,\n        ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n        ('Russian Hill', 'Haight-Ashbury'): 17,\n        ('Russian Hill', 'Mission District'): 16,\n        ('Russian Hill', 'Bayview'): 23,\n        ('Russian Hill', 'Pacific Heights'): 7,\n        ('Russian Hill', 'Fisherman\\'s Wharf'): 7,\n        ('Fisherman\\'s Wharf', 'Haight-Ashbury'): 22,\n        ('Fisherman\\'s Wharf', 'Mission District'): 22,\n        ('Fisherman\\'s Wharf', 'Bayview'): 26,\n        ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n        ('Fisherman\\'s Wharf', 'Russian Hill'): 7\n    }\n    \n    # People and their constraints\n    people = [\n        {\n            'name': 'Stephanie',\n            'location': 'Mission District',\n            'available_start': '8:15',\n            'available_end': '13:45',\n            'min_duration': 90\n        },\n        {\n            'name': 'Sandra',\n            'location': 'Bayview',\n            'available_start': '13:00',\n            'available_end': '19:30',\n            'min_duration': 15\n        },\n        {\n            'name': 'Richard',\n            'location': 'Pacific Heights',\n            'available_start': '7:15',\n            'available_end': '10:15',\n            'min_duration': 75\n        },\n        {\n            'name': 'Brian',\n            'location': 'Russian Hill',\n            'available_start': '12:15',\n            'available_end': '16:00',\n            'min_duration': 120\n        },\n        {\n            'name': 'Jason',\n            'location': 'Fisherman\\'s Wharf',\n            'available_start': '8:30',\n            'available_end': '17:45',\n            'min_duration': 60\n        }\n    ]\n    \n    # Current time starts at 9:00 AM at Haight-Ashbury\n    current_time = time_to_minutes('9:00')\n    current_location = 'Haight-Ashbury'\n    \n    # Generate all possible orders to meet people\n    best_schedule = []\n    max_meetings = 0\n    \n    for order in permutations(people):\n        schedule = []\n        temp_time = current_time\n        temp_location = current_location\n        meetings = 0\n        \n        for person in order:\n            # Calculate travel time\n            travel_time = travel_times.get((temp_location, person['location']), None)\n            if travel_time is None:\n                continue  # Shouldn't happen as all pairs are defined\n            \n            arrival_time = temp_time + travel_time\n            available_start = time_to_minutes(person['available_start'])\n            available_end = time_to_minutes(person['available_end'])\n            \n            # Check if we can meet this person\n            meeting_start = max(arrival_time, available_start)\n            meeting_end = meeting_start + person['min_duration']\n            \n            if meeting_end <= available_end:\n                schedule.append({\n                    'action': 'meet',\n                    'location': person['location'],\n                    'person': person['name'],\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                meetings += 1\n                temp_time = meeting_end\n                temp_location = person['location']\n            else:\n                break  # Can't meet this person in this order\n        \n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_schedule = schedule\n        elif meetings == max_meetings and len(schedule) > len(best_schedule):\n            best_schedule = schedule\n    \n    return {'itinerary': best_schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_482"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "14:30",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "16:37",
                        "end_time": "17:07"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "15:00",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "15:40",
                        "end_time": "17:40"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule():\n    # Travel times dictionary: {from_location: {to_location: minutes}}\n    travel_times = {\n        'Financial District': {\n            'Golden Gate Park': 23,\n            'Chinatown': 5,\n            'Union Square': 9,\n            'Fisherman\\'s Wharf': 10,\n            'Pacific Heights': 13,\n            'North Beach': 7\n        },\n        'Golden Gate Park': {\n            'Financial District': 26,\n            'Chinatown': 23,\n            'Union Square': 22,\n            'Fisherman\\'s Wharf': 24,\n            'Pacific Heights': 16,\n            'North Beach': 24\n        },\n        'Chinatown': {\n            'Financial District': 5,\n            'Golden Gate Park': 23,\n            'Union Square': 7,\n            'Fisherman\\'s Wharf': 8,\n            'Pacific Heights': 10,\n            'North Beach': 3\n        },\n        'Union Square': {\n            'Financial District': 9,\n            'Golden Gate Park': 22,\n            'Chinatown': 7,\n            'Fisherman\\'s Wharf': 15,\n            'Pacific Heights': 15,\n            'North Beach': 10\n        },\n        'Fisherman\\'s Wharf': {\n            'Financial District': 11,\n            'Golden Gate Park': 25,\n            'Chinatown': 12,\n            'Union Square': 13,\n            'Pacific Heights': 12,\n            'North Beach': 6\n        },\n        'Pacific Heights': {\n            'Financial District': 13,\n            'Golden Gate Park': 15,\n            'Chinatown': 11,\n            'Union Square': 12,\n            'Fisherman\\'s Wharf': 13,\n            'North Beach': 9\n        },\n        'North Beach': {\n            'Financial District': 8,\n            'Golden Gate Park': 22,\n            'Chinatown': 6,\n            'Union Square': 7,\n            'Fisherman\\'s Wharf': 5,\n            'Pacific Heights': 8\n        }\n    }\n\n    # Friend constraints\n    friends = [\n        {'name': 'Stephanie', 'location': 'Golden Gate Park', 'start': '11:00', 'end': '15:00', 'duration': 105},\n        {'name': 'Karen', 'location': 'Chinatown', 'start': '13:45', 'end': '16:30', 'duration': 15},\n        {'name': 'Brian', 'location': 'Union Square', 'start': '15:00', 'end': '17:15', 'duration': 30},\n        {'name': 'Rebecca', 'location': 'Fisherman\\'s Wharf', 'start': '8:00', 'end': '11:15', 'duration': 30},\n        {'name': 'Joseph', 'location': 'Pacific Heights', 'start': '8:15', 'end': '9:30', 'duration': 60},\n        {'name': 'Steven', 'location': 'North Beach', 'start': '14:30', 'end': '20:45', 'duration': 120}\n    ]\n\n    current_time = time_to_minutes('9:00')\n    current_location = 'Financial District'\n    itinerary = []\n\n    # Try to meet Joseph first (earliest availability)\n    joseph = next(f for f in friends if f['name'] == 'Joseph')\n    travel_time = travel_times[current_location][joseph['location']]\n    arrival_time = current_time + travel_time\n    joseph_start = time_to_minutes(joseph['start'])\n    joseph_end = time_to_minutes(joseph['end'])\n    \n    if arrival_time <= joseph_end - joseph['duration']:\n        meet_start = max(arrival_time, joseph_start)\n        meet_end = meet_start + joseph['duration']\n        if meet_end <= joseph_end:\n            itinerary.append({\n                'action': 'meet',\n                'location': joseph['location'],\n                'person': joseph['name'],\n                'start_time': minutes_to_time(meet_start),\n                'end_time': minutes_to_time(meet_end)\n            })\n            current_time = meet_end\n            current_location = joseph['location']\n\n    # Try to meet Rebecca next\n    rebecca = next(f for f in friends if f['name'] == 'Rebecca')\n    travel_time = travel_times[current_location][rebecca['location']]\n    arrival_time = current_time + travel_time\n    rebecca_start = time_to_minutes(rebecca['start'])\n    rebecca_end = time_to_minutes(rebecca['end'])\n    \n    if arrival_time <= rebecca_end - rebecca['duration']:\n        meet_start = max(arrival_time, rebecca_start)\n        meet_end = meet_start + rebecca['duration']\n        if meet_end <= rebecca_end:\n            itinerary.append({\n                'action': 'meet',\n                'location': rebecca['location'],\n                'person': rebecca['name'],\n                'start_time': minutes_to_time(meet_start),\n                'end_time': minutes_to_time(meet_end)\n            })\n            current_time = meet_end\n            current_location = rebecca['location']\n\n    # Try to meet Stephanie next\n    stephanie = next(f for f in friends if f['name'] == 'Stephanie')\n    travel_time = travel_times[current_location][stephanie['location']]\n    arrival_time = current_time + travel_time\n    stephanie_start = time_to_minutes(stephanie['start'])\n    stephanie_end = time_to_minutes(stephanie['end'])\n    \n    if arrival_time <= stephanie_end - stephanie['duration']:\n        meet_start = max(arrival_time, stephanie_start)\n        meet_end = meet_start + stephanie['duration']\n        if meet_end <= stephanie_end:\n            itinerary.append({\n                'action': 'meet',\n                'location': stephanie['location'],\n                'person': stephanie['name'],\n                'start_time': minutes_to_time(meet_start),\n                'end_time': minutes_to_time(meet_end)\n            })\n            current_time = meet_end\n            current_location = stephanie['location']\n\n    # Try to meet Karen next\n    karen = next(f for f in friends if f['name'] == 'Karen')\n    travel_time = travel_times[current_location][karen['location']]\n    arrival_time = current_time + travel_time\n    karen_start = time_to_minutes(karen['start'])\n    karen_end = time_to_minutes(karen['end'])\n    \n    if arrival_time <= karen_end - karen['duration']:\n        meet_start = max(arrival_time, karen_start)\n        meet_end = meet_start + karen['duration']\n        if meet_end <= karen_end:\n            itinerary.append({\n                'action': 'meet',\n                'location': karen['location'],\n                'person': karen['name'],\n                'start_time': minutes_to_time(meet_start),\n                'end_time': minutes_to_time(meet_end)\n            })\n            current_time = meet_end\n            current_location = karen['location']\n\n    # Try to meet Steven next\n    steven = next(f for f in friends if f['name'] == 'Steven')\n    travel_time = travel_times[current_location][steven['location']]\n    arrival_time = current_time + travel_time\n    steven_start = time_to_minutes(steven['start'])\n    steven_end = time_to_minutes(steven['end'])\n    \n    if arrival_time <= steven_end - steven['duration']:\n        meet_start = max(arrival_time, steven_start)\n        meet_end = meet_start + steven['duration']\n        if meet_end <= steven_end:\n            itinerary.append({\n                'action': 'meet',\n                'location': steven['location'],\n                'person': steven['name'],\n                'start_time': minutes_to_time(meet_start),\n                'end_time': minutes_to_time(meet_end)\n            })\n            current_time = meet_end\n            current_location = steven['location']\n\n    # Try to meet Brian last\n    brian = next(f for f in friends if f['name'] == 'Brian')\n    travel_time = travel_times[current_location][brian['location']]\n    arrival_time = current_time + travel_time\n    brian_start = time_to_minutes(brian['start'])\n    brian_end = time_to_minutes(brian['end'])\n    \n    if arrival_time <= brian_end - brian['duration']:\n        meet_start = max(arrival_time, brian_start)\n        meet_end = meet_start + brian['duration']\n        if meet_end <= brian_end:\n            itinerary.append({\n                'action': 'meet',\n                'location': brian['location'],\n                'person': brian['name'],\n                'start_time': minutes_to_time(meet_start),\n                'end_time': minutes_to_time(meet_end)\n            })\n\n    return {'itinerary': itinerary}\n\nif __name__ == '__main__':\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_502"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "17:07",
                        "end_time": "18:22"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "17:07",
                        "end_time": "18:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    ('Sunset District', 'North Beach'): 29,\n    ('Sunset District', 'Union Square'): 30,\n    ('Sunset District', 'Alamo Square'): 17,\n    ('North Beach', 'Sunset District'): 27,\n    ('North Beach', 'Union Square'): 7,\n    ('North Beach', 'Alamo Square'): 16,\n    ('Union Square', 'Sunset District'): 26,\n    ('Union Square', 'North Beach'): 10,\n    ('Union Square', 'Alamo Square'): 15,\n    ('Alamo Square', 'Sunset District'): 16,\n    ('Alamo Square', 'North Beach'): 15,\n    ('Alamo Square', 'Union Square'): 14,\n}\n\nfriends = {\n    'Sarah': {\n        'location': 'North Beach',\n        'available_start': '16:00',\n        'available_end': '18:15',\n        'min_duration': 60\n    },\n    'Jeffrey': {\n        'location': 'Union Square',\n        'available_start': '15:00',\n        'available_end': '22:00',\n        'min_duration': 75\n    },\n    'Brian': {\n        'location': 'Alamo Square',\n        'available_start': '16:00',\n        'available_end': '17:30',\n        'min_duration': 75\n    }\n}\n\ncurrent_location = 'Sunset District'\ncurrent_time = time_to_minutes('9:00')\n\n# Generate all possible meeting orders\nmeeting_orders = permutations(friends.keys())\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in meeting_orders:\n    schedule = []\n    temp_location = current_location\n    temp_time = current_time\n    meetings = 0\n    \n    for person in order:\n        friend = friends[person]\n        location = friend['location']\n        travel_time = travel_times[(temp_location, location)]\n        arrival_time = temp_time + travel_time\n        \n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        # Calculate possible meeting start and end times\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end > available_end:\n            continue  # Can't meet this friend\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': person,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        meetings += 1\n        temp_location = location\n        temp_time = meeting_end\n    \n    if meetings > best_meetings:\n        best_meetings = meetings\n        best_schedule = schedule\n    elif meetings == best_meetings and best_schedule is None:\n        best_schedule = schedule\n\nif best_schedule is None:\n    best_schedule = []\n\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_225"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "9:24",
                        "end_time": "9:54"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "10:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Charles",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "20:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "9:24",
                        "end_time": "9:54"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "10:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Charles",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "20:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Sunset District': {\n        'Alamo Square': 17,\n        'Russian Hill': 24,\n        'Golden Gate Park': 11,\n        'Mission District': 24\n    },\n    'Alamo Square': {\n        'Sunset District': 16,\n        'Russian Hill': 13,\n        'Golden Gate Park': 9,\n        'Mission District': 10\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Alamo Square': 15,\n        'Golden Gate Park': 21,\n        'Mission District': 16\n    },\n    'Golden Gate Park': {\n        'Sunset District': 10,\n        'Alamo Square': 10,\n        'Russian Hill': 19,\n        'Mission District': 17\n    },\n    'Mission District': {\n        'Sunset District': 24,\n        'Alamo Square': 11,\n        'Russian Hill': 15,\n        'Golden Gate Park': 17\n    }\n}\n\n# Friend availability\nfriends = {\n    'Charles': {\n        'location': 'Alamo Square',\n        'start': 18 * 60,  # 6:00 PM in minutes\n        'end': 20 * 60 + 45,  # 8:45 PM in minutes\n        'duration': 90  # minutes\n    },\n    'Margaret': {\n        'location': 'Russian Hill',\n        'start': 9 * 60,  # 9:00 AM in minutes\n        'end': 16 * 60,  # 4:00 PM in minutes\n        'duration': 30  # minutes\n    },\n    'Daniel': {\n        'location': 'Golden Gate Park',\n        'start': 8 * 60,  # 8:00 AM in minutes\n        'end': 13 * 60 + 30,  # 1:30 PM in minutes\n        'duration': 15  # minutes\n    },\n    'Stephanie': {\n        'location': 'Mission District',\n        'start': 20 * 60 + 30,  # 8:30 PM in minutes\n        'end': 22 * 60,  # 10:00 PM in minutes\n        'duration': 90  # minutes\n    }\n}\n\ndef time_to_str(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef find_best_schedule():\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all possible orders of meeting friends\n    for order in permutations(friends.keys()):\n        current_location = 'Sunset District'\n        current_time = 9 * 60  # 9:00 AM\n        schedule = []\n        meetings = 0\n        \n        for person in order:\n            friend = friends[person]\n            location = friend['location']\n            travel_time = travel_times[current_location][location]\n            arrival_time = current_time + travel_time\n            \n            # Calculate possible meeting window\n            meeting_start = max(arrival_time, friend['start'])\n            meeting_end = meeting_start + friend['duration']\n            \n            if meeting_end > friend['end']:\n                # Can't meet this friend in this order\n                break\n                \n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': person,\n                'start_time': time_to_str(meeting_start),\n                'end_time': time_to_str(meeting_end)\n            })\n            \n            current_time = meeting_end\n            current_location = location\n            meetings += 1\n        \n        if meetings > max_meetings or (meetings == max_meetings and current_time < best_schedule['end_time']):\n            max_meetings = meetings\n            best_schedule = {\n                'itinerary': schedule,\n                'end_time': current_time\n            }\n    \n    return best_schedule['itinerary'] if best_schedule else []\n\ndef main():\n    itinerary = find_best_schedule()\n    print(json.dumps({'itinerary': itinerary}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_372"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Daniel",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kevin",
                        "start_time": "13:41",
                        "end_time": "14:11"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Betty",
                        "start_time": "14:31",
                        "end_time": "15:01"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Steven",
                        "start_time": "16:30",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Lisa",
                        "start_time": "19:15",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Mission District': {\n        'The Castro': 7,\n        'Nob Hill': 12,\n        'Presidio': 25,\n        'Marina District': 19,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 17,\n        'Chinatown': 16,\n        'Richmond District': 20\n    },\n    'The Castro': {\n        'Mission District': 7,\n        'Nob Hill': 16,\n        'Presidio': 20,\n        'Marina District': 21,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 11,\n        'Chinatown': 22,\n        'Richmond District': 16\n    },\n    'Nob Hill': {\n        'Mission District': 13,\n        'The Castro': 17,\n        'Presidio': 17,\n        'Marina District': 11,\n        'Pacific Heights': 8,\n        'Golden Gate Park': 17,\n        'Chinatown': 6,\n        'Richmond District': 14\n    },\n    'Presidio': {\n        'Mission District': 26,\n        'The Castro': 21,\n        'Nob Hill': 18,\n        'Marina District': 11,\n        'Pacific Heights': 11,\n        'Golden Gate Park': 12,\n        'Chinatown': 21,\n        'Richmond District': 7\n    },\n    'Marina District': {\n        'Mission District': 20,\n        'The Castro': 22,\n        'Nob Hill': 12,\n        'Presidio': 10,\n        'Pacific Heights': 7,\n        'Golden Gate Park': 18,\n        'Chinatown': 15,\n        'Richmond District': 11\n    },\n    'Pacific Heights': {\n        'Mission District': 15,\n        'The Castro': 16,\n        'Nob Hill': 8,\n        'Presidio': 11,\n        'Marina District': 6,\n        'Golden Gate Park': 15,\n        'Chinatown': 11,\n        'Richmond District': 12\n    },\n    'Golden Gate Park': {\n        'Mission District': 17,\n        'The Castro': 13,\n        'Nob Hill': 20,\n        'Presidio': 11,\n        'Marina District': 16,\n        'Pacific Heights': 16,\n        'Chinatown': 23,\n        'Richmond District': 7\n    },\n    'Chinatown': {\n        'Mission District': 17,\n        'The Castro': 22,\n        'Nob Hill': 9,\n        'Presidio': 19,\n        'Marina District': 12,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 23,\n        'Richmond District': 20\n    },\n    'Richmond District': {\n        'Mission District': 20,\n        'The Castro': 16,\n        'Nob Hill': 17,\n        'Presidio': 7,\n        'Marina District': 9,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9,\n        'Chinatown': 20\n    }\n}\n\nfriends = [\n    {\n        'name': 'Lisa',\n        'location': 'The Castro',\n        'available_start': '19:15',\n        'available_end': '21:15',\n        'min_duration': 120\n    },\n    {\n        'name': 'Daniel',\n        'location': 'Nob Hill',\n        'available_start': '8:15',\n        'available_end': '11:00',\n        'min_duration': 15\n    },\n    {\n        'name': 'Elizabeth',\n        'location': 'Presidio',\n        'available_start': '21:15',\n        'available_end': '22:15',\n        'min_duration': 45\n    },\n    {\n        'name': 'Steven',\n        'location': 'Marina District',\n        'available_start': '16:30',\n        'available_end': '20:45',\n        'min_duration': 90\n    },\n    {\n        'name': 'Timothy',\n        'location': 'Pacific Heights',\n        'available_start': '12:00',\n        'available_end': '18:00',\n        'min_duration': 90\n    },\n    {\n        'name': 'Ashley',\n        'location': 'Golden Gate Park',\n        'available_start': '20:45',\n        'available_end': '21:45',\n        'min_duration': 60\n    },\n    {\n        'name': 'Kevin',\n        'location': 'Chinatown',\n        'available_start': '12:00',\n        'available_end': '19:00',\n        'min_duration': 30\n    },\n    {\n        'name': 'Betty',\n        'location': 'Richmond District',\n        'available_start': '13:15',\n        'available_end': '15:45',\n        'min_duration': 30\n    }\n]\n\ncurrent_location = 'Mission District'\ncurrent_time = time_to_minutes('9:00')\n\ndef evaluate_schedule(order):\n    global current_location, current_time\n    itinerary = []\n    temp_location = current_location\n    temp_time = current_time\n    \n    for friend_idx in order:\n        friend = friends[friend_idx]\n        location = friend['location']\n        travel_time = travel_times[temp_location][location]\n        \n        arrival_time = temp_time + travel_time\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        start_time = max(arrival_time, available_start)\n        end_time = min(start_time + min_duration, available_end)\n        \n        if end_time - start_time < min_duration:\n            return None\n        \n        itinerary.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        \n        temp_location = location\n        temp_time = end_time\n    \n    return itinerary\n\nbest_itinerary = None\nmax_meetings = 0\n\n# Try all possible orders of meeting friends\nfor order in permutations(range(len(friends))):\n    itinerary = evaluate_schedule(order)\n    if itinerary and len(itinerary) > max_meetings:\n        max_meetings = len(itinerary)\n        best_itinerary = itinerary\n    elif itinerary and len(itinerary) == max_meetings:\n        # Prefer longer total meeting time\n        current_duration = sum(time_to_minutes(item['end_time']) - time_to_minutes(item['start_time']) for item in itinerary)\n        best_duration = sum(time_to_minutes(item['end_time']) - time_to_minutes(item['start_time']) for item in best_itinerary)\n        if current_duration > best_duration:\n            best_itinerary = itinerary\n\n# After finding the best itinerary, check if we can add more meetings\nif best_itinerary:\n    remaining_friends = [f for f in friends if f['name'] not in [item['person'] for item in best_itinerary]]\n    \n    for friend in remaining_friends:\n        last_meeting = best_itinerary[-1]\n        temp_location = last_meeting['location']\n        temp_time = time_to_minutes(last_meeting['end_time'])\n        \n        location = friend['location']\n        travel_time = travel_times[temp_location][location]\n        \n        arrival_time = temp_time + travel_time\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        start_time = max(arrival_time, available_start)\n        end_time = min(start_time + min_duration, available_end)\n        \n        if end_time - start_time >= min_duration:\n            best_itinerary.append({\n                'action': 'meet',\n                'location': location,\n                'person': friend['name'],\n                'start_time': minutes_to_time(start_time),\n                'end_time': minutes_to_time(end_time)\n            })\n\noutput = {\"itinerary\": best_itinerary} if best_itinerary else {\"itinerary\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_701"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "9:20",
                        "end_time": "11:05"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "11:25",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Helen",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "18:34",
                        "end_time": "19:49"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Lisa",
                        "start_time": "19:56",
                        "end_time": "20:41"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "9:20",
                        "end_time": "11:05"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "11:25",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Lisa",
                        "start_time": "18:07",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Timothy",
                        "start_time": "19:45",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'The Castro': {\n        'Marina District': 21,\n        'Presidio': 20,\n        'North Beach': 20,\n        'Embarcadero': 22,\n        'Haight-Ashbury': 6,\n        'Golden Gate Park': 11,\n        'Richmond District': 16,\n        'Alamo Square': 8,\n        'Financial District': 21,\n        'Sunset District': 17\n    },\n    'Marina District': {\n        'The Castro': 22,\n        'Presidio': 10,\n        'North Beach': 11,\n        'Embarcadero': 14,\n        'Haight-Ashbury': 16,\n        'Golden Gate Park': 18,\n        'Richmond District': 11,\n        'Alamo Square': 15,\n        'Financial District': 17,\n        'Sunset District': 19\n    },\n    'Presidio': {\n        'The Castro': 21,\n        'Marina District': 11,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Haight-Ashbury': 15,\n        'Golden Gate Park': 12,\n        'Richmond District': 7,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'Sunset District': 15\n    },\n    'North Beach': {\n        'The Castro': 23,\n        'Marina District': 9,\n        'Presidio': 17,\n        'Embarcadero': 6,\n        'Haight-Ashbury': 18,\n        'Golden Gate Park': 22,\n        'Richmond District': 18,\n        'Alamo Square': 16,\n        'Financial District': 8,\n        'Sunset District': 27\n    },\n    'Embarcadero': {\n        'The Castro': 25,\n        'Marina District': 12,\n        'Presidio': 20,\n        'North Beach': 5,\n        'Haight-Ashbury': 21,\n        'Golden Gate Park': 25,\n        'Richmond District': 21,\n        'Alamo Square': 19,\n        'Financial District': 5,\n        'Sunset District': 30\n    },\n    'Haight-Ashbury': {\n        'The Castro': 6,\n        'Marina District': 17,\n        'Presidio': 15,\n        'North Beach': 19,\n        'Embarcadero': 20,\n        'Golden Gate Park': 7,\n        'Richmond District': 10,\n        'Alamo Square': 5,\n        'Financial District': 21,\n        'Sunset District': 15\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Marina District': 16,\n        'Presidio': 11,\n        'North Beach': 23,\n        'Embarcadero': 25,\n        'Haight-Ashbury': 7,\n        'Richmond District': 7,\n        'Alamo Square': 9,\n        'Financial District': 26,\n        'Sunset District': 10\n    },\n    'Richmond District': {\n        'The Castro': 16,\n        'Marina District': 9,\n        'Presidio': 7,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Haight-Ashbury': 10,\n        'Golden Gate Park': 9,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Sunset District': 11\n    },\n    'Alamo Square': {\n        'The Castro': 8,\n        'Marina District': 15,\n        'Presidio': 17,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Haight-Ashbury': 5,\n        'Golden Gate Park': 9,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Sunset District': 16\n    },\n    'Financial District': {\n        'The Castro': 20,\n        'Marina District': 15,\n        'Presidio': 22,\n        'North Beach': 7,\n        'Embarcadero': 4,\n        'Haight-Ashbury': 19,\n        'Golden Gate Park': 23,\n        'Richmond District': 21,\n        'Alamo Square': 17,\n        'Sunset District': 30\n    },\n    'Sunset District': {\n        'The Castro': 17,\n        'Marina District': 21,\n        'Presidio': 16,\n        'North Beach': 28,\n        'Embarcadero': 30,\n        'Haight-Ashbury': 15,\n        'Golden Gate Park': 11,\n        'Richmond District': 12,\n        'Alamo Square': 17,\n        'Financial District': 30\n    }\n}\n\nfriends = [\n    {'name': 'Elizabeth', 'location': 'Marina District', 'start': '19:00', 'end': '20:45', 'duration': 105},\n    {'name': 'Joshua', 'location': 'Presidio', 'start': '8:30', 'end': '13:15', 'duration': 105},\n    {'name': 'Timothy', 'location': 'North Beach', 'start': '19:45', 'end': '22:00', 'duration': 90},\n    {'name': 'David', 'location': 'Embarcadero', 'start': '10:45', 'end': '12:30', 'duration': 30},\n    {'name': 'Kimberly', 'location': 'Haight-Ashbury', 'start': '16:45', 'end': '21:30', 'duration': 75},\n    {'name': 'Lisa', 'location': 'Golden Gate Park', 'start': '17:30', 'end': '21:45', 'duration': 45},\n    {'name': 'Ronald', 'location': 'Richmond District', 'start': '8:00', 'end': '9:30', 'duration': 90},\n    {'name': 'Stephanie', 'location': 'Alamo Square', 'start': '15:30', 'end': '16:30', 'duration': 30},\n    {'name': 'Helen', 'location': 'Financial District', 'start': '17:30', 'end': '18:30', 'duration': 45},\n    {'name': 'Laura', 'location': 'Sunset District', 'start': '17:45', 'end': '21:15', 'duration': 90}\n]\n\n# Filter friends that can be met based on duration\nvalid_friends = [f for f in friends if time_to_minutes(f['end']) - time_to_minutes(f['start']) >= f['duration']]\n\n# Prioritize friends with tighter time windows\nvalid_friends.sort(key=lambda x: time_to_minutes(x['end']) - time_to_minutes(x['start']))\n\ncurrent_time = time_to_minutes('9:00')\ncurrent_location = 'The Castro'\nitinerary = []\n\n# Try to meet Ronald first (earliest)\nronald = next(f for f in valid_friends if f['name'] == 'Ronald')\ntravel_time = travel_times[current_location][ronald['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(ronald['end']) - ronald['duration']:\n    start_time = max(arrival_time, time_to_minutes(ronald['start']))\n    end_time = start_time + ronald['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': ronald['location'],\n        'person': ronald['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = ronald['location']\n    valid_friends.remove(ronald)\n\n# Next try Joshua\njoshua = next(f for f in valid_friends if f['name'] == 'Joshua')\ntravel_time = travel_times[current_location][joshua['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(joshua['end']) - joshua['duration']:\n    start_time = max(arrival_time, time_to_minutes(joshua['start']))\n    end_time = start_time + joshua['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': joshua['location'],\n        'person': joshua['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = joshua['location']\n    valid_friends.remove(joshua)\n\n# Next try David\ndavid = next(f for f in valid_friends if f['name'] == 'David')\ntravel_time = travel_times[current_location][david['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(david['end']) - david['duration']:\n    start_time = max(arrival_time, time_to_minutes(david['start']))\n    end_time = start_time + david['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': david['location'],\n        'person': david['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = david['location']\n    valid_friends.remove(david)\n\n# Next try Stephanie\nstephanie = next(f for f in valid_friends if f['name'] == 'Stephanie')\ntravel_time = travel_times[current_location][stephanie['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(stephanie['end']) - stephanie['duration']:\n    start_time = max(arrival_time, time_to_minutes(stephanie['start']))\n    end_time = start_time + stephanie['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': stephanie['location'],\n        'person': stephanie['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = stephanie['location']\n    valid_friends.remove(stephanie)\n\n# Next try Helen\nhelen = next(f for f in valid_friends if f['name'] == 'Helen')\ntravel_time = travel_times[current_location][helen['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(helen['end']) - helen['duration']:\n    start_time = max(arrival_time, time_to_minutes(helen['start']))\n    end_time = start_time + helen['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': helen['location'],\n        'person': helen['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = helen['location']\n    valid_friends.remove(helen)\n\n# Next try Kimberly\nkimberly = next(f for f in valid_friends if f['name'] == 'Kimberly')\ntravel_time = travel_times[current_location][kimberly['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(kimberly['end']) - kimberly['duration']:\n    start_time = max(arrival_time, time_to_minutes(kimberly['start']))\n    end_time = start_time + kimberly['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': kimberly['location'],\n        'person': kimberly['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = kimberly['location']\n    valid_friends.remove(kimberly)\n\n# Next try Lisa\nlisa = next(f for f in valid_friends if f['name'] == 'Lisa')\ntravel_time = travel_times[current_location][lisa['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(lisa['end']) - lisa['duration']:\n    start_time = max(arrival_time, time_to_minutes(lisa['start']))\n    end_time = start_time + lisa['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': lisa['location'],\n        'person': lisa['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = lisa['location']\n    valid_friends.remove(lisa)\n\n# Next try Laura\nlaura = next(f for f in valid_friends if f['name'] == 'Laura')\ntravel_time = travel_times[current_location][laura['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(laura['end']) - laura['duration']:\n    start_time = max(arrival_time, time_to_minutes(laura['start']))\n    end_time = start_time + laura['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': laura['location'],\n        'person': laura['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = laura['location']\n    valid_friends.remove(laura)\n\n# Finally try Elizabeth and Timothy (late evening)\nelizabeth = next(f for f in valid_friends if f['name'] == 'Elizabeth')\ntravel_time = travel_times[current_location][elizabeth['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(elizabeth['end']) - elizabeth['duration']:\n    start_time = max(arrival_time, time_to_minutes(elizabeth['start']))\n    end_time = start_time + elizabeth['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': elizabeth['location'],\n        'person': elizabeth['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n    current_time = end_time\n    current_location = elizabeth['location']\n    valid_friends.remove(elizabeth)\n\ntimothy = next(f for f in valid_friends if f['name'] == 'Timothy')\ntravel_time = travel_times[current_location][timothy['location']]\narrival_time = current_time + travel_time\nif arrival_time <= time_to_minutes(timothy['end']) - timothy['duration']:\n    start_time = max(arrival_time, time_to_minutes(timothy['start']))\n    end_time = start_time + timothy['duration']\n    itinerary.append({\n        'action': 'meet',\n        'location': timothy['location'],\n        'person': timothy['name'],\n        'start_time': minutes_to_time(start_time),\n        'end_time': minutes_to_time(end_time)\n    })\n\nprint(json.dumps({'itinerary': itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_962"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joshua",
                        "start_time": "21:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joshua",
                        "start_time": "20:45",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00\", \"%H:%M\")\n    joshua_start = datetime.strptime(\"20:45\", \"%H:%M\")\n    joshua_end = datetime.strptime(\"21:45\", \"%H:%M\")\n    min_meeting_duration = timedelta(minutes=15)\n    sunset_to_golden_gate = timedelta(minutes=11)\n    golden_gate_to_sunset = timedelta(minutes=10)\n    \n    # Calculate latest departure time to meet Joshua\n    latest_departure_from_sunset = joshua_start + min_meeting_duration - sunset_to_golden_gate\n    if latest_departure_from_sunset < arrival_time:\n        # Cannot meet Joshua\n        itinerary = []\n    else:\n        # Can meet Joshua\n        travel_start = latest_departure_from_sunset\n        travel_end = travel_start + sunset_to_golden_gate\n        meeting_end = min(travel_end + min_meeting_duration, joshua_end)\n        \n        itinerary = [\n            {\n                \"action\": \"travel\",\n                \"location\": \"Sunset District to Golden Gate Park\",\n                \"person\": None,\n                \"start_time\": travel_start.strftime(\"%-H:%M\"),\n                \"end_time\": travel_end.strftime(\"%-H:%M\")\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Golden Gate Park\",\n                \"person\": \"Joshua\",\n                \"start_time\": travel_end.strftime(\"%-H:%M\"),\n                \"end_time\": meeting_end.strftime(\"%-H:%M\")\n            }\n        ]\n    \n    return {\n        \"itinerary\": itinerary\n    }\n\nresult = calculate_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_88"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "9:26",
                        "end_time": "11:11"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Ronald",
                        "start_time": "11:27",
                        "end_time": "12:57"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "William",
                        "start_time": "14:39",
                        "end_time": "14:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Ashley",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "9:26",
                        "end_time": "11:11"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Ronald",
                        "start_time": "11:27",
                        "end_time": "12:57"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Ashley",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "William",
                        "start_time": "19:21",
                        "end_time": "19:36"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef compute_schedule():\n    # Travel times dictionary: from_location -> to_location -> minutes\n    travel_times = {\n        \"Presidio\": {\n            \"Golden Gate Park\": 12,\n            \"Bayview\": 31,\n            \"Chinatown\": 21,\n            \"North Beach\": 18,\n            \"Mission District\": 26\n        },\n        \"Golden Gate Park\": {\n            \"Presidio\": 11,\n            \"Bayview\": 23,\n            \"Chinatown\": 23,\n            \"North Beach\": 24,\n            \"Mission District\": 17\n        },\n        \"Bayview\": {\n            \"Presidio\": 31,\n            \"Golden Gate Park\": 22,\n            \"Chinatown\": 18,\n            \"North Beach\": 21,\n            \"Mission District\": 13\n        },\n        \"Chinatown\": {\n            \"Presidio\": 19,\n            \"Golden Gate Park\": 23,\n            \"Bayview\": 22,\n            \"North Beach\": 3,\n            \"Mission District\": 18\n        },\n        \"North Beach\": {\n            \"Presidio\": 17,\n            \"Golden Gate Park\": 22,\n            \"Bayview\": 22,\n            \"Chinatown\": 6,\n            \"Mission District\": 18\n        },\n        \"Mission District\": {\n            \"Presidio\": 25,\n            \"Golden Gate Park\": 17,\n            \"Bayview\": 15,\n            \"Chinatown\": 16,\n            \"North Beach\": 17\n        }\n    }\n\n    # Friend constraints\n    friends = [\n        {\n            \"name\": \"Jessica\",\n            \"location\": \"Golden Gate Park\",\n            \"available_start\": \"13:45\",\n            \"available_end\": \"15:00\",\n            \"min_duration\": 30\n        },\n        {\n            \"name\": \"Ashley\",\n            \"location\": \"Bayview\",\n            \"available_start\": \"17:15\",\n            \"available_end\": \"20:00\",\n            \"min_duration\": 105\n        },\n        {\n            \"name\": \"Ronald\",\n            \"location\": \"Chinatown\",\n            \"available_start\": \"7:15\",\n            \"available_end\": \"14:45\",\n            \"min_duration\": 90\n        },\n        {\n            \"name\": \"William\",\n            \"location\": \"North Beach\",\n            \"available_start\": \"13:15\",\n            \"available_end\": \"20:15\",\n            \"min_duration\": 15\n        },\n        {\n            \"name\": \"Daniel\",\n            \"location\": \"Mission District\",\n            \"available_start\": \"7:00\",\n            \"available_end\": \"11:15\",\n            \"min_duration\": 105\n        }\n    ]\n\n    current_location = \"Presidio\"\n    current_time = parse_time(\"9:00\")\n    itinerary = []\n\n    # Try to meet Daniel first (earliest availability)\n    daniel = next(f for f in friends if f[\"name\"] == \"Daniel\")\n    travel_time = travel_times[current_location][daniel[\"location\"]]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    available_start = parse_time(daniel[\"available_start\"])\n    available_end = parse_time(daniel[\"available_end\"])\n\n    if arrival_time < available_end:\n        start_time = max(arrival_time, available_start)\n        end_time = start_time + timedelta(minutes=daniel[\"min_duration\"])\n        if end_time <= available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": daniel[\"location\"],\n                \"person\": daniel[\"name\"],\n                \"start_time\": format_time(start_time),\n                \"end_time\": format_time(end_time)\n            })\n            current_location = daniel[\"location\"]\n            current_time = end_time\n            friends.remove(daniel)\n\n    # Try to meet Ronald next\n    ronald = next(f for f in friends if f[\"name\"] == \"Ronald\")\n    travel_time = travel_times[current_location][ronald[\"location\"]]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    available_start = parse_time(ronald[\"available_start\"])\n    available_end = parse_time(ronald[\"available_end\"])\n\n    if arrival_time < available_end:\n        start_time = max(arrival_time, available_start)\n        end_time = start_time + timedelta(minutes=ronald[\"min_duration\"])\n        if end_time <= available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": ronald[\"location\"],\n                \"person\": ronald[\"name\"],\n                \"start_time\": format_time(start_time),\n                \"end_time\": format_time(end_time)\n            })\n            current_location = ronald[\"location\"]\n            current_time = end_time\n            friends.remove(ronald)\n\n    # Try to meet Jessica next\n    jessica = next(f for f in friends if f[\"name\"] == \"Jessica\")\n    travel_time = travel_times[current_location][jessica[\"location\"]]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    available_start = parse_time(jessica[\"available_start\"])\n    available_end = parse_time(jessica[\"available_end\"])\n\n    if arrival_time < available_end:\n        start_time = max(arrival_time, available_start)\n        end_time = start_time + timedelta(minutes=jessica[\"min_duration\"])\n        if end_time <= available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": jessica[\"location\"],\n                \"person\": jessica[\"name\"],\n                \"start_time\": format_time(start_time),\n                \"end_time\": format_time(end_time)\n            })\n            current_location = jessica[\"location\"]\n            current_time = end_time\n            friends.remove(jessica)\n\n    # Try to meet William next\n    william = next(f for f in friends if f[\"name\"] == \"William\")\n    travel_time = travel_times[current_location][william[\"location\"]]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    available_start = parse_time(william[\"available_start\"])\n    available_end = parse_time(william[\"available_end\"])\n\n    if arrival_time < available_end:\n        start_time = max(arrival_time, available_start)\n        end_time = start_time + timedelta(minutes=william[\"min_duration\"])\n        if end_time <= available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": william[\"location\"],\n                \"person\": william[\"name\"],\n                \"start_time\": format_time(start_time),\n                \"end_time\": format_time(end_time)\n            })\n            current_location = william[\"location\"]\n            current_time = end_time\n            friends.remove(william)\n\n    # Try to meet Ashley last\n    ashley = next(f for f in friends if f[\"name\"] == \"Ashley\")\n    travel_time = travel_times[current_location][ashley[\"location\"]]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    available_start = parse_time(ashley[\"available_start\"])\n    available_end = parse_time(ashley[\"available_end\"])\n\n    if arrival_time < available_end:\n        start_time = max(arrival_time, available_start)\n        end_time = start_time + timedelta(minutes=ashley[\"min_duration\"])\n        if end_time <= available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": ashley[\"location\"],\n                \"person\": ashley[\"name\"],\n                \"start_time\": format_time(start_time),\n                \"end_time\": format_time(end_time)\n            })\n\n    return {\"itinerary\": itinerary}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_454"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input data\ntravel_times = {\n    ('Russian Hill', 'Nob Hill'): 5,\n    ('Russian Hill', 'Mission District'): 16,\n    ('Russian Hill', 'Embarcadero'): 8,\n    ('Nob Hill', 'Russian Hill'): 5,\n    ('Nob Hill', 'Mission District'): 13,\n    ('Nob Hill', 'Embarcadero'): 9,\n    ('Mission District', 'Russian Hill'): 15,\n    ('Mission District', 'Nob Hill'): 12,\n    ('Mission District', 'Embarcadero'): 19,\n    ('Embarcadero', 'Russian Hill'): 8,\n    ('Embarcadero', 'Nob Hill'): 10,\n    ('Embarcadero', 'Mission District'): 20\n}\n\nfriends = {\n    'Patricia': {\n        'location': 'Nob Hill',\n        'available_start': '18:30',\n        'available_end': '21:45',\n        'min_duration': 90\n    },\n    'Ashley': {\n        'location': 'Mission District',\n        'available_start': '20:30',\n        'available_end': '21:15',\n        'min_duration': 45\n    },\n    'Timothy': {\n        'location': 'Embarcadero',\n        'available_start': '9:45',\n        'available_end': '17:45',\n        'min_duration': 120\n    }\n}\n\ncurrent_location = 'Russian Hill'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    current_loc = current_location\n    current_time_val = current_time\n    \n    for friend in order:\n        friend_data = friends[friend]\n        loc = friend_data['location']\n        travel_time = travel_times[(current_loc, loc)]\n        \n        arrival_time = current_time_val + travel_time\n        available_start = time_to_minutes(friend_data['available_start'])\n        available_end = time_to_minutes(friend_data['available_end'])\n        min_duration = friend_data['min_duration']\n        \n        # Calculate meeting start and end\n        start_time = max(arrival_time, available_start)\n        end_time = start_time + min_duration\n        \n        if end_time > available_end:\n            return None  # Doesn't meet duration requirement\n        \n        schedule.append({\n            'friend': friend,\n            'location': loc,\n            'start_time': start_time,\n            'end_time': end_time,\n            'travel_time': travel_time\n        })\n        \n        current_loc = loc\n        current_time_val = end_time\n    \n    return schedule\n\n# Generate all possible meeting orders\nfriend_names = list(friends.keys())\npossible_orders = permutations(friend_names)\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in possible_orders:\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n    elif schedule and len(schedule) == best_meetings:\n        # Prefer schedules that meet more people earlier\n        pass\n\nif not best_schedule:\n    # Try to meet as many as possible even if not all\n    for num_to_meet in range(len(friend_names)-1, 0, -1):\n        for order in permutations(friend_names, num_to_meet):\n            schedule = calculate_schedule(order)\n            if schedule:\n                best_schedule = schedule\n                best_meetings = len(schedule)\n                break\n        if best_schedule:\n            break\n\n# Prepare output\noutput = {\"itinerary\": []}\nif best_schedule:\n    for meeting in best_schedule:\n        output[\"itinerary\"].append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['friend'],\n            \"start_time\": minutes_to_time(meeting['start_time']),\n            \"end_time\": minutes_to_time(meeting['end_time'])\n        })\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_272"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "9:30",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "13:53",
                        "end_time": "14:08"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "14:25",
                        "end_time": "14:40"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Carol",
                        "start_time": "18:15",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "James",
                        "start_time": "20:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "9:30",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "14:08",
                        "end_time": "14:23"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "14:43",
                        "end_time": "14:58"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Carol",
                        "start_time": "18:15",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "James",
                        "start_time": "20:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'North Beach': {\n        'Pacific Heights': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Mission District': 18,\n        'Golden Gate Park': 22,\n        'Nob Hill': 7\n    },\n    'Pacific Heights': {\n        'North Beach': 9,\n        'Chinatown': 11,\n        'Union Square': 12,\n        'Mission District': 15,\n        'Golden Gate Park': 15,\n        'Nob Hill': 8\n    },\n    'Chinatown': {\n        'North Beach': 3,\n        'Pacific Heights': 10,\n        'Union Square': 7,\n        'Mission District': 18,\n        'Golden Gate Park': 23,\n        'Nob Hill': 8\n    },\n    'Union Square': {\n        'North Beach': 10,\n        'Pacific Heights': 15,\n        'Chinatown': 7,\n        'Mission District': 14,\n        'Golden Gate Park': 22,\n        'Nob Hill': 9\n    },\n    'Mission District': {\n        'North Beach': 17,\n        'Pacific Heights': 16,\n        'Chinatown': 16,\n        'Union Square': 15,\n        'Golden Gate Park': 17,\n        'Nob Hill': 12\n    },\n    'Golden Gate Park': {\n        'North Beach': 24,\n        'Pacific Heights': 16,\n        'Chinatown': 23,\n        'Union Square': 22,\n        'Mission District': 17,\n        'Nob Hill': 20\n    },\n    'Nob Hill': {\n        'North Beach': 8,\n        'Pacific Heights': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Mission District': 13,\n        'Golden Gate Park': 17\n    }\n}\n\n# Friend availability and constraints\nfriends = {\n    'James': {\n        'location': 'Pacific Heights',\n        'start': '20:00',\n        'end': '22:00',\n        'min_duration': 120\n    },\n    'Robert': {\n        'location': 'Chinatown',\n        'start': '12:15',\n        'end': '16:45',\n        'min_duration': 90\n    },\n    'Jeffrey': {\n        'location': 'Union Square',\n        'start': '9:30',\n        'end': '15:30',\n        'min_duration': 120\n    },\n    'Carol': {\n        'location': 'Mission District',\n        'start': '18:15',\n        'end': '21:15',\n        'min_duration': 15\n    },\n    'Mark': {\n        'location': 'Golden Gate Park',\n        'start': '11:30',\n        'end': '17:45',\n        'min_duration': 15\n    },\n    'Sandra': {\n        'location': 'Nob Hill',\n        'start': '8:00',\n        'end': '15:30',\n        'min_duration': 15\n    }\n}\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule(order):\n    current_location = 'North Beach'\n    current_time = time_to_minutes('9:00')\n    schedule = []\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        location = friend['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        start_window = time_to_minutes(friend['start'])\n        end_window = time_to_minutes(friend['end'])\n        min_duration = friend['min_duration']\n        \n        # Calculate possible meeting time\n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end > end_window:\n            return None  # Can't meet this friend\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend_name,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        met_friends.add(friend_name)\n        current_location = location\n        current_time = meeting_end\n    \n    # Check if we can meet James (special case since it's late)\n    if 'James' not in met_friends:\n        friend = friends['James']\n        location = friend['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        start_window = time_to_minutes(friend['start'])\n        end_window = time_to_minutes(friend['end'])\n        min_duration = friend['min_duration']\n        \n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end <= end_window:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': 'James',\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            met_friends.add('James')\n    \n    return schedule if len(met_friends) == len(friends) else None\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    # Prioritize meeting all friends, then minimize travel time\n    return len(schedule) * 1000 - sum(travel_times[schedule[i]['location']][schedule[i+1]['location']] \n                                     for i in range(len(schedule)-1) if i+1 < len(schedule))\n\ndef find_optimal_schedule():\n    best_score = -1\n    best_schedule = None\n    friend_names = [name for name in friends if name != 'James']\n    \n    # Try different permutations of friends (except James who is handled specially)\n    for perm in permutations(friend_names):\n        # Try with James at the end\n        order = list(perm) + ['James']\n        schedule = calculate_schedule(order)\n        score = evaluate_schedule(schedule)\n        if score > best_score:\n            best_score = score\n            best_schedule = schedule\n        \n        # Try without James (if we can meet him during the day)\n        order = list(perm)\n        schedule = calculate_schedule(order)\n        score = evaluate_schedule(schedule)\n        if score > best_score:\n            best_score = score\n            best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nresult = {\"itinerary\": optimal_schedule} if optimal_schedule else {\"itinerary\": []}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_592"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "12:30",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "13:17",
                        "end_time": "14:32"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "12:15",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "13:47",
                        "end_time": "14:17"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef format_time(dt):\n    return dt.strftime('%-H:%M')\n\ndef calculate_schedule():\n    # Input parameters\n    travel_times = {\n        ('The Castro', 'Mission District'): 7,\n        ('The Castro', 'Financial District'): 20,\n        ('Mission District', 'The Castro'): 7,\n        ('Mission District', 'Financial District'): 17,\n        ('Financial District', 'The Castro'): 23,\n        ('Financial District', 'Mission District'): 17\n    }\n    \n    current_location = 'The Castro'\n    current_time = parse_time('9:00')\n    \n    laura_location = 'Mission District'\n    laura_start = parse_time('12:15')\n    laura_end = parse_time('19:45')\n    laura_min_duration = timedelta(minutes=75)\n    \n    anthony_location = 'Financial District'\n    anthony_start = parse_time('12:30')\n    anthony_end = parse_time('14:45')\n    anthony_min_duration = timedelta(minutes=30)\n    \n    itinerary = []\n    \n    # Calculate possible meeting with Anthony\n    # Option 1: Meet Anthony first\n    travel_to_anthony = travel_times[(current_location, anthony_location)]\n    earliest_arrival_anthony = current_time + timedelta(minutes=travel_to_anthony)\n    \n    meet_anthony_start = max(earliest_arrival_anthony, anthony_start)\n    meet_anthony_end = min(meet_anthony_start + anthony_min_duration, anthony_end)\n    \n    if meet_anthony_end <= anthony_end and (meet_anthony_end - meet_anthony_start) >= anthony_min_duration:\n        # Then try to meet Laura\n        travel_to_laura = travel_times[(anthony_location, laura_location)]\n        earliest_arrival_laura = meet_anthony_end + timedelta(minutes=travel_to_laura)\n        \n        meet_laura_start = max(earliest_arrival_laura, laura_start)\n        meet_laura_end = min(meet_laura_start + laura_min_duration, laura_end)\n        \n        if meet_laura_end <= laura_end and (meet_laura_end - meet_laura_start) >= laura_min_duration:\n            itinerary = [\n                {\n                    \"action\": \"meet\",\n                    \"location\": anthony_location,\n                    \"person\": \"Anthony\",\n                    \"start_time\": format_time(meet_anthony_start),\n                    \"end_time\": format_time(meet_anthony_end)\n                },\n                {\n                    \"action\": \"meet\",\n                    \"location\": laura_location,\n                    \"person\": \"Laura\",\n                    \"start_time\": format_time(meet_laura_start),\n                    \"end_time\": format_time(meet_laura_end)\n                }\n            ]\n            return itinerary\n    \n    # Option 2: Meet Laura first\n    travel_to_laura = travel_times[(current_location, laura_location)]\n    earliest_arrival_laura = current_time + timedelta(minutes=travel_to_laura)\n    \n    meet_laura_start = max(earliest_arrival_laura, laura_start)\n    meet_laura_end = min(meet_laura_start + laura_min_duration, laura_end)\n    \n    if meet_laura_end <= laura_end and (meet_laura_end - meet_laura_start) >= laura_min_duration:\n        # Then try to meet Anthony\n        travel_to_anthony = travel_times[(laura_location, anthony_location)]\n        earliest_arrival_anthony = meet_laura_end + timedelta(minutes=travel_to_anthony)\n        \n        meet_anthony_start = max(earliest_arrival_anthony, anthony_start)\n        meet_anthony_end = min(meet_anthony_start + anthony_min_duration, anthony_end)\n        \n        if meet_anthony_end <= anthony_end and (meet_anthony_end - meet_anthony_start) >= anthony_min_duration:\n            itinerary = [\n                {\n                    \"action\": \"meet\",\n                    \"location\": laura_location,\n                    \"person\": \"Laura\",\n                    \"start_time\": format_time(meet_laura_start),\n                    \"end_time\": format_time(meet_laura_end)\n                },\n                {\n                    \"action\": \"meet\",\n                    \"location\": anthony_location,\n                    \"person\": \"Anthony\",\n                    \"start_time\": format_time(meet_anthony_start),\n                    \"end_time\": format_time(meet_anthony_end)\n                }\n            ]\n            return itinerary\n    \n    # If both options fail, try to meet just one person\n    # Try Laura first\n    travel_to_laura = travel_times[(current_location, laura_location)]\n    earliest_arrival_laura = current_time + timedelta(minutes=travel_to_laura)\n    \n    meet_laura_start = max(earliest_arrival_laura, laura_start)\n    meet_laura_end = min(meet_laura_start + laura_min_duration, laura_end)\n    \n    if meet_laura_end <= laura_end and (meet_laura_end - meet_laura_start) >= laura_min_duration:\n        itinerary = [\n            {\n                \"action\": \"meet\",\n                \"location\": laura_location,\n                \"person\": \"Laura\",\n                \"start_time\": format_time(meet_laura_start),\n                \"end_time\": format_time(meet_laura_end)\n            }\n        ]\n        return itinerary\n    \n    # Then try Anthony\n    travel_to_anthony = travel_times[(current_location, anthony_location)]\n    earliest_arrival_anthony = current_time + timedelta(minutes=travel_to_anthony)\n    \n    meet_anthony_start = max(earliest_arrival_anthony, anthony_start)\n    meet_anthony_end = min(meet_anthony_start + anthony_min_duration, anthony_end)\n    \n    if meet_anthony_end <= anthony_end and (meet_anthony_end - meet_anthony_start) >= anthony_min_duration:\n        itinerary = [\n            {\n                \"action\": \"meet\",\n                \"location\": anthony_location,\n                \"person\": \"Anthony\",\n                \"start_time\": format_time(meet_anthony_start),\n                \"end_time\": format_time(meet_anthony_end)\n            }\n        ]\n        return itinerary\n    \n    return []\n\nresult = calculate_schedule()\noutput = {\"itinerary\": result}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_144"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "11:15",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "11:45",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "13:00",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "James",
                        "start_time": "14:31",
                        "end_time": "16:31"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "16:38",
                        "end_time": "17:08"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Matthew",
                        "start_time": "17:29",
                        "end_time": "18:14"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "18:33",
                        "end_time": "20:03"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "20:30",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str == '24:00':\n        return 1440\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Richmond District': {\n        'The Castro': 16, 'Nob Hill': 17, 'Marina District': 9, 'Pacific Heights': 10,\n        'Haight-Ashbury': 10, 'Mission District': 20, 'Chinatown': 20, 'Russian Hill': 13,\n        'Alamo Square': 13, 'Bayview': 27\n    },\n    'The Castro': {\n        'Richmond District': 16, 'Nob Hill': 16, 'Marina District': 21, 'Pacific Heights': 16,\n        'Haight-Ashbury': 6, 'Mission District': 7, 'Chinatown': 22, 'Russian Hill': 18,\n        'Alamo Square': 8, 'Bayview': 19\n    },\n    'Nob Hill': {\n        'Richmond District': 14, 'The Castro': 17, 'Marina District': 11, 'Pacific Heights': 8,\n        'Haight-Ashbury': 13, 'Mission District': 13, 'Chinatown': 6, 'Russian Hill': 5,\n        'Alamo Square': 11, 'Bayview': 19\n    },\n    'Marina District': {\n        'Richmond District': 11, 'The Castro': 22, 'Nob Hill': 12, 'Pacific Heights': 7,\n        'Haight-Ashbury': 16, 'Mission District': 20, 'Chinatown': 15, 'Russian Hill': 8,\n        'Alamo Square': 15, 'Bayview': 27\n    },\n    'Pacific Heights': {\n        'Richmond District': 12, 'The Castro': 16, 'Nob Hill': 8, 'Marina District': 6,\n        'Haight-Ashbury': 11, 'Mission District': 15, 'Chinatown': 11, 'Russian Hill': 7,\n        'Alamo Square': 10, 'Bayview': 22\n    },\n    'Haight-Ashbury': {\n        'Richmond District': 10, 'The Castro': 6, 'Nob Hill': 15, 'Marina District': 17,\n        'Pacific Heights': 12, 'Mission District': 11, 'Chinatown': 19, 'Russian Hill': 17,\n        'Alamo Square': 5, 'Bayview': 18\n    },\n    'Mission District': {\n        'Richmond District': 20, 'The Castro': 7, 'Nob Hill': 12, 'Marina District': 19,\n        'Pacific Heights': 16, 'Haight-Ashbury': 12, 'Chinatown': 16, 'Russian Hill': 15,\n        'Alamo Square': 11, 'Bayview': 14\n    },\n    'Chinatown': {\n        'Richmond District': 20, 'The Castro': 22, 'Nob Hill': 9, 'Marina District': 12,\n        'Pacific Heights': 10, 'Haight-Ashbury': 19, 'Mission District': 17, 'Russian Hill': 7,\n        'Alamo Square': 17, 'Bayview': 20\n    },\n    'Russian Hill': {\n        'Richmond District': 14, 'The Castro': 21, 'Nob Hill': 5, 'Marina District': 7,\n        'Pacific Heights': 7, 'Haight-Ashbury': 17, 'Mission District': 16, 'Chinatown': 9,\n        'Alamo Square': 15, 'Bayview': 23\n    },\n    'Alamo Square': {\n        'Richmond District': 11, 'The Castro': 8, 'Nob Hill': 11, 'Marina District': 15,\n        'Pacific Heights': 10, 'Haight-Ashbury': 5, 'Mission District': 10, 'Chinatown': 15,\n        'Russian Hill': 13, 'Bayview': 16\n    },\n    'Bayview': {\n        'Richmond District': 25, 'The Castro': 19, 'Nob Hill': 20, 'Marina District': 27,\n        'Pacific Heights': 23, 'Haight-Ashbury': 19, 'Mission District': 13, 'Chinatown': 19,\n        'Russian Hill': 23, 'Alamo Square': 16\n    }\n}\n\nfriends = [\n    {'name': 'Matthew', 'location': 'The Castro', 'start': '16:30', 'end': '20:00', 'duration': 45},\n    {'name': 'Rebecca', 'location': 'Nob Hill', 'start': '15:15', 'end': '19:15', 'duration': 105},\n    {'name': 'Brian', 'location': 'Marina District', 'start': '14:15', 'end': '22:00', 'duration': 30},\n    {'name': 'Emily', 'location': 'Pacific Heights', 'start': '11:15', 'end': '19:45', 'duration': 15},\n    {'name': 'Karen', 'location': 'Haight-Ashbury', 'start': '11:45', 'end': '17:30', 'duration': 30},\n    {'name': 'Stephanie', 'location': 'Mission District', 'start': '13:00', 'end': '15:45', 'duration': 75},\n    {'name': 'James', 'location': 'Chinatown', 'start': '14:30', 'end': '19:00', 'duration': 120},\n    {'name': 'Steven', 'location': 'Russian Hill', 'start': '14:00', 'end': '20:00', 'duration': 30},\n    {'name': 'Elizabeth', 'location': 'Alamo Square', 'start': '13:00', 'end': '17:15', 'duration': 120},\n    {'name': 'William', 'location': 'Bayview', 'start': '18:15', 'end': '20:15', 'duration': 90}\n]\n\ncurrent_location = 'Richmond District'\ncurrent_time = time_to_minutes('9:00')\nitinerary = []\n\ndef can_schedule(friend, start_time, end_time):\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    return max(start_time, friend_start) + friend['duration'] <= min(end_time, friend_end)\n\ndef find_best_schedule():\n    global current_location, current_time, itinerary\n    best_friend = None\n    best_start = None\n    best_end = None\n    best_travel = float('inf')\n    \n    for friend in friends:\n        if friend in [item['person'] for item in itinerary]:\n            continue\n            \n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        friend_start = time_to_minutes(friend['start'])\n        friend_end = time_to_minutes(friend['end'])\n        \n        start_time = max(arrival_time, friend_start)\n        end_time = min(friend_end, start_time + friend['duration'])\n        \n        if end_time > friend_end:\n            continue\n            \n        if can_schedule(friend, arrival_time, friend_end):\n            if travel_time < best_travel:\n                best_travel = travel_time\n                best_friend = friend\n                best_start = start_time\n                best_end = end_time\n    \n    if best_friend:\n        itinerary.append({\n            'action': 'meet',\n            'location': best_friend['location'],\n            'person': best_friend['name'],\n            'start_time': minutes_to_time(best_start),\n            'end_time': minutes_to_time(best_end)\n        })\n        current_location = best_friend['location']\n        current_time = best_end\n        return True\n    return False\n\nwhile find_best_schedule():\n    pass\n\n# Ensure William is met last if possible\nwilliam = next((f for f in friends if f['name'] == 'William'), None)\nif william and william['name'] not in [item['person'] for item in itinerary]:\n    travel_time = travel_times[current_location][william['location']]\n    arrival_time = current_time + travel_time\n    if can_schedule(william, arrival_time, time_to_minutes(william['end'])):\n        start_time = max(arrival_time, time_to_minutes(william['start']))\n        end_time = min(time_to_minutes(william['end']), start_time + william['duration'])\n        itinerary.append({\n            'action': 'meet',\n            'location': william['location'],\n            'person': william['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n\nprint(json.dumps({'itinerary': itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_900"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "15:30",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kenneth",
                        "start_time": "16:35",
                        "end_time": "17:05"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "17:13",
                        "end_time": "18:13"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Jason",
                        "start_time": "9:21",
                        "end_time": "10:36"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kenneth",
                        "start_time": "10:39",
                        "end_time": "11:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "11:18",
                        "end_time": "12:33"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Kimberly",
                        "start_time": "12:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "14:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "15:47",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "16:57",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "18:51",
                        "end_time": "19:51"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "21:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since 9:00 (540 minutes)\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times dictionary\ntravel_times = {\n    'Presidio': {\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'Russian Hill': 14,\n        'North Beach': 18,\n        'Chinatown': 21,\n        'Union Square': 22,\n        'Embarcadero': 20,\n        'Financial District': 23,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Presidio': 15,\n        'Nob Hill': 15,\n        'Russian Hill': 17,\n        'North Beach': 19,\n        'Chinatown': 19,\n        'Union Square': 19,\n        'Embarcadero': 20,\n        'Financial District': 21,\n        'Marina District': 17\n    },\n    'Nob Hill': {\n        'Presidio': 17,\n        'Haight-Ashbury': 13,\n        'Russian Hill': 5,\n        'North Beach': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 9,\n        'Financial District': 9,\n        'Marina District': 11\n    },\n    'Russian Hill': {\n        'Presidio': 14,\n        'Haight-Ashbury': 17,\n        'Nob Hill': 5,\n        'North Beach': 5,\n        'Chinatown': 9,\n        'Union Square': 10,\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Marina District': 7\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 7,\n        'Russian Hill': 4,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 6,\n        'Financial District': 8,\n        'Marina District': 9\n    },\n    'Chinatown': {\n        'Presidio': 19,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 9,\n        'Russian Hill': 7,\n        'North Beach': 3,\n        'Union Square': 7,\n        'Embarcadero': 5,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Union Square': {\n        'Presidio': 24,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 9,\n        'Russian Hill': 13,\n        'North Beach': 10,\n        'Chinatown': 7,\n        'Embarcadero': 11,\n        'Financial District': 9,\n        'Marina District': 18\n    },\n    'Embarcadero': {\n        'Presidio': 20,\n        'Haight-Ashbury': 21,\n        'Nob Hill': 10,\n        'Russian Hill': 8,\n        'North Beach': 5,\n        'Chinatown': 7,\n        'Union Square': 10,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Financial District': {\n        'Presidio': 22,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 8,\n        'Russian Hill': 11,\n        'North Beach': 7,\n        'Chinatown': 5,\n        'Union Square': 9,\n        'Embarcadero': 4,\n        'Marina District': 15\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'Haight-Ashbury': 16,\n        'Nob Hill': 12,\n        'Russian Hill': 8,\n        'North Beach': 11,\n        'Chinatown': 15,\n        'Union Square': 16,\n        'Embarcadero': 14,\n        'Financial District': 17\n    }\n}\n\n# Friends data: location, available start, available end, min duration\nfriends = {\n    'Karen': ('Haight-Ashbury', time_to_minutes('21:00'), time_to_minutes('21:45'), 45),\n    'Jessica': ('Nob Hill', time_to_minutes('13:45'), time_to_minutes('21:00'), 90),\n    'Brian': ('Russian Hill', time_to_minutes('15:30'), time_to_minutes('21:45'), 60),\n    'Kenneth': ('North Beach', time_to_minutes('9:45'), time_to_minutes('21:00'), 30),\n    'Jason': ('Chinatown', time_to_minutes('8:15'), time_to_minutes('11:45'), 75),\n    'Stephanie': ('Union Square', time_to_minutes('14:45'), time_to_minutes('18:45'), 105),\n    'Kimberly': ('Embarcadero', time_to_minutes('9:45'), time_to_minutes('19:30'), 75),\n    'Steven': ('Financial District', time_to_minutes('7:15'), time_to_minutes('21:15'), 60),\n    'Mark': ('Marina District', time_to_minutes('10:15'), time_to_minutes('13:00'), 75)\n}\n\n# Filter friends we can possibly meet (duration fits in their window)\npossible_friends = {name: data for name, data in friends.items() if data[3] <= (data[2] - data[1])}\n\n# Generate all possible meeting orders (permutations)\ndef generate_schedules():\n    # We'll try all possible orders of meeting friends, but limit to 4 friends max for performance\n    for count in range(1, len(possible_friends)+1):\n        for friend_order in permutations(possible_friends.keys(), count):\n            yield friend_order\n\ndef evaluate_schedule(friend_order):\n    current_time = time_to_minutes('9:00')  # Start at Presidio at 9:00\n    current_location = 'Presidio'\n    schedule = []\n    total_meetings = 0\n    \n    for friend in friend_order:\n        location, avail_start, avail_end, duration = possible_friends[friend]\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Can we arrive before their window ends?\n        if arrival_time >= avail_end:\n            continue  # Can't meet this friend\n        \n        # Calculate meeting start time\n        meeting_start = max(arrival_time, avail_start)\n        meeting_end = meeting_start + duration\n        \n        # Can we complete the meeting before their window ends?\n        if meeting_end > avail_end:\n            continue  # Can't meet this friend\n        \n        # Add to schedule\n        schedule.append({\n            'friend': friend,\n            'location': location,\n            'start': meeting_start,\n            'end': meeting_end,\n            'travel_time': travel_time\n        })\n        \n        current_time = meeting_end\n        current_location = location\n        total_meetings += 1\n    \n    return total_meetings, schedule\n\n# Find the best schedule\nbest_meetings = 0\nbest_schedule = []\n\n# We'll limit the permutations to reasonable numbers for performance\nmax_attempts = 1000\nattempts = 0\n\nfor friend_order in generate_schedules():\n    attempts += 1\n    if attempts > max_attempts:\n        break\n    \n    total_meetings, schedule = evaluate_schedule(friend_order)\n    \n    if total_meetings > best_meetings:\n        best_meetings = total_meetings\n        best_schedule = schedule\n    elif total_meetings == best_meetings and len(schedule) > 0:\n        # Prefer schedules that end earlier\n        if schedule[-1]['end'] < best_schedule[-1]['end']:\n            best_schedule = schedule\n\n# Convert to output format\nitinerary = []\nfor meeting in best_schedule:\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meeting['location'],\n        \"person\": meeting['friend'],\n        \"start_time\": minutes_to_time(meeting['start']),\n        \"end_time\": minutes_to_time(meeting['end'])\n    })\n\n# Output the result\nresult = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_872"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "20:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "20:56",
                        "end_time": "21:26"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "20:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "20:56",
                        "end_time": "21:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\nfriends = [\n    {\"name\": \"Paul\", \"location\": \"Nob Hill\", \"available_start\": \"16:15\", \"available_end\": \"21:15\", \"min_duration\": 60},\n    {\"name\": \"Carol\", \"location\": \"Union Square\", \"available_start\": \"18:00\", \"available_end\": \"20:15\", \"min_duration\": 120},\n    {\"name\": \"Patricia\", \"location\": \"Chinatown\", \"available_start\": \"20:00\", \"available_end\": \"21:30\", \"min_duration\": 75},\n    {\"name\": \"Karen\", \"location\": \"The Castro\", \"available_start\": \"17:00\", \"available_end\": \"19:00\", \"min_duration\": 45},\n    {\"name\": \"Nancy\", \"location\": \"Presidio\", \"available_start\": \"11:45\", \"available_end\": \"22:00\", \"min_duration\": 30},\n    {\"name\": \"Jeffrey\", \"location\": \"Pacific Heights\", \"available_start\": \"20:00\", \"available_end\": \"20:45\", \"min_duration\": 45},\n    {\"name\": \"Matthew\", \"location\": \"Russian Hill\", \"available_start\": \"15:45\", \"available_end\": \"21:45\", \"min_duration\": 75}\n]\n\ntravel_times = {\n    \"Bayview\": {\n        \"Nob Hill\": 20, \"Union Square\": 17, \"Chinatown\": 18, \"The Castro\": 20,\n        \"Presidio\": 31, \"Pacific Heights\": 23, \"Russian Hill\": 23\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19, \"Union Square\": 7, \"Chinatown\": 6, \"The Castro\": 17,\n        \"Presidio\": 17, \"Pacific Heights\": 8, \"Russian Hill\": 5\n    },\n    \"Union Square\": {\n        \"Bayview\": 15, \"Nob Hill\": 9, \"Chinatown\": 7, \"The Castro\": 19,\n        \"Presidio\": 24, \"Pacific Heights\": 15, \"Russian Hill\": 13\n    },\n    \"Chinatown\": {\n        \"Bayview\": 22, \"Nob Hill\": 8, \"Union Square\": 7, \"The Castro\": 22,\n        \"Presidio\": 19, \"Pacific Heights\": 10, \"Russian Hill\": 7\n    },\n    \"The Castro\": {\n        \"Bayview\": 19, \"Nob Hill\": 16, \"Union Square\": 19, \"Chinatown\": 20,\n        \"Presidio\": 20, \"Pacific Heights\": 16, \"Russian Hill\": 18\n    },\n    \"Presidio\": {\n        \"Bayview\": 31, \"Nob Hill\": 18, \"Union Square\": 22, \"Chinatown\": 21,\n        \"The Castro\": 21, \"Pacific Heights\": 11, \"Russian Hill\": 14\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22, \"Nob Hill\": 8, \"Union Square\": 12, \"Chinatown\": 11,\n        \"The Castro\": 16, \"Presidio\": 11, \"Russian Hill\": 7\n    },\n    \"Russian Hill\": {\n        \"Bayview\": 23, \"Nob Hill\": 5, \"Union Square\": 11, \"Chinatown\": 9,\n        \"The Castro\": 21, \"Presidio\": 14, \"Pacific Heights\": 7\n    }\n}\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes(\"9:00\")\n    current_location = \"Bayview\"\n    itinerary = []\n    total_meetings = 0\n    \n    for friend in order:\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(friend[\"available_start\"])\n        available_end = time_to_minutes(friend[\"available_end\"])\n        min_duration = friend[\"min_duration\"]\n        \n        # Calculate meeting start and end times\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = min(meeting_start + min_duration, available_end)\n        \n        if meeting_end <= available_end and meeting_end - meeting_start >= min_duration:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"person\": friend[\"name\"],\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            current_time = meeting_end\n            current_location = friend[\"location\"]\n            total_meetings += 1\n        else:\n            return None, 0\n    \n    return itinerary, total_meetings\n\ndef find_optimal_schedule():\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all permutations of 5 friends (since meeting all 7 is impossible due to time constraints)\n    for perm in permutations(friends, 5):\n        itinerary, total_meetings = evaluate_schedule(perm)\n        if total_meetings > max_meetings:\n            max_meetings = total_meetings\n            best_schedule = itinerary\n    \n    # If no 5-meeting schedule found, try 4\n    if max_meetings < 5:\n        for perm in permutations(friends, 4):\n            itinerary, total_meetings = evaluate_schedule(perm)\n            if total_meetings > max_meetings:\n                max_meetings = total_meetings\n                best_schedule = itinerary\n    \n    # If no 4-meeting schedule found, try 3\n    if max_meetings < 4:\n        for perm in permutations(friends, 3):\n            itinerary, total_meetings = evaluate_schedule(perm)\n            if total_meetings > max_meetings:\n                max_meetings = total_meetings\n                best_schedule = itinerary\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nresult = {\"itinerary\": optimal_schedule} if optimal_schedule else {\"itinerary\": []}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_695"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "19:59",
                        "end_time": "20:59"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef calculate_schedule():\n    # Input parameters\n    travel_times = {\n        (\"Golden Gate Park\", \"Alamo Square\"): 10,\n        (\"Golden Gate Park\", \"Presidio\"): 11,\n        (\"Golden Gate Park\", \"Russian Hill\"): 19,\n        (\"Alamo Square\", \"Golden Gate Park\"): 9,\n        (\"Alamo Square\", \"Presidio\"): 18,\n        (\"Alamo Square\", \"Russian Hill\"): 13,\n        (\"Presidio\", \"Golden Gate Park\"): 12,\n        (\"Presidio\", \"Alamo Square\"): 18,\n        (\"Presidio\", \"Russian Hill\"): 14,\n        (\"Russian Hill\", \"Golden Gate Park\"): 21,\n        (\"Russian Hill\", \"Alamo Square\"): 15,\n        (\"Russian Hill\", \"Presidio\"): 14,\n    }\n\n    # Constraints\n    current_location = \"Golden Gate Park\"\n    current_time = \"9:00\"\n\n    timothy_constraints = {\n        \"location\": \"Alamo Square\",\n        \"available_start\": \"12:00\",\n        \"available_end\": \"16:15\",\n        \"min_duration\": 105\n    }\n\n    mark_constraints = {\n        \"location\": \"Presidio\",\n        \"available_start\": \"18:45\",\n        \"available_end\": \"21:00\",\n        \"min_duration\": 60\n    }\n\n    joseph_constraints = {\n        \"location\": \"Russian Hill\",\n        \"available_start\": \"16:45\",\n        \"available_end\": \"21:30\",\n        \"min_duration\": 60\n    }\n\n    itinerary = []\n\n    # Meet Timothy at Alamo Square\n    travel_time = travel_times[(current_location, timothy_constraints[\"location\"])]\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if parse_time(arrival_time) < parse_time(timothy_constraints[\"available_start\"]):\n        arrival_time = timothy_constraints[\"available_start\"]\n    \n    end_time = add_minutes(arrival_time, timothy_constraints[\"min_duration\"])\n    if parse_time(end_time) > parse_time(timothy_constraints[\"available_end\"]):\n        end_time = timothy_constraints[\"available_end\"]\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": timothy_constraints[\"location\"],\n        \"person\": \"Timothy\",\n        \"start_time\": arrival_time,\n        \"end_time\": end_time\n    })\n    \n    current_location = timothy_constraints[\"location\"]\n    current_time = end_time\n\n    # Next, decide between Joseph and Mark\n    # Option 1: Meet Joseph first, then Mark\n    option1_itinerary = itinerary.copy()\n    option1_location = current_location\n    option1_time = current_time\n\n    # Travel to Joseph\n    travel_time = travel_times[(option1_location, joseph_constraints[\"location\"])]\n    arrival_time = add_minutes(option1_time, travel_time)\n    \n    if parse_time(arrival_time) < parse_time(joseph_constraints[\"available_start\"]):\n        arrival_time = joseph_constraints[\"available_start\"]\n    \n    end_time = add_minutes(arrival_time, joseph_constraints[\"min_duration\"])\n    if parse_time(end_time) > parse_time(joseph_constraints[\"available_end\"]):\n        end_time = joseph_constraints[\"available_end\"]\n    \n    option1_itinerary.append({\n        \"action\": \"meet\",\n        \"location\": joseph_constraints[\"location\"],\n        \"person\": \"Joseph\",\n        \"start_time\": arrival_time,\n        \"end_time\": end_time\n    })\n    \n    option1_location = joseph_constraints[\"location\"]\n    option1_time = end_time\n\n    # Travel to Mark\n    travel_time = travel_times[(option1_location, mark_constraints[\"location\"])]\n    arrival_time = add_minutes(option1_time, travel_time)\n    \n    if parse_time(arrival_time) < parse_time(mark_constraints[\"available_start\"]):\n        arrival_time = mark_constraints[\"available_start\"]\n    \n    end_time = add_minutes(arrival_time, mark_constraints[\"min_duration\"])\n    if parse_time(end_time) > parse_time(mark_constraints[\"available_end\"]):\n        end_time = mark_constraints[\"available_end\"]\n    \n    option1_itinerary.append({\n        \"action\": \"meet\",\n        \"location\": mark_constraints[\"location\"],\n        \"person\": \"Mark\",\n        \"start_time\": arrival_time,\n        \"end_time\": end_time\n    })\n\n    # Option 2: Meet Mark first, then Joseph\n    option2_itinerary = itinerary.copy()\n    option2_location = current_location\n    option2_time = current_time\n\n    # Travel to Mark\n    travel_time = travel_times[(option2_location, mark_constraints[\"location\"])]\n    arrival_time = add_minutes(option2_time, travel_time)\n    \n    if parse_time(arrival_time) < parse_time(mark_constraints[\"available_start\"]):\n        arrival_time = mark_constraints[\"available_start\"]\n    \n    end_time = add_minutes(arrival_time, mark_constraints[\"min_duration\"])\n    if parse_time(end_time) > parse_time(mark_constraints[\"available_end\"]):\n        end_time = mark_constraints[\"available_end\"]\n    \n    option2_itinerary.append({\n        \"action\": \"meet\",\n        \"location\": mark_constraints[\"location\"],\n        \"person\": \"Mark\",\n        \"start_time\": arrival_time,\n        \"end_time\": end_time\n    })\n    \n    option2_location = mark_constraints[\"location\"]\n    option2_time = end_time\n\n    # Travel to Joseph\n    travel_time = travel_times[(option2_location, joseph_constraints[\"location\"])]\n    arrival_time = add_minutes(option2_time, travel_time)\n    \n    if parse_time(arrival_time) < parse_time(joseph_constraints[\"available_start\"]):\n        arrival_time = joseph_constraints[\"available_start\"]\n    \n    end_time = add_minutes(arrival_time, joseph_constraints[\"min_duration\"])\n    if parse_time(end_time) > parse_time(joseph_constraints[\"available_end\"]):\n        end_time = joseph_constraints[\"available_end\"]\n    \n    option2_itinerary.append({\n        \"action\": \"meet\",\n        \"location\": joseph_constraints[\"location\"],\n        \"person\": \"Joseph\",\n        \"start_time\": arrival_time,\n        \"end_time\": end_time\n    })\n\n    # Choose the option that meets all constraints\n    if len(option1_itinerary) == 3:\n        return {\"itinerary\": option1_itinerary}\n    elif len(option2_itinerary) == 3:\n        return {\"itinerary\": option2_itinerary}\n    else:\n        # Fallback to meeting only Timothy and one other\n        # Try meeting Timothy and Joseph\n        fallback_itinerary = itinerary.copy()\n        fallback_location = current_location\n        fallback_time = current_time\n\n        # Travel to Joseph\n        travel_time = travel_times[(fallback_location, joseph_constraints[\"location\"])]\n        arrival_time = add_minutes(fallback_time, travel_time)\n        \n        if parse_time(arrival_time) < parse_time(joseph_constraints[\"available_start\"]):\n            arrival_time = joseph_constraints[\"available_start\"]\n        \n        end_time = add_minutes(arrival_time, joseph_constraints[\"min_duration\"])\n        if parse_time(end_time) > parse_time(joseph_constraints[\"available_end\"]):\n            end_time = joseph_constraints[\"available_end\"]\n        \n        fallback_itinerary.append({\n            \"action\": \"meet\",\n            \"location\": joseph_constraints[\"location\"],\n            \"person\": \"Joseph\",\n            \"start_time\": arrival_time,\n            \"end_time\": end_time\n        })\n\n        if len(fallback_itinerary) == 2:\n            return {\"itinerary\": fallback_itinerary}\n        \n        # Try meeting Timothy and Mark\n        fallback_itinerary = itinerary.copy()\n        fallback_location = current_location\n        fallback_time = current_time\n\n        # Travel to Mark\n        travel_time = travel_times[(fallback_location, mark_constraints[\"location\"])]\n        arrival_time = add_minutes(fallback_time, travel_time)\n        \n        if parse_time(arrival_time) < parse_time(mark_constraints[\"available_start\"]):\n            arrival_time = mark_constraints[\"available_start\"]\n        \n        end_time = add_minutes(arrival_time, mark_constraints[\"min_duration\"])\n        if parse_time(end_time) > parse_time(mark_constraints[\"available_end\"]):\n            end_time = mark_constraints[\"available_end\"]\n        \n        fallback_itinerary.append({\n            \"action\": \"meet\",\n            \"location\": mark_constraints[\"location\"],\n            \"person\": \"Mark\",\n            \"start_time\": arrival_time,\n            \"end_time\": end_time\n        })\n\n        return {\"itinerary\": fallback_itinerary}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_268"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "14:15",
                        "end_time": "15:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "14:15",
                        "end_time": "15:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00\", \"%H:%M\")\n    kenneth_available_start = datetime.strptime(\"14:15\", \"%H:%M\")\n    kenneth_available_end = datetime.strptime(\"19:45\", \"%H:%M\")\n    min_meeting_duration = timedelta(minutes=90)\n    travel_time_to_nob_hill = timedelta(minutes=11)\n    travel_time_to_fishermans_wharf = timedelta(minutes=11)\n\n    # Calculate possible meeting window with Kenneth\n    earliest_departure_to_meet = arrival_time + travel_time_to_nob_hill\n    meeting_start = max(earliest_departure_to_meet, kenneth_available_start)\n    meeting_end = meeting_start + min_meeting_duration\n\n    # Check if meeting is possible within Kenneth's availability\n    if meeting_end <= kenneth_available_end:\n        # Calculate return time\n        return_departure = meeting_end\n        return_arrival = return_departure + travel_time_to_fishermans_wharf\n\n        itinerary = [\n            {\n                \"action\": \"travel\",\n                \"location\": \"Nob Hill\",\n                \"person\": None,\n                \"start_time\": arrival_time.strftime(\"%H:%M\"),\n                \"end_time\": earliest_departure_to_meet.strftime(\"%H:%M\")\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Nob Hill\",\n                \"person\": \"Kenneth\",\n                \"start_time\": meeting_start.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end.strftime(\"%H:%M\")\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": \"Fisherman's Wharf\",\n                \"person\": None,\n                \"start_time\": return_departure.strftime(\"%H:%M\"),\n                \"end_time\": return_arrival.strftime(\"%H:%M\")\n            }\n        ]\n    else:\n        itinerary = [\n            {\n                \"action\": \"no_meeting_possible\",\n                \"location\": None,\n                \"person\": None,\n                \"start_time\": None,\n                \"end_time\": None\n            }\n        ]\n\n    return {\"itinerary\": itinerary}\n\nresult = calculate_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_6"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "9:08",
                        "end_time": "9:23"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "13:30",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "18:00",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str == '24:00':\n        return 24 * 60\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Nob Hill': {\n        'Presidio': 17,\n        'North Beach': 8,\n        'Fisherman\\'s Wharf': 11,\n        'Pacific Heights': 8\n    },\n    'Presidio': {\n        'Nob Hill': 18,\n        'North Beach': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Pacific Heights': 11\n    },\n    'North Beach': {\n        'Nob Hill': 7,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 5,\n        'Pacific Heights': 8\n    },\n    'Fisherman\\'s Wharf': {\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'North Beach': 6,\n        'Pacific Heights': 12\n    },\n    'Pacific Heights': {\n        'Nob Hill': 8,\n        'Presidio': 11,\n        'North Beach': 9,\n        'Fisherman\\'s Wharf': 13\n    }\n}\n\npeople = {\n    'Jeffrey': {\n        'location': 'Presidio',\n        'available_start': '8:00',\n        'available_end': '10:00',\n        'duration': 105\n    },\n    'Steven': {\n        'location': 'North Beach',\n        'available_start': '13:30',\n        'available_end': '22:00',\n        'duration': 45\n    },\n    'Barbara': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '18:00',\n        'available_end': '21:30',\n        'duration': 30\n    },\n    'John': {\n        'location': 'Pacific Heights',\n        'available_start': '9:00',\n        'available_end': '13:30',\n        'duration': 15\n    }\n}\n\ncurrent_location = 'Nob Hill'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    \n    for person in order:\n        info = people[person]\n        dest = info['location']\n        travel = travel_times[loc][dest]\n        arrival = time + travel\n        \n        available_start = time_to_minutes(info['available_start'])\n        available_end = time_to_minutes(info['available_end'])\n        duration = info['duration']\n        \n        start = max(arrival, available_start)\n        end = start + duration\n        \n        if end > available_end:\n            return None\n        \n        schedule.append({\n            'person': person,\n            'location': dest,\n            'start_time': minutes_to_time(start),\n            'end_time': minutes_to_time(end),\n            'departure_time': end\n        })\n        \n        loc = dest\n        time = end\n    \n    return schedule\n\nbest_schedule = None\nmax_people = 0\n\n# Try all possible orders of meeting people\nfor order in permutations(people.keys()):\n    schedule = calculate_schedule(order)\n    if schedule:\n        if len(schedule) > max_people:\n            max_people = len(schedule)\n            best_schedule = schedule\n        elif len(schedule) == max_people:\n            # Prefer schedules that end earlier\n            current_end = time_to_minutes(best_schedule[-1]['end_time'])\n            new_end = time_to_minutes(schedule[-1]['end_time'])\n            if new_end < current_end:\n                best_schedule = schedule\n\n# Format the output\nif best_schedule:\n    itinerary = []\n    for meeting in best_schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['person'],\n            \"start_time\": meeting['start_time'],\n            \"end_time\": meeting['end_time']\n        })\n    \n    output = {\n        \"itinerary\": itinerary\n    }\nelse:\n    output = {\n        \"itinerary\": []\n    }\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_385"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Laura",
                        "start_time": "14:30",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "16:02",
                        "end_time": "16:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "9:20",
                        "end_time": "9:50"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Stephanie",
                        "start_time": "11:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "12:40",
                        "end_time": "14:40"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Laura",
                        "start_time": "14:49",
                        "end_time": "16:04"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef format_time(dt):\n    return dt.strftime('%-H:%M')\n\ndef calculate_schedule():\n    # Travel times dictionary: {from: {to: minutes}}\n    travel_times = {\n        'Mission District': {\n            'Alamo Square': 11, 'Presidio': 25, 'Russian Hill': 15, 'North Beach': 17,\n            'Golden Gate Park': 17, 'Richmond District': 20, 'Embarcadero': 19,\n            'Financial District': 15, 'Marina District': 19\n        },\n        'Alamo Square': {\n            'Mission District': 10, 'Presidio': 17, 'Russian Hill': 13, 'North Beach': 15,\n            'Golden Gate Park': 9, 'Richmond District': 11, 'Embarcadero': 16,\n            'Financial District': 17, 'Marina District': 15\n        },\n        'Presidio': {\n            'Mission District': 26, 'Alamo Square': 19, 'Russian Hill': 14, 'North Beach': 18,\n            'Golden Gate Park': 12, 'Richmond District': 7, 'Embarcadero': 20,\n            'Financial District': 23, 'Marina District': 11\n        },\n        'Russian Hill': {\n            'Mission District': 16, 'Alamo Square': 15, 'Presidio': 14, 'North Beach': 5,\n            'Golden Gate Park': 21, 'Richmond District': 14, 'Embarcadero': 8,\n            'Financial District': 11, 'Marina District': 7\n        },\n        'North Beach': {\n            'Mission District': 18, 'Alamo Square': 16, 'Presidio': 17, 'Russian Hill': 4,\n            'Golden Gate Park': 22, 'Richmond District': 18, 'Embarcadero': 6,\n            'Financial District': 8, 'Marina District': 9\n        },\n        'Golden Gate Park': {\n            'Mission District': 17, 'Alamo Square': 9, 'Presidio': 11, 'Russian Hill': 19,\n            'North Beach': 23, 'Richmond District': 7, 'Embarcadero': 25,\n            'Financial District': 26, 'Marina District': 16\n        },\n        'Richmond District': {\n            'Mission District': 20, 'Alamo Square': 13, 'Presidio': 7, 'Russian Hill': 13,\n            'North Beach': 17, 'Golden Gate Park': 9, 'Embarcadero': 19,\n            'Financial District': 22, 'Marina District': 9\n        },\n        'Embarcadero': {\n            'Mission District': 20, 'Alamo Square': 19, 'Presidio': 20, 'Russian Hill': 8,\n            'North Beach': 5, 'Golden Gate Park': 25, 'Richmond District': 21,\n            'Financial District': 5, 'Marina District': 12\n        },\n        'Financial District': {\n            'Mission District': 17, 'Alamo Square': 17, 'Presidio': 22, 'Russian Hill': 11,\n            'North Beach': 7, 'Golden Gate Park': 23, 'Richmond District': 21,\n            'Embarcadero': 4, 'Marina District': 17\n        },\n        'Marina District': {\n            'Mission District': 20, 'Alamo Square': 15, 'Presidio': 10, 'Russian Hill': 8,\n            'North Beach': 11, 'Golden Gate Park': 18, 'Richmond District': 11,\n            'Embarcadero': 14, 'Financial District': 17\n        }\n    }\n\n    # Friend constraints\n    friends = [\n        {'name': 'Laura', 'location': 'Alamo Square', 'start': '14:30', 'end': '16:15', 'duration': 75},\n        {'name': 'Brian', 'location': 'Presidio', 'start': '10:15', 'end': '17:00', 'duration': 30},\n        {'name': 'Karen', 'location': 'Russian Hill', 'start': '18:00', 'end': '20:15', 'duration': 90},\n        {'name': 'Stephanie', 'location': 'North Beach', 'start': '10:15', 'end': '16:00', 'duration': 75},\n        {'name': 'Helen', 'location': 'Golden Gate Park', 'start': '11:30', 'end': '21:45', 'duration': 120},\n        {'name': 'Sandra', 'location': 'Richmond District', 'start': '8:00', 'end': '15:15', 'duration': 30},\n        {'name': 'Mary', 'location': 'Embarcadero', 'start': '16:45', 'end': '18:45', 'duration': 120},\n        {'name': 'Deborah', 'location': 'Financial District', 'start': '19:00', 'end': '20:45', 'duration': 105},\n        {'name': 'Elizabeth', 'location': 'Marina District', 'start': '8:30', 'end': '13:15', 'duration': 105}\n    ]\n\n    current_location = 'Mission District'\n    current_time = parse_time('9:00')\n    itinerary = []\n\n    # Helper function to find next friend to meet\n    def get_next_friend(current_loc, current_t, remaining_friends):\n        for friend in remaining_friends:\n            friend_start = parse_time(friend['start'])\n            friend_end = parse_time(friend['end'])\n            travel_time = travel_times[current_loc][friend['location']]\n            arrival_time = current_t + timedelta(minutes=travel_time)\n            \n            # Check if we can meet this friend\n            if arrival_time < friend_end:\n                meet_start = max(arrival_time, friend_start)\n                meet_end = meet_start + timedelta(minutes=friend['duration'])\n                if meet_end <= friend_end:\n                    return friend, meet_start, meet_end\n        return None, None, None\n\n    remaining_friends = friends.copy()\n    while remaining_friends:\n        friend, meet_start, meet_end = get_next_friend(current_location, current_time, remaining_friends)\n        if not friend:\n            break\n        \n        # Add travel to itinerary\n        if current_location != friend['location']:\n            travel_duration = travel_times[current_location][friend['location']]\n            travel_start = current_time\n            travel_end = current_time + timedelta(minutes=travel_duration)\n            itinerary.append({\n                'action': 'travel',\n                'from': current_location,\n                'to': friend['location'],\n                'start_time': format_time(travel_start),\n                'end_time': format_time(travel_end)\n            })\n        \n        # Add meeting to itinerary\n        itinerary.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': format_time(meet_start),\n            'end_time': format_time(meet_end)\n        })\n        \n        # Update current state\n        current_location = friend['location']\n        current_time = meet_end\n        remaining_friends.remove(friend)\n\n    # Filter out only meet actions for final output\n    meet_entries = [entry for entry in itinerary if entry['action'] == 'meet']\n    return {'itinerary': meet_entries}\n\nschedule = calculate_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_862"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "10:52",
                        "end_time": "11:37"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:22",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "John",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "10:53",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:23",
                        "end_time": "13:23"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "John",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary: travel_times[from_location][to_location] = minutes\ntravel_times = {\n    'Embarcadero': {\n        'Richmond District': 21,\n        'Union Square': 10,\n        'Financial District': 5,\n        'Pacific Heights': 11,\n        'Nob Hill': 10,\n        'Bayview': 21\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Union Square': 21,\n        'Financial District': 22,\n        'Pacific Heights': 10,\n        'Nob Hill': 17,\n        'Bayview': 26\n    },\n    'Union Square': {\n        'Embarcadero': 11,\n        'Richmond District': 20,\n        'Financial District': 9,\n        'Pacific Heights': 15,\n        'Nob Hill': 9,\n        'Bayview': 15\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Richmond District': 21,\n        'Union Square': 9,\n        'Pacific Heights': 13,\n        'Nob Hill': 8,\n        'Bayview': 19\n    },\n    'Pacific Heights': {\n        'Embarcadero': 10,\n        'Richmond District': 12,\n        'Union Square': 12,\n        'Financial District': 13,\n        'Nob Hill': 8,\n        'Bayview': 22\n    },\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'Richmond District': 14,\n        'Union Square': 7,\n        'Financial District': 9,\n        'Pacific Heights': 8,\n        'Bayview': 19\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Richmond District': 25,\n        'Union Square': 17,\n        'Financial District': 19,\n        'Pacific Heights': 23,\n        'Nob Hill': 20\n    }\n}\n\n# Friend data: name, location, available_start, available_end, min_duration\nfriends = [\n    ('Kenneth', 'Richmond District', 21.25, 22.0, 0.5),\n    ('Lisa', 'Union Square', 9.0, 16.5, 0.75),\n    ('Joshua', 'Financial District', 12.0, 15.25, 0.25),\n    ('Nancy', 'Pacific Heights', 8.0, 11.5, 1.5),\n    ('Andrew', 'Nob Hill', 11.5, 20.25, 1.0),\n    ('John', 'Bayview', 16.75, 21.5, 1.25)\n]\n\ndef time_to_float(time_str):\n    if isinstance(time_str, float):\n        return time_str\n    hours, minutes = map(float, time_str.split(':'))\n    return hours + minutes / 60.0\n\ndef float_to_time(time_float):\n    hours = int(time_float)\n    minutes = int((time_float - hours) * 60)\n    return f\"{hours}:{minutes:02d}\"\n\ndef calculate_schedule(order):\n    current_time = 9.0  # Start at Embarcadero at 9:00\n    current_location = 'Embarcadero'\n    schedule = []\n    met_friends = set()\n    \n    for friend_idx in order:\n        name, location, avail_start, avail_end, min_duration = friends[friend_idx]\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location].get(location, 0) / 60.0\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        meeting_start = max(arrival_time, avail_start)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end <= avail_end:\n            # Add travel and meeting to schedule\n            if travel_time > 0:\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"from\": current_location,\n                    \"to\": location,\n                    \"start_time\": float_to_time(current_time),\n                    \"end_time\": float_to_time(arrival_time)\n                })\n            \n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": name,\n                \"start_time\": float_to_time(meeting_start),\n                \"end_time\": float_to_time(meeting_end)\n            })\n            \n            met_friends.add(friend_idx)\n            current_time = meeting_end\n            current_location = location\n        else:\n            # Can't meet this friend, skip\n            continue\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try all possible meeting orders (permutations of friends)\n    for order in permutations(range(len(friends))):\n        schedule, num_meetings = calculate_schedule(order)\n        if num_meetings > max_meetings:\n            max_meetings = num_meetings\n            best_schedule = schedule\n        elif num_meetings == max_meetings and len(schedule) > 0:\n            # Prefer schedules that end earlier\n            last_meeting_end = time_to_float(schedule[-1]['end_time'])\n            current_last_end = time_to_float(best_schedule[-1]['end_time']) if best_schedule else 24.0\n            if last_meeting_end < current_last_end:\n                best_schedule = schedule\n    \n    # Filter out travel segments for the final itinerary\n    itinerary = [item for item in best_schedule if item['action'] == 'meet']\n    return itinerary\n\ndef main():\n    itinerary = find_optimal_schedule()\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_546"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00\", \"%H:%M\")\n    daniel_available_start = datetime.strptime(\"19:00\", \"%H:%M\")\n    daniel_available_end = datetime.strptime(\"20:15\", \"%H:%M\")\n    required_meeting_duration = timedelta(minutes=75)\n    travel_to_richmond = timedelta(minutes=14)\n    travel_to_russian = timedelta(minutes=13)\n\n    # Calculate possible meeting window\n    latest_departure_from_russian = daniel_available_end - required_meeting_duration - travel_to_richmond\n    earliest_arrival_at_richmond = daniel_available_start + travel_to_richmond\n\n    # Check if meeting is possible\n    if latest_departure_from_russian < arrival_time or earliest_arrival_at_richmond > daniel_available_end:\n        return {\"itinerary\": []}\n\n    # Determine optimal meeting time (maximize duration)\n    meeting_start = max(daniel_available_start, arrival_time + travel_to_richmond)\n    meeting_end = min(daniel_available_end, meeting_start + required_meeting_duration)\n    \n    if meeting_end > daniel_available_end:\n        meeting_end = daniel_available_end\n        meeting_start = meeting_end - required_meeting_duration\n\n    # Build itinerary\n    itinerary = []\n    \n    # Add travel to Richmond if needed\n    if arrival_time + travel_to_richmond < meeting_start:\n        itinerary.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"person\": None,\n            \"start_time\": arrival_time.strftime(\"%-H:%M\"),\n            \"end_time\": (arrival_time + travel_to_richmond).strftime(\"%-H:%M\")\n        })\n    \n    # Add meeting with Daniel\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"person\": \"Daniel\",\n        \"start_time\": meeting_start.strftime(\"%-H:%M\"),\n        \"end_time\": meeting_end.strftime(\"%-H:%M\")\n    })\n\n    # Add return travel if needed\n    if meeting_end < datetime.strptime(\"23:59\", \"%H:%M\"):\n        itinerary.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"person\": None,\n            \"start_time\": meeting_end.strftime(\"%-H:%M\"),\n            \"end_time\": (meeting_end + travel_to_russian).strftime(\"%-H:%M\")\n        })\n\n    return {\"itinerary\": itinerary}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_91"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "David",
                        "start_time": "9:18",
                        "end_time": "10:03"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kenneth",
                        "start_time": "14:00",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Deborah",
                        "start_time": "16:08",
                        "end_time": "17:38"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "17:54",
                        "end_time": "18:09"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "18:30",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "David",
                        "start_time": "9:18",
                        "end_time": "10:03"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kenneth",
                        "start_time": "14:00",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Deborah",
                        "start_time": "16:09",
                        "end_time": "17:39"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "18:31",
                        "end_time": "18:46"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Chinatown': {\n        'Mission District': 18,\n        'Alamo Square': 17,\n        'Pacific Heights': 10,\n        'Union Square': 7,\n        'Golden Gate Park': 23,\n        'Sunset District': 29,\n        'Presidio': 19\n    },\n    'Mission District': {\n        'Chinatown': 16,\n        'Alamo Square': 11,\n        'Pacific Heights': 16,\n        'Union Square': 15,\n        'Golden Gate Park': 17,\n        'Sunset District': 24,\n        'Presidio': 25\n    },\n    'Alamo Square': {\n        'Chinatown': 16,\n        'Mission District': 10,\n        'Pacific Heights': 10,\n        'Union Square': 14,\n        'Golden Gate Park': 9,\n        'Sunset District': 16,\n        'Presidio': 18\n    },\n    'Pacific Heights': {\n        'Chinatown': 11,\n        'Mission District': 15,\n        'Alamo Square': 10,\n        'Union Square': 12,\n        'Golden Gate Park': 15,\n        'Sunset District': 21,\n        'Presidio': 11\n    },\n    'Union Square': {\n        'Chinatown': 7,\n        'Mission District': 14,\n        'Alamo Square': 15,\n        'Pacific Heights': 15,\n        'Golden Gate Park': 22,\n        'Sunset District': 26,\n        'Presidio': 24\n    },\n    'Golden Gate Park': {\n        'Chinatown': 23,\n        'Mission District': 17,\n        'Alamo Square': 10,\n        'Pacific Heights': 16,\n        'Union Square': 22,\n        'Sunset District': 10,\n        'Presidio': 11\n    },\n    'Sunset District': {\n        'Chinatown': 30,\n        'Mission District': 24,\n        'Alamo Square': 17,\n        'Pacific Heights': 21,\n        'Union Square': 30,\n        'Golden Gate Park': 11,\n        'Presidio': 16\n    },\n    'Presidio': {\n        'Chinatown': 21,\n        'Mission District': 26,\n        'Alamo Square': 18,\n        'Pacific Heights': 11,\n        'Union Square': 22,\n        'Golden Gate Park': 12,\n        'Sunset District': 15\n    }\n}\n\n# People's availability\npeople = {\n    'David': {\n        'location': 'Mission District',\n        'start': 8.0,\n        'end': 19.75,\n        'duration': 0.75\n    },\n    'Kenneth': {\n        'location': 'Alamo Square',\n        'start': 14.0,\n        'end': 19.75,\n        'duration': 2.0\n    },\n    'John': {\n        'location': 'Pacific Heights',\n        'start': 17.0,\n        'end': 20.0,\n        'duration': 0.25\n    },\n    'Charles': {\n        'location': 'Union Square',\n        'start': 21.75,\n        'end': 22.75,\n        'duration': 1.0\n    },\n    'Deborah': {\n        'location': 'Golden Gate Park',\n        'start': 7.0,\n        'end': 18.25,\n        'duration': 1.5\n    },\n    'Karen': {\n        'location': 'Sunset District',\n        'start': 17.75,\n        'end': 21.25,\n        'duration': 0.25\n    },\n    'Carol': {\n        'location': 'Presidio',\n        'start': 8.25,\n        'end': 9.25,\n        'duration': 0.5\n    }\n}\n\ndef time_to_float(time_str):\n    if isinstance(time_str, float):\n        return time_str\n    h, m = map(int, time_str.split(':'))\n    return h + m / 60.0\n\ndef float_to_time(time_float):\n    h = int(time_float)\n    m = int((time_float - h) * 60)\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule(order):\n    current_time = 9.0  # Start at Chinatown at 9:00\n    current_location = 'Chinatown'\n    schedule = []\n    met_people = set()\n    \n    for person in order:\n        if person in met_people:\n            continue\n            \n        info = people[person]\n        location = info['location']\n        travel_time = travel_times[current_location][location] / 60.0\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this person\n        meeting_start = max(arrival_time, info['start'])\n        meeting_end = meeting_start + info['duration']\n        \n        if meeting_end > info['end']:\n            continue  # Can't meet this person in this order\n            \n        # Add to schedule\n        schedule.append({\n            'person': person,\n            'location': location,\n            'start_time': meeting_start,\n            'end_time': meeting_end,\n            'duration': info['duration']\n        })\n        \n        met_people.add(person)\n        current_time = meeting_end\n        current_location = location\n    \n    return schedule, len(met_people)\n\ndef generate_possible_orders():\n    # Generate possible meeting orders (prioritizing people with tighter schedules)\n    all_people = list(people.keys())\n    # Try Carol first since she's only available in the morning\n    priority_order = ['Carol'] + [p for p in all_people if p != 'Carol']\n    return [priority_order] + list(permutations(all_people))\n\ndef find_best_schedule():\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try different meeting orders\n    for order in generate_possible_orders():\n        schedule, num_meetings = calculate_schedule(order)\n        if num_meetings > max_meetings or (num_meetings == max_meetings and len(schedule) > len(best_schedule)):\n            best_schedule = schedule\n            max_meetings = num_meetings\n    \n    return best_schedule\n\ndef format_schedule(schedule):\n    itinerary = []\n    for meeting in schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['person'],\n            \"start_time\": float_to_time(meeting['start_time']),\n            \"end_time\": float_to_time(meeting['end_time'])\n        })\n    return {\"itinerary\": itinerary}\n\n# Main execution\nbest_schedule = find_best_schedule()\nresult = format_schedule(best_schedule)\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_609"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Ashley",
                        "start_time": "9:58",
                        "end_time": "10:43"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "10:59",
                        "end_time": "11:29"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joseph",
                        "start_time": "11:50",
                        "end_time": "13:20"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "13:30",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Lisa",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Patricia",
                        "start_time": "16:34",
                        "end_time": "18:34"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:47",
                        "end_time": "19:47"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "20:10",
                        "end_time": "21:55"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Betty",
                        "start_time": "10:06",
                        "end_time": "10:21"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "10:40",
                        "end_time": "11:10"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joseph",
                        "start_time": "11:31",
                        "end_time": "13:01"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "13:11",
                        "end_time": "14:26"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Lisa",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Patricia",
                        "start_time": "16:34",
                        "end_time": "18:34"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:47",
                        "end_time": "19:47"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "20:10",
                        "end_time": "21:55"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input data\nfriends = {\n    \"Mark\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"available_start\": \"8:15\",\n        \"available_end\": \"10:00\",\n        \"duration\": 30\n    },\n    \"Stephanie\": {\n        \"location\": \"Presidio\",\n        \"available_start\": \"12:15\",\n        \"available_end\": \"15:00\",\n        \"duration\": 75\n    },\n    \"Betty\": {\n        \"location\": \"Bayview\",\n        \"available_start\": \"7:15\",\n        \"available_end\": \"20:30\",\n        \"duration\": 15\n    },\n    \"Lisa\": {\n        \"location\": \"Haight-Ashbury\",\n        \"available_start\": \"15:30\",\n        \"available_end\": \"18:30\",\n        \"duration\": 45\n    },\n    \"William\": {\n        \"location\": \"Russian Hill\",\n        \"available_start\": \"18:45\",\n        \"available_end\": \"20:00\",\n        \"duration\": 60\n    },\n    \"Brian\": {\n        \"location\": \"The Castro\",\n        \"available_start\": \"9:15\",\n        \"available_end\": \"13:15\",\n        \"duration\": 30\n    },\n    \"Joseph\": {\n        \"location\": \"Marina District\",\n        \"available_start\": \"10:45\",\n        \"available_end\": \"15:00\",\n        \"duration\": 90\n    },\n    \"Ashley\": {\n        \"location\": \"Richmond District\",\n        \"available_start\": \"9:45\",\n        \"available_end\": \"11:15\",\n        \"duration\": 45\n    },\n    \"Patricia\": {\n        \"location\": \"Union Square\",\n        \"available_start\": \"16:30\",\n        \"available_end\": \"20:00\",\n        \"duration\": 120\n    },\n    \"Karen\": {\n        \"location\": \"Sunset District\",\n        \"available_start\": \"16:30\",\n        \"available_end\": \"22:00\",\n        \"duration\": 105\n    }\n}\n\ntravel_times = {\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 22,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 11,\n        \"The Castro\": 20,\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Sunset District\": 30\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Presidio\": 17,\n        \"Bayview\": 26,\n        \"Haight-Ashbury\": 22,\n        \"Russian Hill\": 7,\n        \"The Castro\": 27,\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 13,\n        \"Sunset District\": 27\n    },\n    \"Presidio\": {\n        \"Financial District\": 23,\n        \"Fisherman's Wharf\": 19,\n        \"Bayview\": 31,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 14,\n        \"The Castro\": 21,\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Sunset District\": 15\n    },\n    \"Bayview\": {\n        \"Financial District\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Presidio\": 32,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 23,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Richmond District\": 25,\n        \"Union Square\": 18,\n        \"Sunset District\": 23\n    },\n    \"Haight-Ashbury\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 23,\n        \"Presidio\": 15,\n        \"Bayview\": 18,\n        \"Russian Hill\": 17,\n        \"The Castro\": 6,\n        \"Marina District\": 17,\n        \"Richmond District\": 10,\n        \"Union Square\": 19,\n        \"Sunset District\": 15\n    },\n    \"Russian Hill\": {\n        \"Financial District\": 11,\n        \"Fisherman's Wharf\": 7,\n        \"Presidio\": 14,\n        \"Bayview\": 23,\n        \"Haight-Ashbury\": 17,\n        \"The Castro\": 21,\n        \"Marina District\": 7,\n        \"Richmond District\": 14,\n        \"Union Square\": 10,\n        \"Sunset District\": 23\n    },\n    \"The Castro\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 24,\n        \"Presidio\": 20,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 6,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Union Square\": 19,\n        \"Sunset District\": 17\n    },\n    \"Marina District\": {\n        \"Financial District\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 10,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 16,\n        \"Russian Hill\": 8,\n        \"The Castro\": 22,\n        \"Richmond District\": 11,\n        \"Union Square\": 16,\n        \"Sunset District\": 19\n    },\n    \"Richmond District\": {\n        \"Financial District\": 22,\n        \"Fisherman's Wharf\": 18,\n        \"Presidio\": 7,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 10,\n        \"Russian Hill\": 13,\n        \"The Castro\": 16,\n        \"Marina District\": 9,\n        \"Union Square\": 21,\n        \"Sunset District\": 11\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Presidio\": 24,\n        \"Bayview\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Russian Hill\": 13,\n        \"The Castro\": 17,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Sunset District\": 27\n    },\n    \"Sunset District\": {\n        \"Financial District\": 30,\n        \"Fisherman's Wharf\": 29,\n        \"Presidio\": 16,\n        \"Bayview\": 22,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 24,\n        \"The Castro\": 17,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Union Square\": 30\n    }\n}\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get(from_loc, {}).get(to_loc, 0)\n\ndef is_schedule_valid(schedule):\n    current_time = time_to_minutes(\"9:00\")\n    current_location = \"Financial District\"\n    \n    for entry in schedule:\n        person = entry[\"person\"]\n        friend_data = friends[person]\n        location = friend_data[\"location\"]\n        \n        # Travel time\n        travel_time = get_travel_time(current_location, location)\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet during their available time\n        available_start = time_to_minutes(friend_data[\"available_start\"])\n        available_end = time_to_minutes(friend_data[\"available_end\"])\n        duration = friend_data[\"duration\"]\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + duration\n        \n        if meeting_end > available_end:\n            return False\n        \n        current_time = meeting_end\n        current_location = location\n    \n    return True\n\ndef calculate_schedule_score(schedule):\n    total_meetings = len(schedule)\n    total_duration = sum(friends[entry[\"person\"]][\"duration\"] for entry in schedule)\n    return (total_meetings, total_duration)\n\ndef generate_best_schedule():\n    friend_names = list(friends.keys())\n    best_schedule = []\n    best_score = (0, 0)\n    \n    # We'll try permutations of different lengths to find the best possible schedule\n    for r in range(1, len(friend_names) + 1):\n        for perm in permutations(friend_names, r):\n            schedule = []\n            for person in perm:\n                schedule.append({\"person\": person})\n            \n            if is_schedule_valid(schedule):\n                current_score = calculate_schedule_score(schedule)\n                if current_score > best_score:\n                    best_score = current_score\n                    best_schedule = schedule\n    \n    # Now build the detailed itinerary\n    if not best_schedule:\n        return {\"itinerary\": []}\n    \n    itinerary = []\n    current_time = time_to_minutes(\"9:00\")\n    current_location = \"Financial District\"\n    \n    for entry in best_schedule:\n        person = entry[\"person\"]\n        friend_data = friends[person]\n        location = friend_data[\"location\"]\n        \n        # Travel time\n        travel_time = get_travel_time(current_location, location)\n        arrival_time = current_time + travel_time\n        \n        # Meeting time\n        available_start = time_to_minutes(friend_data[\"available_start\"])\n        available_end = time_to_minutes(friend_data[\"available_end\"])\n        duration = friend_data[\"duration\"]\n        \n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + duration\n        \n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": person,\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = location\n    \n    return {\"itinerary\": itinerary}\n\nbest_schedule = generate_best_schedule()\nprint(json.dumps(best_schedule, indent=2))\n```",
            "count": "meeting_planning_example_908"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:09",
                        "end_time": "9:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:09",
                        "end_time": "9:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Pacific Heights': {\n        'North Beach': 9,\n        'Financial District': 13,\n        'Alamo Square': 10,\n        'Mission District': 15\n    },\n    'North Beach': {\n        'Pacific Heights': 8,\n        'Financial District': 8,\n        'Alamo Square': 16,\n        'Mission District': 18\n    },\n    'Financial District': {\n        'Pacific Heights': 13,\n        'North Beach': 7,\n        'Alamo Square': 17,\n        'Mission District': 17\n    },\n    'Alamo Square': {\n        'Pacific Heights': 10,\n        'North Beach': 15,\n        'Financial District': 17,\n        'Mission District': 10\n    },\n    'Mission District': {\n        'Pacific Heights': 16,\n        'North Beach': 17,\n        'Financial District': 17,\n        'Alamo Square': 11\n    }\n}\n\nfriends = {\n    'Helen': {\n        'location': 'North Beach',\n        'available_start': '9:00',\n        'available_end': '17:00',\n        'min_duration': 15\n    },\n    'Kevin': {\n        'location': 'Mission District',\n        'available_start': '10:45',\n        'available_end': '14:45',\n        'min_duration': 45\n    },\n    'Betty': {\n        'location': 'Financial District',\n        'available_start': '19:00',\n        'available_end': '21:45',\n        'min_duration': 90\n    },\n    'Amanda': {\n        'location': 'Alamo Square',\n        'available_start': '19:45',\n        'available_end': '21:00',\n        'min_duration': 60\n    }\n}\n\n# Generate all possible meeting orders (permutations)\nmeeting_orders = permutations(['Helen', 'Kevin', 'Betty', 'Amanda'])\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in meeting_orders:\n    current_time = time_to_minutes('9:00')\n    current_location = 'Pacific Heights'\n    schedule = []\n    valid = True\n    meetings = 0\n    \n    for person in order:\n        friend = friends[person]\n        location = friend['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        # Calculate possible meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end > available_end:\n            valid = False\n            break\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': person,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = location\n        meetings += 1\n    \n    if valid and meetings > best_meetings:\n        best_meetings = meetings\n        best_schedule = schedule\n\n# If no schedule meets all friends, try subsets\nif best_meetings < 4:\n    for size in range(3, 0, -1):\n        for order in permutations(['Helen', 'Kevin', 'Betty', 'Amanda'], size):\n            current_time = time_to_minutes('9:00')\n            current_location = 'Pacific Heights'\n            schedule = []\n            valid = True\n            meetings = 0\n            \n            for person in order:\n                friend = friends[person]\n                location = friend['location']\n                travel_time = travel_times[current_location][location]\n                arrival_time = current_time + travel_time\n                \n                available_start = time_to_minutes(friend['available_start'])\n                available_end = time_to_minutes(friend['available_end'])\n                min_duration = friend['min_duration']\n                \n                meeting_start = max(arrival_time, available_start)\n                meeting_end = meeting_start + min_duration\n                \n                if meeting_end > available_end:\n                    valid = False\n                    break\n                \n                schedule.append({\n                    'action': 'meet',\n                    'location': location,\n                    'person': person,\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                \n                current_time = meeting_end\n                current_location = location\n                meetings += 1\n            \n            if valid and meetings > best_meetings:\n                best_meetings = meetings\n                best_schedule = schedule\n        \n        if best_schedule is not None:\n            break\n\n# Output the best schedule found\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_335"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Michelle",
                        "start_time": "10:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "13:37",
                        "end_time": "14:07"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jessica",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Linda",
                        "start_time": "16:56",
                        "end_time": "18:26"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times in minutes between locations\ntravel_times = {\n    'Sunset District': {\n        'Russian Hill': 24,\n        'The Castro': 17,\n        'Richmond District': 12,\n        'Marina District': 21,\n        'North Beach': 29,\n        'Union Square': 30,\n        'Golden Gate Park': 11\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'The Castro': 21,\n        'Richmond District': 14,\n        'Marina District': 7,\n        'North Beach': 5,\n        'Union Square': 11,\n        'Golden Gate Park': 21\n    },\n    'The Castro': {\n        'Sunset District': 17,\n        'Russian Hill': 18,\n        'Richmond District': 16,\n        'Marina District': 21,\n        'North Beach': 20,\n        'Union Square': 19,\n        'Golden Gate Park': 11\n    },\n    'Richmond District': {\n        'Sunset District': 11,\n        'Russian Hill': 13,\n        'The Castro': 16,\n        'Marina District': 9,\n        'North Beach': 17,\n        'Union Square': 21,\n        'Golden Gate Park': 9\n    },\n    'Marina District': {\n        'Sunset District': 19,\n        'Russian Hill': 8,\n        'The Castro': 22,\n        'Richmond District': 11,\n        'North Beach': 11,\n        'Union Square': 16,\n        'Golden Gate Park': 18\n    },\n    'North Beach': {\n        'Sunset District': 27,\n        'Russian Hill': 4,\n        'The Castro': 22,\n        'Richmond District': 18,\n        'Marina District': 9,\n        'Union Square': 7,\n        'Golden Gate Park': 22\n    },\n    'Union Square': {\n        'Sunset District': 26,\n        'Russian Hill': 13,\n        'The Castro': 19,\n        'Richmond District': 20,\n        'Marina District': 18,\n        'North Beach': 10,\n        'Golden Gate Park': 22\n    },\n    'Golden Gate Park': {\n        'Sunset District': 10,\n        'Russian Hill': 19,\n        'The Castro': 13,\n        'Richmond District': 7,\n        'Marina District': 16,\n        'North Beach': 24,\n        'Union Square': 22\n    }\n}\n\n# Correcting some typos in the travel_times keys\ntravel_times['Russian Hill']['Richmond District'] = 14\ntravel_times['Marina District'] = travel_times.pop('Marina District')\ntravel_times['Richmond District'] = travel_times.pop('Richmond District')\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Karen',\n        'location': 'Russian Hill',\n        'available_start': '20:45',\n        'available_end': '21:45',\n        'min_duration': 60\n    },\n    {\n        'name': 'Jessica',\n        'location': 'The Castro',\n        'available_start': '15:45',\n        'available_end': '19:30',\n        'min_duration': 60\n    },\n    {\n        'name': 'Matthew',\n        'location': 'Richmond District',\n        'available_start': '7:30',\n        'available_end': '15:15',\n        'min_duration': 15\n    },\n    {\n        'name': 'Michelle',\n        'location': 'Marina District',\n        'available_start': '10:30',\n        'available_end': '18:45',\n        'min_duration': 75\n    },\n    {\n        'name': 'Carol',\n        'location': 'North Beach',\n        'available_start': '12:00',\n        'available_end': '17:00',\n        'min_duration': 90\n    },\n    {\n        'name': 'Stephanie',\n        'location': 'Union Square',\n        'available_start': '10:45',\n        'available_end': '14:15',\n        'min_duration': 30\n    },\n    {\n        'name': 'Linda',\n        'location': 'Golden Gate Park',\n        'available_start': '10:45',\n        'available_end': '22:00',\n        'min_duration': 90\n    }\n]\n\ndef calculate_schedule():\n    current_time = time_to_minutes('9:00')\n    current_location = 'Sunset District'\n    itinerary = []\n    met_friends = set()\n    \n    # We'll try to meet friends in different orders to find the best schedule\n    friend_permutations = permutations([f for f in friends if f['name'] not in ['Karen']])  # Karen is only available late\n    \n    best_itinerary = []\n    max_meetings = 0\n    \n    for perm in friend_permutations:\n        temp_itinerary = []\n        temp_current_time = current_time\n        temp_current_location = current_location\n        temp_met_friends = set()\n        temp_perm = list(perm) + [friends[0]]  # Add Karen last\n        \n        for friend in temp_perm:\n            if friend['name'] in temp_met_friends:\n                continue\n                \n            # Calculate travel time\n            travel_time = travel_times[temp_current_location].get(friend['location'], float('inf'))\n            arrival_time = temp_current_time + travel_time\n            \n            # Check if we can meet this friend\n            available_start = time_to_minutes(friend['available_start'])\n            available_end = time_to_minutes(friend['available_end'])\n            min_duration = friend['min_duration']\n            \n            # Calculate possible meeting window\n            meeting_start = max(arrival_time, available_start)\n            meeting_end = meeting_start + min_duration\n            \n            if meeting_end > available_end:\n                continue  # Can't meet this friend\n                \n            # Add to itinerary\n            temp_itinerary.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            \n            temp_met_friends.add(friend['name'])\n            temp_current_time = meeting_end\n            temp_current_location = friend['location']\n        \n        # Check if this permutation is better\n        if len(temp_met_friends) > max_meetings or (len(temp_met_friends) == max_meetings and temp_current_time < time_to_minutes('22:00')):\n            max_meetings = len(temp_met_friends)\n            best_itinerary = temp_itinerary\n    \n    # Try to meet Karen if possible\n    karen = friends[0]\n    travel_time = travel_times[best_itinerary[-1]['location'] if best_itinerary else travel_times[current_location]\n    travel_time = travel_time.get(karen['location'], float('inf'))\n    arrival_time = time_to_minutes(best_itinerary[-1]['end_time']) if best_itinerary else current_time\n    arrival_time += travel_time\n    \n    available_start = time_to_minutes(karen['available_start'])\n    available_end = time_to_minutes(karen['available_end'])\n    min_duration = karen['min_duration']\n    \n    meeting_start = max(arrival_time, available_start)\n    meeting_end = meeting_start + min_duration\n    \n    if meeting_end <= available_end:\n        best_itinerary.append({\n            'action': 'meet',\n            'location': karen['location'],\n            'person': karen['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n    \n    return best_itinerary\n\ndef main():\n    itinerary = calculate_schedule()\n    result = {\n        \"itinerary\": itinerary\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_607"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Joseph",
                        "start_time": "9:24",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "11:16",
                        "end_time": "11:46"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Barbara",
                        "start_time": "12:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times in minutes\ntravel_times = {\n    'Golden Gate Park': {\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23,\n        'Mission District': 17,\n        'Embarcadero': 25,\n        'Financial District': 26\n    },\n    'Fisherman\\'s Wharf': {\n        'Golden Gate Park': 25,\n        'Bayview': 26,\n        'Mission District': 22,\n        'Embarcadero': 8,\n        'Financial District': 11\n    },\n    'Bayview': {\n        'Golden Gate Park': 22,\n        'Fisherman\\'s Wharf': 25,\n        'Mission District': 13,\n        'Embarcadero': 19,\n        'Financial District': 19\n    },\n    'Mission District': {\n        'Golden Gate Park': 17,\n        'Fisherman\\'s Wharf': 22,\n        'Bayview': 15,\n        'Embarcadero': 19,\n        'Financial District': 17\n    },\n    'Embarcadero': {\n        'Golden Gate Park': 25,\n        'Fisherman\\'s Wharf': 6,\n        'Bayview': 21,\n        'Mission District': 20,\n        'Financial District': 5\n    },\n    'Financial District': {\n        'Golden Gate Park': 23,\n        'Fisherman\\'s Wharf': 10,\n        'Bayview': 19,\n        'Mission District': 17,\n        'Embarcadero': 4\n    }\n}\n\n# People and their constraints\npeople = [\n    {\n        'name': 'Joseph',\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '8:00',\n        'available_end': '17:30',\n        'min_duration': 90\n    },\n    {\n        'name': 'Jeffrey',\n        'location': 'Bayview',\n        'available_start': '17:30',\n        'available_end': '21:30',\n        'min_duration': 60\n    },\n    {\n        'name': 'Kevin',\n        'location': 'Mission District',\n        'available_start': '11:15',\n        'available_end': '15:15',\n        'min_duration': 30\n    },\n    {\n        'name': 'David',\n        'location': 'Embarcadero',\n        'available_start': '8:15',\n        'available_end': '9:00',\n        'min_duration': 30\n    },\n    {\n        'name': 'Barbara',\n        'location': 'Financial District',\n        'available_start': '10:30',\n        'available_end': '16:30',\n        'min_duration': 15\n    }\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00')\n    current_location = 'Golden Gate Park'\n    schedule = []\n    met_people = set()\n    \n    for person_name in order:\n        person = next(p for p in people if p['name'] == person_name)\n        location = person['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        available_start = time_to_minutes(person['available_start'])\n        available_end = time_to_minutes(person['available_end'])\n        min_duration = person['min_duration']\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end > available_end:\n            return None  # Can't meet this person\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': person['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        met_people.add(person['name'])\n        current_time = meeting_end\n        current_location = location\n    \n    # Check if we can meet Jeffrey after all other meetings\n    jeffrey = next(p for p in people if p['name'] == 'Jeffrey')\n    if 'Jeffrey' not in met_people:\n        location = jeffrey['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        available_start = time_to_minutes(jeffrey['available_start'])\n        available_end = time_to_minutes(jeffrey['available_end'])\n        min_duration = jeffrey['min_duration']\n        \n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end <= available_end:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': 'Jeffrey',\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            met_people.add('Jeffrey')\n    \n    return schedule if len(met_people) >= 3 else None  # At least meet 3 people\n\n# Generate all possible orders of meeting people (excluding Jeffrey initially)\npeople_names = [p['name'] for p in people if p['name'] != 'Jeffrey']\nall_orders = list(permutations(people_names))\n\nbest_schedule = None\nmax_people_met = 0\n\nfor order in all_orders:\n    schedule = calculate_schedule(order)\n    if schedule:\n        people_met = len(set(item['person'] for item in schedule))\n        if people_met > max_people_met or (people_met == max_people_met and len(schedule) > len(best_schedule or [])):\n            best_schedule = schedule\n            max_people_met = people_met\n\nif not best_schedule:\n    best_schedule = []\n\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_432"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str == \"9:00AM\":\n        return 9 * 60\n    elif time_str == \"9:30AM\":\n        return 9 * 60 + 30\n    elif time_str == \"1:30PM\":\n        return 13 * 60 + 30\n    elif time_str == \"7:00AM\":\n        return 7 * 60\n    elif time_str == \"9:00PM\":\n        return 21 * 60\n    elif time_str == \"11:15AM\":\n        return 11 * 60 + 15\n    elif time_str == \"1:45PM\":\n        return 13 * 60 + 45\n    elif time_str == \"8:30AM\":\n        return 8 * 60 + 30\n    else:\n        h, m = map(int, time_str.split(':'))\n        return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ntravel_times = {\n    ('Financial District', 'Chinatown'): 5,\n    ('Financial District', 'Alamo Square'): 17,\n    ('Financial District', 'Bayview'): 19,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Chinatown', 'Financial District'): 5,\n    ('Chinatown', 'Alamo Square'): 17,\n    ('Chinatown', 'Bayview'): 22,\n    ('Chinatown', 'Fisherman\\'s Wharf'): 8,\n    ('Alamo Square', 'Financial District'): 17,\n    ('Alamo Square', 'Chinatown'): 16,\n    ('Alamo Square', 'Bayview'): 16,\n    ('Alamo Square', 'Fisherman\\'s Wharf'): 19,\n    ('Bayview', 'Financial District'): 19,\n    ('Bayview', 'Chinatown'): 18,\n    ('Bayview', 'Alamo Square'): 16,\n    ('Bayview', 'Fisherman\\'s Wharf'): 25,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'Chinatown'): 12,\n    ('Fisherman\\'s Wharf', 'Alamo Square'): 20,\n    ('Fisherman\\'s Wharf', 'Bayview'): 26\n}\n\nfriends = [\n    {\n        'name': 'Nancy',\n        'location': 'Chinatown',\n        'available_start': time_to_minutes('9:30AM'),\n        'available_end': time_to_minutes('1:30PM'),\n        'duration': 90\n    },\n    {\n        'name': 'Mary',\n        'location': 'Alamo Square',\n        'available_start': time_to_minutes('7:00AM'),\n        'available_end': time_to_minutes('9:00PM'),\n        'duration': 75\n    },\n    {\n        'name': 'Jessica',\n        'location': 'Bayview',\n        'available_start': time_to_minutes('11:15AM'),\n        'available_end': time_to_minutes('1:45PM'),\n        'duration': 45\n    },\n    {\n        'name': 'Rebecca',\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': time_to_minutes('7:00AM'),\n        'available_end': time_to_minutes('8:30AM'),\n        'duration': 45\n    }\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Financial District'\n    schedule = []\n    met_friends = set()\n    \n    for friend_idx in order:\n        friend = friends[friend_idx]\n        if friend['name'] in met_friends:\n            continue\n        \n        travel_time = travel_times[(current_location, friend['location'])]\n        arrival_time = current_time + travel_time\n        start_time = max(arrival_time, friend['available_start'])\n        end_time = start_time + friend['duration']\n        \n        if end_time > friend['available_end']:\n            continue\n        \n        schedule.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        \n        current_time = end_time\n        current_location = friend['location']\n        met_friends.add(friend['name'])\n    \n    return schedule\n\nbest_schedule = []\nmax_meetings = 0\n\nfor perm in permutations(range(len(friends))):\n    met_friends = set()\n    schedule = calculate_schedule(perm)\n    if len(schedule) > max_meetings:\n        max_meetings = len(schedule)\n        best_schedule = schedule\n    elif len(schedule) == max_meetings and len(schedule) > 0:\n        total_time = sum([time_to_minutes(entry['end_time']) - time_to_minutes(entry['start_time']) for entry in schedule])\n        best_total_time = sum([time_to_minutes(entry['end_time']) - time_to_minutes(entry['start_time']) for entry in best_schedule])\n        if total_time > best_total_time:\n            best_schedule = schedule\n\nresult = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_309"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Michelle",
                        "start_time": "9:30",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "George",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:19",
                        "end_time": "11:49"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:30",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Chinatown': 30,\n        'Presidio': 16,\n        'Fisherman\\'s Wharf': 29\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Fisherman\\'s Wharf': 7\n    },\n    'Chinatown': {\n        'Sunset District': 29,\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Fisherman\\'s Wharf': 8\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Fisherman\\'s Wharf': {\n        'Sunset District': 27,\n        'Russian Hill': 7,\n        'Chinatown': 12,\n        'Presidio': 17\n    }\n}\n\n# Person constraints\npeople = {\n    'William': {\n        'location': 'Russian Hill',\n        'available_start': '18:30',\n        'available_end': '20:45',\n        'min_duration': 105\n    },\n    'Michelle': {\n        'location': 'Chinatown',\n        'available_start': '8:15',\n        'available_end': '14:00',\n        'min_duration': 15\n    },\n    'George': {\n        'location': 'Presidio',\n        'available_start': '10:30',\n        'available_end': '18:45',\n        'min_duration': 30\n    },\n    'Robert': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '9:00',\n        'available_end': '13:45',\n        'min_duration': 30\n    }\n}\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule(order):\n    current_location = 'Sunset District'\n    current_time = time_to_minutes('9:00')\n    schedule = []\n    \n    for person in order:\n        info = people[person]\n        location = info['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        available_start = time_to_minutes(info['available_start'])\n        available_end = time_to_minutes(info['available_end'])\n        min_duration = info['min_duration']\n        \n        # Calculate meeting window\n        start_time = max(arrival_time, available_start)\n        end_time = min(start_time + min_duration, available_end)\n        \n        if end_time - start_time < min_duration:\n            return None  # Not enough time to meet\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': person,\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        \n        current_time = end_time\n        current_location = location\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return -1\n    total_meetings = len(schedule)\n    total_time = sum(time_to_minutes(m['end_time']) - time_to_minutes(m['start_time']) for m in schedule)\n    return (total_meetings, total_time)\n\n# Generate all possible orders of meetings\nall_orders = permutations(people.keys())\nbest_schedule = None\nbest_score = (-1, -1)\n\nfor order in all_orders:\n    schedule = calculate_schedule(order)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\n# Prepare output\noutput = {\n    \"itinerary\": best_schedule\n} if best_schedule else {\"itinerary\": []}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_322"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mary",
                        "start_time": "9:25",
                        "end_time": "10:10"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "10:17",
                        "end_time": "11:47"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "12:02",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Emily",
                        "start_time": "17:19",
                        "end_time": "19:04"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mary",
                        "start_time": "9:25",
                        "end_time": "10:10"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "10:17",
                        "end_time": "11:47"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "12:02",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Emily",
                        "start_time": "17:19",
                        "end_time": "19:04"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Embarcadero': {\n        'Golden Gate Park': 25,\n        'Haight-Ashbury': 21,\n        'Bayview': 21,\n        'Presidio': 20,\n        'Financial District': 5\n    },\n    'Golden Gate Park': {\n        'Embarcadero': 25,\n        'Haight-Ashbury': 7,\n        'Bayview': 23,\n        'Presidio': 11,\n        'Financial District': 26\n    },\n    'Haight-Ashbury': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 7,\n        'Bayview': 18,\n        'Presidio': 15,\n        'Financial District': 21\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Golden Gate Park': 22,\n        'Haight-Ashbury': 19,\n        'Presidio': 31,\n        'Financial District': 19\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Haight-Ashbury': 15,\n        'Bayview': 31,\n        'Financial District': 23\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Golden Gate Park': 23,\n        'Haight-Ashbury': 19,\n        'Bayview': 19,\n        'Presidio': 22\n    }\n}\n\nfriends = {\n    'Mary': {\n        'location': 'Golden Gate Park',\n        'start': time_to_minutes('8:45'),\n        'end': time_to_minutes('11:45'),\n        'duration': 45\n    },\n    'Kevin': {\n        'location': 'Haight-Ashbury',\n        'start': time_to_minutes('10:15'),\n        'end': time_to_minutes('16:15'),\n        'duration': 90\n    },\n    'Deborah': {\n        'location': 'Bayview',\n        'start': time_to_minutes('15:00'),\n        'end': time_to_minutes('19:15'),\n        'duration': 120\n    },\n    'Stephanie': {\n        'location': 'Presidio',\n        'start': time_to_minutes('10:00'),\n        'end': time_to_minutes('17:15'),\n        'duration': 120\n    },\n    'Emily': {\n        'location': 'Financial District',\n        'start': time_to_minutes('11:30'),\n        'end': time_to_minutes('21:45'),\n        'duration': 105\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00')\n    current_location = 'Embarcadero'\n    schedule = []\n    \n    for friend in order:\n        friend_data = friends[friend]\n        location = friend_data['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Calculate meeting window\n        start_window = friend_data['start']\n        end_window = friend_data['end']\n        duration = friend_data['duration']\n        \n        # Determine meeting start time\n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + duration\n        \n        if meeting_end > end_window:\n            return None  # Not enough time to meet\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n        current_location = location\n    \n    return schedule\n\n# Generate all possible orders of meeting friends\nall_orders = permutations(friends.keys())\n\nbest_schedule = None\nmax_meetings = 0\n\nfor order in all_orders:\n    schedule = calculate_schedule(order)\n    if schedule is not None and len(schedule) > max_meetings:\n        max_meetings = len(schedule)\n        best_schedule = schedule\n\nif best_schedule is None:\n    # Try to find a schedule with fewer meetings if all 5 is impossible\n    for num_meetings in range(4, 0, -1):\n        from itertools import combinations\n        for friends_subset in combinations(friends.keys(), num_meetings):\n            for order in permutations(friends_subset):\n                schedule = calculate_schedule(order)\n                if schedule is not None:\n                    best_schedule = schedule\n                    break\n            if best_schedule is not None:\n                break\n        if best_schedule is not None:\n            break\n\noutput = {\n    \"itinerary\": best_schedule if best_schedule is not None else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_479"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Timothy",
                        "start_time": "20:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Timothy",
                        "start_time": "20:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef main():\n    # Input parameters\n    arrival_location = \"Alamo Square\"\n    arrival_time = parse_time(\"9:00\")\n    \n    # Friend's availability\n    friend_name = \"Timothy\"\n    friend_location = \"Richmond District\"\n    friend_window_start = parse_time(\"20:45\")\n    friend_window_end = parse_time(\"21:30\")\n    required_duration = timedelta(minutes=45)\n    \n    # Travel times\n    travel_times = {\n        (\"Alamo Square\", \"Richmond District\"): timedelta(minutes=12),\n        (\"Richmond District\", \"Alamo Square\"): timedelta(minutes=13)\n    }\n    \n    # Calculate possible meeting time\n    travel_to_friend = travel_times[(arrival_location, friend_location)]\n    earliest_arrival = arrival_time + travel_to_friend\n    \n    # Check if we can make it during friend's window\n    meeting_start = max(earliest_arrival, friend_window_start)\n    meeting_end = meeting_start + required_duration\n    \n    itinerary = []\n    \n    if meeting_end <= friend_window_end:\n        # Add travel to friend\n        itinerary.append({\n            \"action\": \"travel\",\n            \"from\": arrival_location,\n            \"to\": friend_location,\n            \"start_time\": format_time(arrival_time),\n            \"end_time\": format_time(earliest_arrival)\n        })\n        \n        # Add meeting with friend\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend_location,\n            \"person\": friend_name,\n            \"start_time\": format_time(meeting_start),\n            \"end_time\": format_time(meeting_end)\n        })\n        \n        # Add return travel\n        travel_home = travel_times[(friend_location, arrival_location)]\n        home_arrival = meeting_end + travel_home\n        itinerary.append({\n            \"action\": \"travel\",\n            \"from\": friend_location,\n            \"to\": arrival_location,\n            \"start_time\": format_time(meeting_end),\n            \"end_time\": format_time(home_arrival)\n        })\n    else:\n        # Can't meet friend\n        itinerary.append({\n            \"action\": \"note\",\n            \"message\": \"Cannot meet Timothy given constraints\"\n        })\n    \n    result = {\n        \"itinerary\": itinerary\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_98"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:08",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kimberly",
                        "start_time": "16:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Patricia",
                        "start_time": "18:00",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:08",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kimberly",
                        "start_time": "16:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Patricia",
                        "start_time": "18:00",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    \"\"\"Convert time string 'H:MM' to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to time string 'H:MM'.\"\"\"\n    hours = minutes // 60\n    minutes = minutes % 60\n    return f\"{hours}:{minutes:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Nob Hill': {\n        'North Beach': 8,\n        'Fisherman\\'s Wharf': 11,\n        'Bayview': 19\n    },\n    'North Beach': {\n        'Nob Hill': 7,\n        'Fisherman\\'s Wharf': 5,\n        'Bayview': 22\n    },\n    'Fisherman\\'s Wharf': {\n        'Nob Hill': 11,\n        'North Beach': 6,\n        'Bayview': 26\n    },\n    'Bayview': {\n        'Nob Hill': 20,\n        'North Beach': 21,\n        'Fisherman\\'s Wharf': 25\n    }\n}\n\nfriends = {\n    'Helen': {\n        'location': 'North Beach',\n        'available_start': '7:00',\n        'available_end': '16:45',\n        'duration': 120\n    },\n    'Kimberly': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '16:30',\n        'available_end': '21:00',\n        'duration': 45\n    },\n    'Patricia': {\n        'location': 'Bayview',\n        'available_start': '18:00',\n        'available_end': '21:15',\n        'duration': 120\n    }\n}\n\ncurrent_location = 'Nob Hill'\ncurrent_time = time_to_minutes('9:00')\n\n# Generate all possible meeting orders\nmeeting_orders = permutations(friends.keys())\n\nbest_schedule = None\nmax_meetings = 0\n\nfor order in meeting_orders:\n    schedule = []\n    temp_location = current_location\n    temp_time = current_time\n    meetings_scheduled = 0\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        location = friend['location']\n        travel_time = travel_times[temp_location][location]\n        arrival_time = temp_time + travel_time\n        \n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        duration = friend['duration']\n        \n        # Calculate possible meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + duration\n        \n        if meeting_end <= available_end:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': friend_name,\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            meetings_scheduled += 1\n            temp_location = location\n            temp_time = meeting_end\n        else:\n            break  # Can't meet this friend in this order\n    \n    if meetings_scheduled > max_meetings:\n        max_meetings = meetings_scheduled\n        best_schedule = schedule\n    elif meetings_scheduled == max_meetings and meetings_scheduled > 0:\n        # Prefer schedules that end earlier\n        if not best_schedule or temp_time < time_to_minutes(best_schedule[-1]['end_time']):\n            best_schedule = schedule\n\n# Prepare output\noutput = {\"itinerary\": best_schedule} if best_schedule else {\"itinerary\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_222"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Matthew",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "12:51",
                        "end_time": "14:21"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "14:31",
                        "end_time": "14:46"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "15:01",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Kenneth",
                        "start_time": "16:53",
                        "end_time": "17:53"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Helen",
                        "start_time": "19:45",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "21:15",
                        "end_time": "22:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Matthew",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "15:16",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Kenneth",
                        "start_time": "15:53",
                        "end_time": "16:53"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "17:11",
                        "end_time": "18:41"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Helen",
                        "start_time": "19:45",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "21:15",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Russian Hill': {\n        'Presidio': 14,\n        'Chinatown': 9,\n        'Pacific Heights': 7,\n        'Richmond District': 14,\n        'Fisherman\\'s Wharf': 7,\n        'Golden Gate Park': 21,\n        'Bayview': 23\n    },\n    'Presidio': {\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Pacific Heights': 11,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 19,\n        'Golden Gate Park': 12,\n        'Bayview': 31\n    },\n    'Chinatown': {\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Pacific Heights': 10,\n        'Richmond District': 20,\n        'Fisherman\\'s Wharf': 8,\n        'Golden Gate Park': 23,\n        'Bayview': 22\n    },\n    'Pacific Heights': {\n        'Russian Hill': 7,\n        'Presidio': 11,\n        'Chinatown': 11,\n        'Richmond District': 12,\n        'Fisherman\\'s Wharf': 13,\n        'Golden Gate Park': 15,\n        'Bayview': 22\n    },\n    'Richmond District': {\n        'Russian Hill': 13,\n        'Presidio': 7,\n        'Chinatown': 20,\n        'Pacific Heights': 10,\n        'Fisherman\\'s Wharf': 18,\n        'Golden Gate Park': 9,\n        'Bayview': 26\n    },\n    'Fisherman\\'s Wharf': {\n        'Russian Hill': 7,\n        'Presidio': 17,\n        'Chinatown': 12,\n        'Pacific Heights': 12,\n        'Richmond District': 18,\n        'Golden Gate Park': 25,\n        'Bayview': 26\n    },\n    'Golden Gate Park': {\n        'Russian Hill': 19,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'Pacific Heights': 16,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23\n    },\n    'Bayview': {\n        'Russian Hill': 23,\n        'Presidio': 31,\n        'Chinatown': 18,\n        'Pacific Heights': 23,\n        'Richmond District': 25,\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22\n    }\n}\n\nfriends = [\n    {\n        'name': 'Matthew',\n        'location': 'Presidio',\n        'available_start': '11:00',\n        'available_end': '21:00',\n        'duration': 90\n    },\n    {\n        'name': 'Margaret',\n        'location': 'Chinatown',\n        'available_start': '9:15',\n        'available_end': '18:45',\n        'duration': 90\n    },\n    {\n        'name': 'Nancy',\n        'location': 'Pacific Heights',\n        'available_start': '14:15',\n        'available_end': '17:00',\n        'duration': 15\n    },\n    {\n        'name': 'Helen',\n        'location': 'Richmond District',\n        'available_start': '19:45',\n        'available_end': '22:00',\n        'duration': 60\n    },\n    {\n        'name': 'Rebecca',\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '21:15',\n        'available_end': '22:15',\n        'duration': 60\n    },\n    {\n        'name': 'Kimberly',\n        'location': 'Golden Gate Park',\n        'available_start': '13:00',\n        'available_end': '16:30',\n        'duration': 120\n    },\n    {\n        'name': 'Kenneth',\n        'location': 'Bayview',\n        'available_start': '14:30',\n        'available_end': '18:00',\n        'duration': 60\n    }\n]\n\ndef generate_schedules():\n    current_location = 'Russian Hill'\n    current_time = time_to_minutes('9:00')\n    max_meetings = 0\n    best_schedule = []\n    \n    # Try all possible orders of meeting friends\n    for order in permutations(friends):\n        schedule = []\n        location = current_location\n        time = current_time\n        meetings = 0\n        \n        for friend in order:\n            # Check if we can meet this friend\n            travel_time = travel_times[location][friend['location']]\n            arrival_time = time + travel_time\n            available_start = time_to_minutes(friend['available_start'])\n            available_end = time_to_minutes(friend['available_end'])\n            \n            # Calculate possible meeting window\n            start_time = max(arrival_time, available_start)\n            end_time = min(start_time + friend['duration'], available_end)\n            \n            if end_time > start_time and end_time <= available_end:\n                schedule.append({\n                    'action': 'meet',\n                    'location': friend['location'],\n                    'person': friend['name'],\n                    'start_time': minutes_to_time(start_time),\n                    'end_time': minutes_to_time(end_time)\n                })\n                meetings += 1\n                time = end_time\n                location = friend['location']\n            else:\n                # Try to adjust meeting time if possible\n                if available_end - available_start >= friend['duration']:\n                    start_time = available_start\n                    end_time = start_time + friend['duration']\n                    if arrival_time <= start_time:\n                        schedule.append({\n                            'action': 'meet',\n                            'location': friend['location'],\n                            'person': friend['name'],\n                            'start_time': minutes_to_time(start_time),\n                            'end_time': minutes_to_time(end_time)\n                        })\n                        meetings += 1\n                        time = end_time\n                        location = friend['location']\n        \n        if meetings > max_meetings or (meetings == max_meetings and len(schedule) > len(best_schedule)):\n            max_meetings = meetings\n            best_schedule = schedule\n    \n    return best_schedule\n\n# Generate the best schedule\nbest_schedule = generate_schedules()\n\n# Output as JSON\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_629"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Rebecca",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "James",
                        "start_time": "11:05",
                        "end_time": "12:35"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "14:49",
                        "end_time": "16:19"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Amanda",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Rebecca",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "James",
                        "start_time": "11:05",
                        "end_time": "12:35"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "14:49",
                        "end_time": "16:19"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Amanda",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    'The Castro': {\n        'Bayview': 19,\n        'Pacific Heights': 16,\n        'Alamo Square': 8,\n        'Fisherman\\'s Wharf': 24,\n        'Golden Gate Park': 11\n    },\n    'Bayview': {\n        'The Castro': 20,\n        'Pacific Heights': 23,\n        'Alamo Square': 16,\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22\n    },\n    'Pacific Heights': {\n        'The Castro': 16,\n        'Bayview': 22,\n        'Alamo Square': 10,\n        'Fisherman\\'s Wharf': 13,\n        'Golden Gate Park': 15\n    },\n    'Alamo Square': {\n        'The Castro': 8,\n        'Bayview': 16,\n        'Pacific Heights': 10,\n        'Fisherman\\'s Wharf': 19,\n        'Golden Gate Park': 9\n    },\n    'Fisherman\\'s Wharf': {\n        'The Castro': 26,\n        'Bayview': 26,\n        'Pacific Heights': 12,\n        'Alamo Square': 20,\n        'Golden Gate Park': 25\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Bayview': 23,\n        'Pacific Heights': 16,\n        'Alamo Square': 10,\n        'Fisherman\\'s Wharf': 24\n    }\n}\n\npeople = {\n    'Rebecca': {\n        'location': 'Bayview',\n        'start': time_to_minutes('9:00'),\n        'end': time_to_minutes('12:45'),\n        'duration': 90\n    },\n    'Amanda': {\n        'location': 'Pacific Heights',\n        'start': time_to_minutes('18:30'),\n        'end': time_to_minutes('21:45'),\n        'duration': 90\n    },\n    'James': {\n        'location': 'Alamo Square',\n        'start': time_to_minutes('9:45'),\n        'end': time_to_minutes('21:15'),\n        'duration': 90\n    },\n    'Sarah': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': time_to_minutes('8:00'),\n        'end': time_to_minutes('21:30'),\n        'duration': 90\n    },\n    'Melissa': {\n        'location': 'Golden Gate Park',\n        'start': time_to_minutes('9:00'),\n        'end': time_to_minutes('18:45'),\n        'duration': 90\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00')\n    current_location = 'The Castro'\n    schedule = []\n    \n    for person in order:\n        info = people[person]\n        location = info['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, info['start'])\n        meeting_end = meeting_start + info['duration']\n        \n        if meeting_end > info['end']:\n            return None  # Not enough time to meet\n        \n        schedule.append({\n            'person': person,\n            'location': location,\n            'start_time': meeting_start,\n            'end_time': meeting_end,\n            'travel_time': travel_time\n        })\n        \n        current_time = meeting_end\n        current_location = location\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    # Count number of people met\n    return len(schedule)\n\nbest_schedule = None\nbest_score = 0\n\n# Try all possible orders of meeting people\nfor order in permutations(people.keys()):\n    schedule = calculate_schedule(order)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\n# Convert to output format\nif best_schedule:\n    itinerary = []\n    for meeting in best_schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['person'],\n            \"start_time\": minutes_to_time(meeting['start_time']),\n            \"end_time\": minutes_to_time(meeting['end_time'])\n        })\n    output = {\"itinerary\": itinerary}\nelse:\n    output = {\"itinerary\": []}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_468"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sandra",
                        "start_time": "10:00",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "William",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "11:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:53",
                        "end_time": "14:38"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Anthony",
                        "start_time": "14:55",
                        "end_time": "16:10"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Stephanie",
                        "start_time": "16:17",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Barbara",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "William",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sandra",
                        "start_time": "11:40",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "14:09",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Anthony",
                        "start_time": "15:32",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Stephanie",
                        "start_time": "16:54",
                        "end_time": "18:09"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Barbara",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from_location, to_location) -> minutes\ntravel_times = {\n    ('Marina District', 'Richmond District'): 11,\n    ('Marina District', 'Union Square'): 16,\n    ('Marina District', 'Nob Hill'): 12,\n    ('Marina District', 'Fisherman\\'s Wharf'): 10,\n    ('Marina District', 'Golden Gate Park'): 18,\n    ('Marina District', 'Embarcadero'): 14,\n    ('Marina District', 'Financial District'): 17,\n    ('Marina District', 'North Beach'): 11,\n    ('Marina District', 'Presidio'): 10,\n    ('Richmond District', 'Marina District'): 9,\n    ('Richmond District', 'Union Square'): 21,\n    ('Richmond District', 'Nob Hill'): 17,\n    ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n    ('Richmond District', 'Golden Gate Park'): 9,\n    ('Richmond District', 'Embarcadero'): 19,\n    ('Richmond District', 'Financial District'): 22,\n    ('Richmond District', 'North Beach'): 17,\n    ('Richmond District', 'Presidio'): 7,\n    ('Union Square', 'Marina District'): 18,\n    ('Union Square', 'Richmond District'): 20,\n    ('Union Square', 'Nob Hill'): 9,\n    ('Union Square', 'Fisherman\\'s Wharf'): 15,\n    ('Union Square', 'Golden Gate Park'): 22,\n    ('Union Square', 'Embarcadero'): 11,\n    ('Union Square', 'Financial District'): 9,\n    ('Union Square', 'North Beach'): 10,\n    ('Union Square', 'Presidio'): 24,\n    ('Nob Hill', 'Marina District'): 11,\n    ('Nob Hill', 'Richmond District'): 14,\n    ('Nob Hill', 'Union Square'): 7,\n    ('Nob Hill', 'Fisherman\\'s Wharf'): 10,\n    ('Nob Hill', 'Golden Gate Park'): 17,\n    ('Nob Hill', 'Embarcadero'): 9,\n    ('Nob Hill', 'Financial District'): 9,\n    ('Nob Hill', 'North Beach'): 8,\n    ('Nob Hill', 'Presidio'): 17,\n    ('Fisherman\\'s Wharf', 'Marina District'): 9,\n    ('Fisherman\\'s Wharf', 'Richmond District'): 18,\n    ('Fisherman\\'s Wharf', 'Union Square'): 13,\n    ('Fisherman\\'s Wharf', 'Nob Hill'): 11,\n    ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n    ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'North Beach'): 6,\n    ('Fisherman\\'s Wharf', 'Presidio'): 17,\n    ('Golden Gate Park', 'Marina District'): 16,\n    ('Golden Gate Park', 'Richmond District'): 7,\n    ('Golden Gate Park', 'Union Square'): 22,\n    ('Golden Gate Park', 'Nob Hill'): 20,\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'Embarcadero'): 25,\n    ('Golden Gate Park', 'Financial District'): 26,\n    ('Golden Gate Park', 'North Beach'): 23,\n    ('Golden Gate Park', 'Presidio'): 11,\n    ('Embarcadero', 'Marina District'): 12,\n    ('Embarcadero', 'Richmond District'): 21,\n    ('Embarcadero', 'Union Square'): 10,\n    ('Embarcadero', 'Nob Hill'): 10,\n    ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n    ('Embarcadero', 'Golden Gate Park'): 25,\n    ('Embarcadero', 'Financial District'): 5,\n    ('Embarcadero', 'North Beach'): 5,\n    ('Embarcadero', 'Presidio'): 20,\n    ('Financial District', 'Marina District'): 15,\n    ('Financial District', 'Richmond District'): 21,\n    ('Financial District', 'Union Square'): 9,\n    ('Financial District', 'Nob Hill'): 8,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Financial District', 'Golden Gate Park'): 23,\n    ('Financial District', 'Embarcadero'): 4,\n    ('Financial District', 'North Beach'): 7,\n    ('Financial District', 'Presidio'): 22,\n    ('North Beach', 'Marina District'): 9,\n    ('North Beach', 'Richmond District'): 18,\n    ('North Beach', 'Union Square'): 7,\n    ('North Beach', 'Nob Hill'): 7,\n    ('North Beach', 'Fisherman\\'s Wharf'): 5,\n    ('North Beach', 'Golden Gate Park'): 22,\n    ('North Beach', 'Embarcadero'): 6,\n    ('North Beach', 'Financial District'): 8,\n    ('North Beach', 'Presidio'): 17,\n    ('Presidio', 'Marina District'): 11,\n    ('Presidio', 'Richmond District'): 7,\n    ('Presidio', 'Union Square'): 22,\n    ('Presidio', 'Nob Hill'): 18,\n    ('Presidio', 'Fisherman\\'s Wharf'): 19,\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Presidio', 'Embarcadero'): 20,\n    ('Presidio', 'Financial District'): 23,\n    ('Presidio', 'North Beach'): 18\n}\n\n# Friend data: name -> (location, available_start, available_end, min_duration)\nfriends = {\n    'Stephanie': ('Richmond District', '16:15', '21:30', 75),\n    'William': ('Union Square', '10:45', '17:30', 45),\n    'Elizabeth': ('Nob Hill', '12:15', '15:00', 105),\n    'Joseph': ('Fisherman\\'s Wharf', '12:45', '14:00', 75),\n    'Anthony': ('Golden Gate Park', '13:00', '20:30', 75),\n    'Barbara': ('Embarcadero', '19:15', '20:30', 75),\n    'Carol': ('Financial District', '11:45', '16:15', 60),\n    'Sandra': ('North Beach', '10:00', '12:30', 15),\n    'Kenneth': ('Presidio', '21:15', '22:15', 45)\n}\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule():\n    current_location = 'Marina District'\n    current_time = time_to_minutes('9:00')\n    itinerary = []\n    remaining_friends = set(friends.keys())\n    \n    # We'll try to meet friends in order of their availability end times\n    sorted_friends = sorted(friends.items(), key=lambda x: time_to_minutes(x[1][1]))\n    \n    for name, (location, avail_start, avail_end, min_duration) in sorted_friends:\n        if name not in remaining_friends:\n            continue\n            \n        travel_time = travel_times.get((current_location, location), float('inf'))\n        arrival_time = current_time + travel_time\n        avail_start_min = time_to_minutes(avail_start)\n        avail_end_min = time_to_minutes(avail_end)\n        \n        # Can we meet this friend?\n        meeting_start = max(arrival_time, avail_start_min)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end <= avail_end_min:\n            # Add to itinerary\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": name,\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            current_location = location\n            current_time = meeting_end\n            remaining_friends.remove(name)\n    \n    # Try to fit remaining friends if possible\n    for name in list(remaining_friends):\n        location, avail_start, avail_end, min_duration = friends[name]\n        travel_time = travel_times.get((current_location, location), float('inf'))\n        arrival_time = current_time + travel_time\n        avail_start_min = time_to_minutes(avail_start)\n        avail_end_min = time_to_minutes(avail_end)\n        \n        meeting_start = max(arrival_time, avail_start_min)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end <= avail_end_min:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": name,\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            current_location = location\n            current_time = meeting_end\n            remaining_friends.remove(name)\n    \n    return itinerary\n\ndef main():\n    itinerary = calculate_schedule()\n    result = {\n        \"itinerary\": itinerary\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_828"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "9:10",
                        "end_time": "9:25"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "14:10",
                        "end_time": "14:55"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joseph",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "20:36",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "21:14",
                        "end_time": "21:29"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Union Square': {\n        'The Castro': 17,\n        'North Beach': 10,\n        'Embarcadero': 11,\n        'Alamo Square': 15,\n        'Nob Hill': 9,\n        'Presidio': 24,\n        'Fisherman\\'s Wharf': 15,\n        'Mission District': 14,\n        'Haight-Ashbury': 18\n    },\n    'The Castro': {\n        'Union Square': 19,\n        'North Beach': 20,\n        'Embarcadero': 22,\n        'Alamo Square': 8,\n        'Nob Hill': 16,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 24,\n        'Mission District': 7,\n        'Haight-Ashbury': 6\n    },\n    'North Beach': {\n        'Union Square': 7,\n        'The Castro': 23,\n        'Embarcadero': 6,\n        'Alamo Square': 16,\n        'Nob Hill': 7,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 5,\n        'Mission District': 18,\n        'Haight-Ashbury': 18\n    },\n    'Embarcadero': {\n        'Union Square': 10,\n        'The Castro': 25,\n        'North Beach': 5,\n        'Alamo Square': 19,\n        'Nob Hill': 10,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 6,\n        'Mission District': 20,\n        'Haight-Ashbury': 21\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'The Castro': 8,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 10,\n        'Haight-Ashbury': 5\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'The Castro': 17,\n        'North Beach': 8,\n        'Embarcadero': 9,\n        'Alamo Square': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Mission District': 13,\n        'Haight-Ashbury': 13\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'The Castro': 21,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Alamo Square': 19,\n        'Nob Hill': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 26,\n        'Haight-Ashbury': 15\n    },\n    'Fisherman\\'s Wharf': {\n        'Union Square': 13,\n        'The Castro': 27,\n        'North Beach': 6,\n        'Embarcadero': 8,\n        'Alamo Square': 21,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Mission District': 22,\n        'Haight-Ashbury': 22\n    },\n    'Mission District': {\n        'Union Square': 15,\n        'The Castro': 7,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Alamo Square': 11,\n        'Nob Hill': 12,\n        'Presidio': 25,\n        'Fisherman\\'s Wharf': 22,\n        'Haight-Ashbury': 12\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'The Castro': 6,\n        'North Beach': 19,\n        'Embarcadero': 20,\n        'Alamo Square': 5,\n        'Nob Hill': 15,\n        'Presidio': 15,\n        'Fisherman\\'s Wharf': 23,\n        'Mission District': 11\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Melissa',\n        'location': 'The Castro',\n        'available_start': '20:15',\n        'available_end': '21:15',\n        'min_duration': 30\n    },\n    {\n        'name': 'Kimberly',\n        'location': 'North Beach',\n        'available_start': '7:00',\n        'available_end': '10:30',\n        'min_duration': 15\n    },\n    {\n        'name': 'Joseph',\n        'location': 'Embarcadero',\n        'available_start': '15:30',\n        'available_end': '19:30',\n        'min_duration': 75\n    },\n    {\n        'name': 'Barbara',\n        'location': 'Alamo Square',\n        'available_start': '20:45',\n        'available_end': '21:45',\n        'min_duration': 15\n    },\n    {\n        'name': 'Kenneth',\n        'location': 'Nob Hill',\n        'available_start': '12:15',\n        'available_end': '17:15',\n        'min_duration': 105\n    },\n    {\n        'name': 'Joshua',\n        'location': 'Presidio',\n        'available_start': '16:30',\n        'available_end': '18:15',\n        'min_duration': 105\n    },\n    {\n        'name': 'Brian',\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '9:30',\n        'available_end': '15:30',\n        'min_duration': 45\n    },\n    {\n        'name': 'Steven',\n        'location': 'Mission District',\n        'available_start': '19:30',\n        'available_end': '21:00',\n        'min_duration': 90\n    },\n    {\n        'name': 'Betty',\n        'location': 'Haight-Ashbury',\n        'available_start': '19:00',\n        'available_end': '20:30',\n        'min_duration': 90\n    }\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef can_schedule(friend, start_time, end_time):\n    available_start = time_to_minutes(friend['available_start'])\n    available_end = time_to_minutes(friend['available_end'])\n    min_duration = friend['min_duration']\n    \n    # Check if the meeting fits within the friend's availability\n    if start_time < available_start or end_time > available_end:\n        return False\n    \n    # Check if the meeting duration is sufficient\n    if (end_time - start_time) < min_duration:\n        return False\n    \n    return True\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00')  # Start at Union Square at 9:00 AM\n    current_location = 'Union Square'\n    schedule = []\n    \n    for friend in order:\n        location = friend['location']\n        travel_time = travel_times[current_location].get(location, float('inf'))\n        \n        # Arrival time at friend's location\n        arrival_time = current_time + travel_time\n        \n        # Find the latest possible start time that allows for min_duration\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        # Calculate possible meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = min(meeting_start + min_duration, available_end)\n        \n        if meeting_end - meeting_start < min_duration:\n            return None  # Can't meet this friend with these constraints\n        \n        # Add to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        # Update current time and location\n        current_time = meeting_end\n        current_location = location\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    \n    # Count number of friends met\n    return len(schedule)\n\n# Generate all possible friend orders (permutations)\nbest_schedule = None\nbest_score = 0\n\n# Since there are too many permutations, we'll use a heuristic approach\n# Prioritize friends with tighter time windows first\nsorted_friends = sorted(friends, key=lambda x: (\n    time_to_minutes(x['available_end']) - time_to_minutes(x['available_start']) - x['min_duration']\n))\n\n# Try permutations in order of priority\nfrom itertools import permutations\nfor perm in permutations(sorted_friends):\n    schedule = calculate_schedule(perm)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n        if best_score == len(friends):  # Found optimal solution\n            break\n\n# Output the best schedule found\noutput = {\n    \"itinerary\": best_schedule if best_schedule else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_800"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kevin",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Thomas",
                        "start_time": "19:38",
                        "end_time": "20:23"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kevin",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Thomas",
                        "start_time": "19:38",
                        "end_time": "20:23"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input data\ntravel_times = {\n    'Sunset District': {\n        'Alamo Square': 17,\n        'Russian Hill': 24,\n        'Presidio': 16,\n        'Financial District': 30\n    },\n    'Alamo Square': {\n        'Sunset District': 16,\n        'Russian Hill': 13,\n        'Presidio': 18,\n        'Financial District': 17\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Alamo Square': 15,\n        'Presidio': 14,\n        'Financial District': 11\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Alamo Square': 18,\n        'Russian Hill': 14,\n        'Financial District': 23\n    },\n    'Financial District': {\n        'Sunset District': 31,\n        'Alamo Square': 17,\n        'Russian Hill': 10,\n        'Presidio': 22\n    }\n}\n\npeople = {\n    'Kevin': {\n        'location': 'Alamo Square',\n        'available_start': '8:15',\n        'available_end': '21:30',\n        'duration': 75\n    },\n    'Kimberly': {\n        'location': 'Russian Hill',\n        'available_start': '8:45',\n        'available_end': '12:30',\n        'duration': 30\n    },\n    'Joseph': {\n        'location': 'Presidio',\n        'available_start': '18:30',\n        'available_end': '19:15',\n        'duration': 45\n    },\n    'Thomas': {\n        'location': 'Financial District',\n        'available_start': '19:00',\n        'available_end': '21:45',\n        'duration': 45\n    }\n}\n\n# Convert all times to minutes\nfor person in people.values():\n    person['available_start_min'] = time_to_minutes(person['available_start'])\n    person['available_end_min'] = time_to_minutes(person['available_end'])\n\ndef calculate_schedule(order):\n    current_location = 'Sunset District'\n    current_time = time_to_minutes('9:00')\n    schedule = []\n    met_people = set()\n    \n    for person_name in order:\n        person = people[person_name]\n        location = person['location']\n        \n        # Travel time\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this person\n        meeting_start = max(arrival_time, person['available_start_min'])\n        meeting_end = meeting_start + person['duration']\n        \n        if meeting_end > person['available_end_min']:\n            return None  # Can't meet this person\n        \n        # Add to schedule\n        schedule.append({\n            'person': person_name,\n            'location': location,\n            'start_time': meeting_start,\n            'end_time': meeting_end\n        })\n        \n        met_people.add(person_name)\n        current_time = meeting_end\n        current_location = location\n    \n    return {\n        'schedule': schedule,\n        'met_count': len(met_people),\n        'total_people': len(order)\n    }\n\n# Try all possible orders of meeting people\nbest_schedule = None\nbest_met = 0\n\nfor order in permutations(people.keys()):\n    result = calculate_schedule(order)\n    if result and result['met_count'] > best_met:\n        best_met = result['met_count']\n        best_schedule = result['schedule']\n\n# If no schedule meets all, try subsets\nif best_met < len(people):\n    for size in range(len(people)-1, 0, -1):\n        from itertools import combinations\n        for subset in combinations(people.keys(), size):\n            for order in permutations(subset):\n                result = calculate_schedule(order)\n                if result and result['met_count'] > best_met:\n                    best_met = result['met_count']\n                    best_schedule = result['schedule']\n        if best_schedule:\n            break\n\n# Format the output\nitinerary = []\nif best_schedule:\n    for meeting in best_schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['person'],\n            \"start_time\": minutes_to_time(meeting['start_time']),\n            \"end_time\": minutes_to_time(meeting['end_time'])\n        })\n\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_391"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef calculate_schedule():\n    # Input parameters\n    travel_times = {\n        (\"North Beach\", \"Pacific Heights\"): 8,\n        (\"North Beach\", \"Embarcadero\"): 6,\n        (\"Pacific Heights\", \"North Beach\"): 9,\n        (\"Pacific Heights\", \"Embarcadero\"): 10,\n        (\"Embarcadero\", \"North Beach\"): 5,\n        (\"Embarcadero\", \"Pacific Heights\"): 11\n    }\n    \n    current_location = \"North Beach\"\n    current_time = parse_time(\"9:00\")\n    \n    karen_available_start = parse_time(\"18:45\")\n    karen_available_end = parse_time(\"20:15\")\n    karen_min_duration = timedelta(minutes=90)\n    \n    mark_available_start = parse_time(\"13:00\")\n    mark_available_end = parse_time(\"17:45\")\n    mark_min_duration = timedelta(minutes=120)\n    \n    itinerary = []\n    \n    # Try to meet Mark first\n    # Travel to Embarcadero\n    travel_time = travel_times[(current_location, \"Embarcadero\")]\n    arrival_at_mark = current_time + timedelta(minutes=travel_time)\n    \n    # Calculate meeting window with Mark\n    meeting_start_mark = max(arrival_at_mark, mark_available_start)\n    meeting_end_mark = min(meeting_start_mark + mark_min_duration, mark_available_end)\n    \n    if meeting_end_mark - meeting_start_mark >= mark_min_duration:\n        # Can meet Mark\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"person\": \"Mark\",\n            \"start_time\": format_time(meeting_start_mark),\n            \"end_time\": format_time(meeting_end_mark)\n        })\n        \n        # Travel to Pacific Heights for Karen\n        travel_time_to_karen = travel_times[(\"Embarcadero\", \"Pacific Heights\")]\n        arrival_at_karen = meeting_end_mark + timedelta(minutes=travel_time_to_karen)\n        \n        # Calculate meeting window with Karen\n        meeting_start_karen = max(arrival_at_karen, karen_available_start)\n        meeting_end_karen = min(meeting_start_karen + karen_min_duration, karen_available_end)\n        \n        if meeting_end_karen - meeting_start_karen >= karen_min_duration:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Pacific Heights\",\n                \"person\": \"Karen\",\n                \"start_time\": format_time(meeting_start_karen),\n                \"end_time\": format_time(meeting_end_karen)\n            })\n        else:\n            # Can't meet Karen after Mark, try meeting Karen first\n            itinerary = []\n            \n            # Travel to Pacific Heights first\n            travel_time_to_karen = travel_times[(current_location, \"Pacific Heights\")]\n            arrival_at_karen = current_time + timedelta(minutes=travel_time_to_karen)\n            \n            # Karen isn't available until 18:45, so this won't work\n            # So we must meet Mark first and see if we can meet Karen after\n            # If not, try to meet only one person\n            # Let's try meeting only Karen\n            arrival_at_karen = max(arrival_at_karen, karen_available_start)\n            meeting_end_karen = min(arrival_at_karen + karen_min_duration, karen_available_end)\n            \n            if meeting_end_karen - arrival_at_karen >= karen_min_duration:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Pacific Heights\",\n                    \"person\": \"Karen\",\n                    \"start_time\": format_time(arrival_at_karen),\n                    \"end_time\": format_time(meeting_end_karen)\n                })\n    else:\n        # Can't meet Mark first, try meeting Karen first\n        # Travel to Pacific Heights\n        travel_time_to_karen = travel_times[(current_location, \"Pacific Heights\")]\n        arrival_at_karen = current_time + timedelta(minutes=travel_time_to_karen)\n        \n        # Karen isn't available until 18:45, so this won't work\n        # So the only option is to meet Mark with adjusted times or meet only Karen\n        \n        # Try to meet Mark with adjusted times\n        meeting_start_mark = mark_available_start\n        meeting_end_mark = min(meeting_start_mark + mark_min_duration, mark_available_end)\n        \n        if meeting_end_mark - meeting_start_mark >= mark_min_duration:\n            # Can meet Mark\n            travel_time_to_mark = travel_times[(current_location, \"Embarcadero\")]\n            arrival_at_mark = current_time + timedelta(minutes=travel_time_to_mark)\n            \n            if arrival_at_mark <= meeting_start_mark:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Embarcadero\",\n                    \"person\": \"Mark\",\n                    \"start_time\": format_time(meeting_start_mark),\n                    \"end_time\": format_time(meeting_end_mark)\n                })\n                \n                # Check if we can meet Karen after\n                travel_time_to_karen = travel_times[(\"Embarcadero\", \"Pacific Heights\")]\n                arrival_at_karen = meeting_end_mark + timedelta(minutes=travel_time_to_karen)\n                \n                meeting_start_karen = max(arrival_at_karen, karen_available_start)\n                meeting_end_karen = min(meeting_start_karen + karen_min_duration, karen_available_end)\n                \n                if meeting_end_karen - meeting_start_karen >= karen_min_duration:\n                    itinerary.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Pacific Heights\",\n                        \"person\": \"Karen\",\n                        \"start_time\": format_time(meeting_start_karen),\n                        \"end_time\": format_time(meeting_end_karen)\n                    })\n    \n    # If we still have no itinerary, try meeting just one person\n    if not itinerary:\n        # Try meeting Mark\n        travel_time_to_mark = travel_times[(current_location, \"Embarcadero\")]\n        arrival_at_mark = current_time + timedelta(minutes=travel_time_to_mark)\n        \n        meeting_start_mark = max(arrival_at_mark, mark_available_start)\n        meeting_end_mark = min(meeting_start_mark + mark_min_duration, mark_available_end)\n        \n        if meeting_end_mark - meeting_start_mark >= mark_min_duration:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Embarcadero\",\n                \"person\": \"Mark\",\n                \"start_time\": format_time(meeting_start_mark),\n                \"end_time\": format_time(meeting_end_mark)\n            })\n        else:\n            # Try meeting Karen\n            travel_time_to_karen = travel_times[(current_location, \"Pacific Heights\")]\n            arrival_at_karen = current_time + timedelta(minutes=travel_time_to_karen)\n            \n            meeting_start_karen = max(arrival_at_karen, karen_available_start)\n            meeting_end_karen = min(meeting_start_karen + karen_min_duration, karen_available_end)\n            \n            if meeting_end_karen - meeting_start_karen >= karen_min_duration:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Pacific Heights\",\n                    \"person\": \"Karen\",\n                    \"start_time\": format_time(meeting_start_karen),\n                    \"end_time\": format_time(meeting_end_karen)\n                })\n    \n    return {\"itinerary\": itinerary}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_143"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "12:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "14:18",
                        "end_time": "15:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "15:45",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "12:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "15:46",
                        "end_time": "17:31"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Union Square': {\n        'Nob Hill': 9,\n        'Haight-Ashbury': 18,\n        'Chinatown': 7,\n        'Marina District': 18\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'Haight-Ashbury': 13,\n        'Chinatown': 6,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Union Square': 17,\n        'Nob Hill': 15,\n        'Chinatown': 19,\n        'Marina District': 17\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Nob Hill': 8,\n        'Haight-Ashbury': 19,\n        'Marina District': 12\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Nob Hill': 12,\n        'Haight-Ashbury': 16,\n        'Chinatown': 16\n    }\n}\n\n# Friend availability\nfriends = {\n    'Karen': {\n        'location': 'Nob Hill',\n        'start': 21.25,  # 9:15 PM\n        'end': 21.75,    # 9:45 PM\n        'duration': 0.5  # 30 minutes\n    },\n    'Joseph': {\n        'location': 'Haight-Ashbury',\n        'start': 12.5,   # 12:30 PM\n        'end': 19.75,    # 7:45 PM\n        'duration': 1.5  # 90 minutes\n    },\n    'Sandra': {\n        'location': 'Chinatown',\n        'start': 7.25,   # 7:15 AM\n        'end': 19.25,    # 7:15 PM\n        'duration': 1.25 # 75 minutes\n    },\n    'Nancy': {\n        'location': 'Marina District',\n        'start': 11.0,  # 11:00 AM\n        'end': 20.25,    # 8:15 PM\n        'duration': 1.75 # 105 minutes\n    }\n}\n\ndef time_to_float(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours + minutes / 60.0\n\ndef float_to_time(time_float):\n    hours = int(time_float)\n    minutes = int((time_float - hours) * 60)\n    return f\"{hours}:{minutes:02d}\"\n\ndef calculate_schedule(order):\n    current_time = 9.0  # Start at Union Square at 9:00 AM\n    current_location = 'Union Square'\n    schedule = []\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        location = friend_data['location']\n        \n        # Travel to friend's location\n        travel_time = travel_times[current_location][location] / 60.0\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        meeting_start = max(arrival_time, friend_data['start'])\n        meeting_end = meeting_start + friend_data['duration']\n        \n        if meeting_end > friend_data['end']:\n            return None  # Can't meet this friend\n        \n        # Add meeting to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend,\n            'start_time': float_to_time(meeting_start),\n            'end_time': float_to_time(meeting_end)\n        })\n        \n        met_friends.add(friend)\n        current_time = meeting_end\n        current_location = location\n    \n    # Check if we can meet Karen (she's only available late)\n    if 'Karen' not in met_friends:\n        friend_data = friends['Karen']\n        location = friend_data['location']\n        \n        travel_time = travel_times[current_location][location] / 60.0\n        arrival_time = current_time + travel_time\n        \n        meeting_start = max(arrival_time, friend_data['start'])\n        meeting_end = meeting_start + friend_data['duration']\n        \n        if meeting_end <= friend_data['end']:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': 'Karen',\n                'start_time': float_to_time(meeting_start),\n                'end_time': float_to_time(meeting_end)\n            })\n            met_friends.add('Karen')\n    \n    return schedule if len(met_friends) == 4 else None\n\ndef find_optimal_schedule():\n    best_schedule = None\n    max_friends = 0\n    \n    # Try all possible orders of meeting the friends (except Karen who must be last)\n    for order in permutations(['Joseph', 'Sandra', 'Nancy']):\n        schedule = calculate_schedule(order)\n        if schedule:\n            if len(schedule) > max_friends:\n                max_friends = len(schedule)\n                best_schedule = schedule\n            if max_friends == 4:\n                break\n    \n    return best_schedule\n\ndef main():\n    schedule = find_optimal_schedule()\n    if not schedule:\n        # Fallback if we can't meet all friends\n        for order in permutations(['Joseph', 'Sandra', 'Nancy', 'Karen']):\n            schedule = calculate_schedule(order)\n            if schedule:\n                break\n    \n    result = {\n        \"itinerary\": schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_352"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Laura",
                        "start_time": "9:11",
                        "end_time": "9:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "19:16",
                        "end_time": "20:01"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Patricia",
                        "start_time": "20:15",
                        "end_time": "21:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Laura",
                        "start_time": "9:11",
                        "end_time": "9:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "19:16",
                        "end_time": "20:01"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Patricia",
                        "start_time": "20:15",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'Golden Gate Park': 25,\n        'Nob Hill': 11,\n        'Marina District': 9,\n        'Embarcadero': 8\n    },\n    'Bayview': {\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22,\n        'Nob Hill': 20,\n        'Marina District': 25,\n        'Embarcadero': 19\n    },\n    'Golden Gate Park': {\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23,\n        'Nob Hill': 20,\n        'Marina District': 16,\n        'Embarcadero': 25\n    },\n    'Nob Hill': {\n        'Fisherman\\'s Wharf': 11,\n        'Bayview': 19,\n        'Golden Gate Park': 17,\n        'Marina District': 11,\n        'Embarcadero': 9\n    },\n    'Marina District': {\n        'Fisherman\\'s Wharf': 10,\n        'Bayview': 27,\n        'Golden Gate Park': 18,\n        'Nob Hill': 12,\n        'Embarcadero': 14\n    },\n    'Embarcadero': {\n        'Fisherman\\'s Wharf': 6,\n        'Bayview': 21,\n        'Golden Gate Park': 25,\n        'Nob Hill': 10,\n        'Marina District': 12\n    }\n}\n\npeople = [\n    {\n        'name': 'Thomas',\n        'location': 'Bayview',\n        'available_start': '15:30',\n        'available_end': '18:30',\n        'min_duration': 120\n    },\n    {\n        'name': 'Stephanie',\n        'location': 'Golden Gate Park',\n        'available_start': '18:30',\n        'available_end': '21:45',\n        'min_duration': 30\n    },\n    {\n        'name': 'Laura',\n        'location': 'Nob Hill',\n        'available_start': '8:45',\n        'available_end': '16:15',\n        'min_duration': 30\n    },\n    {\n        'name': 'Betty',\n        'location': 'Marina District',\n        'available_start': '18:45',\n        'available_end': '21:45',\n        'min_duration': 45\n    },\n    {\n        'name': 'Patricia',\n        'location': 'Embarcadero',\n        'available_start': '17:30',\n        'available_end': '22:00',\n        'min_duration': 45\n    }\n]\n\ncurrent_location = 'Fisherman\\'s Wharf'\ncurrent_time = time_to_minutes('9:00')\n\ndef get_possible_schedules():\n    # Generate all possible orders of meeting people\n    possible_orders = permutations(people)\n    valid_schedules = []\n    \n    for order in possible_orders:\n        schedule = []\n        loc = current_location\n        time = current_time\n        valid = True\n        \n        for person in order:\n            # Calculate travel time\n            travel_time = travel_times[loc][person['location']]\n            arrival_time = time + travel_time\n            \n            # Check if we can meet this person\n            available_start = time_to_minutes(person['available_start'])\n            available_end = time_to_minutes(person['available_end'])\n            \n            # Determine meeting window\n            meeting_start = max(arrival_time, available_start)\n            meeting_end = meeting_start + person['min_duration']\n            \n            if meeting_end > available_end:\n                valid = False\n                break\n            \n            # Add to schedule\n            schedule.append({\n                'person': person['name'],\n                'location': person['location'],\n                'start_time': meeting_start,\n                'end_time': meeting_end\n            })\n            \n            # Update current location and time\n            loc = person['location']\n            time = meeting_end\n        \n        if valid:\n            valid_schedules.append(schedule)\n    \n    return valid_schedules\n\ndef evaluate_schedule(schedule):\n    # Score based on number of people met and total time spent\n    return len(schedule)\n\ndef find_best_schedule():\n    schedules = get_possible_schedules()\n    if not schedules:\n        return None\n    \n    best_schedule = max(schedules, key=evaluate_schedule)\n    return best_schedule\n\nbest_schedule = find_best_schedule()\n\nif best_schedule:\n    itinerary = []\n    for meeting in best_schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['person'],\n            \"start_time\": minutes_to_time(meeting['start_time']),\n            \"end_time\": minutes_to_time(meeting['end_time'])\n        })\n    \n    result = {\n        \"itinerary\": itinerary\n    }\nelse:\n    result = {\n        \"itinerary\": []\n    }\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_409"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "11:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:11",
                        "end_time": "13:26"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Anthony",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "14:56",
                        "end_time": "16:41"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Brian",
                        "start_time": "16:44",
                        "end_time": "18:14"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Ashley",
                        "start_time": "18:32",
                        "end_time": "20:02"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "20:07",
                        "end_time": "20:52"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "11:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:11",
                        "end_time": "13:26"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Brian",
                        "start_time": "13:34",
                        "end_time": "15:04"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Anthony",
                        "start_time": "15:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Ashley",
                        "start_time": "15:53",
                        "end_time": "17:23"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Deborah",
                        "start_time": "17:42",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "18:57",
                        "end_time": "19:42"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "20:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Bayview': {\n        'North Beach': 22,\n        'Fisherman\\'s Wharf': 25,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 20,\n        'Golden Gate Park': 22,\n        'Union Square': 18,\n        'Alamo Square': 16,\n        'Presidio': 32,\n        'Chinatown': 19,\n        'Pacific Heights': 23\n    },\n    'North Beach': {\n        'Bayview': 25,\n        'Fisherman\\'s Wharf': 5,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 7,\n        'Golden Gate Park': 22,\n        'Union Square': 7,\n        'Alamo Square': 16,\n        'Presidio': 17,\n        'Chinatown': 6,\n        'Pacific Heights': 8\n    },\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'North Beach': 6,\n        'Haight-Ashbury': 22,\n        'Nob Hill': 11,\n        'Golden Gate Park': 25,\n        'Union Square': 13,\n        'Alamo Square': 21,\n        'Presidio': 17,\n        'Chinatown': 12,\n        'Pacific Heights': 12\n    },\n    'Haight-Ashbury': {\n        'Bayview': 18,\n        'North Beach': 19,\n        'Fisherman\\'s Wharf': 23,\n        'Nob Hill': 15,\n        'Golden Gate Park': 7,\n        'Union Square': 19,\n        'Alamo Square': 5,\n        'Presidio': 15,\n        'Chinatown': 19,\n        'Pacific Heights': 12\n    },\n    'Nob Hill': {\n        'Bayview': 19,\n        'North Beach': 8,\n        'Fisherman\\'s Wharf': 10,\n        'Haight-Ashbury': 13,\n        'Golden Gate Park': 17,\n        'Union Square': 7,\n        'Alamo Square': 11,\n        'Presidio': 17,\n        'Chinatown': 6,\n        'Pacific Heights': 8\n    },\n    'Golden Gate Park': {\n        'Bayview': 23,\n        'North Beach': 23,\n        'Fisherman\\'s Wharf': 24,\n        'Haight-Ashbury': 7,\n        'Nob Hill': 20,\n        'Union Square': 22,\n        'Alamo Square': 9,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'Pacific Heights': 16\n    },\n    'Union Square': {\n        'Bayview': 15,\n        'North Beach': 10,\n        'Fisherman\\'s Wharf': 15,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 9,\n        'Golden Gate Park': 22,\n        'Alamo Square': 15,\n        'Presidio': 24,\n        'Chinatown': 7,\n        'Pacific Heights': 15\n    },\n    'Alamo Square': {\n        'Bayview': 16,\n        'North Beach': 15,\n        'Fisherman\\'s Wharf': 19,\n        'Haight-Ashbury': 5,\n        'Nob Hill': 11,\n        'Golden Gate Park': 9,\n        'Union Square': 14,\n        'Presidio': 17,\n        'Chinatown': 15,\n        'Pacific Heights': 10\n    },\n    'Presidio': {\n        'Bayview': 31,\n        'North Beach': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'Golden Gate Park': 12,\n        'Union Square': 22,\n        'Alamo Square': 19,\n        'Chinatown': 21,\n        'Pacific Heights': 11\n    },\n    'Chinatown': {\n        'Bayview': 20,\n        'North Beach': 3,\n        'Fisherman\\'s Wharf': 8,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 9,\n        'Golden Gate Park': 23,\n        'Union Square': 7,\n        'Alamo Square': 17,\n        'Presidio': 19,\n        'Pacific Heights': 10\n    },\n    'Pacific Heights': {\n        'Bayview': 22,\n        'North Beach': 9,\n        'Fisherman\\'s Wharf': 13,\n        'Haight-Ashbury': 11,\n        'Nob Hill': 8,\n        'Golden Gate Park': 15,\n        'Union Square': 12,\n        'Alamo Square': 10,\n        'Presidio': 11,\n        'Chinatown': 11\n    }\n}\n\n# Friend data\nfriends = [\n    {'name': 'Brian', 'location': 'North Beach', 'start': 13.0, 'end': 19.0, 'duration': 1.5},\n    {'name': 'Richard', 'location': 'Fisherman\\'s Wharf', 'start': 11.0, 'end': 12.75, 'duration': 1.0},\n    {'name': 'Ashley', 'location': 'Haight-Ashbury', 'start': 15.0, 'end': 20.5, 'duration': 1.5},\n    {'name': 'Elizabeth', 'location': 'Nob Hill', 'start': 11.75, 'end': 18.5, 'duration': 1.25},\n    {'name': 'Jessica', 'location': 'Golden Gate Park', 'start': 20.0, 'end': 21.75, 'duration': 1.75},\n    {'name': 'Deborah', 'location': 'Union Square', 'start': 17.5, 'end': 22.0, 'duration': 1.0},\n    {'name': 'Kimberly', 'location': 'Alamo Square', 'start': 17.5, 'end': 21.25, 'duration': 0.75},\n    {'name': 'Matthew', 'location': 'Presidio', 'start': 8.25, 'end': 9.0, 'duration': 0.25},\n    {'name': 'Kenneth', 'location': 'Chinatown', 'start': 13.75, 'end': 19.5, 'duration': 1.75},\n    {'name': 'Anthony', 'location': 'Pacific Heights', 'start': 14.25, 'end': 16.0, 'duration': 0.5}\n]\n\ndef time_to_float(time_str):\n    hours, minutes = map(float, time_str.split(':'))\n    return hours + minutes / 60\n\ndef float_to_time(time_float):\n    hours = int(time_float)\n    minutes = int((time_float - hours) * 60)\n    return f\"{hours}:{minutes:02d}\"\n\ndef calculate_schedule():\n    current_location = 'Bayview'\n    current_time = 9.0\n    itinerary = []\n    \n    # First meeting with Matthew at Presidio\n    travel_time = travel_times[current_location]['Presidio'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[7]['end'] - friends[7]['duration']:\n        start_time = max(arrival_time, friends[7]['start'])\n        end_time = start_time + friends[7]['duration']\n        if end_time <= friends[7]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Presidio',\n                'person': 'Matthew',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Presidio'\n            current_time = end_time\n    \n    # Next meeting with Richard at Fisherman's Wharf\n    travel_time = travel_times[current_location]['Fisherman\\'s Wharf'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[1]['end'] - friends[1]['duration']:\n        start_time = max(arrival_time, friends[1]['start'])\n        end_time = start_time + friends[1]['duration']\n        if end_time <= friends[1]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Fisherman\\'s Wharf',\n                'person': 'Richard',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Fisherman\\'s Wharf'\n            current_time = end_time\n    \n    # Next meeting with Elizabeth at Nob Hill\n    travel_time = travel_times[current_location]['Nob Hill'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[3]['end'] - friends[3]['duration']:\n        start_time = max(arrival_time, friends[3]['start'])\n        end_time = start_time + friends[3]['duration']\n        if end_time <= friends[3]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Nob Hill',\n                'person': 'Elizabeth',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Nob Hill'\n            current_time = end_time\n    \n    # Next meeting with Anthony at Pacific Heights\n    travel_time = travel_times[current_location]['Pacific Heights'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[9]['end'] - friends[9]['duration']:\n        start_time = max(arrival_time, friends[9]['start'])\n        end_time = start_time + friends[9]['duration']\n        if end_time <= friends[9]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Pacific Heights',\n                'person': 'Anthony',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Pacific Heights'\n            current_time = end_time\n    \n    # Next meeting with Kenneth at Chinatown\n    travel_time = travel_times[current_location]['Chinatown'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[8]['end'] - friends[8]['duration']:\n        start_time = max(arrival_time, friends[8]['start'])\n        end_time = start_time + friends[8]['duration']\n        if end_time <= friends[8]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Chinatown',\n                'person': 'Kenneth',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Chinatown'\n            current_time = end_time\n    \n    # Next meeting with Brian at North Beach\n    travel_time = travel_times[current_location]['North Beach'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[0]['end'] - friends[0]['duration']:\n        start_time = max(arrival_time, friends[0]['start'])\n        end_time = start_time + friends[0]['duration']\n        if end_time <= friends[0]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'North Beach',\n                'person': 'Brian',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'North Beach'\n            current_time = end_time\n    \n    # Next meeting with Ashley at Haight-Ashbury\n    travel_time = travel_times[current_location]['Haight-Ashbury'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[2]['end'] - friends[2]['duration']:\n        start_time = max(arrival_time, friends[2]['start'])\n        end_time = start_time + friends[2]['duration']\n        if end_time <= friends[2]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Haight-Ashbury',\n                'person': 'Ashley',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Haight-Ashbury'\n            current_time = end_time\n    \n    # Next meeting with Kimberly at Alamo Square\n    travel_time = travel_times[current_location]['Alamo Square'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[6]['end'] - friends[6]['duration']:\n        start_time = max(arrival_time, friends[6]['start'])\n        end_time = start_time + friends[6]['duration']\n        if end_time <= friends[6]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Alamo Square',\n                'person': 'Kimberly',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Alamo Square'\n            current_time = end_time\n    \n    # Next meeting with Deborah at Union Square\n    travel_time = travel_times[current_location]['Union Square'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[5]['end'] - friends[5]['duration']:\n        start_time = max(arrival_time, friends[5]['start'])\n        end_time = start_time + friends[5]['duration']\n        if end_time <= friends[5]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Union Square',\n                'person': 'Deborah',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n            current_location = 'Union Square'\n            current_time = end_time\n    \n    # Final meeting with Jessica at Golden Gate Park\n    travel_time = travel_times[current_location]['Golden Gate Park'] / 60\n    arrival_time = current_time + travel_time\n    if arrival_time <= friends[4]['end'] - friends[4]['duration']:\n        start_time = max(arrival_time, friends[4]['start'])\n        end_time = start_time + friends[4]['duration']\n        if end_time <= friends[4]['end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': 'Golden Gate Park',\n                'person': 'Jessica',\n                'start_time': float_to_time(start_time),\n                'end_time': float_to_time(end_time)\n            })\n    \n    return itinerary\n\ndef main():\n    itinerary = calculate_schedule()\n    result = {'itinerary': itinerary}\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_952"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Paul",
                        "start_time": "21:00",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Linda",
                        "start_time": "21:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kimberly",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "15:01",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "15:51",
                        "end_time": "17:06"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "17:24",
                        "end_time": "18:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "18:37",
                        "end_time": "19:07"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "19:22",
                        "end_time": "20:37"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Paul",
                        "start_time": "21:00",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Linda",
                        "start_time": "21:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\nfriends = {\n    \"Linda\": {\"location\": \"Marina District\", \"start\": \"18:00\", \"end\": \"22:00\", \"duration\": 30},\n    \"Kenneth\": {\"location\": \"The Castro\", \"start\": \"14:45\", \"end\": \"16:15\", \"duration\": 30},\n    \"Kimberly\": {\"location\": \"Richmond District\", \"start\": \"14:15\", \"end\": \"22:00\", \"duration\": 30},\n    \"Paul\": {\"location\": \"Alamo Square\", \"start\": \"21:00\", \"end\": \"21:30\", \"duration\": 15},\n    \"Carol\": {\"location\": \"Financial District\", \"start\": \"10:15\", \"end\": \"12:00\", \"duration\": 60},\n    \"Brian\": {\"location\": \"Presidio\", \"start\": \"10:00\", \"end\": \"21:30\", \"duration\": 75},\n    \"Laura\": {\"location\": \"Mission District\", \"start\": \"16:15\", \"end\": \"20:30\", \"duration\": 30},\n    \"Sandra\": {\"location\": \"Nob Hill\", \"start\": \"9:15\", \"end\": \"18:30\", \"duration\": 60},\n    \"Karen\": {\"location\": \"Russian Hill\", \"start\": \"18:30\", \"end\": \"22:00\", \"duration\": 75}\n}\n\ntravel_times = {\n    \"Pacific Heights\": {\n        \"Marina District\": 6, \"The Castro\": 16, \"Richmond District\": 12, \"Alamo Square\": 10,\n        \"Financial District\": 13, \"Presidio\": 11, \"Mission District\": 15, \"Nob Hill\": 8, \"Russian Hill\": 7\n    },\n    \"Marina District\": {\n        \"Pacific Heights\": 7, \"The Castro\": 22, \"Richmond District\": 11, \"Alamo Square\": 15,\n        \"Financial District\": 17, \"Presidio\": 10, \"Mission District\": 20, \"Nob Hill\": 12, \"Russian Hill\": 8\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16, \"Marina District\": 21, \"Richmond District\": 16, \"Alamo Square\": 8,\n        \"Financial District\": 21, \"Presidio\": 20, \"Mission District\": 7, \"Nob Hill\": 16, \"Russian Hill\": 18\n    },\n    \"Richmond District\": {\n        \"Pacific Heights\": 10, \"Marina District\": 9, \"The Castro\": 16, \"Alamo Square\": 13,\n        \"Financial District\": 22, \"Presidio\": 7, \"Mission District\": 20, \"Nob Hill\": 17, \"Russian Hill\": 13\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10, \"Marina District\": 15, \"The Castro\": 8, \"Richmond District\": 11,\n        \"Financial District\": 17, \"Presidio\": 17, \"Mission District\": 10, \"Nob Hill\": 11, \"Russian Hill\": 13\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13, \"Marina District\": 15, \"The Castro\": 20, \"Richmond District\": 21,\n        \"Alamo Square\": 17, \"Presidio\": 22, \"Mission District\": 17, \"Nob Hill\": 8, \"Russian Hill\": 11\n    },\n    \"Presidio\": {\n        \"Pacific Heights\": 11, \"Marina District\": 11, \"The Castro\": 21, \"Richmond District\": 7,\n        \"Alamo Square\": 19, \"Financial District\": 23, \"Mission District\": 26, \"Nob Hill\": 18, \"Russian Hill\": 14\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16, \"Marina District\": 19, \"The Castro\": 7, \"Richmond District\": 20,\n        \"Alamo Square\": 11, \"Financial District\": 15, \"Presidio\": 25, \"Nob Hill\": 12, \"Russian Hill\": 15\n    },\n    \"Nob Hill\": {\n        \"Pacific Heights\": 8, \"Marina District\": 11, \"The Castro\": 17, \"Richmond District\": 14,\n        \"Alamo Square\": 11, \"Financial District\": 9, \"Presidio\": 17, \"Mission District\": 13, \"Russian Hill\": 5\n    },\n    \"Russian Hill\": {\n        \"Pacific Heights\": 7, \"Marina District\": 7, \"The Castro\": 21, \"Richmond District\": 14,\n        \"Alamo Square\": 15, \"Financial District\": 11, \"Presidio\": 14, \"Mission District\": 16, \"Nob Hill\": 5\n    }\n}\n\ncurrent_location = \"Pacific Heights\"\ncurrent_time = time_to_minutes(\"9:00\")\nitinerary = []\n\n# Helper function to get travel time\ndef get_travel_time(from_loc, to_loc):\n    if from_loc == to_loc:\n        return 0\n    try:\n        return travel_times[from_loc][to_loc]\n    except KeyError:\n        return travel_times[to_loc][from_loc]\n\n# Function to check if a meeting is possible\ndef can_meet(person, start_time, end_time):\n    friend = friends[person]\n    friend_start = time_to_minutes(friend[\"start\"])\n    friend_end = time_to_minutes(friend[\"end\"])\n    duration = friend[\"duration\"]\n    \n    # Check if meeting fits in friend's availability\n    meeting_start = max(start_time, friend_start)\n    meeting_end = min(end_time, friend_end)\n    \n    if meeting_end - meeting_start >= duration:\n        return True, meeting_start, meeting_start + duration\n    return False, 0, 0\n\n# Prioritize friends with tighter time windows first\npriority_order = [\"Paul\", \"Carol\", \"Kenneth\", \"Laura\", \"Linda\", \"Karen\", \"Brian\", \"Kimberly\", \"Sandra\"]\n\nscheduled = set()\n\nfor person in priority_order:\n    if person in scheduled:\n        continue\n        \n    friend = friends[person]\n    location = friend[\"location\"]\n    travel_time = get_travel_time(current_location, location)\n    \n    # Calculate possible meeting times\n    possible_start = current_time + travel_time\n    possible_end = time_to_minutes(friend[\"end\"])\n    \n    can_meet_flag, meeting_start, meeting_end = can_meet(person, possible_start, possible_end)\n    \n    if can_meet_flag:\n        # Schedule the meeting\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": person,\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        scheduled.add(person)\n        current_location = location\n        current_time = meeting_end\n\n# Output the itinerary\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_870"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "9:20",
                        "end_time": "11:20"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Matthew",
                        "start_time": "11:37",
                        "end_time": "13:07"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "13:23",
                        "end_time": "14:08"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "14:36",
                        "end_time": "15:21"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "15:27",
                        "end_time": "16:12"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jessica",
                        "start_time": "16:17",
                        "end_time": "17:02"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Karen",
                        "start_time": "19:56",
                        "end_time": "21:56"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "9:20",
                        "end_time": "11:20"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Matthew",
                        "start_time": "11:37",
                        "end_time": "13:07"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "13:23",
                        "end_time": "14:08"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "14:36",
                        "end_time": "15:21"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "15:27",
                        "end_time": "16:12"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jessica",
                        "start_time": "16:17",
                        "end_time": "17:02"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Karen",
                        "start_time": "19:57",
                        "end_time": "21:57"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Richmond District': {\n        'Chinatown': 20,\n        'Sunset District': 11,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Presidio': 7,\n        'Golden Gate Park': 9,\n        'Bayview': 27\n    },\n    'Chinatown': {\n        'Richmond District': 20,\n        'Sunset District': 29,\n        'Alamo Square': 17,\n        'Financial District': 5,\n        'North Beach': 3,\n        'Embarcadero': 5,\n        'Presidio': 19,\n        'Golden Gate Park': 23,\n        'Bayview': 20\n    },\n    'Sunset District': {\n        'Richmond District': 12,\n        'Chinatown': 30,\n        'Alamo Square': 17,\n        'Financial District': 30,\n        'North Beach': 28,\n        'Embarcadero': 30,\n        'Presidio': 16,\n        'Golden Gate Park': 11,\n        'Bayview': 22\n    },\n    'Alamo Square': {\n        'Richmond District': 11,\n        'Chinatown': 15,\n        'Sunset District': 16,\n        'Financial District': 17,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Presidio': 17,\n        'Golden Gate Park': 9,\n        'Bayview': 16\n    },\n    'Financial District': {\n        'Richmond District': 21,\n        'Chinatown': 5,\n        'Sunset District': 30,\n        'Alamo Square': 17,\n        'North Beach': 7,\n        'Embarcadero': 4,\n        'Presidio': 22,\n        'Golden Gate Park': 23,\n        'Bayview': 19\n    },\n    'North Beach': {\n        'Richmond District': 18,\n        'Chinatown': 6,\n        'Sunset District': 27,\n        'Alamo Square': 16,\n        'Financial District': 8,\n        'Embarcadero': 6,\n        'Presidio': 17,\n        'Golden Gate Park': 22,\n        'Bayview': 25\n    },\n    'Embarcadero': {\n        'Richmond District': 21,\n        'Chinatown': 7,\n        'Sunset District': 30,\n        'Alamo Square': 19,\n        'Financial District': 5,\n        'North Beach': 5,\n        'Presidio': 20,\n        'Golden Gate Park': 25,\n        'Bayview': 21\n    },\n    'Presidio': {\n        'Richmond District': 7,\n        'Chinatown': 21,\n        'Sunset District': 15,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Bayview': 31\n    },\n    'Golden Gate Park': {\n        'Richmond District': 7,\n        'Chinatown': 23,\n        'Sunset District': 10,\n        'Alamo Square': 9,\n        'Financial District': 26,\n        'North Beach': 23,\n        'Embarcadero': 25,\n        'Presidio': 11,\n        'Bayview': 23\n    },\n    'Bayview': {\n        'Richmond District': 25,\n        'Chinatown': 19,\n        'Sunset District': 23,\n        'Alamo Square': 16,\n        'Financial District': 19,\n        'North Beach': 22,\n        'Embarcadero': 19,\n        'Presidio': 32,\n        'Golden Gate Park': 22\n    }\n}\n\n# Friend data: name -> (location, available_start, available_end, min_duration)\nfriends = {\n    'Robert': ('Chinatown', 7.75, 17.5, 120),\n    'David': ('Sunset District', 12.5, 19.75, 45),\n    'Matthew': ('Alamo Square', 8.75, 13.75, 90),\n    'Jessica': ('Financial District', 9.5, 18.75, 45),\n    'Melissa': ('North Beach', 7.25, 16.75, 45),\n    'Mark': ('Embarcadero', 15.25, 17.0, 45),\n    'Deborah': ('Presidio', 19.0, 19.75, 45),\n    'Karen': ('Golden Gate Park', 19.5, 22.0, 120),\n    'Laura': ('Bayview', 21.25, 22.25, 15)\n}\n\ndef time_to_float(time_str):\n    if isinstance(time_str, float):\n        return time_str\n    h, m = map(int, time_str.split(':'))\n    return h + m / 60.0\n\ndef float_to_time(time_float):\n    h = int(time_float)\n    m = int((time_float - h) * 60)\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule(order):\n    current_time = 9.0  # Starting at 9:00 AM in Richmond District\n    current_location = 'Richmond District'\n    schedule = []\n    met_friends = set()\n    \n    for friend in order:\n        name = friend\n        location, avail_start, avail_end, min_duration = friends[friend]\n        \n        # Travel to friend's location\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time / 60.0\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, avail_start)\n        meeting_end = min(meeting_start + min_duration / 60.0, avail_end)\n        \n        if meeting_end - meeting_start >= min_duration / 60.0:\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': name,\n                'start_time': float_to_time(meeting_start),\n                'end_time': float_to_time(meeting_end)\n            })\n            current_time = meeting_end\n            current_location = location\n            met_friends.add(friend)\n        else:\n            return None, 0\n    \n    # Check if we can meet Deborah and Karen\n    # Try to meet Deborah\n    deborah_loc, deborah_start, deborah_end, deborah_dur = friends['Deborah']\n    travel_time = travel_times[current_location][deborah_loc]\n    arrival_time = current_time + travel_time / 60.0\n    meeting_start = max(arrival_time, deborah_start)\n    meeting_end = min(meeting_start + deborah_dur / 60.0, deborah_end)\n    \n    if meeting_end - meeting_start >= deborah_dur / 60.0:\n        schedule.append({\n            'action': 'meet',\n            'location': deborah_loc,\n            'person': 'Deborah',\n            'start_time': float_to_time(meeting_start),\n            'end_time': float_to_time(meeting_end)\n        })\n        current_time = meeting_end\n        current_location = deborah_loc\n        met_friends.add('Deborah')\n    \n    # Try to meet Karen\n    karen_loc, karen_start, karen_end, karen_dur = friends['Karen']\n    travel_time = travel_times[current_location][karen_loc]\n    arrival_time = current_time + travel_time / 60.0\n    meeting_start = max(arrival_time, karen_start)\n    meeting_end = min(meeting_start + karen_dur / 60.0, karen_end)\n    \n    if meeting_end - meeting_start >= karen_dur / 60.0:\n        schedule.append({\n            'action': 'meet',\n            'location': karen_loc,\n            'person': 'Karen',\n            'start_time': float_to_time(meeting_start),\n            'end_time': float_to_time(meeting_end)\n        })\n        current_time = meeting_end\n        current_location = karen_loc\n        met_friends.add('Karen')\n    \n    # Try to meet Laura\n    laura_loc, laura_start, laura_end, laura_dur = friends['Laura']\n    travel_time = travel_times[current_location][laura_loc]\n    arrival_time = current_time + travel_time / 60.0\n    meeting_start = max(arrival_time, laura_start)\n    meeting_end = min(meeting_start + laura_dur / 60.0, laura_end)\n    \n    if meeting_end - meeting_start >= laura_dur / 60.0:\n        schedule.append({\n            'action': 'meet',\n            'location': laura_loc,\n            'person': 'Laura',\n            'start_time': float_to_time(meeting_start),\n            'end_time': float_to_time(meeting_end)\n        })\n        met_friends.add('Laura')\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_count = 0\n    friends_to_schedule = ['Robert', 'David', 'Matthew', 'Jessica', 'Melissa', 'Mark']\n    \n    # Try all permutations of the first 6 friends (since the others have very specific times)\n    for perm in permutations(friends_to_schedule):\n        schedule, count = calculate_schedule(perm)\n        if schedule and count > best_count:\n            best_schedule = schedule\n            best_count = count\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\noutput = {\"itinerary\": optimal_schedule} if optimal_schedule else {\"itinerary\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_884"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "14:07",
                        "end_time": "14:37"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "14:07",
                        "end_time": "14:37"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00\")\n    james_available_start = parse_time(\"12:45\")\n    james_available_end = parse_time(\"14:00\")\n    james_min_duration = timedelta(minutes=75)\n    robert_available_start = parse_time(\"12:45\")\n    robert_available_end = parse_time(\"15:15\")\n    robert_min_duration = timedelta(minutes=30)\n    \n    # Travel times in minutes\n    travel_times = {\n        (\"North Beach\", \"Mission District\"): 18,\n        (\"North Beach\", \"The Castro\"): 22,\n        (\"Mission District\", \"North Beach\"): 17,\n        (\"Mission District\", \"The Castro\"): 7,\n        (\"The Castro\", \"North Beach\"): 20,\n        (\"The Castro\", \"Mission District\"): 7,\n    }\n    \n    # Possible schedules\n    best_schedule = []\n    max_meetings = 0\n    \n    # Option 1: Meet James only\n    current_location = \"North Beach\"\n    current_time = arrival_time\n    \n    # Travel to Mission District to meet James\n    travel_time = travel_times[(current_location, \"Mission District\")]\n    arrival_at_james = current_time + timedelta(minutes=travel_time)\n    \n    if arrival_at_james <= james_available_end - james_min_duration:\n        meet_james_start = max(arrival_at_james, james_available_start)\n        meet_james_end = meet_james_start + james_min_duration\n        if meet_james_end <= james_available_end:\n            schedule = [\n                {\"action\": \"meet\", \"location\": \"Mission District\", \"person\": \"James\", \n                 \"start_time\": format_time(meet_james_start), \"end_time\": format_time(meet_james_end)}\n            ]\n            if len(schedule) > max_meetings:\n                best_schedule = schedule\n                max_meetings = len(schedule)\n    \n    # Option 2: Meet Robert only\n    current_location = \"North Beach\"\n    current_time = arrival_time\n    \n    # Travel to The Castro to meet Robert\n    travel_time = travel_times[(current_location, \"The Castro\")]\n    arrival_at_robert = current_time + timedelta(minutes=travel_time)\n    \n    if arrival_at_robert <= robert_available_end - robert_min_duration:\n        meet_robert_start = max(arrival_at_robert, robert_available_start)\n        meet_robert_end = meet_robert_start + robert_min_duration\n        if meet_robert_end <= robert_available_end:\n            schedule = [\n                {\"action\": \"meet\", \"location\": \"The Castro\", \"person\": \"Robert\", \n                 \"start_time\": format_time(meet_robert_start), \"end_time\": format_time(meet_robert_end)}\n            ]\n            if len(schedule) > max_meetings:\n                best_schedule = schedule\n                max_meetings = len(schedule)\n    \n    # Option 3: Meet both (James first)\n    current_location = \"North Beach\"\n    current_time = arrival_time\n    \n    # Travel to Mission District to meet James\n    travel_time = travel_times[(current_location, \"Mission District\")]\n    arrival_at_james = current_time + timedelta(minutes=travel_time)\n    \n    if arrival_at_james <= james_available_end - james_min_duration:\n        meet_james_start = max(arrival_at_james, james_available_start)\n        meet_james_end = meet_james_start + james_min_duration\n        if meet_james_end <= james_available_end:\n            # Travel to The Castro to meet Robert\n            travel_time = travel_times[(\"Mission District\", \"The Castro\")]\n            arrival_at_robert = meet_james_end + timedelta(minutes=travel_time)\n            \n            if arrival_at_robert <= robert_available_end - robert_min_duration:\n                meet_robert_start = max(arrival_at_robert, robert_available_start)\n                meet_robert_end = meet_robert_start + robert_min_duration\n                if meet_robert_end <= robert_available_end:\n                    schedule = [\n                        {\"action\": \"meet\", \"location\": \"Mission District\", \"person\": \"James\", \n                         \"start_time\": format_time(meet_james_start), \"end_time\": format_time(meet_james_end)},\n                        {\"action\": \"meet\", \"location\": \"The Castro\", \"person\": \"Robert\", \n                         \"start_time\": format_time(meet_robert_start), \"end_time\": format_time(meet_robert_end)}\n                    ]\n                    if len(schedule) > max_meetings:\n                        best_schedule = schedule\n                        max_meetings = len(schedule)\n    \n    # Option 4: Meet both (Robert first)\n    current_location = \"North Beach\"\n    current_time = arrival_time\n    \n    # Travel to The Castro to meet Robert\n    travel_time = travel_times[(current_location, \"The Castro\")]\n    arrival_at_robert = current_time + timedelta(minutes=travel_time)\n    \n    if arrival_at_robert <= robert_available_end - robert_min_duration:\n        meet_robert_start = max(arrival_at_robert, robert_available_start)\n        meet_robert_end = meet_robert_start + robert_min_duration\n        if meet_robert_end <= robert_available_end:\n            # Travel to Mission District to meet James\n            travel_time = travel_times[(\"The Castro\", \"Mission District\")]\n            arrival_at_james = meet_robert_end + timedelta(minutes=travel_time)\n            \n            if arrival_at_james <= james_available_end - james_min_duration:\n                meet_james_start = max(arrival_at_james, james_available_start)\n                meet_james_end = meet_james_start + james_min_duration\n                if meet_james_end <= james_available_end:\n                    schedule = [\n                        {\"action\": \"meet\", \"location\": \"The Castro\", \"person\": \"Robert\", \n                         \"start_time\": format_time(meet_robert_start), \"end_time\": format_time(meet_robert_end)},\n                        {\"action\": \"meet\", \"location\": \"Mission District\", \"person\": \"James\", \n                         \"start_time\": format_time(meet_james_start), \"end_time\": format_time(meet_james_end)}\n                    ]\n                    if len(schedule) > max_meetings:\n                        best_schedule = schedule\n                        max_meetings = len(schedule)\n    \n    return {\"itinerary\": best_schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_180"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00\")\n    arrival_location = \"Nob Hill\"\n    \n    # Friend constraints\n    thomas_available_start = parse_time(\"15:30\")\n    thomas_available_end = parse_time(\"19:15\")\n    thomas_location = \"Pacific Heights\"\n    thomas_min_duration = timedelta(minutes=75)\n    \n    kenneth_available_start = parse_time(\"12:00\")\n    kenneth_available_end = parse_time(\"15:45\")\n    kenneth_location = \"Mission District\"\n    kenneth_min_duration = timedelta(minutes=45)\n    \n    # Travel times in minutes\n    travel_times = {\n        (\"Nob Hill\", \"Pacific Heights\"): 8,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Pacific Heights\", \"Nob Hill\"): 8,\n        (\"Pacific Heights\", \"Mission District\"): 15,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Mission District\", \"Pacific Heights\"): 16\n    }\n    \n    # Possible schedules\n    possible_schedules = []\n    \n    # Option 1: Meet Kenneth first, then Thomas\n    # Travel to Kenneth\n    travel_to_kenneth = timedelta(minutes=travel_times[(arrival_location, kenneth_location)])\n    meet_kenneth_start = max(arrival_time + travel_to_kenneth, kenneth_available_start)\n    meet_kenneth_end = meet_kenneth_start + kenneth_min_duration\n    if meet_kenneth_end <= kenneth_available_end:\n        # Travel to Thomas\n        travel_to_thomas = timedelta(minutes=travel_times[(kenneth_location, thomas_location)])\n        meet_thomas_start = max(meet_kenneth_end + travel_to_thomas, thomas_available_start)\n        meet_thomas_end = meet_thomas_start + thomas_min_duration\n        if meet_thomas_end <= thomas_available_end:\n            possible_schedules.append([\n                {\"action\": \"meet\", \"location\": kenneth_location, \"person\": \"Kenneth\", \n                 \"start_time\": format_time(meet_kenneth_start), \"end_time\": format_time(meet_kenneth_end)},\n                {\"action\": \"meet\", \"location\": thomas_location, \"person\": \"Thomas\", \n                 \"start_time\": format_time(meet_thomas_start), \"end_time\": format_time(meet_thomas_end)}\n            ])\n    \n    # Option 2: Meet Thomas first, then Kenneth (if possible)\n    # Travel to Thomas\n    travel_to_thomas = timedelta(minutes=travel_times[(arrival_location, thomas_location)])\n    meet_thomas_start = max(arrival_time + travel_to_thomas, thomas_available_start)\n    meet_thomas_end = meet_thomas_start + thomas_min_duration\n    if meet_thomas_end <= thomas_available_end:\n        # Travel to Kenneth\n        travel_to_kenneth = timedelta(minutes=travel_times[(thomas_location, kenneth_location)])\n        meet_kenneth_start = max(meet_thomas_end + travel_to_kenneth, kenneth_available_start)\n        meet_kenneth_end = meet_kenneth_start + kenneth_min_duration\n        if meet_kenneth_end <= kenneth_available_end:\n            possible_schedules.append([\n                {\"action\": \"meet\", \"location\": thomas_location, \"person\": \"Thomas\", \n                 \"start_time\": format_time(meet_thomas_start), \"end_time\": format_time(meet_thomas_end)},\n                {\"action\": \"meet\", \"location\": kenneth_location, \"person\": \"Kenneth\", \n                 \"start_time\": format_time(meet_kenneth_start), \"end_time\": format_time(meet_kenneth_end)}\n            ])\n    \n    # Select the best schedule (most meetings, then earliest completion)\n    if not possible_schedules:\n        return {\"itinerary\": []}\n    \n    best_schedule = max(possible_schedules, key=lambda s: (len(s), -parse_time(s[-1][\"end_time\"]).timestamp()))\n    \n    return {\"itinerary\": best_schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_174"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "12:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "13:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "16:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Charles",
                        "start_time": "18:47",
                        "end_time": "20:32"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "13:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "15:09",
                        "end_time": "16:09"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "16:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "18:37",
                        "end_time": "19:37"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "19:52",
                        "end_time": "21:52"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary: travel_times[from][to] = minutes\ntravel_times = {\n    'Embarcadero': {\n        'Bayview': 21, 'Chinatown': 7, 'Alamo Square': 19, 'Nob Hill': 10, 'Presidio': 20,\n        'Union Square': 10, 'The Castro': 25, 'North Beach': 5, 'Fisherman\\'s Wharf': 6, 'Marina District': 12\n    },\n    'Bayview': {\n        'Embarcadero': 19, 'Chinatown': 19, 'Alamo Square': 16, 'Nob Hill': 20, 'Presidio': 32,\n        'Union Square': 18, 'The Castro': 19, 'North Beach': 22, 'Fisherman\\'s Wharf': 25, 'Marina District': 27\n    },\n    'Chinatown': {\n        'Embarcadero': 5, 'Bayview': 20, 'Alamo Square': 17, 'Nob Hill': 9, 'Presidio': 19,\n        'Union Square': 7, 'The Castro': 22, 'North Beach': 3, 'Fisherman\\'s Wharf': 8, 'Marina District': 12\n    },\n    'Alamo Square': {\n        'Embarcadero': 16, 'Bayview': 16, 'Chinatown': 15, 'Nob Hill': 11, 'Presidio': 17,\n        'Union Square': 14, 'The Castro': 8, 'North Beach': 15, 'Fisherman\\'s Wharf': 19, 'Marina District': 15\n    },\n    'Nob Hill': {\n        'Embarcadero': 9, 'Bayview': 19, 'Chinatown': 6, 'Alamo Square': 11, 'Presidio': 17,\n        'Union Square': 7, 'The Castro': 17, 'North Beach': 8, 'Fisherman\\'s Wharf': 10, 'Marina District': 11\n    },\n    'Presidio': {\n        'Embarcadero': 20, 'Bayview': 31, 'Chinatown': 21, 'Alamo Square': 19, 'Nob Hill': 18,\n        'Union Square': 22, 'The Castro': 21, 'North Beach': 18, 'Fisherman\\'s Wharf': 19, 'Marina District': 11\n    },\n    'Union Square': {\n        'Embarcadero': 11, 'Bayview': 15, 'Chinatown': 7, 'Alamo Square': 15, 'Nob Hill': 9,\n        'Presidio': 24, 'The Castro': 17, 'North Beach': 10, 'Fisherman\\'s Wharf': 15, 'Marina District': 18\n    },\n    'The Castro': {\n        'Embarcadero': 22, 'Bayview': 19, 'Chinatown': 22, 'Alamo Square': 8, 'Nob Hill': 16,\n        'Presidio': 20, 'Union Square': 19, 'North Beach': 20, 'Fisherman\\'s Wharf': 24, 'Marina District': 21\n    },\n    'North Beach': {\n        'Embarcadero': 6, 'Bayview': 25, 'Chinatown': 6, 'Alamo Square': 16, 'Nob Hill': 7,\n        'Presidio': 17, 'Union Square': 7, 'The Castro': 23, 'Fisherman\\'s Wharf': 5, 'Marina District': 9\n    },\n    'Fisherman\\'s Wharf': {\n        'Embarcadero': 8, 'Bayview': 26, 'Chinatown': 12, 'Alamo Square': 21, 'Nob Hill': 11,\n        'Presidio': 17, 'Union Square': 13, 'The Castro': 27, 'North Beach': 6, 'Marina District': 9\n    },\n    'Marina District': {\n        'Embarcadero': 14, 'Bayview': 27, 'Chinatown': 15, 'Alamo Square': 15, 'Nob Hill': 12,\n        'Presidio': 10, 'Union Square': 16, 'The Castro': 22, 'North Beach': 11, 'Fisherman\\'s Wharf': 10\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'Matthew', 'location': 'Bayview', 'start': '19:15', 'end': '22:00', 'min_duration': 120},\n    {'name': 'Karen', 'location': 'Chinatown', 'start': '19:15', 'end': '21:15', 'min_duration': 90},\n    {'name': 'Sarah', 'location': 'Alamo Square', 'start': '20:00', 'end': '21:45', 'min_duration': 105},\n    {'name': 'Jessica', 'location': 'Nob Hill', 'start': '16:30', 'end': '18:45', 'min_duration': 120},\n    {'name': 'Stephanie', 'location': 'Presidio', 'start': '7:30', 'end': '10:15', 'min_duration': 60},\n    {'name': 'Mary', 'location': 'Union Square', 'start': '16:45', 'end': '21:30', 'min_duration': 60},\n    {'name': 'Charles', 'location': 'The Castro', 'start': '16:30', 'end': '22:00', 'min_duration': 105},\n    {'name': 'Nancy', 'location': 'North Beach', 'start': '14:45', 'end': '20:00', 'min_duration': 15},\n    {'name': 'Thomas', 'location': 'Fisherman\\'s Wharf', 'start': '13:30', 'end': '19:00', 'min_duration': 30},\n    {'name': 'Brian', 'location': 'Marina District', 'start': '12:15', 'end': '18:00', 'min_duration': 60}\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef get_available_slots(friend, current_time):\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    min_duration = friend['min_duration']\n    \n    latest_start = friend_end - min_duration\n    available_start = max(current_time, friend_start)\n    \n    if available_start > latest_start:\n        return None\n    \n    return {\n        'start': available_start,\n        'end': min(available_start + min_duration, friend_end)\n    }\n\ndef calculate_schedule():\n    current_location = 'Embarcadero'\n    current_time = time_to_minutes('9:00')\n    itinerary = []\n    remaining_friends = friends.copy()\n    \n    # Try to meet Stephanie first since she's available early\n    stephanie = next(f for f in remaining_friends if f['name'] == 'Stephanie')\n    if current_time <= time_to_minutes(stephanie['end']):\n        travel_time = travel_times[current_location][stephanie['location']]\n        arrival_time = current_time + travel_time\n        slot = get_available_slots(stephanie, arrival_time)\n        if slot:\n            itinerary.append({\n                'action': 'meet',\n                'location': stephanie['location'],\n                'person': stephanie['name'],\n                'start_time': minutes_to_time(slot['start']),\n                'end_time': minutes_to_time(slot['end'])\n            })\n            current_location = stephanie['location']\n            current_time = slot['end']\n            remaining_friends.remove(stephanie)\n    \n    # Sort remaining friends by earliest availability\n    remaining_friends.sort(key=lambda x: time_to_minutes(x['start']))\n    \n    for friend in remaining_friends:\n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        slot = get_available_slots(friend, arrival_time)\n        if slot:\n            itinerary.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': minutes_to_time(slot['start']),\n                'end_time': minutes_to_time(slot['end'])\n            })\n            current_location = friend['location']\n            current_time = slot['end']\n    \n    return itinerary\n\ndef main():\n    itinerary = calculate_schedule()\n    result = {'itinerary': itinerary}\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_976"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "11:17",
                        "end_time": "12:47"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Matthew",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "13:52",
                        "end_time": "15:37"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "15:54",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Linda",
                        "start_time": "18:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "19:27",
                        "end_time": "20:57"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "11:17",
                        "end_time": "12:47"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Matthew",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "13:52",
                        "end_time": "15:37"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "15:54",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Linda",
                        "start_time": "18:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "19:27",
                        "end_time": "20:57"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    \"Russian Hill\": {\n        \"Marina District\": 7,\n        \"Financial District\": 11,\n        \"Alamo Square\": 15,\n        \"Golden Gate Park\": 21,\n        \"The Castro\": 21,\n        \"Bayview\": 23,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 17,\n        \"Nob Hill\": 5\n    },\n    \"Marina District\": {\n        \"Russian Hill\": 8,\n        \"Financial District\": 17,\n        \"Alamo Square\": 15,\n        \"Golden Gate Park\": 18,\n        \"The Castro\": 22,\n        \"Bayview\": 27,\n        \"Sunset District\": 19,\n        \"Haight-Ashbury\": 16,\n        \"Nob Hill\": 12\n    },\n    \"Financial District\": {\n        \"Russian Hill\": 11,\n        \"Marina District\": 15,\n        \"Alamo Square\": 17,\n        \"Golden Gate Park\": 23,\n        \"The Castro\": 20,\n        \"Bayview\": 19,\n        \"Sunset District\": 30,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 8\n    },\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Marina District\": 15,\n        \"Financial District\": 17,\n        \"Golden Gate Park\": 9,\n        \"The Castro\": 8,\n        \"Bayview\": 16,\n        \"Sunset District\": 16,\n        \"Haight-Ashbury\": 5,\n        \"Nob Hill\": 11\n    },\n    \"Golden Gate Park\": {\n        \"Russian Hill\": 19,\n        \"Marina District\": 16,\n        \"Financial District\": 26,\n        \"Alamo Square\": 9,\n        \"The Castro\": 13,\n        \"Bayview\": 23,\n        \"Sunset District\": 10,\n        \"Haight-Ashbury\": 7,\n        \"Nob Hill\": 20\n    },\n    \"The Castro\": {\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"Financial District\": 21,\n        \"Alamo Square\": 8,\n        \"Golden Gate Park\": 11,\n        \"Bayview\": 19,\n        \"Sunset District\": 17,\n        \"Haight-Ashbury\": 6,\n        \"Nob Hill\": 16\n    },\n    \"Bayview\": {\n        \"Russian Hill\": 23,\n        \"Marina District\": 27,\n        \"Financial District\": 19,\n        \"Alamo Square\": 16,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 19,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 20\n    },\n    \"Sunset District\": {\n        \"Russian Hill\": 24,\n        \"Marina District\": 21,\n        \"Financial District\": 30,\n        \"Alamo Square\": 17,\n        \"Golden Gate Park\": 11,\n        \"The Castro\": 17,\n        \"Bayview\": 22,\n        \"Haight-Ashbury\": 15,\n        \"Nob Hill\": 27\n    },\n    \"Haight-Ashbury\": {\n        \"Russian Hill\": 17,\n        \"Marina District\": 17,\n        \"Financial District\": 21,\n        \"Alamo Square\": 5,\n        \"Golden Gate Park\": 7,\n        \"The Castro\": 6,\n        \"Bayview\": 18,\n        \"Sunset District\": 15,\n        \"Nob Hill\": 15\n    },\n    \"Nob Hill\": {\n        \"Russian Hill\": 5,\n        \"Marina District\": 11,\n        \"Financial District\": 9,\n        \"Alamo Square\": 11,\n        \"Golden Gate Park\": 17,\n        \"The Castro\": 17,\n        \"Bayview\": 19,\n        \"Sunset District\": 24,\n        \"Haight-Ashbury\": 13\n    }\n}\n\n# Friend availability\nfriends = {\n    \"Mark\": {\n        \"location\": \"Marina District\",\n        \"start\": 18.75,  # 6:45 PM\n        \"end\": 21.0,     # 9:00 PM\n        \"duration\": 1.5  # 90 minutes\n    },\n    \"Karen\": {\n        \"location\": \"Financial District\",\n        \"start\": 9.5,    # 9:30 AM\n        \"end\": 12.75,    # 12:45 PM\n        \"duration\": 1.5\n    },\n    \"Barbara\": {\n        \"location\": \"Alamo Square\",\n        \"start\": 10.0,  # 10:00 AM\n        \"end\": 19.5,     # 7:30 PM\n        \"duration\": 1.5\n    },\n    \"Nancy\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": 16.75,  # 4:45 PM\n        \"end\": 20.0,     # 8:00 PM\n        \"duration\": 1.75 # 105 minutes\n    },\n    \"David\": {\n        \"location\": \"The Castro\",\n        \"start\": 9.0,    # 9:00 AM\n        \"end\": 18.0,     # 6:00 PM\n        \"duration\": 2.0  # 120 minutes\n    },\n    \"Linda\": {\n        \"location\": \"Bayview\",\n        \"start\": 18.25,  # 6:15 PM\n        \"end\": 19.75,    # 7:45 PM\n        \"duration\": 0.75 # 45 minutes\n    },\n    \"Kevin\": {\n        \"location\": \"Sunset District\",\n        \"start\": 10.0,  # 10:00 AM\n        \"end\": 17.75,    # 5:45 PM\n        \"duration\": 2.0\n    },\n    \"Matthew\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": 10.25,  # 10:15 AM\n        \"end\": 15.5,     # 3:30 PM\n        \"duration\": 0.75\n    },\n    \"Andrew\": {\n        \"location\": \"Nob Hill\",\n        \"start\": 11.75, # 11:45 AM\n        \"end\": 16.75,    # 4:45 PM\n        \"duration\": 1.75\n    }\n}\n\ndef time_to_float(time_str):\n    \"\"\"Convert time string (H:MM) to float (H.MM)\"\"\"\n    h, m = map(int, time_str.split(':'))\n    return h + m / 60.0\n\ndef float_to_time(time_float):\n    \"\"\"Convert float (H.MM) to time string (H:MM)\"\"\"\n    h = int(time_float)\n    m = int(round((time_float - h) * 60))\n    if m == 60:\n        h += 1\n        m = 0\n    return f\"{h}:{m:02d}\"\n\ndef get_travel_time(from_loc, to_loc):\n    \"\"\"Get travel time between two locations\"\"\"\n    return travel_times[from_loc][to_loc] / 60.0  # Convert to hours\n\ndef is_schedule_valid(schedule):\n    \"\"\"Check if a schedule meets all constraints\"\"\"\n    current_time = 9.0  # Start at Russian Hill at 9:00 AM\n    current_loc = \"Russian Hill\"\n    \n    for meeting in schedule:\n        # Travel to meeting location\n        travel_time = get_travel_time(current_loc, meeting[\"location\"])\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet during their availability\n        friend = friends[meeting[\"person\"]]\n        meeting_start = max(arrival_time, friend[\"start\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        \n        if meeting_end > friend[\"end\"]:\n            return False  # Can't meet for required duration\n        \n        # Update current time and location\n        current_time = meeting_end\n        current_loc = meeting[\"location\"]\n        \n        # Store meeting times\n        meeting[\"start_time\"] = meeting_start\n        meeting[\"end_time\"] = meeting_end\n    \n    return True\n\ndef evaluate_schedule(schedule):\n    \"\"\"Evaluate a schedule by counting meetings and total meeting time\"\"\"\n    if not is_schedule_valid(schedule):\n        return -1, -1\n    \n    total_meetings = len(schedule)\n    total_time = sum(friends[m[\"person\"]][\"duration\"] for m in schedule)\n    return total_meetings, total_time\n\ndef generate_possible_schedules():\n    \"\"\"Generate possible schedules by trying different permutations\"\"\"\n    friend_names = list(friends.keys())\n    best_schedule = []\n    best_meetings = 0\n    best_time = 0\n    \n    # Try permutations of different lengths\n    for r in range(1, len(friend_names) + 1):\n        for perm in permutations(friend_names, r):\n            # Create schedule in order of permutation\n            schedule = [{\"action\": \"meet\", \"location\": friends[name][\"location\"], \n                         \"person\": name} for name in perm]\n            \n            # Evaluate schedule\n            meetings, time = evaluate_schedule(schedule)\n            \n            # Update best schedule if better\n            if meetings > best_meetings or (meetings == best_meetings and time > best_time):\n                best_schedule = schedule\n                best_meetings = meetings\n                best_time = time\n    \n    return best_schedule\n\ndef main():\n    # Generate the best possible schedule\n    best_schedule = generate_possible_schedules()\n    \n    # Convert to output format\n    itinerary = []\n    for meeting in best_schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"person\"],\n            \"start_time\": float_to_time(meeting[\"start_time\"]),\n            \"end_time\": float_to_time(meeting[\"end_time\"])\n        })\n    \n    # Output as JSON\n    print(json.dumps({\"itinerary\": itinerary}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_885"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "9:23",
                        "end_time": "9:38"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Charles",
                        "start_time": "17:15",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Ronald",
                        "start_time": "18:15",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "9:23",
                        "end_time": "9:38"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "William",
                        "start_time": "9:54",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mary",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "15:42",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Charles",
                        "start_time": "17:56",
                        "end_time": "18:11"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    \"Russian Hill\": {\n        \"Sunset District\": 23,\n        \"Union Square\": 10,\n        \"Nob Hill\": 5,\n        \"Marina District\": 7,\n        \"Richmond District\": 14,\n        \"Financial District\": 11,\n        \"Embarcadero\": 8,\n        \"The Castro\": 21,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14\n    },\n    \"Sunset District\": {\n        \"Russian Hill\": 24,\n        \"Union Square\": 30,\n        \"Nob Hill\": 27,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Financial District\": 30,\n        \"Embarcadero\": 30,\n        \"The Castro\": 17,\n        \"Alamo Square\": 17,\n        \"Presidio\": 16\n    },\n    \"Union Square\": {\n        \"Russian Hill\": 13,\n        \"Sunset District\": 27,\n        \"Nob Hill\": 9,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Financial District\": 9,\n        \"Embarcadero\": 11,\n        \"The Castro\": 17,\n        \"Alamo Square\": 15,\n        \"Presidio\": 24\n    },\n    \"Nob Hill\": {\n        \"Russian Hill\": 5,\n        \"Sunset District\": 24,\n        \"Union Square\": 7,\n        \"Marina District\": 11,\n        \"Richmond District\": 14,\n        \"Financial District\": 9,\n        \"Embarcadero\": 9,\n        \"The Castro\": 17,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17\n    },\n    \"Marina District\": {\n        \"Russian Hill\": 8,\n        \"Sunset District\": 19,\n        \"Union Square\": 16,\n        \"Nob Hill\": 12,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Embarcadero\": 14,\n        \"The Castro\": 22,\n        \"Alamo Square\": 15,\n        \"Presidio\": 10\n    },\n    \"Richmond District\": {\n        \"Russian Hill\": 13,\n        \"Sunset District\": 11,\n        \"Union Square\": 21,\n        \"Nob Hill\": 17,\n        \"Marina District\": 9,\n        \"Financial District\": 22,\n        \"Embarcadero\": 19,\n        \"The Castro\": 16,\n        \"Alamo Square\": 13,\n        \"Presidio\": 7\n    },\n    \"Financial District\": {\n        \"Russian Hill\": 11,\n        \"Sunset District\": 30,\n        \"Union Square\": 9,\n        \"Nob Hill\": 8,\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Embarcadero\": 4,\n        \"The Castro\": 20,\n        \"Alamo Square\": 17,\n        \"Presidio\": 22\n    },\n    \"Embarcadero\": {\n        \"Russian Hill\": 8,\n        \"Sunset District\": 30,\n        \"Union Square\": 10,\n        \"Nob Hill\": 10,\n        \"Marina District\": 12,\n        \"Richmond District\": 21,\n        \"Financial District\": 5,\n        \"The Castro\": 25,\n        \"Alamo Square\": 19,\n        \"Presidio\": 20\n    },\n    \"The Castro\": {\n        \"Russian Hill\": 18,\n        \"Sunset District\": 17,\n        \"Union Square\": 19,\n        \"Nob Hill\": 16,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Financial District\": 21,\n        \"Embarcadero\": 22,\n        \"Alamo Square\": 8,\n        \"Presidio\": 20\n    },\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Sunset District\": 16,\n        \"Union Square\": 14,\n        \"Nob Hill\": 11,\n        \"Marina District\": 15,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Embarcadero\": 16,\n        \"The Castro\": 8,\n        \"Presidio\": 17\n    },\n    \"Presidio\": {\n        \"Russian Hill\": 14,\n        \"Sunset District\": 15,\n        \"Union Square\": 22,\n        \"Nob Hill\": 18,\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Financial District\": 23,\n        \"Embarcadero\": 20,\n        \"The Castro\": 21,\n        \"Alamo Square\": 19\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\"name\": \"David\", \"location\": \"Sunset District\", \"start\": \"9:15\", \"end\": \"22:00\", \"min_duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Union Square\", \"start\": \"21:15\", \"end\": \"21:45\", \"min_duration\": 15},\n    {\"name\": \"Patricia\", \"location\": \"Nob Hill\", \"start\": \"15:00\", \"end\": \"19:15\", \"min_duration\": 120},\n    {\"name\": \"Mary\", \"location\": \"Marina District\", \"start\": \"14:45\", \"end\": \"16:45\", \"min_duration\": 45},\n    {\"name\": \"Charles\", \"location\": \"Richmond District\", \"start\": \"17:15\", \"end\": \"21:00\", \"min_duration\": 15},\n    {\"name\": \"Joshua\", \"location\": \"Financial District\", \"start\": \"14:30\", \"end\": \"17:15\", \"min_duration\": 90},\n    {\"name\": \"Ronald\", \"location\": \"Embarcadero\", \"start\": \"18:15\", \"end\": \"20:45\", \"min_duration\": 30},\n    {\"name\": \"George\", \"location\": \"The Castro\", \"start\": \"14:15\", \"end\": \"19:00\", \"min_duration\": 105},\n    {\"name\": \"Kimberly\", \"location\": \"Alamo Square\", \"start\": \"9:00\", \"end\": \"14:30\", \"min_duration\": 105},\n    {\"name\": \"William\", \"location\": \"Presidio\", \"start\": \"7:00\", \"end\": \"12:45\", \"min_duration\": 60}\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Convert friend times to minutes\nfor friend in friends:\n    friend[\"start_min\"] = time_to_minutes(friend[\"start\"])\n    friend[\"end_min\"] = time_to_minutes(friend[\"end\"])\n\ndef calculate_schedule(order):\n    current_location = \"Russian Hill\"\n    current_time = time_to_minutes(\"9:00\")\n    schedule = []\n    remaining_friends = friends.copy()\n    \n    for friend_name in order:\n        friend = next(f for f in remaining_friends if f[\"name\"] == friend_name)\n        remaining_friends.remove(friend)\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet\n        meeting_start = max(arrival_time, friend[\"start_min\"])\n        meeting_end = meeting_start + friend[\"min_duration\"]\n        \n        if meeting_end > friend[\"end_min\"]:\n            return None  # Can't meet this friend\n        \n        # Add to schedule\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        current_location = friend[\"location\"]\n        current_time = meeting_end\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return -1\n    return len(schedule)\n\n# Try different orders to maximize number of friends met\nbest_schedule = []\nbest_score = 0\n\n# We'll prioritize friends with tighter time windows first\nfriend_names = [f[\"name\"] for f in friends]\n# Try all possible permutations is too expensive, so we'll try a reasonable subset\nfor perm in permutations(friend_names, min(5, len(friend_names))):\n    schedule = calculate_schedule(perm)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\n# If no schedule meets all, try to find one that meets most\nif best_score < len(friends):\n    for friend in friends:\n        single_schedule = calculate_schedule([friend[\"name\"]])\n        if single_schedule and evaluate_schedule(single_schedule) > best_score:\n            best_score = evaluate_schedule(single_schedule)\n            best_schedule = single_schedule\n\n# After some attempts, build a reasonable schedule manually if needed\nif not best_schedule:\n    # Build a schedule that meets the most critical friends\n    manual_order = [\"Kimberly\", \"William\", \"Joshua\", \"Mary\", \"Patricia\", \"George\", \"Charles\", \"Ronald\", \"Kenneth\", \"David\"]\n    best_schedule = calculate_schedule(manual_order)\n    if not best_schedule:\n        manual_order = [\"Kimberly\", \"William\", \"Joshua\", \"Mary\", \"Patricia\"]\n        best_schedule = calculate_schedule(manual_order)\n\n# Prepare output\noutput = {\n    \"itinerary\": best_schedule if best_schedule else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_937"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Andrew",
                        "start_time": "11:45",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "13:13",
                        "end_time": "13:43"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Rebecca",
                        "start_time": "14:03",
                        "end_time": "15:33"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "16:15",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Andrew",
                        "start_time": "11:45",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "13:13",
                        "end_time": "13:43"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "16:15",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Rebecca",
                        "start_time": "18:51",
                        "end_time": "20:21"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\nlocations = {\n    \"Union Square\": 0,\n    \"Golden Gate Park\": 1,\n    \"Pacific Heights\": 2,\n    \"Presidio\": 3,\n    \"Chinatown\": 4,\n    \"The Castro\": 5\n}\n\ntravel_times = [\n    [0, 22, 15, 24, 7, 19],  # Union Square\n    [22, 0, 16, 11, 23, 13],  # Golden Gate Park\n    [15, 16, 0, 11, 11, 16],  # Pacific Heights\n    [24, 11, 11, 0, 21, 21],  # Presidio\n    [7, 23, 10, 19, 0, 22],    # Chinatown\n    [19, 13, 16, 20, 20, 0]    # The Castro\n]\n\nfriends = [\n    {\"name\": \"Andrew\", \"location\": \"Golden Gate Park\", \"start\": \"11:45\", \"end\": \"14:30\", \"duration\": 75},\n    {\"name\": \"Sarah\", \"location\": \"Pacific Heights\", \"start\": \"16:15\", \"end\": \"18:45\", \"duration\": 15},\n    {\"name\": \"Nancy\", \"location\": \"Presidio\", \"start\": \"17:30\", \"end\": \"19:15\", \"duration\": 60},\n    {\"name\": \"Rebecca\", \"location\": \"Chinatown\", \"start\": \"9:45\", \"end\": \"21:30\", \"duration\": 90},\n    {\"name\": \"Robert\", \"location\": \"The Castro\", \"start\": \"8:30\", \"end\": \"14:15\", \"duration\": 30}\n]\n\ncurrent_time = time_to_minutes(\"9:00\")\ncurrent_location = \"Union Square\"\n\ndef find_best_schedule():\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try all permutations of friends to find the best order\n    for order in permutations(friends):\n        schedule = []\n        current_loc = current_location\n        current_time_temp = current_time\n        meetings = 0\n        \n        for friend in order:\n            loc = friend[\"location\"]\n            travel_time = travel_times[locations[current_loc]][locations[loc]]\n            arrival_time = current_time_temp + travel_time\n            \n            start_window = time_to_minutes(friend[\"start\"])\n            end_window = time_to_minutes(friend[\"end\"])\n            duration = friend[\"duration\"]\n            \n            # Calculate possible meeting start time\n            meeting_start = max(arrival_time, start_window)\n            meeting_end = meeting_start + duration\n            \n            if meeting_end <= end_window:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": loc,\n                    \"person\": friend[\"name\"],\n                    \"start_time\": minutes_to_time(meeting_start),\n                    \"end_time\": minutes_to_time(meeting_end)\n                })\n                current_time_temp = meeting_end\n                current_loc = loc\n                meetings += 1\n        \n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_schedule = schedule\n        elif meetings == max_meetings and meetings > 0:\n            # Prefer schedules that end earlier\n            if time_to_minutes(schedule[-1][\"end_time\"]) < time_to_minutes(best_schedule[-1][\"end_time\"]):\n                best_schedule = schedule\n    \n    return best_schedule\n\nbest_schedule = find_best_schedule()\n\n# Output the result as JSON\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_403"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "David",
                        "start_time": "16:00",
                        "end_time": "17:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "David",
                        "start_time": "16:00",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\narrival_time = \"9:00\"\ndavid_available_start = \"16:00\"\ndavid_available_end = \"21:45\"\nmeeting_duration = 105\ntravel_time_park_to_chinatown = 23\ntravel_time_chinatown_to_park = 23\n\n# Convert times to minutes\ncurrent_time = time_to_minutes(arrival_time)\ndavid_start = time_to_minutes(david_available_start)\ndavid_end = time_to_minutes(david_available_end)\n\n# Calculate latest possible departure from Golden Gate Park to meet David\nlatest_departure_to_meet_david = david_end - meeting_duration - travel_time_park_to_chinatown\n\n# Calculate possible meeting time with David\nif latest_departure_to_meet_david >= current_time + travel_time_park_to_chinatown:\n    # We can go directly to meet David\n    meet_start = max(david_start, current_time + travel_time_park_to_chinatown)\n    meet_end = meet_start + meeting_duration\n    if meet_end <= david_end:\n        itinerary = [\n            {\n                \"action\": \"travel\",\n                \"location\": \"Golden Gate Park to Chinatown\",\n                \"person\": \"You\",\n                \"start_time\": minutes_to_time(current_time),\n                \"end_time\": minutes_to_time(current_time + travel_time_park_to_chinatown)\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Chinatown\",\n                \"person\": \"David\",\n                \"start_time\": minutes_to_time(meet_start),\n                \"end_time\": minutes_to_time(meet_end)\n            }\n        ]\n    else:\n        itinerary = []\nelse:\n    itinerary = []\n\nresult = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_25"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Richard",
                        "start_time": "9:17",
                        "end_time": "11:17"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00\")\n    richard_available_start = parse_time(\"8:45\")\n    richard_available_end = parse_time(\"13:00\")\n    charles_available_start = parse_time(\"9:45\")\n    charles_available_end = parse_time(\"13:00\")\n    min_meet_richard = timedelta(minutes=120)\n    min_meet_charles = timedelta(minutes=120)\n    \n    # Travel times in minutes\n    travel_times = {\n        (\"Bayview\", \"Union Square\"): 17,\n        (\"Bayview\", \"Presidio\"): 31,\n        (\"Union Square\", \"Bayview\"): 15,\n        (\"Union Square\", \"Presidio\"): 24,\n        (\"Presidio\", \"Bayview\"): 31,\n        (\"Presidio\", \"Union Square\"): 22\n    }\n    \n    # Possible schedules\n    possible_schedules = []\n    \n    # Option 1: Meet Richard first, then Charles\n    # Start with Richard\n    travel_to_richard = timedelta(minutes=travel_times[(\"Bayview\", \"Union Square\")])\n    richard_start = max(arrival_time + travel_to_richard, richard_available_start)\n    richard_end = richard_start + min_meet_richard\n    if richard_end <= richard_available_end:\n        # Then go to Charles\n        travel_to_charles = timedelta(minutes=travel_times[(\"Union Square\", \"Presidio\")])\n        charles_start = max(richard_end + travel_to_charles, charles_available_start)\n        charles_end = charles_start + min_meet_charles\n        if charles_end <= charles_available_end:\n            possible_schedules.append([\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"person\": \"Richard\", \n                 \"start_time\": format_time(richard_start), \"end_time\": format_time(richard_end)},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"person\": \"Charles\", \n                 \"start_time\": format_time(charles_start), \"end_time\": format_time(charles_end)}\n            ])\n    \n    # Option 2: Meet Charles first, then Richard\n    # Start with Charles\n    travel_to_charles = timedelta(minutes=travel_times[(\"Bayview\", \"Presidio\")])\n    charles_start = max(arrival_time + travel_to_charles, charles_available_start)\n    charles_end = charles_start + min_meet_charles\n    if charles_end <= charles_available_end:\n        # Then go to Richard\n        travel_to_richard = timedelta(minutes=travel_times[(\"Presidio\", \"Union Square\")])\n        richard_start = max(charles_end + travel_to_richard, richard_available_start)\n        richard_end = richard_start + min_meet_richard\n        if richard_end <= richard_available_end:\n            possible_schedules.append([\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"person\": \"Charles\", \n                 \"start_time\": format_time(charles_start), \"end_time\": format_time(charles_end)},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"person\": \"Richard\", \n                 \"start_time\": format_time(richard_start), \"end_time\": format_time(richard_end)}\n            ])\n    \n    # Select the best schedule (earliest completion time)\n    if possible_schedules:\n        best_schedule = min(possible_schedules, key=lambda s: parse_time(s[-1][\"end_time\"]))\n        return {\"itinerary\": best_schedule}\n    else:\n        return {\"itinerary\": []}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_118"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "17:00",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "18:15",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Sarah",
                        "start_time": "19:04",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Robert",
                        "start_time": "21:06",
                        "end_time": "21:21"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "17:00",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "18:15",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Sarah",
                        "start_time": "19:04",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Robert",
                        "start_time": "21:06",
                        "end_time": "21:21"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times dictionary: {from_location: {to_location: minutes}}\ntravel_times = {\n    \"Golden Gate Park\": {\n        \"Haight-Ashbury\": 7,\n        \"Sunset District\": 10,\n        \"Marina District\": 16,\n        \"Financial District\": 26,\n        \"Union Square\": 22\n    },\n    \"Haight-Ashbury\": {\n        \"Golden Gate Park\": 7,\n        \"Sunset District\": 15,\n        \"Marina District\": 17,\n        \"Financial District\": 21,\n        \"Union Square\": 17\n    },\n    \"Sunset District\": {\n        \"Golden Gate Park\": 11,\n        \"Haight-Ashbury\": 15,\n        \"Marina District\": 21,\n        \"Financial District\": 30,\n        \"Union Square\": 30\n    },\n    \"Marina District\": {\n        \"Golden Gate Park\": 18,\n        \"Haight-Ashbury\": 16,\n        \"Sunset District\": 19,\n        \"Financial District\": 17,\n        \"Union Square\": 16\n    },\n    \"Financial District\": {\n        \"Golden Gate Park\": 23,\n        \"Haight-Ashbury\": 19,\n        \"Sunset District\": 31,\n        \"Marina District\": 15,\n        \"Union Square\": 9\n    },\n    \"Union Square\": {\n        \"Golden Gate Park\": 22,\n        \"Haight-Ashbury\": 18,\n        \"Sunset District\": 26,\n        \"Marina District\": 18,\n        \"Financial District\": 9\n    }\n}\n\n# Correcting the typo in Marina District key\ntravel_times[\"Marina District\"] = travel_times.pop(\"Marina District\")\n\n# Friends data: name, location, available_start, available_end, min_duration\nfriends = [\n    (\"Sarah\", \"Haight-Ashbury\", \"17:00\", \"21:30\", 105),\n    (\"Patricia\", \"Sunset District\", \"17:00\", \"19:45\", 45),\n    (\"Matthew\", \"Marina District\", \"9:15\", \"12:00\", 15),\n    (\"Joseph\", \"Financial District\", \"14:15\", \"18:45\", 30),\n    (\"Robert\", \"Union Square\", \"10:15\", \"21:45\", 15)\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00\")\n    current_location = \"Golden Gate Park\"\n    schedule = []\n    met_friends = set()\n    \n    for friend in order:\n        name, location, avail_start, avail_end, min_duration = friend\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        avail_start_min = time_to_minutes(avail_start)\n        avail_end_min = time_to_minutes(avail_end)\n        \n        # Calculate possible meeting window\n        meeting_start = max(arrival_time, avail_start_min)\n        meeting_end = min(meeting_start + min_duration, avail_end_min)\n        \n        if meeting_end - meeting_start >= min_duration:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": name,\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            met_friends.add(name)\n            current_time = meeting_end\n            current_location = location\n        else:\n            # Try to meet at end of their availability\n            meeting_end = avail_end_min\n            meeting_start = max(avail_start_min, meeting_end - min_duration)\n            if meeting_start >= arrival_time and meeting_end - meeting_start >= min_duration:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": name,\n                    \"start_time\": minutes_to_time(meeting_start),\n                    \"end_time\": minutes_to_time(meeting_end)\n                })\n                met_friends.add(name)\n                current_time = meeting_end\n                current_location = location\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of meeting friends\nall_orders = permutations(friends)\n\nbest_schedule = []\nmax_met = 0\n\n# Try all possible orders to find the best schedule\nfor order in all_orders:\n    schedule, num_met = calculate_schedule(order)\n    if num_met > max_met or (num_met == max_met and len(schedule) > len(best_schedule)):\n        best_schedule = schedule\n        max_met = num_met\n\n# After finding the best schedule, check if we can add more meetings by revisiting\n# For simplicity, we'll just return the best found schedule\n\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_402"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "9:23",
                        "end_time": "10:23"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jeffrey",
                        "start_time": "12:47",
                        "end_time": "13:32"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "16:45",
                        "end_time": "17:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "9:23",
                        "end_time": "10:23"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jeffrey",
                        "start_time": "12:47",
                        "end_time": "13:32"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "16:45",
                        "end_time": "17:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str.endswith('AM') or time_str.endswith('PM'):\n        time_str, period = time_str[:-2].strip(), time_str[-2:]\n        hours, minutes = map(int, time_str.split(':'))\n        if period == 'PM' and hours != 12:\n            hours += 12\n        elif period == 'AM' and hours == 12:\n            hours = 0\n    else:\n        hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Travel times in minutes\ntravel_times = {\n    'Bayview': {\n        'Russian Hill': 23,\n        'Alamo Square': 16,\n        'North Beach': 21,\n        'Financial District': 19\n    },\n    'Russian Hill': {\n        'Bayview': 23,\n        'Alamo Square': 15,\n        'North Beach': 5,\n        'Financial District': 11\n    },\n    'Alamo Square': {\n        'Bayview': 16,\n        'Russian Hill': 13,\n        'North Beach': 15,\n        'Financial District': 17\n    },\n    'North Beach': {\n        'Bayview': 22,\n        'Russian Hill': 4,\n        'Alamo Square': 16,\n        'Financial District': 8\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Russian Hill': 10,\n        'Alamo Square': 17,\n        'North Beach': 7\n    }\n}\n\n# Constraints\nconstraints = {\n    'Joseph': {\n        'location': 'Russian Hill',\n        'start': time_to_minutes('8:30AM'),\n        'end': time_to_minutes('7:15PM'),\n        'duration': 60\n    },\n    'Nancy': {\n        'location': 'Alamo Square',\n        'start': time_to_minutes('11:00AM'),\n        'end': time_to_minutes('4:00PM'),\n        'duration': 90\n    },\n    'Jason': {\n        'location': 'North Beach',\n        'start': time_to_minutes('4:45PM'),\n        'end': time_to_minutes('9:45PM'),\n        'duration': 15\n    },\n    'Jeffrey': {\n        'location': 'Financial District',\n        'start': time_to_minutes('10:30AM'),\n        'end': time_to_minutes('3:45PM'),\n        'duration': 45\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Bayview'\n    schedule = []\n    met_people = set()\n    \n    for person in order:\n        if person in met_people:\n            continue\n        info = constraints[person]\n        location = info['location']\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, info['start'])\n        meeting_end = meeting_start + info['duration']\n        \n        if meeting_end > info['end']:\n            continue  # Can't meet this person\n        \n        # Add to schedule\n        schedule.append({\n            'person': person,\n            'location': location,\n            'start_time': meeting_start,\n            'end_time': meeting_end,\n            'duration': info['duration']\n        })\n        \n        met_people.add(person)\n        current_time = meeting_end\n        current_location = location\n    \n    return schedule, len(met_people)\n\ndef find_optimal_schedule():\n    people = list(constraints.keys())\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try all possible orders of meeting people\n    for order in permutations(people):\n        schedule, count = calculate_schedule(order)\n        if count > max_meetings or (count == max_meetings and len(best_schedule) == 0):\n            best_schedule = schedule\n            max_meetings = count\n        elif count == max_meetings:\n            # Prefer schedules that end earlier\n            if schedule[-1]['end_time'] < best_schedule[-1]['end_time']:\n                best_schedule = schedule\n    \n    return best_schedule\n\ndef format_schedule(schedule):\n    itinerary = []\n    for meeting in schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['person'],\n            \"start_time\": minutes_to_time(meeting['start_time']),\n            \"end_time\": minutes_to_time(meeting['end_time'])\n        })\n    return {\"itinerary\": itinerary}\n\noptimal_schedule = find_optimal_schedule()\nresult = format_schedule(optimal_schedule)\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_368"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Richmond District\"\n    start_time = parse_time(\"9:00\")\n    \n    # Friend constraints\n    jessica = {\n        \"location\": \"Pacific Heights\",\n        \"available_start\": parse_time(\"15:30\"),\n        \"available_end\": parse_time(\"16:45\"),\n        \"min_duration\": 45\n    }\n    \n    carol = {\n        \"location\": \"Marina District\",\n        \"available_start\": parse_time(\"11:30\"),\n        \"available_end\": parse_time(\"15:00\"),\n        \"min_duration\": 60\n    }\n    \n    # Travel times in minutes between locations\n    travel_times = {\n        (\"Richmond District\", \"Pacific Heights\"): 10,\n        (\"Richmond District\", \"Marina District\"): 9,\n        (\"Pacific Heights\", \"Richmond District\"): 12,\n        (\"Pacific Heights\", \"Marina District\"): 6,\n        (\"Marina District\", \"Richmond District\"): 11,\n        (\"Marina District\", \"Pacific Heights\"): 7\n    }\n    \n    # Corrected travel times dictionary key\n    travel_times = {\n        (\"Richmond District\", \"Pacific Heights\"): 10,\n        (\"Richmond District\", \"Marina District\"): 9,\n        (\"Pacific Heights\", \"Richmond District\"): 12,\n        (\"Pacific Heights\", \"Marina District\"): 6,\n        (\"Marina District\", \"Richmond District\"): 11,\n        (\"Marina District\", \"Pacific Heights\"): 7\n    }\n    \n    best_schedule = []\n    max_meetings = 0\n    \n    # Try meeting Carol first\n    current_location = start_location\n    current_time = start_time\n    itinerary = []\n    \n    # Travel to Carol\n    travel_key = (current_location, carol[\"location\"])\n    travel_duration = timedelta(minutes=travel_times[travel_key])\n    arrival_time = current_time + travel_duration\n    \n    # Meet Carol\n    meet_start = max(arrival_time, carol[\"available_start\"])\n    meet_end = meet_start + timedelta(minutes=carol[\"min_duration\"])\n    \n    if meet_end <= carol[\"available_end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": carol[\"location\"],\n            \"person\": \"Carol\",\n            \"start_time\": format_time(meet_start),\n            \"end_time\": format_time(meet_end)\n        })\n        \n        # Travel to Jessica\n        current_location = carol[\"location\"]\n        current_time = meet_end\n        travel_key = (current_location, jessica[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        # Meet Jessica\n        meet_start = max(arrival_time, jessica[\"available_start\"])\n        meet_end = meet_start + timedelta(minutes=jessica[\"min_duration\"])\n        \n        if meet_end <= jessica[\"available_end\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": jessica[\"location\"],\n                \"person\": \"Jessica\",\n                \"start_time\": format_time(meet_start),\n                \"end_time\": format_time(meet_end)\n            })\n            \n            if len(itinerary) > max_meetings:\n                best_schedule = itinerary\n                max_meetings = len(itinerary)\n    \n    # Try meeting Jessica first\n    current_location = start_location\n    current_time = start_time\n    itinerary = []\n    \n    # Travel to Jessica\n    travel_key = (current_location, jessica[\"location\"])\n    travel_duration = timedelta(minutes=travel_times[travel_key])\n    arrival_time = current_time + travel_duration\n    \n    # Check if we can meet Jessica first (but she's only available in the afternoon)\n    if arrival_time < jessica[\"available_start\"]:\n        # Wait until Jessica is available\n        arrival_time = jessica[\"available_start\"]\n    \n    meet_start = arrival_time\n    meet_end = meet_start + timedelta(minutes=jessica[\"min_duration\"])\n    \n    if meet_end <= jessica[\"available_end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": jessica[\"location\"],\n            \"person\": \"Jessica\",\n            \"start_time\": format_time(meet_start),\n            \"end_time\": format_time(meet_end)\n        })\n        \n        # Travel to Carol\n        current_location = jessica[\"location\"]\n        current_time = meet_end\n        travel_key = (current_location, carol[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        # Meet Carol\n        meet_start = arrival_time\n        meet_end = meet_start + timedelta(minutes=carol[\"min_duration\"])\n        \n        if meet_start >= carol[\"available_start\"] and meet_end <= carol[\"available_end\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": carol[\"location\"],\n                \"person\": \"Carol\",\n                \"start_time\": format_time(meet_start),\n                \"end_time\": format_time(meet_end)\n            })\n            \n            if len(itinerary) > max_meetings:\n                best_schedule = itinerary\n                max_meetings = len(itinerary)\n        elif meet_start < carol[\"available_start\"]:\n            # Can't meet Carol after Jessica because Carol's window ends before we can arrive\n            pass\n    \n    # If both attempts fail, try meeting just one person\n    if max_meetings == 0:\n        # Try meeting Carol only\n        current_location = start_location\n        current_time = start_time\n        travel_key = (current_location, carol[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        meet_start = max(arrival_time, carol[\"available_start\"])\n        meet_end = meet_start + timedelta(minutes=carol[\"min_duration\"])\n        \n        if meet_end <= carol[\"available_end\"]:\n            best_schedule = [{\n                \"action\": \"meet\",\n                \"location\": carol[\"location\"],\n                \"person\": \"Carol\",\n                \"start_time\": format_time(meet_start),\n                \"end_time\": format_time(meet_end)\n            }]\n            max_meetings = 1\n        \n        # Try meeting Jessica only\n        current_location = start_location\n        current_time = start_time\n        travel_key = (current_location, jessica[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        if arrival_time < jessica[\"available_start\"]:\n            arrival_time = jessica[\"available_start\"]\n        \n        meet_start = arrival_time\n        meet_end = meet_start + timedelta(minutes=jessica[\"min_duration\"])\n        \n        if meet_end <= jessica[\"available_end\"]:\n            if max_meetings < 1:\n                best_schedule = [{\n                    \"action\": \"meet\",\n                    \"location\": jessica[\"location\"],\n                    \"person\": \"Jessica\",\n                    \"start_time\": format_time(meet_start),\n                    \"end_time\": format_time(meet_end)\n                }]\n            elif max_meetings == 1:\n                # Prefer meeting Carol if we can only meet one\n                pass\n    \n    return {\"itinerary\": best_schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_115"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    arrival_time = \"9:00\"\n    robert_available_start = \"11:15\"\n    robert_available_end = \"17:45\"\n    min_meeting_duration = 120  # minutes\n    travel_nob_to_presidio = 17  # minutes\n    travel_presidio_to_nob = 18  # minutes\n    \n    # Convert time strings to minutes since midnight\n    def time_to_minutes(time_str):\n        h, m = map(int, time_str.split(':'))\n        return h * 60 + m\n    \n    arrival_min = time_to_minutes(arrival_time)\n    robert_start_min = time_to_minutes(robert_available_start)\n    robert_end_min = time_to_minutes(robert_available_end)\n    \n    # Calculate earliest possible meeting start\n    # Need to travel from Nob Hill to Presidio\n    earliest_arrival_presidio = arrival_min + travel_nob_to_presidio\n    meeting_start = max(earliest_arrival_presidio, robert_start_min)\n    \n    # Calculate meeting end time (must be before Robert's availability ends)\n    meeting_end = min(meeting_start + min_meeting_duration, robert_end_min)\n    \n    # Check if meeting duration is sufficient\n    actual_duration = meeting_end - meeting_start\n    if actual_duration < min_meeting_duration:\n        return {\"itinerary\": []}  # No feasible schedule\n    \n    # Convert minutes back to time strings\n    def minutes_to_time(m):\n        h = m // 60\n        m = m % 60\n        return f\"{h}:{m:02d}\"\n    \n    # Create itinerary\n    itinerary = [\n        {\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"person\": \"self\",\n            \"start_time\": minutes_to_time(arrival_min),\n            \"end_time\": minutes_to_time(earliest_arrival_presidio)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"Robert\",\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        }\n    ]\n    \n    return {\"itinerary\": itinerary}\n\n# Compute and output the schedule\nschedule = calculate_optimal_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_66"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    \"\"\"Convert time string 'H:MM' to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to time string 'H:MM'.\"\"\"\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\narrival_time = \"9:00\"\narrival_location = \"Embarcadero\"\n\nfriends = [\n    {\n        \"name\": \"Stephanie\",\n        \"location\": \"Financial District\",\n        \"available_start\": \"8:15\",\n        \"available_end\": \"11:30\",\n        \"min_duration\": 90,\n        \"travel_from_prev\": {\n            \"Embarcadero\": 5,\n            \"Financial District\": 0,\n            \"Alamo Square\": 17\n        }\n    },\n    {\n        \"name\": \"John\",\n        \"location\": \"Alamo Square\",\n        \"available_start\": \"10:15\",\n        \"available_end\": \"20:45\",\n        \"min_duration\": 30,\n        \"travel_from_prev\": {\n            \"Embarcadero\": 19,\n            \"Financial District\": 17,\n            \"Alamo Square\": 0\n        }\n    }\n]\n\n# Travel times matrix\ntravel_times = {\n    \"Embarcadero\": {\n        \"Financial District\": 5,\n        \"Alamo Square\": 19\n    },\n    \"Financial District\": {\n        \"Embarcadero\": 4,\n        \"Alamo Square\": 17\n    },\n    \"Alamo Square\": {\n        \"Embarcadero\": 17,\n        \"Financial District\": 17\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(arrival_time)\n    current_location = arrival_location\n    schedule = []\n    \n    for friend in order:\n        # Travel to friend's location\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        current_time += travel_time\n        current_location = friend[\"location\"]\n        \n        # Determine meeting window\n        available_start = time_to_minutes(friend[\"available_start\"])\n        available_end = time_to_minutes(friend[\"available_end\"])\n        min_duration = friend[\"min_duration\"]\n        \n        # Calculate meeting start and end\n        meeting_start = max(current_time, available_start)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end > available_end:\n            return None  # This schedule doesn't work\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n    \n    return schedule\n\n# Generate all possible meeting orders\npossible_orders = permutations(friends)\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in possible_orders:\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n\n# Output the result\nif best_schedule:\n    result = {\"itinerary\": best_schedule}\nelse:\n    result = {\"itinerary\": []}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_125"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jason",
                        "start_time": "10:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jason",
                        "start_time": "10:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef format_time(dt):\n    return dt.strftime('%-H:%M')\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        ('Pacific Heights', 'Presidio'): 11,\n        ('Pacific Heights', 'Marina District'): 6,\n        ('Presidio', 'Pacific Heights'): 11,\n        ('Presidio', 'Marina District'): 10,\n        ('Marina District', 'Pacific Heights'): 7,\n        ('Marina District', 'Presidio'): 10,\n    }\n    \n    # Constraints\n    start_location = 'Pacific Heights'\n    start_time = parse_time('9:00')\n    \n    jason_location = 'Presidio'\n    jason_window_start = parse_time('10:00')\n    jason_window_end = parse_time('16:15')\n    jason_duration = timedelta(minutes=90)\n    \n    kenneth_location = 'Marina District'\n    kenneth_window_start = parse_time('15:30')\n    kenneth_window_end = parse_time('16:45')\n    kenneth_duration = timedelta(minutes=45)\n    \n    # Possible schedules\n    possible_schedules = []\n    \n    # Option 1: Meet Jason first, then Kenneth\n    # Calculate earliest arrival at Presidio\n    travel_to_jason = travel_times[(start_location, jason_location)]\n    arrival_jason = start_time + timedelta(minutes=travel_to_jason)\n    meet_jason_start = max(arrival_jason, jason_window_start)\n    meet_jason_end = meet_jason_start + jason_duration\n    if meet_jason_end <= jason_window_end:\n        # Travel to Kenneth\n        travel_to_kenneth = travel_times[(jason_location, kenneth_location)]\n        arrival_kenneth = meet_jason_end + timedelta(minutes=travel_to_kenneth)\n        meet_kenneth_start = max(arrival_kenneth, kenneth_window_start)\n        meet_kenneth_end = meet_kenneth_start + kenneth_duration\n        if meet_kenneth_end <= kenneth_window_end:\n            possible_schedules.append([\n                {'action': 'meet', 'location': jason_location, 'person': 'Jason', \n                 'start_time': format_time(meet_jason_start), 'end_time': format_time(meet_jason_end)},\n                {'action': 'meet', 'location': kenneth_location, 'person': 'Kenneth', \n                 'start_time': format_time(meet_kenneth_start), 'end_time': format_time(meet_kenneth_end)}\n            ])\n    \n    # Option 2: Meet Kenneth first, then Jason\n    # Calculate earliest arrival at Marina District\n    travel_to_kenneth = travel_times[(start_location, kenneth_location)]\n    arrival_kenneth = start_time + timedelta(minutes=travel_to_kenneth)\n    meet_kenneth_start = max(arrival_kenneth, kenneth_window_start)\n    meet_kenneth_end = meet_kenneth_start + kenneth_duration\n    if meet_kenneth_end <= kenneth_window_end:\n        # Travel to Jason\n        travel_to_jason = travel_times[(kenneth_location, jason_location)]\n        arrival_jason = meet_kenneth_end + timedelta(minutes=travel_to_jason)\n        meet_jason_start = max(arrival_jason, jason_window_start)\n        meet_jason_end = meet_jason_start + jason_duration\n        if meet_jason_end <= jason_window_end:\n            possible_schedules.append([\n                {'action': 'meet', 'location': kenneth_location, 'person': 'Kenneth', \n                 'start_time': format_time(meet_kenneth_start), 'end_time': format_time(meet_kenneth_end)},\n                {'action': 'meet', 'location': jason_location, 'person': 'Jason', \n                 'start_time': format_time(meet_jason_start), 'end_time': format_time(meet_jason_end)}\n            ])\n    \n    # Select the best schedule (prefer meeting both if possible)\n    best_schedule = []\n    if len(possible_schedules) > 0:\n        # Prefer schedules where both meetings happen\n        valid_schedules = [s for s in possible_schedules if len(s) == 2]\n        if valid_schedules:\n            best_schedule = valid_schedules[0]\n        else:\n            # Fallback to meeting just one person\n            for s in possible_schedules:\n                if len(s) == 1:\n                    best_schedule = s\n                    break\n    \n    return {'itinerary': best_schedule}\n\nif __name__ == '__main__':\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_131"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jeffrey",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Charles",
                        "start_time": "13:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Robert",
                        "start_time": "15:18",
                        "end_time": "16:48"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "17:00",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Karen",
                        "start_time": "18:29",
                        "end_time": "19:29"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Brian",
                        "start_time": "19:49",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joshua",
                        "start_time": "21:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    \"Sunset District\": {\n        \"Presidio\": 16, \"Nob Hill\": 27, \"Pacific Heights\": 21, \"Mission District\": 25,\n        \"Marina District\": 21, \"North Beach\": 28, \"Russian Hill\": 24, \"Richmond District\": 12,\n        \"Embarcadero\": 30, \"Alamo Square\": 17\n    },\n    \"Presidio\": {\n        \"Sunset District\": 15, \"Nob Hill\": 18, \"Pacific Heights\": 11, \"Mission District\": 26,\n        \"Marina District\": 11, \"North Beach\": 18, \"Russian Hill\": 14, \"Richmond District\": 7,\n        \"Embarcadero\": 20, \"Alamo Square\": 19\n    },\n    \"Nob Hill\": {\n        \"Sunset District\": 24, \"Presidio\": 17, \"Pacific Heights\": 8, \"Mission District\": 13,\n        \"Marina District\": 11, \"North Beach\": 8, \"Russian Hill\": 5, \"Richmond District\": 14,\n        \"Embarcadero\": 9, \"Alamo Square\": 11\n    },\n    \"Pacific Heights\": {\n        \"Sunset District\": 21, \"Presidio\": 11, \"Nob Hill\": 8, \"Mission District\": 15,\n        \"Marina District\": 6, \"North Beach\": 9, \"Russian Hill\": 7, \"Richmond District\": 12,\n        \"Embarcadero\": 10, \"Alamo Square\": 10\n    },\n    \"Mission District\": {\n        \"Sunset District\": 24, \"Presidio\": 25, \"Nob Hill\": 12, \"Pacific Heights\": 16,\n        \"Marina District\": 19, \"North Beach\": 17, \"Russian Hill\": 15, \"Richmond District\": 20,\n        \"Embarcadero\": 19, \"Alamo Square\": 11\n    },\n    \"Marina District\": {\n        \"Sunset District\": 19, \"Presidio\": 10, \"Nob Hill\": 12, \"Pacific Heights\": 7,\n        \"Mission District\": 20, \"North Beach\": 11, \"Russian Hill\": 8, \"Richmond District\": 11,\n        \"Embarcadero\": 14, \"Alamo Square\": 15\n    },\n    \"North Beach\": {\n        \"Sunset District\": 27, \"Presidio\": 17, \"Nob Hill\": 7, \"Pacific Heights\": 8,\n        \"Mission District\": 18, \"Marina District\": 9, \"Russian Hill\": 4, \"Richmond District\": 18,\n        \"Embarcadero\": 6, \"Alamo Square\": 16\n    },\n    \"Russian Hill\": {\n        \"Sunset District\": 23, \"Presidio\": 14, \"Nob Hill\": 5, \"Pacific Heights\": 7,\n        \"Mission District\": 16, \"Marina District\": 7, \"North Beach\": 5, \"Richmond District\": 14,\n        \"Embarcadero\": 8, \"Alamo Square\": 15\n    },\n    \"Richmond District\": {\n        \"Sunset District\": 11, \"Presidio\": 7, \"Nob Hill\": 17, \"Pacific Heights\": 10,\n        \"Mission District\": 20, \"Marina District\": 9, \"North Beach\": 17, \"Russian Hill\": 13,\n        \"Embarcadero\": 19, \"Alamo Square\": 13\n    },\n    \"Embarcadero\": {\n        \"Sunset District\": 30, \"Presidio\": 20, \"Nob Hill\": 10, \"Pacific Heights\": 11,\n        \"Mission District\": 20, \"Marina District\": 12, \"North Beach\": 5, \"Russian Hill\": 8,\n        \"Richmond District\": 21, \"Alamo Square\": 19\n    },\n    \"Alamo Square\": {\n        \"Sunset District\": 16, \"Presidio\": 17, \"Nob Hill\": 11, \"Pacific Heights\": 10,\n        \"Mission District\": 10, \"Marina District\": 15, \"North Beach\": 15, \"Russian Hill\": 13,\n        \"Richmond District\": 11, \"Embarcadero\": 16\n    }\n}\n\n# Friend data\nfriends = [\n    {\"name\": \"Charles\", \"location\": \"Presidio\", \"start\": 13.25, \"end\": 15.0, \"duration\": 1.75},\n    {\"name\": \"Robert\", \"location\": \"Nob Hill\", \"start\": 13.25, \"end\": 17.5, \"duration\": 1.5},\n    {\"name\": \"Nancy\", \"location\": \"Pacific Heights\", \"start\": 14.75, \"end\": 22.0, \"duration\": 1.75},\n    {\"name\": \"Brian\", \"location\": \"Mission District\", \"start\": 15.5, \"end\": 22.0, \"duration\": 1.0},\n    {\"name\": \"Kimberly\", \"location\": \"Marina District\", \"start\": 17.0, \"end\": 19.75, \"duration\": 1.25},\n    {\"name\": \"David\", \"location\": \"North Beach\", \"start\": 14.75, \"end\": 16.5, \"duration\": 1.25},\n    {\"name\": \"William\", \"location\": \"Russian Hill\", \"start\": 12.5, \"end\": 19.25, \"duration\": 2.0},\n    {\"name\": \"Jeffrey\", \"location\": \"Richmond District\", \"start\": 12.0, \"end\": 19.25, \"duration\": 0.75},\n    {\"name\": \"Karen\", \"location\": \"Embarcadero\", \"start\": 14.25, \"end\": 20.75, \"duration\": 1.0},\n    {\"name\": \"Joshua\", \"location\": \"Alamo Square\", \"start\": 18.75, \"end\": 22.0, \"duration\": 1.0}\n]\n\ndef time_to_float(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours + minutes / 60.0\n\ndef float_to_time(time_float):\n    hours = int(time_float)\n    minutes = int((time_float - hours) * 60)\n    return f\"{hours}:{minutes:02d}\"\n\ndef calculate_schedule(order):\n    current_location = \"Sunset District\"\n    current_time = 9.0\n    itinerary = []\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        \n        # Travel to friend's location\n        travel_time = travel_times[current_location][friend[\"location\"]] / 60.0\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        meeting_start = max(arrival_time, friend[\"start\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        \n        if meeting_end > friend[\"end\"]:\n            return None  # Can't meet this friend\n        \n        # Add to itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": float_to_time(meeting_start),\n            \"end_time\": float_to_time(meeting_end)\n        })\n        \n        met_friends.add(friend[\"name\"])\n        current_location = friend[\"location\"]\n        current_time = meeting_end\n    \n    return itinerary if len(met_friends) == len(friends) else None\n\ndef find_optimal_schedule():\n    friend_names = [f[\"name\"] for f in friends]\n    \n    # Try all possible orders (permutations) of meeting friends\n    for perm in permutations(friend_names):\n        schedule = calculate_schedule(perm)\n        if schedule:\n            return schedule\n    \n    # If no complete schedule found, try to maximize number of meetings\n    max_meetings = 0\n    best_schedule = None\n    \n    for perm in permutations(friend_names):\n        schedule = calculate_schedule(perm)\n        if schedule and len(schedule) > max_meetings:\n            max_meetings = len(schedule)\n            best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\nif optimal_schedule:\n    result = {\"itinerary\": optimal_schedule}\nelse:\n    result = {\"itinerary\": []}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_974"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Rebecca",
                        "start_time": "15:22",
                        "end_time": "16:22"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Richard",
                        "start_time": "16:42",
                        "end_time": "18:12"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Margaret",
                        "start_time": "18:18",
                        "end_time": "18:33"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:40",
                        "end_time": "20:10"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mark",
                        "start_time": "15:57",
                        "end_time": "16:42"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Richard",
                        "start_time": "16:52",
                        "end_time": "18:22"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Margaret",
                        "start_time": "18:28",
                        "end_time": "18:43"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:50",
                        "end_time": "20:20"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Locations and travel times\nlocations = [\n    \"Chinatown\", \"Embarcadero\", \"Pacific Heights\", \"Russian Hill\", \n    \"Haight-Ashbury\", \"Golden Gate Park\", \"Fisherman's Wharf\", \n    \"Sunset District\", \"The Castro\"\n]\n\ntravel_times = {\n    \"Chinatown\": {\"Embarcadero\": 5, \"Pacific Heights\": 10, \"Russian Hill\": 7, \"Haight-Ashbury\": 19, \n                  \"Golden Gate Park\": 23, \"Fisherman's Wharf\": 8, \"Sunset District\": 29, \"The Castro\": 22},\n    \"Embarcadero\": {\"Chinatown\": 7, \"Pacific Heights\": 11, \"Russian Hill\": 8, \"Haight-Ashbury\": 21, \n                    \"Golden Gate Park\": 25, \"Fisherman's Wharf\": 6, \"Sunset District\": 30, \"The Castro\": 25},\n    \"Pacific Heights\": {\"Chinatown\": 11, \"Embarcadero\": 10, \"Russian Hill\": 7, \"Haight-Ashbury\": 11, \n                        \"Golden Gate Park\": 15, \"Fisherman's Wharf\": 13, \"Sunset District\": 21, \"The Castro\": 16},\n    \"Russian Hill\": {\"Chinatown\": 9, \"Embarcadero\": 8, \"Pacific Heights\": 7, \"Haight-Ashbury\": 17, \n                     \"Golden Gate Park\": 21, \"Fisherman's Wharf\": 7, \"Sunset District\": 23, \"The Castro\": 21},\n    \"Haight-Ashbury\": {\"Chinatown\": 19, \"Embarcadero\": 20, \"Pacific Heights\": 12, \"Russian Hill\": 17, \n                       \"Golden Gate Park\": 7, \"Fisherman's Wharf\": 23, \"Sunset District\": 15, \"The Castro\": 6},\n    \"Golden Gate Park\": {\"Chinatown\": 23, \"Embarcadero\": 25, \"Pacific Heights\": 16, \"Russian Hill\": 19, \n                         \"Haight-Ashbury\": 7, \"Fisherman's Wharf\": 24, \"Sunset District\": 10, \"The Castro\": 13},\n    \"Fisherman's Wharf\": {\"Chinatown\": 12, \"Embarcadero\": 8, \"Pacific Heights\": 12, \"Russian Hill\": 7, \n                          \"Haight-Ashbury\": 22, \"Golden Gate Park\": 25, \"Sunset District\": 27, \"The Castro\": 27},\n    \"Sunset District\": {\"Chinatown\": 30, \"Embarcadero\": 30, \"Pacific Heights\": 21, \"Russian Hill\": 24, \n                        \"Haight-Ashbury\": 15, \"Golden Gate Park\": 11, \"Fisherman's Wharf\": 29, \"The Castro\": 17},\n    \"The Castro\": {\"Chinatown\": 22, \"Embarcadero\": 22, \"Pacific Heights\": 16, \"Russian Hill\": 18, \n                   \"Haight-Ashbury\": 6, \"Golden Gate Park\": 11, \"Fisherman's Wharf\": 24, \"Sunset District\": 17}\n}\n\n# Friends data\nfriends = [\n    {\"name\": \"Richard\", \"location\": \"Embarcadero\", \"start\": \"15:15\", \"end\": \"18:45\", \"duration\": 90},\n    {\"name\": \"Mark\", \"location\": \"Pacific Heights\", \"start\": \"15:00\", \"end\": \"17:00\", \"duration\": 45},\n    {\"name\": \"Matthew\", \"location\": \"Russian Hill\", \"start\": \"17:30\", \"end\": \"21:00\", \"duration\": 90},\n    {\"name\": \"Rebecca\", \"location\": \"Haight-Ashbury\", \"start\": \"14:45\", \"end\": \"18:00\", \"duration\": 60},\n    {\"name\": \"Melissa\", \"location\": \"Golden Gate Park\", \"start\": \"13:45\", \"end\": \"17:30\", \"duration\": 90},\n    {\"name\": \"Margaret\", \"location\": \"Fisherman's Wharf\", \"start\": \"14:45\", \"end\": \"20:15\", \"duration\": 15},\n    {\"name\": \"Emily\", \"location\": \"Sunset District\", \"start\": \"15:45\", \"end\": \"17:00\", \"duration\": 45},\n    {\"name\": \"George\", \"location\": \"The Castro\", \"start\": \"14:00\", \"end\": \"16:15\", \"duration\": 75}\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00\")\n    current_location = \"Chinatown\"\n    schedule = []\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        location = friend[\"location\"]\n        travel_time = travel_times[current_location][location]\n        \n        arrival_time = current_time + travel_time\n        start_window = time_to_minutes(friend[\"start\"])\n        end_window = time_to_minutes(friend[\"end\"])\n        duration = friend[\"duration\"]\n        \n        # Calculate possible meeting start time\n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + duration\n        \n        if meeting_end > end_window:\n            # Try to start earlier if possible\n            meeting_start = end_window - duration\n            if meeting_start < start_window:\n                continue  # Can't meet this friend\n        \n        if meeting_start < arrival_time:\n            continue  # Can't meet this friend\n        \n        # Add to schedule\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        met_friends.add(friend[\"name\"])\n        current_time = meeting_end\n        current_location = location\n    \n    return schedule, len(met_friends)\n\n# Try different orders to maximize number of friends met\nbest_schedule = []\nmax_friends = 0\n\n# We'll try permutations of friends who have earlier availability first to optimize\nearly_friends = [\"George\", \"Melissa\", \"Margaret\", \"Rebecca\", \"Mark\", \"Richard\", \"Emily\", \"Matthew\"]\n\n# Try a reasonable number of permutations (not all 40320)\nfor _ in range(1000):\n    import random\n    random.shuffle(early_friends)\n    schedule, count = calculate_schedule(early_friends)\n    if count > max_friends:\n        max_friends = count\n        best_schedule = schedule\n    if max_friends == 8:\n        break\n\n# Output the best schedule found\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_763"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef time_diff(start_str, end_str):\n    start = parse_time(start_str)\n    end = parse_time(end_str)\n    return (end - start).total_seconds() / 60\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        (\"Sunset District\", \"Chinatown\"): 30,\n        (\"Sunset District\", \"Russian Hill\"): 24,\n        (\"Sunset District\", \"North Beach\"): 29,\n        (\"Chinatown\", \"Sunset District\"): 29,\n        (\"Chinatown\", \"Russian Hill\"): 7,\n        (\"Chinatown\", \"North Beach\"): 3,\n        (\"Russian Hill\", \"Sunset District\"): 23,\n        (\"Russian Hill\", \"Chinatown\"): 9,\n        (\"Russian Hill\", \"North Beach\"): 5,\n        (\"North Beach\", \"Sunset District\"): 27,\n        (\"North Beach\", \"Chinatown\"): 6,\n        (\"North Beach\", \"Russian Hill\"): 4,\n    }\n\n    current_location = \"Sunset District\"\n    current_time = \"9:00\"\n    itinerary = []\n\n    # Melissa at North Beach 8:15-13:30, min 105 minutes\n    melissa_start = \"8:15\"\n    melissa_end = \"13:30\"\n    travel_time = travel_times[(current_location, \"North Beach\")]\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time < melissa_start:\n        start_meeting = melissa_start\n    else:\n        start_meeting = arrival_time\n    \n    end_meeting = add_minutes(start_meeting, 105)\n    \n    if end_meeting > melissa_end:\n        possible_duration = time_diff(start_meeting, melissa_end)\n        if possible_duration >= 60:  # Fallback to minimum 60 minutes if 105 not possible\n            end_meeting = melissa_end\n        else:\n            # Skip Melissa if can't meet minimum\n            pass\n    else:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"person\": \"Melissa\",\n            \"start_time\": start_meeting,\n            \"end_time\": end_meeting\n        })\n        current_location = \"North Beach\"\n        current_time = end_meeting\n\n    # Anthony at Chinatown 13:15-14:30, min 60 minutes\n    anthony_start = \"13:15\"\n    anthony_end = \"14:30\"\n    travel_time = travel_times[(current_location, \"Chinatown\")]\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time < anthony_start:\n        start_meeting = anthony_start\n    else:\n        start_meeting = arrival_time\n    \n    end_meeting = add_minutes(start_meeting, 60)\n    \n    if end_meeting > anthony_end:\n        possible_duration = time_diff(start_meeting, anthony_end)\n        if possible_duration >= 30:  # Fallback to minimum 30 minutes if 60 not possible\n            end_meeting = anthony_end\n        else:\n            # Skip Anthony if can't meet minimum\n            pass\n    else:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"Anthony\",\n            \"start_time\": start_meeting,\n            \"end_time\": end_meeting\n        })\n        current_location = \"Chinatown\"\n        current_time = end_meeting\n\n    # Rebecca at Russian Hill 19:30-21:15, min 105 minutes\n    rebecca_start = \"19:30\"\n    rebecca_end = \"21:15\"\n    travel_time = travel_times[(current_location, \"Russian Hill\")]\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time < rebecca_start:\n        start_meeting = rebecca_start\n    else:\n        start_meeting = arrival_time\n    \n    end_meeting = add_minutes(start_meeting, 105)\n    \n    if end_meeting > rebecca_end:\n        possible_duration = time_diff(start_meeting, rebecca_end)\n        if possible_duration >= 60:  # Fallback to minimum 60 minutes if 105 not possible\n            end_meeting = rebecca_end\n        else:\n            # Skip Rebecca if can't meet minimum\n            pass\n    else:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"person\": \"Rebecca\",\n            \"start_time\": start_meeting,\n            \"end_time\": end_meeting\n        })\n\n    return {\"itinerary\": itinerary}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_209"
        }
    ]
}