{
    "0shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "2:45PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "4:30PM",
                    "duration": 18,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "4:48PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "6:03PM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "6:23PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "9:45PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "10:15PM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "10:30PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "2:45PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "2:45PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 18,
                    "time": "4:48PM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "4:48PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "6:23PM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 30,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef calculate_schedule():\n    # Input parameters\n    start_location = \"Haight-Ashbury\"\n    start_time = parse_time(\"9:00AM\")\n    \n    # Friends' availability\n    friends = [\n        {\"name\": \"Sarah\", \"location\": \"Fisherman's Wharf\", \"start\": parse_time(\"2:45PM\"), \"end\": parse_time(\"5:30PM\"), \"min_duration\": 105},\n        {\"name\": \"Mary\", \"location\": \"Richmond District\", \"start\": parse_time(\"1:00PM\"), \"end\": parse_time(\"7:15PM\"), \"min_duration\": 75},\n        {\"name\": \"Helen\", \"location\": \"Mission District\", \"start\": parse_time(\"9:45PM\"), \"end\": parse_time(\"10:30PM\"), \"min_duration\": 30},\n        {\"name\": \"Thomas\", \"location\": \"Bayview\", \"start\": parse_time(\"3:15PM\"), \"end\": parse_time(\"6:45PM\"), \"min_duration\": 120}\n    ]\n    \n    # Travel times in minutes\n    travel_times = {\n        \"Haight-Ashbury\": {\n            \"Fisherman's Wharf\": 23,\n            \"Richmond District\": 10,\n            \"Mission District\": 11,\n            \"Bayview\": 18\n        },\n        \"Fisherman's Wharf\": {\n            \"Haight-Ashbury\": 22,\n            \"Richmond District\": 18,\n            \"Mission District\": 22,\n            \"Bayview\": 26\n        },\n        \"Richmond District\": {\n            \"Haight-Ashbury\": 10,\n            \"Fisherman's Wharf\": 18,\n            \"Mission District\": 20,\n            \"Bayview\": 26\n        },\n        \"Mission District\": {\n            \"Haight-Ashbury\": 12,\n            \"Fisherman's Wharf\": 22,\n            \"Richmond District\": 20,\n            \"Bayview\": 15\n        },\n        \"Bayview\": {\n            \"Haight-Ashbury\": 19,\n            \"Fisherman's Wharf\": 25,\n            \"Richmond District\": 25,\n            \"Mission District\": 13\n        }\n    }\n    \n    # Generate all possible permutations of meeting orders\n    from itertools import permutations\n    best_schedule = None\n    best_meetings = 0\n    \n    for order in permutations(friends):\n        current_location = start_location\n        current_time = start_time\n        schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n        meetings = 0\n        \n        for friend in order:\n            # Check if we can meet this friend\n            travel_duration = travel_times[current_location][friend[\"location\"]]\n            arrival_time = add_minutes(current_time, travel_duration)\n            \n            # Calculate meeting window\n            meeting_start = max(arrival_time, friend[\"start\"])\n            meeting_end = min(meeting_start + timedelta(minutes=friend[\"min_duration\"]), friend[\"end\"])\n            \n            if meeting_end > friend[\"end\"]:\n                continue  # Can't meet for required duration\n            \n            if meeting_start < arrival_time:\n                continue  # Can't time travel\n            \n            # Add to schedule\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": friend[\"location\"]\n            })\n            \n            if arrival_time < friend[\"start\"]:\n                wait_duration = (friend[\"start\"] - arrival_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": friend[\"location\"],\n                    \"time\": format_time(arrival_time),\n                    \"duration\": wait_duration\n                })\n            \n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"duration\": friend[\"min_duration\"],\n                \"time\": format_time(meeting_start),\n                \"with\": friend[\"name\"]\n            })\n            \n            meetings += 1\n            current_location = friend[\"location\"]\n            current_time = meeting_start + timedelta(minutes=friend[\"min_duration\"])\n        \n        if meetings > best_meetings or (meetings == best_meetings and best_schedule is None):\n            best_meetings = meetings\n            best_schedule = schedule\n    \n    return best_schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
            "count": "meeting_planning_example_389",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:30AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "11:15AM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:27AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:45PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:15PM",
                    "duration": 24,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:39PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:00PM",
                    "duration": 16,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "3:16PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "3:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "3:45PM",
                    "duration": 21,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:06PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "5:15PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "5:30PM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:37PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "7:37PM",
                    "duration": 15,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:52PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 45,
                    "time": "10:30AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 10,
                    "time": "11:25AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "3:30PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 15,
                    "time": "3:30PM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 18,
                    "time": "4:03PM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "4:03PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 24,
                    "time": "4:57PM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "4:57PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "6:12PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "6:30PM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 5,
                    "time": "6:50PM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:15PM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "7:45PM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\n# Initialize travel times as a dictionary\ntravel_times = {\n    'Union Square': {\n        'Presidio': 24,\n        'Alamo Square': 15,\n        'Marina District': 18,\n        'Financial District': 9,\n        'Nob Hill': 9,\n        'Sunset District': 27,\n        'Chinatown': 7,\n        'Russian Hill': 13,\n        'North Beach': 10,\n        'Haight-Ashbury': 18\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'Alamo Square': 19,\n        'Marina District': 11,\n        'Financial District': 23,\n        'Nob Hill': 18,\n        'Sunset District': 15,\n        'Chinatown': 21,\n        'Russian Hill': 14,\n        'North Beach': 18,\n        'Haight-Ashbury': 15\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'Presidio': 17,\n        'Marina District': 15,\n        'Financial District': 17,\n        'Nob Hill': 11,\n        'Sunset District': 16,\n        'Chinatown': 15,\n        'Russian Hill': 13,\n        'North Beach': 15,\n        'Haight-Ashbury': 5\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Presidio': 10,\n        'Alamo Square': 15,\n        'Financial District': 17,\n        'Nob Hill': 12,\n        'Sunset District': 19,\n        'Chinatown': 15,\n        'Russian Hill': 8,\n        'North Beach': 11,\n        'Haight-Ashbury': 16\n    },\n    'Financial District': {\n        'Union Square': 9,\n        'Presidio': 22,\n        'Alamo Square': 17,\n        'Marina District': 15,\n        'Nob Hill': 8,\n        'Sunset District': 30,\n        'Chinatown': 5,\n        'Russian Hill': 11,\n        'North Beach': 7,\n        'Haight-Ashbury': 19\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'Presidio': 17,\n        'Alamo Square': 11,\n        'Marina District': 11,\n        'Financial District': 9,\n        'Sunset District': 24,\n        'Chinatown': 6,\n        'Russian Hill': 5,\n        'North Beach': 8,\n        'Haight-Ashbury': 13\n    },\n    'Sunset District': {\n        'Union Square': 30,\n        'Presidio': 16,\n        'Alamo Square': 17,\n        'Marina District': 21,\n        'Financial District': 30,\n        'Nob Hill': 27,\n        'Chinatown': 30,\n        'Russian Hill': 24,\n        'North Beach': 28,\n        'Haight-Ashbury': 15\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Presidio': 19,\n        'Alamo Square': 17,\n        'Marina District': 12,\n        'Financial District': 5,\n        'Nob Hill': 9,\n        'Sunset District': 29,\n        'Russian Hill': 7,\n        'North Beach': 3,\n        'Haight-Ashbury': 19\n    },\n    'Russian Hill': {\n        'Union Square': 10,\n        'Presidio': 14,\n        'Alamo Square': 15,\n        'Marina District': 7,\n        'Financial District': 11,\n        'Nob Hill': 5,\n        'Sunset District': 23,\n        'Chinatown': 9,\n        'North Beach': 5,\n        'Haight-Ashbury': 17\n    },\n    'North Beach': {\n        'Union Square': 7,\n        'Presidio': 17,\n        'Alamo Square': 16,\n        'Marina District': 9,\n        'Financial District': 8,\n        'Nob Hill': 7,\n        'Sunset District': 27,\n        'Chinatown': 6,\n        'Russian Hill': 4,\n        'Haight-Ashbury': 18\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'Presidio': 15,\n        'Alamo Square': 5,\n        'Marina District': 17,\n        'Financial District': 21,\n        'Nob Hill': 15,\n        'Sunset District': 15,\n        'Chinatown': 19,\n        'Russian Hill': 17,\n        'North Beach': 19\n    }\n}\n\n# Define friend constraints\nfriends = [\n    {'name': 'Kimberly', 'location': 'Presidio', 'start': '3:30PM', 'end': '4:00PM', 'duration': 15},\n    {'name': 'Elizabeth', 'location': 'Alamo Square', 'start': '7:15PM', 'end': '8:15PM', 'duration': 15},\n    {'name': 'Joshua', 'location': 'Marina District', 'start': '10:30AM', 'end': '2:15PM', 'duration': 45},\n    {'name': 'Sandra', 'location': 'Financial District', 'start': '7:30PM', 'end': '8:15PM', 'duration': 45},\n    {'name': 'Kenneth', 'location': 'Nob Hill', 'start': '12:45PM', 'end': '9:45PM', 'duration': 30},\n    {'name': 'Betty', 'location': 'Sunset District', 'start': '2:00PM', 'end': '7:00PM', 'duration': 60},\n    {'name': 'Deborah', 'location': 'Chinatown', 'start': '5:15PM', 'end': '8:30PM', 'duration': 15},\n    {'name': 'Barbara', 'location': 'Russian Hill', 'start': '5:30PM', 'end': '9:15PM', 'duration': 120},\n    {'name': 'Steven', 'location': 'North Beach', 'start': '5:45PM', 'end': '8:45PM', 'duration': 90},\n    {'name': 'Daniel', 'location': 'Haight-Ashbury', 'start': '6:30PM', 'end': '6:45PM', 'duration': 15}\n]\n\n# Sort friends by start time\nfriends.sort(key=lambda x: parse_time(x['start']))\n\n# Initialize schedule\ncurrent_time = parse_time('9:00AM')\ncurrent_location = 'Union Square'\nschedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\ndef can_meet(friend, current_time, current_location):\n    friend_start = parse_time(friend['start'])\n    friend_end = parse_time(friend['end'])\n    travel_time = travel_times[current_location][friend['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time > friend_end:\n        return None\n    \n    meet_start = max(arrival_time, friend_start)\n    meet_end = add_minutes(meet_start, friend['duration'])\n    \n    if meet_end > friend_end:\n        return None\n    \n    return {\n        'travel_time': travel_time,\n        'arrival_time': arrival_time,\n        'meet_start': meet_start,\n        'meet_end': meet_end\n    }\n\n# Process each friend in order\nfor friend in friends:\n    plan = can_meet(friend, current_time, current_location)\n    if plan:\n        # Add travel action\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': plan['travel_time'],\n            'time': format_time(current_time),\n            'to': friend['location']\n        })\n        \n        # Update current time and location\n        current_time = plan['arrival_time']\n        current_location = friend['location']\n        \n        # Add wait action if needed\n        if current_time < plan['meet_start']:\n            wait_duration = (plan['meet_start'] - current_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': format_time(current_time),\n                'duration': wait_duration\n            })\n            current_time = plan['meet_start']\n        \n        # Add meet action\n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': friend['duration'],\n            'time': format_time(current_time),\n            'with': friend['name']\n        })\n        current_time = plan['meet_end']\n\n# Output the schedule\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
            "count": "meeting_planning_example_912",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "12:15PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "12:30PM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "12:52PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "1:22PM",
                    "duration": 25,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "1:47PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "2:02PM",
                    "duration": 17,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "2:19PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "3:34PM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "3:43PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "7:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "12:15PM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "12:52PM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "12:52PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 25,
                    "time": "1:47PM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "1:47PM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 17,
                    "time": "2:19PM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 75,
                    "time": "2:19PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "3:43PM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Richmond District': {\n        'Marina District': 9,\n        'Chinatown': 20,\n        'Financial District': 22,\n        'Bayview': 26,\n        'Union Square': 21\n    },\n    'Marina District': {\n        'Richmond District': 11,\n        'Chinatown': 16,\n        'Financial District': 17,\n        'Bayview': 27,\n        'Union Square': 16\n    },\n    'Chinatown': {\n        'Richmond District': 20,\n        'Marina District': 12,\n        'Financial District': 5,\n        'Bayview': 22,\n        'Union Square': 7\n    },\n    'Financial District': {\n        'Richmond District': 21,\n        'Marina District': 15,\n        'Chinatown': 5,\n        'Bayview': 19,\n        'Union Square': 9\n    },\n    'Bayview': {\n        'Richmond District': 25,\n        'Marina District': 25,\n        'Chinatown': 18,\n        'Financial District': 19,\n        'Union Square': 17\n    },\n    'Union Square': {\n        'Richmond District': 20,\n        'Marina District': 18,\n        'Chinatown': 7,\n        'Financial District': 9,\n        'Bayview': 15\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Kimberly': {\n        'location': 'Marina District',\n        'start': '1:15PM',\n        'end': '4:45PM',\n        'duration': 15\n    },\n    'Robert': {\n        'location': 'Chinatown',\n        'start': '12:15PM',\n        'end': '8:15PM',\n        'duration': 15\n    },\n    'Rebecca': {\n        'location': 'Financial District',\n        'start': '1:15PM',\n        'end': '4:45PM',\n        'duration': 75\n    },\n    'Margaret': {\n        'location': 'Bayview',\n        'start': '9:30AM',\n        'end': '1:30PM',\n        'duration': 30\n    },\n    'Kenneth': {\n        'location': 'Union Square',\n        'start': '7:30PM',\n        'end': '9:15PM',\n        'duration': 75\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef generate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Richmond District'\n    schedule = [{'action': 'start', 'location': current_location, 'time': minutes_to_time(current_time)}]\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        travel_duration = travel_times[current_location][destination]\n        \n        # Travel to friend\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': minutes_to_time(travel_start),\n            'to': destination\n        })\n        \n        # Arrive at destination\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if we can meet the friend\n        friend_start = time_to_minutes(friend['start'])\n        friend_end = time_to_minutes(friend['end'])\n        required_duration = friend['duration']\n        \n        # Calculate meeting window\n        meeting_start = max(current_time, friend_start)\n        meeting_end = meeting_start + required_duration\n        \n        if meeting_end > friend_end:\n            # Can't meet this friend, skip\n            continue\n        \n        # Add wait time if needed\n        if current_time < friend_start:\n            wait_duration = friend_start - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': wait_duration\n            })\n            current_time = friend_start\n        \n        # Add meeting\n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': required_duration,\n            'time': minutes_to_time(current_time),\n            'with': friend_name\n        })\n        current_time += required_duration\n    \n    # Check if we can meet Kenneth (last constraint)\n    kenneth = friends['Kenneth']\n    if 'Kenneth' not in order:\n        destination = kenneth['location']\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': minutes_to_time(travel_start),\n            'to': destination\n        })\n        \n        current_time = travel_end\n        current_location = destination\n        \n        friend_start = time_to_minutes(kenneth['start'])\n        friend_end = time_to_minutes(kenneth['end'])\n        required_duration = kenneth['duration']\n        \n        meeting_start = max(current_time, friend_start)\n        meeting_end = meeting_start + required_duration\n        \n        if meeting_end <= friend_end:\n            if current_time < friend_start:\n                wait_duration = friend_start - current_time\n                schedule.append({\n                    'action': 'wait',\n                    'location': current_location,\n                    'time': minutes_to_time(current_time),\n                    'duration': wait_duration\n                })\n                current_time = friend_start\n            \n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': required_duration,\n                'time': minutes_to_time(current_time),\n                'with': 'Kenneth'\n            })\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    meetings = 0\n    for event in schedule:\n        if event['action'] == 'meet':\n            meetings += 1\n    return meetings\n\n# Generate all possible orders of meeting friends (excluding Kenneth who is last)\nfriend_names = ['Kimberly', 'Robert', 'Rebecca', 'Margaret']\nbest_schedule = None\nbest_score = 0\n\n# Try all permutations of friend meetings\nfor perm in permutations(friend_names):\n    current_order = list(perm) + ['Kenneth']\n    schedule = generate_schedule(current_order)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\n# If no schedule meets all friends, try subsets\nif best_score < 5:\n    for r in range(4, 0, -1):\n        for perm in permutations(friend_names, r):\n            current_order = list(perm) + ['Kenneth']\n            schedule = generate_schedule(current_order)\n            score = evaluate_schedule(schedule)\n            if score > best_score:\n                best_score = score\n                best_schedule = schedule\n            if best_score == 5:\n                break\n        if best_score == 5:\n            break\n\n# Prepare output\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_446",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 31,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "9:31AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "10:31AM",
                    "duration": 29,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "12:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "12:45PM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "12:49PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:45PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "3:30PM",
                    "duration": 21,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "3:51PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "4:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "9:31AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 29,
                    "time": "11:00AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 15,
                    "time": "12:30PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "12:49PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:45PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "1:45PM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 21,
                    "time": "3:51PM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "4:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 60,
                    "time": "4:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Financial District\": {\n        \"Russian Hill\": 10,\n        \"Sunset District\": 31,\n        \"North Beach\": 7,\n        \"The Castro\": 23,\n        \"Golden Gate Park\": 23\n    },\n    \"Russian Hill\": {\n        \"Financial District\": 11,\n        \"Sunset District\": 23,\n        \"North Beach\": 5,\n        \"The Castro\": 21,\n        \"Golden Gate Park\": 21\n    },\n    \"Sunset District\": {\n        \"Financial District\": 30,\n        \"Russian Hill\": 24,\n        \"North Beach\": 29,\n        \"The Castro\": 17,\n        \"Golden Gate Park\": 11\n    },\n    \"North Beach\": {\n        \"Financial District\": 8,\n        \"Russian Hill\": 4,\n        \"Sunset District\": 27,\n        \"The Castro\": 22,\n        \"Golden Gate Park\": 22\n    },\n    \"The Castro\": {\n        \"Financial District\": 20,\n        \"Russian Hill\": 18,\n        \"Sunset District\": 17,\n        \"North Beach\": 20,\n        \"Golden Gate Park\": 13\n    },\n    \"Golden Gate Park\": {\n        \"Financial District\": 26,\n        \"Russian Hill\": 19,\n        \"Sunset District\": 10,\n        \"North Beach\": 24,\n        \"The Castro\": 13\n    }\n}\n\n# Constraints\nconstraints = {\n    \"Ronald\": {\n        \"location\": \"Russian Hill\",\n        \"start\": time_to_minutes(\"1:45PM\"),\n        \"end\": time_to_minutes(\"5:15PM\"),\n        \"duration\": 105\n    },\n    \"Patricia\": {\n        \"location\": \"Sunset District\",\n        \"start\": time_to_minutes(\"9:15AM\"),\n        \"end\": time_to_minutes(\"10:00PM\"),\n        \"duration\": 60\n    },\n    \"Laura\": {\n        \"location\": \"North Beach\",\n        \"start\": time_to_minutes(\"12:30PM\"),\n        \"end\": time_to_minutes(\"12:45PM\"),\n        \"duration\": 15\n    },\n    \"Emily\": {\n        \"location\": \"The Castro\",\n        \"start\": time_to_minutes(\"4:15PM\"),\n        \"end\": time_to_minutes(\"6:30PM\"),\n        \"duration\": 60\n    },\n    \"Mary\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": time_to_minutes(\"3:00PM\"),\n        \"end\": time_to_minutes(\"4:30PM\"),\n        \"duration\": 60\n    }\n}\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Financial District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = constraints[friend]\n        destination = friend_data[\"location\"]\n        travel_duration = travel_times[current_location].get(destination, float('inf'))\n        \n        arrival_time = current_time + travel_duration\n        start_time = max(arrival_time, friend_data[\"start\"])\n        end_time = start_time + friend_data[\"duration\"]\n        \n        if end_time > friend_data[\"end\"]:\n            return None\n        \n        if arrival_time < friend_data[\"start\"]:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": destination\n            })\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": destination,\n                \"time\": minutes_to_time(arrival_time)\n            })\n        else:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": destination\n            })\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": friend_data[\"duration\"],\n            \"time\": minutes_to_time(start_time)\n        })\n        \n        current_time = end_time\n        current_location = destination\n        met_friends.add(friend)\n    \n    return schedule if len(met_friends) == len(order) else None\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    return len([event for event in schedule if event[\"action\"] == \"meet\"])\n\nfriends = list(constraints.keys())\nbest_schedule = None\nbest_score = 0\n\n# Try all possible permutations of 5 friends (too many, so we'll limit to some)\n# In practice, you'd use a more efficient algorithm, but for simplicity:\nfor perm in permutations(friends, 5):\n    schedule = generate_schedule(perm)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n    if best_score == 5:\n        break\n\n# If not all 5, try subsets\nif best_score < 5:\n    for size in [4, 3, 2, 1]:\n        for perm in permutations(friends, size):\n            schedule = generate_schedule(perm)\n            score = evaluate_schedule(schedule)\n            if score > best_score:\n                best_score = score\n                best_schedule = schedule\n            if best_score == size:\n                break\n        if best_score == size:\n            break\n\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
            "count": "meeting_planning_example_444",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "10:00AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "10:45AM",
                    "duration": 11,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "10:56AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "12:26PM",
                    "duration": 21,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:47PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "2:47PM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "3:04PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "8:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "10:00AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "10:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 11,
                    "time": "10:56AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 90,
                    "time": "10:56AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 21,
                    "time": "12:47PM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 120,
                    "time": "12:47PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "3:04PM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    'Bayview': {\n        'Pacific Heights': 23,\n        'Mission District': 13,\n        'Haight-Ashbury': 19,\n        'Financial District': 19\n    },\n    'Pacific Heights': {\n        'Bayview': 22,\n        'Mission District': 15,\n        'Haight-Ashbury': 11,\n        'Financial District': 13\n    },\n    'Mission District': {\n        'Bayview': 15,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 12,\n        'Financial District': 17\n    },\n    'Haight-Ashbury': {\n        'Bayview': 18,\n        'Pacific Heights': 12,\n        'Mission District': 11,\n        'Financial District': 21\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Pacific Heights': 13,\n        'Mission District': 17,\n        'Haight-Ashbury': 19\n    }\n}\n\nfriends = {\n    'Mary': {\n        'location': 'Pacific Heights',\n        'available_start': '10:00AM',\n        'available_end': '7:00PM',\n        'duration': 45\n    },\n    'Lisa': {\n        'location': 'Mission District',\n        'available_start': '8:30PM',\n        'available_end': '10:00PM',\n        'duration': 75\n    },\n    'Betty': {\n        'location': 'Haight-Ashbury',\n        'available_start': '7:15AM',\n        'available_end': '5:15PM',\n        'duration': 90\n    },\n    'Charles': {\n        'location': 'Financial District',\n        'available_start': '11:15AM',\n        'available_end': '3:00PM',\n        'duration': 120\n    }\n}\n\ncurrent_location = 'Bayview'\ncurrent_time = time_to_minutes('9:00AM')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    schedule.append({\n        'action': 'start',\n        'location': loc,\n        'time': minutes_to_time(time)\n    })\n    \n    for friend in order:\n        details = friends[friend]\n        dest = details['location']\n        travel_time = travel_times[loc][dest]\n        arrival_time = time + travel_time\n        available_start = time_to_minutes(details['available_start'])\n        available_end = time_to_minutes(details['available_end'])\n        duration = details['duration']\n        \n        if arrival_time > available_end:\n            return None\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + duration\n        \n        if end_time > available_end:\n            return None\n        \n        if arrival_time < available_start:\n            schedule.append({\n                'action': 'travel',\n                'location': loc,\n                'duration': travel_time,\n                'time': minutes_to_time(time),\n                'to': dest\n            })\n            time = arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': dest,\n                'time': minutes_to_time(time)\n            })\n            time = available_start\n        else:\n            schedule.append({\n                'action': 'travel',\n                'location': loc,\n                'duration': travel_time,\n                'time': minutes_to_time(time),\n                'to': dest\n            })\n            time = arrival_time\n        \n        schedule.append({\n            'action': 'meet',\n            'location': dest,\n            'duration': duration,\n            'time': minutes_to_time(start_time)\n        })\n        time = end_time\n        loc = dest\n    \n    return schedule\n\nbest_schedule = None\nbest_meetings = 0\n\nfor perm in permutations(friends.keys()):\n    schedule = calculate_schedule(perm)\n    if schedule:\n        if len(perm) > best_meetings:\n            best_meetings = len(perm)\n            best_schedule = schedule\n        elif len(perm) == best_meetings:\n            pass\n\nif not best_schedule:\n    best_schedule = [{\n        'action': 'start',\n        'location': current_location,\n        'time': minutes_to_time(current_time)\n    }]\n\nprint(json.dumps({'schedule': best_schedule}, indent=2))\n```",
            "count": "meeting_planning_example_350",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 120,
                    "time": "9:12AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "11:25AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:25AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 9,
                    "time": "11:49AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 45,
                    "time": "11:49AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "12:54PM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 90,
                    "time": "12:54PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "2:39PM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 45,
                    "time": "3:15PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 27,
                    "time": "4:27PM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 105,
                    "time": "4:27PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "6:23PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "6:23PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 7,
                    "time": "6:45PM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 15,
                    "time": "6:45PM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 27,
                    "time": "7:27PM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    \"Haight-Ashbury\": {\n        \"Mission District\": 11,\n        \"Union Square\": 19,\n        \"Pacific Heights\": 12,\n        \"Bayview\": 18,\n        \"Fisherman's Wharf\": 23,\n        \"Marina District\": 17,\n        \"Richmond District\": 10,\n        \"Sunset District\": 15,\n        \"Golden Gate Park\": 7\n    },\n    \"Mission District\": {\n        \"Haight-Ashbury\": 12,\n        \"Union Square\": 15,\n        \"Pacific Heights\": 16,\n        \"Bayview\": 14,\n        \"Fisherman's Wharf\": 22,\n        \"Marina District\": 19,\n        \"Richmond District\": 20,\n        \"Sunset District\": 24,\n        \"Golden Gate Park\": 17\n    },\n    \"Union Square\": {\n        \"Haight-Ashbury\": 18,\n        \"Mission District\": 14,\n        \"Pacific Heights\": 15,\n        \"Bayview\": 15,\n        \"Fisherman's Wharf\": 15,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Sunset District\": 27,\n        \"Golden Gate Park\": 22\n    },\n    \"Pacific Heights\": {\n        \"Haight-Ashbury\": 11,\n        \"Mission District\": 15,\n        \"Union Square\": 12,\n        \"Bayview\": 22,\n        \"Fisherman's Wharf\": 13,\n        \"Marina District\": 6,\n        \"Richmond District\": 12,\n        \"Sunset District\": 21,\n        \"Golden Gate Park\": 15\n    },\n    \"Bayview\": {\n        \"Haight-Ashbury\": 19,\n        \"Mission District\": 13,\n        \"Union Square\": 18,\n        \"Pacific Heights\": 23,\n        \"Fisherman's Wharf\": 25,\n        \"Marina District\": 27,\n        \"Richmond District\": 25,\n        \"Sunset District\": 23,\n        \"Golden Gate Park\": 22\n    },\n    \"Fisherman's Wharf\": {\n        \"Haight-Ashbury\": 22,\n        \"Mission District\": 22,\n        \"Union Square\": 13,\n        \"Pacific Heights\": 12,\n        \"Bayview\": 26,\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Sunset District\": 27,\n        \"Golden Gate Park\": 25\n    },\n    \"Marina District\": {\n        \"Haight-Ashbury\": 16,\n        \"Mission District\": 20,\n        \"Union Square\": 16,\n        \"Pacific Heights\": 7,\n        \"Bayview\": 27,\n        \"Fisherman's Wharf\": 10,\n        \"Richmond District\": 11,\n        \"Sunset District\": 19,\n        \"Golden Gate Park\": 18\n    },\n    \"Richmond District\": {\n        \"Haight-Ashbury\": 10,\n        \"Mission District\": 20,\n        \"Union Square\": 21,\n        \"Pacific Heights\": 10,\n        \"Bayview\": 27,\n        \"Fisherman's Wharf\": 18,\n        \"Marina District\": 9,\n        \"Sunset District\": 11,\n        \"Golden Gate Park\": 9\n    },\n    \"Sunset District\": {\n        \"Haight-Ashbury\": 15,\n        \"Mission District\": 25,\n        \"Union Square\": 30,\n        \"Pacific Heights\": 21,\n        \"Bayview\": 22,\n        \"Fisherman's Wharf\": 29,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Golden Gate Park\": 11\n    },\n    \"Golden Gate Park\": {\n        \"Haight-Ashbury\": 7,\n        \"Mission District\": 17,\n        \"Union Square\": 22,\n        \"Pacific Heights\": 16,\n        \"Bayview\": 23,\n        \"Fisherman's Wharf\": 24,\n        \"Marina District\": 16,\n        \"Richmond District\": 7,\n        \"Sunset District\": 10\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\"name\": \"Elizabeth\", \"location\": \"Mission District\", \"start\": \"10:30AM\", \"end\": \"8:00PM\", \"duration\": 90},\n    {\"name\": \"David\", \"location\": \"Union Square\", \"start\": \"3:15PM\", \"end\": \"7:00PM\", \"duration\": 45},\n    {\"name\": \"Sandra\", \"location\": \"Pacific Heights\", \"start\": \"7:00AM\", \"end\": \"8:00PM\", \"duration\": 120},\n    {\"name\": \"Thomas\", \"location\": \"Bayview\", \"start\": \"7:30PM\", \"end\": \"8:30PM\", \"duration\": 30},\n    {\"name\": \"Robert\", \"location\": \"Fisherman's Wharf\", \"start\": \"10:00AM\", \"end\": \"3:00PM\", \"duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Marina District\", \"start\": \"10:45AM\", \"end\": \"1:00PM\", \"duration\": 45},\n    {\"name\": \"Melissa\", \"location\": \"Richmond District\", \"start\": \"6:15PM\", \"end\": \"8:00PM\", \"duration\": 15},\n    {\"name\": \"Kimberly\", \"location\": \"Sunset District\", \"start\": \"10:15AM\", \"end\": \"6:15PM\", \"duration\": 105},\n    {\"name\": \"Amanda\", \"location\": \"Golden Gate Park\", \"start\": \"7:45AM\", \"end\": \"6:45PM\", \"duration\": 15}\n]\n\ndef get_travel_time(from_loc, to_loc):\n    if from_loc == to_loc:\n        return 0\n    try:\n        return travel_times[from_loc][to_loc]\n    except KeyError:\n        return travel_times[to_loc][from_loc]\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Haight-Ashbury\"\n    schedule = []\n    total_meetings = 0\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": minutes_to_time(current_time)\n    })\n    \n    for friend_idx in order:\n        friend = friends[friend_idx]\n        destination = friend[\"location\"]\n        travel_duration = get_travel_time(current_location, destination)\n        \n        # Travel to friend\n        current_time += travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time - travel_duration),\n            \"to\": destination\n        })\n        current_location = destination\n        \n        # Check if we can meet\n        friend_start = time_to_minutes(friend[\"start\"])\n        friend_end = time_to_minutes(friend[\"end\"])\n        meeting_duration = friend[\"duration\"]\n        \n        if current_time < friend_start:\n            # Need to wait\n            wait_time = friend_start - current_time\n            current_time = friend_start\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time - wait_time)\n            })\n        \n        if current_time + meeting_duration <= friend_end:\n            # Can meet\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meeting_duration,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time += meeting_duration\n            total_meetings += 1\n        else:\n            # Can't meet this friend\n            return None, 0\n    \n    return schedule, total_meetings\n\n# Try all possible orders (limited to 5 friends due to computational complexity)\nbest_schedule = None\nbest_meetings = 0\n\n# Since trying all permutations is computationally expensive, we'll use a heuristic approach\n# Prioritize friends with tighter time windows first\nsorted_friends = sorted(range(len(friends)), key=lambda i: (\n    time_to_minutes(friends[i][\"end\"]) - time_to_minutes(friends[i][\"start\"]),\n    -friends[i][\"duration\"]\n))\n\n# Try permutations around the sorted order\nfor perm in permutations(sorted_friends[:5]):\n    order = list(perm) + [i for i in sorted_friends if i not in perm][:4]\n    schedule, meetings = evaluate_schedule(order)\n    if meetings > best_meetings:\n        best_schedule = schedule\n        best_meetings = meetings\n\nif best_schedule is None:\n    # Fallback: try meeting just one friend\n    for i in range(len(friends)):\n        schedule, meetings = evaluate_schedule([i])\n        if meetings > best_meetings:\n            best_schedule = schedule\n            best_meetings = meetings\n\n# Output the best schedule found\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_867",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:57AM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "11:23AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "11:38AM",
                    "duration": 21,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "11:59AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "2:30PM",
                    "duration": 21,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "2:51PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "4:06PM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:16PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 90,
                    "time": "1:00PM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "2:52PM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 15,
                    "time": "2:52PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 23,
                    "time": "3:30PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "3:30PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "5:37PM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 75,
                    "time": "5:37PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "7:02PM",
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "7:02PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Define travel times as a dictionary\ntravel_times = {\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n}\n\n# Define friends' constraints\nfriends = {\n    \"Jason\": {\n        \"location\": \"Richmond District\",\n        \"start\": time_to_minutes(\"1:00PM\"),\n        \"end\": time_to_minutes(\"8:45PM\"),\n        \"duration\": 90\n    },\n    \"Melissa\": {\n        \"location\": \"North Beach\",\n        \"start\": time_to_minutes(\"6:45PM\"),\n        \"end\": time_to_minutes(\"8:15PM\"),\n        \"duration\": 45\n    },\n    \"Brian\": {\n        \"location\": \"Financial District\",\n        \"start\": time_to_minutes(\"9:45AM\"),\n        \"end\": time_to_minutes(\"9:45PM\"),\n        \"duration\": 15\n    },\n    \"Elizabeth\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": time_to_minutes(\"8:45AM\"),\n        \"end\": time_to_minutes(\"9:30PM\"),\n        \"duration\": 105\n    },\n    \"Laura\": {\n        \"location\": \"Union Square\",\n        \"start\": time_to_minutes(\"2:15PM\"),\n        \"end\": time_to_minutes(\"7:30PM\"),\n        \"duration\": 75\n    }\n}\n\n# Initial state\ncurrent_time = time_to_minutes(\"9:00AM\")\ncurrent_location = \"Presidio\"\nschedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n\n# We'll try to meet all friends, prioritizing those with tighter time windows\nfriends_order = [\"Elizabeth\", \"Brian\", \"Jason\", \"Laura\", \"Melissa\"]\n\ndef can_meet_friend(current_time, current_location, friend):\n    location = friend[\"location\"]\n    start = friend[\"start\"]\n    end = friend[\"end\"]\n    duration = friend[\"duration\"]\n    \n    travel_time = travel_times.get((current_location, location), float('inf'))\n    arrival_time = current_time + travel_time\n    \n    # Earliest we can start meeting\n    meet_start = max(arrival_time, start)\n    meet_end = meet_start + duration\n    \n    if meet_end <= end:\n        return (meet_start, meet_end, travel_time)\n    else:\n        return None\n\nbest_schedule = None\nmax_meetings = 0\n\n# Try different permutations to find the best schedule\nfor order in permutations(friends_order):\n    temp_schedule = schedule.copy()\n    temp_time = current_time\n    temp_location = current_location\n    meetings = 0\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        result = can_meet_friend(temp_time, temp_location, friend)\n        if result:\n            meet_start, meet_end, travel_time = result\n            \n            # Add travel action\n            if travel_time > 0:\n                temp_schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": temp_location,\n                    \"duration\": travel_time,\n                    \"time\": minutes_to_time(temp_time),\n                    \"to\": friend[\"location\"]\n                })\n            \n            # Check if we need to wait\n            arrival_time = temp_time + travel_time\n            if arrival_time < meet_start:\n                wait_time = meet_start - arrival_time\n                temp_schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": friend[\"location\"],\n                    \"time\": minutes_to_time(arrival_time),\n                    \"duration\": wait_time\n                })\n            \n            # Add meeting action\n            temp_schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"duration\": friend[\"duration\"],\n                \"time\": minutes_to_time(meet_start),\n                \"with\": friend_name\n            })\n            \n            meetings += 1\n            temp_time = meet_end\n            temp_location = friend[\"location\"]\n    \n    if meetings > max_meetings or (meetings == max_meetings and best_schedule is None):\n        max_meetings = meetings\n        best_schedule = temp_schedule\n\n# Output the best schedule found\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
            "count": "meeting_planning_example_423",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:57AM",
                    "duration": 13,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "11:10AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "11:40AM",
                    "duration": 8,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "11:48AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "1:48PM",
                    "duration": 19,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "2:07PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "4:07PM",
                    "duration": 9,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "4:16PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "6:01PM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "6:08PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 30,
                    "time": "9:30AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 19,
                    "time": "10:19AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "10:19AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "11:05AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "11:15AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "1:24PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "1:24PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "3:25PM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "3:25PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "5:30PM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 105,
                    "time": "5:30PM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "7:31PM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "7:31PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Define travel times as a dictionary\ntravel_times = {\n    \"Presidio\": {\n        \"Marina District\": 11,\n        \"The Castro\": 21,\n        \"Fisherman's Wharf\": 19,\n        \"Bayview\": 31,\n        \"Pacific Heights\": 11,\n        \"Mission District\": 26,\n        \"Alamo Square\": 19,\n        \"Golden Gate Park\": 12\n    },\n    \"Marina District\": {\n        \"Presidio\": 10,\n        \"The Castro\": 22,\n        \"Fisherman's Wharf\": 10,\n        \"Bayview\": 27,\n        \"Pacific Heights\": 7,\n        \"Mission District\": 20,\n        \"Alamo Square\": 15,\n        \"Golden Gate Park\": 18\n    },\n    \"The Castro\": {\n        \"Presidio\": 20,\n        \"Marina District\": 21,\n        \"Fisherman's Wharf\": 24,\n        \"Bayview\": 19,\n        \"Pacific Heights\": 16,\n        \"Mission District\": 7,\n        \"Alamo Square\": 8,\n        \"Golden Gate Park\": 11\n    },\n    \"Fisherman's Wharf\": {\n        \"Presidio\": 17,\n        \"Marina District\": 9,\n        \"The Castro\": 27,\n        \"Bayview\": 26,\n        \"Pacific Heights\": 12,\n        \"Mission District\": 22,\n        \"Alamo Square\": 21,\n        \"Golden Gate Park\": 25\n    },\n    \"Bayview\": {\n        \"Presidio\": 32,\n        \"Marina District\": 27,\n        \"The Castro\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Pacific Heights\": 23,\n        \"Mission District\": 13,\n        \"Alamo Square\": 16,\n        \"Golden Gate Park\": 22\n    },\n    \"Pacific Heights\": {\n        \"Presidio\": 11,\n        \"Marina District\": 6,\n        \"The Castro\": 16,\n        \"Fisherman's Wharf\": 13,\n        \"Bayview\": 22,\n        \"Mission District\": 15,\n        \"Alamo Square\": 10,\n        \"Golden Gate Park\": 15\n    },\n    \"Mission District\": {\n        \"Presidio\": 25,\n        \"Marina District\": 19,\n        \"The Castro\": 7,\n        \"Fisherman's Wharf\": 22,\n        \"Bayview\": 14,\n        \"Pacific Heights\": 16,\n        \"Alamo Square\": 11,\n        \"Golden Gate Park\": 17\n    },\n    \"Alamo Square\": {\n        \"Presidio\": 17,\n        \"Marina District\": 15,\n        \"The Castro\": 8,\n        \"Fisherman's Wharf\": 19,\n        \"Bayview\": 16,\n        \"Pacific Heights\": 10,\n        \"Mission District\": 10,\n        \"Golden Gate Park\": 9\n    },\n    \"Golden Gate Park\": {\n        \"Presidio\": 11,\n        \"Marina District\": 16,\n        \"The Castro\": 13,\n        \"Fisherman's Wharf\": 24,\n        \"Bayview\": 23,\n        \"Pacific Heights\": 16,\n        \"Mission District\": 17,\n        \"Alamo Square\": 9\n    }\n}\n\n# Define friends' constraints\nfriends = [\n    {\"name\": \"Amanda\", \"location\": \"Marina District\", \"start\": \"2:45PM\", \"end\": \"7:30PM\", \"min_duration\": 105},\n    {\"name\": \"Melissa\", \"location\": \"The Castro\", \"start\": \"9:30AM\", \"end\": \"5:00PM\", \"min_duration\": 30},\n    {\"name\": \"Jeffrey\", \"location\": \"Fisherman's Wharf\", \"start\": \"12:45PM\", \"end\": \"6:45PM\", \"min_duration\": 120},\n    {\"name\": \"Matthew\", \"location\": \"Bayview\", \"start\": \"10:15AM\", \"end\": \"1:15PM\", \"min_duration\": 30},\n    {\"name\": \"Nancy\", \"location\": \"Pacific Heights\", \"start\": \"5:00PM\", \"end\": \"9:30PM\", \"min_duration\": 105},\n    {\"name\": \"Karen\", \"location\": \"Mission District\", \"start\": \"5:30PM\", \"end\": \"8:30PM\", \"min_duration\": 105},\n    {\"name\": \"Robert\", \"location\": \"Alamo Square\", \"start\": \"11:15AM\", \"end\": \"5:30PM\", \"min_duration\": 120},\n    {\"name\": \"Joseph\", \"location\": \"Golden Gate Park\", \"start\": \"8:30AM\", \"end\": \"9:15PM\", \"min_duration\": 105}\n]\n\ndef calculate_schedule():\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Presidio\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    remaining_friends = friends.copy()\n    met_friends = []\n\n    # Sort friends by earliest end time (to try to meet as many as possible)\n    remaining_friends.sort(key=lambda x: time_to_minutes(x[\"end\"]))\n\n    while remaining_friends:\n        best_friend = None\n        best_start_time = None\n        best_travel_time = None\n        best_end_time = None\n\n        for friend in remaining_friends:\n            travel_time = travel_times[current_location][friend[\"location\"]]\n            earliest_arrival = current_time + travel_time\n            friend_start = time_to_minutes(friend[\"start\"])\n            friend_end = time_to_minutes(friend[\"end\"])\n\n            # Calculate possible meeting start time\n            meeting_start = max(earliest_arrival, friend_start)\n            meeting_end = meeting_start + friend[\"min_duration\"]\n\n            if meeting_end <= friend_end:\n                if best_friend is None or meeting_start < best_start_time:\n                    best_friend = friend\n                    best_start_time = meeting_start\n                    best_travel_time = travel_time\n                    best_end_time = meeting_end\n\n        if best_friend is None:\n            break\n\n        # Add travel action\n        if current_location != best_friend[\"location\"]:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": best_travel_time,\n                \"time\": minutes_to_time(current_time),\n                \"to\": best_friend[\"location\"]\n            })\n            current_time += best_travel_time\n            current_location = best_friend[\"location\"]\n\n        # Check if we need to wait\n        if current_time < best_start_time:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time = best_start_time\n\n        # Add meet action\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": best_friend[\"min_duration\"],\n            \"time\": minutes_to_time(current_time),\n            \"with\": best_friend[\"name\"]\n        })\n        current_time += best_friend[\"min_duration\"]\n        met_friends.append(best_friend)\n        remaining_friends.remove(best_friend)\n\n    return schedule\n\nschedule = calculate_schedule()\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_715",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:07AM",
                    "duration": 75.0
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:22AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:32AM",
                    "duration": 15.0
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "10:47AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "8:00PM",
                    "duration": -525.0
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "11:15AM",
                    "duration": 7,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:22AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "7:15PM",
                    "duration": -398.0
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "12:37PM",
                    "duration": 12,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:49PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "2:45PM",
                    "duration": -71.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 75,
                    "time": "9:07AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "10:32AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "10:32AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 10,
                    "time": "10:57AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "2:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "2:45PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "3:37PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "8:00PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 7,
                    "time": "8:22PM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 75,
                    "time": "8:22PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef time_diff_minutes(start, end):\n    return (end - start).total_seconds() / 60\n\ndef add_minutes(time, minutes):\n    return time + timedelta(minutes=minutes)\n\ndef find_optimal_schedule():\n    # Travel times dictionary: {from: {to: minutes}}\n    travel_times = {\n        'Haight-Ashbury': {\n            'Russian Hill': 17,\n            'Fisherman\\'s Wharf': 23,\n            'Nob Hill': 15,\n            'Golden Gate Park': 7,\n            'Alamo Square': 5,\n            'Pacific Heights': 12\n        },\n        'Russian Hill': {\n            'Haight-Ashbury': 17,\n            'Fisherman\\'s Wharf': 7,\n            'Nob Hill': 5,\n            'Golden Gate Park': 21,\n            'Alamo Square': 15,\n            'Pacific Heights': 7\n        },\n        'Fisherman\\'s Wharf': {\n            'Haight-Ashbury': 22,\n            'Russian Hill': 7,\n            'Nob Hill': 11,\n            'Golden Gate Park': 25,\n            'Alamo Square': 20,\n            'Pacific Heights': 12\n        },\n        'Nob Hill': {\n            'Haight-Ashbury': 13,\n            'Russian Hill': 5,\n            'Fisherman\\'s Wharf': 11,\n            'Golden Gate Park': 17,\n            'Alamo Square': 11,\n            'Pacific Heights': 8\n        },\n        'Golden Gate Park': {\n            'Haight-Ashbury': 7,\n            'Russian Hill': 19,\n            'Fisherman\\'s Wharf': 24,\n            'Nob Hill': 20,\n            'Alamo Square': 10,\n            'Pacific Heights': 16\n        },\n        'Alamo Square': {\n            'Haight-Ashbury': 5,\n            'Russian Hill': 13,\n            'Fisherman\\'s Wharf': 19,\n            'Nob Hill': 11,\n            'Golden Gate Park': 9,\n            'Pacific Heights': 10\n        },\n        'Pacific Heights': {\n            'Haight-Ashbury': 11,\n            'Russian Hill': 7,\n            'Fisherman\\'s Wharf': 13,\n            'Nob Hill': 8,\n            'Golden Gate Park': 15,\n            'Alamo Square': 10\n        }\n    }\n\n    # Friend constraints\n    friends = {\n        'Stephanie': {\n            'location': 'Russian Hill',\n            'start': parse_time('8:00PM'),\n            'end': parse_time('8:45PM'),\n            'min_duration': 15\n        },\n        'Kevin': {\n            'location': 'Fisherman\\'s Wharf',\n            'start': parse_time('7:15PM'),\n            'end': parse_time('9:45PM'),\n            'min_duration': 75\n        },\n        'Robert': {\n            'location': 'Nob Hill',\n            'start': parse_time('7:45AM'),\n            'end': parse_time('10:30AM'),\n            'min_duration': 90\n        },\n        'Steven': {\n            'location': 'Golden Gate Park',\n            'start': parse_time('8:30AM'),\n            'end': parse_time('5:00PM'),\n            'min_duration': 75\n        },\n        'Anthony': {\n            'location': 'Alamo Square',\n            'start': parse_time('7:45AM'),\n            'end': parse_time('7:45PM'),\n            'min_duration': 15\n        },\n        'Sandra': {\n            'location': 'Pacific Heights',\n            'start': parse_time('2:45PM'),\n            'end': parse_time('9:45PM'),\n            'min_duration': 45\n        }\n    }\n\n    current_time = parse_time('9:00AM')\n    current_location = 'Haight-Ashbury'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n    # Helper function to check if a meeting is possible\n    def can_meet(friend, arrival_time):\n        friend_info = friends[friend]\n        start = friend_info['start']\n        end = friend_info['end']\n        min_duration = friend_info['min_duration']\n        latest_start = add_minutes(end, -min_duration)\n        if arrival_time <= latest_start and add_minutes(arrival_time, min_duration) <= end:\n            return max(arrival_time, start), min(add_minutes(arrival_time, min_duration), end)\n        return None, None\n\n    # Prioritize friends with earliest end times and longest durations\n    friends_order = sorted(friends.keys(), key=lambda x: (friends[x]['end'], -friends[x]['min_duration']))\n\n    for friend in friends_order:\n        friend_info = friends[friend]\n        destination = friend_info['location']\n        if current_location == destination:\n            travel_duration = 0\n        else:\n            travel_duration = travel_times[current_location][destination]\n        \n        arrival_time = add_minutes(current_time, travel_duration)\n        meet_start, meet_end = can_meet(friend, arrival_time)\n        \n        if meet_start and meet_end:\n            if travel_duration > 0:\n                schedule.append({\n                    'action': 'travel',\n                    'location': current_location,\n                    'duration': travel_duration,\n                    'time': format_time(current_time),\n                    'to': destination\n                })\n            \n            if meet_start > arrival_time:\n                wait_duration = time_diff_minutes(arrival_time, meet_start)\n                schedule.append({\n                    'action': 'wait',\n                    'location': destination,\n                    'time': format_time(arrival_time)\n                })\n            \n            meet_duration = time_diff_minutes(meet_start, meet_end)\n            schedule.append({\n                'action': 'meet',\n                'location': destination,\n                'duration': meet_duration,\n                'time': format_time(meet_start)\n            })\n            \n            current_time = meet_end\n            current_location = destination\n\n    return {'schedule': schedule}\n\nif __name__ == '__main__':\n    schedule = find_optimal_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_577",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "10:00AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 75,
                    "time": "10:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "11:24AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:45AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 120,
                    "time": "11:45AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "2:00PM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "2:30PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 30,
                    "time": "2:30PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 22,
                    "time": "3:22PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "3:22PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 11,
                    "time": "5:18PM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 30,
                    "time": "5:18PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 24,
                    "time": "6:12PM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 105,
                    "time": "6:12PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 24,
                    "time": "8:21PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 45,
                    "time": "8:21PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 14,
                    "time": "9:20PM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 60,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since 9:00AM (540 minutes)\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes back to time string\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    \"Marina District\": {\n        \"Mission District\": 20,\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 10,\n        \"Union Square\": 16,\n        \"Sunset District\": 19,\n        \"Financial District\": 17,\n        \"Haight-Ashbury\": 16,\n        \"Russian Hill\": 8\n    },\n    \"Mission District\": {\n        \"Marina District\": 19,\n        \"Fisherman's Wharf\": 22,\n        \"Presidio\": 25,\n        \"Union Square\": 15,\n        \"Sunset District\": 24,\n        \"Financial District\": 15,\n        \"Haight-Ashbury\": 12,\n        \"Russian Hill\": 15\n    },\n    \"Fisherman's Wharf\": {\n        \"Marina District\": 9,\n        \"Mission District\": 22,\n        \"Presidio\": 17,\n        \"Union Square\": 13,\n        \"Sunset District\": 27,\n        \"Financial District\": 11,\n        \"Haight-Ashbury\": 22,\n        \"Russian Hill\": 7\n    },\n    \"Presidio\": {\n        \"Marina District\": 11,\n        \"Mission District\": 26,\n        \"Fisherman's Wharf\": 19,\n        \"Union Square\": 22,\n        \"Sunset District\": 15,\n        \"Financial District\": 23,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 14\n    },\n    \"Union Square\": {\n        \"Marina District\": 18,\n        \"Mission District\": 14,\n        \"Fisherman's Wharf\": 15,\n        \"Presidio\": 24,\n        \"Sunset District\": 27,\n        \"Financial District\": 9,\n        \"Haight-Ashbury\": 18,\n        \"Russian Hill\": 13\n    },\n    \"Sunset District\": {\n        \"Marina District\": 21,\n        \"Mission District\": 25,\n        \"Fisherman's Wharf\": 29,\n        \"Presidio\": 16,\n        \"Union Square\": 30,\n        \"Financial District\": 30,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 24\n    },\n    \"Financial District\": {\n        \"Marina District\": 15,\n        \"Marina District\": 15,\n        \"Mission District\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 22,\n        \"Union Square\": 9,\n        \"Sunset District\": 30,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 11\n    },\n    \"Haight-Ashbury\": {\n        \"Marina District\": 17,\n        \"Mission District\": 11,\n        \"Fisherman's Wharf\": 23,\n        \"Presidio\": 15,\n        \"Union Square\": 19,\n        \"Sunset District\": 15,\n        \"Financial District\": 21,\n        \"Russian Hill\": 17\n    },\n    \"Russian Hill\": {\n        \"Marina District\": 7,\n        \"Mission District\": 16,\n        \"Fisherman's Wharf\": 7,\n        \"Presidio\": 14,\n        \"Union Square\": 10,\n        \"Sunset District\": 23,\n        \"Financial District\": 11,\n        \"Haight-Ashbury\": 17\n    }\n}\n\n# Friend data: name, location, start, end, min_duration\nfriends = [\n    (\"Karen\", \"Mission District\", \"2:15PM\", \"10:00PM\", 30),\n    (\"Richard\", \"Fisherman's Wharf\", \"2:30PM\", \"5:30PM\", 30),\n    (\"Robert\", \"Presidio\", \"9:45PM\", \"10:45PM\", 60),\n    (\"Joseph\", \"Union Square\", \"11:45AM\", \"2:45PM\", 120),\n    (\"Helen\", \"Sunset District\", \"2:45PM\", \"8:45PM\", 105),\n    (\"Elizabeth\", \"Financial District\", \"10:00AM\", \"12:45PM\", 75),\n    (\"Kimberly\", \"Haight-Ashbury\", \"2:15PM\", \"5:30PM\", 105),\n    (\"Ashley\", \"Russian Hill\", \"11:30AM\", \"9:30PM\", 45)\n]\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times[from_loc][to_loc]\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_loc = \"Marina District\"\n    schedule = [{\"action\": \"start\", \"location\": current_loc, \"time\": minutes_to_time(current_time)}]\n    total_meetings = 0\n    \n    for friend in order:\n        name, loc, start_str, end_str, min_duration = friend\n        start = time_to_minutes(start_str)\n        end = time_to_minutes(end_str)\n        \n        # Travel to friend's location\n        if current_loc != loc:\n            travel_time = get_travel_time(current_loc, loc)\n            arrival_time = current_time + travel_time\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_loc,\n                \"duration\": travel_time,\n                \"time\": minutes_to_time(current_time),\n                \"to\": loc\n            })\n            current_time = arrival_time\n            current_loc = loc\n        \n        # Check if we arrived too early\n        if current_time < start:\n            wait_time = start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": loc,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_time\n            })\n            current_time = start\n        \n        # Check if we can meet the duration requirement\n        if current_time + min_duration <= end:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": loc,\n                \"duration\": min_duration,\n                \"time\": minutes_to_time(current_time),\n                \"with\": name\n            })\n            current_time += min_duration\n            total_meetings += 1\n        else:\n            # Can't meet this friend with current order\n            return None, 0\n    \n    return schedule, total_meetings\n\n# Try different orders to maximize number of meetings\nbest_schedule = None\nbest_count = 0\n\n# We'll prioritize friends with tighter time windows first\npriority_order = [\n    friends[3],  # Joseph (Union Square) - earliest and long duration\n    friends[5],  # Elizabeth (Financial District) - early\n    friends[7],  # Ashley (Russian Hill) - long window\n    friends[0],  # Karen (Mission District)\n    friends[6],  # Kimberly (Haight-Ashbury)\n    friends[1],  # Richard (Fisherman's Wharf)\n    friends[4],  # Helen (Sunset District)\n    friends[2],  # Robert (Presidio) - latest\n]\n\n# Generate schedule with priority order\nschedule, count = generate_schedule(priority_order)\nif count > best_count:\n    best_schedule = schedule\n    best_count = count\n\n# If priority order doesn't work, try all permutations of some subsets\nif best_count < len(friends):\n    for perm in permutations(friends[:4]):\n        test_order = list(perm) + friends[4:]\n        schedule, count = generate_schedule(test_order)\n        if count > best_count:\n            best_schedule = schedule\n            best_count = count\n            if best_count == len(friends):\n                break\n\n# Prepare final output\noutput = {\"schedule\": best_schedule} if best_schedule else {\"error\": \"No valid schedule found\"}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_728",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "10:15AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "11:45AM",
                    "duration": 21,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "12:06PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "2:06PM",
                    "duration": 16,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "2:22PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "3:52PM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "3:59PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "4:14PM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "4:34PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "5:34PM",
                    "duration": 21,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "5:55PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "6:10PM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "6:32PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 90,
                    "time": "10:15AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 21,
                    "time": "12:06PM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "12:06PM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 16,
                    "time": "2:22PM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 90,
                    "time": "2:22PM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "3:59PM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "3:59PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "4:34PM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 60,
                    "time": "4:34PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 21,
                    "time": "5:55PM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "5:55PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "6:32PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Locations\nlocations = [\n    \"Presidio\",\n    \"Fisherman's Wharf\",\n    \"Alamo Square\",\n    \"Financial District\",\n    \"Union Square\",\n    \"Sunset District\",\n    \"Embarcadero\",\n    \"Golden Gate Park\",\n    \"Chinatown\",\n    \"Richmond District\"\n]\n\n# Travel times in minutes (from_location, to_location) -> minutes\ntravel_times = {\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Alamo Square\"): 19,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 21,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Union Square\"): 13,\n    (\"Fisherman's Wharf\", \"Sunset District\"): 27,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Alamo Square\", \"Presidio\"): 17,\n    (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"Embarcadero\"): 16,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Chinatown\"): 15,\n    (\"Alamo Square\", \"Richmond District\"): 11,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Sunset District\"): 30,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Chinatown\"): 5,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Fisherman's Wharf\"): 15,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Union Square\", \"Embarcadero\"): 11,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Fisherman's Wharf\"): 29,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Financial District\"): 30,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Embarcadero\"): 30,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Union Square\"): 10,\n    (\"Embarcadero\", \"Sunset District\"): 30,\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Embarcadero\", \"Chinatown\"): 7,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Alamo Square\"): 9,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Financial District\"): 5,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Chinatown\", \"Embarcadero\"): 5,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Chinatown\", \"Richmond District\"): 20,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Alamo Square\"): 13,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Chinatown\"): 20\n}\n\n# Friend constraints\nfriends = {\n    \"Jeffrey\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"start\": \"10:15AM\",\n        \"end\": \"1:00PM\",\n        \"duration\": 90\n    },\n    \"Ronald\": {\n        \"location\": \"Alamo Square\",\n        \"start\": \"7:45AM\",\n        \"end\": \"2:45PM\",\n        \"duration\": 120\n    },\n    \"Jason\": {\n        \"location\": \"Financial District\",\n        \"start\": \"10:45AM\",\n        \"end\": \"4:00PM\",\n        \"duration\": 105\n    },\n    \"Melissa\": {\n        \"location\": \"Union Square\",\n        \"start\": \"5:45PM\",\n        \"end\": \"6:15PM\",\n        \"duration\": 15\n    },\n    \"Elizabeth\": {\n        \"location\": \"Sunset District\",\n        \"start\": \"2:45PM\",\n        \"end\": \"5:30PM\",\n        \"duration\": 105\n    },\n    \"Margaret\": {\n        \"location\": \"Embarcadero\",\n        \"start\": \"1:15PM\",\n        \"end\": \"7:00PM\",\n        \"duration\": 90\n    },\n    \"George\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": \"7:00PM\",\n        \"end\": \"10:00PM\",\n        \"duration\": 75\n    },\n    \"Richard\": {\n        \"location\": \"Chinatown\",\n        \"start\": \"9:30AM\",\n        \"end\": \"9:00PM\",\n        \"duration\": 15\n    },\n    \"Laura\": {\n        \"location\": \"Richmond District\",\n        \"start\": \"9:45AM\",\n        \"end\": \"6:00PM\",\n        \"duration\": 60\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n        time_part = time_str.replace(\"AM\", \"\")\n    else:\n        period = \"PM\"\n        time_part = time_str.replace(\"PM\", \"\")\n    \n    hours, minutes = map(int, time_part.split(\":\"))\n    \n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    \n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    \n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    \n    return f\"{hours}:{mins:02d}{period}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get((from_loc, to_loc), float('inf'))\n\ndef find_best_schedule():\n    best_schedule = None\n    max_meetings = -1\n    min_total_time = float('inf')\n    \n    # Try different orders of meeting friends\n    for friend_order in permutations(friends.keys()):\n        current_location = \"Presidio\"\n        current_time = time_to_minutes(\"9:00AM\")\n        schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n        meetings = 0\n        \n        for friend in friend_order:\n            friend_data = friends[friend]\n            loc = friend_data[\"location\"]\n            start_time = time_to_minutes(friend_data[\"start\"])\n            end_time = time_to_minutes(friend_data[\"end\"])\n            duration = friend_data[\"duration\"]\n            \n            # Travel to friend's location\n            travel_time = get_travel_time(current_location, loc)\n            arrival_time = current_time + travel_time\n            \n            # Can we meet this friend?\n            meeting_start = max(arrival_time, start_time)\n            meeting_end = meeting_start + duration\n            \n            if meeting_end <= end_time:\n                # Add travel action\n                if travel_time > 0:\n                    schedule.append({\n                        \"action\": \"travel\",\n                        \"location\": current_location,\n                        \"duration\": travel_time,\n                        \"time\": minutes_to_time(current_time),\n                        \"to\": loc\n                    })\n                \n                # Add wait time if needed\n                if arrival_time < start_time:\n                    wait_time = start_time - arrival_time\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": loc,\n                        \"time\": minutes_to_time(arrival_time),\n                        \"duration\": wait_time\n                    })\n                \n                # Add meeting\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": loc,\n                    \"duration\": duration,\n                    \"time\": minutes_to_time(meeting_start)\n                })\n                \n                meetings += 1\n                current_location = loc\n                current_time = meeting_end\n            else:\n                # Can't meet this friend in this order\n                break\n        \n        # Check if this schedule is better\n        if meetings > max_meetings or (meetings == max_meetings and current_time < min_total_time):\n            max_meetings = meetings\n            min_total_time = current_time\n            best_schedule = schedule\n    \n    return best_schedule\n\nbest_schedule = find_best_schedule()\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
            "count": "meeting_planning_example_831",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "9:13AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "11:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 105,
                    "time": "11:13AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "1:03PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 90,
                    "time": "1:03PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 17,
                    "time": "2:50PM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 45,
                    "time": "2:50PM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 27,
                    "time": "4:02PM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "4:02PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "5:55PM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 120,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    \"Union Square\": {\n        \"Russian Hill\": 13,\n        \"Alamo Square\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Marina District\": 18,\n        \"Bayview\": 15,\n        \"Chinatown\": 7,\n        \"Presidio\": 24,\n        \"Sunset District\": 27\n    },\n    \"Russian Hill\": {\n        \"Union Square\": 10,\n        \"Alamo Square\": 15,\n        \"Haight-Ashbury\": 17,\n        \"Marina District\": 7,\n        \"Bayview\": 23,\n        \"Chinatown\": 9,\n        \"Presidio\": 14,\n        \"Sunset District\": 23\n    },\n    \"Alamo Square\": {\n        \"Union Square\": 14,\n        \"Russian Hill\": 13,\n        \"Haight-Ashbury\": 5,\n        \"Marina District\": 15,\n        \"Bayview\": 16,\n        \"Chinatown\": 15,\n        \"Presidio\": 17,\n        \"Sunset District\": 16\n    },\n    \"Haight-Ashbury\": {\n        \"Union Square\": 19,\n        \"Russian Hill\": 17,\n        \"Alamo Square\": 5,\n        \"Marina District\": 17,\n        \"Bayview\": 18,\n        \"Chinatown\": 19,\n        \"Presidio\": 15,\n        \"Sunset District\": 15\n    },\n    \"Marina District\": {\n        \"Union Square\": 16,\n        \"Russian Hill\": 8,\n        \"Alamo Square\": 15,\n        \"Haight-Ashbury\": 16,\n        \"Bayview\": 27,\n        \"Chinatown\": 15,\n        \"Presidio\": 10,\n        \"Sunset District\": 19\n    },\n    \"Bayview\": {\n        \"Union Square\": 18,\n        \"Russian Hill\": 23,\n        \"Alamo Square\": 16,\n        \"Haight-Ashbury\": 19,\n        \"Marina District\": 27,\n        \"Chinatown\": 19,\n        \"Presidio\": 32,\n        \"Sunset District\": 23\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Russian Hill\": 7,\n        \"Alamo Square\": 17,\n        \"Haight-Ashbury\": 19,\n        \"Marina District\": 12,\n        \"Bayview\": 20,\n        \"Presidio\": 19,\n        \"Sunset District\": 29\n    },\n    \"Presidio\": {\n        \"Union Square\": 22,\n        \"Russian Hill\": 14,\n        \"Alamo Square\": 19,\n        \"Haight-Ashbury\": 15,\n        \"Marina District\": 11,\n        \"Bayview\": 31,\n        \"Chinatown\": 21,\n        \"Sunset District\": 16\n    },\n    \"Sunset District\": {\n        \"Union Square\": 30,\n        \"Russian Hill\": 24,\n        \"Alamo Square\": 17,\n        \"Haight-Ashbury\": 15,\n        \"Marina District\": 21,\n        \"Bayview\": 22,\n        \"Chinatown\": 30,\n        \"Presidio\": 16\n    }\n}\n\n# Friend availability\nfriends = {\n    \"Betty\": {\n        \"location\": \"Russian Hill\",\n        \"start\": \"7:00AM\",\n        \"end\": \"4:45PM\",\n        \"duration\": 105\n    },\n    \"Melissa\": {\n        \"location\": \"Alamo Square\",\n        \"start\": \"9:30AM\",\n        \"end\": \"5:15PM\",\n        \"duration\": 105\n    },\n    \"Joshua\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": \"12:15PM\",\n        \"end\": \"7:00PM\",\n        \"duration\": 90\n    },\n    \"Jeffrey\": {\n        \"location\": \"Marina District\",\n        \"start\": \"12:15PM\",\n        \"end\": \"6:00PM\",\n        \"duration\": 45\n    },\n    \"James\": {\n        \"location\": \"Bayview\",\n        \"start\": \"7:30AM\",\n        \"end\": \"8:00PM\",\n        \"duration\": 90\n    },\n    \"Anthony\": {\n        \"location\": \"Chinatown\",\n        \"start\": \"11:45AM\",\n        \"end\": \"1:30PM\",\n        \"duration\": 75\n    },\n    \"Timothy\": {\n        \"location\": \"Presidio\",\n        \"start\": \"12:30PM\",\n        \"end\": \"2:45PM\",\n        \"duration\": 90\n    },\n    \"Emily\": {\n        \"location\": \"Sunset District\",\n        \"start\": \"7:30PM\",\n        \"end\": \"9:30PM\",\n        \"duration\": 120\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n        time_part = time_str.replace(\"AM\", \"\").strip()\n    else:\n        period = \"PM\"\n        time_part = time_str.replace(\"PM\", \"\").strip()\n    \n    hours, minutes = map(int, time_part.split(':'))\n    \n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    \n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    \n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    \n    return f\"{hours}:{mins:02d}{period}\"\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Union Square\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    met_friends = set()\n    \n    for friend in order:\n        if friend in met_friends:\n            continue\n            \n        friend_data = friends[friend]\n        destination = friend_data[\"location\"]\n        travel_time = travel_times[current_location].get(destination, float('inf'))\n        \n        if travel_time == float('inf'):\n            return None, set()\n        \n        arrival_time = current_time + travel_time\n        start_window = time_to_minutes(friend_data[\"start\"])\n        end_window = time_to_minutes(friend_data[\"end\"])\n        required_duration = friend_data[\"duration\"]\n        \n        # Can't meet if arrival is after end window\n        if arrival_time >= end_window:\n            return None, set()\n        \n        # Calculate meeting start time\n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + required_duration\n        \n        # Check if meeting fits in window\n        if meeting_end > end_window:\n            return None, set()\n        \n        # Add travel to schedule\n        if travel_time > 0:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": minutes_to_time(current_time),\n                \"to\": destination\n            })\n        \n        # Add wait if needed\n        if arrival_time < start_window:\n            wait_time = start_window - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": destination,\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_time\n            })\n        \n        # Add meeting to schedule\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": required_duration,\n            \"time\": minutes_to_time(meeting_start),\n            \"with\": friend\n        })\n        \n        current_time = meeting_end\n        current_location = destination\n        met_friends.add(friend)\n    \n    return schedule, met_friends\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_met = set()\n    \n    # Try different orders of meeting friends\n    for order in permutations(friends.keys()):\n        schedule, met = calculate_schedule(order)\n        if schedule is not None and len(met) > len(best_met):\n            best_schedule = schedule\n            best_met = met\n        elif schedule is not None and len(met) == len(best_met) and schedule[-1][\"time\"] < best_schedule[-1][\"time\"]:\n            best_schedule = schedule\n            best_met = met\n    \n    return best_schedule\n\ndef main():\n    optimal_schedule = find_optimal_schedule()\n    \n    if optimal_schedule is None:\n        print(json.dumps({\"error\": \"No valid schedule found\"}))\n    else:\n        # Convert to required output format\n        output = {\"schedule\": []}\n        for item in optimal_schedule:\n            new_item = {k: v for k, v in item.items()}\n            if \"with\" in new_item:\n                del new_item[\"with\"]\n            output[\"schedule\"].append(new_item)\n        \n        print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_789",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "11:45AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "1:30PM",
                    "duration": 14,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:44PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "4:45PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "5:45PM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "5:52PM",
                    "duration": 68
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "11:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 105,
                    "time": "11:45AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 14,
                    "time": "1:44PM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 60,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_time(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\ndef calculate_schedule():\n    # Initialize start time and location\n    current_time = parse_time('9:00AM')\n    current_location = 'The Castro'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n\n    # Define travel times in a dictionary for easy access\n    travel_times = {\n        ('The Castro', 'Alamo Square'): 8,\n        ('The Castro', 'Union Square'): 19,\n        ('The Castro', 'Chinatown'): 20,\n        ('Alamo Square', 'The Castro'): 8,\n        ('Alamo Square', 'Union Square'): 14,\n        ('Alamo Square', 'Chinatown'): 16,\n        ('Union Square', 'The Castro'): 19,\n        ('Union Square', 'Alamo Square'): 15,\n        ('Union Square', 'Chinatown'): 7,\n        ('Chinatown', 'The Castro'): 22,\n        ('Chinatown', 'Alamo Square'): 17,\n        ('Chinatown', 'Union Square'): 7\n    }\n\n    # Friend constraints\n    emily_start = parse_time('11:45AM')\n    emily_end = parse_time('3:15PM')\n    emily_min = 105\n    barbara_start = parse_time('4:45PM')\n    barbara_end = parse_time('6:15PM')\n    barbara_min = 60\n    william_start = parse_time('5:15PM')\n    william_end = parse_time('7:00PM')\n    william_min = 105\n\n    # Plan to meet Emily first\n    # Travel to Alamo Square\n    travel_duration = travel_times[(current_location, 'Alamo Square')]\n    arrival_time = add_time(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": \"Alamo Square\"\n    })\n    current_time = arrival_time\n    current_location = 'Alamo Square'\n\n    # Check if we need to wait for Emily\n    if current_time < emily_start:\n        wait_duration = (emily_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = emily_start\n\n    # Meet Emily\n    meet_end_time = add_time(current_time, emily_min)\n    if meet_end_time > emily_end:\n        # Adjust meeting time if needed\n        emily_min = (emily_end - current_time).seconds // 60\n        meet_end_time = emily_end\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": emily_min,\n        \"time\": format_time(current_time)\n    })\n    current_time = meet_end_time\n\n    # Next, plan to meet Barbara\n    # Travel to Union Square\n    travel_duration = travel_times[(current_location, 'Union Square')]\n    arrival_time = add_time(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": \"Union Square\"\n    })\n    current_time = arrival_time\n    current_location = 'Union Square'\n\n    # Check if we need to wait for Barbara\n    if current_time < barbara_start:\n        wait_duration = (barbara_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = barbara_start\n\n    # Meet Barbara\n    meet_end_time = add_time(current_time, barbara_min)\n    if meet_end_time > barbara_end:\n        # Adjust meeting time if needed\n        barbara_min = (barbara_end - current_time).seconds // 60\n        meet_end_time = barbara_end\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": barbara_min,\n        \"time\": format_time(current_time)\n    })\n    current_time = meet_end_time\n\n    # Finally, plan to meet William\n    # Travel to Chinatown\n    travel_duration = travel_times[(current_location, 'Chinatown')]\n    arrival_time = add_time(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": \"Chinatown\"\n    })\n    current_time = arrival_time\n    current_location = 'Chinatown'\n\n    # Check if we need to wait for William\n    if current_time < william_start:\n        wait_duration = (william_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = william_start\n\n    # Meet William\n    meet_end_time = add_time(current_time, william_min)\n    if meet_end_time > william_end:\n        # Adjust meeting time if needed\n        william_min = (william_end - current_time).seconds // 60\n        meet_end_time = william_end\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": william_min,\n        \"time\": format_time(current_time)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_219",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "11:30AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "11:45AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:58AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "2:30PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "3:00PM",
                    "duration": 5,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:05PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:45PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "4:15PM",
                    "duration": 22,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "4:37PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "7:45PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "11:30AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "11:58AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "2:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "2:30PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 5,
                    "time": "3:05PM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "3:45PM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 22,
                    "time": "4:37PM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes):\n    total_minutes = time_to_minutes(time_str) + minutes\n    return minutes_to_time(total_minutes)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        \"Fisherman's Wharf\": {\n            \"The Castro\": 26,\n            \"Golden Gate Park\": 25,\n            \"Embarcadero\": 8,\n            \"Russian Hill\": 7,\n            \"Nob Hill\": 11,\n            \"Alamo Square\": 20,\n            \"North Beach\": 6\n        },\n        \"The Castro\": {\n            \"Fisherman's Wharf\": 24,\n            \"Golden Gate Park\": 11,\n            \"Embarcadero\": 22,\n            \"Russian Hill\": 18,\n            \"Nob Hill\": 16,\n            \"Alamo Square\": 8,\n            \"North Beach\": 20\n        },\n        \"Golden Gate Park\": {\n            \"Fisherman's Wharf\": 24,\n            \"The Castro\": 13,\n            \"Embarcadero\": 25,\n            \"Russian Hill\": 19,\n            \"Nob Hill\": 20,\n            \"Alamo Square\": 10,\n            \"North Beach\": 24\n        },\n        \"Embarcadero\": {\n            \"Fisherman's Wharf\": 6,\n            \"The Castro\": 25,\n            \"Golden Gate Park\": 25,\n            \"Russian Hill\": 8,\n            \"Nob Hill\": 10,\n            \"Alamo Square\": 19,\n            \"North Beach\": 5\n        },\n        \"Russian Hill\": {\n            \"Fisherman's Wharf\": 7,\n            \"The Castro\": 21,\n            \"Golden Gate Park\": 21,\n            \"Embarcadero\": 8,\n            \"Nob Hill\": 5,\n            \"Alamo Square\": 15,\n            \"North Beach\": 5\n        },\n        \"Nob Hill\": {\n            \"Fisherman's Wharf\": 11,\n            \"The Castro\": 17,\n            \"Golden Gate Park\": 17,\n            \"Embarcadero\": 9,\n            \"Russian Hill\": 5,\n            \"Alamo Square\": 11,\n            \"North Beach\": 8\n        },\n        \"Alamo Square\": {\n            \"Fisherman's Wharf\": 19,\n            \"The Castro\": 8,\n            \"Golden Gate Park\": 9,\n            \"Embarcadero\": 17,\n            \"Russian Hill\": 13,\n            \"Nob Hill\": 11,\n            \"North Beach\": 15\n        },\n        \"North Beach\": {\n            \"Fisherman's Wharf\": 5,\n            \"The Castro\": 22,\n            \"Golden Gate Park\": 22,\n            \"Embarcadero\": 6,\n            \"Russian Hill\": 4,\n            \"Nob Hill\": 7,\n            \"Alamo Square\": 16\n        }\n    }\n    return travel_times[from_loc][to_loc]\n\ndef schedule_meetings():\n    current_time = \"9:00AM\"\n    current_location = \"Fisherman's Wharf\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Meeting constraints\n    meetings = [\n        {\"name\": \"William\", \"location\": \"Embarcadero\", \"start\": \"7:00AM\", \"end\": \"9:00AM\", \"duration\": 90},\n        {\"name\": \"Stephanie\", \"location\": \"Nob Hill\", \"start\": \"7:30AM\", \"end\": \"9:30AM\", \"duration\": 45},\n        {\"name\": \"Joseph\", \"location\": \"Alamo Square\", \"start\": \"11:30AM\", \"end\": \"12:45PM\", \"duration\": 15},\n        {\"name\": \"Karen\", \"location\": \"Russian Hill\", \"start\": \"2:30PM\", \"end\": \"7:45PM\", \"duration\": 30},\n        {\"name\": \"Kimberly\", \"location\": \"North Beach\", \"start\": \"3:45PM\", \"end\": \"7:15PM\", \"duration\": 30},\n        {\"name\": \"Laura\", \"location\": \"The Castro\", \"start\": \"7:45PM\", \"end\": \"9:30PM\", \"duration\": 105},\n        {\"name\": \"Daniel\", \"location\": \"Golden Gate Park\", \"start\": \"9:15PM\", \"end\": \"9:45PM\", \"duration\": 15}\n    ]\n\n    # Sort meetings by earliest possible meeting time\n    meetings.sort(key=lambda x: time_to_minutes(x[\"start\"]))\n\n    for meeting in meetings:\n        travel_time = get_travel_time(current_location, meeting[\"location\"])\n        arrival_time = add_minutes_to_time(current_time, travel_time)\n        \n        # Check if we can meet within the window\n        if time_to_minutes(arrival_time) <= time_to_minutes(meeting[\"end\"]):\n            meeting_start = max(time_to_minutes(arrival_time), time_to_minutes(meeting[\"start\"]))\n            meeting_end = meeting_start + meeting[\"duration\"]\n            \n            if meeting_end <= time_to_minutes(meeting[\"end\"]):\n                # Add travel action\n                if travel_time > 0:\n                    schedule.append({\n                        \"action\": \"travel\",\n                        \"location\": current_location,\n                        \"duration\": travel_time,\n                        \"time\": current_time,\n                        \"to\": meeting[\"location\"]\n                    })\n                \n                # Add wait action if needed\n                if time_to_minutes(arrival_time) < time_to_minutes(meeting[\"start\"]):\n                    wait_time = time_to_minutes(meeting[\"start\"]) - time_to_minutes(arrival_time)\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": meeting[\"location\"],\n                        \"time\": minutes_to_time(time_to_minutes(arrival_time)),\n                        \"duration\": wait_time\n                    })\n                \n                # Add meeting action\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": meeting[\"location\"],\n                    \"duration\": meeting[\"duration\"],\n                    \"time\": minutes_to_time(meeting_start)\n                })\n                \n                current_time = minutes_to_time(meeting_end)\n                current_location = meeting[\"location\"]\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = schedule_meetings()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_604",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "1:01PM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Russian Hill\"\n    arrival_time_str = \"9:00AM\"\n    arrival_time = parse_time(arrival_time_str)\n    \n    # Barbara's availability\n    barbara_start_str = \"1:15PM\"\n    barbara_end_str = \"6:15PM\"\n    barbara_start = parse_time(barbara_start_str)\n    barbara_end = parse_time(barbara_end_str)\n    min_meeting_duration = 45  # minutes\n    \n    # Travel times\n    travel_to_richmond = 14  # minutes\n    travel_to_russian = 13  # minutes\n    \n    # Calculate possible meeting window\n    latest_departure_from_russian = barbara_end - timedelta(minutes=min_meeting_duration)\n    latest_departure_from_russian_for_meeting = latest_departure_from_russian - timedelta(minutes=travel_to_richmond)\n    \n    # We can leave Russian Hill anytime between now and latest_departure_from_russian_for_meeting\n    # Since we want to meet as soon as possible, we'll leave at the earliest possible time to arrive exactly at 1:15PM\n    # But we might need to wait if we arrive too early\n    \n    # Time needed to arrive at Richmond exactly at 1:15PM\n    travel_start_time = barbara_start - timedelta(minutes=travel_to_richmond)\n    \n    # Check if we can make it by leaving now\n    if arrival_time <= travel_start_time:\n        # We can leave at travel_start_time\n        departure_time = travel_start_time\n        wait_time = (departure_time - arrival_time).total_seconds() / 60\n    else:\n        # We can't make it exactly at 1:15PM, so leave now and arrive after 1:15PM\n        departure_time = arrival_time\n        wait_time = 0\n    \n    arrival_at_richmond = departure_time + timedelta(minutes=travel_to_richmond)\n    \n    # Calculate meeting time\n    meeting_start = max(arrival_at_richmond, barbara_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > barbara_end:\n        # Can't meet for full duration\n        meeting_end = barbara_end\n        if (meeting_end - meeting_start).total_seconds() / 60 < min_meeting_duration:\n            # Can't meet at all\n            return {\"schedule\": [{\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)}]}\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)})\n    \n    if arrival_time < departure_time:\n        wait_duration = (departure_time - arrival_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": arrival_location, \"time\": format_time(arrival_time)})\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_to_richmond,\n        \"time\": format_time(departure_time),\n        \"to\": \"Richmond District\"\n    })\n    \n    if arrival_at_richmond < barbara_start:\n        wait_duration = (barbara_start - arrival_at_richmond).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": format_time(arrival_at_richmond)})\n    \n    meeting_duration = (meeting_end - meeting_start).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 5,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:05AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "12:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "1:30PM",
                    "duration": 23,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:53PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "12:00PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 23,
                    "time": "1:53PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "1:53PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    time_obj = datetime(1, 1, 1) + timedelta(minutes=minutes)\n    return time_obj.strftime('%I:%M%p').lstrip('0').replace(' 0', ' ')\n\ndef calculate_schedule():\n    # Travel times in minutes\n    travel_times = {\n        ('Financial District', 'Chinatown'): 5,\n        ('Financial District', 'Golden Gate Park'): 23,\n        ('Chinatown', 'Financial District'): 5,\n        ('Chinatown', 'Golden Gate Park'): 23,\n        ('Golden Gate Park', 'Financial District'): 26,\n        ('Golden Gate Park', 'Chinatown'): 23\n    }\n\n    # Constraints\n    start_time = time_to_minutes('9:00AM')\n    kenneth_available_start = time_to_minutes('12:00PM')\n    kenneth_available_end = time_to_minutes('3:00PM')\n    kenneth_min_duration = 90\n    barbara_available_start = time_to_minutes('8:15AM')\n    barbara_available_end = time_to_minutes('7:00PM')\n    barbara_min_duration = 45\n\n    current_location = 'Financial District'\n    current_time = start_time\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n\n    # Option 1: Meet Kenneth first, then Barbara\n    # Travel to Chinatown\n    travel_duration = travel_times[(current_location, 'Chinatown')]\n    arrival_time = current_time + travel_duration\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(current_time),\n        \"to\": \"Chinatown\"\n    })\n    current_location = 'Chinatown'\n    current_time = arrival_time\n\n    # Wait until Kenneth is available if needed\n    if current_time < kenneth_available_start:\n        wait_duration = kenneth_available_start - current_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time = kenneth_available_start\n\n    # Meet Kenneth\n    meet_end_time = current_time + kenneth_min_duration\n    if meet_end_time > kenneth_available_end:\n        # Cannot meet Kenneth for required duration in this option\n        option1_valid = False\n    else:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": kenneth_min_duration,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time = meet_end_time\n        option1_valid = True\n\n        # Travel to Golden Gate Park\n        travel_duration = travel_times[(current_location, 'Golden Gate Park')]\n        arrival_time = current_time + travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time),\n            \"to\": \"Golden Gate Park\"\n        })\n        current_location = 'Golden Gate Park'\n        current_time = arrival_time\n\n        # Meet Barbara\n        if current_time < barbara_available_start:\n            current_time = barbara_available_start\n        meet_end_time = current_time + barbara_min_duration\n        if meet_end_time <= barbara_available_end:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": barbara_min_duration,\n                \"time\": minutes_to_time(current_time)\n            })\n        else:\n            option1_valid = False\n\n    # Option 2: Meet Barbara first, then Kenneth\n    current_location = 'Financial District'\n    current_time = start_time\n    schedule2 = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n\n    # Travel to Golden Gate Park\n    travel_duration = travel_times[(current_location, 'Golden Gate Park')]\n    arrival_time = current_time + travel_duration\n    schedule2.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(current_time),\n        \"to\": \"Golden Gate Park\"\n    })\n    current_location = 'Golden Gate Park'\n    current_time = arrival_time\n\n    # Meet Barbara\n    if current_time < barbara_available_start:\n        current_time = barbara_available_start\n    meet_end_time = current_time + barbara_min_duration\n    if meet_end_time > barbara_available_end:\n        option2_valid = False\n    else:\n        schedule2.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": barbara_min_duration,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time = meet_end_time\n        option2_valid = True\n\n        # Travel to Chinatown\n        travel_duration = travel_times[(current_location, 'Chinatown')]\n        arrival_time = current_time + travel_duration\n        schedule2.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time),\n            \"to\": \"Chinatown\"\n        })\n        current_location = 'Chinatown'\n        current_time = arrival_time\n\n        # Wait until Kenneth is available if needed\n        if current_time < kenneth_available_start:\n            wait_duration = kenneth_available_start - current_time\n            schedule2.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time = kenneth_available_start\n\n        # Meet Kenneth\n        meet_end_time = current_time + kenneth_min_duration\n        if meet_end_time > kenneth_available_end:\n            option2_valid = False\n        else:\n            schedule2.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": kenneth_min_duration,\n                \"time\": minutes_to_time(current_time)\n            })\n\n    # Determine which option is better\n    if option1_valid and option2_valid:\n        # Both options are valid, choose the one that meets both friends\n        final_schedule = schedule\n    elif option1_valid:\n        final_schedule = schedule\n    elif option2_valid:\n        final_schedule = schedule2\n    else:\n        # If neither option works, try to meet at least one friend\n        # Try to meet Kenneth only\n        current_location = 'Financial District'\n        current_time = start_time\n        schedule_kenneth = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n\n        # Travel to Chinatown\n        travel_duration = travel_times[(current_location, 'Chinatown')]\n        arrival_time = current_time + travel_duration\n        schedule_kenneth.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time),\n            \"to\": \"Chinatown\"\n        })\n        current_location = 'Chinatown'\n        current_time = arrival_time\n\n        # Wait until Kenneth is available if needed\n        if current_time < kenneth_available_start:\n            wait_duration = kenneth_available_start - current_time\n            schedule_kenneth.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time = kenneth_available_start\n\n        # Meet Kenneth\n        meet_end_time = current_time + kenneth_min_duration\n        if meet_end_time <= kenneth_available_end:\n            schedule_kenneth.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": kenneth_min_duration,\n                \"time\": minutes_to_time(current_time)\n            })\n            final_schedule = schedule_kenneth\n        else:\n            # Try to meet Barbara only\n            current_location = 'Financial District'\n            current_time = start_time\n            schedule_barbara = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n\n            # Travel to Golden Gate Park\n            travel_duration = travel_times[(current_location, 'Golden Gate Park')]\n            arrival_time = current_time + travel_duration\n            schedule_barbara.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": \"Golden Gate Park\"\n            })\n            current_location = 'Golden Gate Park'\n            current_time = arrival_time\n\n            # Meet Barbara\n            if current_time < barbara_available_start:\n                current_time = barbara_available_start\n            meet_end_time = current_time + barbara_min_duration\n            if meet_end_time <= barbara_available_end:\n                schedule_barbara.append({\n                    \"action\": \"meet\",\n                    \"location\": current_location,\n                    \"duration\": barbara_min_duration,\n                    \"time\": minutes_to_time(current_time)\n                })\n                final_schedule = schedule_barbara\n            else:\n                final_schedule = [{\"action\": \"start\", \"location\": \"Financial District\", \"time\": \"9:00AM\"}]\n\n    return {\"schedule\": final_schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_137",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:16AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "10:46AM",
                    "duration": 13,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "10:59AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "12:14PM",
                    "duration": 17,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "12:31PM",
                    "duration": 44.0
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "1:15PM",
                    "duration": 16,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:31PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "2:31PM",
                    "duration": 9,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "2:40PM",
                    "duration": 35.0
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "3:15PM",
                    "duration": 21,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "3:36PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "4:06PM",
                    "duration": 19,
                    "to": "Embarcadero"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "4:25PM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "4:32PM",
                    "duration": 103.0
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "6:15PM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "6:27PM",
                    "duration": 48.0
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "7:15PM",
                    "duration": 23,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "7:38PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "9:16AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 13,
                    "time": "10:59AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "10:59AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 19,
                    "time": "12:33PM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 60,
                    "time": "12:33PM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 9,
                    "time": "1:42PM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 45,
                    "time": "1:42PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 21,
                    "time": "2:48PM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 30,
                    "time": "2:48PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "3:25PM",
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "3:25PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "5:37PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 75,
                    "time": "5:37PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 23,
                    "time": "7:15PM",
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 15,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_time(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef calculate_schedule():\n    # Define travel times as a dictionary of dictionaries\n    travel_times = {\n        'The Castro': {\n            'North Beach': 20,\n            'Golden Gate Park': 11,\n            'Embarcadero': 22,\n            'Haight-Ashbury': 6,\n            'Richmond District': 16,\n            'Nob Hill': 16,\n            'Marina District': 21,\n            'Presidio': 20,\n            'Union Square': 19,\n            'Financial District': 21\n        },\n        'North Beach': {\n            'The Castro': 23,\n            'Golden Gate Park': 22,\n            'Embarcadero': 6,\n            'Haight-Ashbury': 18,\n            'Richmond District': 18,\n            'Nob Hill': 7,\n            'Marina District': 9,\n            'Presidio': 17,\n            'Union Square': 7,\n            'Financial District': 8\n        },\n        'Golden Gate Park': {\n            'The Castro': 13,\n            'North Beach': 23,\n            'Embarcadero': 25,\n            'Haight-Ashbury': 7,\n            'Richmond District': 7,\n            'Nob Hill': 20,\n            'Marina District': 16,\n            'Presidio': 11,\n            'Union Square': 22,\n            'Financial District': 26\n        },\n        'Embarcadero': {\n            'The Castro': 25,\n            'North Beach': 5,\n            'Golden Gate Park': 25,\n            'Haight-Ashbury': 21,\n            'Richmond District': 21,\n            'Nob Hill': 10,\n            'Marina District': 12,\n            'Presidio': 20,\n            'Union Square': 10,\n            'Financial District': 5\n        },\n        'Haight-Ashbury': {\n            'The Castro': 6,\n            'North Beach': 19,\n            'Golden Gate Park': 7,\n            'Embarcadero': 20,\n            'Richmond District': 10,\n            'Nob Hill': 15,\n            'Marina District': 17,\n            'Presidio': 15,\n            'Union Square': 19,\n            'Financial District': 21\n        },\n        'Richmond District': {\n            'The Castro': 16,\n            'North Beach': 17,\n            'Golden Gate Park': 9,\n            'Embarcadero': 19,\n            'Haight-Ashbury': 10,\n            'Nob Hill': 17,\n            'Marina District': 9,\n            'Presidio': 7,\n            'Union Square': 21,\n            'Financial District': 22\n        },\n        'Nob Hill': {\n            'The Castro': 17,\n            'North Beach': 8,\n            'Golden Gate Park': 17,\n            'Embarcadero': 9,\n            'Haight-Ashbury': 13,\n            'Richmond District': 14,\n            'Marina District': 11,\n            'Presidio': 17,\n            'Union Square': 7,\n            'Financial District': 9\n        },\n        'Marina District': {\n            'The Castro': 22,\n            'North Beach': 11,\n            'Golden Gate Park': 18,\n            'Embarcadero': 14,\n            'Haight-Ashbury': 16,\n            'Richmond District': 11,\n            'Nob Hill': 12,\n            'Presidio': 10,\n            'Union Square': 16,\n            'Financial District': 17\n        },\n        'Presidio': {\n            'The Castro': 21,\n            'North Beach': 18,\n            'Golden Gate Park': 12,\n            'Embarcadero': 20,\n            'Haight-Ashbury': 15,\n            'Richmond District': 7,\n            'Nob Hill': 18,\n            'Marina District': 11,\n            'Union Square': 22,\n            'Financial District': 23\n        },\n        'Union Square': {\n            'The Castro': 17,\n            'North Beach': 10,\n            'Golden Gate Park': 22,\n            'Embarcadero': 11,\n            'Haight-Ashbury': 18,\n            'Richmond District': 20,\n            'Nob Hill': 9,\n            'Marina District': 18,\n            'Presidio': 24,\n            'Financial District': 9\n        },\n        'Financial District': {\n            'The Castro': 20,\n            'North Beach': 7,\n            'Golden Gate Park': 23,\n            'Embarcadero': 4,\n            'Haight-Ashbury': 19,\n            'Richmond District': 21,\n            'Nob Hill': 8,\n            'Marina District': 15,\n            'Presidio': 22,\n            'Union Square': 9\n        }\n    }\n\n    # Define friend constraints\n    friends = [\n        {'name': 'Steven', 'location': 'North Beach', 'start': '5:30PM', 'end': '8:30PM', 'min_duration': 15},\n        {'name': 'Sarah', 'location': 'Golden Gate Park', 'start': '5:00PM', 'end': '7:15PM', 'min_duration': 75},\n        {'name': 'Brian', 'location': 'Embarcadero', 'start': '2:15PM', 'end': '4:00PM', 'min_duration': 105},\n        {'name': 'Stephanie', 'location': 'Haight-Ashbury', 'start': '10:15AM', 'end': '12:15PM', 'min_duration': 75},\n        {'name': 'Melissa', 'location': 'Richmond District', 'start': '2:00PM', 'end': '7:30PM', 'min_duration': 30},\n        {'name': 'Nancy', 'location': 'Nob Hill', 'start': '8:15AM', 'end': '12:45PM', 'min_duration': 90},\n        {'name': 'David', 'location': 'Marina District', 'start': '11:15AM', 'end': '1:15PM', 'min_duration': 120},\n        {'name': 'James', 'location': 'Presidio', 'start': '3:00PM', 'end': '6:15PM', 'min_duration': 120},\n        {'name': 'Elizabeth', 'location': 'Union Square', 'start': '11:30AM', 'end': '9:00PM', 'min_duration': 60},\n        {'name': 'Robert', 'location': 'Financial District', 'start': '1:15PM', 'end': '3:15PM', 'min_duration': 45}\n    ]\n\n    # Sort friends by start time\n    friends.sort(key=lambda x: parse_time(x['start']))\n\n    current_time = parse_time('9:00AM')\n    current_location = 'The Castro'\n    schedule = []\n\n    schedule.append({\n        'action': 'start',\n        'location': current_location,\n        'time': format_time(current_time)\n    })\n\n    # Helper function to find travel time\n    def get_travel_time(from_loc, to_loc):\n        return travel_times[from_loc][to_loc]\n\n    # Try to meet each friend in order\n    for friend in friends:\n        friend_start = parse_time(friend['start'])\n        friend_end = parse_time(friend['end'])\n        min_duration = friend['min_duration']\n        location = friend['location']\n\n        # Calculate travel time to friend's location\n        travel_duration = get_travel_time(current_location, location)\n        arrival_time = add_time(current_time, travel_duration)\n\n        # If we arrive before friend is available, wait\n        if arrival_time < friend_start:\n            wait_duration = (friend_start - arrival_time).total_seconds() / 60\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': format_time(current_time),\n                'to': location\n            })\n            current_time = arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': location,\n                'time': format_time(current_time),\n                'duration': wait_duration\n            })\n            current_time = friend_start\n        else:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': format_time(current_time),\n                'to': location\n            })\n            current_time = arrival_time\n\n        # Check if we can meet the friend\n        if current_time >= friend_start and current_time < friend_end:\n            available_time = (friend_end - current_time).total_seconds() / 60\n            meet_duration = min(min_duration, available_time)\n            if meet_duration > 0:\n                schedule.append({\n                    'action': 'meet',\n                    'location': location,\n                    'duration': meet_duration,\n                    'time': format_time(current_time),\n                    'with': friend['name']\n                })\n                current_time = add_time(current_time, meet_duration)\n                current_location = location\n\n    return {'schedule': schedule}\n\nif __name__ == '__main__':\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_911",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "11:15AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "1:15PM",
                    "duration": 13,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "1:28PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "1:45PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "3:15PM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "3:35PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "4:30PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "5:45PM",
                    "duration": 7,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "5:52PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "7:15PM",
                    "duration": 18,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:33PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 120,
                    "time": "11:15AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 13,
                    "time": "1:28PM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "1:45PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 90,
                    "time": "1:45PM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "3:35PM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 75,
                    "time": "4:30PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 7,
                    "time": "5:52PM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "6:30PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 18,
                    "time": "7:33PM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 15,
                    "time": "7:33PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes between locations\ntravel_times = {\n    'Nob Hill': {\n        'Richmond District': 14,\n        'Financial District': 9,\n        'North Beach': 8,\n        'The Castro': 17,\n        'Golden Gate Park': 17\n    },\n    'Richmond District': {\n        'Nob Hill': 17,\n        'Financial District': 22,\n        'North Beach': 17,\n        'The Castro': 16,\n        'Golden Gate Park': 9\n    },\n    'Financial District': {\n        'Nob Hill': 8,\n        'Richmond District': 21,\n        'North Beach': 7,\n        'The Castro': 23,\n        'Golden Gate Park': 23\n    },\n    'North Beach': {\n        'Nob Hill': 7,\n        'Richmond District': 18,\n        'Financial District': 8,\n        'The Castro': 22,\n        'Golden Gate Park': 22\n    },\n    'The Castro': {\n        'Nob Hill': 16,\n        'Richmond District': 16,\n        'Financial District': 20,\n        'North Beach': 20,\n        'Golden Gate Park': 11\n    },\n    'Golden Gate Park': {\n        'Nob Hill': 20,\n        'Richmond District': 7,\n        'Financial District': 26,\n        'North Beach': 24,\n        'The Castro': 13\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Emily': {\n        'location': 'Richmond District',\n        'available_start': '7:00PM',\n        'available_end': '9:00PM',\n        'min_duration': 15\n    },\n    'Margaret': {\n        'location': 'Financial District',\n        'available_start': '4:30PM',\n        'available_end': '8:15PM',\n        'min_duration': 75\n    },\n    'Ronald': {\n        'location': 'North Beach',\n        'available_start': '6:30PM',\n        'available_end': '7:30PM',\n        'min_duration': 45\n    },\n    'Deborah': {\n        'location': 'The Castro',\n        'available_start': '1:45PM',\n        'available_end': '9:15PM',\n        'min_duration': 90\n    },\n    'Jeffrey': {\n        'location': 'Golden Gate Park',\n        'available_start': '11:15AM',\n        'available_end': '2:30PM',\n        'min_duration': 120\n    }\n}\n\n# Helper functions to convert between time strings and minutes\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name):\n    friend = friends[friend_name]\n    start = time_to_minutes(friend['available_start'])\n    end = time_to_minutes(friend['available_end'])\n    duration = friend['min_duration']\n    return current_time + duration <= end and current_time >= start\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times[from_loc][to_loc]\n\ndef generate_schedule(order):\n    schedule = []\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Nob Hill'\n    schedule.append({\n        'action': 'start',\n        'location': current_location,\n        'time': minutes_to_time(current_time)\n    })\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        if current_location != destination:\n            travel_time = get_travel_time(current_location, destination)\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': destination\n            })\n            current_time += travel_time\n            current_location = destination\n        \n        start_time = max(current_time, time_to_minutes(friend['available_start']))\n        if start_time > current_time:\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = start_time\n        \n        duration = friend['min_duration']\n        if current_time + duration > time_to_minutes(friend['available_end']):\n            return None\n        \n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': duration,\n            'time': minutes_to_time(current_time)\n        })\n        current_time += duration\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    # Count number of friends met\n    met = sum(1 for event in schedule if event['action'] == 'meet')\n    return met\n\n# Generate all possible orders of meeting friends\nfriend_names = list(friends.keys())\nbest_schedule = None\nbest_score = 0\n\n# Try all permutations (for small n this is feasible)\nfor order in permutations(friend_names):\n    schedule = generate_schedule(order)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\n# Output the best schedule\nif best_schedule:\n    output = {'schedule': best_schedule}\nelse:\n    output = {'schedule': []}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_433",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "10:45AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "11:00AM",
                    "duration": 12,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "11:12AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "12:27PM",
                    "duration": 15,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "12:42PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "10:45AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "10:45AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 12,
                    "time": "11:12AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "11:12AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 15,
                    "time": "12:42PM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 90,
                    "time": "12:42PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ntravel_times = {\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Financial District', 'Pacific Heights'): 13,\n    ('Financial District', 'Mission District'): 17,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n    ('Fisherman\\'s Wharf', 'Mission District'): 22,\n    ('Pacific Heights', 'Financial District'): 13,\n    ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n    ('Pacific Heights', 'Mission District'): 15,\n    ('Mission District', 'Financial District'): 17,\n    ('Mission District', 'Fisherman\\'s Wharf'): 22,\n    ('Mission District', 'Pacific Heights'): 16\n}\n\nfriends = {\n    'David': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': time_to_minutes('10:45AM'),\n        'end': time_to_minutes('3:30PM'),\n        'duration': 15\n    },\n    'Timothy': {\n        'location': 'Pacific Heights',\n        'start': time_to_minutes('9:00AM'),\n        'end': time_to_minutes('3:30PM'),\n        'duration': 75\n    },\n    'Robert': {\n        'location': 'Mission District',\n        'start': time_to_minutes('12:15PM'),\n        'end': time_to_minutes('7:45PM'),\n        'duration': 90\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Financial District'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        \n        # Travel to friend's location\n        travel_key = (current_location, destination)\n        travel_duration = travel_times[travel_key]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        # Arrive at destination\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if friend is available\n        friend_start = friend_data['start']\n        friend_end = friend_data['end']\n        meet_duration = friend_data['duration']\n        \n        if current_time < friend_start:\n            # Need to wait\n            wait_duration = friend_start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = friend_start\n        \n        # Check if we can meet\n        if current_time + meet_duration <= friend_end:\n            # Meet friend\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meet_duration,\n                \"time\": minutes_to_time(current_time),\n                \"with\": friend\n            })\n            current_time += meet_duration\n            met_friends.add(friend)\n        else:\n            # Cannot meet, skip\n            pass\n    \n    return schedule, len(met_friends)\n\nbest_schedule = None\nbest_meetings = 0\n\n# Try all possible orders of meeting friends\nfor order in permutations(friends.keys()):\n    schedule, num_meetings = calculate_schedule(order)\n    if num_meetings > best_meetings:\n        best_meetings = num_meetings\n        best_schedule = schedule\n\n# Ensure we meet all friends (since it's possible)\nif best_meetings < 3:\n    # Try specific order that should work\n    order = ['Timothy', 'David', 'Robert']\n    schedule, num_meetings = calculate_schedule(order)\n    if num_meetings == 3:\n        best_schedule = schedule\n\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_203",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "9:25AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 7,
                    "time": "9:47AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 120,
                    "time": "4:45PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "6:52PM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "7:45PM"
                }
            ],
            "type_error": "KeyError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef calculate_schedule():\n    # Locations\n    locations = {\n        'Fisherman\\'s Wharf': 'FW',\n        'Golden Gate Park': 'GGP',\n        'Presidio': 'P',\n        'Richmond District': 'RD'\n    }\n    \n    # Travel times in minutes\n    travel_times = {\n        ('FW', 'GGP'): 25,\n        ('FW', 'P'): 17,\n        ('FW', 'RD'): 18,\n        ('GGP', 'FW'): 24,\n        ('GGP', 'P'): 11,\n        ('GGP', 'RD'): 7,\n        ('P', 'FW'): 19,\n        ('P', 'GGP'): 12,\n        ('P', 'RD'): 7,\n        ('RD', 'FW'): 18,\n        ('RD', 'GGP'): 9,\n        ('RD', 'P'): 7\n    }\n    \n    # Constraints\n    start_time = parse_time('9:00AM')\n    current_location = 'FW'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(start_time)}]\n    \n    # Melissa's availability: GGP from 8:30AM to 8:00PM, min 15 mins\n    melissa_start = parse_time('8:30AM')\n    melissa_end = parse_time('8:00PM')\n    melissa_min = 15\n    \n    # Nancy's availability: P from 7:45PM to 10:00PM, min 105 mins\n    nancy_start = parse_time('7:45PM')\n    nancy_end = parse_time('10:00PM')\n    nancy_min = 105\n    \n    # Emily's availability: RD from 4:45PM to 10:00PM, min 120 mins\n    emily_start = parse_time('4:45PM')\n    emily_end = parse_time('10:00PM')\n    emily_min = 120\n    \n    current_time = start_time\n    \n    # First, meet Melissa at GGP\n    travel_duration = travel_times[(locations[current_location], locations['Golden Gate Park'])]\n    arrival_time = add_minutes(current_time, travel_duration)\n    \n    # Check if we can meet Melissa\n    if arrival_time <= melissa_end:\n        meet_start = max(arrival_time, melissa_start)\n        meet_end = add_minutes(meet_start, melissa_min)\n        if meet_end <= melissa_end:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": \"Golden Gate Park\"\n            })\n            current_time = arrival_time\n            if current_time < meet_start:\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Golden Gate Park\",\n                    \"time\": format_time(current_time)\n                })\n                current_time = meet_start\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Golden Gate Park\",\n                \"duration\": melissa_min,\n                \"time\": format_time(current_time)\n            })\n            current_time = meet_end\n            current_location = 'Golden Gate Park'\n    \n    # Next, meet Emily at RD\n    travel_duration = travel_times[(locations[current_location], locations['Richmond District'])]\n    arrival_time = add_minutes(current_time, travel_duration)\n    \n    # Check if we can meet Emily\n    if arrival_time <= emily_end:\n        meet_start = max(arrival_time, emily_start)\n        meet_end = add_minutes(meet_start, emily_min)\n        if meet_end <= emily_end:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": \"Richmond District\"\n            })\n            current_time = arrival_time\n            if current_time < meet_start:\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Richmond District\",\n                    \"time\": format_time(current_time)\n                })\n                current_time = meet_start\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Richmond District\",\n                \"duration\": emily_min,\n                \"time\": format_time(current_time)\n            })\n            current_time = meet_end\n            current_location = 'Richmond District'\n    \n    # Finally, meet Nancy at P\n    travel_duration = travel_times[(locations[current_location], locations['Presidio'])]\n    arrival_time = add_minutes(current_time, travel_duration)\n    \n    # Check if we can meet Nancy\n    if arrival_time <= nancy_end:\n        meet_start = max(arrival_time, nancy_start)\n        meet_end = add_minutes(meet_start, nancy_min)\n        if meet_end <= nancy_end:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": \"Presidio\"\n            })\n            current_time = arrival_time\n            if current_time < meet_start:\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Presidio\",\n                    \"time\": format_time(current_time)\n                })\n                current_time = meet_start\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Presidio\",\n                \"duration\": nancy_min,\n                \"time\": format_time(current_time)\n            })\n            current_time = meet_end\n            current_location = 'Presidio'\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_224",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "10:45AM",
                    "duration": 15.0
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "11:00AM",
                    "duration": 5,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "11:05AM",
                    "duration": 60.0
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "12:05PM",
                    "duration": 5,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "12:10PM",
                    "duration": 105.0
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "1:55PM",
                    "duration": 25,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "2:20PM",
                    "duration": 45.0
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "3:05PM",
                    "duration": 23,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "3:28PM",
                    "duration": 75.0
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "4:43PM",
                    "duration": 18,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "5:01PM",
                    "duration": 120.0
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "7:01PM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:19PM",
                    "duration": 15.0
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "7:34PM",
                    "duration": 11,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "7:45PM",
                    "duration": 45.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 60,
                    "time": "9:15AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 5,
                    "time": "10:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "10:45AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 15,
                    "time": "10:45AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 4,
                    "time": "11:04AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 105,
                    "time": "11:04AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 21,
                    "time": "1:10PM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 75,
                    "time": "1:10PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 18,
                    "time": "2:43PM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 120,
                    "time": "2:43PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "5:05PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "5:05PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 7,
                    "time": "5:57PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "7:15PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 11,
                    "time": "7:41PM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "7:41PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef time_in_range(start, end, x):\n    if start <= end:\n        return start <= x <= end\n    else:\n        return start <= x or x <= end\n\ndef main():\n    # Travel times dictionary: {from: {to: minutes}}\n    travel_times = {\n        'Marina District': {\n            'Embarcadero': 14,\n            'Bayview': 27,\n            'Union Square': 16,\n            'Chinatown': 15,\n            'Sunset District': 19,\n            'Golden Gate Park': 18,\n            'Financial District': 17,\n            'Haight-Ashbury': 16,\n            'Mission District': 20\n        },\n        'Embarcadero': {\n            'Marina District': 12,\n            'Bayview': 21,\n            'Union Square': 10,\n            'Chinatown': 7,\n            'Sunset District': 30,\n            'Golden Gate Park': 25,\n            'Financial District': 5,\n            'Haight-Ashbury': 21,\n            'Mission District': 20\n        },\n        'Bayview': {\n            'Marina District': 27,\n            'Embarcadero': 19,\n            'Union Square': 18,\n            'Chinatown': 19,\n            'Sunset District': 23,\n            'Golden Gate Park': 22,\n            'Financial District': 19,\n            'Haight-Ashbury': 19,\n            'Mission District': 13\n        },\n        'Union Square': {\n            'Marina District': 18,\n            'Embarcadero': 11,\n            'Bayview': 15,\n            'Chinatown': 7,\n            'Sunset District': 27,\n            'Golden Gate Park': 22,\n            'Financial District': 9,\n            'Haight-Ashbury': 18,\n            'Mission District': 14\n        },\n        'Chinatown': {\n            'Marina District': 12,\n            'Embarcadero': 5,\n            'Bayview': 20,\n            'Union Square': 7,\n            'Sunset District': 29,\n            'Golden Gate Park': 23,\n            'Financial District': 5,\n            'Haight-Ashbury': 19,\n            'Mission District': 17\n        },\n        'Sunset District': {\n            'Marina District': 21,\n            'Embarcadero': 30,\n            'Bayview': 22,\n            'Union Square': 30,\n            'Chinatown': 30,\n            'Golden Gate Park': 11,\n            'Financial District': 30,\n            'Haight-Ashbury': 15,\n            'Mission District': 25\n        },\n        'Golden Gate Park': {\n            'Marina District': 16,\n            'Embarcadero': 25,\n            'Bayview': 23,\n            'Union Square': 22,\n            'Chinatown': 23,\n            'Sunset District': 10,\n            'Financial District': 26,\n            'Haight-Ashbury': 7,\n            'Mission District': 17\n        },\n        'Financial District': {\n            'Marina District': 15,\n            'Embarcadero': 4,\n            'Bayview': 19,\n            'Union Square': 9,\n            'Chinatown': 5,\n            'Sunset District': 30,\n            'Golden Gate Park': 23,\n            'Haight-Ashbury': 19,\n            'Mission District': 17\n        },\n        'Haight-Ashbury': {\n            'Marina District': 17,\n            'Embarcadero': 20,\n            'Bayview': 18,\n            'Union Square': 19,\n            'Chinatown': 19,\n            'Sunset District': 15,\n            'Golden Gate Park': 7,\n            'Financial District': 21,\n            'Mission District': 11\n        },\n        'Mission District': {\n            'Marina District': 19,\n            'Embarcadero': 19,\n            'Bayview': 14,\n            'Union Square': 15,\n            'Chinatown': 16,\n            'Sunset District': 24,\n            'Golden Gate Park': 17,\n            'Financial District': 15,\n            'Haight-Ashbury': 12\n        }\n    }\n\n    # Friend constraints\n    friends = [\n        {'name': 'Joshua', 'location': 'Embarcadero', 'start': '9:45AM', 'end': '6:00PM', 'duration': 105},\n        {'name': 'Jeffrey', 'location': 'Bayview', 'start': '9:45AM', 'end': '8:15PM', 'duration': 75},\n        {'name': 'Charles', 'location': 'Union Square', 'start': '10:45AM', 'end': '8:15PM', 'duration': 120},\n        {'name': 'Joseph', 'location': 'Chinatown', 'start': '7:00AM', 'end': '3:30PM', 'duration': 60},\n        {'name': 'Elizabeth', 'location': 'Sunset District', 'start': '9:00AM', 'end': '9:45AM', 'duration': 45},\n        {'name': 'Matthew', 'location': 'Golden Gate Park', 'start': '11:00AM', 'end': '7:30PM', 'duration': 45},\n        {'name': 'Carol', 'location': 'Financial District', 'start': '10:45AM', 'end': '11:15AM', 'duration': 15},\n        {'name': 'Paul', 'location': 'Haight-Ashbury', 'start': '7:15PM', 'end': '8:30PM', 'duration': 15},\n        {'name': 'Rebecca', 'location': 'Mission District', 'start': '5:00PM', 'end': '9:45PM', 'duration': 45}\n    ]\n\n    # Initialize schedule\n    current_time = parse_time('9:00AM')\n    current_location = 'Marina District'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n    # Sort friends by end time (earlier first)\n    friends_sorted = sorted(friends, key=lambda x: parse_time(x['end']))\n\n    # Try to meet each friend\n    for friend in friends_sorted:\n        loc = friend['location']\n        start_time = parse_time(friend['start'])\n        end_time = parse_time(friend['end'])\n        duration = friend['duration']\n\n        # Calculate travel time\n        travel_time = travel_times[current_location][loc]\n\n        # Arrival time if we leave now\n        arrival_time = add_minutes(current_time, travel_time)\n\n        # Check if we can meet this friend\n        if arrival_time <= end_time:\n            # Calculate available meeting time\n            meeting_start = max(arrival_time, start_time)\n            meeting_end = min(add_minutes(meeting_start, duration), end_time)\n            actual_duration = (meeting_end - meeting_start).total_seconds() / 60\n\n            if actual_duration >= friend['duration']:\n                # Add travel action\n                if travel_time > 0:\n                    schedule.append({\n                        'action': 'travel',\n                        'location': current_location,\n                        'duration': travel_time,\n                        'time': format_time(current_time),\n                        'to': loc\n                    })\n                    current_time = arrival_time\n\n                # Add meeting action\n                schedule.append({\n                    'action': 'meet',\n                    'location': loc,\n                    'duration': actual_duration,\n                    'time': format_time(meeting_start)\n                })\n                current_time = meeting_end\n                current_location = loc\n\n    # Output schedule\n    print(json.dumps({'schedule': schedule}, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_813",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:04AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "7:00PM",
                    "duration": 120.0
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00PM",
                    "duration": 11,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:11PM",
                    "duration": -236.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 45,
                    "time": "4:00PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "4:58PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 120,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    time_str = dt.strftime(\"%-I:%M%p\")\n    return time_str.replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        (\"North Beach\", \"Union Square\"): 7,\n        (\"North Beach\", \"Russian Hill\"): 4,\n        (\"Union Square\", \"North Beach\"): 10,\n        (\"Union Square\", \"Russian Hill\"): 13,\n        (\"Russian Hill\", \"North Beach\"): 5,\n        (\"Russian Hill\", \"Union Square\"): 11,\n    }\n    \n    current_time = str_to_time(\"9:00AM\")\n    current_location = \"North Beach\"\n    \n    emily_start = str_to_time(\"4:00PM\")\n    emily_end = str_to_time(\"5:15PM\")\n    emily_min_duration = 45\n    \n    margaret_start = str_to_time(\"7:00PM\")\n    margaret_end = str_to_time(\"9:00PM\")\n    margaret_min_duration = 120\n    \n    schedule = []\n    \n    # Start at North Beach\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": time_to_str(current_time)\n    })\n    \n    # Option 1: Try to meet Emily first\n    # Calculate travel to Union Square\n    travel_duration = travel_times[(current_location, \"Union Square\")]\n    arrival_time = current_time + timedelta(minutes=travel_duration)\n    \n    # Can we meet Emily now? No, she's not available until 4:00PM\n    # So we have free time until Emily's availability\n    \n    # Let's see if we can meet Margaret first\n    # Calculate travel to Russian Hill\n    travel_duration_margaret = travel_times[(current_location, \"Russian Hill\")]\n    arrival_margaret = current_time + timedelta(minutes=travel_duration_margaret)\n    \n    if arrival_margaret < margaret_start:\n        # We arrive before Margaret is available, so wait\n        wait_duration = (margaret_start - arrival_margaret).total_seconds() / 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_duration_margaret,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Russian Hill\"\n        })\n        current_time = arrival_margaret\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": time_to_str(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = margaret_start\n    else:\n        # We can meet Margaret immediately\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_duration_margaret,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Russian Hill\"\n        })\n        current_time = arrival_margaret\n    \n    # Meet Margaret\n    meet_end_time = current_time + timedelta(minutes=margaret_min_duration)\n    if meet_end_time > margaret_end:\n        meet_end_time = margaret_end\n    \n    actual_duration = (meet_end_time - current_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": actual_duration,\n        \"time\": time_to_str(current_time),\n        \"with\": \"Margaret\"\n    })\n    current_time = meet_end_time\n    current_location = \"Russian Hill\"\n    \n    # Now travel to meet Emily\n    travel_duration_emily = travel_times[(current_location, \"Union Square\")]\n    arrival_emily = current_time + timedelta(minutes=travel_duration_emily)\n    \n    if arrival_emily < emily_start:\n        # Wait until Emily is available\n        wait_duration = (emily_start - arrival_emily).total_seconds() / 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_duration_emily,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Union Square\"\n        })\n        current_time = arrival_emily\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": time_to_str(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = emily_start\n    else:\n        # Meet Emily immediately if possible\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_duration_emily,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Union Square\"\n        })\n        current_time = arrival_emily\n    \n    # Meet Emily\n    meet_end_time = current_time + timedelta(minutes=emily_min_duration)\n    if meet_end_time > emily_end:\n        meet_end_time = emily_end\n    \n    actual_duration = (meet_end_time - current_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": actual_duration,\n        \"time\": time_to_str(current_time),\n        \"with\": \"Emily\"\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_170",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:14AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "10:59AM",
                    "duration": 21,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:30AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "12:15PM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "1:30PM",
                    "duration": 9,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "2:15PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "4:15PM",
                    "duration": 3,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:18PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "6:03PM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "6:21PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "7:06PM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "7:21PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "7:51PM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:03PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 105,
                    "time": "9:14AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 21,
                    "time": "11:20AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "11:30AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 19,
                    "time": "12:34PM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 120,
                    "time": "2:15PM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "4:24PM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "4:24PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 5,
                    "time": "5:59PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "5:59PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 17,
                    "time": "6:46PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "6:46PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "7:46PM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 30,
                    "time": "7:46PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "8:28PM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 60,
                    "time": "8:28PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Marina District': {\n        'Bayview': 27,\n        'Sunset District': 19,\n        'Richmond District': 11,\n        'Nob Hill': 12,\n        'Chinatown': 15,\n        'Haight-Ashbury': 16,\n        'North Beach': 11,\n        'Russian Hill': 8,\n        'Embarcadero': 14\n    },\n    'Bayview': {\n        'Marina District': 27,\n        'Sunset District': 23,\n        'Richmond District': 25,\n        'Nob Hill': 20,\n        'Chinatown': 19,\n        'Haight-Ashbury': 19,\n        'North Beach': 22,\n        'Russian Hill': 23,\n        'Embarcadero': 19\n    },\n    'Sunset District': {\n        'Marina District': 21,\n        'Bayview': 22,\n        'Richmond District': 12,\n        'Nob Hill': 27,\n        'Chinatown': 30,\n        'Haight-Ashbury': 15,\n        'North Beach': 28,\n        'Russian Hill': 24,\n        'Embarcadero': 30\n    },\n    'Richmond District': {\n        'Marina District': 9,\n        'Bayview': 27,\n        'Sunset District': 11,\n        'Nob Hill': 17,\n        'Chinatown': 20,\n        'Haight-Ashbury': 10,\n        'North Beach': 17,\n        'Russian Hill': 13,\n        'Embarcadero': 19\n    },\n    'Nob Hill': {\n        'Marina District': 11,\n        'Bayview': 19,\n        'Sunset District': 24,\n        'Richmond District': 14,\n        'Chinatown': 6,\n        'Haight-Ashbury': 13,\n        'North Beach': 8,\n        'Russian Hill': 5,\n        'Embarcadero': 9\n    },\n    'Chinatown': {\n        'Marina District': 12,\n        'Bayview': 20,\n        'Sunset District': 29,\n        'Richmond District': 20,\n        'Nob Hill': 9,\n        'Haight-Ashbury': 19,\n        'North Beach': 3,\n        'Russian Hill': 7,\n        'Embarcadero': 5\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17,\n        'Bayview': 18,\n        'Sunset District': 15,\n        'Richmond District': 10,\n        'Nob Hill': 15,\n        'Chinatown': 19,\n        'North Beach': 19,\n        'Russian Hill': 17,\n        'Embarcadero': 20\n    },\n    'North Beach': {\n        'Marina District': 9,\n        'Bayview': 25,\n        'Sunset District': 27,\n        'Richmond District': 18,\n        'Nob Hill': 7,\n        'Chinatown': 6,\n        'Haight-Ashbury': 18,\n        'Russian Hill': 4,\n        'Embarcadero': 6\n    },\n    'Russian Hill': {\n        'Marina District': 7,\n        'Bayview': 23,\n        'Sunset District': 23,\n        'Richmond District': 14,\n        'Nob Hill': 5,\n        'Chinatown': 9,\n        'Haight-Ashbury': 17,\n        'North Beach': 5,\n        'Embarcadero': 8\n    },\n    'Embarcadero': {\n        'Marina District': 12,\n        'Bayview': 21,\n        'Sunset District': 30,\n        'Richmond District': 21,\n        'Nob Hill': 10,\n        'Chinatown': 7,\n        'Haight-Ashbury': 21,\n        'North Beach': 5,\n        'Russian Hill': 8\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Charles': {'location': 'Bayview', 'start': '11:30AM', 'end': '2:30PM', 'duration': 45},\n    'Robert': {'location': 'Sunset District', 'start': '4:45PM', 'end': '9:00PM', 'duration': 30},\n    'Karen': {'location': 'Richmond District', 'start': '7:15PM', 'end': '9:30PM', 'duration': 60},\n    'Rebecca': {'location': 'Nob Hill', 'start': '4:15PM', 'end': '8:30PM', 'duration': 90},\n    'Margaret': {'location': 'Chinatown', 'start': '2:15PM', 'end': '7:45PM', 'duration': 120},\n    'Patricia': {'location': 'Haight-Ashbury', 'start': '2:30PM', 'end': '8:30PM', 'duration': 45},\n    'Mark': {'location': 'North Beach', 'start': '2:00PM', 'end': '6:30PM', 'duration': 105},\n    'Melissa': {'location': 'Russian Hill', 'start': '1:00PM', 'end': '7:45PM', 'duration': 30},\n    'Laura': {'location': 'Embarcadero', 'start': '7:45AM', 'end': '1:15PM', 'duration': 105}\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    start_time = time_to_minutes(friend['start'])\n    end_time = time_to_minutes(friend['end'])\n    travel_time = travel_times[current_location][friend['location']]\n    \n    arrival_time = current_time + travel_time\n    if arrival_time > end_time:\n        return None\n    \n    meeting_start = max(arrival_time, start_time)\n    meeting_end = meeting_start + friend['duration']\n    \n    if meeting_end > end_time:\n        return None\n    \n    return {\n        'travel_time': travel_time,\n        'arrival_time': arrival_time,\n        'meeting_start': meeting_start,\n        'meeting_end': meeting_end\n    }\n\ndef generate_schedule():\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Marina District'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    remaining_friends = set(friends.keys())\n    \n    # First, meet Laura since she's only available in the morning\n    if 'Laura' in remaining_friends:\n        laura = friends['Laura']\n        travel_time = travel_times[current_location][laura['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(laura['start']))\n        meeting_end = meeting_start + laura['duration']\n        \n        if meeting_end <= time_to_minutes(laura['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': laura['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': laura['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': laura['location'],\n                'duration': laura['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = laura['location']\n            remaining_friends.remove('Laura')\n    \n    # Then try to meet Charles in Bayview\n    if 'Charles' in remaining_friends:\n        charles = friends['Charles']\n        travel_time = travel_times[current_location][charles['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(charles['start']))\n        meeting_end = meeting_start + charles['duration']\n        \n        if meeting_end <= time_to_minutes(charles['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': charles['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': charles['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': charles['location'],\n                'duration': charles['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = charles['location']\n            remaining_friends.remove('Charles')\n    \n    # Then try to meet Melissa in Russian Hill\n    if 'Melissa' in remaining_friends:\n        melissa = friends['Melissa']\n        travel_time = travel_times[current_location][melissa['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(melissa['start']))\n        meeting_end = meeting_start + melissa['duration']\n        \n        if meeting_end <= time_to_minutes(melissa['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': melissa['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': melissa['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': melissa['location'],\n                'duration': melissa['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = melissa['location']\n            remaining_friends.remove('Melissa')\n    \n    # Then try to meet Margaret in Chinatown\n    if 'Margaret' in remaining_friends:\n        margaret = friends['Margaret']\n        travel_time = travel_times[current_location][margaret['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(margaret['start']))\n        meeting_end = meeting_start + margaret['duration']\n        \n        if meeting_end <= time_to_minutes(margaret['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': margaret['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': margaret['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': margaret['location'],\n                'duration': margaret['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = margaret['location']\n            remaining_friends.remove('Margaret')\n    \n    # Then try to meet Mark in North Beach\n    if 'Mark' in remaining_friends:\n        mark = friends['Mark']\n        travel_time = travel_times[current_location][mark['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(mark['start']))\n        meeting_end = meeting_start + mark['duration']\n        \n        if meeting_end <= time_to_minutes(mark['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': mark['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': mark['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': mark['location'],\n                'duration': mark['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = mark['location']\n            remaining_friends.remove('Mark')\n    \n    # Then try to meet Patricia in Haight-Ashbury\n    if 'Patricia' in remaining_friends:\n        patricia = friends['Patricia']\n        travel_time = travel_times[current_location][patricia['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(patricia['start']))\n        meeting_end = meeting_start + patricia['duration']\n        \n        if meeting_end <= time_to_minutes(patricia['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': patricia['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': patricia['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': patricia['location'],\n                'duration': patricia['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = patricia['location']\n            remaining_friends.remove('Patricia')\n    \n    # Then try to meet Rebecca in Nob Hill\n    if 'Rebecca' in remaining_friends:\n        rebecca = friends['Rebecca']\n        travel_time = travel_times[current_location][rebecca['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(rebecca['start']))\n        meeting_end = meeting_start + rebecca['duration']\n        \n        if meeting_end <= time_to_minutes(rebecca['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': rebecca['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': rebecca['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': rebecca['location'],\n                'duration': rebecca['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = rebecca['location']\n            remaining_friends.remove('Rebecca')\n    \n    # Then try to meet Robert in Sunset District\n    if 'Robert' in remaining_friends:\n        robert = friends['Robert']\n        travel_time = travel_times[current_location][robert['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(robert['start']))\n        meeting_end = meeting_start + robert['duration']\n        \n        if meeting_end <= time_to_minutes(robert['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': robert['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': robert['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': robert['location'],\n                'duration': robert['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = robert['location']\n            remaining_friends.remove('Robert')\n    \n    # Finally try to meet Karen in Richmond District\n    if 'Karen' in remaining_friends:\n        karen = friends['Karen']\n        travel_time = travel_times[current_location][karen['location']]\n        arrival_time = current_time + travel_time\n        meeting_start = max(arrival_time, time_to_minutes(karen['start']))\n        meeting_end = meeting_start + karen['duration']\n        \n        if meeting_end <= time_to_minutes(karen['end']):\n            schedule.append({\n                'action': 'travel',\n                'location': karen['location'],\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': karen['location']\n            })\n            schedule.append({\n                'action': 'meet',\n                'location': karen['location'],\n                'duration': karen['duration'],\n                'time': minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = karen['location']\n            remaining_friends.remove('Karen')\n    \n    return schedule\n\nschedule = generate_schedule()\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
            "count": "meeting_planning_example_892",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "10:15AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 7,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "11:07AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "2:30PM",
                    "duration": 18,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "2:48PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 45,
                    "time": "10:15AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 7,
                    "time": "11:07AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 90,
                    "time": "1:00PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 18,
                    "time": "2:48PM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 120,
                    "time": "2:48PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Embarcadero\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    \n    for person in order:\n        if person == \"Betty\":\n            location = \"Presidio\"\n            available_start = time_to_minutes(\"10:15AM\")\n            available_end = time_to_minutes(\"9:30PM\")\n            duration = 45\n        elif person == \"David\":\n            location = \"Richmond District\"\n            available_start = time_to_minutes(\"1:00PM\")\n            available_end = time_to_minutes(\"8:15PM\")\n            duration = 90\n        elif person == \"Barbara\":\n            location = \"Fisherman's Wharf\"\n            available_start = time_to_minutes(\"9:15AM\")\n            available_end = time_to_minutes(\"8:15PM\")\n            duration = 120\n        \n        # Travel to the location\n        travel_key = f\"{current_location} to {location}\"\n        travel_times = {\n            \"Embarcadero to Presidio\": 20,\n            \"Embarcadero to Richmond District\": 21,\n            \"Embarcadero to Fisherman's Wharf\": 6,\n            \"Presidio to Embarcadero\": 20,\n            \"Presidio to Richmond District\": 7,\n            \"Presidio to Fisherman's Wharf\": 19,\n            \"Richmond District to Embarcadero\": 19,\n            \"Richmond District to Presidio\": 7,\n            \"Richmond District to Fisherman's Wharf\": 18,\n            \"Fisherman's Wharf to Embarcadero\": 8,\n            \"Fisherman's Wharf to Presidio\": 17,\n            \"Fisherman's Wharf to Richmond District\": 18\n        }\n        travel_duration = travel_times[travel_key]\n        arrival_time = current_time + travel_duration\n        \n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time),\n            \"to\": location\n        })\n        \n        # Check if we need to wait\n        if arrival_time < available_start:\n            wait_duration = available_start - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location,\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_duration\n            })\n            arrival_time = available_start\n        \n        # Check if meeting is possible\n        if arrival_time + duration > available_end:\n            return None\n        \n        # Schedule the meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"duration\": duration,\n            \"time\": minutes_to_time(arrival_time),\n            \"with\": person\n        })\n        \n        current_time = arrival_time + duration\n        current_location = location\n    \n    return schedule\n\ndef main():\n    people = [\"Betty\", \"David\", \"Barbara\"]\n    best_schedule = None\n    best_meetings = 0\n    \n    for order in permutations(people):\n        schedule = calculate_schedule(order)\n        if schedule:\n            meetings = len([event for event in schedule if event[\"action\"] == \"meet\"])\n            if meetings > best_meetings:\n                best_meetings = meetings\n                best_schedule = schedule\n    \n    if best_schedule:\n        print(json.dumps({\"schedule\": best_schedule}, indent=2))\n    else:\n        print(json.dumps({\"error\": \"No valid schedule found\"}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_258",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "11:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 5,
                    "time": "11:50AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "4:15PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 30,
                    "time": "4:15PM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "4:56PM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "5:30PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "6:26PM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 75,
                    "time": "6:26PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 18,
                    "time": "7:59PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Presidio': {\n        'Pacific Heights': 11,\n        'Golden Gate Park': 12,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 11,\n        'Alamo Square': 19,\n        'Sunset District': 15,\n        'Nob Hill': 18,\n        'North Beach': 18\n    },\n    'Pacific Heights': {\n        'Presidio': 11,\n        'Golden Gate Park': 15,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Alamo Square': 10,\n        'Sunset District': 21,\n        'Nob Hill': 8,\n        'North Beach': 9\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Pacific Heights': 16,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Alamo Square': 9,\n        'Sunset District': 10,\n        'Nob Hill': 20,\n        'North Beach': 23\n    },\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 25,\n        'Marina District': 9,\n        'Alamo Square': 21,\n        'Sunset District': 27,\n        'Nob Hill': 11,\n        'North Beach': 6\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'Pacific Heights': 7,\n        'Golden Gate Park': 18,\n        'Fisherman\\'s Wharf': 10,\n        'Alamo Square': 15,\n        'Sunset District': 19,\n        'Nob Hill': 12,\n        'North Beach': 11\n    },\n    'Alamo Square': {\n        'Presidio': 17,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 15,\n        'Sunset District': 16,\n        'Nob Hill': 11,\n        'North Beach': 15\n    },\n    'Sunset District': {\n        'Presidio': 16,\n        'Pacific Heights': 21,\n        'Golden Gate Park': 11,\n        'Fisherman\\'s Wharf': 29,\n        'Marina District': 21,\n        'Alamo Square': 17,\n        'Nob Hill': 27,\n        'North Beach': 28\n    },\n    'Nob Hill': {\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Golden Gate Park': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Marina District': 11,\n        'Alamo Square': 11,\n        'Sunset District': 24,\n        'North Beach': 8\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Golden Gate Park': 22,\n        'Fisherman\\'s Wharf': 5,\n        'Marina District': 9,\n        'Alamo Square': 16,\n        'Sunset District': 27,\n        'Nob Hill': 7\n    }\n}\n\n# Friend availability\nfriends = {\n    'Kevin': {\n        'location': 'Pacific Heights',\n        'start': '7:15AM',\n        'end': '8:45AM',\n        'duration': 90,\n        'met': False\n    },\n    'Michelle': {\n        'location': 'Golden Gate Park',\n        'start': '8:00PM',\n        'end': '9:00PM',\n        'duration': 15,\n        'met': False\n    },\n    'Emily': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': '4:15PM',\n        'end': '7:00PM',\n        'duration': 30,\n        'met': False\n    },\n    'Mark': {\n        'location': 'Marina District',\n        'start': '6:15PM',\n        'end': '7:45PM',\n        'duration': 75,\n        'met': False\n    },\n    'Barbara': {\n        'location': 'Alamo Square',\n        'start': '5:00PM',\n        'end': '7:00PM',\n        'duration': 120,\n        'met': False\n    },\n    'Laura': {\n        'location': 'Sunset District',\n        'start': '7:00PM',\n        'end': '9:15PM',\n        'duration': 75,\n        'met': False\n    },\n    'Mary': {\n        'location': 'Nob Hill',\n        'start': '5:30PM',\n        'end': '7:00PM',\n        'duration': 45,\n        'met': False\n    },\n    'Helen': {\n        'location': 'North Beach',\n        'start': '11:00AM',\n        'end': '12:15PM',\n        'duration': 45,\n        'met': False\n    }\n}\n\ndef time_to_minutes(time_str):\n    time, period = time_str[:-2], time_str[-2:]\n    hours, minutes = map(int, time.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet(friend, current_time, current_location):\n    start = time_to_minutes(friend['start'])\n    end = time_to_minutes(friend['end'])\n    travel_time = travel_times[current_location][friend['location']]\n    arrival_time = current_time + travel_time\n    if arrival_time > end:\n        return False\n    meeting_end = arrival_time + friend['duration']\n    if meeting_end > end:\n        return False\n    return True\n\ndef find_best_schedule():\n    current_location = 'Presidio'\n    current_time = time_to_minutes('9:00AM')\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = 0\n    \n    # Try to meet Helen first (only possible meeting in the morning)\n    helen = friends['Helen']\n    if can_meet(helen, current_time, current_location):\n        travel_time = travel_times[current_location][helen['location']]\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': helen['location'],\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': helen['location']\n        })\n        schedule.append({\n            'action': 'meet',\n            'location': helen['location'],\n            'duration': helen['duration'],\n            'time': minutes_to_time(arrival_time)\n        })\n        current_time = arrival_time + helen['duration']\n        current_location = helen['location']\n        helen['met'] = True\n        met_friends += 1\n    \n    # Try to meet Barbara in the afternoon (longest duration)\n    barbara = friends['Barbara']\n    if can_meet(barbara, current_time, current_location):\n        travel_time = travel_times[current_location][barbara['location']]\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': barbara['location'],\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': barbara['location']\n        })\n        schedule.append({\n            'action': 'meet',\n            'location': barbara['location'],\n            'duration': barbara['duration'],\n            'time': minutes_to_time(arrival_time)\n        })\n        current_time = arrival_time + barbara['duration']\n        current_location = barbara['location']\n        barbara['met'] = True\n        met_friends += 1\n    \n    # Try to meet Mary after Barbara\n    mary = friends['Mary']\n    if not mary['met'] and can_meet(mary, current_time, current_location):\n        travel_time = travel_times[current_location][mary['location']]\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': mary['location'],\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': mary['location']\n        })\n        schedule.append({\n            'action': 'meet',\n            'location': mary['location'],\n            'duration': mary['duration'],\n            'time': minutes_to_time(arrival_time)\n        })\n        current_time = arrival_time + mary['duration']\n        current_location = mary['location']\n        mary['met'] = True\n        met_friends += 1\n    \n    # Try to meet Mark\n    mark = friends['Mark']\n    if not mark['met'] and can_meet(mark, current_time, current_location):\n        travel_time = travel_times[current_location][mark['location']]\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': mark['location'],\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': mark['location']\n        })\n        schedule.append({\n            'action': 'meet',\n            'location': mark['location'],\n            'duration': mark['duration'],\n            'time': minutes_to_time(arrival_time)\n        })\n        current_time = arrival_time + mark['duration']\n        current_location = mark['location']\n        mark['met'] = True\n        met_friends += 1\n    \n    # Try to meet Emily\n    emily = friends['Emily']\n    if not emily['met'] and can_meet(emily, current_time, current_location):\n        travel_time = travel_times[current_location][emily['location']]\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': emily['location'],\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': emily['location']\n        })\n        schedule.append({\n            'action': 'meet',\n            'location': emily['location'],\n            'duration': emily['duration'],\n            'time': minutes_to_time(arrival_time)\n        })\n        current_time = arrival_time + emily['duration']\n        current_location = emily['location']\n        emily['met'] = True\n        met_friends += 1\n    \n    # Try to meet Laura\n    laura = friends['Laura']\n    if not laura['met'] and can_meet(laura, current_time, current_location):\n        travel_time = travel_times[current_location][laura['location']]\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': laura['location'],\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': laura['location']\n        })\n        schedule.append({\n            'action': 'meet',\n            'location': laura['location'],\n            'duration': laura['duration'],\n            'time': minutes_to_time(arrival_time)\n        })\n        current_time = arrival_time + laura['duration']\n        current_location = laura['location']\n        laura['met'] = True\n        met_friends += 1\n    \n    # Try to meet Michelle\n    michelle = friends['Michelle']\n    if not michelle['met'] and can_meet(michelle, current_time, current_location):\n        travel_time = travel_times[current_location][michelle['location']]\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': michelle['location'],\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': michelle['location']\n        })\n        schedule.append({\n            'action': 'meet',\n            'location': michelle['location'],\n            'duration': michelle['duration'],\n            'time': minutes_to_time(arrival_time)\n        })\n        current_time = arrival_time + michelle['duration']\n        current_location = michelle['location']\n        michelle['met'] = True\n        met_friends += 1\n    \n    return {\n        'schedule': schedule,\n        'met_friends': met_friends\n    }\n\nbest_schedule = find_best_schedule()\nprint(json.dumps(best_schedule['schedule'], indent=2))\n```",
            "count": "meeting_planning_example_700",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:25AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:55AM",
                    "duration": 11,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "10:06AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "11:51AM",
                    "duration": 4,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "11:55AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "7:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 30,
                    "time": "9:25AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 11,
                    "time": "10:06AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "10:06AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 4,
                    "time": "11:55AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    'Bayview': {\n        'Embarcadero': 19,\n        'Fisherman\\'s Wharf': 25,\n        'Financial District': 19\n    },\n    'Embarcadero': {\n        'Bayview': 21,\n        'Fisherman\\'s Wharf': 6,\n        'Financial District': 5\n    },\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'Embarcadero': 8,\n        'Financial District': 11\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Embarcadero': 4,\n        'Fisherman\\'s Wharf': 10\n    }\n}\n\nfriends = {\n    'Betty': {\n        'location': 'Embarcadero',\n        'start': time_to_minutes('7:45PM'),\n        'end': time_to_minutes('9:45PM'),\n        'duration': 15\n    },\n    'Karen': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': time_to_minutes('8:45AM'),\n        'end': time_to_minutes('3:00PM'),\n        'duration': 30\n    },\n    'Anthony': {\n        'location': 'Financial District',\n        'start': time_to_minutes('9:15AM'),\n        'end': time_to_minutes('9:30PM'),\n        'duration': 105\n    }\n}\n\ncurrent_location = 'Bayview'\ncurrent_time = time_to_minutes('9:00AM')\n\ndef generate_schedules():\n    friend_names = list(friends.keys())\n    return permutations(friend_names)\n\ndef calculate_schedule(order):\n    schedule = []\n    current_loc = current_location\n    current_time_min = current_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_loc,\n        \"time\": minutes_to_time(current_time_min)\n    })\n    \n    met_friends = set()\n    total_meetings = 0\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        \n        # Travel to friend's location\n        travel_time = travel_times[current_loc][destination]\n        travel_start = current_time_min\n        travel_end = travel_start + travel_time\n        \n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_loc,\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        current_time_min = travel_end\n        current_loc = destination\n        \n        # Check if friend is available\n        friend_start = friend_data['start']\n        friend_end = friend_data['end']\n        duration = friend_data['duration']\n        \n        if current_time_min > friend_end:\n            continue  # Can't meet, already left\n        \n        meet_start = max(current_time_min, friend_start)\n        meet_end = meet_start + duration\n        \n        if meet_end > friend_end:\n            continue  # Can't meet, not enough time\n        \n        # Wait if needed\n        if current_time_min < friend_start:\n            wait_time = friend_start - current_time_min\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_loc,\n                \"time\": minutes_to_time(current_time_min)\n            })\n            current_time_min = friend_start\n        \n        # Meet friend\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_loc,\n            \"duration\": duration,\n            \"time\": minutes_to_time(meet_start)\n        })\n        current_time_min = meet_end\n        met_friends.add(friend)\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_meetings = 0\n    \n    for order in generate_schedules():\n        schedule, meetings = calculate_schedule(order)\n        if meetings > best_meetings or (meetings == best_meetings and best_schedule is None):\n            best_schedule = schedule\n            best_meetings = meetings\n        if best_meetings == 3:\n            break  # Can't do better than meeting all\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\noutput = {\n    \"schedule\": optimal_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_263",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:45AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "11:15AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:45AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "1:15PM",
                    "duration": 11,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:26PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "3:26PM",
                    "duration": 17,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "3:43PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "6:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:45AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 30,
                    "time": "10:45AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "11:30AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:45AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 90,
                    "time": "11:45AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 11,
                    "time": "1:26PM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "1:26PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 17,
                    "time": "3:43PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "6:15PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "6:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Richmond District\", \"Haight-Ashbury\"): 10,\n    (\"Richmond District\", \"Mission District\"): 20,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Mission District\", \"Richmond District\"): 20,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n}\n\nfriends = {\n    \"Sarah\": {\n        \"location\": \"Sunset District\",\n        \"available_start\": \"10:45AM\",\n        \"available_end\": \"7:00PM\",\n        \"meeting_duration\": 30,\n    },\n    \"Richard\": {\n        \"location\": \"Haight-Ashbury\",\n        \"available_start\": \"11:45AM\",\n        \"available_end\": \"3:45PM\",\n        \"meeting_duration\": 90,\n    },\n    \"Elizabeth\": {\n        \"location\": \"Mission District\",\n        \"available_start\": \"11:00AM\",\n        \"available_end\": \"5:15PM\",\n        \"meeting_duration\": 120,\n    },\n    \"Michelle\": {\n        \"location\": \"Golden Gate Park\",\n        \"available_start\": \"6:15PM\",\n        \"available_end\": \"8:45PM\",\n        \"meeting_duration\": 90,\n    }\n}\n\ncurrent_location = \"Richmond District\"\ncurrent_time = time_to_minutes(\"9:00AM\")\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get((from_loc, to_loc), float('inf'))\n\ndef generate_schedules():\n    friend_names = list(friends.keys())\n    schedules = []\n    for perm in permutations(friend_names):\n        schedule = []\n        valid = True\n        current_loc = current_location\n        current_time_temp = current_time\n        \n        for friend in perm:\n            friend_info = friends[friend]\n            loc = friend_info[\"location\"]\n            travel_time = get_travel_time(current_loc, loc)\n            if travel_time == float('inf'):\n                valid = False\n                break\n            \n            arrival_time = current_time_temp + travel_time\n            start_time = max(arrival_time, time_to_minutes(friend_info[\"available_start\"]))\n            end_time = start_time + friend_info[\"meeting_duration\"]\n            \n            if end_time > time_to_minutes(friend_info[\"available_end\"]):\n                valid = False\n                break\n            \n            if arrival_time < time_to_minutes(friend_info[\"available_start\"]):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_loc,\n                    \"duration\": travel_time,\n                    \"time\": minutes_to_time(current_time_temp),\n                    \"to\": loc\n                })\n                current_time_temp = arrival_time\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": loc,\n                    \"time\": minutes_to_time(current_time_temp),\n                })\n                current_time_temp = time_to_minutes(friend_info[\"available_start\"])\n            else:\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_loc,\n                    \"duration\": travel_time,\n                    \"time\": minutes_to_time(current_time_temp),\n                    \"to\": loc\n                })\n                current_time_temp = arrival_time\n            \n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": loc,\n                \"duration\": friend_info[\"meeting_duration\"],\n                \"time\": minutes_to_time(start_time),\n            })\n            current_time_temp = end_time\n            current_loc = loc\n        \n        if valid:\n            schedules.append(schedule)\n    \n    return schedules\n\ndef find_optimal_schedule():\n    schedules = generate_schedules()\n    if not schedules:\n        return []\n    \n    max_meetings = max(len(schedule) // 3 for schedule in schedules)\n    best_schedules = [s for s in schedules if len(s) // 3 == max_meetings]\n    \n    if max_meetings == 4:\n        return best_schedules[0]\n    \n    min_end_time = min(s[-1][\"time\"] for s in best_schedules)\n    for s in best_schedules:\n        if s[-1][\"time\"] == min_end_time:\n            return s\n    \n    return best_schedules[0]\n\noptimal_schedule = find_optimal_schedule()\nschedule_json = {\"schedule\": []}\n\nif optimal_schedule:\n    schedule_json[\"schedule\"].append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": minutes_to_time(current_time)\n    })\n    \n    for event in optimal_schedule:\n        schedule_json[\"schedule\"].append(event)\n\nprint(json.dumps(schedule_json, indent=2))\n```",
            "count": "meeting_planning_example_312",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:00AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 105,
                    "time": "10:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "12:02PM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 120,
                    "time": "1:30PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "3:47PM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:47PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "5:32PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:32PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    'Pacific Heights': {\n        'Nob Hill': 8,\n        'Russian Hill': 7,\n        'The Castro': 16,\n        'Sunset District': 21,\n        'Haight-Ashbury': 11\n    },\n    'Nob Hill': {\n        'Pacific Heights': 8,\n        'Russian Hill': 5,\n        'The Castro': 17,\n        'Sunset District': 25,\n        'Haight-Ashbury': 13\n    },\n    'Russian Hill': {\n        'Pacific Heights': 7,\n        'Nob Hill': 5,\n        'The Castro': 21,\n        'Sunset District': 23,\n        'Haight-Ashbury': 17\n    },\n    'The Castro': {\n        'Pacific Heights': 16,\n        'Nob Hill': 16,\n        'Russian Hill': 18,\n        'Sunset District': 17,\n        'Haight-Ashbury': 6\n    },\n    'Sunset District': {\n        'Pacific Heights': 21,\n        'Nob Hill': 27,\n        'Russian Hill': 24,\n        'The Castro': 17,\n        'Haight-Ashbury': 15\n    },\n    'Haight-Ashbury': {\n        'Pacific Heights': 12,\n        'Nob Hill': 15,\n        'Russian Hill': 17,\n        'The Castro': 6,\n        'Sunset District': 15\n    }\n}\n\nfriends = {\n    'Ronald': {\n        'location': 'Nob Hill',\n        'available_start': '10:00AM',\n        'available_end': '5:00PM',\n        'duration': 105\n    },\n    'Sarah': {\n        'location': 'Russian Hill',\n        'available_start': '7:15AM',\n        'available_end': '9:30AM',\n        'duration': 45\n    },\n    'Helen': {\n        'location': 'The Castro',\n        'available_start': '1:30PM',\n        'available_end': '5:00PM',\n        'duration': 120\n    },\n    'Joshua': {\n        'location': 'Sunset District',\n        'available_start': '2:15PM',\n        'available_end': '7:30PM',\n        'duration': 90\n    },\n    'Margaret': {\n        'location': 'Haight-Ashbury',\n        'available_start': '10:15AM',\n        'available_end': '10:00PM',\n        'duration': 60\n    }\n}\n\ncurrent_location = 'Pacific Heights'\ncurrent_time = time_to_minutes('9:00AM')\n\ndef generate_schedules():\n    friend_names = list(friends.keys())\n    return permutations(friend_names)\n\ndef is_meeting_possible(schedule):\n    global current_location, current_time\n    loc = current_location\n    time = current_time\n    schedule_list = []\n    \n    for friend in schedule:\n        friend_data = friends[friend]\n        loc_to = friend_data['location']\n        travel_time = travel_times[loc][loc_to]\n        \n        # Travel to friend's location\n        arrival_time = time + travel_time\n        schedule_list.append({\n            \"action\": \"travel\",\n            \"location\": loc,\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(time),\n            \"to\": loc_to\n        })\n        \n        # Check if we can meet the friend\n        available_start = time_to_minutes(friend_data['available_start'])\n        available_end = time_to_minutes(friend_data['available_end'])\n        duration = friend_data['duration']\n        \n        # Calculate meeting start time\n        meeting_start = max(arrival_time, available_start)\n        if meeting_start > available_end:\n            return None  # Can't meet this friend\n        \n        # Check if there's enough time to meet\n        meeting_end = meeting_start + duration\n        if meeting_end > available_end:\n            return None  # Not enough time\n        \n        # Add waiting time if needed\n        if arrival_time < available_start:\n            wait_time = available_start - arrival_time\n            schedule_list.append({\n                \"action\": \"wait\",\n                \"location\": loc_to,\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_time\n            })\n        \n        # Add meeting\n        schedule_list.append({\n            \"action\": \"meet\",\n            \"location\": loc_to,\n            \"duration\": duration,\n            \"time\": minutes_to_time(meeting_start)\n        })\n        \n        # Update current time and location\n        time = meeting_end\n        loc = loc_to\n    \n    return schedule_list\n\ndef find_best_schedule():\n    best_schedule = None\n    max_meetings = 0\n    \n    for schedule in generate_schedules():\n        temp_schedule = is_meeting_possible(schedule)\n        if temp_schedule is not None:\n            meetings_count = sum(1 for item in temp_schedule if item['action'] == 'meet')\n            if meetings_count > max_meetings:\n                max_meetings = meetings_count\n                best_schedule = temp_schedule\n    \n    return best_schedule\n\n# Start with the initial location and time\ninitial_schedule = [{\n    \"action\": \"start\",\n    \"location\": \"Pacific Heights\",\n    \"time\": \"9:00AM\"\n}]\n\nbest_schedule = find_best_schedule()\nif best_schedule is not None:\n    final_schedule = initial_schedule + best_schedule\nelse:\n    final_schedule = initial_schedule\n\nprint(json.dumps({\"schedule\": final_schedule}, indent=2))\n```",
            "count": "meeting_planning_example_488",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:25AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "4:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "4:30PM",
                    "duration": 8,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "4:38PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "4:45PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "5:15PM",
                    "duration": 21,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "5:36PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "6:30PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 30,
                    "time": "4:00PM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 8,
                    "time": "4:38PM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 30,
                    "time": "4:45PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 21,
                    "time": "5:36PM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 120,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Input parameters\ntravel_times = {\n    'Bayview': {\n        'Embarcadero': 19,\n        'Richmond District': 25,\n        'Fisherman\\'s Wharf': 25\n    },\n    'Embarcadero': {\n        'Bayview': 21,\n        'Richmond District': 21,\n        'Fisherman\\'s Wharf': 6\n    },\n    'Richmond District': {\n        'Bayview': 26,\n        'Embarcadero': 19,\n        'Fisherman\\'s Wharf': 18\n    },\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'Embarcadero': 8,\n        'Richmond District': 18\n    }\n}\n\nfriends = {\n    'Jessica': {\n        'location': 'Embarcadero',\n        'start': '4:45PM',\n        'end': '7:00PM',\n        'min_duration': 30\n    },\n    'Sandra': {\n        'location': 'Richmond District',\n        'start': '6:30PM',\n        'end': '9:45PM',\n        'min_duration': 120\n    },\n    'Jason': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': '4:00PM',\n        'end': '4:45PM',\n        'min_duration': 30\n    }\n}\n\ncurrent_time = str_to_time('9:00AM')\ncurrent_location = 'Bayview'\nschedule = [{'action': 'start', 'location': current_location, 'time': time_to_str(current_time)}]\n\n# Function to find the best meeting order\ndef find_best_schedule():\n    from itertools import permutations\n    best_schedule = None\n    best_meetings = 0\n    best_duration = 0\n    \n    for order in permutations(['Jessica', 'Sandra', 'Jason']):\n        temp_schedule = []\n        temp_time = current_time\n        temp_location = current_location\n        temp_meetings = 0\n        temp_duration = 0\n        \n        for friend in order:\n            friend_info = friends[friend]\n            travel_duration = travel_times[temp_location][friend_info['location']]\n            arrival_time = temp_time + timedelta(minutes=travel_duration)\n            friend_start = str_to_time(friend_info['start'])\n            friend_end = str_to_time(friend_info['end'])\n            min_duration = friend_info['min_duration']\n            \n            # Check if we can meet this friend\n            if arrival_time > friend_end:\n                continue\n            \n            start_meeting = max(arrival_time, friend_start)\n            end_meeting = start_meeting + timedelta(minutes=min_duration)\n            \n            if end_meeting > friend_end:\n                continue\n            \n            # Add travel and meeting to temp schedule\n            if temp_location != friend_info['location']:\n                temp_schedule.append({\n                    'action': 'travel',\n                    'location': temp_location,\n                    'duration': travel_duration,\n                    'time': time_to_str(temp_time),\n                    'to': friend_info['location']\n                })\n            \n            if arrival_time < friend_start:\n                wait_duration = (friend_start - arrival_time).seconds // 60\n                temp_schedule.append({\n                    'action': 'wait',\n                    'location': friend_info['location'],\n                    'time': time_to_str(arrival_time),\n                    'duration': wait_duration\n                })\n            \n            temp_schedule.append({\n                'action': 'meet',\n                'location': friend_info['location'],\n                'duration': min_duration,\n                'time': time_to_str(start_meeting),\n                'with': friend\n            })\n            \n            temp_meetings += 1\n            temp_duration += min_duration\n            temp_time = end_meeting\n            temp_location = friend_info['location']\n        \n        if temp_meetings > best_meetings or (temp_meetings == best_meetings and temp_duration > best_duration):\n            best_meetings = temp_meetings\n            best_duration = temp_duration\n            best_schedule = temp_schedule\n    \n    return best_schedule\n\nbest_schedule = find_best_schedule()\nschedule.extend(best_schedule)\n\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
            "count": "meeting_planning_example_215",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "9:13AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "10:28AM",
                    "duration": 24,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "10:52AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:45AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "12:45PM",
                    "duration": 20,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "1:05PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "2:50PM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:03PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "5:03PM",
                    "duration": 5,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "5:08PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "6:38PM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:44PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "7:59PM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "8:18PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "9:13AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 24,
                    "time": "10:52AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:45AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 60,
                    "time": "11:45AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 20,
                    "time": "1:05PM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 105,
                    "time": "1:05PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "3:03PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 120,
                    "time": "3:03PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 5,
                    "time": "5:08PM",
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "5:08PM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "6:44PM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:44PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "8:18PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since midnight\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes since midnight to time string\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    \"Golden Gate Park\": {\n        \"Haight-Ashbury\": 7,\n        \"Fisherman's Wharf\": 24,\n        \"The Castro\": 13,\n        \"Chinatown\": 23,\n        \"Alamo Square\": 10,\n        \"North Beach\": 24,\n        \"Russian Hill\": 19\n    },\n    \"Haight-Ashbury\": {\n        \"Golden Gate Park\": 7,\n        \"Fisherman's Wharf\": 23,\n        \"The Castro\": 6,\n        \"Chinatown\": 19,\n        \"Alamo Square\": 5,\n        \"North Beach\": 19,\n        \"Russian Hill\": 17\n    },\n    \"Fisherman's Wharf\": {\n        \"Golden Gate Park\": 25,\n        \"Haight-Ashbury\": 22,\n        \"The Castro\": 26,\n        \"Chinatown\": 12,\n        \"Alamo Square\": 20,\n        \"North Beach\": 6,\n        \"Russian Hill\": 7\n    },\n    \"The Castro\": {\n        \"Golden Gate Park\": 11,\n        \"Haight-Ashbury\": 6,\n        \"Fisherman's Wharf\": 24,\n        \"Chinatown\": 20,\n        \"Alamo Square\": 8,\n        \"North Beach\": 20,\n        \"Russian Hill\": 18\n    },\n    \"Chinatown\": {\n        \"Golden Gate Park\": 23,\n        \"Haight-Ashbury\": 19,\n        \"Fisherman's Wharf\": 8,\n        \"The Castro\": 22,\n        \"Alamo Square\": 17,\n        \"North Beach\": 3,\n        \"Russian Hill\": 7\n    },\n    \"Alamo Square\": {\n        \"Golden Gate Park\": 9,\n        \"Haight-Ashbury\": 5,\n        \"Fisherman's Wharf\": 19,\n        \"The Castro\": 8,\n        \"Chinatown\": 16,\n        \"North Beach\": 15,\n        \"Russian Hill\": 13\n    },\n    \"North Beach\": {\n        \"Golden Gate Park\": 22,\n        \"Haight-Ashbury\": 18,\n        \"Fisherman's Wharf\": 5,\n        \"The Castro\": 22,\n        \"Chinatown\": 6,\n        \"Alamo Square\": 16,\n        \"Russian Hill\": 4\n    },\n    \"Russian Hill\": {\n        \"Golden Gate Park\": 21,\n        \"Haight-Ashbury\": 17,\n        \"Fisherman's Wharf\": 7,\n        \"The Castro\": 21,\n        \"Chinatown\": 9,\n        \"Alamo Square\": 15,\n        \"North Beach\": 5\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\"name\": \"Carol\", \"location\": \"Haight-Ashbury\", \"start\": \"9:30PM\", \"end\": \"10:30PM\", \"duration\": 60},\n    {\"name\": \"Laura\", \"location\": \"Fisherman's Wharf\", \"start\": \"11:45AM\", \"end\": \"9:30PM\", \"duration\": 60},\n    {\"name\": \"Karen\", \"location\": \"The Castro\", \"start\": \"7:15AM\", \"end\": \"2:00PM\", \"duration\": 75},\n    {\"name\": \"Elizabeth\", \"location\": \"Chinatown\", \"start\": \"12:15PM\", \"end\": \"9:30PM\", \"duration\": 75},\n    {\"name\": \"Deborah\", \"location\": \"Alamo Square\", \"start\": \"12:00PM\", \"end\": \"3:00PM\", \"duration\": 105},\n    {\"name\": \"Jason\", \"location\": \"North Beach\", \"start\": \"2:45PM\", \"end\": \"7:00PM\", \"duration\": 90},\n    {\"name\": \"Steven\", \"location\": \"Russian Hill\", \"start\": \"2:45PM\", \"end\": \"6:30PM\", \"duration\": 120}\n]\n\n# Convert friend times to minutes\nfor friend in friends:\n    friend[\"start_min\"] = time_to_minutes(friend[\"start\"])\n    friend[\"end_min\"] = time_to_minutes(friend[\"end\"])\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Golden Gate Park\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        location = friend[\"location\"]\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][location]\n        travel_start_time = current_time\n        travel_end_time = travel_start_time + travel_duration\n        \n        # Check if we can meet after travel\n        meeting_start = max(travel_end_time, friend[\"start_min\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        \n        if meeting_end > friend[\"end_min\"]:\n            return None, set()  # Can't meet this friend\n        \n        # Add travel and meeting to schedule\n        if travel_duration > 0:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(travel_start_time),\n                \"to\": location\n            })\n        \n        # Check if we need to wait\n        if travel_end_time < friend[\"start_min\"]:\n            wait_duration = friend[\"start_min\"] - travel_end_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location,\n                \"time\": minutes_to_time(travel_end_time),\n                \"duration\": wait_duration\n            })\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"duration\": friend[\"duration\"],\n            \"time\": minutes_to_time(meeting_start),\n            \"with\": friend[\"name\"]\n        })\n        \n        met_friends.add(friend[\"name\"])\n        current_time = meeting_end\n        current_location = location\n    \n    return schedule, met_friends\n\n# Generate all possible orders of meeting friends\nfriend_names = [f[\"name\"] for f in friends]\nbest_schedule = None\nbest_met = set()\n\n# We'll try permutations of subsets since trying all 7! permutations would be too slow\n# Instead, we'll try permutations of smaller subsets\nfor size in range(len(friend_names), 0, -1):\n    for subset in permutations(friend_names, size):\n        schedule, met = evaluate_schedule(subset)\n        if schedule and len(met) > len(best_met):\n            best_schedule = schedule\n            best_met = met\n        if len(best_met) == len(friend_names):\n            break\n    if len(best_met) == len(friend_names):\n        break\n\n# After finding the best schedule, we need to add Carol's meeting at the end\n# Since Carol is only available late, we'll handle her separately\nif best_schedule:\n    # Check if Carol is already in the schedule\n    carol_included = any(action.get(\"with\") == \"Carol\" for action in best_schedule)\n    \n    if not carol_included:\n        # Try to add Carol's meeting at the end\n        last_action = best_schedule[-1]\n        current_location = last_action[\"location\"]\n        current_time = time_to_minutes(last_action[\"time\"]) + last_action.get(\"duration\", 0)\n        \n        carol = next(f for f in friends if f[\"name\"] == \"Carol\")\n        travel_duration = travel_times[current_location][carol[\"location\"]]\n        travel_end_time = current_time + travel_duration\n        meeting_start = max(travel_end_time, carol[\"start_min\"])\n        meeting_end = meeting_start + carol[\"duration\"]\n        \n        if meeting_end <= carol[\"end_min\"]:\n            # Add travel to Carol\n            best_schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": carol[\"location\"]\n            })\n            \n            # Check if need to wait\n            if travel_end_time < carol[\"start_min\"]:\n                wait_duration = carol[\"start_min\"] - travel_end_time\n                best_schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": carol[\"location\"],\n                    \"time\": minutes_to_time(travel_end_time),\n                    \"duration\": wait_duration\n                })\n            \n            # Add meeting with Carol\n            best_schedule.append({\n                \"action\": \"meet\",\n                \"location\": carol[\"location\"],\n                \"duration\": carol[\"duration\"],\n                \"time\": minutes_to_time(meeting_start),\n                \"with\": \"Carol\"\n            })\n\n# Final output\nif best_schedule:\n    output = {\"schedule\": best_schedule}\nelse:\n    output = {\"schedule\": []}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_624",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "9:20AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:05AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "10:20AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "10:35AM",
                    "duration": 17,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:52AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "11:52AM",
                    "duration": 17,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:09PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "12:24PM",
                    "duration": 20,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:44PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "1:15PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "2:00PM",
                    "duration": 24,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "2:24PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "3:30PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "4:00PM",
                    "duration": 18,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "4:18PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "6:03PM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "6:16PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "8:16PM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "8:23PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "10:45AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 15,
                    "time": "10:45AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "11:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "11:19AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 15,
                    "time": "11:49AM",
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 45,
                    "time": "11:49AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "12:45PM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "12:45PM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 22,
                    "time": "2:07PM",
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:07PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 24,
                    "time": "3:16PM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "3:30PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 30,
                    "time": "3:30PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "4:07PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 120,
                    "time": "5:00PM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "7:07PM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "7:07PM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "8:15PM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 105,
                    "time": "8:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Embarcadero': {\n        'Fisherman\\'s Wharf': 6,\n        'Financial District': 5,\n        'Russian Hill': 8,\n        'Marina District': 12,\n        'Richmond District': 21,\n        'Pacific Heights': 11,\n        'Haight-Ashbury': 21,\n        'Presidio': 20,\n        'Nob Hill': 10,\n        'The Castro': 25\n    },\n    'Fisherman\\'s Wharf': {\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Russian Hill': 7,\n        'Marina District': 9,\n        'Richmond District': 18,\n        'Pacific Heights': 12,\n        'Haight-Ashbury': 22,\n        'Presidio': 17,\n        'Nob Hill': 11,\n        'The Castro': 27\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Fisherman\\'s Wharf': 10,\n        'Russian Hill': 11,\n        'Marina District': 15,\n        'Richmond District': 21,\n        'Pacific Heights': 13,\n        'Haight-Ashbury': 19,\n        'Presidio': 22,\n        'Nob Hill': 8,\n        'The Castro': 20\n    },\n    'Russian Hill': {\n        'Embarcadero': 8,\n        'Fisherman\\'s Wharf': 7,\n        'Financial District': 11,\n        'Marina District': 7,\n        'Richmond District': 14,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 17,\n        'Presidio': 14,\n        'Nob Hill': 5,\n        'The Castro': 21\n    },\n    'Marina District': {\n        'Embarcadero': 14,\n        'Fisherman\\'s Wharf': 10,\n        'Financial District': 17,\n        'Russian Hill': 8,\n        'Richmond District': 11,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 16,\n        'Presidio': 10,\n        'Nob Hill': 12,\n        'The Castro': 22\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Fisherman\\'s Wharf': 18,\n        'Financial District': 22,\n        'Russian Hill': 13,\n        'Marina District': 9,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 10,\n        'Presidio': 7,\n        'Nob Hill': 17,\n        'The Castro': 16\n    },\n    'Pacific Heights': {\n        'Embarcadero': 10,\n        'Fisherman\\'s Wharf': 13,\n        'Financial District': 13,\n        'Russian Hill': 7,\n        'Marina District': 6,\n        'Richmond District': 12,\n        'Haight-Ashbury': 11,\n        'Presidio': 11,\n        'Nob Hill': 8,\n        'The Castro': 16\n    },\n    'Haight-Ashbury': {\n        'Embarcadero': 20,\n        'Fisherman\\'s Wharf': 23,\n        'Financial District': 21,\n        'Russian Hill': 17,\n        'Marina District': 17,\n        'Richmond District': 10,\n        'Pacific Heights': 12,\n        'Presidio': 15,\n        'Nob Hill': 15,\n        'The Castro': 6\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Fisherman\\'s Wharf': 19,\n        'Financial District': 23,\n        'Russian Hill': 14,\n        'Marina District': 11,\n        'Richmond District': 7,\n        'Pacific Heights': 11,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'The Castro': 21\n    },\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'Fisherman\\'s Wharf': 10,\n        'Financial District': 9,\n        'Russian Hill': 5,\n        'Marina District': 11,\n        'Richmond District': 14,\n        'Pacific Heights': 8,\n        'Haight-Ashbury': 13,\n        'Presidio': 17,\n        'The Castro': 17\n    },\n    'The Castro': {\n        'Embarcadero': 22,\n        'Fisherman\\'s Wharf': 24,\n        'Financial District': 21,\n        'Russian Hill': 18,\n        'Marina District': 21,\n        'Richmond District': 16,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 6,\n        'Presidio': 20,\n        'Nob Hill': 16\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Stephanie': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': '3:30PM',\n        'end': '10:00PM',\n        'duration': 30\n    },\n    'Lisa': {\n        'location': 'Financial District',\n        'start': '10:45AM',\n        'end': '5:15PM',\n        'duration': 15\n    },\n    'Melissa': {\n        'location': 'Russian Hill',\n        'start': '5:00PM',\n        'end': '9:45PM',\n        'duration': 120\n    },\n    'Betty': {\n        'location': 'Marina District',\n        'start': '10:45AM',\n        'end': '2:15PM',\n        'duration': 60\n    },\n    'Sarah': {\n        'location': 'Richmond District',\n        'start': '4:15PM',\n        'end': '7:30PM',\n        'duration': 105\n    },\n    'Daniel': {\n        'location': 'Pacific Heights',\n        'start': '6:30PM',\n        'end': '9:45PM',\n        'duration': 60\n    },\n    'Joshua': {\n        'location': 'Haight-Ashbury',\n        'start': '9:00AM',\n        'end': '3:30PM',\n        'duration': 15\n    },\n    'Joseph': {\n        'location': 'Presidio',\n        'start': '7:00AM',\n        'end': '1:00PM',\n        'duration': 45\n    },\n    'Andrew': {\n        'location': 'Nob Hill',\n        'start': '7:45PM',\n        'end': '10:00PM',\n        'duration': 105\n    },\n    'John': {\n        'location': 'The Castro',\n        'start': '1:15PM',\n        'end': '7:45PM',\n        'duration': 45\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_str = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_str.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef get_travel_time(from_loc, to_loc):\n    if from_loc == to_loc:\n        return 0\n    try:\n        return travel_times[from_loc][to_loc]\n    except KeyError:\n        return travel_times[to_loc][from_loc]\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    start_time = time_to_minutes(friend['start'])\n    end_time = time_to_minutes(friend['end'])\n    travel_time = get_travel_time(current_location, friend['location'])\n    arrival_time = current_time + travel_time\n    if arrival_time > end_time:\n        return None\n    meet_start = max(arrival_time, start_time)\n    meet_end = meet_start + friend['duration']\n    if meet_end > end_time:\n        return None\n    return {\n        'name': friend_name,\n        'location': friend['location'],\n        'start': meet_start,\n        'end': meet_end,\n        'travel_time': travel_time,\n        'duration': friend['duration']\n    }\n\ndef generate_schedule():\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Embarcadero'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    while True:\n        best_friend = None\n        best_meeting = None\n        for friend in friends:\n            if friend in met_friends:\n                continue\n            meeting = can_meet_friend(current_time, friend, current_location)\n            if meeting:\n                if best_meeting is None or meeting['start'] < best_meeting['start']:\n                    best_meeting = meeting\n                    best_friend = friend\n        \n        if best_meeting is None:\n            break\n        \n        # Add travel action\n        if current_location != best_meeting['location']:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': best_meeting['travel_time'],\n                'time': minutes_to_time(current_time),\n                'to': best_meeting['location']\n            })\n            current_time += best_meeting['travel_time']\n            current_location = best_meeting['location']\n        \n        # Check if we need to wait\n        if current_time < best_meeting['start']:\n            wait_time = best_meeting['start'] - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': wait_time\n            })\n            current_time = best_meeting['start']\n        \n        # Add meeting action\n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': best_meeting['duration'],\n            'time': minutes_to_time(current_time),\n            'friend': best_friend\n        })\n        current_time += best_meeting['duration']\n        met_friends.add(best_friend)\n    \n    return schedule\n\nschedule = generate_schedule()\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
            "count": "meeting_planning_example_978",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 30,
                    "time": "11:15AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 19,
                    "time": "12:04PM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "12:04PM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "1:49PM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "1:49PM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 11,
                    "time": "2:15PM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 30,
                    "time": "2:15PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "2:52PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 120,
                    "time": "2:52PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 5,
                    "time": "4:57PM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 15,
                    "time": "7:15PM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 6,
                    "time": "7:36PM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 75,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ntravel_times = {\n    \"Nob Hill\": {\n        \"Embarcadero\": 9,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 13,\n        \"Union Square\": 7,\n        \"North Beach\": 8,\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Golden Gate Park\": 17,\n        \"Marina District\": 11,\n        \"Russian Hill\": 5\n    },\n    \"Embarcadero\": {\n        \"Nob Hill\": 10,\n        \"The Castro\": 25,\n        \"Haight-Ashbury\": 21,\n        \"Union Square\": 10,\n        \"North Beach\": 5,\n        \"Pacific Heights\": 11,\n        \"Chinatown\": 7,\n        \"Golden Gate Park\": 25,\n        \"Marina District\": 12,\n        \"Russian Hill\": 8\n    },\n    \"The Castro\": {\n        \"Nob Hill\": 16,\n        \"Embarcadero\": 22,\n        \"Haight-Ashbury\": 6,\n        \"Union Square\": 19,\n        \"North Beach\": 20,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 22,\n        \"Golden Gate Park\": 11,\n        \"Marina District\": 21,\n        \"Russian Hill\": 18\n    },\n    \"Haight-Ashbury\": {\n        \"Nob Hill\": 15,\n        \"Embarcadero\": 20,\n        \"The Castro\": 6,\n        \"Union Square\": 19,\n        \"North Beach\": 19,\n        \"Pacific Heights\": 12,\n        \"Chinatown\": 19,\n        \"Golden Gate Park\": 7,\n        \"Marina District\": 17,\n        \"Russian Hill\": 17\n    },\n    \"Union Square\": {\n        \"Nob Hill\": 9,\n        \"Embarcadero\": 11,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 18,\n        \"North Beach\": 10,\n        \"Pacific Heights\": 15,\n        \"Chinatown\": 7,\n        \"Golden Gate Park\": 22,\n        \"Marina District\": 18,\n        \"Russian Hill\": 13\n    },\n    \"North Beach\": {\n        \"Nob Hill\": 7,\n        \"Embarcadero\": 6,\n        \"The Castro\": 23,\n        \"Haight-Ashbury\": 18,\n        \"Union Square\": 7,\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Golden Gate Park\": 22,\n        \"Marina District\": 9,\n        \"Russian Hill\": 4\n    },\n    \"Pacific Heights\": {\n        \"Nob Hill\": 8,\n        \"Embarcadero\": 10,\n        \"The Castro\": 16,\n        \"Haight-Ashbury\": 11,\n        \"Union Square\": 12,\n        \"North Beach\": 9,\n        \"Chinatown\": 11,\n        \"Golden Gate Park\": 15,\n        \"Marina District\": 6,\n        \"Russian Hill\": 7\n    },\n    \"Chinatown\": {\n        \"Nob Hill\": 9,\n        \"Embarcadero\": 5,\n        \"The Castro\": 22,\n        \"Haight-Ashbury\": 19,\n        \"Union Square\": 7,\n        \"North Beach\": 3,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 23,\n        \"Marina District\": 12,\n        \"Russian Hill\": 7\n    },\n    \"Golden Gate Park\": {\n        \"Nob Hill\": 20,\n        \"Embarcadero\": 25,\n        \"The Castro\": 13,\n        \"Haight-Ashbury\": 7,\n        \"Union Square\": 22,\n        \"North Beach\": 23,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 23,\n        \"Marina District\": 16,\n        \"Russian Hill\": 19\n    },\n    \"Marina District\": {\n        \"Nob Hill\": 12,\n        \"Embarcadero\": 14,\n        \"The Castro\": 22,\n        \"Haight-Ashbury\": 16,\n        \"Union Square\": 16,\n        \"North Beach\": 11,\n        \"Pacific Heights\": 7,\n        \"Chinatown\": 15,\n        \"Golden Gate Park\": 18,\n        \"Russian Hill\": 8\n    },\n    \"Russian Hill\": {\n        \"Nob Hill\": 5,\n        \"Embarcadero\": 8,\n        \"The Castro\": 21,\n        \"Haight-Ashbury\": 17,\n        \"Union Square\": 10,\n        \"North Beach\": 5,\n        \"Pacific Heights\": 7,\n        \"Chinatown\": 9,\n        \"Golden Gate Park\": 21,\n        \"Marina District\": 7\n    }\n}\n\nfriends = [\n    {\"name\": \"Mary\", \"location\": \"Embarcadero\", \"start\": \"8:00PM\", \"end\": \"9:15PM\", \"duration\": 75},\n    {\"name\": \"Kenneth\", \"location\": \"The Castro\", \"start\": \"11:15AM\", \"end\": \"7:15PM\", \"duration\": 30},\n    {\"name\": \"Joseph\", \"location\": \"Haight-Ashbury\", \"start\": \"8:00PM\", \"end\": \"10:00PM\", \"duration\": 120},\n    {\"name\": \"Sarah\", \"location\": \"Union Square\", \"start\": \"11:45AM\", \"end\": \"2:30PM\", \"duration\": 90},\n    {\"name\": \"Thomas\", \"location\": \"North Beach\", \"start\": \"7:15PM\", \"end\": \"7:45PM\", \"duration\": 15},\n    {\"name\": \"Daniel\", \"location\": \"Pacific Heights\", \"start\": \"1:45PM\", \"end\": \"8:30PM\", \"duration\": 15},\n    {\"name\": \"Richard\", \"location\": \"Chinatown\", \"start\": \"8:00AM\", \"end\": \"6:45PM\", \"duration\": 30},\n    {\"name\": \"Mark\", \"location\": \"Golden Gate Park\", \"start\": \"5:30PM\", \"end\": \"9:30PM\", \"duration\": 120},\n    {\"name\": \"David\", \"location\": \"Marina District\", \"start\": \"8:00PM\", \"end\": \"9:00PM\", \"duration\": 60},\n    {\"name\": \"Karen\", \"location\": \"Russian Hill\", \"start\": \"1:15PM\", \"end\": \"6:30PM\", \"duration\": 120}\n]\n\ndef get_travel_time(from_loc, to_loc):\n    if from_loc == to_loc:\n        return 0\n    try:\n        return travel_times[from_loc][to_loc]\n    except KeyError:\n        return travel_times[to_loc][from_loc]\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_loc = \"Nob Hill\"\n    schedule = [{\"action\": \"start\", \"location\": current_loc, \"time\": minutes_to_time(current_time)}]\n    \n    for friend in order:\n        friend_info = next(f for f in friends if f[\"name\"] == friend[\"name\"])\n        travel_duration = get_travel_time(current_loc, friend_info[\"location\"])\n        arrival_time = current_time + travel_duration\n        start_time = time_to_minutes(friend_info[\"start\"])\n        end_time = time_to_minutes(friend_info[\"end\"])\n        \n        if arrival_time > end_time:\n            return None\n        \n        meet_start = max(arrival_time, start_time)\n        meet_end = meet_start + friend_info[\"duration\"]\n        \n        if meet_end > end_time:\n            return None\n        \n        if travel_duration > 0:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_loc,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": friend_info[\"location\"]\n            })\n        \n        if arrival_time < start_time:\n            wait_duration = start_time - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend_info[\"location\"],\n                \"time\": minutes_to_time(arrival_time)\n            })\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend_info[\"location\"],\n            \"duration\": friend_info[\"duration\"],\n            \"time\": minutes_to_time(meet_start)\n        })\n        \n        current_time = meet_end\n        current_loc = friend_info[\"location\"]\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return -1\n    total_meetings = sum(1 for event in schedule if event[\"action\"] == \"meet\")\n    total_duration = sum(event[\"duration\"] for event in schedule if event[\"action\"] == \"meet\")\n    return total_meetings * 1000 + total_duration\n\nbest_schedule = None\nbest_score = -1\n\nfor _ in range(1000):\n    import random\n    random.shuffle(friends)\n    schedule = generate_schedule(friends)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
            "count": "meeting_planning_example_934",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "10:00AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "11:15AM",
                    "duration": 16,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "11:31AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "1:45PM",
                    "duration": 17,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "2:02PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "2:15PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "3:00PM",
                    "duration": 10,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:10PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:30PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "4:00PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "4:15PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "5:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "7:00PM",
                    "duration": 15,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 30,
                    "time": "1:15PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 17,
                    "time": "2:02PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "2:15PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 19,
                    "time": "3:19PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "3:19PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "4:57PM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 30,
                    "time": "4:57PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "5:42PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "5:42PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 15,
                    "time": "7:42PM",
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 60,
                    "time": "7:42PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef time_add(start_time_str, minutes):\n    start_time = parse_time(start_time_str)\n    new_time = start_time + timedelta(minutes=minutes)\n    return format_time(new_time)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        ('The Castro', 'Presidio'): 20,\n        ('The Castro', 'Sunset District'): 17,\n        ('The Castro', 'Haight-Ashbury'): 6,\n        ('The Castro', 'Mission District'): 7,\n        ('The Castro', 'Golden Gate Park'): 11,\n        ('The Castro', 'Russian Hill'): 18,\n        ('Presidio', 'The Castro'): 21,\n        ('Presidio', 'Sunset District'): 15,\n        ('Presidio', 'Haight-Ashbury'): 15,\n        ('Presidio', 'Mission District'): 26,\n        ('Presidio', 'Golden Gate Park'): 12,\n        ('Presidio', 'Russian Hill'): 14,\n        ('Sunset District', 'The Castro'): 17,\n        ('Sunset District', 'Presidio'): 16,\n        ('Sunset District', 'Haight-Ashbury'): 15,\n        ('Sunset District', 'Mission District'): 24,\n        ('Sunset District', 'Golden Gate Park'): 11,\n        ('Sunset District', 'Russian Hill'): 24,\n        ('Haight-Ashbury', 'The Castro'): 6,\n        ('Haight-Ashbury', 'Presidio'): 15,\n        ('Haight-Ashbury', 'Sunset District'): 15,\n        ('Haight-Ashbury', 'Mission District'): 11,\n        ('Haight-Ashbury', 'Golden Gate Park'): 7,\n        ('Haight-Ashbury', 'Russian Hill'): 17,\n        ('Mission District', 'The Castro'): 7,\n        ('Mission District', 'Presidio'): 25,\n        ('Mission District', 'Sunset District'): 24,\n        ('Mission District', 'Haight-Ashbury'): 12,\n        ('Mission District', 'Golden Gate Park'): 17,\n        ('Mission District', 'Russian Hill'): 15,\n        ('Golden Gate Park', 'The Castro'): 13,\n        ('Golden Gate Park', 'Presidio'): 11,\n        ('Golden Gate Park', 'Sunset District'): 10,\n        ('Golden Gate Park', 'Haight-Ashbury'): 7,\n        ('Golden Gate Park', 'Mission District'): 17,\n        ('Golden Gate Park', 'Russian Hill'): 19,\n        ('Russian Hill', 'The Castro'): 21,\n        ('Russian Hill', 'Presidio'): 14,\n        ('Russian Hill', 'Sunset District'): 23,\n        ('Russian Hill', 'Haight-Ashbury'): 17,\n        ('Russian Hill', 'Mission District'): 16,\n        ('Russian Hill', 'Golden Gate Park'): 21\n    }\n    return travel_times.get((from_loc, to_loc), 0)\n\ndef schedule_meetings():\n    current_time = \"9:00AM\"\n    current_location = \"The Castro\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n    \n    friends = [\n        {\"name\": \"Mark\", \"location\": \"Russian Hill\", \"start\": \"10:00AM\", \"end\": \"9:15PM\", \"duration\": 75},\n        {\"name\": \"William\", \"location\": \"Mission District\", \"start\": \"1:15PM\", \"end\": \"7:30PM\", \"duration\": 30},\n        {\"name\": \"Robert\", \"location\": \"Golden Gate Park\", \"start\": \"2:15PM\", \"end\": \"9:30PM\", \"duration\": 45},\n        {\"name\": \"Linda\", \"location\": \"Sunset District\", \"start\": \"3:30PM\", \"end\": \"7:45PM\", \"duration\": 30},\n        {\"name\": \"Elizabeth\", \"location\": \"Haight-Ashbury\", \"start\": \"5:15PM\", \"end\": \"7:30PM\", \"duration\": 105},\n        {\"name\": \"Rebecca\", \"location\": \"Presidio\", \"start\": \"6:15PM\", \"end\": \"8:45PM\", \"duration\": 60}\n    ]\n    \n    for friend in sorted(friends, key=lambda x: parse_time(x[\"start\"])):\n        travel_time = get_travel_time(current_location, friend[\"location\"])\n        arrival_time = time_add(current_time, travel_time)\n        \n        if parse_time(arrival_time) < parse_time(friend[\"start\"]):\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": current_time,\n                \"to\": friend[\"location\"]\n            })\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend[\"location\"],\n                \"time\": arrival_time\n            })\n            current_time = friend[\"start\"]\n        else:\n            if parse_time(arrival_time) > parse_time(friend[\"end\"]):\n                continue\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": current_time,\n                \"to\": friend[\"location\"]\n            })\n            current_time = arrival_time\n        \n        meeting_end = time_add(current_time, friend[\"duration\"])\n        if parse_time(meeting_end) > parse_time(friend[\"end\"]):\n            actual_duration = (parse_time(friend[\"end\"]) - parse_time(current_time)).total_seconds() / 60\n            if actual_duration <= 0:\n                continue\n            meeting_end = friend[\"end\"]\n            friend[\"duration\"] = actual_duration\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"duration\": friend[\"duration\"],\n            \"time\": current_time,\n            \"with\": friend[\"name\"]\n        })\n        current_time = meeting_end\n        current_location = friend[\"location\"]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = schedule_meetings()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_575",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:17AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:47AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:57AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "1:45PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "2:45PM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "3:03PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "8:00PM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "10:15AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "11:03AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "1:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 60,
                    "time": "1:45PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "2:52PM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "2:52PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "3:40PM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\n# Input parameters\nstart_location = \"Bayview\"\nstart_time = parse_time(\"9:00AM\")\n\n# Friend constraints\nfriends = [\n    {\"name\": \"Barbara\", \"location\": \"North Beach\", \"start\": parse_time(\"1:45PM\"), \"end\": parse_time(\"8:15PM\"), \"min_duration\": 60},\n    {\"name\": \"Margaret\", \"location\": \"Presidio\", \"start\": parse_time(\"10:15AM\"), \"end\": parse_time(\"3:15PM\"), \"min_duration\": 30},\n    {\"name\": \"Kevin\", \"location\": \"Haight-Ashbury\", \"start\": parse_time(\"8:00PM\"), \"end\": parse_time(\"8:45PM\"), \"min_duration\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"Union Square\", \"start\": parse_time(\"7:45AM\"), \"end\": parse_time(\"4:45PM\"), \"min_duration\": 30}\n]\n\n# Travel times in minutes\ntravel_times = {\n    \"Bayview\": {\"North Beach\": 21, \"Presidio\": 31, \"Haight-Ashbury\": 19, \"Union Square\": 17},\n    \"North Beach\": {\"Bayview\": 22, \"Presidio\": 17, \"Haight-Ashbury\": 18, \"Union Square\": 7},\n    \"Presidio\": {\"Bayview\": 31, \"North Beach\": 18, \"Haight-Ashbury\": 15, \"Union Square\": 22},\n    \"Haight-Ashbury\": {\"Bayview\": 18, \"North Beach\": 19, \"Presidio\": 15, \"Union Square\": 17},\n    \"Union Square\": {\"Bayview\": 15, \"North Beach\": 10, \"Presidio\": 24, \"Haight-Ashbury\": 18}\n}\n\ndef compute_schedule():\n    current_time = start_time\n    current_location = start_location\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n    met_friends = []\n\n    # Function to check if a friend can be met\n    def can_meet(friend, arrival_time):\n        if arrival_time < friend[\"start\"]:\n            available_time = (friend[\"end\"] - friend[\"start\"]).total_seconds() / 60\n            if available_time >= friend[\"min_duration\"]:\n                return friend[\"start\"]\n        else:\n            available_time = (friend[\"end\"] - arrival_time).total_seconds() / 60\n            if available_time >= friend[\"min_duration\"]:\n                return arrival_time\n        return None\n\n    # Try to meet all friends in an optimal order\n    remaining_friends = friends.copy()\n    while remaining_friends:\n        best_friend = None\n        best_time = None\n        best_travel = float('inf')\n        best_start_time = None\n\n        for friend in remaining_friends:\n            if friend[\"name\"] in [f[\"name\"] for f in met_friends]:\n                continue\n            travel_duration = travel_times[current_location][friend[\"location\"]]\n            arrival_time = add_minutes(current_time, travel_duration)\n            meet_time = can_meet(friend, arrival_time)\n            if meet_time:\n                if best_friend is None or travel_duration < best_travel:\n                    best_friend = friend\n                    best_travel = travel_duration\n                    best_start_time = meet_time\n\n        if best_friend is None:\n            break\n\n        # Add travel action\n        travel_duration = travel_times[current_location][best_friend[\"location\"]]\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": best_friend[\"location\"],\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": best_friend[\"location\"]\n        })\n        current_time = add_minutes(current_time, travel_duration)\n        current_location = best_friend[\"location\"]\n\n        # Add wait action if needed\n        if current_time < best_start_time:\n            wait_duration = (best_start_time - current_time).total_seconds() / 60\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": format_time(current_time)\n            })\n            current_time = best_start_time\n\n        # Add meet action\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": best_friend[\"min_duration\"],\n            \"time\": format_time(current_time)\n        })\n        current_time = add_minutes(current_time, best_friend[\"min_duration\"])\n        met_friends.append(best_friend)\n        remaining_friends.remove(best_friend)\n\n    return schedule\n\nschedule = compute_schedule()\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_356",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 30,
                    "time": "10:15AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "11:07AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "12:45PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 120,
                    "time": "12:45PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 13,
                    "time": "2:58PM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "2:58PM"
                }
            ],
            "type_error": "TypeError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    new_time = time_obj + timedelta(minutes=minutes_to_add)\n    return new_time.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    travel_times = {\n        ('Union Square', 'Mission District'): 14,\n        ('Union Square', 'Bayview'): 15,\n        ('Union Square', 'Sunset District'): 26,\n        ('Mission District', 'Union Square'): 15,\n        ('Mission District', 'Bayview'): 15,\n        ('Mission District', 'Sunset District'): 24,\n        ('Bayview', 'Union Square'): 17,\n        ('Bayview', 'Mission District'): 13,\n        ('Bayview', 'Sunset District'): 23,\n        ('Sunset District', 'Union Square'): 30,\n        ('Sunset District', 'Mission District'): 24,\n        ('Sunset District', 'Bayview'): 22,\n    }\n\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Union Square'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": '9:00AM'}]\n\n    # Carol at Sunset District 10:15AM-11:45AM, min 30 mins\n    carol_start = time_to_minutes('10:15AM')\n    carol_end = time_to_minutes('11:45AM')\n    travel_to_sunset = travel_times[(current_location, 'Sunset District')]\n    arrival_sunset = current_time + travel_to_sunset\n\n    if arrival_sunset <= carol_end - 30:\n        meet_start = max(arrival_sunset, carol_start)\n        meet_duration = min(30, carol_end - meet_start)\n        if meet_duration >= 30:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_sunset,\n                \"time\": minutes_to_time(current_time),\n                \"to\": \"Sunset District\"\n            })\n            current_time += travel_to_sunset\n            current_location = 'Sunset District'\n            if current_time < carol_start:\n                wait_time = carol_start - current_time\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": minutes_to_time(current_time),\n                })\n                current_time += wait_time\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": 30,\n                \"time\": minutes_to_time(current_time),\n            })\n            current_time += 30\n\n    # Karen at Bayview 12:45PM-3:00PM, min 120 mins\n    karen_start = time_to_minutes('12:45PM')\n    karen_end = time_to_minutes('3:00PM')\n    travel_to_bayview = travel_times[(current_location, 'Bayview')]\n    arrival_bayview = current_time + travel_to_bayview\n\n    if arrival_bayview <= karen_end - 120:\n        meet_start = max(arrival_bayview, karen_start)\n        meet_duration = min(120, karen_end - meet_start)\n        if meet_duration >= 120:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_bayview,\n                \"time\": minutes_to_time(current_time),\n                \"to\": \"Bayview\"\n            })\n            current_time += travel_to_bayview\n            current_location = 'Bayview'\n            if current_time < karen_start:\n                wait_time = karen_start - current_time\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": minutes_to_time(current_time),\n                })\n                current_time += wait_time\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": 120,\n                \"time\": minutes_to_time(current_time),\n            })\n            current_time += 120\n\n    # Rebecca at Mission District 11:30AM-8:15PM, min 120 mins\n    rebecca_start = time_to_minutes('11:30AM')\n    rebecca_end = time_to_minutes('8:15PM')\n    travel_to_mission = travel_times[(current_location, 'Mission District')]\n    arrival_mission = current_time + travel_to_mission\n\n    if arrival_mission <= rebecca_end - 120:\n        meet_start = max(arrival_mission, rebecca_start)\n        meet_duration = min(120, rebecca_end - meet_start)\n        if meet_duration >= 120:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_mission,\n                \"time\": minutes_to_time(current_time),\n                \"to\": \"Mission District\"\n            })\n            current_time += travel_to_mission\n            current_location = 'Mission District'\n            if current_time < rebecca_start:\n                wait_time = rebecca_start - current_time\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": minutes_to_time(current_time),\n                })\n                current_time += wait_time\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": 120,\n                \"time\": minutes_to_time(current_time),\n            })\n            current_time += 120\n\n    # Convert times back to string format\n    for entry in schedule:\n        if 'time' in entry:\n            entry['time'] = add_minutes_to_time('12:00AM', entry['time']).replace(':00', ':0') if ':00' in entry['time'] else entry['time']\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_286",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "4:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "6:00PM",
                    "duration": 7,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "6:07PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "8:07PM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:29PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "4:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "4:15PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 7,
                    "time": "6:07PM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 120,
                    "time": "6:07PM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "8:29PM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 75,
                    "time": "8:29PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    new_time = time_obj + timedelta(minutes=minutes_to_add)\n    return new_time.strftime('%I:%M%p').lstrip('0')\n\n# Input parameters\ntravel_times = {\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Richmond District': 18,\n        'Financial District': 11\n    },\n    'Presidio': {\n        'Fisherman\\'s Wharf': 19,\n        'Richmond District': 7,\n        'Financial District': 23\n    },\n    'Richmond District': {\n        'Fisherman\\'s Wharf': 18,\n        'Presidio': 7,\n        'Financial District': 22\n    },\n    'Financial District': {\n        'Fisherman\\'s Wharf': 10,\n        'Presidio': 22,\n        'Richmond District': 21\n    }\n}\n\nfriends = {\n    'Emily': {\n        'location': 'Presidio',\n        'available_start': '4:15PM',\n        'available_end': '9:00PM',\n        'meet_duration': 105\n    },\n    'Joseph': {\n        'location': 'Richmond District',\n        'available_start': '5:15PM',\n        'available_end': '10:00PM',\n        'meet_duration': 120\n    },\n    'Melissa': {\n        'location': 'Financial District',\n        'available_start': '3:45PM',\n        'available_end': '9:45PM',\n        'meet_duration': 75\n    }\n}\n\ncurrent_location = 'Fisherman\\'s Wharf'\ncurrent_time = '9:00AM'\nschedule = [{'action': 'start', 'location': current_location, 'time': current_time}]\n\ndef calculate_schedule():\n    global current_location, current_time, schedule\n    \n    # Calculate all possible meeting orders\n    from itertools import permutations\n    meeting_orders = list(permutations(['Emily', 'Joseph', 'Melissa']))\n    \n    best_schedule = None\n    best_meetings = 0\n    \n    for order in meeting_orders:\n        temp_location = current_location\n        temp_time = current_time\n        temp_schedule = schedule.copy()\n        meetings = 0\n        \n        for friend in order:\n            friend_data = friends[friend]\n            loc = friend_data['location']\n            start_avail = friend_data['available_start']\n            end_avail = friend_data['available_end']\n            duration = friend_data['meet_duration']\n            \n            # Calculate travel time\n            travel_duration = travel_times[temp_location][loc]\n            arrival_time_min = time_to_minutes(temp_time) + travel_duration\n            arrival_time = minutes_to_time(arrival_time_min)\n            \n            # Add travel to schedule\n            temp_schedule.append({\n                'action': 'travel',\n                'location': temp_location,\n                'duration': travel_duration,\n                'time': temp_time,\n                'to': loc\n            })\n            \n            # Calculate meeting start time\n            start_avail_min = time_to_minutes(start_avail)\n            end_avail_min = time_to_minutes(end_avail)\n            \n            if arrival_time_min < start_avail_min:\n                # Need to wait\n                wait_duration = start_avail_min - arrival_time_min\n                temp_schedule.append({\n                    'action': 'wait',\n                    'location': loc,\n                    'time': arrival_time\n                })\n                meeting_start_min = start_avail_min\n            else:\n                meeting_start_min = arrival_time_min\n            \n            # Check if meeting is possible\n            if meeting_start_min + duration <= end_avail_min:\n                # Add meeting to schedule\n                temp_schedule.append({\n                    'action': 'meet',\n                    'location': loc,\n                    'duration': duration,\n                    'time': minutes_to_time(meeting_start_min)\n                })\n                meetings += 1\n                temp_location = loc\n                temp_time = minutes_to_time(meeting_start_min + duration)\n            else:\n                break\n        \n        if meetings > best_meetings or (meetings == best_meetings and len(temp_schedule) < len(best_schedule)):\n            best_meetings = meetings\n            best_schedule = temp_schedule\n    \n    return best_schedule\n\noptimal_schedule = calculate_schedule()\n\n# Convert to JSON\noutput = {'schedule': optimal_schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_210",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "10:01AM",
                    "duration": 22,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "10:23AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "11:23AM",
                    "duration": 18,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:41AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "12:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "2:00PM",
                    "duration": 14,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "2:14PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "2:45PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "3:45PM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "3:57PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "5:42PM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "6:07PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "8:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:30PM",
                    "duration": 30,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:00PM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "9:16AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 22,
                    "time": "10:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 60,
                    "time": "10:23AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 18,
                    "time": "11:41AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "12:15PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 14,
                    "time": "2:14PM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "2:45PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 60,
                    "time": "2:45PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "3:57PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "3:57PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 10,
                    "time": "5:52PM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Presidio\": 18,\n        \"Chinatown\": 16,\n        \"Sunset District\": 16,\n        \"The Castro\": 8,\n        \"Embarcadero\": 17,\n        \"Golden Gate Park\": 9\n    },\n    \"Russian Hill\": {\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"Chinatown\": 9,\n        \"Sunset District\": 23,\n        \"The Castro\": 21,\n        \"Embarcadero\": 8,\n        \"Golden Gate Park\": 21\n    },\n    \"Presidio\": {\n        \"Alamo Square\": 18,\n        \"Russian Hill\": 14,\n        \"Chinatown\": 21,\n        \"Sunset District\": 15,\n        \"The Castro\": 21,\n        \"Embarcadero\": 20,\n        \"Golden Gate Park\": 12\n    },\n    \"Chinatown\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 7,\n        \"Presidio\": 19,\n        \"Sunset District\": 29,\n        \"The Castro\": 22,\n        \"Embarcadero\": 5,\n        \"Golden Gate Park\": 23\n    },\n    \"Sunset District\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 24,\n        \"Presidio\": 16,\n        \"Chinatown\": 30,\n        \"The Castro\": 17,\n        \"Embarcadero\": 31,\n        \"Golden Gate Park\": 11\n    },\n    \"The Castro\": {\n        \"Alamo Square\": 8,\n        \"Russian Hill\": 18,\n        \"Presidio\": 20,\n        \"Chinatown\": 20,\n        \"Sunset District\": 17,\n        \"Embarcadero\": 22,\n        \"Golden Gate Park\": 11\n    },\n    \"Embarcadero\": {\n        \"Alamo Square\": 19,\n        \"Russian Hill\": 8,\n        \"Presidio\": 20,\n        \"Chinatown\": 7,\n        \"Sunset District\": 30,\n        \"The Castro\": 25,\n        \"Golden Gate Park\": 25\n    },\n    \"Golden Gate Park\": {\n        \"Alamo Square\": 10,\n        \"Russian Hill\": 19,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"Sunset District\": 10,\n        \"The Castro\": 13,\n        \"Embarcadero\": 25\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\"name\": \"Emily\", \"location\": \"Russian Hill\", \"start\": \"12:15PM\", \"end\": \"2:15PM\", \"min_duration\": 105},\n    {\"name\": \"Mark\", \"location\": \"Presidio\", \"start\": \"2:45PM\", \"end\": \"7:30PM\", \"min_duration\": 60},\n    {\"name\": \"Deborah\", \"location\": \"Chinatown\", \"start\": \"7:30AM\", \"end\": \"3:30PM\", \"min_duration\": 45},\n    {\"name\": \"Margaret\", \"location\": \"Sunset District\", \"start\": \"9:30PM\", \"end\": \"10:30PM\", \"min_duration\": 60},\n    {\"name\": \"George\", \"location\": \"The Castro\", \"start\": \"7:30AM\", \"end\": \"2:15PM\", \"min_duration\": 60},\n    {\"name\": \"Andrew\", \"location\": \"Embarcadero\", \"start\": \"8:15PM\", \"end\": \"10:00PM\", \"min_duration\": 75},\n    {\"name\": \"Steven\", \"location\": \"Golden Gate Park\", \"start\": \"11:15AM\", \"end\": \"9:15PM\", \"min_duration\": 105}\n]\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Alamo Square\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    total_meetings = 0\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        travel_duration = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_duration\n        friend_start = time_to_minutes(friend[\"start\"])\n        friend_end = time_to_minutes(friend[\"end\"])\n        \n        # Check if we can meet this friend\n        if arrival_time > friend_end:\n            continue  # Can't meet this friend\n        \n        # Calculate available meeting time\n        meeting_start = max(arrival_time, friend_start)\n        meeting_end = min(friend_end, meeting_start + friend[\"min_duration\"])\n        \n        if meeting_end > friend_end:\n            continue  # Not enough time to meet\n        \n        # Add travel action\n        if travel_duration > 0:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": friend[\"location\"]\n            })\n        \n        # Add wait action if needed\n        if arrival_time < friend_start:\n            wait_duration = friend_start - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend[\"location\"],\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_duration\n            })\n        \n        # Add meet action\n        meet_duration = meeting_end - meeting_start\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"duration\": meet_duration,\n            \"time\": minutes_to_time(meeting_start),\n            \"with\": friend[\"name\"]\n        })\n        \n        current_time = meeting_end\n        current_location = friend[\"location\"]\n        total_meetings += 1\n    \n    return schedule, total_meetings\n\n# Generate all possible orders of friends\nfriend_names = [f[\"name\"] for f in friends]\nbest_schedule = None\nbest_meetings = 0\n\n# Try all permutations (limited for performance)\nfor perm in permutations(friend_names):\n    schedule, meetings = generate_schedule(perm)\n    if meetings > best_meetings:\n        best_meetings = meetings\n        best_schedule = schedule\n    if best_meetings == len(friends):\n        break  # Found optimal solution\n\n# Output the best schedule\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
            "count": "meeting_planning_example_612",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 120,
                    "time": "9:15AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 11,
                    "time": "11:26AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "11:26AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 11,
                    "time": "11:52AM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 105,
                    "time": "11:52AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "1:54PM",
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "1:54PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 5,
                    "time": "2:29PM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "2:45PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 90,
                    "time": "2:45PM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "4:41PM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 120,
                    "time": "5:30PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "7:52PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 75,
                    "time": "7:52PM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_time(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef get_travel_time(from_loc, to_loc, travel_times):\n    key = f\"{from_loc} to {to_loc}\"\n    return travel_times.get(key, float('inf'))\n\ndef main():\n    # Define travel times\n    travel_times = {\n        \"Russian Hill to Pacific Heights\": 7,\n        \"Russian Hill to North Beach\": 5,\n        \"Russian Hill to Golden Gate Park\": 21,\n        \"Russian Hill to Embarcadero\": 8,\n        \"Russian Hill to Haight-Ashbury\": 17,\n        \"Russian Hill to Fisherman's Wharf\": 7,\n        \"Russian Hill to Mission District\": 16,\n        \"Russian Hill to Alamo Square\": 15,\n        \"Russian Hill to Bayview\": 23,\n        \"Russian Hill to Richmond District\": 14,\n        \"Pacific Heights to Russian Hill\": 7,\n        \"Pacific Heights to North Beach\": 9,\n        \"Pacific Heights to Golden Gate Park\": 15,\n        \"Pacific Heights to Embarcadero\": 10,\n        \"Pacific Heights to Haight-Ashbury\": 11,\n        \"Pacific Heights to Fisherman's Wharf\": 13,\n        \"Pacific Heights to Mission District\": 15,\n        \"Pacific Heights to Alamo Square\": 10,\n        \"Pacific Heights to Bayview\": 22,\n        \"Pacific Heights to Richmond District\": 12,\n        \"North Beach to Russian Hill\": 4,\n        \"North Beach to Pacific Heights\": 8,\n        \"North Beach to Golden Gate Park\": 22,\n        \"North Beach to Embarcadero\": 6,\n        \"North Beach to Haight-Ashbury\": 18,\n        \"North Beach to Fisherman's Wharf\": 5,\n        \"North Beach to Mission District\": 18,\n        \"North Beach to Alamo Square\": 16,\n        \"North Beach to Bayview\": 25,\n        \"North Beach to Richmond District\": 18,\n        \"Golden Gate Park to Russian Hill\": 19,\n        \"Golden Gate Park to Pacific Heights\": 16,\n        \"Golden Gate Park to North Beach\": 23,\n        \"Golden Gate Park to Embarcadero\": 25,\n        \"Golden Gate Park to Haight-Ashbury\": 7,\n        \"Golden Gate Park to Fisherman's Wharf\": 24,\n        \"Golden Gate Park to Mission District\": 17,\n        \"Golden Gate Park to Alamo Square\": 9,\n        \"Golden Gate Park to Bayview\": 23,\n        \"Golden Gate Park to Richmond District\": 7,\n        \"Embarcadero to Russian Hill\": 8,\n        \"Embarcadero to Pacific Heights\": 11,\n        \"Embarcadero to North Beach\": 5,\n        \"Embarcadero to Golden Gate Park\": 25,\n        \"Embarcadero to Haight-Ashbury\": 21,\n        \"Embarcadero to Fisherman's Wharf\": 6,\n        \"Embarcadero to Mission District\": 20,\n        \"Embarcadero to Alamo Square\": 19,\n        \"Embarcadero to Bayview\": 21,\n        \"Embarcadero to Richmond District\": 21,\n        \"Haight-Ashbury to Russian Hill\": 17,\n        \"Haight-Ashbury to Pacific Heights\": 12,\n        \"Haight-Ashbury to North Beach\": 19,\n        \"Haight-Ashbury to Golden Gate Park\": 7,\n        \"Haight-Ashbury to Embarcadero\": 20,\n        \"Haight-Ashbury to Fisherman's Wharf\": 23,\n        \"Haight-Ashbury to Mission District\": 11,\n        \"Haight-Ashbury to Alamo Square\": 5,\n        \"Haight-Ashbury to Bayview\": 18,\n        \"Haight-Ashbury to Richmond District\": 10,\n        \"Fisherman's Wharf to Russian Hill\": 7,\n        \"Fisherman's Wharf to Pacific Heights\": 12,\n        \"Fisherman's Wharf to North Beach\": 6,\n        \"Fisherman's Wharf to Golden Gate Park\": 25,\n        \"Fisherman's Wharf to Embarcadero\": 8,\n        \"Fisherman's Wharf to Haight-Ashbury\": 22,\n        \"Fisherman's Wharf to Mission District\": 22,\n        \"Fisherman's Wharf to Alamo Square\": 21,\n        \"Fisherman's Wharf to Bayview\": 26,\n        \"Fisherman's Wharf to Richmond District\": 18,\n        \"Mission District to Russian Hill\": 15,\n        \"Mission District to Pacific Heights\": 16,\n        \"Mission District to North Beach\": 17,\n        \"Mission District to Golden Gate Park\": 17,\n        \"Mission District to Embarcadero\": 19,\n        \"Mission District to Haight-Ashbury\": 12,\n        \"Mission District to Fisherman's Wharf\": 22,\n        \"Mission District to Alamo Square\": 11,\n        \"Mission District to Bayview\": 14,\n        \"Mission District to Richmond District\": 20,\n        \"Alamo Square to Russian Hill\": 13,\n        \"Alamo Square to Pacific Heights\": 10,\n        \"Alamo Square to North Beach\": 15,\n        \"Alamo Square to Golden Gate Park\": 9,\n        \"Alamo Square to Embarcadero\": 16,\n        \"Alamo Square to Haight-Ashbury\": 5,\n        \"Alamo Square to Fisherman's Wharf\": 19,\n        \"Alamo Square to Mission District\": 10,\n        \"Alamo Square to Bayview\": 16,\n        \"Alamo Square to Richmond District\": 11,\n        \"Bayview to Russian Hill\": 23,\n        \"Bayview to Pacific Heights\": 23,\n        \"Bayview to North Beach\": 22,\n        \"Bayview to Golden Gate Park\": 22,\n        \"Bayview to Embarcadero\": 19,\n        \"Bayview to Haight-Ashbury\": 19,\n        \"Bayview to Fisherman's Wharf\": 25,\n        \"Bayview to Mission District\": 13,\n        \"Bayview to Alamo Square\": 16,\n        \"Bayview to Richmond District\": 25,\n        \"Richmond District to Russian Hill\": 13,\n        \"Richmond District to Pacific Heights\": 10,\n        \"Richmond District to North Beach\": 17,\n        \"Richmond District to Golden Gate Park\": 9,\n        \"Richmond District to Embarcadero\": 19,\n        \"Richmond District to Haight-Ashbury\": 10,\n        \"Richmond District to Fisherman's Wharf\": 18,\n        \"Richmond District to Mission District\": 20,\n        \"Richmond District to Alamo Square\": 13,\n        \"Richmond District to Bayview\": 27\n    }\n\n    # Define constraints\n    constraints = [\n        {\"name\": \"Emily\", \"location\": \"Pacific Heights\", \"start\": \"9:15AM\", \"end\": \"1:45PM\", \"min_duration\": 120},\n        {\"name\": \"Helen\", \"location\": \"North Beach\", \"start\": \"1:45PM\", \"end\": \"6:45PM\", \"min_duration\": 30},\n        {\"name\": \"Kimberly\", \"location\": \"Golden Gate Park\", \"start\": \"6:45PM\", \"end\": \"9:15PM\", \"min_duration\": 75},\n        {\"name\": \"James\", \"location\": \"Embarcadero\", \"start\": \"10:30AM\", \"end\": \"11:30AM\", \"min_duration\": 30},\n        {\"name\": \"Linda\", \"location\": \"Haight-Ashbury\", \"start\": \"7:30AM\", \"end\": \"7:15PM\", \"min_duration\": 15},\n        {\"name\": \"Paul\", \"location\": \"Fisherman's Wharf\", \"start\": \"2:45PM\", \"end\": \"6:45PM\", \"min_duration\": 90},\n        {\"name\": \"Anthony\", \"location\": \"Mission District\", \"start\": \"8:00AM\", \"end\": \"2:45PM\", \"min_duration\": 105},\n        {\"name\": \"Nancy\", \"location\": \"Alamo Square\", \"start\": \"8:30AM\", \"end\": \"1:45PM\", \"min_duration\": 120},\n        {\"name\": \"William\", \"location\": \"Bayview\", \"start\": \"5:30PM\", \"end\": \"8:30PM\", \"min_duration\": 120},\n        {\"name\": \"Margaret\", \"location\": \"Richmond District\", \"start\": \"3:15PM\", \"end\": \"6:15PM\", \"min_duration\": 45}\n    ]\n\n    # Initialize schedule\n    current_time = parse_time(\"9:00AM\")\n    current_location = \"Russian Hill\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n\n    # Helper function to find best meeting\n    def find_next_meeting(current_time, current_location):\n        best_meeting = None\n        best_end_time = None\n        best_travel_time = float('inf')\n        \n        for constraint in constraints:\n            if constraint[\"min_duration\"] <= 0:\n                continue\n                \n            loc = constraint[\"location\"]\n            travel_time = get_travel_time(current_location, loc, travel_times)\n            arrival_time = add_time(current_time, travel_time)\n            \n            start_window = parse_time(constraint[\"start\"])\n            end_window = parse_time(constraint[\"end\"])\n            \n            if arrival_time > end_window:\n                continue\n                \n            meeting_start = max(arrival_time, start_window)\n            meeting_end = min(add_time(meeting_start, constraint[\"min_duration\"]), end_window)\n            \n            if meeting_end > end_window:\n                continue\n                \n            if meeting_end <= current_time:\n                continue\n                \n            if best_meeting is None or meeting_start < best_start_time:\n                best_meeting = constraint\n                best_start_time = meeting_start\n                best_end_time = meeting_end\n                best_travel_time = travel_time\n        \n        return best_meeting, best_travel_time, best_start_time, best_end_time\n\n    # Main scheduling loop\n    while True:\n        meeting, travel_time, start_time, end_time = find_next_meeting(current_time, current_location)\n        if meeting is None:\n            break\n            \n        # Add travel action\n        if current_location != meeting[\"location\"]:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": format_time(current_time),\n                \"to\": meeting[\"location\"]\n            })\n            current_time = add_time(current_time, travel_time)\n            current_location = meeting[\"location\"]\n        \n        # Check if we need to wait\n        if current_time < start_time:\n            wait_time = (start_time - current_time).seconds // 60\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": format_time(current_time)\n            })\n            current_time = start_time\n        \n        # Add meeting action\n        meeting_duration = (end_time - start_time).seconds // 60\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = end_time\n        \n        # Mark this meeting as scheduled\n        meeting[\"min_duration\"] = 0\n\n    # Output the schedule\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_901",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 6,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:06AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:36AM",
                    "duration": 10,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "9:46AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "10:01AM",
                    "duration": 10,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "10:11AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "11:26AM",
                    "duration": 6,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "11:32AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "11:47AM",
                    "duration": 17,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:04PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "12:19PM",
                    "duration": 10,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "12:29PM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "1:45PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "3:30PM",
                    "duration": 21,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "3:51PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "4:51PM",
                    "duration": 14,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "5:05PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "5:50PM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "6:12PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "7:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 15,
                    "time": "9:16AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 10,
                    "time": "9:41AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:41AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 12,
                    "time": "10:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "10:23AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 13,
                    "time": "11:51AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 15,
                    "time": "11:51AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 17,
                    "time": "12:23PM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 60,
                    "time": "3:15PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 14,
                    "time": "4:29PM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 45,
                    "time": "4:45PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 18,
                    "time": "5:48PM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "5:48PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 10,
                    "time": "6:13PM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "6:13PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 25,
                    "time": "8:23PM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 60,
                    "time": "8:23PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'The Castro': {\n        'Alamo Square': 8,\n        'Richmond District': 16,\n        'Financial District': 21,\n        'Union Square': 19,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 21,\n        'Haight-Ashbury': 6,\n        'Mission District': 7,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 11\n    },\n    'Alamo Square': {\n        'The Castro': 8,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Union Square': 14,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 15,\n        'Haight-Ashbury': 5,\n        'Mission District': 10,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9\n    },\n    'Richmond District': {\n        'The Castro': 16,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Union Square': 21,\n        'Fisherman\\'s Wharf': 18,\n        'Marina District': 9,\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9\n    },\n    'Financial District': {\n        'The Castro': 20,\n        'Alamo Square': 17,\n        'Richmond District': 21,\n        'Union Square': 9,\n        'Fisherman\\'s Wharf': 10,\n        'Marina District': 15,\n        'Haight-Ashbury': 19,\n        'Mission District': 17,\n        'Pacific Heights': 13,\n        'Golden Gate Park': 23\n    },\n    'Union Square': {\n        'The Castro': 17,\n        'Alamo Square': 15,\n        'Richmond District': 20,\n        'Financial District': 9,\n        'Fisherman\\'s Wharf': 15,\n        'Marina District': 18,\n        'Haight-Ashbury': 18,\n        'Mission District': 14,\n        'Pacific Heights': 15,\n        'Golden Gate Park': 22\n    },\n    'Fisherman\\'s Wharf': {\n        'The Castro': 27,\n        'Alamo Square': 21,\n        'Richmond District': 18,\n        'Financial District': 11,\n        'Union Square': 13,\n        'Marina District': 9,\n        'Haight-Ashbury': 22,\n        'Mission District': 22,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 25\n    },\n    'Marina District': {\n        'The Castro': 22,\n        'Alamo Square': 15,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Union Square': 16,\n        'Fisherman\\'s Wharf': 10,\n        'Haight-Ashbury': 16,\n        'Mission District': 20,\n        'Pacific Heights': 7,\n        'Golden Gate Park': 18\n    },\n    'Haight-Ashbury': {\n        'The Castro': 6,\n        'Alamo Square': 5,\n        'Richmond District': 10,\n        'Financial District': 21,\n        'Union Square': 19,\n        'Fisherman\\'s Wharf': 23,\n        'Marina District': 17,\n        'Mission District': 11,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 7\n    },\n    'Mission District': {\n        'The Castro': 7,\n        'Alamo Square': 11,\n        'Richmond District': 20,\n        'Financial District': 15,\n        'Union Square': 15,\n        'Fisherman\\'s Wharf': 22,\n        'Marina District': 19,\n        'Haight-Ashbury': 12,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 17\n    },\n    'Pacific Heights': {\n        'The Castro': 16,\n        'Alamo Square': 10,\n        'Richmond District': 12,\n        'Financial District': 13,\n        'Union Square': 12,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Golden Gate Park': 15\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Alamo Square': 9,\n        'Richmond District': 7,\n        'Financial District': 26,\n        'Union Square': 22,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Haight-Ashbury': 7,\n        'Mission District': 17,\n        'Pacific Heights': 16\n    }\n}\n\n# Friend constraints\nfriends = {\n    'William': {'location': 'Alamo Square', 'start': '3:15PM', 'end': '5:15PM', 'min_duration': 60},\n    'Joshua': {'location': 'Richmond District', 'start': '7:00AM', 'end': '8:00PM', 'min_duration': 15},\n    'Joseph': {'location': 'Financial District', 'start': '11:15AM', 'end': '1:30PM', 'min_duration': 15},\n    'David': {'location': 'Union Square', 'start': '4:45PM', 'end': '7:15PM', 'min_duration': 45},\n    'Brian': {'location': 'Fisherman\\'s Wharf', 'start': '1:45PM', 'end': '8:45PM', 'min_duration': 105},\n    'Karen': {'location': 'Marina District', 'start': '11:30AM', 'end': '6:30PM', 'min_duration': 15},\n    'Anthony': {'location': 'Haight-Ashbury', 'start': '7:15AM', 'end': '10:30AM', 'min_duration': 30},\n    'Matthew': {'location': 'Mission District', 'start': '5:15PM', 'end': '7:15PM', 'min_duration': 120},\n    'Helen': {'location': 'Pacific Heights', 'start': '8:00AM', 'end': '12:00PM', 'min_duration': 75},\n    'Jeffrey': {'location': 'Golden Gate Park', 'start': '7:00PM', 'end': '9:30PM', 'min_duration': 60}\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n        time_part = time_str.replace('AM', '').strip()\n    else:\n        period = 'PM'\n        time_part = time_str.replace('PM', '').strip()\n    \n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    location = friend['location']\n    travel_time = travel_times[current_location][location]\n    arrival_time = current_time + travel_time\n    \n    start_time = time_to_minutes(friend['start'])\n    end_time = time_to_minutes(friend['end'])\n    min_duration = friend['min_duration']\n    \n    if arrival_time > end_time - min_duration:\n        return None\n    \n    meet_start = max(arrival_time, start_time)\n    meet_end = meet_start + min_duration\n    \n    if meet_end > end_time:\n        return None\n    \n    return {\n        'travel_time': travel_time,\n        'meet_start': meet_start,\n        'meet_end': meet_end,\n        'location': location\n    }\n\ndef generate_schedule():\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'The Castro'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    while True:\n        best_friend = None\n        best_meeting = None\n        \n        for friend in friends:\n            if friend in met_friends:\n                continue\n            meeting = can_meet_friend(current_time, friend, current_location)\n            if meeting:\n                if best_meeting is None or meeting['meet_start'] < best_meeting['meet_start']:\n                    best_meeting = meeting\n                    best_friend = friend\n        \n        if not best_meeting:\n            break\n        \n        travel_time = best_meeting['travel_time']\n        meet_start = best_meeting['meet_start']\n        meet_end = best_meeting['meet_end']\n        location = best_meeting['location']\n        \n        if current_time + travel_time < meet_start:\n            schedule.append({\n                'action': 'travel',\n                'location': location,\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': location\n            })\n            current_time += travel_time\n            schedule.append({\n                'action': 'wait',\n                'location': location,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = meet_start\n        else:\n            schedule.append({\n                'action': 'travel',\n                'location': location,\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': location\n            })\n            current_time += travel_time\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'duration': friends[best_friend]['min_duration'],\n            'time': minutes_to_time(current_time)\n        })\n        current_time += friends[best_friend]['min_duration']\n        current_location = location\n        met_friends.add(best_friend)\n    \n    return schedule\n\nschedule = generate_schedule()\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
            "count": "meeting_planning_example_956",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time_str = '9:00AM'\n    arrival_location = 'Russian Hill'\n    barbara_available_start_str = '7:15AM'\n    barbara_available_end_str = '10:00PM'\n    barbara_location = 'Pacific Heights'\n    travel_duration = 7  # minutes\n    min_meet_duration = 60  # minutes\n\n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    barbara_start = parse_time(barbara_available_start_str)\n    barbara_end = parse_time(barbara_available_end_str)\n\n    # Calculate earliest possible meeting start\n    # Need to travel to Pacific Heights first\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    \n    # Meeting must start after travel ends and before Barbara's availability ends minus meeting duration\n    meeting_start = max(travel_end_time, barbara_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meet_duration)\n    \n    if meeting_end > barbara_end:\n        # Not enough time to meet\n        schedule = []\n    else:\n        schedule = [\n            {\n                \"action\": \"start\",\n                \"location\": arrival_location,\n                \"time\": format_time(arrival_time)\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": arrival_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(travel_start_time),\n                \"to\": barbara_location\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": barbara_location,\n                \"duration\": min_meet_duration,\n                \"time\": format_time(meeting_start)\n            }\n        ]\n    \n    # Check if there's any waiting time between arrival and meeting start\n    if schedule and meeting_start > travel_end_time:\n        wait_entry = {\n            \"action\": \"wait\",\n            \"location\": barbara_location,\n            \"time\": format_time(travel_end_time)\n        }\n        schedule.insert(2, wait_entry)\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:52AM",
                    "duration": 27,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:19AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "11:04AM",
                    "duration": 18,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "11:22AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "12:07PM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:33PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "1:03PM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:12PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "3:12PM",
                    "duration": 27,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:39PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "4:39PM",
                    "duration": 17,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "4:56PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "6:56PM",
                    "duration": 10,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "7:06PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:00PM",
                    "duration": 7,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "9:07PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:30AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 23,
                    "time": "10:38AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "10:38AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 27,
                    "time": "11:35AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 45,
                    "time": "11:35AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 17,
                    "time": "12:37PM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "2:45PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "2:45PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "3:24PM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 120,
                    "time": "3:24PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 27,
                    "time": "5:51PM",
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "5:51PM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "7:08PM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "8:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "8:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef calculate_schedule():\n    # Travel times dictionary: {from_location: {to_location: minutes}}\n    travel_times = {\n        'Pacific Heights': {\n            'Golden Gate Park': 15,\n            'The Castro': 16,\n            'Bayview': 22,\n            'Marina District': 6,\n            'Union Square': 12,\n            'Sunset District': 21,\n            'Alamo Square': 10,\n            'Financial District': 13,\n            'Mission District': 15\n        },\n        'Golden Gate Park': {\n            'Pacific Heights': 16,\n            'The Castro': 13,\n            'Bayview': 23,\n            'Marina District': 16,\n            'Union Square': 22,\n            'Sunset District': 10,\n            'Alamo Square': 9,\n            'Financial District': 26,\n            'Mission District': 17\n        },\n        'The Castro': {\n            'Pacific Heights': 16,\n            'Golden Gate Park': 11,\n            'Bayview': 19,\n            'Marina District': 21,\n            'Union Square': 19,\n            'Sunset District': 17,\n            'Alamo Square': 8,\n            'Financial District': 21,\n            'Mission District': 7\n        },\n        'Bayview': {\n            'Pacific Heights': 23,\n            'Golden Gate Park': 22,\n            'The Castro': 19,\n            'Marina District': 27,\n            'Union Square': 18,\n            'Sunset District': 23,\n            'Alamo Square': 16,\n            'Financial District': 19,\n            'Mission District': 13\n        },\n        'Marina District': {\n            'Pacific Heights': 7,\n            'Golden Gate Park': 18,\n            'The Castro': 22,\n            'Bayview': 27,\n            'Union Square': 16,\n            'Sunset District': 19,\n            'Alamo Square': 15,\n            'Financial District': 17,\n            'Mission District': 20\n        },\n        'Union Square': {\n            'Pacific Heights': 15,\n            'Golden Gate Park': 22,\n            'The Castro': 17,\n            'Bayview': 15,\n            'Marina District': 18,\n            'Sunset District': 27,\n            'Alamo Square': 15,\n            'Financial District': 9,\n            'Mission District': 14\n        },\n        'Sunset District': {\n            'Pacific Heights': 21,\n            'Golden Gate Park': 11,\n            'The Castro': 17,\n            'Bayview': 22,\n            'Marina District': 21,\n            'Union Square': 30,\n            'Alamo Square': 17,\n            'Financial District': 30,\n            'Mission District': 25\n        },\n        'Alamo Square': {\n            'Pacific Heights': 10,\n            'Golden Gate Park': 9,\n            'The Castro': 8,\n            'Bayview': 16,\n            'Marina District': 15,\n            'Union Square': 14,\n            'Sunset District': 16,\n            'Financial District': 17,\n            'Mission District': 10\n        },\n        'Financial District': {\n            'Pacific Heights': 13,\n            'Golden Gate Park': 23,\n            'The Castro': 20,\n            'Bayview': 19,\n            'Marina District': 15,\n            'Union Square': 9,\n            'Sunset District': 30,\n            'Alamo Square': 17,\n            'Mission District': 17\n        },\n        'Mission District': {\n            'Pacific Heights': 16,\n            'Golden Gate Park': 17,\n            'The Castro': 7,\n            'Bayview': 14,\n            'Marina District': 19,\n            'Union Square': 15,\n            'Sunset District': 24,\n            'Alamo Square': 11,\n            'Financial District': 15\n        }\n    }\n\n    # Friends' availability\n    friends = [\n        {'name': 'Helen', 'location': 'Golden Gate Park', 'start': '9:30AM', 'end': '12:15PM', 'min_duration': 45},\n        {'name': 'Steven', 'location': 'The Castro', 'start': '8:15PM', 'end': '10:00PM', 'min_duration': 105},\n        {'name': 'Deborah', 'location': 'Bayview', 'start': '8:30AM', 'end': '12:00PM', 'min_duration': 30},\n        {'name': 'Matthew', 'location': 'Marina District', 'start': '9:15AM', 'end': '2:15PM', 'min_duration': 45},\n        {'name': 'Joseph', 'location': 'Union Square', 'start': '2:15PM', 'end': '6:45PM', 'min_duration': 120},\n        {'name': 'Ronald', 'location': 'Sunset District', 'start': '4:00PM', 'end': '8:45PM', 'min_duration': 60},\n        {'name': 'Robert', 'location': 'Alamo Square', 'start': '6:30PM', 'end': '9:15PM', 'min_duration': 120},\n        {'name': 'Rebecca', 'location': 'Financial District', 'start': '2:45PM', 'end': '4:15PM', 'min_duration': 30},\n        {'name': 'Elizabeth', 'location': 'Mission District', 'start': '6:30PM', 'end': '9:00PM', 'min_duration': 120}\n    ]\n\n    current_time = parse_time('9:00AM')\n    current_location = 'Pacific Heights'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n    # Meeting Deborah first (earliest availability)\n    deborah = next(f for f in friends if f['name'] == 'Deborah')\n    travel_time = travel_times[current_location][deborah['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(deborah['end']):\n        meet_end = min(add_minutes(arrival_time, deborah['min_duration']), parse_time(deborah['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': deborah['location']})\n        schedule.append({'action': 'meet', 'location': deborah['location'], 'duration': deborah['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = deborah['location']\n\n    # Meeting Matthew next\n    matthew = next(f for f in friends if f['name'] == 'Matthew')\n    travel_time = travel_times[current_location][matthew['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(matthew['end']):\n        meet_end = min(add_minutes(arrival_time, matthew['min_duration']), parse_time(matthew['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': matthew['location']})\n        schedule.append({'action': 'meet', 'location': matthew['location'], 'duration': matthew['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = matthew['location']\n\n    # Meeting Helen next\n    helen = next(f for f in friends if f['name'] == 'Helen')\n    travel_time = travel_times[current_location][helen['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(helen['end']):\n        meet_end = min(add_minutes(arrival_time, helen['min_duration']), parse_time(helen['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': helen['location']})\n        schedule.append({'action': 'meet', 'location': helen['location'], 'duration': helen['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = helen['location']\n\n    # Meeting Rebecca in the afternoon\n    rebecca = next(f for f in friends if f['name'] == 'Rebecca')\n    travel_time = travel_times[current_location][rebecca['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(rebecca['end']):\n        meet_end = min(add_minutes(arrival_time, rebecca['min_duration']), parse_time(rebecca['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': rebecca['location']})\n        schedule.append({'action': 'meet', 'location': rebecca['location'], 'duration': rebecca['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = rebecca['location']\n\n    # Meeting Joseph next\n    joseph = next(f for f in friends if f['name'] == 'Joseph')\n    travel_time = travel_times[current_location][joseph['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(joseph['end']):\n        meet_end = min(add_minutes(arrival_time, joseph['min_duration']), parse_time(joseph['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': joseph['location']})\n        schedule.append({'action': 'meet', 'location': joseph['location'], 'duration': joseph['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = joseph['location']\n\n    # Meeting Ronald next\n    ronald = next(f for f in friends if f['name'] == 'Ronald')\n    travel_time = travel_times[current_location][ronald['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(ronald['end']):\n        meet_end = min(add_minutes(arrival_time, ronald['min_duration']), parse_time(ronald['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': ronald['location']})\n        schedule.append({'action': 'meet', 'location': ronald['location'], 'duration': ronald['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = ronald['location']\n\n    # Meeting Robert next\n    robert = next(f for f in friends if f['name'] == 'Robert')\n    travel_time = travel_times[current_location][robert['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(robert['end']):\n        meet_end = min(add_minutes(arrival_time, robert['min_duration']), parse_time(robert['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': robert['location']})\n        schedule.append({'action': 'meet', 'location': robert['location'], 'duration': robert['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = robert['location']\n\n    # Meeting Elizabeth next\n    elizabeth = next(f for f in friends if f['name'] == 'Elizabeth')\n    travel_time = travel_times[current_location][elizabeth['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(elizabeth['end']):\n        meet_end = min(add_minutes(arrival_time, elizabeth['min_duration']), parse_time(elizabeth['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': elizabeth['location']})\n        schedule.append({'action': 'meet', 'location': elizabeth['location'], 'duration': elizabeth['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = elizabeth['location']\n\n    # Meeting Steven last\n    steven = next(f for f in friends if f['name'] == 'Steven')\n    travel_time = travel_times[current_location][steven['location']]\n    arrival_time = add_minutes(current_time, travel_time)\n    if arrival_time < parse_time(steven['end']):\n        meet_end = min(add_minutes(arrival_time, steven['min_duration']), parse_time(steven['end']))\n        schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_time, 'time': format_time(current_time), 'to': steven['location']})\n        schedule.append({'action': 'meet', 'location': steven['location'], 'duration': steven['min_duration'], 'time': format_time(arrival_time)})\n        current_time = meet_end\n        current_location = steven['location']\n\n    return {'schedule': schedule}\n\nif __name__ == '__main__':\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_835",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 90,
                    "time": "9:11AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "10:56AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "1:00PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "1:38PM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 120,
                    "time": "1:38PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 7,
                    "time": "3:45PM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 60,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since midnight\ndef time_to_minutes(time_str):\n    time_part, period = time_str[:-2], time_str[-2:]\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes back to time string\ndef minutes_to_time(total_minutes):\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{minutes:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    'Haight-Ashbury': {\n        'Mission District': 11,\n        'Bayview': 18,\n        'Pacific Heights': 12,\n        'Russian Hill': 17,\n        'Fisherman\\'s Wharf': 23\n    },\n    'Mission District': {\n        'Haight-Ashbury': 12,\n        'Bayview': 15,\n        'Pacific Heights': 16,\n        'Russian Hill': 15,\n        'Fisherman\\'s Wharf': 22\n    },\n    'Bayview': {\n        'Haight-Ashbury': 19,\n        'Mission District': 13,\n        'Pacific Heights': 23,\n        'Russian Hill': 23,\n        'Fisherman\\'s Wharf': 25\n    },\n    'Pacific Heights': {\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Bayview': 22,\n        'Russian Hill': 7,\n        'Fisherman\\'s Wharf': 13\n    },\n    'Russian Hill': {\n        'Haight-Ashbury': 17,\n        'Mission District': 16,\n        'Bayview': 23,\n        'Pacific Heights': 7,\n        'Fisherman\\'s Wharf': 7\n    },\n    'Fisherman\\'s Wharf': {\n        'Haight-Ashbury': 22,\n        'Mission District': 22,\n        'Bayview': 26,\n        'Pacific Heights': 12,\n        'Russian Hill': 7\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Stephanie': {\n        'location': 'Mission District',\n        'available_start': '8:15AM',\n        'available_end': '1:45PM',\n        'min_duration': 90\n    },\n    'Sandra': {\n        'location': 'Bayview',\n        'available_start': '1:00PM',\n        'available_end': '7:30PM',\n        'min_duration': 15\n    },\n    'Richard': {\n        'location': 'Pacific Heights',\n        'available_start': '7:15AM',\n        'available_end': '10:15AM',\n        'min_duration': 75\n    },\n    'Brian': {\n        'location': 'Russian Hill',\n        'available_start': '12:15PM',\n        'available_end': '4:00PM',\n        'min_duration': 120\n    },\n    'Jason': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '8:30AM',\n        'available_end': '5:45PM',\n        'min_duration': 60\n    }\n}\n\n# Convert friend times to minutes\nfor friend in friends.values():\n    friend['available_start_min'] = time_to_minutes(friend['available_start'])\n    friend['available_end_min'] = time_to_minutes(friend['available_end'])\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Haight-Ashbury'\n    schedule = [{\n        'action': 'start',\n        'location': current_location,\n        'time': '9:00AM'\n    }]\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        \n        # Travel to friend\n        travel_duration = travel_times[current_location][destination]\n        travel_start_time = current_time\n        travel_end_time = travel_start_time + travel_duration\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': minutes_to_time(travel_start_time),\n            'to': destination\n        })\n        \n        current_location = destination\n        current_time = travel_end_time\n        \n        # Check if friend is available\n        meet_start = max(current_time, friend['available_start_min'])\n        meet_end = min(meet_start + friend['min_duration'], friend['available_end_min'])\n        \n        if meet_start >= friend['available_end_min'] or meet_end - meet_start < friend['min_duration']:\n            # Can't meet this friend with current timing\n            return None, set()\n        \n        # Add wait time if needed\n        if current_time < meet_start:\n            wait_duration = meet_start - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': wait_duration\n            })\n            current_time = meet_start\n        \n        # Add meeting\n        meet_duration = meet_end - meet_start\n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': meet_duration,\n            'time': minutes_to_time(meet_start),\n            'with': friend_name\n        })\n        current_time = meet_end\n        met_friends.add(friend_name)\n    \n    return schedule, met_friends\n\n# Try all possible orders to find the best one\nbest_schedule = None\nbest_met = set()\n\nfor perm in permutations(friends.keys()):\n    schedule, met_friends = calculate_schedule(perm)\n    if schedule and len(met_friends) > len(best_met):\n        best_schedule = schedule\n        best_met = met_friends\n    elif schedule and len(met_friends) == len(best_met) and schedule:\n        # Prefer schedules that meet more time requirements\n        total_time = sum(event['duration'] for event in schedule if event['action'] == 'meet')\n        current_best_time = sum(event['duration'] for event in best_schedule if event['action'] == 'meet')\n        if total_time > current_best_time:\n            best_schedule = schedule\n            best_met = met_friends\n\n# Convert schedule to JSON output\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_482",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:10AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:40AM",
                    "duration": 25,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "10:05AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "11:00AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "12:45PM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "1:08PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "1:45PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "2:00PM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "2:07PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "3:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "3:30PM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:40PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 30,
                    "time": "9:10AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 25,
                    "time": "10:05AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "11:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "1:08PM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "1:45PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "1:45PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "2:07PM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "3:00PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "3:00PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "3:40PM",
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "3:40PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Financial District\": {\n        \"Golden Gate Park\": 23,\n        \"Chinatown\": 5,\n        \"Union Square\": 9,\n        \"Fisherman's Wharf\": 10,\n        \"Pacific Heights\": 13,\n        \"North Beach\": 7\n    },\n    \"Golden Gate Park\": {\n        \"Financial District\": 26,\n        \"Chinatown\": 23,\n        \"Union Square\": 22,\n        \"Fisherman's Wharf\": 24,\n        \"Pacific Heights\": 16,\n        \"North Beach\": 24\n    },\n    \"Chinatown\": {\n        \"Financial District\": 5,\n        \"Golden Gate Park\": 23,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 8,\n        \"Pacific Heights\": 10,\n        \"North Beach\": 3\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Golden Gate Park\": 22,\n        \"Chinatown\": 7,\n        \"Fisherman's Wharf\": 15,\n        \"Pacific Heights\": 15,\n        \"North Beach\": 10\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Golden Gate Park\": 25,\n        \"Chinatown\": 12,\n        \"Union Square\": 13,\n        \"Pacific Heights\": 12,\n        \"North Beach\": 6\n    },\n    \"Pacific Heights\": {\n        \"Financial District\": 13,\n        \"Golden Gate Park\": 15,\n        \"Chinatown\": 11,\n        \"Union Square\": 12,\n        \"Fisherman's Wharf\": 13,\n        \"North Beach\": 9\n    },\n    \"North Beach\": {\n        \"Financial District\": 8,\n        \"Golden Gate Park\": 22,\n        \"Chinatown\": 6,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 5,\n        \"Pacific Heights\": 8\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        \"name\": \"Stephanie\",\n        \"location\": \"Golden Gate Park\",\n        \"start\": \"11:00AM\",\n        \"end\": \"3:00PM\",\n        \"duration\": 105\n    },\n    {\n        \"name\": \"Karen\",\n        \"location\": \"Chinatown\",\n        \"start\": \"1:45PM\",\n        \"end\": \"4:30PM\",\n        \"duration\": 15\n    },\n    {\n        \"name\": \"Brian\",\n        \"location\": \"Union Square\",\n        \"start\": \"3:00PM\",\n        \"end\": \"5:15PM\",\n        \"duration\": 30\n    },\n    {\n        \"name\": \"Rebecca\",\n        \"location\": \"Fisherman's Wharf\",\n        \"start\": \"8:00AM\",\n        \"end\": \"11:15AM\",\n        \"duration\": 30\n    },\n    {\n        \"name\": \"Joseph\",\n        \"location\": \"Pacific Heights\",\n        \"start\": \"8:15AM\",\n        \"end\": \"9:30AM\",\n        \"duration\": 60\n    },\n    {\n        \"name\": \"Steven\",\n        \"location\": \"North Beach\",\n        \"start\": \"2:30PM\",\n        \"end\": \"8:45PM\",\n        \"duration\": 120\n    }\n]\n\ndef can_meet_friend(current_time, friend, current_location):\n    friend_start = time_to_minutes(friend[\"start\"])\n    friend_end = time_to_minutes(friend[\"end\"])\n    travel_time = travel_times[current_location][friend[\"location\"]]\n    arrival_time = current_time + travel_time\n    \n    if arrival_time > friend_end:\n        return None\n    \n    meeting_start = max(arrival_time, friend_start)\n    meeting_end = meeting_start + friend[\"duration\"]\n    \n    if meeting_end > friend_end:\n        return None\n    \n    return {\n        \"travel_time\": travel_time,\n        \"arrival_time\": arrival_time,\n        \"meeting_start\": meeting_start,\n        \"meeting_end\": meeting_end\n    }\n\ndef generate_schedule(meeting_order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Financial District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    met_friends = set()\n    \n    for friend_name in meeting_order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        if friend[\"name\"] in met_friends:\n            continue\n        \n        meeting_info = can_meet_friend(current_time, friend, current_location)\n        if not meeting_info:\n            continue\n        \n        # Add travel action\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": meeting_info[\"travel_time\"],\n            \"time\": minutes_to_time(current_time),\n            \"to\": friend[\"location\"]\n        })\n        \n        # Check if we need to wait\n        if meeting_info[\"arrival_time\"] < meeting_info[\"meeting_start\"]:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend[\"location\"],\n                \"time\": minutes_to_time(meeting_info[\"arrival_time\"])\n            })\n        \n        # Add meeting action\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"duration\": friend[\"duration\"],\n            \"time\": minutes_to_time(meeting_info[\"meeting_start\"])\n        })\n        \n        current_time = meeting_info[\"meeting_end\"]\n        current_location = friend[\"location\"]\n        met_friends.add(friend[\"name\"])\n    \n    return schedule, len(met_friends)\n\n# Generate all possible meeting orders\nfriend_names = [f[\"name\"] for f in friends]\nbest_schedule = None\nbest_count = 0\n\n# We'll try permutations to find the best order (limited to reasonable length for performance)\nfor order in permutations(friend_names):\n    schedule, count = generate_schedule(order)\n    if count > best_count:\n        best_count = count\n        best_schedule = schedule\n    if best_count == len(friends):\n        break\n\n# Output the best schedule found\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_502",
            "is_correct": false
        }
    ],
    "5shot": []
}