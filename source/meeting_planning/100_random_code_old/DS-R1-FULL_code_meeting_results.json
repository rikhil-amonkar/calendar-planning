{
  "0shot": [
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Mary",
            "start_time": "1:00PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "3:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Helen",
            "start_time": "9:45PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Sarah",
            "start_time": "2:45PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Mary",
            "start_time": "4:48PM",
            "end_time": "6:03PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Helen",
            "start_time": "9:45PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    new_time = time_obj + timedelta(minutes=minutes)\n    return new_time.strftime('%I:%M%p').lstrip('0')\n\n# Travel times in minutes\ntravel_times = {\n    'Haight-Ashbury': {\n        'Fisherman\\'s Wharf': 23,\n        'Richmond District': 10,\n        'Mission District': 11,\n        'Bayview': 18\n    },\n    'Fisherman\\'s Wharf': {\n        'Haight-Ashbury': 22,\n        'Richmond District': 18,\n        'Mission District': 22,\n        'Bayview': 26\n    },\n    'Richmond District': {\n        'Haight-Ashbury': 10,\n        'Fisherman\\'s Wharf': 18,\n        'Mission District': 20,\n        'Bayview': 26\n    },\n    'Mission District': {\n        'Haight-Ashbury': 12,\n        'Fisherman\\'s Wharf': 22,\n        'Richmond District': 20,\n        'Bayview': 15\n    },\n    'Bayview': {\n        'Haight-Ashbury': 19,\n        'Fisherman\\'s Wharf': 25,\n        'Richmond District': 25,\n        'Mission District': 13\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Sarah': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': '2:45PM',\n        'end': '5:30PM',\n        'min_duration': 105\n    },\n    'Mary': {\n        'location': 'Richmond District',\n        'start': '1:00PM',\n        'end': '7:15PM',\n        'min_duration': 75\n    },\n    'Helen': {\n        'location': 'Mission District',\n        'start': '9:45PM',\n        'end': '10:30PM',\n        'min_duration': 30\n    },\n    'Thomas': {\n        'location': 'Bayview',\n        'start': '3:15PM',\n        'end': '6:45PM',\n        'min_duration': 120\n    }\n}\n\n# Initial state\ncurrent_location = 'Haight-Ashbury'\ncurrent_time = time_to_minutes('9:00AM')\nschedule = [{\"action\": \"start\", \"location\": current_location, \"time\": '9:00AM'}]\n\n# Function to find best meeting order\ndef find_best_schedule():\n    from itertools import permutations\n\n    best_schedule = None\n    best_meetings = 0\n    best_duration = 0\n\n    for order in permutations(['Sarah', 'Mary', 'Helen', 'Thomas']):\n        temp_schedule = []\n        temp_location = 'Haight-Ashbury'\n        temp_time = time_to_minutes('9:00AM')\n        temp_schedule.append({\"action\": \"start\", \"location\": temp_location, \"time\": '9:00AM'})\n        meetings = 0\n        total_duration = 0\n\n        for friend in order:\n            info = friends[friend]\n            travel_duration = travel_times[temp_location][info['location']]\n            arrival_time = temp_time + travel_duration\n            start_time = max(arrival_time, time_to_minutes(info['start']))\n            end_time = time_to_minutes(info['end'])\n            available_duration = end_time - start_time\n            meet_duration = min(available_duration, info['min_duration'])\n\n            if meet_duration >= info['min_duration']:\n                # Add travel action\n                if travel_duration > 0:\n                    temp_schedule.append({\n                        \"action\": \"travel\",\n                        \"location\": temp_location,\n                        \"duration\": travel_duration,\n                        \"time\": minutes_to_time(temp_time),\n                        \"to\": info['location']\n                    })\n                # Add wait action if needed\n                if arrival_time < time_to_minutes(info['start']):\n                    wait_duration = time_to_minutes(info['start']) - arrival_time\n                    temp_schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": info['location'],\n                        \"time\": minutes_to_time(arrival_time),\n                        \"duration\": wait_duration\n                    })\n                # Add meet action\n                temp_schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": info['location'],\n                    \"duration\": meet_duration,\n                    \"time\": minutes_to_time(start_time)\n                })\n                meetings += 1\n                total_duration += meet_duration\n                temp_location = info['location']\n                temp_time = start_time + meet_duration\n\n        if meetings > best_meetings or (meetings == best_meetings and total_duration > best_duration):\n            best_meetings = meetings\n            best_duration = total_duration\n            best_schedule = temp_schedule.copy()\n\n    return best_schedule\n\n# Find and apply the best schedule\nschedule = find_best_schedule()\n\n# Add Helen's meeting if not already included (since it's late)\nhelen_included = any(entry.get('location') == 'Mission District' for entry in schedule)\nif not helen_included:\n    last_entry = schedule[-1]\n    last_location = last_entry['location']\n    last_time = time_to_minutes(last_entry['time']) + last_entry.get('duration', 0)\n    \n    travel_duration = travel_times[last_location]['Mission District']\n    arrival_time = last_time + travel_duration\n    start_time = max(arrival_time, time_to_minutes(friends['Helen']['start']))\n    end_time = time_to_minutes(friends['Helen']['end'])\n    meet_duration = min(end_time - start_time, friends['Helen']['min_duration'])\n    \n    if meet_duration >= friends['Helen']['min_duration']:\n        # Add travel\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": last_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(last_time),\n            \"to\": 'Mission District'\n        })\n        # Add wait if needed\n        if arrival_time < time_to_minutes(friends['Helen']['start']):\n            wait_duration = time_to_minutes(friends['Helen']['start']) - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": 'Mission District',\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_duration\n            })\n        # Add meet\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": 'Mission District',\n            \"duration\": meet_duration,\n            \"time\": minutes_to_time(start_time)\n        })\n\n# Output the schedule\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_389"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Joshua",
            "start_time": "10:30AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "12:45PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Betty",
            "start_time": "2:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Kimberly",
            "start_time": "3:30PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "5:15PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Barbara",
            "start_time": "5:37PM",
            "end_time": "7:37PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "7:42PM",
            "end_time": "9:12PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Joshua",
            "start_time": "10:30AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Kimberly",
            "start_time": "3:30PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "4:03PM",
            "end_time": "4:33PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Betty",
            "start_time": "4:57PM",
            "end_time": "5:57PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Daniel",
            "start_time": "6:30PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Elizabeth",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "7:45PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef add_time(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\n# Initialize travel times as a dictionary\ntravel_times = {\n    'Union Square': {\n        'Presidio': 24, 'Alamo Square': 15, 'Marina District': 18,\n        'Financial District': 9, 'Nob Hill': 9, 'Sunset District': 27,\n        'Chinatown': 7, 'Russian Hill': 13, 'North Beach': 10, 'Haight-Ashbury': 18\n    },\n    'Presidio': {\n        'Union Square': 22, 'Alamo Square': 19, 'Marina District': 11,\n        'Financial District': 23, 'Nob Hill': 18, 'Sunset District': 15,\n        'Chinatown': 21, 'Russian Hill': 14, 'North Beach': 18, 'Haight-Ashbury': 15\n    },\n    'Alamo Square': {\n        'Union Square': 14, 'Presidio': 17, 'Marina District': 15,\n        'Financial District': 17, 'Nob Hill': 11, 'Sunset District': 16,\n        'Chinatown': 15, 'Russian Hill': 13, 'North Beach': 15, 'Haight-Ashbury': 5\n    },\n    'Marina District': {\n        'Union Square': 16, 'Presidio': 10, 'Alamo Square': 15,\n        'Financial District': 17, 'Nob Hill': 12, 'Sunset District': 19,\n        'Chinatown': 15, 'Russian Hill': 8, 'North Beach': 11, 'Haight-Ashbury': 16\n    },\n    'Financial District': {\n        'Union Square': 9, 'Presidio': 22, 'Alamo Square': 17,\n        'Marina District': 15, 'Nob Hill': 8, 'Sunset District': 30,\n        'Chinatown': 5, 'Russian Hill': 11, 'North Beach': 7, 'Haight-Ashbury': 19\n    },\n    'Nob Hill': {\n        'Union Square': 7, 'Presidio': 17, 'Alamo Square': 11,\n        'Marina District': 11, 'Financial District': 9, 'Sunset District': 24,\n        'Chinatown': 6, 'Russian Hill': 5, 'North Beach': 8, 'Haight-Ashbury': 13\n    },\n    'Sunset District': {\n        'Union Square': 30, 'Presidio': 16, 'Alamo Square': 17,\n        'Marina District': 21, 'Financial District': 30, 'Nob Hill': 27,\n        'Chinatown': 30, 'Russian Hill': 24, 'North Beach': 28, 'Haight-Ashbury': 15\n    },\n    'Chinatown': {\n        'Union Square': 7, 'Presidio': 19, 'Alamo Square': 17,\n        'Marina District': 12, 'Financial District': 5, 'Nob Hill': 9,\n        'Sunset District': 29, 'Russian Hill': 7, 'North Beach': 3, 'Haight-Ashbury': 19\n    },\n    'Russian Hill': {\n        'Union Square': 10, 'Presidio': 14, 'Alamo Square': 15,\n        'Marina District': 7, 'Financial District': 11, 'Nob Hill': 5,\n        'Sunset District': 23, 'Chinatown': 9, 'North Beach': 5, 'Haight-Ashbury': 17\n    },\n    'North Beach': {\n        'Union Square': 7, 'Presidio': 17, 'Alamo Square': 16,\n        'Marina District': 9, 'Financial District': 8, 'Nob Hill': 7,\n        'Sunset District': 27, 'Chinatown': 6, 'Russian Hill': 4, 'Haight-Ashbury': 19\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19, 'Presidio': 15, 'Alamo Square': 5,\n        'Marina District': 17, 'Financial District': 21, 'Nob Hill': 15,\n        'Sunset District': 15, 'Chinatown': 19, 'Russian Hill': 17, 'North Beach': 19\n    }\n}\n\n# Initialize friend data\nfriends = [\n    {'name': 'Kimberly', 'location': 'Presidio', 'start': '3:30PM', 'end': '4:00PM', 'min_duration': 15},\n    {'name': 'Elizabeth', 'location': 'Alamo Square', 'start': '7:15PM', 'end': '8:15PM', 'min_duration': 15},\n    {'name': 'Joshua', 'location': 'Marina District', 'start': '10:30AM', 'end': '2:15PM', 'min_duration': 45},\n    {'name': 'Sandra', 'location': 'Financial District', 'start': '7:30PM', 'end': '8:15PM', 'min_duration': 45},\n    {'name': 'Kenneth', 'location': 'Nob Hill', 'start': '12:45PM', 'end': '9:45PM', 'min_duration': 30},\n    {'name': 'Betty', 'location': 'Sunset District', 'start': '2:00PM', 'end': '7:00PM', 'min_duration': 60},\n    {'name': 'Deborah', 'location': 'Chinatown', 'start': '5:15PM', 'end': '8:30PM', 'min_duration': 15},\n    {'name': 'Barbara', 'location': 'Russian Hill', 'start': '5:30PM', 'end': '9:15PM', 'min_duration': 120},\n    {'name': 'Steven', 'location': 'North Beach', 'start': '5:45PM', 'end': '8:45PM', 'min_duration': 90},\n    {'name': 'Daniel', 'location': 'Haight-Ashbury', 'start': '6:30PM', 'end': '6:45PM', 'min_duration': 15}\n]\n\n# Sort friends by start time\nfriends.sort(key=lambda x: parse_time(x['start']))\n\ncurrent_time = parse_time('9:00AM')\ncurrent_location = 'Union Square'\nschedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\ndef can_meet(friend, arrival_time):\n    start = parse_time(friend['start'])\n    end = parse_time(friend['end'])\n    if arrival_time > end:\n        return False\n    meet_start = max(arrival_time, start)\n    available_duration = (end - meet_start).total_seconds() / 60\n    return available_duration >= friend['min_duration']\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times[from_loc][to_loc]\n\ndef schedule_meeting(friend):\n    global current_time, current_location, schedule\n    travel_duration = get_travel_time(current_location, friend['location'])\n    arrival_time = add_time(current_time, travel_duration)\n    \n    if arrival_time > parse_time(friend['end']):\n        return False\n    \n    if current_time < arrival_time:\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': format_time(current_time),\n            'to': friend['location']\n        })\n    \n    meet_start = max(arrival_time, parse_time(friend['start']))\n    if arrival_time < meet_start:\n        schedule.append({\n            'action': 'wait',\n            'location': friend['location'],\n            'time': format_time(arrival_time)\n        })\n    \n    meet_duration = friend['min_duration']\n    schedule.append({\n        'action': 'meet',\n        'location': friend['location'],\n        'duration': meet_duration,\n        'time': format_time(meet_start)\n    })\n    \n    current_time = add_time(meet_start, meet_duration)\n    current_location = friend['location']\n    return True\n\n# Try to schedule meetings in order\nfor friend in friends:\n    schedule_meeting(friend)\n\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
      "count": "meeting_planning_example_912"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Margaret",
            "start_time": "9:30AM",
            "end_time": "10:00AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kimberly",
            "start_time": "1:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "1:46PM",
            "end_time": "2:01PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Rebecca",
            "start_time": "2:06PM",
            "end_time": "3:21PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "7:30PM",
            "end_time": "8:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "12:15PM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Margaret",
            "start_time": "12:52PM",
            "end_time": "1:22PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kimberly",
            "start_time": "1:47PM",
            "end_time": "2:02PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Rebecca",
            "start_time": "2:19PM",
            "end_time": "3:34PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "7:30PM",
            "end_time": "8:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_time(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\ndef time_diff(start_time, end_time):\n    return (end_time - start_time).total_seconds() / 60\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        ('Richmond District', 'Marina District'): 9,\n        ('Richmond District', 'Chinatown'): 20,\n        ('Richmond District', 'Financial District'): 22,\n        ('Richmond District', 'Bayview'): 26,\n        ('Richmond District', 'Union Square'): 21,\n        ('Marina District', 'Richmond District'): 11,\n        ('Marina District', 'Chinatown'): 16,\n        ('Marina District', 'Financial District'): 17,\n        ('Marina District', 'Bayview'): 27,\n        ('Marina District', 'Union Square'): 16,\n        ('Chinatown', 'Richmond District'): 20,\n        ('Chinatown', 'Marina District'): 12,\n        ('Chinatown', 'Financial District'): 5,\n        ('Chinatown', 'Bayview'): 22,\n        ('Chinatown', 'Union Square'): 7,\n        ('Financial District', 'Richmond District'): 21,\n        ('Financial District', 'Marina District'): 15,\n        ('Financial District', 'Chinatown'): 5,\n        ('Financial District', 'Bayview'): 19,\n        ('Financial District', 'Union Square'): 9,\n        ('Bayview', 'Richmond District'): 25,\n        ('Bayview', 'Marina District'): 25,\n        ('Bayview', 'Chinatown'): 18,\n        ('Bayview', 'Financial District'): 19,\n        ('Bayview', 'Union Square'): 17,\n        ('Union Square', 'Richmond District'): 20,\n        ('Union Square', 'Marina District'): 18,\n        ('Union Square', 'Chinatown'): 7,\n        ('Union Square', 'Financial District'): 9,\n        ('Union Square', 'Bayview'): 15,\n    }\n    return travel_times.get((from_loc, to_loc), float('inf'))\n\ndef schedule_meeting(current_time, current_location, friend_location, friend_start, friend_end, meet_duration, schedule):\n    travel_time = get_travel_time(current_location, friend_location)\n    arrival_time = add_time(current_time, travel_time)\n    \n    if arrival_time > friend_end:\n        return None, current_time, current_location\n    \n    start_meeting = max(arrival_time, friend_start)\n    end_meeting = add_time(start_meeting, meet_duration)\n    \n    if end_meeting > friend_end:\n        return None, current_time, current_location\n    \n    if arrival_time < friend_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_time,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(arrival_time)\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_time,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meet_duration,\n        \"time\": format_time(start_meeting)\n    })\n    \n    return schedule, end_meeting, friend_location\n\ndef main():\n    schedule = [{\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": \"9:00AM\"\n    }]\n    \n    current_time = parse_time(\"9:00AM\")\n    current_location = \"Richmond District\"\n    \n    # Margaret at Bayview 9:30AM - 1:30PM, meet 30 mins\n    schedule, current_time, current_location = schedule_meeting(\n        current_time, current_location,\n        \"Bayview\", parse_time(\"9:30AM\"), parse_time(\"1:30PM\"), 30, schedule\n    )\n    \n    # Kimberly at Marina District 1:15PM - 4:45PM, meet 15 mins\n    schedule, current_time, current_location = schedule_meeting(\n        current_time, current_location,\n        \"Marina District\", parse_time(\"1:15PM\"), parse_time(\"4:45PM\"), 15, schedule\n    )\n    \n    # Robert at Chinatown 12:15PM - 8:15PM, meet 15 mins\n    schedule, current_time, current_location = schedule_meeting(\n        current_time, current_location,\n        \"Chinatown\", parse_time(\"12:15PM\"), parse_time(\"8:15PM\"), 15, schedule\n    )\n    \n    # Rebecca at Financial District 1:15PM - 4:45PM, meet 75 mins\n    schedule, current_time, current_location = schedule_meeting(\n        current_time, current_location,\n        \"Financial District\", parse_time(\"1:15PM\"), parse_time(\"4:45PM\"), 75, schedule\n    )\n    \n    # Kenneth at Union Square 7:30PM - 9:15PM, meet 75 mins\n    schedule, current_time, current_location = schedule_meeting(\n        current_time, current_location,\n        \"Union Square\", parse_time(\"7:30PM\"), parse_time(\"9:15PM\"), 75, schedule\n    )\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_446"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Patricia",
            "start_time": "9:31AM",
            "end_time": "10:31AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Laura",
            "start_time": "12:30PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Ronald",
            "start_time": "1:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "5:15PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Financial District\": {\n        \"Russian Hill\": 10,\n        \"Sunset District\": 31,\n        \"North Beach\": 7,\n        \"The Castro\": 23,\n        \"Golden Gate Park\": 23\n    },\n    \"Russian Hill\": {\n        \"Financial District\": 11,\n        \"Sunset District\": 23,\n        \"North Beach\": 5,\n        \"The Castro\": 21,\n        \"Golden Gate Park\": 21\n    },\n    \"Sunset District\": {\n        \"Financial District\": 30,\n        \"Russian Hill\": 24,\n        \"North Beach\": 29,\n        \"The Castro\": 17,\n        \"Golden Gate Park\": 11\n    },\n    \"North Beach\": {\n        \"Financial District\": 8,\n        \"Russian Hill\": 4,\n        \"Sunset District\": 27,\n        \"The Castro\": 22,\n        \"Golden Gate Park\": 22\n    },\n    \"The Castro\": {\n        \"Financial District\": 20,\n        \"Russian Hill\": 18,\n        \"Sunset District\": 17,\n        \"North Beach\": 20,\n        \"Golden Gate Park\": 13\n    },\n    \"Golden Gate Park\": {\n        \"Financial District\": 26,\n        \"Russian Hill\": 19,\n        \"Sunset District\": 10,\n        \"North Beach\": 24,\n        \"The Castro\": 13\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"Ronald\": {\n        \"location\": \"Russian Hill\",\n        \"start\": time_to_minutes(\"1:45PM\"),\n        \"end\": time_to_minutes(\"5:15PM\"),\n        \"duration\": 105\n    },\n    \"Patricia\": {\n        \"location\": \"Sunset District\",\n        \"start\": time_to_minutes(\"9:15AM\"),\n        \"end\": time_to_minutes(\"10:00PM\"),\n        \"duration\": 60\n    },\n    \"Laura\": {\n        \"location\": \"North Beach\",\n        \"start\": time_to_minutes(\"12:30PM\"),\n        \"end\": time_to_minutes(\"12:45PM\"),\n        \"duration\": 15\n    },\n    \"Emily\": {\n        \"location\": \"The Castro\",\n        \"start\": time_to_minutes(\"4:15PM\"),\n        \"end\": time_to_minutes(\"6:30PM\"),\n        \"duration\": 60\n    },\n    \"Mary\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": time_to_minutes(\"3:00PM\"),\n        \"end\": time_to_minutes(\"4:30PM\"),\n        \"duration\": 60\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Financial District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data[\"location\"]\n        duration = friend_data[\"duration\"]\n        window_start = friend_data[\"start\"]\n        window_end = friend_data[\"end\"]\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        arrival_time = current_time + travel_duration\n        \n        # Check if we can meet within their window\n        meet_start = max(arrival_time, window_start)\n        meet_end = meet_start + duration\n        \n        if meet_end > window_end:\n            # Can't meet this friend in this order\n            return None, set()\n        \n        # Add travel action\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time),\n            \"to\": destination\n        })\n        \n        # Check if we need to wait\n        if arrival_time < window_start:\n            wait_duration = window_start - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": destination,\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_duration\n            })\n        \n        # Add meet action\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": duration,\n            \"time\": minutes_to_time(meet_start),\n            \"with\": friend\n        })\n        \n        current_time = meet_end\n        current_location = destination\n        met_friends.add(friend)\n    \n    return schedule, met_friends\n\ndef find_optimal_schedule():\n    friend_names = list(friends.keys())\n    best_schedule = None\n    best_met = 0\n    \n    # Try all possible orders of meeting friends\n    for order in permutations(friend_names):\n        schedule, met_friends = calculate_schedule(order)\n        if schedule and len(met_friends) > best_met:\n            best_schedule = schedule\n            best_met = len(met_friends)\n        elif schedule and len(met_friends) == best_met:\n            # Prefer schedules that end earlier\n            current_end = time_to_minutes(best_schedule[-1][\"time\"]) + (best_schedule[-1][\"duration\"] if best_schedule[-1][\"action\"] == \"meet\" else 0)\n            new_end = time_to_minutes(schedule[-1][\"time\"]) + (schedule[-1][\"duration\"] if schedule[-1][\"action\"] == \"meet\" else 0)\n            if new_end < current_end:\n                best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\n# Convert to required JSON format\noutput = {\"schedule\": []}\nfor event in optimal_schedule:\n    if event[\"action\"] == \"start\":\n        output[\"schedule\"].append({\n            \"action\": \"start\",\n            \"location\": event[\"location\"],\n            \"time\": event[\"time\"]\n        })\n    elif event[\"action\"] == \"travel\":\n        output[\"schedule\"].append({\n            \"action\": \"travel\",\n            \"location\": event[\"location\"],\n            \"duration\": event[\"duration\"],\n            \"time\": event[\"time\"],\n            \"to\": event[\"to\"]\n        })\n    elif event[\"action\"] == \"wait\":\n        output[\"schedule\"].append({\n            \"action\": \"wait\",\n            \"location\": event[\"location\"],\n            \"time\": event[\"time\"],\n            \"duration\": event[\"duration\"]\n        })\n    elif event[\"action\"] == \"meet\":\n        output[\"schedule\"].append({\n            \"action\": \"meet\",\n            \"location\": event[\"location\"],\n            \"duration\": event[\"duration\"],\n            \"time\": event[\"time\"]\n        })\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_444"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Mary",
            "start_time": "10:00AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Betty",
            "start_time": "10:56AM",
            "end_time": "12:26PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Charles",
            "start_time": "12:47PM",
            "end_time": "2:47PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Lisa",
            "start_time": "8:30PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Mary",
            "start_time": "10:00AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Betty",
            "start_time": "10:56AM",
            "end_time": "12:26PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Charles",
            "start_time": "12:47PM",
            "end_time": "2:47PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Lisa",
            "start_time": "8:30PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Bayview': {\n        'Pacific Heights': 23,\n        'Mission District': 13,\n        'Haight-Ashbury': 19,\n        'Financial District': 19\n    },\n    'Pacific Heights': {\n        'Bayview': 22,\n        'Mission District': 15,\n        'Haight-Ashbury': 11,\n        'Financial District': 13\n    },\n    'Mission District': {\n        'Bayview': 15,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 12,\n        'Financial District': 17\n    },\n    'Haight-Ashbury': {\n        'Bayview': 18,\n        'Pacific Heights': 12,\n        'Mission District': 11,\n        'Financial District': 21\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Pacific Heights': 13,\n        'Mission District': 17,\n        'Haight-Ashbury': 19\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Mary': {\n        'location': 'Pacific Heights',\n        'available_start': '10:00AM',\n        'available_end': '7:00PM',\n        'duration': 45\n    },\n    'Lisa': {\n        'location': 'Mission District',\n        'available_start': '8:30PM',\n        'available_end': '10:00PM',\n        'duration': 75\n    },\n    'Betty': {\n        'location': 'Haight-Ashbury',\n        'available_start': '7:15AM',\n        'available_end': '5:15PM',\n        'duration': 90\n    },\n    'Charles': {\n        'location': 'Financial District',\n        'available_start': '11:15AM',\n        'available_end': '3:00PM',\n        'duration': 120\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Bayview'\n    schedule = [{\n        'action': 'start',\n        'location': current_location,\n        'time': minutes_to_time(current_time)\n    }]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        duration = friend_data['duration']\n        available_start = time_to_minutes(friend_data['available_start'])\n        available_end = time_to_minutes(friend_data['available_end'])\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        \n        # Wait if arrive before available_start\n        if travel_end < available_start:\n            wait_duration = available_start - travel_end\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': minutes_to_time(travel_start),\n                'to': destination\n            })\n            schedule.append({\n                'action': 'wait',\n                'location': destination,\n                'time': minutes_to_time(travel_end)\n            })\n            current_time = available_start\n        else:\n            if travel_end > available_end:\n                return None  # Can't meet this friend\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': minutes_to_time(travel_start),\n                'to': destination\n            })\n            current_time = travel_end\n        \n        # Check if we can meet the friend\n        meeting_end = current_time + duration\n        if meeting_end > available_end:\n            return None  # Not enough time to meet\n        \n        schedule.append({\n            'action': 'meet',\n            'location': destination,\n            'duration': duration,\n            'time': minutes_to_time(current_time)\n        })\n        current_time = meeting_end\n        current_location = destination\n        met_friends.add(friend)\n    \n    # After meeting all possible friends, check if we can meet Lisa (who's available late)\n    lisa_data = friends['Lisa']\n    if 'Lisa' not in met_friends:\n        destination = lisa_data['location']\n        available_start = time_to_minutes(lisa_data['available_start'])\n        available_end = time_to_minutes(lisa_data['available_end'])\n        duration = lisa_data['duration']\n        \n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        \n        if travel_end <= available_end:\n            if travel_end < available_start:\n                wait_time = available_start - travel_end\n                schedule.append({\n                    'action': 'travel',\n                    'location': current_location,\n                    'duration': travel_duration,\n                    'time': minutes_to_time(travel_start),\n                    'to': destination\n                })\n                schedule.append({\n                    'action': 'wait',\n                    'location': destination,\n                    'time': minutes_to_time(travel_end)\n                })\n                current_time = available_start\n            else:\n                schedule.append({\n                    'action': 'travel',\n                    'location': current_location,\n                    'duration': travel_duration,\n                    'time': minutes_to_time(travel_start),\n                    'to': destination\n                })\n                current_time = travel_end\n            \n            meeting_end = current_time + duration\n            if meeting_end <= available_end:\n                schedule.append({\n                    'action': 'meet',\n                    'location': destination,\n                    'duration': duration,\n                    'time': minutes_to_time(current_time)\n                })\n                met_friends.add('Lisa')\n    \n    return {\n        'schedule': schedule,\n        'met_count': len(met_friends)\n    }\n\ndef find_optimal_schedule():\n    friend_names = ['Mary', 'Betty', 'Charles']  # Lisa is handled separately\n    best_schedule = None\n    best_met = 0\n    \n    # Try all possible orders of meeting friends\n    for order in permutations(friend_names):\n        result = calculate_schedule(order)\n        if result and result['met_count'] > best_met:\n            best_met = result['met_count']\n            best_schedule = result['schedule']\n        elif result and result['met_count'] == best_met:\n            # Prefer schedules that meet Lisa if count is same\n            lisa_met = any(entry.get('location') == 'Mission District' for entry in result['schedule'])\n            current_lisa_met = any(entry.get('location') == 'Mission District' for entry in best_schedule) if best_schedule else False\n            if lisa_met and not current_lisa_met:\n                best_schedule = result['schedule']\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nprint(json.dumps({\"schedule\": optimal_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_350"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sandra",
            "start_time": "9:12AM",
            "end_time": "11:12AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Robert",
            "start_time": "11:25AM",
            "end_time": "11:40AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kenneth",
            "start_time": "11:49AM",
            "end_time": "12:34PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Elizabeth",
            "start_time": "12:54PM",
            "end_time": "2:24PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "David",
            "start_time": "3:15PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Kimberly",
            "start_time": "4:27PM",
            "end_time": "6:12PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Amanda",
            "start_time": "6:23PM",
            "end_time": "6:38PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Melissa",
            "start_time": "6:45PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "7:30PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "SOLUTION:\n```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Haight-Ashbury': {\n        'Mission District': 11,\n        'Union Square': 19,\n        'Pacific Heights': 12,\n        'Bayview': 18,\n        'Fisherman\\'s Wharf': 23,\n        'Marina District': 17,\n        'Richmond District': 10,\n        'Sunset District': 15,\n        'Golden Gate Park': 7\n    },\n    'Mission District': {\n        'Haight-Ashbury': 12,\n        'Union Square': 15,\n        'Pacific Heights': 16,\n        'Bayview': 14,\n        'Fisherman\\'s Wharf': 22,\n        'Marina District': 19,\n        'Richmond District': 20,\n        'Sunset District': 24,\n        'Golden Gate Park': 17\n    },\n    'Union Square': {\n        'Haight-Ashbury': 18,\n        'Mission District': 14,\n        'Pacific Heights': 15,\n        'Bayview': 15,\n        'Fisherman\\'s Wharf': 15,\n        'Marina District': 18,\n        'Richmond District': 20,\n        'Sunset District': 27,\n        'Golden Gate Park': 22\n    },\n    'Pacific Heights': {\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Union Square': 12,\n        'Bayview': 22,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Richmond District': 12,\n        'Sunset District': 21,\n        'Golden Gate Park': 15\n    },\n    'Bayview': {\n        'Haight-Ashbury': 19,\n        'Mission District': 13,\n        'Union Square': 18,\n        'Pacific Heights': 23,\n        'Fisherman\\'s Wharf': 25,\n        'Marina District': 27,\n        'Richmond District': 25,\n        'Sunset District': 23,\n        'Golden Gate Park': 22\n    },\n    'Fisherman\\'s Wharf': {\n        'Haight-Ashbury': 22,\n        'Mission District': 22,\n        'Union Square': 13,\n        'Pacific Heights': 12,\n        'Bayview': 26,\n        'Marina District': 9,\n        'Richmond District': 18,\n        'Sunset District': 27,\n        'Golden Gate Park': 25\n    },\n    'Marina District': {\n        'Haight-Ashbury': 16,\n        'Mission District': 20,\n        'Union Square': 16,\n        'Pacific Heights': 7,\n        'Bayview': 27,\n        'Fisherman\\'s Wharf': 10,\n        'Richmond District': 11,\n        'Sunset District': 19,\n        'Golden Gate Park': 18\n    },\n    'Richmond District': {\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Union Square': 21,\n        'Pacific Heights': 10,\n        'Bayview': 27,\n        'Fisherman\\'s Wharf': 18,\n        'Marina District': 9,\n        'Sunset District': 11,\n        'Golden Gate Park': 9\n    },\n    'Sunset District': {\n        'Haight-Ashbury': 15,\n        'Mission District': 25,\n        'Union Square': 30,\n        'Pacific Heights': 21,\n        'Bayview': 22,\n        'Fisherman\\'s Wharf': 29,\n        'Marina District': 21,\n        'Richmond District': 12,\n        'Golden Gate Park': 11\n    },\n    'Golden Gate Park': {\n        'Haight-Ashbury': 7,\n        'Mission District': 17,\n        'Union Square': 22,\n        'Pacific Heights': 16,\n        'Bayview': 23,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Richmond District': 7,\n        'Sunset District': 10\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'Elizabeth', 'location': 'Mission District', 'start': '10:30AM', 'end': '8:00PM', 'duration': 90},\n    {'name': 'David', 'location': 'Union Square', 'start': '3:15PM', 'end': '7:00PM', 'duration': 45},\n    {'name': 'Sandra', 'location': 'Pacific Heights', 'start': '7:00AM', 'end': '8:00PM', 'duration': 120},\n    {'name': 'Thomas', 'location': 'Bayview', 'start': '7:30PM', 'end': '8:30PM', 'duration': 30},\n    {'name': 'Robert', 'location': 'Fisherman\\'s Wharf', 'start': '10:00AM', 'end': '3:00PM', 'duration': 15},\n    {'name': 'Kenneth', 'location': 'Marina District', 'start': '10:45AM', 'end': '1:00PM', 'duration': 45},\n    {'name': 'Melissa', 'location': 'Richmond District', 'start': '6:15PM', 'end': '8:00PM', 'duration': 15},\n    {'name': 'Kimberly', 'location': 'Sunset District', 'start': '10:15AM', 'end': '6:15PM', 'duration': 105},\n    {'name': 'Amanda', 'location': 'Golden Gate Park', 'start': '7:45AM', 'end': '6:45PM', 'duration': 15}\n]\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n        time_part = time_str.replace('AM', '').strip()\n    else:\n        period = 'PM'\n        time_part = time_str.replace('PM', '').strip()\n    \n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get(from_loc, {}).get(to_loc, float('inf'))\n\ndef find_optimal_schedule():\n    current_time = parse_time('9:00AM')\n    current_location = 'Haight-Ashbury'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n    \n    # Sort friends by end time to prioritize those with earlier end times\n    sorted_friends = sorted(friends, key=lambda x: time_to_minutes(x['end']))\n    \n    for friend in sorted_friends:\n        loc = friend['location']\n        start_time = parse_time(friend['start'])\n        end_time = parse_time(friend['end'])\n        duration = friend['duration']\n        \n        # Calculate travel time\n        travel_duration = get_travel_time(current_location, loc)\n        if travel_duration == float('inf'):\n            continue\n        \n        arrival_time = current_time + timedelta(minutes=travel_duration)\n        \n        # If we arrive before the friend is available, wait\n        if arrival_time < start_time:\n            wait_time = (start_time - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': format_time(current_time),\n                'to': loc\n            })\n            schedule.append({\n                'action': 'wait',\n                'location': loc,\n                'time': format_time(arrival_time)\n            })\n            meeting_start = start_time\n        else:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': format_time(current_time),\n                'to': loc\n            })\n            meeting_start = arrival_time\n        \n        # Check if we can have the meeting\n        meeting_end = meeting_start + timedelta(minutes=duration)\n        if meeting_end > end_time:\n            continue  # Can't meet this friend\n        \n        # Add meeting to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': loc,\n            'duration': duration,\n            'time': format_time(meeting_start),\n            'with': friend['name']\n        })\n        \n        current_time = meeting_end\n        current_location = loc\n    \n    return schedule\n\ndef main():\n    schedule = find_optimal_schedule()\n    result = {'schedule': schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_867"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jason",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Elizabeth",
            "start_time": "2:39PM",
            "end_time": "4:24PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Brian",
            "start_time": "4:50PM",
            "end_time": "5:05PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Laura",
            "start_time": "5:14PM",
            "end_time": "6:29PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "6:45PM",
            "end_time": "7:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jason",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Brian",
            "start_time": "2:52PM",
            "end_time": "3:07PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Elizabeth",
            "start_time": "3:30PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Laura",
            "start_time": "5:37PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "7:02PM",
            "end_time": "7:47PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    'Presidio': {\n        'Richmond District': 7,\n        'North Beach': 18,\n        'Financial District': 23,\n        'Golden Gate Park': 12,\n        'Union Square': 22\n    },\n    'Richmond District': {\n        'Presidio': 7,\n        'North Beach': 17,\n        'Financial District': 22,\n        'Golden Gate Park': 9,\n        'Union Square': 21\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Richmond District': 18,\n        'Financial District': 8,\n        'Golden Gate Park': 22,\n        'Union Square': 7\n    },\n    'Financial District': {\n        'Presidio': 22,\n        'Richmond District': 21,\n        'North Beach': 7,\n        'Golden Gate Park': 23,\n        'Union Square': 9\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Richmond District': 7,\n        'North Beach': 24,\n        'Financial District': 26,\n        'Union Square': 22\n    },\n    'Union Square': {\n        'Presidio': 24,\n        'Richmond District': 20,\n        'North Beach': 10,\n        'Financial District': 9,\n        'Golden Gate Park': 22\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Jason': {\n        'location': 'Richmond District',\n        'available_start': time_to_minutes('1:00PM'),\n        'available_end': time_to_minutes('8:45PM'),\n        'min_duration': 90\n    },\n    'Melissa': {\n        'location': 'North Beach',\n        'available_start': time_to_minutes('6:45PM'),\n        'available_end': time_to_minutes('8:15PM'),\n        'min_duration': 45\n    },\n    'Brian': {\n        'location': 'Financial District',\n        'available_start': time_to_minutes('9:45AM'),\n        'available_end': time_to_minutes('9:45PM'),\n        'min_duration': 15\n    },\n    'Elizabeth': {\n        'location': 'Golden Gate Park',\n        'available_start': time_to_minutes('8:45AM'),\n        'available_end': time_to_minutes('9:30PM'),\n        'min_duration': 105\n    },\n    'Laura': {\n        'location': 'Union Square',\n        'available_start': time_to_minutes('2:15PM'),\n        'available_end': time_to_minutes('7:30PM'),\n        'min_duration': 75\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Presidio'\n    schedule = [{'action': 'start', 'location': current_location, 'time': minutes_to_time(current_time)}]\n    total_meetings = 0\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        travel_duration = travel_times[current_location][destination]\n        arrival_time = current_time + travel_duration\n        \n        available_start = friend_data['available_start']\n        available_end = friend_data['available_end']\n        min_duration = friend_data['min_duration']\n        \n        if arrival_time > available_end:\n            return None, 0\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + min_duration\n        \n        if end_time > available_end:\n            return None, 0\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': minutes_to_time(current_time),\n            'to': destination\n        })\n        \n        if arrival_time < available_start:\n            wait_time = available_start - arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': destination,\n                'time': minutes_to_time(arrival_time),\n                'duration': wait_time\n            })\n        \n        schedule.append({\n            'action': 'meet',\n            'location': destination,\n            'duration': min_duration,\n            'time': minutes_to_time(start_time),\n            'with': friend\n        })\n        \n        current_time = end_time\n        current_location = destination\n        total_meetings += 1\n    \n    return schedule, total_meetings\n\ndef find_optimal_schedule():\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all permutations of friends to find the best schedule\n    for perm in permutations(friends.keys()):\n        schedule, num_meetings = calculate_schedule(perm)\n        if schedule and num_meetings > max_meetings:\n            best_schedule = schedule\n            max_meetings = num_meetings\n        elif schedule and num_meetings == max_meetings:\n            # Prefer schedules that end earlier\n            current_end_time = time_to_minutes(best_schedule[-1]['time']) + best_schedule[-1].get('duration', 0)\n            new_end_time = time_to_minutes(schedule[-1]['time']) + schedule[-1].get('duration', 0)\n            if new_end_time < current_end_time:\n                best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\noutput = {\n    \"schedule\": optimal_schedule\n} if optimal_schedule else {\"schedule\": []}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_423"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Matthew",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "11:04AM",
            "end_time": "11:34AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Robert",
            "start_time": "11:42AM",
            "end_time": "1:42PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jeffrey",
            "start_time": "2:01PM",
            "end_time": "4:01PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Amanda",
            "start_time": "4:10PM",
            "end_time": "5:55PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "6:15PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "9:30AM",
            "end_time": "10:00AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Matthew",
            "start_time": "10:19AM",
            "end_time": "10:49AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Robert",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Joseph",
            "start_time": "1:24PM",
            "end_time": "3:09PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Amanda",
            "start_time": "3:25PM",
            "end_time": "5:10PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "5:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "7:31PM",
            "end_time": "9:16PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef time_add(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\n# Initialize travel times as a dictionary\ntravel_times = {\n    'Presidio': {\n        'Marina District': 11,\n        'The Castro': 21,\n        'Fisherman\\'s Wharf': 19,\n        'Bayview': 31,\n        'Pacific Heights': 11,\n        'Mission District': 26,\n        'Alamo Square': 19,\n        'Golden Gate Park': 12\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'The Castro': 22,\n        'Fisherman\\'s Wharf': 10,\n        'Bayview': 27,\n        'Pacific Heights': 7,\n        'Mission District': 20,\n        'Alamo Square': 15,\n        'Golden Gate Park': 18\n    },\n    'The Castro': {\n        'Presidio': 20,\n        'Marina District': 21,\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 19,\n        'Pacific Heights': 16,\n        'Mission District': 7,\n        'Alamo Square': 8,\n        'Golden Gate Park': 11\n    },\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Marina District': 9,\n        'The Castro': 27,\n        'Bayview': 26,\n        'Pacific Heights': 12,\n        'Mission District': 22,\n        'Alamo Square': 21,\n        'Golden Gate Park': 25\n    },\n    'Bayview': {\n        'Presidio': 32,\n        'Marina District': 27,\n        'The Castro': 19,\n        'Fisherman\\'s Wharf': 25,\n        'Pacific Heights': 23,\n        'Mission District': 13,\n        'Alamo Square': 16,\n        'Golden Gate Park': 22\n    },\n    'Pacific Heights': {\n        'Presidio': 11,\n        'Marina District': 6,\n        'The Castro': 16,\n        'Fisherman\\'s Wharf': 13,\n        'Bayview': 22,\n        'Mission District': 15,\n        'Alamo Square': 10,\n        'Golden Gate Park': 15\n    },\n    'Mission District': {\n        'Presidio': 25,\n        'Marina District': 19,\n        'The Castro': 7,\n        'Fisherman\\'s Wharf': 22,\n        'Bayview': 14,\n        'Pacific Heights': 16,\n        'Alamo Square': 11,\n        'Golden Gate Park': 17\n    },\n    'Alamo Square': {\n        'Presidio': 17,\n        'Marina District': 15,\n        'The Castro': 8,\n        'Fisherman\\'s Wharf': 19,\n        'Bayview': 16,\n        'Pacific Heights': 10,\n        'Mission District': 10,\n        'Golden Gate Park': 9\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Marina District': 16,\n        'The Castro': 13,\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23,\n        'Pacific Heights': 16,\n        'Mission District': 17,\n        'Alamo Square': 9\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'Amanda', 'location': 'Marina District', 'start': parse_time('2:45PM'), 'end': parse_time('7:30PM'), 'duration': 105},\n    {'name': 'Melissa', 'location': 'The Castro', 'start': parse_time('9:30AM'), 'end': parse_time('5:00PM'), 'duration': 30},\n    {'name': 'Jeffrey', 'location': 'Fisherman\\'s Wharf', 'start': parse_time('12:45PM'), 'end': parse_time('6:45PM'), 'duration': 120},\n    {'name': 'Matthew', 'location': 'Bayview', 'start': parse_time('10:15AM'), 'end': parse_time('1:15PM'), 'duration': 30},\n    {'name': 'Nancy', 'location': 'Pacific Heights', 'start': parse_time('5:00PM'), 'end': parse_time('9:30PM'), 'duration': 105},\n    {'name': 'Karen', 'location': 'Mission District', 'start': parse_time('5:30PM'), 'end': parse_time('8:30PM'), 'duration': 105},\n    {'name': 'Robert', 'location': 'Alamo Square', 'start': parse_time('11:15AM'), 'end': parse_time('5:30PM'), 'duration': 120},\n    {'name': 'Joseph', 'location': 'Golden Gate Park', 'start': parse_time('8:30AM'), 'end': parse_time('9:15PM'), 'duration': 105}\n]\n\n# Initialize schedule\ncurrent_time = parse_time('9:00AM')\ncurrent_location = 'Presidio'\nschedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n# Sort friends by end time (earliest first) to prioritize those with tighter windows\nfriends_sorted = sorted(friends, key=lambda x: x['end'])\n\nvisited = set()\n\nfor friend in friends_sorted:\n    if friend['name'] in visited:\n        continue\n    \n    # Calculate travel time to friend's location\n    travel_duration = travel_times[current_location][friend['location']]\n    arrival_time = time_add(current_time, travel_duration)\n    \n    # Check if we can meet the friend within their window\n    meet_start = max(arrival_time, friend['start'])\n    meet_end = time_add(meet_start, friend['duration'])\n    \n    if meet_end <= friend['end']:\n        # Add travel action\n        if travel_duration > 0:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': format_time(current_time),\n                'to': friend['location']\n            })\n        \n        # Add wait time if needed\n        if arrival_time < friend['start']:\n            wait_duration = (friend['start'] - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': friend['location'],\n                'time': format_time(arrival_time),\n                'duration': wait_duration\n            })\n        \n        # Add meet action\n        schedule.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'duration': friend['duration'],\n            'time': format_time(meet_start),\n            'with': friend['name']\n        })\n        \n        visited.add(friend['name'])\n        current_time = meet_end\n        current_location = friend['location']\n\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
      "count": "meeting_planning_example_715"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Robert",
            "start_time": "9:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "11:02AM",
            "end_time": "12:17PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Anthony",
            "start_time": "12:27PM",
            "end_time": "12:42PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Stephanie",
            "start_time": "8:00PM",
            "end_time": "8:15PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sandra",
            "start_time": "8:22PM",
            "end_time": "9:07PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Kevin",
            "start_time": "9:20PM",
            "end_time": "10:35PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "9:07AM",
            "end_time": "10:22AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Anthony",
            "start_time": "10:32AM",
            "end_time": "10:47AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sandra",
            "start_time": "2:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Stephanie",
            "start_time": "8:00PM",
            "end_time": "8:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Kevin",
            "start_time": "8:22PM",
            "end_time": "9:37PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef time_add(start_time_str, minutes):\n    start_time = parse_time(start_time_str)\n    new_time = start_time + timedelta(minutes=minutes)\n    return format_time(new_time)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        ('Haight-Ashbury', 'Russian Hill'): 17,\n        ('Haight-Ashbury', 'Fisherman\\'s Wharf'): 23,\n        ('Haight-Ashbury', 'Nob Hill'): 15,\n        ('Haight-Ashbury', 'Golden Gate Park'): 7,\n        ('Haight-Ashbury', 'Alamo Square'): 5,\n        ('Haight-Ashbury', 'Pacific Heights'): 12,\n        ('Russian Hill', 'Haight-Ashbury'): 17,\n        ('Russian Hill', 'Fisherman\\'s Wharf'): 7,\n        ('Russian Hill', 'Nob Hill'): 5,\n        ('Russian Hill', 'Golden Gate Park'): 21,\n        ('Russian Hill', 'Alamo Square'): 15,\n        ('Russian Hill', 'Pacific Heights'): 7,\n        ('Fisherman\\'s Wharf', 'Haight-Ashbury'): 22,\n        ('Fisherman\\'s Wharf', 'Russian Hill'): 7,\n        ('Fisherman\\'s Wharf', 'Nob Hill'): 11,\n        ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n        ('Fisherman\\'s Wharf', 'Alamo Square'): 20,\n        ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n        ('Nob Hill', 'Haight-Ashbury'): 13,\n        ('Nob Hill', 'Russian Hill'): 5,\n        ('Nob Hill', 'Fisherman\\'s Wharf'): 11,\n        ('Nob Hill', 'Golden Gate Park'): 17,\n        ('Nob Hill', 'Alamo Square'): 11,\n        ('Nob Hill', 'Pacific Heights'): 8,\n        ('Golden Gate Park', 'Haight-Ashbury'): 7,\n        ('Golden Gate Park', 'Russian Hill'): 19,\n        ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n        ('Golden Gate Park', 'Nob Hill'): 20,\n        ('Golden Gate Park', 'Alamo Square'): 10,\n        ('Golden Gate Park', 'Pacific Heights'): 16,\n        ('Alamo Square', 'Haight-Ashbury'): 5,\n        ('Alamo Square', 'Russian Hill'): 13,\n        ('Alamo Square', 'Fisherman\\'s Wharf'): 19,\n        ('Alamo Square', 'Nob Hill'): 11,\n        ('Alamo Square', 'Golden Gate Park'): 9,\n        ('Alamo Square', 'Pacific Heights'): 10,\n        ('Pacific Heights', 'Haight-Ashbury'): 11,\n        ('Pacific Heights', 'Russian Hill'): 7,\n        ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n        ('Pacific Heights', 'Nob Hill'): 8,\n        ('Pacific Heights', 'Golden Gate Park'): 15,\n        ('Pacific Heights', 'Alamo Square'): 10,\n    }\n    return travel_times.get((from_loc, to_loc), 0)\n\ndef optimize_schedule():\n    current_time = \"9:00AM\"\n    current_location = \"Haight-Ashbury\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n    \n    friends = [\n        {\"name\": \"Robert\", \"location\": \"Nob Hill\", \"start\": \"7:45AM\", \"end\": \"10:30AM\", \"duration\": 90},\n        {\"name\": \"Anthony\", \"location\": \"Alamo Square\", \"start\": \"7:45AM\", \"end\": \"7:45PM\", \"duration\": 15},\n        {\"name\": \"Steven\", \"location\": \"Golden Gate Park\", \"start\": \"8:30AM\", \"end\": \"5:00PM\", \"duration\": 75},\n        {\"name\": \"Sandra\", \"location\": \"Pacific Heights\", \"start\": \"2:45PM\", \"end\": \"9:45PM\", \"duration\": 45},\n        {\"name\": \"Kevin\", \"location\": \"Fisherman's Wharf\", \"start\": \"7:15PM\", \"end\": \"9:45PM\", \"duration\": 75},\n        {\"name\": \"Stephanie\", \"location\": \"Russian Hill\", \"start\": \"8:00PM\", \"end\": \"8:45PM\", \"duration\": 15}\n    ]\n    \n    for friend in sorted(friends, key=lambda x: parse_time(x[\"end\"])):\n        travel_duration = get_travel_time(current_location, friend[\"location\"])\n        arrival_time = time_add(current_time, travel_duration)\n        \n        if parse_time(arrival_time) < parse_time(friend[\"end\"]):\n            meet_start = max(parse_time(arrival_time), parse_time(friend[\"start\"]))\n            meet_end = min(parse_time(friend[\"end\"]), meet_start + timedelta(minutes=friend[\"duration\"]))\n            \n            if meet_end > parse_time(friend[\"end\"]):\n                meet_end = parse_time(friend[\"end\"])\n                meet_start = meet_end - timedelta(minutes=friend[\"duration\"])\n            \n            if meet_start >= parse_time(arrival_time):\n                if parse_time(arrival_time) < meet_start:\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": friend[\"location\"],\n                        \"time\": format_time(parse_time(arrival_time))\n                    })\n                \n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": friend[\"location\"],\n                    \"duration\": friend[\"duration\"],\n                    \"time\": format_time(meet_start)\n                })\n                \n                current_time = format_time(meet_start + timedelta(minutes=friend[\"duration\"]))\n                current_location = friend[\"location\"]\n            else:\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": friend[\"location\"],\n                    \"duration\": travel_duration,\n                    \"time\": current_time,\n                    \"to\": friend[\"location\"]\n                })\n                current_time = arrival_time\n                current_location = friend[\"location\"]\n        else:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": friend[\"location\"],\n                \"duration\": travel_duration,\n                \"time\": current_time,\n                \"to\": friend[\"location\"]\n            })\n            current_time = arrival_time\n            current_location = friend[\"location\"]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = optimize_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_577"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Richard",
            "start_time": "3:07PM",
            "end_time": "3:37PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Helen",
            "start_time": "4:04PM",
            "end_time": "5:49PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Ashley",
            "start_time": "6:13PM",
            "end_time": "6:58PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "9:45PM",
            "end_time": "10:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Elizabeth",
            "start_time": "10:00AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Joseph",
            "start_time": "11:45AM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Richard",
            "start_time": "2:30PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kimberly",
            "start_time": "3:22PM",
            "end_time": "5:07PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "5:18PM",
            "end_time": "5:48PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Helen",
            "start_time": "6:12PM",
            "end_time": "7:57PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Ashley",
            "start_time": "8:21PM",
            "end_time": "9:06PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "9:45PM",
            "end_time": "10:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Define travel times as a dictionary\ntravel_times = {\n    'Marina District': {\n        'Mission District': 20,\n        'Fisherman\\'s Wharf': 10,\n        'Presidio': 10,\n        'Union Square': 16,\n        'Sunset District': 19,\n        'Financial District': 17,\n        'Haight-Ashbury': 16,\n        'Russian Hill': 8\n    },\n    'Mission District': {\n        'Marina District': 19,\n        'Fisherman\\'s Wharf': 22,\n        'Presidio': 25,\n        'Union Square': 15,\n        'Sunset District': 24,\n        'Financial District': 15,\n        'Haight-Ashbury': 12,\n        'Russian Hill': 15\n    },\n    'Fisherman\\'s Wharf': {\n        'Marina District': 9,\n        'Mission District': 22,\n        'Presidio': 17,\n        'Union Square': 13,\n        'Sunset District': 27,\n        'Financial District': 11,\n        'Haight-Ashbury': 22,\n        'Russian Hill': 7\n    },\n    'Presidio': {\n        'Marina District': 11,\n        'Mission District': 26,\n        'Fisherman\\'s Wharf': 19,\n        'Union Square': 22,\n        'Sunset District': 15,\n        'Financial District': 23,\n        'Haight-Ashbury': 15,\n        'Russian Hill': 14\n    },\n    'Union Square': {\n        'Marina District': 18,\n        'Mission District': 14,\n        'Fisherman\\'s Wharf': 15,\n        'Presidio': 24,\n        'Sunset District': 27,\n        'Financial District': 9,\n        'Haight-Ashbury': 18,\n        'Russian Hill': 13\n    },\n    'Sunset District': {\n        'Marina District': 21,\n        'Mission District': 25,\n        'Fisherman\\'s Wharf': 29,\n        'Presidio': 16,\n        'Union Square': 30,\n        'Financial District': 30,\n        'Haight-Ashbury': 15,\n        'Russian Hill': 24\n    },\n    'Financial District': {\n        'Marina District': 15,\n        'Mission District': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Presidio': 22,\n        'Union Square': 9,\n        'Sunset District': 30,\n        'Haight-Ashbury': 19,\n        'Russian Hill': 11\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17,\n        'Mission District': 11,\n        'Fisherman\\'s Wharf': 23,\n        'Presidio': 15,\n        'Union Square': 19,\n        'Sunset District': 15,\n        'Financial District': 21,\n        'Russian Hill': 17\n    },\n    'Russian Hill': {\n        'Marina District': 7,\n        'Mission District': 16,\n        'Fisherman\\'s Wharf': 7,\n        'Presidio': 14,\n        'Union Square': 10,\n        'Sunset District': 23,\n        'Financial District': 11,\n        'Haight-Ashbury': 17\n    }\n}\n\n# Define friends' constraints\nfriends = [\n    {'name': 'Karen', 'location': 'Mission District', 'start': '2:15PM', 'end': '10:00PM', 'duration': 30},\n    {'name': 'Richard', 'location': 'Fisherman\\'s Wharf', 'start': '2:30PM', 'end': '5:30PM', 'duration': 30},\n    {'name': 'Robert', 'location': 'Presidio', 'start': '9:45PM', 'end': '10:45PM', 'duration': 60},\n    {'name': 'Joseph', 'location': 'Union Square', 'start': '11:45AM', 'end': '2:45PM', 'duration': 120},\n    {'name': 'Helen', 'location': 'Sunset District', 'start': '2:45PM', 'end': '8:45PM', 'duration': 105},\n    {'name': 'Elizabeth', 'location': 'Financial District', 'start': '10:00AM', 'end': '12:45PM', 'duration': 75},\n    {'name': 'Kimberly', 'location': 'Haight-Ashbury', 'start': '2:15PM', 'end': '5:30PM', 'duration': 105},\n    {'name': 'Ashley', 'location': 'Russian Hill', 'start': '11:30AM', 'end': '9:30PM', 'duration': 45}\n]\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get(from_loc, {}).get(to_loc, float('inf'))\n\ndef generate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Marina District'\n    schedule = [{'action': 'start', 'location': current_location, 'time': minutes_to_time(current_time)}]\n    total_meetings = 0\n    \n    for friend in order:\n        friend_info = next(f for f in friends if f['name'] == friend)\n        location = friend_info['location']\n        start_window = time_to_minutes(friend_info['start'])\n        end_window = time_to_minutes(friend_info['end'])\n        duration = friend_info['duration']\n        \n        # Travel to friend's location\n        travel_time = get_travel_time(current_location, location)\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet\n        meeting_start = max(arrival_time, start_window)\n        meeting_end = meeting_start + duration\n        \n        if meeting_end > end_window:\n            continue  # Can't meet this friend\n        \n        # Add travel action\n        if current_location != location:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': location\n            })\n            current_time += travel_time\n        \n        # Add wait action if needed\n        if arrival_time < start_window:\n            wait_time = start_window - arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': location,\n                'time': minutes_to_time(arrival_time),\n                'duration': wait_time\n            })\n            current_time = start_window\n        \n        # Add meet action\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'duration': duration,\n            'time': minutes_to_time(current_time)\n        })\n        current_time += duration\n        current_location = location\n        total_meetings += 1\n    \n    return schedule, total_meetings\n\n# Try all possible orders to find the optimal schedule\nbest_schedule = None\nmax_meetings = 0\nfriend_names = [f['name'] for f in friends]\n\n# Since trying all permutations is computationally expensive, we'll try a subset\n# In a real application, you'd use a more efficient algorithm\nfor order in permutations(friend_names, min(5, len(friend_names))):\n    schedule, num_meetings = generate_schedule(order)\n    if num_meetings > max_meetings:\n        max_meetings = num_meetings\n        best_schedule = schedule\n\n# Fallback if no permutation worked (shouldn't happen with these constraints)\nif best_schedule is None:\n    best_schedule, _ = generate_schedule(friend_names)\n\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_728"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jeffrey",
            "start_time": "10:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Ronald",
            "start_time": "12:06PM",
            "end_time": "2:06PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Elizabeth",
            "start_time": "2:45PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Margaret",
            "start_time": "5:00PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Richard",
            "start_time": "6:37PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "George",
            "start_time": "7:15PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jeffrey",
            "start_time": "10:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Ronald",
            "start_time": "12:06PM",
            "end_time": "2:06PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Margaret",
            "start_time": "2:22PM",
            "end_time": "3:52PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Richard",
            "start_time": "3:59PM",
            "end_time": "4:14PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Laura",
            "start_time": "4:34PM",
            "end_time": "5:34PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Melissa",
            "start_time": "5:55PM",
            "end_time": "6:10PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "George",
            "start_time": "7:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Presidio': {\n        'Fisherman\\'s Wharf': 19,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'Union Square': 22,\n        'Sunset District': 15,\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Chinatown': 21,\n        'Richmond District': 7\n    },\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Alamo Square': 21,\n        'Financial District': 11,\n        'Union Square': 13,\n        'Sunset District': 27,\n        'Embarcadero': 8,\n        'Golden Gate Park': 25,\n        'Chinatown': 12,\n        'Richmond District': 18\n    },\n    'Alamo Square': {\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 19,\n        'Financial District': 17,\n        'Union Square': 14,\n        'Sunset District': 16,\n        'Embarcadero': 16,\n        'Golden Gate Park': 9,\n        'Chinatown': 15,\n        'Richmond District': 11\n    },\n    'Financial District': {\n        'Presidio': 22,\n        'Fisherman\\'s Wharf': 10,\n        'Alamo Square': 17,\n        'Union Square': 9,\n        'Sunset District': 30,\n        'Embarcadero': 4,\n        'Golden Gate Park': 23,\n        'Chinatown': 5,\n        'Richmond District': 21\n    },\n    'Union Square': {\n        'Presidio': 24,\n        'Fisherman\\'s Wharf': 15,\n        'Alamo Square': 15,\n        'Financial District': 9,\n        'Sunset District': 27,\n        'Embarcadero': 11,\n        'Golden Gate Park': 22,\n        'Chinatown': 7,\n        'Richmond District': 20\n    },\n    'Sunset District': {\n        'Presidio': 16,\n        'Fisherman\\'s Wharf': 29,\n        'Alamo Square': 17,\n        'Financial District': 30,\n        'Union Square': 30,\n        'Embarcadero': 30,\n        'Golden Gate Park': 11,\n        'Chinatown': 30,\n        'Richmond District': 12\n    },\n    'Embarcadero': {\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 6,\n        'Alamo Square': 19,\n        'Financial District': 5,\n        'Union Square': 10,\n        'Sunset District': 30,\n        'Golden Gate Park': 25,\n        'Chinatown': 7,\n        'Richmond District': 21\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Fisherman\\'s Wharf': 24,\n        'Alamo Square': 9,\n        'Financial District': 26,\n        'Union Square': 22,\n        'Sunset District': 10,\n        'Embarcadero': 25,\n        'Chinatown': 23,\n        'Richmond District': 7\n    },\n    'Chinatown': {\n        'Presidio': 19,\n        'Fisherman\\'s Wharf': 8,\n        'Alamo Square': 17,\n        'Financial District': 5,\n        'Union Square': 7,\n        'Sunset District': 29,\n        'Embarcadero': 5,\n        'Golden Gate Park': 23,\n        'Richmond District': 20\n    },\n    'Richmond District': {\n        'Presidio': 7,\n        'Fisherman\\'s Wharf': 18,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Union Square': 21,\n        'Sunset District': 11,\n        'Embarcadero': 19,\n        'Golden Gate Park': 9,\n        'Chinatown': 20\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Jeffrey': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '10:15AM',\n        'available_end': '1:00PM',\n        'min_duration': 90\n    },\n    'Ronald': {\n        'location': 'Alamo Square',\n        'available_start': '7:45AM',\n        'available_end': '2:45PM',\n        'min_duration': 120\n    },\n    'Jason': {\n        'location': 'Financial District',\n        'available_start': '10:45AM',\n        'available_end': '4:00PM',\n        'min_duration': 105\n    },\n    'Melissa': {\n        'location': 'Union Square',\n        'available_start': '5:45PM',\n        'available_end': '6:15PM',\n        'min_duration': 15\n    },\n    'Elizabeth': {\n        'location': 'Sunset District',\n        'available_start': '2:45PM',\n        'available_end': '5:30PM',\n        'min_duration': 105\n    },\n    'Margaret': {\n        'location': 'Embarcadero',\n        'available_start': '1:15PM',\n        'available_end': '7:00PM',\n        'min_duration': 90\n    },\n    'George': {\n        'location': 'Golden Gate Park',\n        'available_start': '7:00PM',\n        'available_end': '10:00PM',\n        'min_duration': 75\n    },\n    'Richard': {\n        'location': 'Chinatown',\n        'available_start': '9:30AM',\n        'available_end': '9:00PM',\n        'min_duration': 15\n    },\n    'Laura': {\n        'location': 'Richmond District',\n        'available_start': '9:45AM',\n        'available_end': '6:00PM',\n        'min_duration': 60\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    travel_time = travel_times[current_location][friend['location']]\n    arrival_time = current_time + travel_time\n    \n    available_start = time_to_minutes(friend['available_start'])\n    available_end = time_to_minutes(friend['available_end'])\n    min_duration = friend['min_duration']\n    \n    if arrival_time > available_end:\n        return None\n    \n    start_time = max(arrival_time, available_start)\n    end_time = min(start_time + min_duration, available_end)\n    \n    if end_time - start_time < min_duration:\n        return None\n    \n    return {\n        'travel_time': travel_time,\n        'start_time': start_time,\n        'end_time': end_time,\n        'location': friend['location']\n    }\n\ndef generate_schedule():\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Presidio'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    # We'll prioritize friends with tighter time windows first\n    priority_order = ['Jeffrey', 'Ronald', 'Jason', 'Elizabeth', 'Margaret', 'Laura', 'Richard', 'Melissa', 'George']\n    \n    for friend in priority_order:\n        if friend in met_friends:\n            continue\n            \n        meeting = can_meet_friend(current_time, friend, current_location)\n        if meeting:\n            # Add travel action\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': meeting['travel_time'],\n                'time': minutes_to_time(current_time),\n                'to': meeting['location']\n            })\n            current_time += meeting['travel_time']\n            current_location = meeting['location']\n            \n            # Check if we need to wait\n            if current_time < meeting['start_time']:\n                wait_time = meeting['start_time'] - current_time\n                schedule.append({\n                    'action': 'wait',\n                    'location': current_location,\n                    'time': minutes_to_time(current_time)\n                })\n                current_time = meeting['start_time']\n            \n            # Add meeting action\n            duration = meeting['end_time'] - meeting['start_time']\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': duration,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = meeting['end_time']\n            met_friends.add(friend)\n    \n    return schedule\n\nschedule = generate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_831"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Betty",
            "start_time": "9:13AM",
            "end_time": "10:58AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Melissa",
            "start_time": "11:13AM",
            "end_time": "12:58PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joshua",
            "start_time": "1:03PM",
            "end_time": "2:33PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Jeffrey",
            "start_time": "2:50PM",
            "end_time": "3:35PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "James",
            "start_time": "4:02PM",
            "end_time": "5:32PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Emily",
            "start_time": "7:30PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes (simplified as a dictionary of dictionaries)\ntravel_times = {\n    'Union Square': {\n        'Russian Hill': 13,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 18,\n        'Marina District': 18,\n        'Bayview': 15,\n        'Chinatown': 7,\n        'Presidio': 24,\n        'Sunset District': 27\n    },\n    'Russian Hill': {\n        'Union Square': 10,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 17,\n        'Marina District': 7,\n        'Bayview': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Sunset District': 23\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'Russian Hill': 13,\n        'Haight-Ashbury': 5,\n        'Marina District': 15,\n        'Bayview': 16,\n        'Chinatown': 15,\n        'Presidio': 17,\n        'Sunset District': 16\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'Russian Hill': 17,\n        'Alamo Square': 5,\n        'Marina District': 17,\n        'Bayview': 18,\n        'Chinatown': 19,\n        'Presidio': 15,\n        'Sunset District': 15\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Russian Hill': 8,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 16,\n        'Bayview': 27,\n        'Chinatown': 15,\n        'Presidio': 10,\n        'Sunset District': 19\n    },\n    'Bayview': {\n        'Union Square': 18,\n        'Russian Hill': 23,\n        'Alamo Square': 16,\n        'Haight-Ashbury': 19,\n        'Marina District': 27,\n        'Chinatown': 19,\n        'Presidio': 32,\n        'Sunset District': 23\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Russian Hill': 7,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 19,\n        'Marina District': 12,\n        'Bayview': 20,\n        'Presidio': 19,\n        'Sunset District': 29\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'Russian Hill': 14,\n        'Alamo Square': 19,\n        'Haight-Ashbury': 15,\n        'Marina District': 11,\n        'Bayview': 31,\n        'Chinatown': 21,\n        'Sunset District': 15\n    },\n    'Sunset District': {\n        'Union Square': 30,\n        'Russian Hill': 24,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 15,\n        'Marina District': 21,\n        'Bayview': 22,\n        'Chinatown': 30,\n        'Presidio': 16\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Betty': {\n        'location': 'Russian Hill',\n        'available_start': '7:00AM',\n        'available_end': '4:45PM',\n        'meet_duration': 105\n    },\n    'Melissa': {\n        'location': 'Alamo Square',\n        'available_start': '9:30AM',\n        'available_end': '5:15PM',\n        'meet_duration': 105\n    },\n    'Joshua': {\n        'location': 'Haight-Ashbury',\n        'available_start': '12:15PM',\n        'available_end': '7:00PM',\n        'meet_duration': 90\n    },\n    'Jeffrey': {\n        'location': 'Marina District',\n        'available_start': '12:15PM',\n        'available_end': '6:00PM',\n        'meet_duration': 45\n    },\n    'James': {\n        'location': 'Bayview',\n        'available_start': '7:30AM',\n        'available_end': '8:00PM',\n        'meet_duration': 90\n    },\n    'Anthony': {\n        'location': 'Chinatown',\n        'available_start': '11:45AM',\n        'available_end': '1:30PM',\n        'meet_duration': 75\n    },\n    'Timothy': {\n        'location': 'Presidio',\n        'available_start': '12:30PM',\n        'available_end': '2:45PM',\n        'meet_duration': 90\n    },\n    'Emily': {\n        'location': 'Sunset District',\n        'available_start': '7:30PM',\n        'available_end': '9:30PM',\n        'meet_duration': 120\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get(from_loc, {}).get(to_loc, float('inf'))\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Union Square'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    total_meetings = 0\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        travel_time = get_travel_time(current_location, destination)\n        \n        # Travel to friend\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': destination\n        })\n        \n        # Check if we can meet\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        meet_duration = friend['meet_duration']\n        \n        # Calculate meeting start time\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + meet_duration\n        \n        if meeting_end > available_end:\n            return None  # Can't meet this friend\n        \n        # Add wait time if needed\n        if arrival_time < available_start:\n            wait_time = available_start - arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': destination,\n                'time': minutes_to_time(arrival_time),\n                'duration': wait_time\n            })\n        \n        # Add meeting\n        schedule.append({\n            'action': 'meet',\n            'location': destination,\n            'duration': meet_duration,\n            'time': minutes_to_time(meeting_start),\n            'with': friend_name\n        })\n        \n        current_time = meeting_end\n        current_location = destination\n        total_meetings += 1\n    \n    return schedule, total_meetings\n\ndef find_optimal_schedule():\n    friend_names = list(friends.keys())\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all possible orders (for small number of friends)\n    for perm in permutations(friend_names):\n        result = calculate_schedule(perm)\n        if result:\n            schedule, num_meetings = result\n            if num_meetings > max_meetings:\n                max_meetings = num_meetings\n                best_schedule = schedule\n            elif num_meetings == max_meetings and best_schedule:\n                # Prefer schedules that end earlier\n                current_end = time_to_minutes(best_schedule[-1]['time']) + best_schedule[-1].get('duration', 0)\n                new_end = time_to_minutes(schedule[-1]['time']) + schedule[-1].get('duration', 0)\n                if new_end < current_end:\n                    best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\nif optimal_schedule:\n    # Convert to required JSON format\n    output = {'schedule': []}\n    for item in optimal_schedule:\n        new_item = {k: v for k, v in item.items()}\n        if 'with' in new_item:\n            del new_item['with']  # Remove 'with' field as per requirements\n        output['schedule'].append(new_item)\n    print(json.dumps(output, indent=2))\nelse:\n    print(json.dumps({'error': 'No valid schedule found'}, indent=2))\n```",
      "count": "meeting_planning_example_789"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Emily",
            "start_time": "11:45AM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Barbara",
            "start_time": "4:45PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "William",
            "start_time": "5:52PM",
            "end_time": "7:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Emily",
            "start_time": "11:45AM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Barbara",
            "start_time": "4:45PM",
            "end_time": "5:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        ('The Castro', 'Alamo Square'): 8,\n        ('The Castro', 'Union Square'): 19,\n        ('The Castro', 'Chinatown'): 20,\n        ('Alamo Square', 'The Castro'): 8,\n        ('Alamo Square', 'Union Square'): 14,\n        ('Alamo Square', 'Chinatown'): 16,\n        ('Union Square', 'The Castro'): 19,\n        ('Union Square', 'Alamo Square'): 15,\n        ('Union Square', 'Chinatown'): 7,\n        ('Chinatown', 'The Castro'): 22,\n        ('Chinatown', 'Alamo Square'): 17,\n        ('Chinatown', 'Union Square'): 7,\n    }\n\n    start_time = parse_time('9:00AM')\n    current_location = 'The Castro'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(start_time)}]\n    current_time = start_time\n\n    # Emily's constraints\n    emily_start = parse_time('11:45AM')\n    emily_end = parse_time('3:15PM')\n    emily_min_duration = 105\n\n    # Barbara's constraints\n    barbara_start = parse_time('4:45PM')\n    barbara_end = parse_time('6:15PM')\n    barbara_min_duration = 60\n\n    # William's constraints\n    william_start = parse_time('5:15PM')\n    william_end = parse_time('7:00PM')\n    william_min_duration = 105\n\n    # Plan to meet Emily first\n    travel_to_alamo = travel_times[(current_location, 'Alamo Square')]\n    arrival_alamo = add_minutes(current_time, travel_to_alamo)\n    if arrival_alamo < emily_start:\n        wait_duration = (emily_start - arrival_alamo).total_seconds() / 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_alamo,\n            \"time\": format_time(current_time),\n            \"to\": \"Alamo Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": format_time(arrival_alamo)\n        })\n        current_time = emily_start\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_alamo,\n            \"time\": format_time(current_time),\n            \"to\": \"Alamo Square\"\n        })\n        current_time = arrival_alamo\n\n    # Meet Emily\n    emily_meet_end = add_minutes(current_time, emily_min_duration)\n    if emily_meet_end > emily_end:\n        emily_meet_end = emily_end\n    actual_emily_duration = (emily_meet_end - current_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": actual_emily_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = emily_meet_end\n    current_location = 'Alamo Square'\n\n    # Next, plan to meet Barbara\n    travel_to_union = travel_times[(current_location, 'Union Square')]\n    arrival_union = add_minutes(current_time, travel_to_union)\n    if arrival_union < barbara_start:\n        wait_duration = (barbara_start - arrival_union).total_seconds() / 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_union,\n            \"time\": format_time(current_time),\n            \"to\": \"Union Square\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": format_time(arrival_union)\n        })\n        current_time = barbara_start\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_union,\n            \"time\": format_time(current_time),\n            \"to\": \"Union Square\"\n        })\n        current_time = arrival_union\n\n    # Meet Barbara\n    barbara_meet_end = add_minutes(current_time, barbara_min_duration)\n    if barbara_meet_end > barbara_end:\n        barbara_meet_end = barbara_end\n    actual_barbara_duration = (barbara_meet_end - current_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": actual_barbara_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = barbara_meet_end\n    current_location = 'Union Square'\n\n    # Finally, plan to meet William\n    travel_to_chinatown = travel_times[(current_location, 'Chinatown')]\n    arrival_chinatown = add_minutes(current_time, travel_to_chinatown)\n    if arrival_chinatown < william_start:\n        wait_duration = (william_start - arrival_chinatown).total_seconds() / 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_chinatown,\n            \"time\": format_time(current_time),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": format_time(arrival_chinatown)\n        })\n        current_time = william_start\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_chinatown,\n            \"time\": format_time(current_time),\n            \"to\": \"Chinatown\"\n        })\n        current_time = arrival_chinatown\n\n    # Meet William\n    william_meet_end = add_minutes(current_time, william_min_duration)\n    if william_meet_end > william_end:\n        william_meet_end = william_end\n    actual_william_duration = (william_meet_end - current_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": actual_william_duration,\n        \"time\": format_time(current_time)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_219"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Stephanie",
            "start_time": "9:11AM",
            "end_time": "9:30AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Joseph",
            "start_time": "11:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "2:30PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kimberly",
            "start_time": "3:45PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Laura",
            "start_time": "7:45PM",
            "end_time": "9:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Daniel",
            "start_time": "9:41PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Joseph",
            "start_time": "11:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "2:30PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kimberly",
            "start_time": "3:45PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Laura",
            "start_time": "7:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    minutes = time_to_minutes(time_str)\n    new_minutes = minutes + minutes_to_add\n    return minutes_to_time(new_minutes)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        \"Fisherman's Wharf\": {\n            \"The Castro\": 26,\n            \"Golden Gate Park\": 25,\n            \"Embarcadero\": 8,\n            \"Russian Hill\": 7,\n            \"Nob Hill\": 11,\n            \"Alamo Square\": 20,\n            \"North Beach\": 6\n        },\n        \"The Castro\": {\n            \"Fisherman's Wharf\": 24,\n            \"Golden Gate Park\": 11,\n            \"Embarcadero\": 22,\n            \"Russian Hill\": 18,\n            \"Nob Hill\": 16,\n            \"Alamo Square\": 8,\n            \"North Beach\": 20\n        },\n        \"Golden Gate Park\": {\n            \"Fisherman's Wharf\": 24,\n            \"The Castro\": 13,\n            \"Embarcadero\": 25,\n            \"Russian Hill\": 19,\n            \"Nob Hill\": 20,\n            \"Alamo Square\": 10,\n            \"North Beach\": 24\n        },\n        \"Embarcadero\": {\n            \"Fisherman's Wharf\": 6,\n            \"The Castro\": 25,\n            \"Golden Gate Park\": 25,\n            \"Russian Hill\": 8,\n            \"Nob Hill\": 10,\n            \"Alamo Square\": 19,\n            \"North Beach\": 5\n        },\n        \"Russian Hill\": {\n            \"Fisherman's Wharf\": 7,\n            \"The Castro\": 21,\n            \"Golden Gate Park\": 21,\n            \"Embarcadero\": 8,\n            \"Nob Hill\": 5,\n            \"Alamo Square\": 15,\n            \"North Beach\": 5\n        },\n        \"Nob Hill\": {\n            \"Fisherman's Wharf\": 11,\n            \"The Castro\": 17,\n            \"Golden Gate Park\": 17,\n            \"Embarcadero\": 9,\n            \"Russian Hill\": 5,\n            \"Alamo Square\": 11,\n            \"North Beach\": 8\n        },\n        \"Alamo Square\": {\n            \"Fisherman's Wharf\": 19,\n            \"The Castro\": 8,\n            \"Golden Gate Park\": 9,\n            \"Embarcadero\": 17,\n            \"Russian Hill\": 13,\n            \"Nob Hill\": 11,\n            \"North Beach\": 15\n        },\n        \"North Beach\": {\n            \"Fisherman's Wharf\": 5,\n            \"The Castro\": 22,\n            \"Golden Gate Park\": 22,\n            \"Embarcadero\": 6,\n            \"Russian Hill\": 4,\n            \"Nob Hill\": 7,\n            \"Alamo Square\": 16\n        }\n    }\n    return travel_times.get(from_loc, {}).get(to_loc, 0)\n\ndef schedule_meetings():\n    friends = [\n        {\"name\": \"Laura\", \"location\": \"The Castro\", \"start\": \"7:45PM\", \"end\": \"9:30PM\", \"duration\": 105},\n        {\"name\": \"Daniel\", \"location\": \"Golden Gate Park\", \"start\": \"9:15PM\", \"end\": \"9:45PM\", \"duration\": 15},\n        {\"name\": \"William\", \"location\": \"Embarcadero\", \"start\": \"7:00AM\", \"end\": \"9:00AM\", \"duration\": 90},\n        {\"name\": \"Karen\", \"location\": \"Russian Hill\", \"start\": \"2:30PM\", \"end\": \"7:45PM\", \"duration\": 30},\n        {\"name\": \"Stephanie\", \"location\": \"Nob Hill\", \"start\": \"7:30AM\", \"end\": \"9:30AM\", \"duration\": 45},\n        {\"name\": \"Joseph\", \"location\": \"Alamo Square\", \"start\": \"11:30AM\", \"end\": \"12:45PM\", \"duration\": 15},\n        {\"name\": \"Kimberly\", \"location\": \"North Beach\", \"start\": \"3:45PM\", \"end\": \"7:15PM\", \"duration\": 30}\n    ]\n\n    current_location = \"Fisherman's Wharf\"\n    current_time = \"9:00AM\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Sort friends by their availability start time\n    friends_sorted = sorted(friends, key=lambda x: time_to_minutes(x[\"start\"]))\n\n    for friend in friends_sorted:\n        travel_time = get_travel_time(current_location, friend[\"location\"])\n        arrival_time = add_minutes_to_time(current_time, travel_time)\n        friend_start_time = friend[\"start\"]\n        friend_end_time = friend[\"end\"]\n\n        if time_to_minutes(arrival_time) < time_to_minutes(friend_start_time):\n            # Wait until friend is available\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": friend[\"location\"],\n                \"duration\": travel_time,\n                \"time\": current_time,\n                \"to\": friend[\"location\"]\n            })\n            wait_time = time_to_minutes(friend_start_time) - time_to_minutes(arrival_time)\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend[\"location\"],\n                \"time\": arrival_time\n            })\n            meet_start_time = friend_start_time\n        else:\n            # Can meet immediately if within window\n            if time_to_minutes(arrival_time) <= time_to_minutes(friend_end_time):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": friend[\"location\"],\n                    \"duration\": travel_time,\n                    \"time\": current_time,\n                    \"to\": friend[\"location\"]\n                })\n                meet_start_time = arrival_time\n            else:\n                continue  # Cannot meet this friend\n\n        meet_end_time = add_minutes_to_time(meet_start_time, friend[\"duration\"])\n        if time_to_minutes(meet_end_time) > time_to_minutes(friend_end_time):\n            meet_end_time = friend_end_time\n            actual_duration = time_to_minutes(friend_end_time) - time_to_minutes(meet_start_time)\n        else:\n            actual_duration = friend[\"duration\"]\n\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"duration\": actual_duration,\n            \"time\": meet_start_time\n        })\n\n        current_location = friend[\"location\"]\n        current_time = meet_end_time\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = schedule_meetings()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_604"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Barbara",
            "start_time": "1:15PM",
            "end_time": "2:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Barbara",
            "start_time": "1:15PM",
            "end_time": "2:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_location = \"Russian Hill\"\n    arrival_time_str = \"9:00AM\"\n    barbara_location = \"Richmond District\"\n    barbara_available_start_str = \"1:15PM\"\n    barbara_available_end_str = \"6:15PM\"\n    min_meeting_duration = 45\n    travel_times = {\n        (\"Russian Hill\", \"Richmond District\"): 14,\n        (\"Richmond District\", \"Russian Hill\"): 13\n    }\n    \n    # Fix typo in location name\n    travel_times = {\n        (\"Russian Hill\", \"Richmond District\"): 14,\n        (\"Richmond District\", \"Russian Hill\"): 13\n    }\n    \n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    barbara_available_start = parse_time(barbara_available_start_str)\n    barbara_available_end = parse_time(barbara_available_end_str)\n    \n    # Calculate possible meeting times\n    # Option 1: Leave as late as possible to arrive exactly when Barbara is available\n    travel_duration = travel_times[(arrival_location, barbara_location)]\n    latest_departure = barbara_available_start - timedelta(minutes=travel_duration)\n    \n    # Option 2: Leave earlier and wait\n    # We'll choose option 1 to minimize waiting time\n    \n    # Calculate meeting end time\n    meeting_start = barbara_available_start\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > barbara_available_end:\n        # Not enough time to meet\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": barbara_location, \"duration\": travel_duration, \n             \"time\": format_time(latest_departure), \"to\": barbara_location},\n            {\"action\": \"meet\", \"location\": barbara_location, \"duration\": 0, \"time\": format_time(meeting_start)},\n            {\"action\": \"note\", \"location\": barbara_location, \"time\": format_time(meeting_start), \n             \"message\": \"Not enough time to meet minimum duration\"}\n        ]\n    else:\n        # Valid meeting\n        return_time = meeting_end\n        travel_back_duration = travel_times[(barbara_location, arrival_location)]\n        arrival_back_time = return_time + timedelta(minutes=travel_back_duration)\n        \n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": barbara_location, \"duration\": travel_duration, \n             \"time\": format_time(latest_departure), \"to\": barbara_location},\n            {\"action\": \"meet\", \"location\": barbara_location, \"duration\": min_meeting_duration, \n             \"time\": format_time(meeting_start)},\n            {\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_back_duration, \n             \"time\": format_time(return_time), \"to\": arrival_location},\n            {\"action\": \"end\", \"location\": arrival_location, \"time\": format_time(arrival_back_time)}\n        ]\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_52"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Kenneth",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Barbara",
            "start_time": "1:53PM",
            "end_time": "2:38PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Kenneth",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Barbara",
            "start_time": "1:53PM",
            "end_time": "2:38PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        (\"Financial District\", \"Chinatown\"): 5,\n        (\"Financial District\", \"Golden Gate Park\"): 23,\n        (\"Chinatown\", \"Financial District\"): 5,\n        (\"Chinatown\", \"Golden Gate Park\"): 23,\n        (\"Golden Gate Park\", \"Financial District\"): 26,\n        (\"Golden Gate Park\", \"Chinatown\"): 23,\n    }\n    \n    # Constraints\n    start_time = str_to_time(\"9:00AM\")\n    current_location = \"Financial District\"\n    \n    kenneth_available_start = str_to_time(\"12:00PM\")\n    kenneth_available_end = str_to_time(\"3:00PM\")\n    kenneth_min_duration = 90\n    \n    barbara_available_start = str_to_time(\"8:15AM\")\n    barbara_available_end = str_to_time(\"7:00PM\")\n    barbara_min_duration = 45\n    \n    schedule = []\n    \n    # Initial state\n    current_time = start_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": time_to_str(current_time)\n    })\n    \n    # Plan to meet Kenneth in Chinatown\n    # Calculate earliest possible arrival at Chinatown to meet Kenneth\n    travel_to_chinatown = travel_times[(current_location, \"Chinatown\")]\n    arrival_chinatown = current_time + timedelta(minutes=travel_to_chinatown)\n    \n    if arrival_chinatown < kenneth_available_start:\n        # Need to wait\n        wait_duration = (kenneth_available_start - arrival_chinatown).total_seconds() / 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_chinatown,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Chinatown\"\n        })\n        current_time = arrival_chinatown\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": time_to_str(current_time)\n        })\n        current_time = kenneth_available_start\n    else:\n        # Can meet immediately if within window\n        if arrival_chinatown <= kenneth_available_end - timedelta(minutes=kenneth_min_duration):\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_chinatown,\n                \"time\": time_to_str(current_time),\n                \"to\": \"Chinatown\"\n            })\n            current_time = arrival_chinatown\n        else:\n            # Can't meet Kenneth, skip to Barbara\n            pass\n    \n    # Meet Kenneth if possible\n    if current_location != \"Chinatown\" and arrival_chinatown <= kenneth_available_end - timedelta(minutes=kenneth_min_duration):\n        meet_end = current_time + timedelta(minutes=kenneth_min_duration)\n        if meet_end <= kenneth_available_end:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Chinatown\",\n                \"duration\": kenneth_min_duration,\n                \"time\": time_to_str(current_time)\n            })\n            current_time = meet_end\n            current_location = \"Chinatown\"\n    \n    # Now plan to meet Barbara in Golden Gate Park\n    travel_to_golden_gate = travel_times[(current_location, \"Golden Gate Park\")]\n    arrival_golden_gate = current_time + timedelta(minutes=travel_to_golden_gate)\n    \n    if arrival_golden_gate < barbara_available_start:\n        # Shouldn't happen based on given constraints\n        pass\n    else:\n        if arrival_golden_gate <= barbara_available_end - timedelta(minutes=barbara_min_duration):\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_golden_gate,\n                \"time\": time_to_str(current_time),\n                \"to\": \"Golden Gate Park\"\n            })\n            current_time = arrival_golden_gate\n            meet_end = current_time + timedelta(minutes=barbara_min_duration)\n            if meet_end <= barbara_available_end:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Golden Gate Park\",\n                    \"duration\": barbara_min_duration,\n                    \"time\": time_to_str(current_time)\n                })\n                current_time = meet_end\n                current_location = \"Golden Gate Park\"\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_137"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Nancy",
            "start_time": "9:16AM",
            "end_time": "10:46AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Stephanie",
            "start_time": "10:59AM",
            "end_time": "12:14PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Elizabeth",
            "start_time": "12:33PM",
            "end_time": "1:33PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Robert",
            "start_time": "1:42PM",
            "end_time": "2:27PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Melissa",
            "start_time": "2:48PM",
            "end_time": "3:18PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "James",
            "start_time": "3:25PM",
            "end_time": "5:25PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Sarah",
            "start_time": "5:37PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Nancy",
            "start_time": "9:16AM",
            "end_time": "10:46AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Stephanie",
            "start_time": "10:59AM",
            "end_time": "12:14PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Elizabeth",
            "start_time": "12:33PM",
            "end_time": "1:33PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Robert",
            "start_time": "1:42PM",
            "end_time": "2:27PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Melissa",
            "start_time": "2:48PM",
            "end_time": "3:18PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "James",
            "start_time": "3:25PM",
            "end_time": "5:25PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Sarah",
            "start_time": "5:37PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef time_add(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        ('The Castro', 'North Beach'): 20,\n        ('The Castro', 'Golden Gate Park'): 11,\n        ('The Castro', 'Embarcadero'): 22,\n        ('The Castro', 'Haight-Ashbury'): 6,\n        ('The Castro', 'Richmond District'): 16,\n        ('The Castro', 'Nob Hill'): 16,\n        ('The Castro', 'Marina District'): 21,\n        ('The Castro', 'Presidio'): 20,\n        ('The Castro', 'Union Square'): 19,\n        ('The Castro', 'Financial District'): 21,\n        ('North Beach', 'The Castro'): 23,\n        ('North Beach', 'Golden Gate Park'): 22,\n        ('North Beach', 'Embarcadero'): 6,\n        ('North Beach', 'Haight-Ashbury'): 18,\n        ('North Beach', 'Richmond District'): 18,\n        ('North Beach', 'Nob Hill'): 7,\n        ('North Beach', 'Marina District'): 9,\n        ('North Beach', 'Presidio'): 17,\n        ('North Beach', 'Union Square'): 7,\n        ('North Beach', 'Financial District'): 8,\n        ('Golden Gate Park', 'The Castro'): 13,\n        ('Golden Gate Park', 'North Beach'): 23,\n        ('Golden Gate Park', 'Embarcadero'): 25,\n        ('Golden Gate Park', 'Haight-Ashbury'): 7,\n        ('Golden Gate Park', 'Richmond District'): 7,\n        ('Golden Gate Park', 'Nob Hill'): 20,\n        ('Golden Gate Park', 'Marina District'): 16,\n        ('Golden Gate Park', 'Presidio'): 11,\n        ('Golden Gate Park', 'Union Square'): 22,\n        ('Golden Gate Park', 'Financial District'): 26,\n        ('Embarcadero', 'The Castro'): 25,\n        ('Embarcadero', 'North Beach'): 5,\n        ('Embarcadero', 'Golden Gate Park'): 25,\n        ('Embarcadero', 'Haight-Ashbury'): 21,\n        ('Embarcadero', 'Richmond District'): 21,\n        ('Embarcadero', 'Nob Hill'): 10,\n        ('Embarcadero', 'Marina District'): 12,\n        ('Embarcadero', 'Presidio'): 20,\n        ('Embarcadero', 'Union Square'): 10,\n        ('Embarcadero', 'Financial District'): 5,\n        ('Haight-Ashbury', 'The Castro'): 6,\n        ('Haight-Ashbury', 'North Beach'): 19,\n        ('Haight-Ashbury', 'Golden Gate Park'): 7,\n        ('Haight-Ashbury', 'Embarcadero'): 20,\n        ('Haight-Ashbury', 'Richmond District'): 10,\n        ('Haight-Ashbury', 'Nob Hill'): 15,\n        ('Haight-Ashbury', 'Marina District'): 17,\n        ('Haight-Ashbury', 'Presidio'): 15,\n        ('Haight-Ashbury', 'Union Square'): 19,\n        ('Haight-Ashbury', 'Financial District'): 21,\n        ('Richmond District', 'The Castro'): 16,\n        ('Richmond District', 'North Beach'): 17,\n        ('Richmond District', 'Golden Gate Park'): 9,\n        ('Richmond District', 'Embarcadero'): 19,\n        ('Richmond District', 'Haight-Ashbury'): 10,\n        ('Richmond District', 'Nob Hill'): 17,\n        ('Richmond District', 'Marina District'): 9,\n        ('Richmond District', 'Presidio'): 7,\n        ('Richmond District', 'Union Square'): 21,\n        ('Richmond District', 'Financial District'): 22,\n        ('Nob Hill', 'The Castro'): 17,\n        ('Nob Hill', 'North Beach'): 8,\n        ('Nob Hill', 'Golden Gate Park'): 17,\n        ('Nob Hill', 'Embarcadero'): 9,\n        ('Nob Hill', 'Haight-Ashbury'): 13,\n        ('Nob Hill', 'Richmond District'): 14,\n        ('Nob Hill', 'Marina District'): 11,\n        ('Nob Hill', 'Presidio'): 17,\n        ('Nob Hill', 'Union Square'): 7,\n        ('Nob Hill', 'Financial District'): 9,\n        ('Marina District', 'The Castro'): 22,\n        ('Marina District', 'North Beach'): 11,\n        ('Marina District', 'Golden Gate Park'): 18,\n        ('Marina District', 'Embarcadero'): 14,\n        ('Marina District', 'Haight-Ashbury'): 16,\n        ('Marina District', 'Richmond District'): 11,\n        ('Marina District', 'Nob Hill'): 12,\n        ('Marina District', 'Presidio'): 10,\n        ('Marina District', 'Union Square'): 16,\n        ('Marina District', 'Financial District'): 17,\n        ('Presidio', 'The Castro'): 21,\n        ('Presidio', 'North Beach'): 18,\n        ('Presidio', 'Golden Gate Park'): 12,\n        ('Presidio', 'Embarcadero'): 20,\n        ('Presidio', 'Haight-Ashbury'): 15,\n        ('Presidio', 'Richmond District'): 7,\n        ('Presidio', 'Nob Hill'): 18,\n        ('Presidio', 'Marina District'): 11,\n        ('Presidio', 'Union Square'): 22,\n        ('Presidio', 'Financial District'): 23,\n        ('Union Square', 'The Castro'): 17,\n        ('Union Square', 'North Beach'): 10,\n        ('Union Square', 'Golden Gate Park'): 22,\n        ('Union Square', 'Embarcadero'): 11,\n        ('Union Square', 'Haight-Ashbury'): 18,\n        ('Union Square', 'Richmond District'): 20,\n        ('Union Square', 'Nob Hill'): 9,\n        ('Union Square', 'Marina District'): 18,\n        ('Union Square', 'Presidio'): 24,\n        ('Union Square', 'Financial District'): 9,\n        ('Financial District', 'The Castro'): 20,\n        ('Financial District', 'North Beach'): 7,\n        ('Financial District', 'Golden Gate Park'): 23,\n        ('Financial District', 'Embarcadero'): 4,\n        ('Financial District', 'Haight-Ashbury'): 19,\n        ('Financial District', 'Richmond District'): 21,\n        ('Financial District', 'Nob Hill'): 8,\n        ('Financial District', 'Marina District'): 15,\n        ('Financial District', 'Presidio'): 22,\n        ('Financial District', 'Union Square'): 9,\n    }\n    return travel_times.get((from_loc, to_loc), 0)\n\ndef main():\n    friends = [\n        {'name': 'Steven', 'location': 'North Beach', 'start': '5:30PM', 'end': '8:30PM', 'duration': 15},\n        {'name': 'Sarah', 'location': 'Golden Gate Park', 'start': '5:00PM', 'end': '7:15PM', 'duration': 75},\n        {'name': 'Brian', 'location': 'Embarcadero', 'start': '2:15PM', 'end': '4:00PM', 'duration': 105},\n        {'name': 'Stephanie', 'location': 'Haight-Ashbury', 'start': '10:15AM', 'end': '12:15PM', 'duration': 75},\n        {'name': 'Melissa', 'location': 'Richmond District', 'start': '2:00PM', 'end': '7:30PM', 'duration': 30},\n        {'name': 'Nancy', 'location': 'Nob Hill', 'start': '8:15AM', 'end': '12:45PM', 'duration': 90},\n        {'name': 'David', 'location': 'Marina District', 'start': '11:15AM', 'end': '1:15PM', 'duration': 120},\n        {'name': 'James', 'location': 'Presidio', 'start': '3:00PM', 'end': '6:15PM', 'duration': 120},\n        {'name': 'Elizabeth', 'location': 'Union Square', 'start': '11:30AM', 'end': '9:00PM', 'duration': 60},\n        {'name': 'Robert', 'location': 'Financial District', 'start': '1:15PM', 'end': '3:15PM', 'duration': 45},\n    ]\n\n    current_time = parse_time('9:00AM')\n    current_location = 'The Castro'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n    # Sort friends by earliest start time\n    friends_sorted = sorted(friends, key=lambda x: parse_time(x['start']))\n\n    for friend in friends_sorted:\n        start_time = parse_time(friend['start'])\n        end_time = parse_time(friend['end'])\n        duration = friend['duration']\n        location = friend['location']\n\n        # Travel to friend's location\n        travel_time = get_travel_time(current_location, location)\n        arrival_time = time_add(current_time, travel_time)\n        if arrival_time > end_time:\n            continue  # Can't make it in time\n\n        # Check if we need to wait\n        if arrival_time < start_time:\n            wait_time = (start_time - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'travel',\n                'location': location,\n                'duration': travel_time,\n                'time': format_time(current_time),\n                'to': location\n            })\n            schedule.append({\n                'action': 'wait',\n                'location': location,\n                'time': format_time(arrival_time)\n            })\n            meet_time = start_time\n        else:\n            schedule.append({\n                'action': 'travel',\n                'location': location,\n                'duration': travel_time,\n                'time': format_time(current_time),\n                'to': location\n            })\n            meet_time = arrival_time\n\n        # Check if we can meet for the required duration\n        if time_add(meet_time, duration) > end_time:\n            continue  # Not enough time to meet\n\n        # Add meeting to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'duration': duration,\n            'time': format_time(meet_time)\n        })\n        current_time = time_add(meet_time, duration)\n        current_location = location\n\n    print(json.dumps({'schedule': schedule}, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_911"
    },
    {
      "final_program_time": {
        "itinerary": []
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jeffrey",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Deborah",
            "start_time": "1:45PM",
            "end_time": "3:15PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Margaret",
            "start_time": "4:30PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Ronald",
            "start_time": "6:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Emily",
            "start_time": "7:33PM",
            "end_time": "7:48PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Nob Hill\": {\n        \"Richmond District\": 14,\n        \"Financial District\": 9,\n        \"North Beach\": 8,\n        \"The Castro\": 17,\n        \"Golden Gate Park\": 17\n    },\n    \"Richmond District\": {\n        \"Nob Hill\": 17,\n        \"Financial District\": 22,\n        \"North Beach\": 17,\n        \"The Castro\": 16,\n        \"Golden Gate Park\": 9\n    },\n    \"Financial District\": {\n        \"Nob Hill\": 8,\n        \"Richmond District\": 21,\n        \"North Beach\": 7,\n        \"The Castro\": 23,\n        \"Golden Gate Park\": 23\n    },\n    \"North Beach\": {\n        \"Nob Hill\": 7,\n        \"Richmond District\": 18,\n        \"Financial District\": 8,\n        \"The Castro\": 22,\n        \"Golden Gate Park\": 22\n    },\n    \"The Castro\": {\n        \"Nob Hill\": 16,\n        \"Richmond District\": 16,\n        \"Financial District\": 20,\n        \"North Beach\": 20,\n        \"Golden Gate Park\": 11\n    },\n    \"Golden Gate Park\": {\n        \"Nob Hill\": 20,\n        \"Richmond District\": 7,\n        \"Financial District\": 26,\n        \"North Beach\": 24,\n        \"The Castro\": 13\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        \"name\": \"Emily\",\n        \"location\": \"Richmond District\",\n        \"start\": time_to_minutes(\"7:00PM\"),\n        \"end\": time_to_minutes(\"9:00PM\"),\n        \"duration\": 15\n    },\n    {\n        \"name\": \"Margaret\",\n        \"location\": \"Financial District\",\n        \"start\": time_to_minutes(\"4:30PM\"),\n        \"end\": time_to_minutes(\"8:15PM\"),\n        \"duration\": 75\n    },\n    {\n        \"name\": \"Ronald\",\n        \"location\": \"North Beach\",\n        \"start\": time_to_minutes(\"6:30PM\"),\n        \"end\": time_to_minutes(\"7:30PM\"),\n        \"duration\": 45\n    },\n    {\n        \"name\": \"Deborah\",\n        \"location\": \"The Castro\",\n        \"start\": time_to_minutes(\"1:45PM\"),\n        \"end\": time_to_minutes(\"9:15PM\"),\n        \"duration\": 90\n    },\n    {\n        \"name\": \"Jeffrey\",\n        \"location\": \"Golden Gate Park\",\n        \"start\": time_to_minutes(\"11:15AM\"),\n        \"end\": time_to_minutes(\"2:30PM\"),\n        \"duration\": 120\n    }\n]\n\ncurrent_time = time_to_minutes(\"9:00AM\")\ncurrent_location = \"Nob Hill\"\nschedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n\ndef can_meet(friend, arrival_time):\n    meeting_end = arrival_time + friend[\"duration\"]\n    return arrival_time >= friend[\"start\"] and meeting_end <= friend[\"end\"]\n\ndef find_best_friend(current_location, current_time, remaining_friends):\n    best_friend = None\n    best_arrival_time = None\n    best_travel_time = None\n    best_meeting_end = None\n\n    for friend in remaining_friends:\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        meeting_end = arrival_time + friend[\"duration\"]\n\n        if can_meet(friend, arrival_time):\n            if best_friend is None or arrival_time < best_arrival_time:\n                best_friend = friend\n                best_arrival_time = arrival_time\n                best_travel_time = travel_time\n                best_meeting_end = meeting_end\n\n    return best_friend, best_travel_time, best_arrival_time, best_meeting_end\n\nremaining_friends = friends.copy()\n\nwhile remaining_friends:\n    best_friend, travel_time, arrival_time, meeting_end = find_best_friend(current_location, current_time, remaining_friends)\n    if not best_friend:\n        break\n\n    # Add travel action\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time,\n        \"time\": minutes_to_time(current_time),\n        \"to\": best_friend[\"location\"]\n    })\n\n    # Add meet action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": best_friend[\"location\"],\n        \"duration\": best_friend[\"duration\"],\n        \"time\": minutes_to_time(arrival_time)\n    })\n\n    current_time = meeting_end\n    current_location = best_friend[\"location\"]\n    remaining_friends.remove(best_friend)\n\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_433"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Timothy",
            "start_time": "9:13AM",
            "end_time": "10:28AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "David",
            "start_time": "10:45AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Robert",
            "start_time": "12:15PM",
            "end_time": "1:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "David",
            "start_time": "10:45AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Timothy",
            "start_time": "11:12AM",
            "end_time": "12:27PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Robert",
            "start_time": "12:42PM",
            "end_time": "2:12PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    minutes = time_to_minutes(time_str)\n    new_minutes = minutes + minutes_to_add\n    return minutes_to_time(new_minutes)\n\ndef calculate_schedule():\n    # Travel times in minutes\n    travel_times = {\n        ('Financial District', 'Fisherman\\'s Wharf'): 10,\n        ('Financial District', 'Pacific Heights'): 13,\n        ('Financial District', 'Mission District'): 17,\n        ('Fisherman\\'s Wharf', 'Financial District'): 11,\n        ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n        ('Fisherman\\'s Wharf', 'Mission District'): 22,\n        ('Pacific Heights', 'Financial District'): 13,\n        ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n        ('Pacific Heights', 'Mission District'): 15,\n        ('Mission District', 'Financial District'): 17,\n        ('Mission District', 'Fisherman\\'s Wharf'): 22,\n        ('Mission District', 'Pacific Heights'): 16,\n    }\n\n    # Constraints\n    current_location = 'Financial District'\n    current_time = '9:00AM'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Friend constraints\n    friends = [\n        {'name': 'Timothy', 'location': 'Pacific Heights', 'start': '9:00AM', 'end': '3:30PM', 'duration': 75},\n        {'name': 'David', 'location': 'Fisherman\\'s Wharf', 'start': '10:45AM', 'end': '3:30PM', 'duration': 15},\n        {'name': 'Robert', 'location': 'Mission District', 'start': '12:15PM', 'end': '7:45PM', 'duration': 90},\n    ]\n\n    # Sort friends by earliest possible meeting time\n    friends_sorted = sorted(friends, key=lambda x: time_to_minutes(x['start']))\n\n    for friend in friends_sorted:\n        location = friend['location']\n        start_window = friend['start']\n        end_window = friend['end']\n        duration = friend['duration']\n\n        # Travel to friend's location\n        if current_location != location:\n            travel_duration = travel_times[(current_location, location)]\n            travel_start_time = current_time\n            travel_end_time = add_minutes_to_time(travel_start_time, travel_duration)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": travel_start_time,\n                \"to\": location\n            })\n            current_time = travel_end_time\n            current_location = location\n\n        # Check if we can meet now or need to wait\n        current_minutes = time_to_minutes(current_time)\n        start_minutes = time_to_minutes(start_window)\n        end_minutes = time_to_minutes(end_window)\n\n        if current_minutes < start_minutes:\n            wait_duration = start_minutes - current_minutes\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location,\n                \"time\": current_time,\n                \"duration\": wait_duration\n            })\n            current_time = start_window\n\n        # Check if we can meet for the required duration\n        meeting_end_minutes = time_to_minutes(current_time) + duration\n        if meeting_end_minutes <= end_minutes:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"duration\": duration,\n                \"time\": current_time,\n                \"with\": friend['name']\n            })\n            current_time = add_minutes_to_time(current_time, duration)\n        else:\n            # Cannot meet this friend, skip\n            pass\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_203"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Melissa",
            "start_time": "9:25AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Emily",
            "start_time": "4:45PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "7:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Melissa",
            "start_time": "9:25AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Emily",
            "start_time": "4:45PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "7:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    new_time = time_obj + timedelta(minutes=minutes_to_add)\n    return new_time.strftime('%I:%M%p').lstrip('0').replace(' 0', ' ')\n\ndef compute_schedule():\n    # Travel times in minutes\n    travel_times = {\n        ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n        ('Fisherman\\'s Wharf', 'Presidio'): 17,\n        ('Fisherman\\'s Wharf', 'Richmond District'): 18,\n        ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n        ('Golden Gate Park', 'Presidio'): 11,\n        ('Golden Gate Park', 'Richmond District'): 7,\n        ('Presidio', 'Fisherman\\'s Wharf'): 19,\n        ('Presidio', 'Golden Gate Park'): 12,\n        ('Presidio', 'Richmond District'): 7,\n        ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n        ('Richmond District', 'Golden Gate Park'): 9,\n        ('Richmond District', 'Presidio'): 7\n    }\n\n    # Constraints\n    current_location = 'Fisherman\\'s Wharf'\n    current_time = '9:00AM'\n    current_time_min = time_to_minutes(current_time)\n\n    melissa_available_start = '8:30AM'\n    melissa_available_end = '8:00PM'\n    melissa_min_duration = 15\n\n    nancy_available_start = '7:45PM'\n    nancy_available_end = '10:00PM'\n    nancy_min_duration = 105\n\n    emily_available_start = '4:45PM'\n    emily_available_end = '10:00PM'\n    emily_min_duration = 120\n\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Try to meet Melissa first\n    melissa_location = 'Golden Gate Park'\n    travel_duration = travel_times[(current_location, melissa_location)]\n    arrival_time_min = current_time_min + travel_duration\n    melissa_start_min = time_to_minutes(melissa_available_start)\n    melissa_end_min = time_to_minutes(melissa_available_end)\n\n    if arrival_time_min <= melissa_end_min - melissa_min_duration:\n        meet_start_min = max(arrival_time_min, melissa_start_min)\n        meet_end_min = meet_start_min + melissa_min_duration\n        if meet_end_min <= melissa_end_min:\n            travel_time_str = minutes_to_time(travel_duration)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": current_time,\n                \"to\": melissa_location\n            })\n            current_time_min = meet_start_min\n            current_time = minutes_to_time(current_time_min)\n            current_location = melissa_location\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": melissa_location,\n                \"duration\": melissa_min_duration,\n                \"time\": current_time\n            })\n            current_time_min = meet_end_min\n            current_time = minutes_to_time(current_time_min)\n\n    # Next try to meet Emily\n    emily_location = 'Richmond District'\n    travel_duration = travel_times[(current_location, emily_location)]\n    arrival_time_min = current_time_min + travel_duration\n    emily_start_min = time_to_minutes(emily_available_start)\n    emily_end_min = time_to_minutes(emily_available_end)\n\n    if arrival_time_min <= emily_end_min - emily_min_duration:\n        meet_start_min = max(arrival_time_min, emily_start_min)\n        meet_end_min = meet_start_min + emily_min_duration\n        if meet_end_min <= emily_end_min:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": current_time,\n                \"to\": emily_location\n            })\n            current_time_min = meet_start_min\n            current_time = minutes_to_time(current_time_min)\n            current_location = emily_location\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": emily_location,\n                \"duration\": emily_min_duration,\n                \"time\": current_time\n            })\n            current_time_min = meet_end_min\n            current_time = minutes_to_time(current_time_min)\n\n    # Finally try to meet Nancy\n    nancy_location = 'Presidio'\n    travel_duration = travel_times[(current_location, nancy_location)]\n    arrival_time_min = current_time_min + travel_duration\n    nancy_start_min = time_to_minutes(nancy_available_start)\n    nancy_end_min = time_to_minutes(nancy_available_end)\n\n    if arrival_time_min <= nancy_end_min - nancy_min_duration:\n        meet_start_min = max(arrival_time_min, nancy_start_min)\n        meet_end_min = meet_start_min + nancy_min_duration\n        if meet_end_min <= nancy_end_min:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": current_time,\n                \"to\": nancy_location\n            })\n            current_time_min = meet_start_min\n            current_time = minutes_to_time(current_time_min)\n            current_location = nancy_location\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": nancy_location,\n                \"duration\": nancy_min_duration,\n                \"time\": current_time\n            })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_224"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Joseph",
            "start_time": "9:49AM",
            "end_time": "10:49AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "10:54AM",
            "end_time": "11:09AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Matthew",
            "start_time": "11:32AM",
            "end_time": "12:17PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Charles",
            "start_time": "12:39PM",
            "end_time": "2:39PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Joshua",
            "start_time": "2:50PM",
            "end_time": "4:35PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jeffrey",
            "start_time": "4:56PM",
            "end_time": "6:11PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Rebecca",
            "start_time": "6:24PM",
            "end_time": "7:09PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Paul",
            "start_time": "7:21PM",
            "end_time": "7:36PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Joseph",
            "start_time": "9:15AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "10:45AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Joshua",
            "start_time": "11:04AM",
            "end_time": "12:49PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jeffrey",
            "start_time": "1:10PM",
            "end_time": "2:25PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Charles",
            "start_time": "2:43PM",
            "end_time": "4:43PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Matthew",
            "start_time": "5:05PM",
            "end_time": "5:50PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Paul",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Rebecca",
            "start_time": "7:41PM",
            "end_time": "8:26PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef main():\n    # Travel times dictionary: {from: {to: minutes}}\n    travel_times = {\n        'Marina District': {\n            'Embarcadero': 14,\n            'Bayview': 27,\n            'Union Square': 16,\n            'Chinatown': 15,\n            'Sunset District': 19,\n            'Golden Gate Park': 18,\n            'Financial District': 17,\n            'Haight-Ashbury': 16,\n            'Mission District': 20\n        },\n        'Embarcadero': {\n            'Marina District': 12,\n            'Bayview': 21,\n            'Union Square': 10,\n            'Chinatown': 7,\n            'Sunset District': 30,\n            'Golden Gate Park': 25,\n            'Financial District': 5,\n            'Haight-Ashbury': 21,\n            'Mission District': 20\n        },\n        'Bayview': {\n            'Marina District': 27,\n            'Embarcadero': 19,\n            'Union Square': 18,\n            'Chinatown': 19,\n            'Sunset District': 23,\n            'Golden Gate Park': 22,\n            'Financial District': 19,\n            'Haight-Ashbury': 19,\n            'Mission District': 13\n        },\n        'Union Square': {\n            'Marina District': 18,\n            'Embarcadero': 11,\n            'Bayview': 15,\n            'Chinatown': 7,\n            'Sunset District': 27,\n            'Golden Gate Park': 22,\n            'Financial District': 9,\n            'Haight-Ashbury': 18,\n            'Mission District': 14\n        },\n        'Chinatown': {\n            'Marina District': 12,\n            'Embarcadero': 5,\n            'Bayview': 20,\n            'Union Square': 7,\n            'Sunset District': 29,\n            'Golden Gate Park': 23,\n            'Financial District': 5,\n            'Haight-Ashbury': 19,\n            'Mission District': 17\n        },\n        'Sunset District': {\n            'Marina District': 21,\n            'Embarcadero': 30,\n            'Bayview': 22,\n            'Union Square': 30,\n            'Chinatown': 30,\n            'Golden Gate Park': 11,\n            'Financial District': 30,\n            'Haight-Ashbury': 15,\n            'Mission District': 25\n        },\n        'Golden Gate Park': {\n            'Marina District': 16,\n            'Embarcadero': 25,\n            'Bayview': 23,\n            'Union Square': 22,\n            'Chinatown': 23,\n            'Sunset District': 10,\n            'Financial District': 26,\n            'Haight-Ashbury': 7,\n            'Mission District': 17\n        },\n        'Financial District': {\n            'Marina District': 15,\n            'Embarcadero': 4,\n            'Bayview': 19,\n            'Union Square': 9,\n            'Chinatown': 5,\n            'Sunset District': 30,\n            'Golden Gate Park': 23,\n            'Haight-Ashbury': 19,\n            'Mission District': 17\n        },\n        'Haight-Ashbury': {\n            'Marina District': 17,\n            'Embarcadero': 20,\n            'Bayview': 18,\n            'Union Square': 19,\n            'Chinatown': 19,\n            'Sunset District': 15,\n            'Golden Gate Park': 7,\n            'Financial District': 21,\n            'Mission District': 11\n        },\n        'Mission District': {\n            'Marina District': 19,\n            'Embarcadero': 19,\n            'Bayview': 14,\n            'Union Square': 15,\n            'Chinatown': 16,\n            'Sunset District': 24,\n            'Golden Gate Park': 17,\n            'Financial District': 15,\n            'Haight-Ashbury': 12\n        }\n    }\n\n    # Friend constraints\n    friends = [\n        {'name': 'Joshua', 'location': 'Embarcadero', 'start': '9:45AM', 'end': '6:00PM', 'duration': 105},\n        {'name': 'Jeffrey', 'location': 'Bayview', 'start': '9:45AM', 'end': '8:15PM', 'duration': 75},\n        {'name': 'Charles', 'location': 'Union Square', 'start': '10:45AM', 'end': '8:15PM', 'duration': 120},\n        {'name': 'Joseph', 'location': 'Chinatown', 'start': '7:00AM', 'end': '3:30PM', 'duration': 60},\n        {'name': 'Elizabeth', 'location': 'Sunset District', 'start': '9:00AM', 'end': '9:45AM', 'duration': 45},\n        {'name': 'Matthew', 'location': 'Golden Gate Park', 'start': '11:00AM', 'end': '7:30PM', 'duration': 45},\n        {'name': 'Carol', 'location': 'Financial District', 'start': '10:45AM', 'end': '11:15AM', 'duration': 15},\n        {'name': 'Paul', 'location': 'Haight-Ashbury', 'start': '7:15PM', 'end': '8:30PM', 'duration': 15},\n        {'name': 'Rebecca', 'location': 'Mission District', 'start': '5:00PM', 'end': '9:45PM', 'duration': 45}\n    ]\n\n    # Initialize schedule\n    current_time = parse_time('9:00AM')\n    current_location = 'Marina District'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n    # Helper function to find travel time\n    def get_travel_time(from_loc, to_loc):\n        return travel_times[from_loc][to_loc]\n\n    # Process Elizabeth first (only available 9:00AM-9:45AM)\n    elizabeth = next(f for f in friends if f['name'] == 'Elizabeth')\n    travel_time = get_travel_time(current_location, elizabeth['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(elizabeth['end']):\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': elizabeth['location']\n        })\n        current_time = arrival_time\n        current_location = elizabeth['location']\n        \n        meet_end = add_minutes(current_time, elizabeth['duration'])\n        if meet_end <= parse_time(elizabeth['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': elizabeth['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Joseph next (available until 3:30PM)\n    joseph = next(f for f in friends if f['name'] == 'Joseph')\n    travel_time = get_travel_time(current_location, joseph['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(joseph['end']):\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': joseph['location']\n        })\n        current_time = arrival_time\n        current_location = joseph['location']\n        \n        meet_end = add_minutes(current_time, joseph['duration'])\n        if meet_end <= parse_time(joseph['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': joseph['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Carol (only available 10:45AM-11:15AM)\n    carol = next(f for f in friends if f['name'] == 'Carol')\n    travel_time = get_travel_time(current_location, carol['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(carol['end']):\n        if arrival_time < parse_time(carol['start']):\n            wait_time = (parse_time(carol['start']) - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': carol['location'],\n                'time': format_time(arrival_time)\n            })\n            arrival_time = parse_time(carol['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': carol['location']\n        })\n        current_time = arrival_time\n        current_location = carol['location']\n        \n        meet_end = add_minutes(current_time, carol['duration'])\n        if meet_end <= parse_time(carol['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': carol['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Matthew (available 11:00AM-7:30PM)\n    matthew = next(f for f in friends if f['name'] == 'Matthew')\n    travel_time = get_travel_time(current_location, matthew['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(matthew['end']):\n        if arrival_time < parse_time(matthew['start']):\n            wait_time = (parse_time(matthew['start']) - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': matthew['location'],\n                'time': format_time(arrival_time)\n            })\n            arrival_time = parse_time(matthew['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': matthew['location']\n        })\n        current_time = arrival_time\n        current_location = matthew['location']\n        \n        meet_end = add_minutes(current_time, matthew['duration'])\n        if meet_end <= parse_time(matthew['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': matthew['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Charles (available 10:45AM-8:15PM)\n    charles = next(f for f in friends if f['name'] == 'Charles')\n    travel_time = get_travel_time(current_location, charles['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(charles['end']):\n        if arrival_time < parse_time(charles['start']):\n            wait_time = (parse_time(charles['start']) - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': charles['location'],\n                'time': format_time(arrival_time)\n            })\n            arrival_time = parse_time(charles['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': charles['location']\n        })\n        current_time = arrival_time\n        current_location = charles['location']\n        \n        meet_end = add_minutes(current_time, charles['duration'])\n        if meet_end <= parse_time(charles['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': charles['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Joshua (available 9:45AM-6:00PM)\n    joshua = next(f for f in friends if f['name'] == 'Joshua')\n    travel_time = get_travel_time(current_location, joshua['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(joshua['end']):\n        if arrival_time < parse_time(joshua['start']):\n            wait_time = (parse_time(joshua['start']) - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': joshua['location'],\n                'time': format_time(arrival_time)\n            })\n            arrival_time = parse_time(joshua['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': joshua['location']\n        })\n        current_time = arrival_time\n        current_location = joshua['location']\n        \n        meet_end = add_minutes(current_time, joshua['duration'])\n        if meet_end <= parse_time(joshua['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': joshua['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Jeffrey (available 9:45AM-8:15PM)\n    jeffrey = next(f for f in friends if f['name'] == 'Jeffrey')\n    travel_time = get_travel_time(current_location, jeffrey['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(jeffrey['end']):\n        if arrival_time < parse_time(jeffrey['start']):\n            wait_time = (parse_time(jeffrey['start']) - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': jeffrey['location'],\n                'time': format_time(arrival_time)\n            })\n            arrival_time = parse_time(jeffrey['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': jeffrey['location']\n        })\n        current_time = arrival_time\n        current_location = jeffrey['location']\n        \n        meet_end = add_minutes(current_time, jeffrey['duration'])\n        if meet_end <= parse_time(jeffrey['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': jeffrey['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Rebecca (available 5:00PM-9:45PM)\n    rebecca = next(f for f in friends if f['name'] == 'Rebecca')\n    travel_time = get_travel_time(current_location, rebecca['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(rebecca['end']):\n        if arrival_time < parse_time(rebecca['start']):\n            wait_time = (parse_time(rebecca['start']) - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': rebecca['location'],\n                'time': format_time(arrival_time)\n            })\n            arrival_time = parse_time(rebecca['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': rebecca['location']\n        })\n        current_time = arrival_time\n        current_location = rebecca['location']\n        \n        meet_end = add_minutes(current_time, rebecca['duration'])\n        if meet_end <= parse_time(rebecca['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': rebecca['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    # Process Paul (available 7:15PM-8:30PM)\n    paul = next(f for f in friends if f['name'] == 'Paul')\n    travel_time = get_travel_time(current_location, paul['location'])\n    arrival_time = add_minutes(current_time, travel_time)\n    \n    if arrival_time <= parse_time(paul['end']):\n        if arrival_time < parse_time(paul['start']):\n            wait_time = (parse_time(paul['start']) - arrival_time).seconds // 60\n            schedule.append({\n                'action': 'wait',\n                'location': paul['location'],\n                'time': format_time(arrival_time)\n            })\n            arrival_time = parse_time(paul['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': format_time(current_time),\n            'to': paul['location']\n        })\n        current_time = arrival_time\n        current_location = paul['location']\n        \n        meet_end = add_minutes(current_time, paul['duration'])\n        if meet_end <= parse_time(paul['end']):\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': paul['duration'],\n                'time': format_time(current_time)\n            })\n            current_time = meet_end\n\n    print(json.dumps({'schedule': schedule}, indent=2))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_813"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Emily",
            "start_time": "4:00PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Margaret",
            "start_time": "7:00PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Emily",
            "start_time": "4:00PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Margaret",
            "start_time": "7:00PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        (\"North Beach\", \"Union Square\"): 7,\n        (\"North Beach\", \"Russian Hill\"): 4,\n        (\"Union Square\", \"North Beach\"): 10,\n        (\"Union Square\", \"Russian Hill\"): 13,\n        (\"Russian Hill\", \"North Beach\"): 5,\n        (\"Russian Hill\", \"Union Square\"): 11,\n    }\n    \n    current_location = \"North Beach\"\n    current_time = str_to_time(\"9:00AM\")\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": time_to_str(current_time)}]\n    \n    # Emily's constraints\n    emily_start = str_to_time(\"4:00PM\")\n    emily_end = str_to_time(\"5:15PM\")\n    emily_min_duration = 45\n    \n    # Margaret's constraints\n    margaret_start = str_to_time(\"7:00PM\")\n    margaret_end = str_to_time(\"9:00PM\")\n    margaret_min_duration = 120\n    \n    # Calculate possible Emily meeting\n    # Need to arrive at Union Square by (emily_end - emily_min_duration)\n    latest_departure_for_emily = emily_end - timedelta(minutes=emily_min_duration)\n    \n    # Calculate travel time to Union Square\n    travel_to_emily = travel_times[(current_location, \"Union Square\")]\n    arrival_at_emily = current_time + timedelta(minutes=travel_to_emily)\n    \n    if arrival_at_emily <= latest_departure_for_emily:\n        # Can meet Emily\n        if arrival_at_emily < emily_start:\n            # Need to wait\n            wait_duration = (emily_start - arrival_at_emily).total_seconds() / 60\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_emily,\n                \"time\": time_to_str(current_time),\n                \"to\": \"Union Square\"\n            })\n            current_time = arrival_at_emily\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Union Square\",\n                \"time\": time_to_str(current_time),\n            })\n            current_time = emily_start\n        else:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_emily,\n                \"time\": time_to_str(current_time),\n                \"to\": \"Union Square\"\n            })\n            current_time = arrival_at_emily\n        \n        # Add meeting with Emily\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"duration\": emily_min_duration,\n            \"time\": time_to_str(current_time),\n        })\n        current_time += timedelta(minutes=emily_min_duration)\n        current_location = \"Union Square\"\n    \n    # Now try to meet Margaret\n    travel_to_margaret = travel_times[(current_location, \"Russian Hill\")]\n    arrival_at_margaret = current_time + timedelta(minutes=travel_to_margaret)\n    \n    if arrival_at_margaret <= margaret_end - timedelta(minutes=margaret_min_duration):\n        # Can meet Margaret\n        if arrival_at_margaret < margaret_start:\n            # Need to wait\n            wait_duration = (margaret_start - arrival_at_margaret).total_seconds() / 60\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_margaret,\n                \"time\": time_to_str(current_time),\n                \"to\": \"Russian Hill\"\n            })\n            current_time = arrival_at_margaret\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Russian Hill\",\n                \"time\": time_to_str(current_time),\n            })\n            current_time = margaret_start\n        else:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_margaret,\n                \"time\": time_to_str(current_time),\n                \"to\": \"Russian Hill\"\n            })\n            current_time = arrival_at_margaret\n        \n        # Add meeting with Margaret\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": margaret_min_duration,\n            \"time\": time_to_str(current_time),\n        })\n        current_time += timedelta(minutes=margaret_min_duration)\n    \n    return schedule\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_170"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Laura",
            "start_time": "9:40AM",
            "end_time": "11:25AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Charles",
            "start_time": "12:13PM",
            "end_time": "12:58PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Melissa",
            "start_time": "1:24PM",
            "end_time": "1:54PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Margaret",
            "start_time": "2:47PM",
            "end_time": "4:47PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Laura",
            "start_time": "9:14AM",
            "end_time": "10:59AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Charles",
            "start_time": "11:30AM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Margaret",
            "start_time": "2:15PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Rebecca",
            "start_time": "4:24PM",
            "end_time": "5:54PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Melissa",
            "start_time": "5:59PM",
            "end_time": "6:29PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Patricia",
            "start_time": "6:46PM",
            "end_time": "7:31PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Robert",
            "start_time": "7:46PM",
            "end_time": "8:16PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Karen",
            "start_time": "8:28PM",
            "end_time": "9:28PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Marina District': {\n        'Bayview': 27,\n        'Sunset District': 19,\n        'Richmond District': 11,\n        'Nob Hill': 12,\n        'Chinatown': 15,\n        'Haight-Ashbury': 16,\n        'North Beach': 11,\n        'Russian Hill': 8,\n        'Embarcadero': 14\n    },\n    'Bayview': {\n        'Marina District': 27,\n        'Sunset District': 23,\n        'Richmond District': 25,\n        'Nob Hill': 20,\n        'Chinatown': 19,\n        'Haight-Ashbury': 19,\n        'North Beach': 22,\n        'Russian Hill': 23,\n        'Embarcadero': 19\n    },\n    'Sunset District': {\n        'Marina District': 21,\n        'Bayview': 22,\n        'Richmond District': 12,\n        'Nob Hill': 27,\n        'Chinatown': 30,\n        'Haight-Ashbury': 15,\n        'North Beach': 28,\n        'Russian Hill': 24,\n        'Embarcadero': 30\n    },\n    'Richmond District': {\n        'Marina District': 9,\n        'Bayview': 27,\n        'Sunset District': 11,\n        'Nob Hill': 17,\n        'Chinatown': 20,\n        'Haight-Ashbury': 10,\n        'North Beach': 17,\n        'Russian Hill': 13,\n        'Embarcadero': 19\n    },\n    'Nob Hill': {\n        'Marina District': 11,\n        'Bayview': 19,\n        'Sunset District': 24,\n        'Richmond District': 14,\n        'Chinatown': 6,\n        'Haight-Ashbury': 13,\n        'North Beach': 8,\n        'Russian Hill': 5,\n        'Embarcadero': 9\n    },\n    'Chinatown': {\n        'Marina District': 12,\n        'Bayview': 20,\n        'Sunset District': 29,\n        'Richmond District': 20,\n        'Nob Hill': 9,\n        'Haight-Ashbury': 19,\n        'North Beach': 3,\n        'Russian Hill': 7,\n        'Embarcadero': 5\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17,\n        'Bayview': 18,\n        'Sunset District': 15,\n        'Richmond District': 10,\n        'Nob Hill': 15,\n        'Chinatown': 19,\n        'North Beach': 19,\n        'Russian Hill': 17,\n        'Embarcadero': 20\n    },\n    'North Beach': {\n        'Marina District': 9,\n        'Bayview': 25,\n        'Sunset District': 27,\n        'Richmond District': 18,\n        'Nob Hill': 7,\n        'Chinatown': 6,\n        'Haight-Ashbury': 18,\n        'Russian Hill': 4,\n        'Embarcadero': 6\n    },\n    'Russian Hill': {\n        'Marina District': 7,\n        'Bayview': 23,\n        'Sunset District': 23,\n        'Richmond District': 14,\n        'Nob Hill': 5,\n        'Chinatown': 9,\n        'Haight-Ashbury': 17,\n        'North Beach': 5,\n        'Embarcadero': 8\n    },\n    'Embarcadero': {\n        'Marina District': 12,\n        'Bayview': 21,\n        'Sunset District': 30,\n        'Richmond District': 21,\n        'Nob Hill': 10,\n        'Chinatown': 7,\n        'Haight-Ashbury': 21,\n        'North Beach': 5,\n        'Russian Hill': 8\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Charles': {'location': 'Bayview', 'start': '11:30AM', 'end': '2:30PM', 'duration': 45},\n    'Robert': {'location': 'Sunset District', 'start': '4:45PM', 'end': '9:00PM', 'duration': 30},\n    'Karen': {'location': 'Richmond District', 'start': '7:15PM', 'end': '9:30PM', 'duration': 60},\n    'Rebecca': {'location': 'Nob Hill', 'start': '4:15PM', 'end': '8:30PM', 'duration': 90},\n    'Margaret': {'location': 'Chinatown', 'start': '2:15PM', 'end': '7:45PM', 'duration': 120},\n    'Patricia': {'location': 'Haight-Ashbury', 'start': '2:30PM', 'end': '8:30PM', 'duration': 45},\n    'Mark': {'location': 'North Beach', 'start': '2:00PM', 'end': '6:30PM', 'duration': 105},\n    'Melissa': {'location': 'Russian Hill', 'start': '1:00PM', 'end': '7:45PM', 'duration': 30},\n    'Laura': {'location': 'Embarcadero', 'start': '7:45AM', 'end': '1:15PM', 'duration': 105}\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet(friend, start_time, end_time):\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    if start_time >= friend_start and end_time <= friend_end:\n        return True\n    return False\n\ndef generate_schedule(order):\n    current_location = 'Marina District'\n    current_time = time_to_minutes('9:00AM')\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        travel_time = travel_times[current_location].get(destination, float('inf'))\n        \n        # Travel to friend\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': destination\n        })\n        \n        # Check if we can meet\n        meet_start = arrival_time\n        meet_end = meet_start + friend['duration']\n        if can_meet(friend, meet_start, meet_end):\n            schedule.append({\n                'action': 'meet',\n                'location': destination,\n                'duration': friend['duration'],\n                'time': minutes_to_time(meet_start)\n            })\n            met_friends.add(friend_name)\n            current_time = meet_end\n            current_location = destination\n        else:\n            # Can't meet, just travel there and wait (but we won't meet)\n            schedule.append({\n                'action': 'wait',\n                'location': destination,\n                'time': minutes_to_time(arrival_time)\n            })\n            current_time = arrival_time\n            current_location = destination\n    \n    return schedule, len(met_friends)\n\n# Try different orders to maximize number of friends met\nbest_schedule = None\nbest_count = 0\nfriend_names = list(friends.keys())\n\n# We'll prioritize friends with tighter time windows first\npriority_order = ['Laura', 'Charles', 'Melissa', 'Margaret', 'Mark', 'Patricia', 'Rebecca', 'Robert', 'Karen']\n\n# Generate initial schedule with priority order\nschedule, count = generate_schedule(priority_order)\nif count > best_count:\n    best_schedule = schedule\n    best_count = count\n\n# Try some permutations if time allows (in reality, we'd want a more sophisticated approach)\nfor _ in range(100):  # Limit permutations for performance\n    import random\n    random.shuffle(friend_names)\n    schedule, count = generate_schedule(friend_names)\n    if count > best_count:\n        best_schedule = schedule\n        best_count = count\n\n# Output the best schedule found\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_892"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Barbara",
            "start_time": "9:15AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "David",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Betty",
            "start_time": "2:37PM",
            "end_time": "3:22PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Betty",
            "start_time": "10:15AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "David",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Barbara",
            "start_time": "2:48PM",
            "end_time": "4:48PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    ('Embarcadero', 'Presidio'): 20,\n    ('Embarcadero', 'Richmond District'): 21,\n    ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n    ('Presidio', 'Embarcadero'): 20,\n    ('Presidio', 'Richmond District'): 7,\n    ('Presidio', 'Fisherman\\'s Wharf'): 19,\n    ('Richmond District', 'Embarcadero'): 19,\n    ('Richmond District', 'Presidio'): 7,\n    ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n    ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n    ('Fisherman\\'s Wharf', 'Presidio'): 17,\n    ('Fisherman\\'s Wharf', 'Richmond District'): 18\n}\n\nfriends = {\n    'Betty': {\n        'location': 'Presidio',\n        'available_start': '10:15AM',\n        'available_end': '9:30PM',\n        'min_duration': 45\n    },\n    'David': {\n        'location': 'Richmond District',\n        'available_start': '1:00PM',\n        'available_end': '8:15PM',\n        'min_duration': 90\n    },\n    'Barbara': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '9:15AM',\n        'available_end': '8:15PM',\n        'min_duration': 120\n    }\n}\n\ncurrent_location = 'Embarcadero'\ncurrent_time = time_to_minutes('9:00AM')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": loc,\n        \"time\": minutes_to_time(time)\n    })\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        dest = friend['location']\n        travel_time = travel_times[(loc, dest)]\n        \n        # Travel to friend\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": loc,\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(time),\n            \"to\": dest\n        })\n        time += travel_time\n        loc = dest\n        \n        # Check if we arrived before available time\n        available_start = time_to_minutes(friend['available_start'])\n        if time < available_start:\n            wait_time = available_start - time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": loc,\n                \"time\": minutes_to_time(time)\n            })\n            time = available_start\n        \n        # Check if we have enough time to meet\n        available_end = time_to_minutes(friend['available_end'])\n        max_possible_duration = available_end - time\n        if max_possible_duration < friend['min_duration']:\n            return None  # This order doesn't work\n        \n        # Meet the friend\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": loc,\n            \"duration\": friend['min_duration'],\n            \"time\": minutes_to_time(time)\n        })\n        time += friend['min_duration']\n    \n    return schedule\n\n# Try all possible orders of meeting friends\nbest_schedule = None\nbest_friends_met = 0\n\nfor order in permutations(friends.keys()):\n    schedule = calculate_schedule(order)\n    if schedule is not None and len(order) >= best_friends_met:\n        best_schedule = schedule\n        best_friends_met = len(order)\n\nif best_schedule is None:\n    # Try meeting subsets of friends if all three can't be met\n    for subset_size in [2, 1]:\n        for order in permutations(friends.keys(), subset_size):\n            schedule = calculate_schedule(order)\n            if schedule is not None and len(order) >= best_friends_met:\n                best_schedule = schedule\n                best_friends_met = len(order)\n        if best_schedule is not None:\n            break\n\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_258"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "11:00AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Mary",
            "start_time": "5:30PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "6:26PM",
            "end_time": "7:41PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Michelle",
            "start_time": "8:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    'Presidio': {\n        'Pacific Heights': 11,\n        'Golden Gate Park': 12,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 11,\n        'Alamo Square': 19,\n        'Sunset District': 15,\n        'Nob Hill': 18,\n        'North Beach': 18\n    },\n    'Pacific Heights': {\n        'Presidio': 11,\n        'Golden Gate Park': 15,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Alamo Square': 10,\n        'Sunset District': 21,\n        'Nob Hill': 8,\n        'North Beach': 9\n    },\n    'Golden Gate Park': {\n        'Presidio': 11,\n        'Pacific Heights': 16,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Alamo Square': 9,\n        'Sunset District': 10,\n        'Nob Hill': 20,\n        'North Beach': 23\n    },\n    'Fisherman\\'s Wharf': {\n        'Presidio': 17,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 25,\n        'Marina District': 9,\n        'Alamo Square': 21,\n        'Sunset District': 27,\n        'Nob Hill': 11,\n        'North Beach': 6\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'Pacific Heights': 7,\n        'Golden Gate Park': 18,\n        'Fisherman\\'s Wharf': 10,\n        'Alamo Square': 15,\n        'Sunset District': 19,\n        'Nob Hill': 12,\n        'North Beach': 11\n    },\n    'Alamo Square': {\n        'Presidio': 17,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 15,\n        'Sunset District': 16,\n        'Nob Hill': 11,\n        'North Beach': 15\n    },\n    'Sunset District': {\n        'Presidio': 16,\n        'Pacific Heights': 21,\n        'Golden Gate Park': 11,\n        'Fisherman\\'s Wharf': 29,\n        'Marina District': 21,\n        'Alamo Square': 17,\n        'Nob Hill': 27,\n        'North Beach': 28\n    },\n    'Nob Hill': {\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Golden Gate Park': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Marina District': 11,\n        'Alamo Square': 11,\n        'Sunset District': 24,\n        'North Beach': 8\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Golden Gate Park': 22,\n        'Fisherman\\'s Wharf': 5,\n        'Marina District': 9,\n        'Alamo Square': 16,\n        'Sunset District': 27,\n        'Nob Hill': 7\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Kevin': {\n        'location': 'Pacific Heights',\n        'start': time_to_minutes('7:15AM'),\n        'end': time_to_minutes('8:45AM'),\n        'duration': 90\n    },\n    'Michelle': {\n        'location': 'Golden Gate Park',\n        'start': time_to_minutes('8:00PM'),\n        'end': time_to_minutes('9:00PM'),\n        'duration': 15\n    },\n    'Emily': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': time_to_minutes('4:15PM'),\n        'end': time_to_minutes('7:00PM'),\n        'duration': 30\n    },\n    'Mark': {\n        'location': 'Marina District',\n        'start': time_to_minutes('6:15PM'),\n        'end': time_to_minutes('7:45PM'),\n        'duration': 75\n    },\n    'Barbara': {\n        'location': 'Alamo Square',\n        'start': time_to_minutes('5:00PM'),\n        'end': time_to_minutes('7:00PM'),\n        'duration': 120\n    },\n    'Laura': {\n        'location': 'Sunset District',\n        'start': time_to_minutes('7:00PM'),\n        'end': time_to_minutes('9:15PM'),\n        'duration': 75\n    },\n    'Mary': {\n        'location': 'Nob Hill',\n        'start': time_to_minutes('5:30PM'),\n        'end': time_to_minutes('7:00PM'),\n        'duration': 45\n    },\n    'Helen': {\n        'location': 'North Beach',\n        'start': time_to_minutes('11:00AM'),\n        'end': time_to_minutes('12:15PM'),\n        'duration': 45\n    }\n}\n\ndef is_meeting_possible(schedule, friend_name):\n    friend = friends[friend_name]\n    location = friend['location']\n    required_duration = friend['duration']\n    available_start = friend['start']\n    available_end = friend['end']\n    \n    # Find all time slots at the friend's location\n    time_slots = []\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Presidio'\n    \n    for event in schedule:\n        if event['action'] == 'travel':\n            current_time += event['duration']\n            current_location = event['to']\n        elif event['action'] == 'meet':\n            if current_location == location:\n                time_slots.append((current_time, current_time + event['duration']))\n            current_time += event['duration']\n        elif event['action'] == 'wait':\n            current_time = time_to_minutes(event['time'])\n    \n    # Check if we can fit the meeting in any available slot\n    for slot_start, slot_end in time_slots:\n        meeting_start = max(slot_start, available_start)\n        meeting_end = min(slot_end, available_end)\n        if meeting_end - meeting_start >= required_duration:\n            return True\n    \n    return False\n\ndef calculate_schedule(meeting_order):\n    schedule = []\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Presidio'\n    \n    schedule.append({\n        'action': 'start',\n        'location': current_location,\n        'time': minutes_to_time(current_time)\n    })\n    \n    for friend_name in meeting_order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        \n        if current_location != destination:\n            travel_duration = travel_times[current_location][destination]\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': minutes_to_time(current_time),\n                'to': destination\n            })\n            current_time += travel_duration\n            current_location = destination\n        \n        # Check if we can meet the friend\n        available_start = friend['start']\n        available_end = friend['end']\n        required_duration = friend['duration']\n        \n        if current_time < available_start:\n            wait_time = available_start - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = available_start\n        \n        if current_time + required_duration <= available_end:\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': required_duration,\n                'time': minutes_to_time(current_time)\n            })\n            current_time += required_duration\n        else:\n            return None  # Can't meet this friend\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    met_friends = 0\n    for friend in friends:\n        if is_meeting_possible(schedule, friend):\n            met_friends += 1\n    return met_friends\n\ndef find_optimal_schedule():\n    friend_names = list(friends.keys())\n    best_schedule = None\n    best_score = 0\n    \n    # Try all possible permutations (not feasible for large n, but okay for small n)\n    from itertools import permutations\n    for perm in permutations(friend_names):\n        schedule = calculate_schedule(perm)\n        if schedule:\n            score = evaluate_schedule(schedule)\n            if score > best_score:\n                best_score = score\n                best_schedule = schedule\n                if best_score == len(friend_names):\n                    break  # Found optimal solution\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\nif optimal_schedule:\n    output = {\n        'schedule': optimal_schedule\n    }\nelse:\n    output = {\n        'schedule': []\n    }\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_700"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Anthony",
            "start_time": "9:19AM",
            "end_time": "11:04AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Karen",
            "start_time": "11:14AM",
            "end_time": "11:44AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Betty",
            "start_time": "7:45PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Karen",
            "start_time": "9:25AM",
            "end_time": "9:55AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Anthony",
            "start_time": "10:06AM",
            "end_time": "11:51AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Betty",
            "start_time": "7:45PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    hour = time.hour\n    minute = time.minute\n    period = 'AM' if hour < 12 else 'PM'\n    if hour == 0:\n        hour = 12\n    elif hour > 12:\n        hour -= 12\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef str_to_time(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n        hour = int(time_str.split(':')[0].split('AM')[0])\n    else:\n        period = 'PM'\n        hour = int(time_str.split(':')[0].split('PM')[0])\n    minute = int(time_str.split(':')[1][:2])\n    if period == 'PM' and hour != 12:\n        hour += 12\n    elif period == 'AM' and hour == 12:\n        hour = 0\n    return datetime(1, 1, 1, hour, minute)\n\ndef calculate_schedule():\n    # Travel times dictionary: {from: {to: minutes}}\n    travel_times = {\n        'Bayview': {\n            'Embarcadero': 19,\n            'Fisherman\\'s Wharf': 25,\n            'Financial District': 19\n        },\n        'Embarcadero': {\n            'Bayview': 21,\n            'Fisherman\\'s Wharf': 6,\n            'Financial District': 5\n        },\n        'Fisherman\\'s Wharf': {\n            'Bayview': 26,\n            'Embarcadero': 8,\n            'Financial District': 11\n        },\n        'Financial District': {\n            'Bayview': 19,\n            'Embarcadero': 4,\n            'Fisherman\\'s Wharf': 10\n        }\n    }\n\n    # Friend constraints\n    friends = {\n        'Betty': {\n            'location': 'Embarcadero',\n            'start': str_to_time('7:45PM'),\n            'end': str_to_time('9:45PM'),\n            'min_duration': 15\n        },\n        'Karen': {\n            'location': 'Fisherman\\'s Wharf',\n            'start': str_to_time('8:45AM'),\n            'end': str_to_time('3:00PM'),\n            'min_duration': 30\n        },\n        'Anthony': {\n            'location': 'Financial District',\n            'start': str_to_time('9:15AM'),\n            'end': str_to_time('9:30PM'),\n            'min_duration': 105\n        }\n    }\n\n    current_time = str_to_time('9:00AM')\n    current_location = 'Bayview'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": time_to_str(current_time)}]\n\n    # Prioritize Anthony first due to long meeting duration\n    anthony = friends['Anthony']\n    travel_duration = travel_times[current_location][anthony['location']]\n    arrival_time = current_time + timedelta(minutes=travel_duration)\n    if arrival_time < anthony['start']:\n        wait_duration = (anthony['start'] - arrival_time).seconds // 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": anthony['location'],\n            \"duration\": travel_duration,\n            \"time\": time_to_str(current_time),\n            \"to\": anthony['location']\n        })\n        current_time = arrival_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": anthony['location'],\n            \"time\": time_to_str(current_time),\n        })\n        current_time = anthony['start']\n    else:\n        if arrival_time <= anthony['end']:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": anthony['location'],\n                \"duration\": travel_duration,\n                \"time\": time_to_str(current_time),\n                \"to\": anthony['location']\n            })\n            current_time = arrival_time\n        else:\n            pass  # Cannot meet Anthony\n\n    meet_end = current_time + timedelta(minutes=anthony['min_duration'])\n    if meet_end <= anthony['end']:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": anthony['location'],\n            \"duration\": anthony['min_duration'],\n            \"time\": time_to_str(current_time)\n        })\n        current_time = meet_end\n        current_location = anthony['location']\n    else:\n        pass  # Cannot meet Anthony\n\n    # Next, meet Karen\n    karen = friends['Karen']\n    travel_duration = travel_times[current_location][karen['location']]\n    arrival_time = current_time + timedelta(minutes=travel_duration)\n    if arrival_time < karen['start']:\n        wait_duration = (karen['start'] - arrival_time).seconds // 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": karen['location'],\n            \"duration\": travel_duration,\n            \"time\": time_to_str(current_time),\n            \"to\": karen['location']\n        })\n        current_time = arrival_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": karen['location'],\n            \"time\": time_to_str(current_time),\n        })\n        current_time = karen['start']\n    else:\n        if arrival_time <= karen['end']:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": karen['location'],\n                \"duration\": travel_duration,\n                \"time\": time_to_str(current_time),\n                \"to\": karen['location']\n            })\n            current_time = arrival_time\n        else:\n            pass  # Cannot meet Karen\n\n    meet_end = current_time + timedelta(minutes=karen['min_duration'])\n    if meet_end <= karen['end']:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": karen['location'],\n            \"duration\": karen['min_duration'],\n            \"time\": time_to_str(current_time)\n        })\n        current_time = meet_end\n        current_location = karen['location']\n    else:\n        pass  # Cannot meet Karen\n\n    # Finally, meet Betty\n    betty = friends['Betty']\n    travel_duration = travel_times[current_location][betty['location']]\n    arrival_time = current_time + timedelta(minutes=travel_duration)\n    if arrival_time < betty['start']:\n        wait_duration = (betty['start'] - arrival_time).seconds // 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": betty['location'],\n            \"duration\": travel_duration,\n            \"time\": time_to_str(current_time),\n            \"to\": betty['location']\n        })\n        current_time = arrival_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": betty['location'],\n            \"time\": time_to_str(current_time),\n        })\n        current_time = betty['start']\n    else:\n        if arrival_time <= betty['end']:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": betty['location'],\n                \"duration\": travel_duration,\n                \"time\": time_to_str(current_time),\n                \"to\": betty['location']\n            })\n            current_time = arrival_time\n        else:\n            pass  # Cannot meet Betty\n\n    meet_end = current_time + timedelta(minutes=betty['min_duration'])\n    if meet_end <= betty['end']:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": betty['location'],\n            \"duration\": betty['min_duration'],\n            \"time\": time_to_str(current_time)\n        })\n        current_time = meet_end\n        current_location = betty['location']\n    else:\n        pass  # Cannot meet Betty\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_263"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Sarah",
            "start_time": "10:45AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Richard",
            "start_time": "11:45AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Elizabeth",
            "start_time": "1:26PM",
            "end_time": "3:26PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Michelle",
            "start_time": "6:15PM",
            "end_time": "7:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Sarah",
            "start_time": "10:45AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Richard",
            "start_time": "11:45AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Elizabeth",
            "start_time": "1:26PM",
            "end_time": "3:26PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Michelle",
            "start_time": "6:15PM",
            "end_time": "7:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Richmond District\", \"Haight-Ashbury\"): 10,\n    (\"Richmond District\", \"Mission District\"): 20,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Mission District\", \"Richmond District\"): 20,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n}\n\n# Friend constraints\nfriends = [\n    {\"name\": \"Sarah\", \"location\": \"Sunset District\", \"start\": \"10:45AM\", \"end\": \"7:00PM\", \"min_duration\": 30},\n    {\"name\": \"Richard\", \"location\": \"Haight-Ashbury\", \"start\": \"11:45AM\", \"end\": \"3:45PM\", \"min_duration\": 90},\n    {\"name\": \"Elizabeth\", \"location\": \"Mission District\", \"start\": \"11:00AM\", \"end\": \"5:15PM\", \"min_duration\": 120},\n    {\"name\": \"Michelle\", \"location\": \"Golden Gate Park\", \"start\": \"6:15PM\", \"end\": \"8:45PM\", \"min_duration\": 90}\n]\n\n# Convert friend times to minutes\nfor friend in friends:\n    friend[\"start_min\"] = time_to_minutes(friend[\"start\"])\n    friend[\"end_min\"] = time_to_minutes(friend[\"end\"])\n\n# Generate all possible meeting orders\nmeeting_orders = permutations(friends)\n\nbest_schedule = None\nbest_meetings = 0\nbest_total_time = 0\n\ncurrent_location = \"Richmond District\"\ncurrent_time = time_to_minutes(\"9:00AM\")\n\nfor order in meeting_orders:\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    temp_location = current_location\n    temp_time = current_time\n    meetings = 0\n    total_time = 0\n    feasible = True\n    \n    for friend in order:\n        # Travel to friend's location\n        travel_key = (temp_location, friend[\"location\"])\n        travel_duration = travel_times.get(travel_key, float('inf'))\n        arrival_time = temp_time + travel_duration\n        \n        # Check if we can meet the friend\n        meeting_start = max(arrival_time, friend[\"start_min\"])\n        meeting_end = meeting_start + friend[\"min_duration\"]\n        \n        if meeting_end > friend[\"end_min\"]:\n            feasible = False\n            break\n        \n        # Add travel and meeting to schedule\n        if arrival_time > friend[\"start_min\"]:\n            # No wait\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": temp_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(temp_time),\n                \"to\": friend[\"location\"]\n            })\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"duration\": friend[\"min_duration\"],\n                \"time\": minutes_to_time(meeting_start),\n                \"with\": friend[\"name\"]\n            })\n        else:\n            # Need to wait\n            wait_duration = friend[\"start_min\"] - arrival_time\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": temp_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(temp_time),\n                \"to\": friend[\"location\"]\n            })\n            if wait_duration > 0:\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": friend[\"location\"],\n                    \"duration\": wait_duration,\n                    \"time\": minutes_to_time(arrival_time)\n                })\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"duration\": friend[\"min_duration\"],\n                \"time\": minutes_to_time(meeting_start),\n                \"with\": friend[\"name\"]\n            })\n        \n        meetings += 1\n        total_time += friend[\"min_duration\"]\n        temp_location = friend[\"location\"]\n        temp_time = meeting_end\n    \n    if feasible and (meetings > best_meetings or (meetings == best_meetings and total_time > best_total_time)):\n        best_meetings = meetings\n        best_total_time = total_time\n        best_schedule = schedule\n\n# Convert schedule to JSON output\noutput = {\"schedule\": best_schedule}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_312"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Ronald",
            "start_time": "10:00AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Helen",
            "start_time": "1:30PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Joshua",
            "start_time": "3:47PM",
            "end_time": "5:17PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Margaret",
            "start_time": "5:32PM",
            "end_time": "6:32PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since 9:00AM (540 minutes)\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes since midnight to time string\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    \"Pacific Heights\": {\n        \"Nob Hill\": 8,\n        \"Russian Hill\": 7,\n        \"The Castro\": 16,\n        \"Sunset District\": 21,\n        \"Haight-Ashbury\": 11\n    },\n    \"Nob Hill\": {\n        \"Pacific Heights\": 8,\n        \"Russian Hill\": 5,\n        \"The Castro\": 17,\n        \"Sunset District\": 25,\n        \"Haight-Ashbury\": 13\n    },\n    \"Russian Hill\": {\n        \"Pacific Heights\": 7,\n        \"Nob Hill\": 5,\n        \"The Castro\": 21,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 17\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16,\n        \"Nob Hill\": 16,\n        \"Russian Hill\": 18,\n        \"Sunset District\": 17,\n        \"Haight-Ashbury\": 6\n    },\n    \"Sunset District\": {\n        \"Pacific Heights\": 21,\n        \"Nob Hill\": 27,\n        \"Russian Hill\": 24,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 15\n    },\n    \"Haight-Ashbury\": {\n        \"Pacific Heights\": 12,\n        \"Nob Hill\": 15,\n        \"Russian Hill\": 17,\n        \"The Castro\": 6,\n        \"Sunset District\": 15\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"Ronald\": {\n        \"location\": \"Nob Hill\",\n        \"start\": time_to_minutes(\"10:00AM\"),\n        \"end\": time_to_minutes(\"5:00PM\"),\n        \"duration\": 105\n    },\n    \"Sarah\": {\n        \"location\": \"Russian Hill\",\n        \"start\": time_to_minutes(\"7:15AM\"),\n        \"end\": time_to_minutes(\"9:30AM\"),\n        \"duration\": 45\n    },\n    \"Helen\": {\n        \"location\": \"The Castro\",\n        \"start\": time_to_minutes(\"1:30PM\"),\n        \"end\": time_to_minutes(\"5:00PM\"),\n        \"duration\": 120\n    },\n    \"Joshua\": {\n        \"location\": \"Sunset District\",\n        \"start\": time_to_minutes(\"2:15PM\"),\n        \"end\": time_to_minutes(\"7:30PM\"),\n        \"duration\": 90\n    },\n    \"Margaret\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": time_to_minutes(\"10:15AM\"),\n        \"end\": time_to_minutes(\"10:00PM\"),\n        \"duration\": 60\n    }\n}\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Pacific Heights\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    total_meetings = 0\n    \n    for friend in order:\n        details = friends[friend]\n        destination = details[\"location\"]\n        \n        # Travel to destination\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        \n        # Wait if needed\n        wait_time = max(0, details[\"start\"] - travel_end)\n        if wait_time > 0:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": destination,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(travel_start),\n                \"to\": destination\n            })\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": destination,\n                \"time\": minutes_to_time(travel_end)\n            })\n            current_time = travel_end + wait_time\n        else:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": destination,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(travel_start),\n                \"to\": destination\n            })\n            current_time = travel_end\n        \n        # Check if we can meet\n        meeting_end = current_time + details[\"duration\"]\n        if meeting_end > details[\"end\"]:\n            return None, 0\n        \n        # Add meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": details[\"duration\"],\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time = meeting_end\n        current_location = destination\n        total_meetings += 1\n    \n    return schedule, total_meetings\n\ndef find_optimal_schedule():\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all possible permutations of friends\n    for perm in permutations(friends.keys()):\n        schedule, num_meetings = generate_schedule(perm)\n        if num_meetings > max_meetings or (num_meetings == max_meetings and schedule is not None):\n            max_meetings = num_meetings\n            best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\n\noutput = {\n    \"schedule\": optimal_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_488"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "4:00PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Jessica",
            "start_time": "4:45PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "6:30PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "4:00PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Jessica",
            "start_time": "4:45PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "6:30PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_time(base_time, minutes):\n    return base_time + timedelta(minutes=minutes)\n\ndef calculate_schedule():\n    # Initialize start time and location\n    current_time = parse_time('9:00AM')\n    current_location = 'Bayview'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n    \n    # Define travel times as a dictionary\n    travel_times = {\n        ('Bayview', 'Embarcadero'): 19,\n        ('Bayview', 'Richmond District'): 25,\n        ('Bayview', 'Fisherman\\'s Wharf'): 25,\n        ('Embarcadero', 'Bayview'): 21,\n        ('Embarcadero', 'Richmond District'): 21,\n        ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n        ('Richmond District', 'Bayview'): 26,\n        ('Richmond District', 'Embarcadero'): 19,\n        ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n        ('Fisherman\\'s Wharf', 'Bayview'): 26,\n        ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n        ('Fisherman\\'s Wharf', 'Richmond District'): 18\n    }\n    \n    # Define friend constraints\n    friends = [\n        {\n            'name': 'Jason',\n            'location': 'Fisherman\\'s Wharf',\n            'start': parse_time('4:00PM'),\n            'end': parse_time('4:45PM'),\n            'min_duration': 30\n        },\n        {\n            'name': 'Jessica',\n            'location': 'Embarcadero',\n            'start': parse_time('4:45PM'),\n            'end': parse_time('7:00PM'),\n            'min_duration': 30\n        },\n        {\n            'name': 'Sandra',\n            'location': 'Richmond District',\n            'start': parse_time('6:30PM'),\n            'end': parse_time('9:45PM'),\n            'min_duration': 120\n        }\n    ]\n    \n    # Sort friends by start time\n    friends.sort(key=lambda x: x['start'])\n    \n    # Plan to meet Jason first\n    jason = friends[0]\n    travel_duration = travel_times[(current_location, jason['location'])]\n    arrival_time = add_time(current_time, travel_duration)\n    \n    # Check if we can meet Jason\n    if arrival_time <= jason['end']:\n        meet_start = max(arrival_time, jason['start'])\n        meet_end = min(add_time(meet_start, jason['min_duration']), jason['end'])\n        if meet_end > meet_start:\n            # Add travel to Jason\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": jason['location']\n            })\n            current_time = arrival_time\n            current_location = jason['location']\n            \n            # Add wait if needed\n            if arrival_time < jason['start']:\n                wait_duration = (jason['start'] - arrival_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": format_time(current_time),\n                    \"duration\": wait_duration\n                })\n                current_time = jason['start']\n            \n            # Add meet Jason\n            meet_duration = (meet_end - meet_start).seconds // 60\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meet_duration,\n                \"time\": format_time(current_time),\n                \"with\": jason['name']\n            })\n            current_time = meet_end\n    \n    # Next, plan to meet Jessica\n    jessica = friends[1]\n    travel_duration = travel_times[(current_location, jessica['location'])]\n    arrival_time = add_time(current_time, travel_duration)\n    \n    if arrival_time <= jessica['end']:\n        meet_start = max(arrival_time, jessica['start'])\n        meet_end = min(add_time(meet_start, jessica['min_duration']), jessica['end'])\n        if meet_end > meet_start:\n            # Add travel to Jessica\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": jessica['location']\n            })\n            current_time = arrival_time\n            current_location = jessica['location']\n            \n            # Add wait if needed\n            if arrival_time < jessica['start']:\n                wait_duration = (jessica['start'] - arrival_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": format_time(current_time),\n                    \"duration\": wait_duration\n                })\n                current_time = jessica['start']\n            \n            # Add meet Jessica\n            meet_duration = (meet_end - meet_start).seconds // 60\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meet_duration,\n                \"time\": format_time(current_time),\n                \"with\": jessica['name']\n            })\n            current_time = meet_end\n    \n    # Finally, plan to meet Sandra\n    sandra = friends[2]\n    travel_duration = travel_times[(current_location, sandra['location'])]\n    arrival_time = add_time(current_time, travel_duration)\n    \n    if arrival_time <= sandra['end']:\n        meet_start = max(arrival_time, sandra['start'])\n        meet_end = min(add_time(meet_start, sandra['min_duration']), sandra['end'])\n        if meet_end > meet_start:\n            # Add travel to Sandra\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": sandra['location']\n            })\n            current_time = arrival_time\n            current_location = sandra['location']\n            \n            # Add wait if needed\n            if arrival_time < sandra['start']:\n                wait_duration = (sandra['start'] - arrival_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": format_time(current_time),\n                    \"duration\": wait_duration\n                })\n                current_time = sandra['start']\n            \n            # Add meet Sandra\n            meet_duration = (meet_end - meet_start).seconds // 60\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meet_duration,\n                \"time\": format_time(current_time),\n                \"with\": sandra['name']\n            })\n            current_time = meet_end\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_215"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Carol",
            "start_time": "9:30PM",
            "end_time": "10:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Karen",
            "start_time": "9:13AM",
            "end_time": "10:28AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Laura",
            "start_time": "11:45AM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Deborah",
            "start_time": "1:05PM",
            "end_time": "2:50PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Steven",
            "start_time": "3:03PM",
            "end_time": "5:03PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Jason",
            "start_time": "5:08PM",
            "end_time": "6:38PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Elizabeth",
            "start_time": "6:44PM",
            "end_time": "7:59PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Carol",
            "start_time": "9:30PM",
            "end_time": "10:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule():\n    # Parse all given times\n    start_time = parse_time('9:00AM')\n    \n    # Friend availability windows\n    friends = {\n        'Carol': {\n            'location': 'Haight-Ashbury',\n            'start': parse_time('9:30PM'),\n            'end': parse_time('10:30PM'),\n            'duration': 60\n        },\n        'Laura': {\n            'location': 'Fisherman\\'s Wharf',\n            'start': parse_time('11:45AM'),\n            'end': parse_time('9:30PM'),\n            'duration': 60\n        },\n        'Karen': {\n            'location': 'The Castro',\n            'start': parse_time('7:15AM'),\n            'end': parse_time('2:00PM'),\n            'duration': 75\n        },\n        'Elizabeth': {\n            'location': 'Chinatown',\n            'start': parse_time('12:15PM'),\n            'end': parse_time('9:30PM'),\n            'duration': 75\n        },\n        'Deborah': {\n            'location': 'Alamo Square',\n            'start': parse_time('12:00PM'),\n            'end': parse_time('3:00PM'),\n            'duration': 105\n        },\n        'Jason': {\n            'location': 'North Beach',\n            'start': parse_time('2:45PM'),\n            'end': parse_time('7:00PM'),\n            'duration': 90\n        },\n        'Steven': {\n            'location': 'Russian Hill',\n            'start': parse_time('2:45PM'),\n            'end': parse_time('6:30PM'),\n            'duration': 120\n        }\n    }\n    \n    # Travel times dictionary (from -> to -> minutes)\n    travel_times = {\n        'Golden Gate Park': {\n            'Haight-Ashbury': 7,\n            'Fisherman\\'s Wharf': 24,\n            'The Castro': 13,\n            'Chinatown': 23,\n            'Alamo Square': 10,\n            'North Beach': 24,\n            'Russian Hill': 19\n        },\n        'Haight-Ashbury': {\n            'Golden Gate Park': 7,\n            'Fisherman\\'s Wharf': 23,\n            'The Castro': 6,\n            'Chinatown': 19,\n            'Alamo Square': 5,\n            'North Beach': 19,\n            'Russian Hill': 17\n        },\n        'Fisherman\\'s Wharf': {\n            'Golden Gate Park': 25,\n            'Haight-Ashbury': 22,\n            'The Castro': 26,\n            'Chinatown': 12,\n            'Alamo Square': 20,\n            'North Beach': 6,\n            'Russian Hill': 7\n        },\n        'The Castro': {\n            'Golden Gate Park': 11,\n            'Haight-Ashbury': 6,\n            'Fisherman\\'s Wharf': 24,\n            'Chinatown': 20,\n            'Alamo Square': 8,\n            'North Beach': 20,\n            'Russian Hill': 18\n        },\n        'Chinatown': {\n            'Golden Gate Park': 23,\n            'Haight-Ashbury': 19,\n            'Fisherman\\'s Wharf': 8,\n            'The Castro': 22,\n            'Alamo Square': 17,\n            'North Beach': 3,\n            'Russian Hill': 7\n        },\n        'Alamo Square': {\n            'Golden Gate Park': 9,\n            'Haight-Ashbury': 5,\n            'Fisherman\\'s Wharf': 19,\n            'The Castro': 8,\n            'Chinatown': 16,\n            'North Beach': 15,\n            'Russian Hill': 13\n        },\n        'North Beach': {\n            'Golden Gate Park': 22,\n            'Haight-Ashbury': 18,\n            'Fisherman\\'s Wharf': 5,\n            'The Castro': 22,\n            'Chinatown': 6,\n            'Alamo Square': 16,\n            'Russian Hill': 4\n        },\n        'Russian Hill': {\n            'Golden Gate Park': 21,\n            'Haight-Ashbury': 17,\n            'Fisherman\\'s Wharf': 7,\n            'The Castro': 21,\n            'Chinatown': 9,\n            'Alamo Square': 15,\n            'North Beach': 5\n        }\n    }\n    \n    # We'll prioritize friends with the most constrained schedules first\n    priority_order = ['Carol', 'Deborah', 'Karen', 'Steven', 'Jason', 'Elizabeth', 'Laura']\n    \n    schedule = []\n    current_time = start_time\n    current_location = 'Golden Gate Park'\n    schedule.append({\n        'action': 'start',\n        'location': current_location,\n        'time': format_time(current_time)\n    })\n    \n    met_friends = set()\n    \n    for friend_name in priority_order:\n        if friend_name in met_friends:\n            continue\n            \n        friend = friends[friend_name]\n        location = friend['location']\n        duration = friend['duration']\n        \n        # Calculate travel time\n        travel_duration = travel_times[current_location][location]\n        arrival_time = add_minutes(current_time, travel_duration)\n        \n        # Check if we can meet this friend\n        meet_start = max(arrival_time, friend['start'])\n        meet_end = add_minutes(meet_start, duration)\n        \n        if meet_end <= friend['end']:\n            # Add travel action\n            if travel_duration > 0:\n                schedule.append({\n                    'action': 'travel',\n                    'location': current_location,\n                    'duration': travel_duration,\n                    'time': format_time(current_time),\n                    'to': location\n                })\n            \n            # Check if we need to wait\n            if arrival_time < friend['start']:\n                wait_duration = (friend['start'] - arrival_time).seconds // 60\n                schedule.append({\n                    'action': 'wait',\n                    'location': location,\n                    'time': format_time(arrival_time),\n                    'duration': wait_duration\n                })\n            \n            # Add meet action\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'duration': duration,\n                'time': format_time(meet_start),\n                'with': friend_name\n            })\n            \n            met_friends.add(friend_name)\n            current_time = meet_end\n            current_location = location\n    \n    return {'schedule': schedule}\n\nif __name__ == '__main__':\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_624"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "9:20AM",
            "end_time": "10:05AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joshua",
            "start_time": "10:20AM",
            "end_time": "10:35AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "10:52AM",
            "end_time": "11:52AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Lisa",
            "start_time": "12:09PM",
            "end_time": "12:24PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "John",
            "start_time": "1:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Stephanie",
            "start_time": "3:30PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sarah",
            "start_time": "4:18PM",
            "end_time": "6:03PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Melissa",
            "start_time": "6:16PM",
            "end_time": "8:16PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "8:23PM",
            "end_time": "9:23PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Lisa",
            "start_time": "10:45AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joshua",
            "start_time": "11:19AM",
            "end_time": "11:34AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "11:49AM",
            "end_time": "12:34PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "12:45PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "John",
            "start_time": "2:07PM",
            "end_time": "2:52PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Stephanie",
            "start_time": "3:30PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Melissa",
            "start_time": "5:00PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "7:07PM",
            "end_time": "8:07PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "8:15PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Embarcadero': {\n        'Fisherman\\'s Wharf': 6,\n        'Financial District': 5,\n        'Russian Hill': 8,\n        'Marina District': 12,\n        'Richmond District': 21,\n        'Pacific Heights': 11,\n        'Haight-Ashbury': 21,\n        'Presidio': 20,\n        'Nob Hill': 10,\n        'The Castro': 25\n    },\n    'Fisherman\\'s Wharf': {\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Russian Hill': 7,\n        'Marina District': 9,\n        'Richmond District': 18,\n        'Pacific Heights': 12,\n        'Haight-Ashbury': 22,\n        'Presidio': 17,\n        'Nob Hill': 11,\n        'The Castro': 27\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Fisherman\\'s Wharf': 10,\n        'Russian Hill': 11,\n        'Marina District': 15,\n        'Richmond District': 21,\n        'Pacific Heights': 13,\n        'Haight-Ashbury': 19,\n        'Presidio': 22,\n        'Nob Hill': 8,\n        'The Castro': 20\n    },\n    'Russian Hill': {\n        'Embarcadero': 8,\n        'Fisherman\\'s Wharf': 7,\n        'Financial District': 11,\n        'Marina District': 7,\n        'Richmond District': 14,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 17,\n        'Presidio': 14,\n        'Nob Hill': 5,\n        'The Castro': 21\n    },\n    'Marina District': {\n        'Embarcadero': 14,\n        'Fisherman\\'s Wharf': 10,\n        'Financial District': 17,\n        'Russian Hill': 8,\n        'Richmond District': 11,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 16,\n        'Presidio': 10,\n        'Nob Hill': 12,\n        'The Castro': 22\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Fisherman\\'s Wharf': 18,\n        'Financial District': 22,\n        'Russian Hill': 13,\n        'Marina District': 9,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 10,\n        'Presidio': 7,\n        'Nob Hill': 17,\n        'The Castro': 16\n    },\n    'Pacific Heights': {\n        'Embarcadero': 10,\n        'Fisherman\\'s Wharf': 13,\n        'Financial District': 13,\n        'Russian Hill': 7,\n        'Marina District': 6,\n        'Richmond District': 12,\n        'Haight-Ashbury': 11,\n        'Presidio': 11,\n        'Nob Hill': 8,\n        'The Castro': 16\n    },\n    'Haight-Ashbury': {\n        'Embarcadero': 20,\n        'Fisherman\\'s Wharf': 23,\n        'Financial District': 21,\n        'Russian Hill': 17,\n        'Marina District': 17,\n        'Richmond District': 10,\n        'Pacific Heights': 12,\n        'Presidio': 15,\n        'Nob Hill': 15,\n        'The Castro': 6\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Fisherman\\'s Wharf': 19,\n        'Financial District': 23,\n        'Russian Hill': 14,\n        'Marina District': 11,\n        'Richmond District': 7,\n        'Pacific Heights': 11,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'The Castro': 21\n    },\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'Fisherman\\'s Wharf': 10,\n        'Financial District': 9,\n        'Russian Hill': 5,\n        'Marina District': 11,\n        'Richmond District': 14,\n        'Pacific Heights': 8,\n        'Haight-Ashbury': 13,\n        'Presidio': 17,\n        'The Castro': 17\n    },\n    'The Castro': {\n        'Embarcadero': 22,\n        'Fisherman\\'s Wharf': 24,\n        'Financial District': 21,\n        'Russian Hill': 18,\n        'Marina District': 21,\n        'Richmond District': 16,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 6,\n        'Presidio': 20,\n        'Nob Hill': 16\n    }\n}\n\n# Friend data: name, location, available_start, available_end, min_duration\nfriends = [\n    ('Stephanie', 'Fisherman\\'s Wharf', '3:30PM', '10:00PM', 30),\n    ('Lisa', 'Financial District', '10:45AM', '5:15PM', 15),\n    ('Melissa', 'Russian Hill', '5:00PM', '9:45PM', 120),\n    ('Betty', 'Marina District', '10:45AM', '2:15PM', 60),\n    ('Sarah', 'Richmond District', '4:15PM', '7:30PM', 105),\n    ('Daniel', 'Pacific Heights', '6:30PM', '9:45PM', 60),\n    ('Joshua', 'Haight-Ashbury', '9:00AM', '3:30PM', 15),\n    ('Joseph', 'Presidio', '7:00AM', '1:00PM', 45),\n    ('Andrew', 'Nob Hill', '7:45PM', '10:00PM', 105),\n    ('John', 'The Castro', '1:15PM', '7:45PM', 45)\n]\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get(from_loc, {}).get(to_loc, float('inf'))\n\ndef can_meet_friend(current_time, current_loc, friend):\n    name, loc, start_str, end_str, min_dur = friend\n    start = time_to_minutes(start_str)\n    end = time_to_minutes(end_str)\n    \n    travel_time = get_travel_time(current_loc, loc)\n    arrival_time = current_time + travel_time\n    \n    if arrival_time > end:\n        return None\n    \n    meet_start = max(arrival_time, start)\n    meet_end = min(meet_start + min_dur, end)\n    \n    if meet_end - meet_start >= min_dur:\n        return {\n            'name': name,\n            'location': loc,\n            'start': meet_start,\n            'end': meet_end,\n            'travel_time': travel_time,\n            'duration': min_dur\n        }\n    return None\n\ndef generate_schedule():\n    current_time = time_to_minutes('9:00AM')\n    current_loc = 'Embarcadero'\n    schedule = [{'action': 'start', 'location': current_loc, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    while len(met_friends) < len(friends):\n        best_friend = None\n        best_meeting = None\n        \n        for friend in friends:\n            if friend[0] in met_friends:\n                continue\n            meeting = can_meet_friend(current_time, current_loc, friend)\n            if meeting:\n                if best_friend is None or meeting['start'] < best_meeting['start']:\n                    best_friend = friend\n                    best_meeting = meeting\n        \n        if best_friend is None:\n            break\n        \n        # Add travel action\n        if current_loc != best_meeting['location']:\n            schedule.append({\n                'action': 'travel',\n                'location': current_loc,\n                'duration': best_meeting['travel_time'],\n                'time': minutes_to_time(current_time),\n                'to': best_meeting['location']\n            })\n            current_time += best_meeting['travel_time']\n            current_loc = best_meeting['location']\n        \n        # Check if we need to wait\n        if current_time < best_meeting['start']:\n            schedule.append({\n                'action': 'wait',\n                'location': current_loc,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = best_meeting['start']\n        \n        # Add meeting action\n        schedule.append({\n            'action': 'meet',\n            'location': current_loc,\n            'duration': best_meeting['duration'],\n            'time': minutes_to_time(current_time),\n            'with': best_friend[0]\n        })\n        current_time += best_meeting['duration']\n        met_friends.add(best_friend[0])\n    \n    return schedule\n\nschedule = generate_schedule()\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
      "count": "meeting_planning_example_978"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Kenneth",
            "start_time": "11:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Sarah",
            "start_time": "12:04PM",
            "end_time": "1:34PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Thomas",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "7:38PM",
            "end_time": "7:53PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "David",
            "start_time": "8:00PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Kenneth",
            "start_time": "11:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Sarah",
            "start_time": "12:04PM",
            "end_time": "1:34PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "1:49PM",
            "end_time": "2:04PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Richard",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "2:52PM",
            "end_time": "4:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Thomas",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mary",
            "start_time": "8:00PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'The Castro': 17,\n        'Haight-Ashbury': 13,\n        'Union Square': 7,\n        'North Beach': 8,\n        'Pacific Heights': 8,\n        'Chinatown': 6,\n        'Golden Gate Park': 17,\n        'Marina District': 11,\n        'Russian Hill': 5\n    },\n    'Embarcadero': {\n        'Nob Hill': 10,\n        'The Castro': 25,\n        'Haight-Ashbury': 21,\n        'Union Square': 10,\n        'North Beach': 5,\n        'Pacific Heights': 11,\n        'Chinatown': 7,\n        'Golden Gate Park': 25,\n        'Marina District': 12,\n        'Russian Hill': 8\n    },\n    'The Castro': {\n        'Nob Hill': 16,\n        'Embarcadero': 22,\n        'Haight-Ashbury': 6,\n        'Union Square': 19,\n        'North Beach': 20,\n        'Pacific Heights': 16,\n        'Chinatown': 22,\n        'Golden Gate Park': 11,\n        'Marina District': 21,\n        'Russian Hill': 18\n    },\n    'Haight-Ashbury': {\n        'Nob Hill': 15,\n        'Embarcadero': 20,\n        'The Castro': 6,\n        'Union Square': 19,\n        'North Beach': 19,\n        'Pacific Heights': 12,\n        'Chinatown': 19,\n        'Golden Gate Park': 7,\n        'Marina District': 17,\n        'Russian Hill': 17\n    },\n    'Union Square': {\n        'Nob Hill': 9,\n        'Embarcadero': 11,\n        'The Castro': 17,\n        'Haight-Ashbury': 18,\n        'North Beach': 10,\n        'Pacific Heights': 15,\n        'Chinatown': 7,\n        'Golden Gate Park': 22,\n        'Marina District': 18,\n        'Russian Hill': 13\n    },\n    'North Beach': {\n        'Nob Hill': 7,\n        'Embarcadero': 6,\n        'The Castro': 23,\n        'Haight-Ashbury': 18,\n        'Union Square': 7,\n        'Pacific Heights': 8,\n        'Chinatown': 6,\n        'Golden Gate Park': 22,\n        'Marina District': 9,\n        'Russian Hill': 4\n    },\n    'Pacific Heights': {\n        'Nob Hill': 8,\n        'Embarcadero': 10,\n        'The Castro': 16,\n        'Haight-Ashbury': 11,\n        'Union Square': 12,\n        'North Beach': 9,\n        'Chinatown': 11,\n        'Golden Gate Park': 15,\n        'Marina District': 6,\n        'Russian Hill': 7\n    },\n    'Chinatown': {\n        'Nob Hill': 9,\n        'Embarcadero': 5,\n        'The Castro': 22,\n        'Haight-Ashbury': 19,\n        'Union Square': 7,\n        'North Beach': 3,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 23,\n        'Marina District': 12,\n        'Russian Hill': 7\n    },\n    'Golden Gate Park': {\n        'Nob Hill': 20,\n        'Embarcadero': 25,\n        'The Castro': 13,\n        'Haight-Ashbury': 7,\n        'Union Square': 22,\n        'North Beach': 23,\n        'Pacific Heights': 16,\n        'Chinatown': 23,\n        'Marina District': 16,\n        'Russian Hill': 19\n    },\n    'Marina District': {\n        'Nob Hill': 12,\n        'Embarcadero': 14,\n        'The Castro': 22,\n        'Haight-Ashbury': 16,\n        'Union Square': 16,\n        'North Beach': 11,\n        'Pacific Heights': 7,\n        'Chinatown': 15,\n        'Golden Gate Park': 18,\n        'Russian Hill': 8\n    },\n    'Russian Hill': {\n        'Nob Hill': 5,\n        'Embarcadero': 8,\n        'The Castro': 21,\n        'Haight-Ashbury': 17,\n        'Union Square': 10,\n        'North Beach': 5,\n        'Pacific Heights': 7,\n        'Chinatown': 9,\n        'Golden Gate Park': 21,\n        'Marina District': 7\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Mary': {'location': 'Embarcadero', 'start': '8:00PM', 'end': '9:15PM', 'min_duration': 75},\n    'Kenneth': {'location': 'The Castro', 'start': '11:15AM', 'end': '7:15PM', 'min_duration': 30},\n    'Joseph': {'location': 'Haight-Ashbury', 'start': '8:00PM', 'end': '10:00PM', 'min_duration': 120},\n    'Sarah': {'location': 'Union Square', 'start': '11:45AM', 'end': '2:30PM', 'min_duration': 90},\n    'Thomas': {'location': 'North Beach', 'start': '7:15PM', 'end': '7:45PM', 'min_duration': 15},\n    'Daniel': {'location': 'Pacific Heights', 'start': '1:45PM', 'end': '8:30PM', 'min_duration': 15},\n    'Richard': {'location': 'Chinatown', 'start': '8:00AM', 'end': '6:45PM', 'min_duration': 30},\n    'Mark': {'location': 'Golden Gate Park', 'start': '5:30PM', 'end': '9:30PM', 'min_duration': 120},\n    'David': {'location': 'Marina District', 'start': '8:00PM', 'end': '9:00PM', 'min_duration': 60},\n    'Karen': {'location': 'Russian Hill', 'start': '1:15PM', 'end': '6:30PM', 'min_duration': 120}\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef generate_schedule(friend_order):\n    current_location = 'Nob Hill'\n    current_time = time_to_minutes('9:00AM')\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend in friend_order:\n        if friend in met_friends:\n            continue\n        friend_data = friends[friend]\n        location = friend_data['location']\n        start_time = time_to_minutes(friend_data['start'])\n        end_time = time_to_minutes(friend_data['end'])\n        min_duration = friend_data['min_duration']\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][location]\n        arrival_time = current_time + travel_duration\n        \n        # Check if we can meet the friend\n        available_start = max(arrival_time, start_time)\n        available_end = end_time\n        available_duration = available_end - available_start\n        \n        if available_duration >= min_duration:\n            # Add travel action\n            if travel_duration > 0:\n                schedule.append({\n                    'action': 'travel',\n                    'location': current_location,\n                    'duration': travel_duration,\n                    'time': minutes_to_time(current_time),\n                    'to': location\n                })\n            \n            # Add meet action\n            meet_time = available_start\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'duration': min_duration,\n                'time': minutes_to_time(meet_time)\n            })\n            \n            # Update current time and location\n            current_time = meet_time + min_duration\n            current_location = location\n            met_friends.add(friend)\n    \n    return schedule, len(met_friends)\n\n# Try different friend orders to maximize meetings\nbest_schedule = []\nmax_meetings = 0\nfriend_names = list(friends.keys())\n\n# Try some permutations (not all due to computational constraints)\nfor perm in permutations(friend_names, min(5, len(friend_names))):\n    schedule, num_meetings = generate_schedule(perm)\n    if num_meetings > max_meetings:\n        max_meetings = num_meetings\n        best_schedule = schedule\n\n# Output the best schedule found\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_934"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "William",
            "start_time": "1:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Robert",
            "start_time": "2:15PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Mark",
            "start_time": "3:19PM",
            "end_time": "4:34PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Linda",
            "start_time": "4:57PM",
            "end_time": "5:27PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Elizabeth",
            "start_time": "5:42PM",
            "end_time": "7:27PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Rebecca",
            "start_time": "7:42PM",
            "end_time": "8:42PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "William",
            "start_time": "1:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Robert",
            "start_time": "2:15PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Mark",
            "start_time": "3:19PM",
            "end_time": "4:34PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Linda",
            "start_time": "4:57PM",
            "end_time": "5:27PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Elizabeth",
            "start_time": "5:42PM",
            "end_time": "7:27PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Rebecca",
            "start_time": "7:42PM",
            "end_time": "8:42PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"The Castro\": {\n        \"Presidio\": 20,\n        \"Sunset District\": 17,\n        \"Haight-Ashbury\": 6,\n        \"Mission District\": 7,\n        \"Golden Gate Park\": 11,\n        \"Russian Hill\": 18\n    },\n    \"Presidio\": {\n        \"The Castro\": 21,\n        \"Sunset District\": 15,\n        \"Haight-Ashbury\": 15,\n        \"Mission District\": 26,\n        \"Golden Gate Park\": 12,\n        \"Russian Hill\": 14\n    },\n    \"Sunset District\": {\n        \"The Castro\": 17,\n        \"Presidio\": 16,\n        \"Haight-Ashbury\": 15,\n        \"Mission District\": 24,\n        \"Golden Gate Park\": 11,\n        \"Russian Hill\": 24\n    },\n    \"Haight-Ashbury\": {\n        \"The Castro\": 6,\n        \"Presidio\": 15,\n        \"Sunset District\": 15,\n        \"Mission District\": 11,\n        \"Golden Gate Park\": 7,\n        \"Russian Hill\": 17\n    },\n    \"Mission District\": {\n        \"The Castro\": 7,\n        \"Presidio\": 25,\n        \"Sunset District\": 24,\n        \"Haight-Ashbury\": 12,\n        \"Golden Gate Park\": 17,\n        \"Russian Hill\": 15\n    },\n    \"Golden Gate Park\": {\n        \"The Castro\": 13,\n        \"Presidio\": 11,\n        \"Sunset District\": 10,\n        \"Haight-Ashbury\": 7,\n        \"Mission District\": 17,\n        \"Russian Hill\": 19\n    },\n    \"Russian Hill\": {\n        \"The Castro\": 21,\n        \"Presidio\": 14,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 17,\n        \"Mission District\": 16,\n        \"Golden Gate Park\": 21\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"Rebecca\": {\n        \"location\": \"Presidio\",\n        \"start\": time_to_minutes(\"6:15PM\"),\n        \"end\": time_to_minutes(\"8:45PM\"),\n        \"duration\": 60\n    },\n    \"Linda\": {\n        \"location\": \"Sunset District\",\n        \"start\": time_to_minutes(\"3:30PM\"),\n        \"end\": time_to_minutes(\"7:45PM\"),\n        \"duration\": 30\n    },\n    \"Elizabeth\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": time_to_minutes(\"5:15PM\"),\n        \"end\": time_to_minutes(\"7:30PM\"),\n        \"duration\": 105\n    },\n    \"William\": {\n        \"location\": \"Mission District\",\n        \"start\": time_to_minutes(\"1:15PM\"),\n        \"end\": time_to_minutes(\"7:30PM\"),\n        \"duration\": 30\n    },\n    \"Robert\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": time_to_minutes(\"2:15PM\"),\n        \"end\": time_to_minutes(\"9:30PM\"),\n        \"duration\": 45\n    },\n    \"Mark\": {\n        \"location\": \"Russian Hill\",\n        \"start\": time_to_minutes(\"10:00AM\"),\n        \"end\": time_to_minutes(\"9:15PM\"),\n        \"duration\": 75\n    }\n}\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"The Castro\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        location = friend_data[\"location\"]\n        travel_duration = travel_times[current_location][location]\n        arrival_time = current_time + travel_duration\n        \n        # Check if we can meet this friend\n        meeting_start = max(arrival_time, friend_data[\"start\"])\n        meeting_end = meeting_start + friend_data[\"duration\"]\n        \n        if meeting_end > friend_data[\"end\"]:\n            continue  # Can't meet this friend\n        \n        # Add travel action\n        if current_location != location:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": location\n            })\n        \n        # Add wait action if needed\n        if arrival_time < friend_data[\"start\"]:\n            wait_time = friend_data[\"start\"] - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location,\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_time\n            })\n        \n        # Add meet action\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"duration\": friend_data[\"duration\"],\n            \"time\": minutes_to_time(meeting_start),\n            \"with\": friend\n        })\n        \n        met_friends.add(friend)\n        current_time = meeting_end\n        current_location = location\n    \n    return schedule, len(met_friends)\n\n# Try all possible orders to find the optimal schedule\nbest_schedule = None\nbest_count = 0\nall_friends = list(friends.keys())\n\n# Since trying all permutations is computationally expensive, we'll try a subset\n# In a real application, you'd use a more sophisticated algorithm\nfor order in permutations(all_friends):\n    schedule, count = generate_schedule(order)\n    if count > best_count:\n        best_count = count\n        best_schedule = schedule\n    if best_count == len(all_friends):\n        break\n\n# If no schedule meets all friends, try to find one that meets most\nif best_schedule is None:\n    for order in permutations(all_friends):\n        schedule, count = generate_schedule(order)\n        if count > best_count:\n            best_count = count\n            best_schedule = schedule\n\n# Convert the best schedule to JSON\noutput = {\"schedule\": best_schedule}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_575"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Margaret",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Barbara",
            "start_time": "1:45PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kimberly",
            "start_time": "2:52PM",
            "end_time": "3:22PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kevin",
            "start_time": "8:00PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Margaret",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Barbara",
            "start_time": "1:45PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kimberly",
            "start_time": "2:52PM",
            "end_time": "3:22PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kevin",
            "start_time": "8:00PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Bayview\": {\n        \"North Beach\": 21,\n        \"Presidio\": 31,\n        \"Haight-Ashbury\": 19,\n        \"Union Square\": 17\n    },\n    \"North Beach\": {\n        \"Bayview\": 22,\n        \"Presidio\": 17,\n        \"Haight-Ashbury\": 18,\n        \"Union Square\": 7\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"North Beach\": 18,\n        \"Haight-Ashbury\": 15,\n        \"Union Square\": 22\n    },\n    \"Haight-Ashbury\": {\n        \"Bayview\": 18,\n        \"North Beach\": 19,\n        \"Presidio\": 15,\n        \"Union Square\": 17\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"North Beach\": 10,\n        \"Presidio\": 24,\n        \"Haight-Ashbury\": 18\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"Barbara\": {\n        \"location\": \"North Beach\",\n        \"start\": time_to_minutes(\"1:45PM\"),\n        \"end\": time_to_minutes(\"8:15PM\"),\n        \"duration\": 60\n    },\n    \"Margaret\": {\n        \"location\": \"Presidio\",\n        \"start\": time_to_minutes(\"10:15AM\"),\n        \"end\": time_to_minutes(\"3:15PM\"),\n        \"duration\": 30\n    },\n    \"Kevin\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": time_to_minutes(\"8:00PM\"),\n        \"end\": time_to_minutes(\"8:45PM\"),\n        \"duration\": 30\n    },\n    \"Kimberly\": {\n        \"location\": \"Union Square\",\n        \"start\": time_to_minutes(\"7:45AM\"),\n        \"end\": time_to_minutes(\"4:45PM\"),\n        \"duration\": 30\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Bayview\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data[\"location\"]\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        # Arrive at destination\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if we can meet the friend\n        friend_start = friend_data[\"start\"]\n        friend_end = friend_data[\"end\"]\n        duration = friend_data[\"duration\"]\n        \n        if current_time < friend_start:\n            # Need to wait\n            wait_duration = friend_start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = friend_start\n        \n        # Check if we can complete the meeting\n        if current_time + duration <= friend_end:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": duration,\n                \"time\": minutes_to_time(current_time),\n                \"with\": friend\n            })\n            current_time += duration\n            met_friends.add(friend)\n        else:\n            # Can't meet this friend, continue to next\n            continue\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of meeting friends\nfriend_names = list(friends.keys())\nbest_schedule = None\nbest_meetings = 0\n\n# Try all permutations (since number of friends is small)\nfor order in permutations(friend_names):\n    schedule, num_meetings = calculate_schedule(order)\n    if num_meetings > best_meetings:\n        best_meetings = num_meetings\n        best_schedule = schedule\n\n# Convert the best schedule to the required JSON format\noutput_schedule = []\nfor event in best_schedule:\n    if event[\"action\"] == \"start\":\n        output_schedule.append({\n            \"action\": \"start\",\n            \"location\": event[\"location\"],\n            \"time\": event[\"time\"]\n        })\n    elif event[\"action\"] == \"travel\":\n        output_schedule.append({\n            \"action\": \"travel\",\n            \"location\": event[\"location\"],\n            \"duration\": event[\"duration\"],\n            \"time\": event[\"time\"],\n            \"to\": event[\"to\"]\n        })\n    elif event[\"action\"] == \"wait\":\n        output_schedule.append({\n            \"action\": \"wait\",\n            \"location\": event[\"location\"],\n            \"time\": event[\"time\"],\n            \"duration\": event[\"duration\"]\n        })\n    elif event[\"action\"] == \"meet\":\n        output_schedule.append({\n            \"action\": \"meet\",\n            \"location\": event[\"location\"],\n            \"duration\": event[\"duration\"],\n            \"time\": event[\"time\"],\n            \"with\": event[\"with\"]\n        })\n\n# Output the result as JSON\nprint(json.dumps({\"schedule\": output_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_356"
    },
    {
      "final_program_time": {
        "itinerary": []
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Carol",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Karen",
            "start_time": "12:45PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Rebecca",
            "start_time": "2:58PM",
            "end_time": "4:58PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    minutes = time_to_minutes(time_str)\n    total_minutes = minutes + minutes_to_add\n    return minutes_to_time(total_minutes)\n\ndef calculate_schedule():\n    travel_times = {\n        ('Union Square', 'Mission District'): 14,\n        ('Union Square', 'Bayview'): 15,\n        ('Union Square', 'Sunset District'): 26,\n        ('Mission District', 'Union Square'): 15,\n        ('Mission District', 'Bayview'): 15,\n        ('Mission District', 'Sunset District'): 24,\n        ('Bayview', 'Union Square'): 17,\n        ('Bayview', 'Mission District'): 13,\n        ('Bayview', 'Sunset District'): 23,\n        ('Sunset District', 'Union Square'): 30,\n        ('Sunset District', 'Mission District'): 24,\n        ('Sunset District', 'Bayview'): 22,\n    }\n\n    friends = {\n        'Rebecca': {\n            'location': 'Mission District',\n            'available_start': '11:30AM',\n            'available_end': '8:15PM',\n            'duration': 120\n        },\n        'Karen': {\n            'location': 'Bayview',\n            'available_start': '12:45PM',\n            'available_end': '3:00PM',\n            'duration': 120\n        },\n        'Carol': {\n            'location': 'Sunset District',\n            'available_start': '10:15AM',\n            'available_end': '11:45AM',\n            'duration': 30\n        }\n    }\n\n    current_time = '9:00AM'\n    current_location = 'Union Square'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # First, try to meet Carol in Sunset District\n    travel_duration = travel_times[(current_location, 'Sunset District')]\n    arrival_time = add_minutes_to_time(current_time, travel_duration)\n    carol_start = friends['Carol']['available_start']\n    carol_end = friends['Carol']['available_end']\n    meet_duration = friends['Carol']['duration']\n\n    if arrival_time <= carol_end:\n        if arrival_time < carol_start:\n            wait_time = time_to_minutes(carol_start) - time_to_minutes(arrival_time)\n            schedule.append({\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_duration, \"time\": current_time, \"to\": \"Sunset District\"})\n            schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": arrival_time})\n            schedule.append({\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meet_duration, \"time\": carol_start})\n            current_time = add_minutes_to_time(carol_start, meet_duration)\n        else:\n            remaining_time = time_to_minutes(carol_end) - time_to_minutes(arrival_time)\n            actual_duration = min(meet_duration, remaining_time)\n            if actual_duration >= 30:\n                schedule.append({\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_duration, \"time\": current_time, \"to\": \"Sunset District\"})\n                schedule.append({\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": actual_duration, \"time\": arrival_time})\n                current_time = add_minutes_to_time(arrival_time, actual_duration)\n        current_location = 'Sunset District'\n\n    # Next, try to meet Rebecca in Mission District\n    travel_duration = travel_times[(current_location, 'Mission District')]\n    arrival_time = add_minutes_to_time(current_time, travel_duration)\n    rebecca_start = friends['Rebecca']['available_start']\n    rebecca_end = friends['Rebecca']['available_end']\n    meet_duration = friends['Rebecca']['duration']\n\n    if arrival_time <= rebecca_end:\n        if arrival_time < rebecca_start:\n            wait_time = time_to_minutes(rebecca_start) - time_to_minutes(arrival_time)\n            schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time, \"to\": \"Mission District\"})\n            schedule.append({\"action\": \"wait\", \"location\": \"Mission District\", \"time\": arrival_time})\n            schedule.append({\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": meet_duration, \"time\": rebecca_start})\n            current_time = add_minutes_to_time(rebecca_start, meet_duration)\n        else:\n            remaining_time = time_to_minutes(rebecca_end) - time_to_minutes(arrival_time)\n            actual_duration = min(meet_duration, remaining_time)\n            if actual_duration >= 120:\n                schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time, \"to\": \"Mission District\"})\n                schedule.append({\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": actual_duration, \"time\": arrival_time})\n                current_time = add_minutes_to_time(arrival_time, actual_duration)\n        current_location = 'Mission District'\n\n    # Finally, try to meet Karen in Bayview\n    travel_duration = travel_times[(current_location, 'Bayview')]\n    arrival_time = add_minutes_to_time(current_time, travel_duration)\n    karen_start = friends['Karen']['available_start']\n    karen_end = friends['Karen']['available_end']\n    meet_duration = friends['Karen']['duration']\n\n    if arrival_time <= karen_end:\n        if arrival_time < karen_start:\n            wait_time = time_to_minutes(karen_start) - time_to_minutes(arrival_time)\n            schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_duration, \"time\": current_time, \"to\": \"Bayview\"})\n            schedule.append({\"action\": \"wait\", \"location\": \"Bayview\", \"time\": arrival_time})\n            schedule.append({\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meet_duration, \"time\": karen_start})\n            current_time = add_minutes_to_time(karen_start, meet_duration)\n        else:\n            remaining_time = time_to_minutes(karen_end) - time_to_minutes(arrival_time)\n            actual_duration = min(meet_duration, remaining_time)\n            if actual_duration >= 120:\n                schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_duration, \"time\": current_time, \"to\": \"Bayview\"})\n                schedule.append({\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": actual_duration, \"time\": arrival_time})\n                current_time = add_minutes_to_time(arrival_time, actual_duration)\n        current_location = 'Bayview'\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_286"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Melissa",
            "start_time": "6:23PM",
            "end_time": "7:38PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joseph",
            "start_time": "7:59PM",
            "end_time": "9:59PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joseph",
            "start_time": "6:07PM",
            "end_time": "8:07PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Melissa",
            "start_time": "8:29PM",
            "end_time": "9:44PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef calculate_schedule(order):\n    travel_times = {\n        ('Fisherman\\'s Wharf', 'Presidio'): 17,\n        ('Fisherman\\'s Wharf', 'Richmond District'): 18,\n        ('Fisherman\\'s Wharf', 'Financial District'): 11,\n        ('Presidio', 'Fisherman\\'s Wharf'): 19,\n        ('Presidio', 'Richmond District'): 7,\n        ('Presidio', 'Financial District'): 23,\n        ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n        ('Richmond District', 'Presidio'): 7,\n        ('Richmond District', 'Financial District'): 22,\n        ('Financial District', 'Fisherman\\'s Wharf'): 10,\n        ('Financial District', 'Presidio'): 22,\n        ('Financial District', 'Richmond District'): 21\n    }\n    \n    constraints = {\n        'Emily': {\n            'location': 'Presidio',\n            'start': time_to_minutes('4:15PM'),\n            'end': time_to_minutes('9:00PM'),\n            'duration': 105\n        },\n        'Joseph': {\n            'location': 'Richmond District',\n            'start': time_to_minutes('5:15PM'),\n            'end': time_to_minutes('10:00PM'),\n            'duration': 120\n        },\n        'Melissa': {\n            'location': 'Financial District',\n            'start': time_to_minutes('3:45PM'),\n            'end': time_to_minutes('9:45PM'),\n            'duration': 75\n        }\n    }\n    \n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Fisherman\\'s Wharf'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    possible = True\n    \n    for person in order:\n        info = constraints[person]\n        destination = info['location']\n        if current_location != destination:\n            travel_key = (current_location, destination)\n            travel_duration = travel_times[travel_key]\n            arrival_time = current_time + travel_duration\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(current_time),\n                \"to\": destination\n            })\n            current_time = arrival_time\n            current_location = destination\n        \n        meeting_start = max(current_time, info['start'])\n        meeting_end = meeting_start + info['duration']\n        \n        if meeting_end > info['end']:\n            possible = False\n            break\n        \n        if current_time < info['start']:\n            wait_duration = info['start'] - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time = info['start']\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": info['duration'],\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time += info['duration']\n    \n    return schedule if possible else None\n\ndef main():\n    best_schedule = None\n    best_duration = 0\n    \n    for order in permutations(['Emily', 'Joseph', 'Melissa']):\n        schedule = calculate_schedule(order)\n        if schedule:\n            last_event = schedule[-1]\n            end_time = time_to_minutes(last_event['time']) + last_event.get('duration', 0)\n            if end_time > best_duration:\n                best_duration = end_time\n                best_schedule = schedule\n    \n    print(json.dumps({\"schedule\": best_schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_210"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "9:16AM",
            "end_time": "10:01AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "George",
            "start_time": "10:23AM",
            "end_time": "11:23AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "11:34AM",
            "end_time": "1:19PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Emily",
            "start_time": "1:38PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "2:45PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Andrew",
            "start_time": "8:15PM",
            "end_time": "9:30PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Margaret",
            "start_time": "10:00PM",
            "end_time": "10:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "9:16AM",
            "end_time": "10:01AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "George",
            "start_time": "10:23AM",
            "end_time": "11:23AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Emily",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "2:45PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "3:57PM",
            "end_time": "5:42PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Margaret",
            "start_time": "9:30PM",
            "end_time": "10:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef time_diff(start, end):\n    return (end - start).total_seconds() / 60\n\n# Travel times dictionary: {from: {to: minutes}}\ntravel_times = {\n    'Alamo Square': {\n        'Russian Hill': 13,\n        'Presidio': 18,\n        'Chinatown': 16,\n        'Sunset District': 16,\n        'The Castro': 8,\n        'Embarcadero': 17,\n        'Golden Gate Park': 9\n    },\n    'Russian Hill': {\n        'Alamo Square': 15,\n        'Presidio': 14,\n        'Chinatown': 9,\n        'Sunset District': 23,\n        'The Castro': 21,\n        'Embarcadero': 8,\n        'Golden Gate Park': 21\n    },\n    'Presidio': {\n        'Alamo Square': 18,\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Sunset District': 15,\n        'The Castro': 21,\n        'Embarcadero': 20,\n        'Golden Gate Park': 12\n    },\n    'Chinatown': {\n        'Alamo Square': 17,\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Sunset District': 29,\n        'The Castro': 22,\n        'Embarcadero': 5,\n        'Golden Gate Park': 23\n    },\n    'Sunset District': {\n        'Alamo Square': 17,\n        'Russian Hill': 24,\n        'Presidio': 16,\n        'Chinatown': 30,\n        'The Castro': 17,\n        'Embarcadero': 31,\n        'Golden Gate Park': 11\n    },\n    'The Castro': {\n        'Alamo Square': 8,\n        'Russian Hill': 18,\n        'Presidio': 20,\n        'Chinatown': 20,\n        'Sunset District': 17,\n        'Embarcadero': 22,\n        'Golden Gate Park': 11\n    },\n    'Embarcadero': {\n        'Alamo Square': 19,\n        'Russian Hill': 8,\n        'Presidio': 20,\n        'Chinatown': 7,\n        'Sunset District': 30,\n        'The Castro': 25,\n        'Golden Gate Park': 25\n    },\n    'Golden Gate Park': {\n        'Alamo Square': 10,\n        'Russian Hill': 19,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'Sunset District': 10,\n        'The Castro': 13,\n        'Embarcadero': 25\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Emily',\n        'location': 'Russian Hill',\n        'start': parse_time('12:15PM'),\n        'end': parse_time('2:15PM'),\n        'min_duration': 105\n    },\n    {\n        'name': 'Mark',\n        'location': 'Presidio',\n        'start': parse_time('2:45PM'),\n        'end': parse_time('7:30PM'),\n        'min_duration': 60\n    },\n    {\n        'name': 'Deborah',\n        'location': 'Chinatown',\n        'start': parse_time('7:30AM'),\n        'end': parse_time('3:30PM'),\n        'min_duration': 45\n    },\n    {\n        'name': 'Margaret',\n        'location': 'Sunset District',\n        'start': parse_time('9:30PM'),\n        'end': parse_time('10:30PM'),\n        'min_duration': 60\n    },\n    {\n        'name': 'George',\n        'location': 'The Castro',\n        'start': parse_time('7:30AM'),\n        'end': parse_time('2:15PM'),\n        'min_duration': 60\n    },\n    {\n        'name': 'Andrew',\n        'location': 'Embarcadero',\n        'start': parse_time('8:15PM'),\n        'end': parse_time('10:00PM'),\n        'min_duration': 75\n    },\n    {\n        'name': 'Steven',\n        'location': 'Golden Gate Park',\n        'start': parse_time('11:15AM'),\n        'end': parse_time('9:15PM'),\n        'min_duration': 105\n    }\n]\n\ndef compute_schedule():\n    current_time = parse_time('9:00AM')\n    current_location = 'Alamo Square'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n    \n    # Sort friends by earliest possible meeting time\n    sorted_friends = sorted(friends, key=lambda x: x['start'])\n    \n    for friend in sorted_friends:\n        # Check if we can meet this friend\n        travel_duration = travel_times[current_location][friend['location']]\n        arrival_time = add_minutes(current_time, travel_duration)\n        \n        # If we arrive before friend's availability starts, wait\n        if arrival_time < friend['start']:\n            wait_time = time_diff(arrival_time, friend['start'])\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': format_time(current_time),\n                'to': friend['location']\n            })\n            schedule.append({\n                'action': 'wait',\n                'location': friend['location'],\n                'time': format_time(arrival_time)\n            })\n            current_time = friend['start']\n            current_location = friend['location']\n        # If we arrive during friend's availability\n        elif arrival_time <= friend['end']:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': format_time(current_time),\n                'to': friend['location']\n            })\n            current_time = arrival_time\n            current_location = friend['location']\n        else:\n            continue  # Can't meet this friend\n        \n        # Calculate available time with friend\n        available_duration = time_diff(current_time, friend['end'])\n        meet_duration = min(available_duration, friend['min_duration'])\n        \n        if meet_duration <= 0:\n            continue  # Not enough time\n        \n        # Add meeting to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': meet_duration,\n            'time': format_time(current_time)\n        })\n        current_time = add_minutes(current_time, meet_duration)\n        \n    return schedule\n\nschedule = compute_schedule()\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
      "count": "meeting_planning_example_612"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Linda",
            "start_time": "9:17AM",
            "end_time": "9:32AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Anthony",
            "start_time": "9:43AM",
            "end_time": "11:28AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Nancy",
            "start_time": "11:39AM",
            "end_time": "1:39PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "2:04PM",
            "end_time": "2:34PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Paul",
            "start_time": "2:45PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Margaret",
            "start_time": "4:33PM",
            "end_time": "5:18PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "William",
            "start_time": "5:45PM",
            "end_time": "7:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Kimberly",
            "start_time": "8:07PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Emily",
            "start_time": "9:15AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Linda",
            "start_time": "11:26AM",
            "end_time": "11:41AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Anthony",
            "start_time": "11:52AM",
            "end_time": "1:37PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "1:54PM",
            "end_time": "2:24PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Paul",
            "start_time": "2:45PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "William",
            "start_time": "5:30PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Kimberly",
            "start_time": "7:52PM",
            "end_time": "9:07PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        'Russian Hill': {\n            'Pacific Heights': 7,\n            'North Beach': 5,\n            'Golden Gate Park': 21,\n            'Embarcadero': 8,\n            'Haight-Ashbury': 17,\n            'Fisherman\\'s Wharf': 7,\n            'Mission District': 16,\n            'Alamo Square': 15,\n            'Bayview': 23,\n            'Richmond District': 14\n        },\n        'Pacific Heights': {\n            'Russian Hill': 7,\n            'North Beach': 9,\n            'Golden Gate Park': 15,\n            'Embarcadero': 10,\n            'Haight-Ashbury': 11,\n            'Fisherman\\'s Wharf': 13,\n            'Mission District': 15,\n            'Alamo Square': 10,\n            'Bayview': 22,\n            'Richmond District': 12\n        },\n        'North Beach': {\n            'Russian Hill': 4,\n            'Pacific Heights': 8,\n            'Golden Gate Park': 22,\n            'Embarcadero': 6,\n            'Haight-Ashbury': 18,\n            'Fisherman\\'s Wharf': 5,\n            'Mission District': 18,\n            'Alamo Square': 16,\n            'Bayview': 25,\n            'Richmond District': 18\n        },\n        'Golden Gate Park': {\n            'Russian Hill': 19,\n            'Pacific Heights': 16,\n            'North Beach': 23,\n            'Embarcadero': 25,\n            'Haight-Ashbury': 7,\n            'Fisherman\\'s Wharf': 24,\n            'Mission District': 17,\n            'Alamo Square': 9,\n            'Bayview': 23,\n            'Richmond District': 7\n        },\n        'Embarcadero': {\n            'Russian Hill': 8,\n            'Pacific Heights': 11,\n            'North Beach': 5,\n            'Golden Gate Park': 25,\n            'Haight-Ashbury': 21,\n            'Fisherman\\'s Wharf': 6,\n            'Mission District': 20,\n            'Alamo Square': 19,\n            'Bayview': 21,\n            'Richmond District': 21\n        },\n        'Haight-Ashbury': {\n            'Russian Hill': 17,\n            'Pacific Heights': 12,\n            'North Beach': 19,\n            'Golden Gate Park': 7,\n            'Embarcadero': 20,\n            'Fisherman\\'s Wharf': 23,\n            'Mission District': 11,\n            'Alamo Square': 5,\n            'Bayview': 18,\n            'Richmond District': 10\n        },\n        'Fisherman\\'s Wharf': {\n            'Russian Hill': 7,\n            'Pacific Heights': 12,\n            'North Beach': 6,\n            'Golden Gate Park': 25,\n            'Embarcadero': 8,\n            'Haight-Ashbury': 22,\n            'Mission District': 22,\n            'Alamo Square': 21,\n            'Bayview': 26,\n            'Richmond District': 18\n        },\n        'Mission District': {\n            'Russian Hill': 15,\n            'Pacific Heights': 16,\n            'North Beach': 17,\n            'Golden Gate Park': 17,\n            'Embarcadero': 19,\n            'Haight-Ashbury': 12,\n            'Fisherman\\'s Wharf': 22,\n            'Alamo Square': 11,\n            'Bayview': 14,\n            'Richmond District': 20\n        },\n        'Alamo Square': {\n            'Russian Hill': 13,\n            'Pacific Heights': 10,\n            'North Beach': 15,\n            'Golden Gate Park': 9,\n            'Embarcadero': 16,\n            'Haight-Ashbury': 5,\n            'Fisherman\\'s Wharf': 19,\n            'Mission District': 10,\n            'Bayview': 16,\n            'Richmond District': 11\n        },\n        'Bayview': {\n            'Russian Hill': 23,\n            'Pacific Heights': 23,\n            'North Beach': 22,\n            'Golden Gate Park': 22,\n            'Embarcadero': 19,\n            'Haight-Ashbury': 19,\n            'Fisherman\\'s Wharf': 25,\n            'Mission District': 13,\n            'Alamo Square': 16,\n            'Richmond District': 25\n        },\n        'Richmond District': {\n            'Russian Hill': 13,\n            'Pacific Heights': 10,\n            'North Beach': 17,\n            'Golden Gate Park': 9,\n            'Embarcadero': 19,\n            'Haight-Ashbury': 10,\n            'Fisherman\\'s Wharf': 18,\n            'Mission District': 20,\n            'Alamo Square': 13,\n            'Bayview': 27\n        }\n    }\n    return travel_times[from_loc][to_loc]\n\ndef schedule_meetings():\n    current_time = parse_time('9:00AM')\n    current_location = 'Russian Hill'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n    \n    # Define all meetings with their constraints\n    meetings = [\n        {'name': 'Emily', 'location': 'Pacific Heights', 'start': '9:15AM', 'end': '1:45PM', 'duration': 120},\n        {'name': 'James', 'location': 'Embarcadero', 'start': '10:30AM', 'end': '11:30AM', 'duration': 30},\n        {'name': 'Nancy', 'location': 'Alamo Square', 'start': '8:30AM', 'end': '1:45PM', 'duration': 120},\n        {'name': 'Anthony', 'location': 'Mission District', 'start': '8:00AM', 'end': '2:45PM', 'duration': 105},\n        {'name': 'Linda', 'location': 'Haight-Ashbury', 'start': '7:30AM', 'end': '7:15PM', 'duration': 15},\n        {'name': 'Helen', 'location': 'North Beach', 'start': '1:45PM', 'end': '6:45PM', 'duration': 30},\n        {'name': 'Paul', 'location': 'Fisherman\\'s Wharf', 'start': '2:45PM', 'end': '6:45PM', 'duration': 90},\n        {'name': 'Margaret', 'location': 'Richmond District', 'start': '3:15PM', 'end': '6:15PM', 'duration': 45},\n        {'name': 'William', 'location': 'Bayview', 'start': '5:30PM', 'end': '8:30PM', 'duration': 120},\n        {'name': 'Kimberly', 'location': 'Golden Gate Park', 'start': '6:45PM', 'end': '9:15PM', 'duration': 75}\n    ]\n    \n    # Sort meetings by priority (earlier start times first, then longer durations)\n    meetings.sort(key=lambda x: (parse_time(x['start']), -x['duration']))\n    \n    for meeting in meetings:\n        location = meeting['location']\n        start_time = parse_time(meeting['start'])\n        end_time = parse_time(meeting['end'])\n        duration = meeting['duration']\n        \n        # Travel to meeting location\n        if current_location != location:\n            travel_time = get_travel_time(current_location, location)\n            arrival_time = add_minutes(current_time, travel_time)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": format_time(current_time),\n                \"to\": location\n            })\n            current_time = arrival_time\n            current_location = location\n        \n        # Check if we can meet within the time window\n        if current_time < start_time:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location,\n                \"time\": format_time(current_time)\n            })\n            current_time = start_time\n        \n        meeting_end = add_minutes(current_time, duration)\n        if meeting_end <= end_time:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"duration\": duration,\n                \"time\": format_time(current_time)\n            })\n            current_time = meeting_end\n        else:\n            # Try to meet for whatever time is left\n            available_duration = (end_time - current_time).total_seconds() / 60\n            if available_duration > 0:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"duration\": int(available_duration),\n                    \"time\": format_time(current_time)\n                })\n                current_time = end_time\n    \n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nprint(schedule_meetings())\n```",
      "count": "meeting_planning_example_901"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Anthony",
            "start_time": "9:06AM",
            "end_time": "9:36AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Karen",
            "start_time": "11:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joseph",
            "start_time": "12:02PM",
            "end_time": "12:17PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "William",
            "start_time": "3:15PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joshua",
            "start_time": "4:26PM",
            "end_time": "4:41PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "David",
            "start_time": "5:02PM",
            "end_time": "5:47PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Brian",
            "start_time": "6:02PM",
            "end_time": "7:47PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jeffrey",
            "start_time": "8:12PM",
            "end_time": "9:12PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joshua",
            "start_time": "9:16AM",
            "end_time": "9:31AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Anthony",
            "start_time": "9:41AM",
            "end_time": "10:11AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Helen",
            "start_time": "10:23AM",
            "end_time": "11:38AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joseph",
            "start_time": "11:51AM",
            "end_time": "12:06PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "William",
            "start_time": "3:15PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "David",
            "start_time": "4:45PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Karen",
            "start_time": "5:48PM",
            "end_time": "6:03PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Brian",
            "start_time": "6:13PM",
            "end_time": "7:58PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jeffrey",
            "start_time": "8:23PM",
            "end_time": "9:23PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    'The Castro': {\n        'Alamo Square': 8,\n        'Richmond District': 16,\n        'Financial District': 21,\n        'Union Square': 19,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 21,\n        'Haight-Ashbury': 6,\n        'Mission District': 7,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 11\n    },\n    'Alamo Square': {\n        'The Castro': 8,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Union Square': 14,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 15,\n        'Haight-Ashbury': 5,\n        'Mission District': 10,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9\n    },\n    'Richmond District': {\n        'The Castro': 16,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Union Square': 21,\n        'Fisherman\\'s Wharf': 18,\n        'Marina District': 9,\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Pacific Heights': 10,\n        'Golden Gate Park': 9\n    },\n    'Financial District': {\n        'The Castro': 20,\n        'Alamo Square': 17,\n        'Richmond District': 21,\n        'Union Square': 9,\n        'Fisherman\\'s Wharf': 10,\n        'Marina District': 15,\n        'Haight-Ashbury': 19,\n        'Mission District': 17,\n        'Pacific Heights': 13,\n        'Golden Gate Park': 23\n    },\n    'Union Square': {\n        'The Castro': 17,\n        'Alamo Square': 15,\n        'Richmond District': 20,\n        'Financial District': 9,\n        'Fisherman\\'s Wharf': 15,\n        'Marina District': 18,\n        'Haight-Ashbury': 18,\n        'Mission District': 14,\n        'Pacific Heights': 15,\n        'Golden Gate Park': 22\n    },\n    'Fisherman\\'s Wharf': {\n        'The Castro': 27,\n        'Alamo Square': 21,\n        'Richmond District': 18,\n        'Financial District': 11,\n        'Union Square': 13,\n        'Marina District': 9,\n        'Haight-Ashbury': 22,\n        'Mission District': 22,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 25\n    },\n    'Marina District': {\n        'The Castro': 22,\n        'Alamo Square': 15,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Union Square': 16,\n        'Fisherman\\'s Wharf': 10,\n        'Haight-Ashbury': 16,\n        'Mission District': 20,\n        'Pacific Heights': 7,\n        'Golden Gate Park': 18\n    },\n    'Haight-Ashbury': {\n        'The Castro': 6,\n        'Alamo Square': 5,\n        'Richmond District': 10,\n        'Financial District': 21,\n        'Union Square': 19,\n        'Fisherman\\'s Wharf': 23,\n        'Marina District': 17,\n        'Mission District': 11,\n        'Pacific Heights': 12,\n        'Golden Gate Park': 7\n    },\n    'Mission District': {\n        'The Castro': 7,\n        'Alamo Square': 11,\n        'Richmond District': 20,\n        'Financial District': 15,\n        'Union Square': 15,\n        'Fisherman\\'s Wharf': 22,\n        'Marina District': 19,\n        'Haight-Ashbury': 12,\n        'Pacific Heights': 16,\n        'Golden Gate Park': 17\n    },\n    'Pacific Heights': {\n        'The Castro': 16,\n        'Alamo Square': 10,\n        'Richmond District': 12,\n        'Financial District': 13,\n        'Union Square': 12,\n        'Fisherman\\'s Wharf': 13,\n        'Marina District': 6,\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Golden Gate Park': 15\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Alamo Square': 9,\n        'Richmond District': 7,\n        'Financial District': 26,\n        'Union Square': 22,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 16,\n        'Haight-Ashbury': 7,\n        'Mission District': 17,\n        'Pacific Heights': 16\n    }\n}\n\n# Friend constraints\nfriends = {\n    'William': {'location': 'Alamo Square', 'start': '3:15PM', 'end': '5:15PM', 'min_duration': 60},\n    'Joshua': {'location': 'Richmond District', 'start': '7:00AM', 'end': '8:00PM', 'min_duration': 15},\n    'Joseph': {'location': 'Financial District', 'start': '11:15AM', 'end': '1:30PM', 'min_duration': 15},\n    'David': {'location': 'Union Square', 'start': '4:45PM', 'end': '7:15PM', 'min_duration': 45},\n    'Brian': {'location': 'Fisherman\\'s Wharf', 'start': '1:45PM', 'end': '8:45PM', 'min_duration': 105},\n    'Karen': {'location': 'Marina District', 'start': '11:30AM', 'end': '6:30PM', 'min_duration': 15},\n    'Anthony': {'location': 'Haight-Ashbury', 'start': '7:15AM', 'end': '10:30AM', 'min_duration': 30},\n    'Matthew': {'location': 'Mission District', 'start': '5:15PM', 'end': '7:15PM', 'min_duration': 120},\n    'Helen': {'location': 'Pacific Heights', 'start': '8:00AM', 'end': '12:00PM', 'min_duration': 75},\n    'Jeffrey': {'location': 'Golden Gate Park', 'start': '7:00PM', 'end': '9:30PM', 'min_duration': 60}\n}\n\ndef generate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'The Castro'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend in order:\n        if friend in met_friends:\n            continue\n        friend_data = friends[friend]\n        location = friend_data['location']\n        start_time = time_to_minutes(friend_data['start'])\n        end_time = time_to_minutes(friend_data['end'])\n        min_duration = friend_data['min_duration']\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][location]\n        arrival_time = current_time + travel_duration\n        \n        # Check if we can meet the friend\n        if arrival_time > end_time:\n            continue  # Can't meet this friend\n        \n        # Calculate available meeting window\n        meeting_start = max(arrival_time, start_time)\n        meeting_end = min(meeting_start + min_duration, end_time)\n        \n        if meeting_end - meeting_start < min_duration:\n            continue  # Not enough time to meet\n        \n        # Add travel action\n        if current_location != location:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': minutes_to_time(current_time),\n                'to': location\n            })\n        \n        # Add wait action if needed\n        if arrival_time < start_time:\n            wait_duration = start_time - arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': location,\n                'time': minutes_to_time(arrival_time),\n                'duration': wait_duration\n            })\n        \n        # Add meet action\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'duration': min_duration,\n            'time': minutes_to_time(meeting_start)\n        })\n        \n        # Update current time and location\n        current_time = meeting_start + min_duration\n        current_location = location\n        met_friends.add(friend)\n    \n    return schedule, len(met_friends)\n\n# Try different orders to maximize number of friends met\nbest_schedule = None\nbest_count = 0\nfriend_names = list(friends.keys())\n\n# Try some reasonable permutations (full permutation is too slow)\nfor _ in range(1000):\n    import random\n    random.shuffle(friend_names)\n    schedule, count = generate_schedule(friend_names)\n    if count > best_count:\n        best_count = count\n        best_schedule = schedule\n\n# Output the best schedule found\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_956"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Barbara",
            "start_time": "9:07AM",
            "end_time": "10:07AM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Barbara",
            "start_time": "9:07AM",
            "end_time": "10:07AM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Russian Hill\"\n    arrival_time_str = \"9:00AM\"\n    arrival_time = parse_time(arrival_time_str)\n    \n    barbara_location = \"Pacific Heights\"\n    barbara_start_str = \"7:15AM\"\n    barbara_end_str = \"10:00PM\"\n    barbara_start = parse_time(barbara_start_str)\n    barbara_end = parse_time(barbara_end_str)\n    min_meet_duration = 60  # minutes\n    \n    travel_duration = 7  # minutes\n    \n    # Calculate earliest possible departure from Russian Hill\n    earliest_departure = arrival_time\n    \n    # Calculate earliest arrival at Pacific Heights\n    earliest_arrival = earliest_departure + timedelta(minutes=travel_duration)\n    \n    # Calculate latest possible departure from Pacific Heights to meet for 60 minutes\n    latest_departure = barbara_end - timedelta(minutes=min_meet_duration)\n    \n    # Calculate latest possible arrival at Pacific Heights to meet for 60 minutes\n    latest_arrival = latest_departure\n    \n    # Calculate latest possible departure from Russian Hill to arrive by latest_arrival\n    latest_departure_from_russian_hill = latest_arrival - timedelta(minutes=travel_duration)\n    \n    # Determine the actual meeting window\n    meeting_start = max(earliest_arrival, barbara_start)\n    meeting_end = min(meeting_start + timedelta(minutes=min_meet_duration), barbara_end)\n    \n    # If the meeting window is less than required, adjust\n    if (meeting_end - meeting_start) < timedelta(minutes=min_meet_duration):\n        meeting_start = barbara_end - timedelta(minutes=min_meet_duration)\n        meeting_end = barbara_end\n    \n    # Verify if meeting is possible\n    if meeting_start < earliest_arrival or meeting_end > barbara_end:\n        return {\"schedule\": []}\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Russian Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to Pacific Heights\n    travel_start_time = arrival_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_start_time),\n        \"to\": barbara_location\n    })\n    \n    # Arrive at Pacific Heights\n    arrive_time = travel_start_time + timedelta(minutes=travel_duration)\n    \n    # Check if need to wait\n    if arrive_time < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": barbara_location,\n            \"time\": format_time(arrive_time)\n        })\n    \n    # Meet Barbara\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": barbara_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_73"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Deborah",
            "start_time": "9:22AM",
            "end_time": "9:52AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Matthew",
            "start_time": "10:19AM",
            "end_time": "11:04AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Helen",
            "start_time": "11:22AM",
            "end_time": "12:07PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Joseph",
            "start_time": "2:15PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Ronald",
            "start_time": "4:42PM",
            "end_time": "5:42PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Robert",
            "start_time": "6:30PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Helen",
            "start_time": "9:30AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Deborah",
            "start_time": "10:38AM",
            "end_time": "11:08AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Matthew",
            "start_time": "11:35AM",
            "end_time": "12:20PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Rebecca",
            "start_time": "2:45PM",
            "end_time": "3:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Joseph",
            "start_time": "3:24PM",
            "end_time": "5:24PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Ronald",
            "start_time": "5:51PM",
            "end_time": "6:51PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Steven",
            "start_time": "8:15PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef time_diff_minutes(start, end):\n    return (end - start).total_seconds() / 60\n\n# Travel times dictionary: {from: {to: minutes}}\ntravel_times = {\n    \"Pacific Heights\": {\n        \"Golden Gate Park\": 15,\n        \"The Castro\": 16,\n        \"Bayview\": 22,\n        \"Marina District\": 6,\n        \"Union Square\": 12,\n        \"Sunset District\": 21,\n        \"Alamo Square\": 10,\n        \"Financial District\": 13,\n        \"Mission District\": 15\n    },\n    \"Golden Gate Park\": {\n        \"Pacific Heights\": 16,\n        \"The Castro\": 13,\n        \"Bayview\": 23,\n        \"Marina District\": 16,\n        \"Union Square\": 22,\n        \"Sunset District\": 10,\n        \"Alamo Square\": 9,\n        \"Financial District\": 26,\n        \"Mission District\": 17\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 11,\n        \"Bayview\": 19,\n        \"Marina District\": 21,\n        \"Union Square\": 19,\n        \"Sunset District\": 17,\n        \"Alamo Square\": 8,\n        \"Financial District\": 21,\n        \"Mission District\": 7\n    },\n    \"Bayview\": {\n        \"Pacific Heights\": 23,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Union Square\": 18,\n        \"Sunset District\": 23,\n        \"Alamo Square\": 16,\n        \"Financial District\": 19,\n        \"Mission District\": 13\n    },\n    \"Marina District\": {\n        \"Pacific Heights\": 7,\n        \"Golden Gate Park\": 18,\n        \"The Castro\": 22,\n        \"Bayview\": 27,\n        \"Union Square\": 16,\n        \"Sunset District\": 19,\n        \"Alamo Square\": 15,\n        \"Financial District\": 17,\n        \"Mission District\": 20\n    },\n    \"Union Square\": {\n        \"Pacific Heights\": 15,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 17,\n        \"Bayview\": 15,\n        \"Marina District\": 18,\n        \"Sunset District\": 27,\n        \"Alamo Square\": 15,\n        \"Financial District\": 9,\n        \"Mission District\": 14\n    },\n    \"Sunset District\": {\n        \"Pacific Heights\": 21,\n        \"Golden Gate Park\": 11,\n        \"The Castro\": 17,\n        \"Bayview\": 22,\n        \"Marina District\": 21,\n        \"Union Square\": 30,\n        \"Alamo Square\": 17,\n        \"Financial District\": 30,\n        \"Mission District\": 25\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9,\n        \"The Castro\": 8,\n        \"Bayview\": 16,\n        \"Marina District\": 15,\n        \"Union Square\": 14,\n        \"Sunset District\": 16,\n        \"Financial District\": 17,\n        \"Mission District\": 10\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13,\n        \"Golden Gate Park\": 23,\n        \"The Castro\": 20,\n        \"Bayview\": 19,\n        \"Marina District\": 15,\n        \"Union Square\": 9,\n        \"Sunset District\": 30,\n        \"Alamo Square\": 17,\n        \"Mission District\": 17\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 17,\n        \"The Castro\": 7,\n        \"Bayview\": 14,\n        \"Marina District\": 19,\n        \"Union Square\": 15,\n        \"Sunset District\": 24,\n        \"Alamo Square\": 11,\n        \"Financial District\": 15\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        \"name\": \"Helen\",\n        \"location\": \"Golden Gate Park\",\n        \"available_start\": parse_time(\"9:30AM\"),\n        \"available_end\": parse_time(\"12:15PM\"),\n        \"min_duration\": 45\n    },\n    {\n        \"name\": \"Steven\",\n        \"location\": \"The Castro\",\n        \"available_start\": parse_time(\"8:15PM\"),\n        \"available_end\": parse_time(\"10:00PM\"),\n        \"min_duration\": 105\n    },\n    {\n        \"name\": \"Deborah\",\n        \"location\": \"Bayview\",\n        \"available_start\": parse_time(\"8:30AM\"),\n        \"available_end\": parse_time(\"12:00PM\"),\n        \"min_duration\": 30\n    },\n    {\n        \"name\": \"Matthew\",\n        \"location\": \"Marina District\",\n        \"available_start\": parse_time(\"9:15AM\"),\n        \"available_end\": parse_time(\"2:15PM\"),\n        \"min_duration\": 45\n    },\n    {\n        \"name\": \"Joseph\",\n        \"location\": \"Union Square\",\n        \"available_start\": parse_time(\"2:15PM\"),\n        \"available_end\": parse_time(\"6:45PM\"),\n        \"min_duration\": 120\n    },\n    {\n        \"name\": \"Ronald\",\n        \"location\": \"Sunset District\",\n        \"available_start\": parse_time(\"4:00PM\"),\n        \"available_end\": parse_time(\"8:45PM\"),\n        \"min_duration\": 60\n    },\n    {\n        \"name\": \"Robert\",\n        \"location\": \"Alamo Square\",\n        \"available_start\": parse_time(\"6:30PM\"),\n        \"available_end\": parse_time(\"9:15PM\"),\n        \"min_duration\": 120\n    },\n    {\n        \"name\": \"Rebecca\",\n        \"location\": \"Financial District\",\n        \"available_start\": parse_time(\"2:45PM\"),\n        \"available_end\": parse_time(\"4:15PM\"),\n        \"min_duration\": 30\n    },\n    {\n        \"name\": \"Elizabeth\",\n        \"location\": \"Mission District\",\n        \"available_start\": parse_time(\"6:30PM\"),\n        \"available_end\": parse_time(\"9:00PM\"),\n        \"min_duration\": 120\n    }\n]\n\ndef schedule_meetings():\n    current_time = parse_time(\"9:00AM\")\n    current_location = \"Pacific Heights\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n    \n    # Sort friends by available_start time\n    sorted_friends = sorted(friends, key=lambda x: x[\"available_start\"])\n    \n    for friend in sorted_friends:\n        location = friend[\"location\"]\n        travel_duration = travel_times[current_location][location]\n        arrival_time = add_minutes(current_time, travel_duration)\n        \n        # Check if we can meet this friend\n        if arrival_time < friend[\"available_end\"]:\n            # Calculate meeting start time\n            meeting_start = max(arrival_time, friend[\"available_start\"])\n            meeting_end = add_minutes(meeting_start, friend[\"min_duration\"])\n            \n            if meeting_end <= friend[\"available_end\"]:\n                # Add travel action\n                if current_location != location:\n                    schedule.append({\n                        \"action\": \"travel\",\n                        \"location\": current_location,\n                        \"duration\": travel_duration,\n                        \"time\": format_time(current_time),\n                        \"to\": location\n                    })\n                    current_time = arrival_time\n                \n                # Add wait action if needed\n                if arrival_time < friend[\"available_start\"]:\n                    wait_duration = time_diff_minutes(arrival_time, friend[\"available_start\"])\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": location,\n                        \"time\": format_time(arrival_time),\n                        \"duration\": wait_duration\n                    })\n                    current_time = friend[\"available_start\"]\n                \n                # Add meet action\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"duration\": friend[\"min_duration\"],\n                    \"time\": format_time(current_time)\n                })\n                current_time = add_minutes(current_time, friend[\"min_duration\"])\n                current_location = location\n    \n    return schedule\n\ndef main():\n    schedule = schedule_meetings()\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_835"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Sandra",
            "start_time": "1:00PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Brian",
            "start_time": "1:38PM",
            "end_time": "3:38PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "3:45PM",
            "end_time": "4:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "9:11AM",
            "end_time": "10:41AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Sandra",
            "start_time": "1:00PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Brian",
            "start_time": "1:38PM",
            "end_time": "3:38PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "3:45PM",
            "end_time": "4:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Locations\nlocations = [\n    \"Haight-Ashbury\",\n    \"Mission District\",\n    \"Bayview\",\n    \"Pacific Heights\",\n    \"Russian Hill\",\n    \"Fisherman's Wharf\"\n]\n\n# Travel times in minutes (from -> to)\ntravel_times = {\n    \"Haight-Ashbury\": {\n        \"Mission District\": 11,\n        \"Bayview\": 18,\n        \"Pacific Heights\": 12,\n        \"Russian Hill\": 17,\n        \"Fisherman's Wharf\": 23\n    },\n    \"Mission District\": {\n        \"Haight-Ashbury\": 12,\n        \"Bayview\": 15,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 15,\n        \"Fisherman's Wharf\": 22\n    },\n    \"Bayview\": {\n        \"Haight-Ashbury\": 19,\n        \"Mission District\": 13,\n        \"Pacific Heights\": 23,\n        \"Russian Hill\": 23,\n        \"Fisherman's Wharf\": 25\n    },\n    \"Pacific Heights\": {\n        \"Haight-Ashbury\": 11,\n        \"Mission District\": 15,\n        \"Bayview\": 22,\n        \"Russian Hill\": 7,\n        \"Fisherman's Wharf\": 13\n    },\n    \"Russian Hill\": {\n        \"Haight-Ashbury\": 17,\n        \"Mission District\": 16,\n        \"Bayview\": 23,\n        \"Pacific Heights\": 7,\n        \"Fisherman's Wharf\": 7\n    },\n    \"Fisherman's Wharf\": {\n        \"Haight-Ashbury\": 22,\n        \"Mission District\": 22,\n        \"Bayview\": 26,\n        \"Pacific Heights\": 12,\n        \"Russian Hill\": 7\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"Stephanie\": {\n        \"location\": \"Mission District\",\n        \"available_start\": \"8:15AM\",\n        \"available_end\": \"1:45PM\",\n        \"min_duration\": 90\n    },\n    \"Sandra\": {\n        \"location\": \"Bayview\",\n        \"available_start\": \"1:00PM\",\n        \"available_end\": \"7:30PM\",\n        \"min_duration\": 15\n    },\n    \"Richard\": {\n        \"location\": \"Pacific Heights\",\n        \"available_start\": \"7:15AM\",\n        \"available_end\": \"10:15AM\",\n        \"min_duration\": 75\n    },\n    \"Brian\": {\n        \"location\": \"Russian Hill\",\n        \"available_start\": \"12:15PM\",\n        \"available_end\": \"4:00PM\",\n        \"min_duration\": 120\n    },\n    \"Jason\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"available_start\": \"8:30AM\",\n        \"available_end\": \"5:45PM\",\n        \"min_duration\": 60\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    available_start = time_to_minutes(friend[\"available_start\"])\n    available_end = time_to_minutes(friend[\"available_end\"])\n    travel_time = travel_times[current_location][friend[\"location\"]]\n    arrival_time = current_time + travel_time\n    \n    if arrival_time > available_end:\n        return None\n    \n    start_time = max(arrival_time, available_start)\n    end_time = min(available_end, start_time + friend[\"min_duration\"])\n    \n    if end_time - start_time >= friend[\"min_duration\"]:\n        return {\n            \"start_time\": start_time,\n            \"end_time\": end_time,\n            \"travel_time\": travel_time,\n            \"location\": friend[\"location\"]\n        }\n    return None\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Haight-Ashbury\"\n    schedule = []\n    met_friends = set()\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": minutes_to_time(current_time)\n    })\n    \n    for friend in order:\n        meeting = can_meet_friend(current_time, friend, current_location)\n        if meeting is None:\n            continue\n        \n        # Add travel action\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": meeting[\"travel_time\"],\n            \"time\": minutes_to_time(current_time),\n            \"to\": meeting[\"location\"]\n        })\n        \n        current_time += meeting[\"travel_time\"]\n        current_location = meeting[\"location\"]\n        \n        # Check if we need to wait\n        if current_time < meeting[\"start_time\"]:\n            wait_time = meeting[\"start_time\"] - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_time\n            })\n            current_time = meeting[\"start_time\"]\n        \n        # Add meeting action\n        meeting_duration = meeting[\"end_time\"] - meeting[\"start_time\"]\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": meeting_duration,\n            \"time\": minutes_to_time(current_time),\n            \"with\": friend\n        })\n        current_time = meeting[\"end_time\"]\n        met_friends.add(friend)\n    \n    return len(met_friends), schedule\n\ndef find_best_schedule():\n    best_count = 0\n    best_schedule = []\n    \n    # Try all possible permutations of 3 friends (since meeting all 5 is impossible)\n    for perm in permutations(friends.keys(), 3):\n        count, schedule = evaluate_schedule(perm)\n        if count > best_count:\n            best_count = count\n            best_schedule = schedule\n        elif count == best_count and len(schedule) > 0:\n            # Prefer schedules that end later (more time utilized)\n            current_end_time = time_to_minutes(best_schedule[-1][\"time\"]) + best_schedule[-1].get(\"duration\", 0)\n            new_end_time = time_to_minutes(schedule[-1][\"time\"]) + schedule[-1].get(\"duration\", 0)\n            if new_end_time > current_end_time:\n                best_schedule = schedule\n    \n    return best_schedule\n\nbest_schedule = find_best_schedule()\noutput = {\"schedule\": best_schedule}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_482"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Rebecca",
            "start_time": "9:10AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "11:00AM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Karen",
            "start_time": "1:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Brian",
            "start_time": "3:00PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "3:40PM",
            "end_time": "5:40PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Rebecca",
            "start_time": "9:10AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "11:00AM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Karen",
            "start_time": "1:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Brian",
            "start_time": "3:00PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "3:40PM",
            "end_time": "5:40PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary: from_location -> to_location -> minutes\ntravel_times = {\n    \"Financial District\": {\n        \"Golden Gate Park\": 23,\n        \"Chinatown\": 5,\n        \"Union Square\": 9,\n        \"Fisherman's Wharf\": 10,\n        \"Pacific Heights\": 13,\n        \"North Beach\": 7\n    },\n    \"Golden Gate Park\": {\n        \"Financial District\": 26,\n        \"Chinatown\": 23,\n        \"Union Square\": 22,\n        \"Fisherman's Wharf\": 24,\n        \"Pacific Heights\": 16,\n        \"North Beach\": 24\n    },\n    \"Chinatown\": {\n        \"Financial District\": 5,\n        \"Golden Gate Park\": 23,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 8,\n        \"Pacific Heights\": 10,\n        \"North Beach\": 3\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Golden Gate Park\": 22,\n        \"Chinatown\": 7,\n        \"Fisherman's Wharf\": 15,\n        \"Pacific Heights\": 15,\n        \"North Beach\": 10\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Golden Gate Park\": 25,\n        \"Chinatown\": 12,\n        \"Union Square\": 13,\n        \"Pacific Heights\": 12,\n        \"North Beach\": 6\n    },\n    \"Pacific Heights\": {\n        \"Financial District\": 13,\n        \"Golden Gate Park\": 15,\n        \"Chinatown\": 11,\n        \"Union Square\": 12,\n        \"Fisherman's Wharf\": 13,\n        \"North Beach\": 9\n    },\n    \"North Beach\": {\n        \"Financial District\": 8,\n        \"Golden Gate Park\": 22,\n        \"Chinatown\": 6,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 5,\n        \"Pacific Heights\": 8\n    }\n}\n\n# Friends' availability\nfriends = {\n    \"Stephanie\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": time_to_minutes(\"11:00AM\"),\n        \"end\": time_to_minutes(\"3:00PM\"),\n        \"duration\": 105\n    },\n    \"Karen\": {\n        \"location\": \"Chinatown\",\n        \"start\": time_to_minutes(\"1:45PM\"),\n        \"end\": time_to_minutes(\"4:30PM\"),\n        \"duration\": 15\n    },\n    \"Brian\": {\n        \"location\": \"Union Square\",\n        \"start\": time_to_minutes(\"3:00PM\"),\n        \"end\": time_to_minutes(\"5:15PM\"),\n        \"duration\": 30\n    },\n    \"Rebecca\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"start\": time_to_minutes(\"8:00AM\"),\n        \"end\": time_to_minutes(\"11:15AM\"),\n        \"duration\": 30\n    },\n    \"Joseph\": {\n        \"location\": \"Pacific Heights\",\n        \"start\": time_to_minutes(\"8:15AM\"),\n        \"end\": time_to_minutes(\"9:30AM\"),\n        \"duration\": 60\n    },\n    \"Steven\": {\n        \"location\": \"North Beach\",\n        \"start\": time_to_minutes(\"2:30PM\"),\n        \"end\": time_to_minutes(\"8:45PM\"),\n        \"duration\": 120\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Financial District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        location = friend_data[\"location\"]\n        start_window = friend_data[\"start\"]\n        end_window = friend_data[\"end\"]\n        duration = friend_data[\"duration\"]\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][location]\n        arrival_time = current_time + travel_duration\n        \n        # Check if we can meet the friend\n        meet_start = max(arrival_time, start_window)\n        meet_end = meet_start + duration\n        \n        if meet_end <= end_window:\n            # Add travel action\n            if travel_duration > 0:\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_duration,\n                    \"time\": minutes_to_time(current_time),\n                    \"to\": location\n                })\n            \n            # Add wait action if needed\n            if arrival_time < start_window:\n                wait_duration = start_window - arrival_time\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": location,\n                    \"time\": minutes_to_time(arrival_time),\n                    \"duration\": wait_duration\n                })\n                arrival_time = start_window\n            \n            # Add meet action\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"duration\": duration,\n                \"time\": minutes_to_time(meet_start)\n            })\n            \n            met_friends.add(friend)\n            current_time = meet_end\n            current_location = location\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of meeting friends\nall_friends = list(friends.keys())\nbest_schedule = None\nbest_count = 0\n\n# Try all permutations (but limit to reasonable number for performance)\nfor order in permutations(all_friends):\n    schedule, count = calculate_schedule(order)\n    if count > best_count:\n        best_count = count\n        best_schedule = schedule\n    if best_count == len(all_friends):\n        break\n\n# Output the best schedule found\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_502"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Brian",
            "start_time": "4:00PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Sarah",
            "start_time": "5:30PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Jeffrey",
            "start_time": "6:22PM",
            "end_time": "7:37PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Sarah",
            "start_time": "4:00PM",
            "end_time": "5:00PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Jeffrey",
            "start_time": "5:07PM",
            "end_time": "6:22PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    hour = time.hour\n    minute = time.minute\n    period = 'AM' if hour < 12 else 'PM'\n    if hour > 12:\n        hour -= 12\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef str_to_time(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n        hour = int(time_str.split(':')[0].split('AM')[0])\n    else:\n        period = 'PM'\n        hour = int(time_str.split(':')[0].split('PM')[0])\n    minute = int(time_str.split(':')[1].split(period)[0])\n    if period == 'PM' and hour != 12:\n        hour += 12\n    elif period == 'AM' and hour == 12:\n        hour = 0\n    return datetime(1, 1, 1, hour, minute)\n\ndef compute_schedule():\n    travel_times = {\n        ('Sunset District', 'North Beach'): 29,\n        ('Sunset District', 'Union Square'): 30,\n        ('Sunset District', 'Alamo Square'): 17,\n        ('North Beach', 'Sunset District'): 27,\n        ('North Beach', 'Union Square'): 7,\n        ('North Beach', 'Alamo Square'): 16,\n        ('Union Square', 'Sunset District'): 26,\n        ('Union Square', 'North Beach'): 10,\n        ('Union Square', 'Alamo Square'): 15,\n        ('Alamo Square', 'Sunset District'): 16,\n        ('Alamo Square', 'North Beach'): 15,\n        ('Alamo Square', 'Union Square'): 14,\n    }\n\n    current_time = str_to_time('9:00AM')\n    current_location = 'Sunset District'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": time_to_str(current_time)}]\n\n    # Friends' availability\n    friends = [\n        {'name': 'Sarah', 'location': 'North Beach', 'start': str_to_time('4:00PM'), 'end': str_to_time('6:15PM'), 'duration': 60},\n        {'name': 'Jeffrey', 'location': 'Union Square', 'start': str_to_time('3:00PM'), 'end': str_to_time('10:00PM'), 'duration': 75},\n        {'name': 'Brian', 'location': 'Alamo Square', 'start': str_to_time('4:00PM'), 'end': str_to_time('5:30PM'), 'duration': 75}\n    ]\n\n    # Try to meet Brian first since his window is the tightest\n    brian = friends[2]\n    travel_time = travel_times[(current_location, brian['location'])]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    if arrival_time < brian['start']:\n        wait_time = (brian['start'] - arrival_time).total_seconds() / 60\n        schedule.append({\"action\": \"travel\", \"location\": brian['location'], \"duration\": travel_time, \"time\": time_to_str(current_time), \"to\": brian['location']})\n        current_time = arrival_time\n        schedule.append({\"action\": \"wait\", \"location\": brian['location'], \"time\": time_to_str(current_time)})\n        current_time = brian['start']\n    else:\n        schedule.append({\"action\": \"travel\", \"location\": brian['location'], \"duration\": travel_time, \"time\": time_to_str(current_time), \"to\": brian['location']})\n        current_time = arrival_time\n\n    meet_end = current_time + timedelta(minutes=brian['duration'])\n    if meet_end > brian['end']:\n        meet_end = brian['end']\n        actual_duration = (meet_end - current_time).total_seconds() / 60\n    else:\n        actual_duration = brian['duration']\n    schedule.append({\"action\": \"meet\", \"location\": brian['location'], \"duration\": actual_duration, \"time\": time_to_str(current_time)})\n    current_time = meet_end\n    current_location = brian['location']\n\n    # Next, try to meet Sarah\n    sarah = friends[0]\n    travel_time = travel_times[(current_location, sarah['location'])]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    if arrival_time < sarah['start']:\n        wait_time = (sarah['start'] - arrival_time).total_seconds() / 60\n        schedule.append({\"action\": \"travel\", \"location\": sarah['location'], \"duration\": travel_time, \"time\": time_to_str(current_time), \"to\": sarah['location']})\n        current_time = arrival_time\n        schedule.append({\"action\": \"wait\", \"location\": sarah['location'], \"time\": time_to_str(current_time)})\n        current_time = sarah['start']\n    else:\n        schedule.append({\"action\": \"travel\", \"location\": sarah['location'], \"duration\": travel_time, \"time\": time_to_str(current_time), \"to\": sarah['location']})\n        current_time = arrival_time\n\n    meet_end = current_time + timedelta(minutes=sarah['duration'])\n    if meet_end > sarah['end']:\n        meet_end = sarah['end']\n        actual_duration = (meet_end - current_time).total_seconds() / 60\n    else:\n        actual_duration = sarah['duration']\n    schedule.append({\"action\": \"meet\", \"location\": sarah['location'], \"duration\": actual_duration, \"time\": time_to_str(current_time)})\n    current_time = meet_end\n    current_location = sarah['location']\n\n    # Finally, try to meet Jeffrey\n    jeffrey = friends[1]\n    travel_time = travel_times[(current_location, jeffrey['location'])]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    if arrival_time < jeffrey['start']:\n        wait_time = (jeffrey['start'] - arrival_time).total_seconds() / 60\n        schedule.append({\"action\": \"travel\", \"location\": jeffrey['location'], \"duration\": travel_time, \"time\": time_to_str(current_time), \"to\": jeffrey['location']})\n        current_time = arrival_time\n        schedule.append({\"action\": \"wait\", \"location\": jeffrey['location'], \"time\": time_to_str(current_time)})\n        current_time = jeffrey['start']\n    else:\n        schedule.append({\"action\": \"travel\", \"location\": jeffrey['location'], \"duration\": travel_time, \"time\": time_to_str(current_time), \"to\": jeffrey['location']})\n        current_time = arrival_time\n\n    meet_end = current_time + timedelta(minutes=jeffrey['duration'])\n    if meet_end > jeffrey['end']:\n        meet_end = jeffrey['end']\n        actual_duration = (meet_end - current_time).total_seconds() / 60\n    else:\n        actual_duration = jeffrey['duration']\n    schedule.append({\"action\": \"meet\", \"location\": jeffrey['location'], \"duration\": actual_duration, \"time\": time_to_str(current_time)})\n    current_time = meet_end\n\n    return schedule\n\nschedule = compute_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_225"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Daniel",
            "start_time": "9:11AM",
            "end_time": "9:26AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Margaret",
            "start_time": "9:45AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Charles",
            "start_time": "6:00PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "8:30PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Margaret",
            "start_time": "9:24AM",
            "end_time": "9:54AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Daniel",
            "start_time": "10:15AM",
            "end_time": "10:30AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Charles",
            "start_time": "6:00PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "8:30PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    minutes = time_to_minutes(time_str)\n    new_minutes = minutes + minutes_to_add\n    return minutes_to_time(new_minutes)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        ('Sunset District', 'Alamo Square'): 17,\n        ('Sunset District', 'Russian Hill'): 24,\n        ('Sunset District', 'Golden Gate Park'): 11,\n        ('Sunset District', 'Mission District'): 24,\n        ('Alamo Square', 'Sunset District'): 16,\n        ('Alamo Square', 'Russian Hill'): 13,\n        ('Alamo Square', 'Golden Gate Park'): 9,\n        ('Alamo Square', 'Mission District'): 10,\n        ('Russian Hill', 'Sunset District'): 23,\n        ('Russian Hill', 'Alamo Square'): 15,\n        ('Russian Hill', 'Golden Gate Park'): 21,\n        ('Russian Hill', 'Mission District'): 16,\n        ('Golden Gate Park', 'Sunset District'): 10,\n        ('Golden Gate Park', 'Alamo Square'): 10,\n        ('Golden Gate Park', 'Russian Hill'): 19,\n        ('Golden Gate Park', 'Mission District'): 17,\n        ('Mission District', 'Sunset District'): 24,\n        ('Mission District', 'Alamo Square'): 11,\n        ('Mission District', 'Russian Hill'): 15,\n        ('Mission District', 'Golden Gate Park'): 17,\n    }\n    return travel_times.get((from_loc, to_loc), 0)\n\ndef optimize_schedule():\n    friends = [\n        {'name': 'Charles', 'location': 'Alamo Square', 'start': '6:00PM', 'end': '8:45PM', 'duration': 90},\n        {'name': 'Margaret', 'location': 'Russian Hill', 'start': '9:00AM', 'end': '4:00PM', 'duration': 30},\n        {'name': 'Daniel', 'location': 'Golden Gate Park', 'start': '8:00AM', 'end': '1:30PM', 'duration': 15},\n        {'name': 'Stephanie', 'location': 'Mission District', 'start': '8:30PM', 'end': '10:00PM', 'duration': 90}\n    ]\n    \n    current_location = 'Sunset District'\n    current_time = '9:00AM'\n    schedule = [{'action': 'start', 'location': current_location, 'time': current_time}]\n    \n    # Sort friends by their availability end time (earlier first)\n    friends_sorted = sorted(friends, key=lambda x: time_to_minutes(x['end']))\n    \n    for friend in friends_sorted:\n        travel_time = get_travel_time(current_location, friend['location'])\n        arrival_time = add_minutes_to_time(current_time, travel_time)\n        \n        # Check if we can meet the friend\n        if time_to_minutes(arrival_time) <= time_to_minutes(friend['end']) - friend['duration']:\n            meet_start = max(time_to_minutes(arrival_time), time_to_minutes(friend['start']))\n            meet_start_time = minutes_to_time(meet_start)\n            \n            # Add travel action\n            if travel_time > 0:\n                schedule.append({\n                    'action': 'travel',\n                    'location': current_location,\n                    'duration': travel_time,\n                    'time': current_time,\n                    'to': friend['location']\n                })\n            \n            # Add wait action if needed\n            if time_to_minutes(arrival_time) < time_to_minutes(friend['start']):\n                wait_duration = time_to_minutes(friend['start']) - time_to_minutes(arrival_time)\n                schedule.append({\n                    'action': 'wait',\n                    'location': friend['location'],\n                    'time': arrival_time\n                })\n                meet_start_time = friend['start']\n            \n            # Add meet action\n            schedule.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'duration': friend['duration'],\n                'time': meet_start_time\n            })\n            \n            # Update current location and time\n            current_location = friend['location']\n            current_time = add_minutes_to_time(meet_start_time, friend['duration'])\n    \n    return schedule\n\nschedule = optimize_schedule()\noutput = {'schedule': schedule}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_372"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Daniel",
            "start_time": "9:12AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Timothy",
            "start_time": "12:00PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Steven",
            "start_time": "6:06PM",
            "end_time": "8:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Elizabeth",
            "start_time": "9:15PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Daniel",
            "start_time": "9:12AM",
            "end_time": "9:27AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Timothy",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Kevin",
            "start_time": "1:41PM",
            "end_time": "2:11PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Betty",
            "start_time": "2:31PM",
            "end_time": "3:01PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Steven",
            "start_time": "4:30PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Lisa",
            "start_time": "7:15PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    \"Mission District\": {\n        \"The Castro\": 7,\n        \"Nob Hill\": 12,\n        \"Presidio\": 25,\n        \"Marina District\": 19,\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 17,\n        \"Chinatown\": 16,\n        \"Richmond District\": 20\n    },\n    \"The Castro\": {\n        \"Mission District\": 7,\n        \"Nob Hill\": 16,\n        \"Presidio\": 20,\n        \"Marina District\": 21,\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 11,\n        \"Chinatown\": 22,\n        \"Richmond District\": 16\n    },\n    \"Nob Hill\": {\n        \"Mission District\": 13,\n        \"The Castro\": 17,\n        \"Presidio\": 17,\n        \"Marina District\": 11,\n        \"Pacific Heights\": 8,\n        \"Golden Gate Park\": 17,\n        \"Chinatown\": 6,\n        \"Richmond District\": 14\n    },\n    \"Presidio\": {\n        \"Mission District\": 26,\n        \"The Castro\": 21,\n        \"Nob Hill\": 18,\n        \"Marina District\": 11,\n        \"Pacific Heights\": 11,\n        \"Golden Gate Park\": 12,\n        \"Chinatown\": 21,\n        \"Richmond District\": 7\n    },\n    \"Marina District\": {\n        \"Mission District\": 20,\n        \"The Castro\": 22,\n        \"Nob Hill\": 12,\n        \"Presidio\": 10,\n        \"Pacific Heights\": 7,\n        \"Golden Gate Park\": 18,\n        \"Chinatown\": 15,\n        \"Richmond District\": 11\n    },\n    \"Pacific Heights\": {\n        \"Mission District\": 15,\n        \"The Castro\": 16,\n        \"Nob Hill\": 8,\n        \"Presidio\": 11,\n        \"Marina District\": 6,\n        \"Golden Gate Park\": 15,\n        \"Chinatown\": 11,\n        \"Richmond District\": 12\n    },\n    \"Golden Gate Park\": {\n        \"Mission District\": 17,\n        \"The Castro\": 13,\n        \"Nob Hill\": 20,\n        \"Presidio\": 11,\n        \"Marina District\": 16,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 23,\n        \"Richmond District\": 7\n    },\n    \"Chinatown\": {\n        \"Mission District\": 17,\n        \"The Castro\": 22,\n        \"Nob Hill\": 9,\n        \"Presidio\": 19,\n        \"Marina District\": 12,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 23,\n        \"Richmond District\": 20\n    },\n    \"Richmond District\": {\n        \"Mission District\": 20,\n        \"The Castro\": 16,\n        \"Nob Hill\": 17,\n        \"Presidio\": 7,\n        \"Marina District\": 9,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9,\n        \"Chinatown\": 20\n    }\n}\n\n# Friend data\nfriends = [\n    {\"name\": \"Lisa\", \"location\": \"The Castro\", \"start\": \"7:15PM\", \"end\": \"9:15PM\", \"min_duration\": 120},\n    {\"name\": \"Daniel\", \"location\": \"Nob Hill\", \"start\": \"8:15AM\", \"end\": \"11:00AM\", \"min_duration\": 15},\n    {\"name\": \"Elizabeth\", \"location\": \"Presidio\", \"start\": \"9:15PM\", \"end\": \"10:15PM\", \"min_duration\": 45},\n    {\"name\": \"Steven\", \"location\": \"Marina District\", \"start\": \"4:30PM\", \"end\": \"8:45PM\", \"min_duration\": 90},\n    {\"name\": \"Timothy\", \"location\": \"Pacific Heights\", \"start\": \"12:00PM\", \"end\": \"6:00PM\", \"min_duration\": 90},\n    {\"name\": \"Ashley\", \"location\": \"Golden Gate Park\", \"start\": \"8:45PM\", \"end\": \"9:45PM\", \"min_duration\": 60},\n    {\"name\": \"Kevin\", \"location\": \"Chinatown\", \"start\": \"12:00PM\", \"end\": \"7:00PM\", \"min_duration\": 30},\n    {\"name\": \"Betty\", \"location\": \"Richmond District\", \"start\": \"1:15PM\", \"end\": \"3:45PM\", \"min_duration\": 30}\n]\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet(friend, arrival_time, departure_time):\n    friend_start = time_to_minutes(friend[\"start\"])\n    friend_end = time_to_minutes(friend[\"end\"])\n    min_duration = friend[\"min_duration\"]\n    \n    start = max(arrival_time, friend_start)\n    end = min(departure_time, friend_end)\n    \n    if end - start >= min_duration:\n        return start, end\n    return None\n\ndef generate_schedule(order):\n    current_location = \"Mission District\"\n    current_time = time_to_minutes(\"9:00AM\")\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        if friend[\"name\"] in met_friends:\n            continue\n        \n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        \n        meeting = can_meet(friend, arrival_time, time_to_minutes(friend[\"end\"]))\n        if meeting:\n            start_meet, end_meet = meeting\n            if current_time < arrival_time:\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_time,\n                    \"time\": minutes_to_time(current_time),\n                    \"to\": friend[\"location\"]\n                })\n            elif current_time > arrival_time:\n                wait_time = start_meet - current_time\n                if wait_time > 0:\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": current_location,\n                        \"time\": minutes_to_time(current_time)\n                    })\n            \n            meet_duration = end_meet - start_meet\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"duration\": meet_duration,\n                \"time\": minutes_to_time(start_meet)\n            })\n            met_friends.add(friend[\"name\"])\n            current_location = friend[\"location\"]\n            current_time = end_meet\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    friend_names = [f[\"name\"] for f in friends]\n    best_schedule = None\n    best_count = 0\n    \n    # Try all permutations of friends (limited to avoid performance issues)\n    for perm in permutations(friend_names[:5]):  # Limiting to first 5 for performance\n        schedule, count = generate_schedule(perm)\n        if count > best_count:\n            best_count = count\n            best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nprint(json.dumps({\"schedule\": optimal_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_701"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joshua",
            "start_time": "9:20AM",
            "end_time": "11:05AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "David",
            "start_time": "11:25AM",
            "end_time": "11:55AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Stephanie",
            "start_time": "3:30PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kimberly",
            "start_time": "4:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Lisa",
            "start_time": "6:07PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Laura",
            "start_time": "7:02PM",
            "end_time": "8:32PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joshua",
            "start_time": "9:20AM",
            "end_time": "11:05AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "David",
            "start_time": "11:25AM",
            "end_time": "11:55AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Stephanie",
            "start_time": "3:30PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kimberly",
            "start_time": "4:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Lisa",
            "start_time": "6:07PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Timothy",
            "start_time": "7:45PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        ('The Castro', 'Marina District'): 21,\n        ('The Castro', 'Presidio'): 20,\n        ('The Castro', 'North Beach'): 20,\n        ('The Castro', 'Embarcadero'): 22,\n        ('The Castro', 'Haight-Ashbury'): 6,\n        ('The Castro', 'Golden Gate Park'): 11,\n        ('The Castro', 'Richmond District'): 16,\n        ('The Castro', 'Alamo Square'): 8,\n        ('The Castro', 'Financial District'): 21,\n        ('The Castro', 'Sunset District'): 17,\n        ('Marina District', 'The Castro'): 22,\n        ('Marina District', 'Presidio'): 10,\n        ('Marina District', 'North Beach'): 11,\n        ('Marina District', 'Embarcadero'): 14,\n        ('Marina District', 'Haight-Ashbury'): 16,\n        ('Marina District', 'Golden Gate Park'): 18,\n        ('Marina District', 'Richmond District'): 11,\n        ('Marina District', 'Alamo Square'): 15,\n        ('Marina District', 'Financial District'): 17,\n        ('Marina District', 'Sunset District'): 19,\n        ('Presidio', 'The Castro'): 21,\n        ('Presidio', 'Marina District'): 11,\n        ('Presidio', 'North Beach'): 18,\n        ('Presidio', 'Embarcadero'): 20,\n        ('Presidio', 'Haight-Ashbury'): 15,\n        ('Presidio', 'Golden Gate Park'): 12,\n        ('Presidio', 'Richmond District'): 7,\n        ('Presidio', 'Alamo Square'): 19,\n        ('Presidio', 'Financial District'): 23,\n        ('Presidio', 'Sunset District'): 15,\n        ('North Beach', 'The Castro'): 23,\n        ('North Beach', 'Marina District'): 9,\n        ('North Beach', 'Presidio'): 17,\n        ('North Beach', 'Embarcadero'): 6,\n        ('North Beach', 'Haight-Ashbury'): 18,\n        ('North Beach', 'Golden Gate Park'): 22,\n        ('North Beach', 'Richmond District'): 18,\n        ('North Beach', 'Alamo Square'): 16,\n        ('North Beach', 'Financial District'): 8,\n        ('North Beach', 'Sunset District'): 27,\n        ('Embarcadero', 'The Castro'): 25,\n        ('Embarcadero', 'Marina District'): 12,\n        ('Embarcadero', 'Presidio'): 20,\n        ('Embarcadero', 'North Beach'): 5,\n        ('Embarcadero', 'Haight-Ashbury'): 21,\n        ('Embarcadero', 'Golden Gate Park'): 25,\n        ('Embarcadero', 'Richmond District'): 21,\n        ('Embarcadero', 'Alamo Square'): 19,\n        ('Embarcadero', 'Financial District'): 5,\n        ('Embarcadero', 'Sunset District'): 30,\n        ('Haight-Ashbury', 'The Castro'): 6,\n        ('Haight-Ashbury', 'Marina District'): 17,\n        ('Haight-Ashbury', 'Presidio'): 15,\n        ('Haight-Ashbury', 'North Beach'): 19,\n        ('Haight-Ashbury', 'Embarcadero'): 20,\n        ('Haight-Ashbury', 'Golden Gate Park'): 7,\n        ('Haight-Ashbury', 'Richmond District'): 10,\n        ('Haight-Ashbury', 'Alamo Square'): 5,\n        ('Haight-Ashbury', 'Financial District'): 21,\n        ('Haight-Ashbury', 'Sunset District'): 15,\n        ('Golden Gate Park', 'The Castro'): 13,\n        ('Golden Gate Park', 'Marina District'): 16,\n        ('Golden Gate Park', 'Presidio'): 11,\n        ('Golden Gate Park', 'North Beach'): 23,\n        ('Golden Gate Park', 'Embarcadero'): 25,\n        ('Golden Gate Park', 'Haight-Ashbury'): 7,\n        ('Golden Gate Park', 'Richmond District'): 7,\n        ('Golden Gate Park', 'Alamo Square'): 9,\n        ('Golden Gate Park', 'Financial District'): 26,\n        ('Golden Gate Park', 'Sunset District'): 10,\n        ('Richmond District', 'The Castro'): 16,\n        ('Richmond District', 'Marina District'): 9,\n        ('Richmond District', 'Presidio'): 7,\n        ('Richmond District', 'North Beach'): 17,\n        ('Richmond District', 'Embarcadero'): 19,\n        ('Richmond District', 'Haight-Ashbury'): 10,\n        ('Richmond District', 'Golden Gate Park'): 9,\n        ('Richmond District', 'Alamo Square'): 13,\n        ('Richmond District', 'Financial District'): 22,\n        ('Richmond District', 'Sunset District'): 11,\n        ('Alamo Square', 'The Castro'): 8,\n        ('Alamo Square', 'Marina District'): 15,\n        ('Alamo Square', 'Presidio'): 17,\n        ('Alamo Square', 'North Beach'): 15,\n        ('Alamo Square', 'Embarcadero'): 16,\n        ('Alamo Square', 'Haight-Ashbury'): 5,\n        ('Alamo Square', 'Golden Gate Park'): 9,\n        ('Alamo Square', 'Richmond District'): 11,\n        ('Alamo Square', 'Financial District'): 17,\n        ('Alamo Square', 'Sunset District'): 16,\n        ('Financial District', 'The Castro'): 20,\n        ('Financial District', 'Marina District'): 15,\n        ('Financial District', 'Presidio'): 22,\n        ('Financial District', 'North Beach'): 7,\n        ('Financial District', 'Embarcadero'): 4,\n        ('Financial District', 'Haight-Ashbury'): 19,\n        ('Financial District', 'Golden Gate Park'): 23,\n        ('Financial District', 'Richmond District'): 21,\n        ('Financial District', 'Alamo Square'): 17,\n        ('Financial District', 'Sunset District'): 30,\n        ('Sunset District', 'The Castro'): 17,\n        ('Sunset District', 'Marina District'): 21,\n        ('Sunset District', 'Presidio'): 16,\n        ('Sunset District', 'North Beach'): 28,\n        ('Sunset District', 'Embarcadero'): 30,\n        ('Sunset District', 'Haight-Ashbury'): 15,\n        ('Sunset District', 'Golden Gate Park'): 11,\n        ('Sunset District', 'Richmond District'): 12,\n        ('Sunset District', 'Alamo Square'): 17,\n        ('Sunset District', 'Financial District'): 30,\n    }\n    return travel_times.get((from_loc, to_loc), 0)\n\ndef main():\n    current_time = parse_time('9:00AM')\n    current_location = 'The Castro'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n    \n    # Define all meetings with their constraints\n    meetings = [\n        {\"name\": \"Ronald\", \"location\": \"Richmond District\", \"start\": \"8:00AM\", \"end\": \"9:30AM\", \"duration\": 90},\n        {\"name\": \"Joshua\", \"location\": \"Presidio\", \"start\": \"8:30AM\", \"end\": \"1:15PM\", \"duration\": 105},\n        {\"name\": \"David\", \"location\": \"Embarcadero\", \"start\": \"10:45AM\", \"end\": \"12:30PM\", \"duration\": 30},\n        {\"name\": \"Stephanie\", \"location\": \"Alamo Square\", \"start\": \"3:30PM\", \"end\": \"4:30PM\", \"duration\": 30},\n        {\"name\": \"Helen\", \"location\": \"Financial District\", \"start\": \"5:30PM\", \"end\": \"6:30PM\", \"duration\": 45},\n        {\"name\": \"Kimberly\", \"location\": \"Haight-Ashbury\", \"start\": \"4:45PM\", \"end\": \"9:30PM\", \"duration\": 75},\n        {\"name\": \"Lisa\", \"location\": \"Golden Gate Park\", \"start\": \"5:30PM\", \"end\": \"9:45PM\", \"duration\": 45},\n        {\"name\": \"Laura\", \"location\": \"Sunset District\", \"start\": \"5:45PM\", \"end\": \"9:15PM\", \"duration\": 90},\n        {\"name\": \"Elizabeth\", \"location\": \"Marina District\", \"start\": \"7:00PM\", \"end\": \"8:45PM\", \"duration\": 105},\n        {\"name\": \"Timothy\", \"location\": \"North Beach\", \"start\": \"7:45PM\", \"end\": \"10:00PM\", \"duration\": 90},\n    ]\n    \n    # Sort meetings by start time\n    meetings.sort(key=lambda x: parse_time(x[\"start\"]))\n    \n    for meeting in meetings:\n        meeting_start = parse_time(meeting[\"start\"])\n        meeting_end = parse_time(meeting[\"end\"])\n        travel_time = get_travel_time(current_location, meeting[\"location\"])\n        \n        # Calculate arrival time\n        arrival_time = add_minutes(current_time, travel_time)\n        \n        # If we arrive before meeting starts, wait\n        if arrival_time < meeting_start:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": format_time(current_time),\n                \"to\": meeting[\"location\"]\n            })\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": meeting[\"location\"],\n                \"time\": format_time(arrival_time)\n            })\n            current_time = meeting_start\n        else:\n            # If we arrive after meeting starts, skip if we can't meet for required duration\n            if add_minutes(arrival_time, meeting[\"duration\"]) > meeting_end:\n                continue\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": format_time(current_time),\n                \"to\": meeting[\"location\"]\n            })\n            current_time = arrival_time\n        \n        # Schedule the meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"duration\": meeting[\"duration\"],\n            \"time\": format_time(current_time)\n        })\n        current_time = add_minutes(current_time, meeting[\"duration\"])\n        current_location = meeting[\"location\"]\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_962"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Joshua",
            "start_time": "8:45PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Joshua",
            "start_time": "8:45PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time = parse_time(\"9:00AM\")\n    joshua_start = parse_time(\"8:45PM\")\n    joshua_end = parse_time(\"9:45PM\")\n    min_meet_duration = 15  # minutes\n    travel_to_park = 11  # minutes\n    travel_from_park = 10  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_from_sunset = joshua_end - timedelta(minutes=min_meet_duration) - timedelta(minutes=travel_to_park)\n    earliest_arrival_at_park = arrival_time + timedelta(minutes=travel_to_park)\n\n    # Determine if meeting is possible\n    if earliest_arrival_at_park <= (joshua_end - timedelta(minutes=min_meet_duration)):\n        # Meeting is possible\n        meet_start = max(earliest_arrival_at_park, joshua_start)\n        meet_end = min(meet_start + timedelta(minutes=min_meet_duration), joshua_end)\n        actual_meet_duration = (meet_end - meet_start).total_seconds() / 60\n\n        if actual_meet_duration >= min_meet_duration:\n            # Build schedule\n            schedule = [\n                {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)}\n            ]\n\n            # Check if we need to wait before traveling\n            if arrival_time < latest_departure_from_sunset:\n                # Travel directly\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": \"Sunset District\",\n                    \"duration\": travel_to_park,\n                    \"time\": format_time(arrival_time),\n                    \"to\": \"Golden Gate Park\"\n                })\n                arrival_at_park = arrival_time + timedelta(minutes=travel_to_park)\n            else:\n                # Need to wait before traveling\n                wait_until = latest_departure_from_sunset\n                wait_duration = (wait_until - arrival_time).total_seconds() / 60\n                if wait_duration > 0:\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": \"Sunset District\",\n                        \"time\": format_time(arrival_time)\n                    })\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": \"Sunset District\",\n                    \"duration\": travel_to_park,\n                    \"time\": format_time(wait_until),\n                    \"to\": \"Golden Gate Park\"\n                })\n                arrival_at_park = wait_until + timedelta(minutes=travel_to_park)\n\n            # Check if we need to wait before meeting\n            if arrival_at_park < joshua_start:\n                wait_duration = (joshua_start - arrival_at_park).total_seconds() / 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Golden Gate Park\",\n                    \"time\": format_time(arrival_at_park)\n                })\n\n            # Add meeting\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Golden Gate Park\",\n                \"duration\": actual_meet_duration,\n                \"time\": format_time(meet_start)\n            })\n\n            # Return home\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Golden Gate Park\",\n                \"duration\": travel_from_park,\n                \"time\": format_time(meet_end),\n                \"to\": \"Sunset District\"\n            })\n\n            result = {\"schedule\": schedule}\n        else:\n            result = {\"schedule\": [{\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)}]}\n    else:\n        result = {\"schedule\": [{\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)}]}\n\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_88"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Daniel",
            "start_time": "9:26AM",
            "end_time": "11:11AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Ronald",
            "start_time": "11:27AM",
            "end_time": "12:57PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jessica",
            "start_time": "1:45PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Ashley",
            "start_time": "5:15PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "William",
            "start_time": "7:21PM",
            "end_time": "7:36PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Daniel",
            "start_time": "9:26AM",
            "end_time": "11:11AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Ronald",
            "start_time": "11:27AM",
            "end_time": "12:57PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jessica",
            "start_time": "1:45PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Ashley",
            "start_time": "5:15PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "William",
            "start_time": "7:21PM",
            "end_time": "7:36PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\n# Input parameters\ntravel_times = {\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Presidio', 'Bayview'): 31,\n    ('Presidio', 'Chinatown'): 21,\n    ('Presidio', 'North Beach'): 18,\n    ('Presidio', 'Mission District'): 26,\n    ('Golden Gate Park', 'Presidio'): 11,\n    ('Golden Gate Park', 'Bayview'): 23,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'North Beach'): 24,\n    ('Golden Gate Park', 'Mission District'): 17,\n    ('Bayview', 'Presidio'): 31,\n    ('Bayview', 'Golden Gate Park'): 22,\n    ('Bayview', 'Chinatown'): 18,\n    ('Bayview', 'North Beach'): 21,\n    ('Bayview', 'Mission District'): 13,\n    ('Chinatown', 'Presidio'): 19,\n    ('Chinatown', 'Golden Gate Park'): 23,\n    ('Chinatown', 'Bayview'): 22,\n    ('Chinatown', 'North Beach'): 3,\n    ('Chinatown', 'Mission District'): 18,\n    ('North Beach', 'Presidio'): 17,\n    ('North Beach', 'Golden Gate Park'): 22,\n    ('North Beach', 'Bayview'): 22,\n    ('North Beach', 'Chinatown'): 6,\n    ('North Beach', 'Mission District'): 18,\n    ('Mission District', 'Presidio'): 25,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Mission District', 'Bayview'): 15,\n    ('Mission District', 'Chinatown'): 16,\n    ('Mission District', 'North Beach'): 17\n}\n\nfriends = [\n    {'name': 'Jessica', 'location': 'Golden Gate Park', 'start': '1:45PM', 'end': '3:00PM', 'min_duration': 30},\n    {'name': 'Ashley', 'location': 'Bayview', 'start': '5:15PM', 'end': '8:00PM', 'min_duration': 105},\n    {'name': 'Ronald', 'location': 'Chinatown', 'start': '7:15AM', 'end': '2:45PM', 'min_duration': 90},\n    {'name': 'William', 'location': 'North Beach', 'start': '1:15PM', 'end': '8:15PM', 'min_duration': 15},\n    {'name': 'Daniel', 'location': 'Mission District', 'start': '7:00AM', 'end': '11:15AM', 'min_duration': 105}\n]\n\ncurrent_time = parse_time('9:00AM')\ncurrent_location = 'Presidio'\nschedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n# Sort friends by end time to prioritize those with earlier end times\nfriends_sorted = sorted(friends, key=lambda x: parse_time(x['end']))\n\nfor friend in friends_sorted:\n    friend_start = parse_time(friend['start'])\n    friend_end = parse_time(friend['end'])\n    travel_duration = travel_times[(current_location, friend['location'])]\n    arrival_time = add_minutes(current_time, travel_duration)\n    \n    # Check if we can meet the friend\n    if arrival_time < friend_end:\n        meet_start = max(arrival_time, friend_start)\n        meet_end = min(add_minutes(meet_start, friend['min_duration']), friend_end)\n        \n        if (meet_end - meet_start).total_seconds() / 60 >= friend['min_duration']:\n            # Add travel action\n            if travel_duration > 0:\n                schedule.append({\n                    'action': 'travel',\n                    'location': current_location,\n                    'duration': travel_duration,\n                    'time': format_time(current_time),\n                    'to': friend['location']\n                })\n            \n            # Add wait action if needed\n            if arrival_time < friend_start:\n                wait_duration = (friend_start - arrival_time).total_seconds() / 60\n                schedule.append({\n                    'action': 'wait',\n                    'location': friend['location'],\n                    'time': format_time(arrival_time),\n                    'duration': wait_duration\n                })\n            \n            # Add meet action\n            schedule.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'duration': friend['min_duration'],\n                'time': format_time(meet_start),\n                'with': friend['name']\n            })\n            \n            current_time = meet_start + timedelta(minutes=friend['min_duration'])\n            current_location = friend['location']\n\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
      "count": "meeting_planning_example_454"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Timothy",
            "start_time": "9:45AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "6:30PM",
            "end_time": "8:00PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Ashley",
            "start_time": "8:30PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Timothy",
            "start_time": "9:45AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "6:30PM",
            "end_time": "8:00PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Ashley",
            "start_time": "8:30PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    minutes = time_to_minutes(time_str)\n    new_minutes = minutes + minutes_to_add\n    return minutes_to_time(new_minutes)\n\ndef generate_schedule():\n    travel_times = {\n        (\"Russian Hill\", \"Nob Hill\"): 5,\n        (\"Russian Hill\", \"Mission District\"): 16,\n        (\"Russian Hill\", \"Embarcadero\"): 8,\n        (\"Nob Hill\", \"Russian Hill\"): 5,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Nob Hill\", \"Embarcadero\"): 9,\n        (\"Mission District\", \"Russian Hill\"): 15,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Mission District\", \"Embarcadero\"): 19,\n        (\"Embarcadero\", \"Russian Hill\"): 8,\n        (\"Embarcadero\", \"Nob Hill\"): 10,\n        (\"Embarcadero\", \"Mission District\"): 20,\n    }\n\n    current_time = \"9:00AM\"\n    current_location = \"Russian Hill\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Meet Timothy at Embarcadero (9:45AM - 5:45PM, min 120 minutes)\n    # Earliest we can meet is after traveling from Russian Hill to Embarcadero (8 mins)\n    arrival_embarcadero = add_minutes_to_time(current_time, travel_times[(current_location, \"Embarcadero\")])\n    timothy_start = \"9:45AM\"\n    timothy_end = \"5:45PM\"\n\n    if time_to_minutes(arrival_embarcadero) < time_to_minutes(timothy_start):\n        wait_time = time_to_minutes(timothy_start) - time_to_minutes(arrival_embarcadero)\n        if wait_time > 0:\n            schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_times[(current_location, \"Embarcadero\")], \"time\": current_time, \"to\": \"Embarcadero\"})\n            schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": arrival_embarcadero})\n            current_time = timothy_start\n            current_location = \"Embarcadero\"\n    else:\n        schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_times[(current_location, \"Embarcadero\")], \"time\": current_time, \"to\": \"Embarcadero\"})\n        current_time = arrival_embarcadero\n        current_location = \"Embarcadero\"\n\n    meet_timothy_duration = 120\n    schedule.append({\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meet_timothy_duration, \"time\": current_time})\n    current_time = add_minutes_to_time(current_time, meet_timothy_duration)\n\n    # After meeting Timothy, try to meet Patricia (6:30PM - 9:45PM, min 90 minutes)\n    # Need to travel from Embarcadero to Nob Hill (10 mins)\n    travel_to_nob_hill = travel_times[(current_location, \"Nob Hill\")]\n    arrival_nob_hill = add_minutes_to_time(current_time, travel_to_nob_hill)\n    patricia_start = \"6:30PM\"\n    patricia_end = \"9:45PM\"\n\n    if time_to_minutes(arrival_nob_hill) < time_to_minutes(patricia_start):\n        wait_time = time_to_minutes(patricia_start) - time_to_minutes(arrival_nob_hill)\n        if wait_time > 0:\n            schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill, \"time\": current_time, \"to\": \"Nob Hill\"})\n            schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": arrival_nob_hill})\n            current_time = patricia_start\n            current_location = \"Nob Hill\"\n    else:\n        if time_to_minutes(arrival_nob_hill) < time_to_minutes(patricia_end):\n            schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill, \"time\": current_time, \"to\": \"Nob Hill\"})\n            current_time = arrival_nob_hill\n            current_location = \"Nob Hill\"\n\n    meet_patricia_duration = 90\n    if time_to_minutes(current_time) + meet_patricia_duration <= time_to_minutes(patricia_end):\n        schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meet_patricia_duration, \"time\": current_time})\n        current_time = add_minutes_to_time(current_time, meet_patricia_duration)\n    else:\n        available_time = time_to_minutes(patricia_end) - time_to_minutes(current_time)\n        if available_time > 0:\n            schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": available_time, \"time\": current_time})\n            current_time = patricia_end\n\n    # After meeting Patricia, try to meet Ashley (8:30PM - 9:15PM, min 45 minutes)\n    # Need to travel from Nob Hill to Mission District (13 mins)\n    travel_to_mission = travel_times[(current_location, \"Mission District\")]\n    arrival_mission = add_minutes_to_time(current_time, travel_to_mission)\n    ashley_start = \"8:30PM\"\n    ashley_end = \"9:15PM\"\n\n    if time_to_minutes(arrival_mission) < time_to_minutes(ashley_start):\n        wait_time = time_to_minutes(ashley_start) - time_to_minutes(arrival_mission)\n        if wait_time > 0:\n            schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_to_mission, \"time\": current_time, \"to\": \"Mission District\"})\n            schedule.append({\"action\": \"wait\", \"location\": \"Mission District\", \"time\": arrival_mission})\n            current_time = ashley_start\n            current_location = \"Mission District\"\n    else:\n        if time_to_minutes(arrival_mission) < time_to_minutes(ashley_end):\n            schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_to_mission, \"time\": current_time, \"to\": \"Mission District\"})\n            current_time = arrival_mission\n            current_location = \"Mission District\"\n\n    meet_ashley_duration = 45\n    if time_to_minutes(current_time) + meet_ashley_duration <= time_to_minutes(ashley_end):\n        schedule.append({\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": meet_ashley_duration, \"time\": current_time})\n        current_time = add_minutes_to_time(current_time, meet_ashley_duration)\n    else:\n        available_time = time_to_minutes(ashley_end) - time_to_minutes(current_time)\n        if available_time > 0:\n            schedule.append({\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": available_time, \"time\": current_time})\n            current_time = ashley_end\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = generate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_272"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Jeffrey",
            "start_time": "9:30AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "12:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mark",
            "start_time": "2:08PM",
            "end_time": "2:23PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Sandra",
            "start_time": "2:43PM",
            "end_time": "2:58PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Carol",
            "start_time": "6:15PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "James",
            "start_time": "8:00PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Jeffrey",
            "start_time": "9:30AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "12:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mark",
            "start_time": "2:08PM",
            "end_time": "2:23PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Sandra",
            "start_time": "2:43PM",
            "end_time": "2:58PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Carol",
            "start_time": "6:15PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "James",
            "start_time": "8:00PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'North Beach': {\n        'Pacific Heights': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Mission District': 18,\n        'Golden Gate Park': 22,\n        'Nob Hill': 7\n    },\n    'Pacific Heights': {\n        'North Beach': 9,\n        'Chinatown': 11,\n        'Union Square': 12,\n        'Mission District': 15,\n        'Golden Gate Park': 15,\n        'Nob Hill': 8\n    },\n    'Chinatown': {\n        'North Beach': 3,\n        'Pacific Heights': 10,\n        'Union Square': 7,\n        'Mission District': 18,\n        'Golden Gate Park': 23,\n        'Nob Hill': 8\n    },\n    'Union Square': {\n        'North Beach': 10,\n        'Pacific Heights': 15,\n        'Chinatown': 7,\n        'Mission District': 14,\n        'Golden Gate Park': 22,\n        'Nob Hill': 9\n    },\n    'Mission District': {\n        'North Beach': 17,\n        'Pacific Heights': 16,\n        'Chinatown': 16,\n        'Union Square': 15,\n        'Golden Gate Park': 17,\n        'Nob Hill': 12\n    },\n    'Golden Gate Park': {\n        'North Beach': 24,\n        'Pacific Heights': 16,\n        'Chinatown': 23,\n        'Union Square': 22,\n        'Mission District': 17,\n        'Nob Hill': 20\n    },\n    'Nob Hill': {\n        'North Beach': 8,\n        'Pacific Heights': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Mission District': 13,\n        'Golden Gate Park': 17\n    }\n}\n\n# Friend availability\nfriends = {\n    'James': {\n        'location': 'Pacific Heights',\n        'start': '8:00PM',\n        'end': '10:00PM',\n        'min_duration': 120\n    },\n    'Robert': {\n        'location': 'Chinatown',\n        'start': '12:15PM',\n        'end': '4:45PM',\n        'min_duration': 90\n    },\n    'Jeffrey': {\n        'location': 'Union Square',\n        'start': '9:30AM',\n        'end': '3:30PM',\n        'min_duration': 120\n    },\n    'Carol': {\n        'location': 'Mission District',\n        'start': '6:15PM',\n        'end': '9:15PM',\n        'min_duration': 15\n    },\n    'Mark': {\n        'location': 'Golden Gate Park',\n        'start': '11:30AM',\n        'end': '5:45PM',\n        'min_duration': 15\n    },\n    'Sandra': {\n        'location': 'Nob Hill',\n        'start': '8:00AM',\n        'end': '3:30PM',\n        'min_duration': 15\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n        time_part = time_str.replace('AM', '').strip()\n    else:\n        period = 'PM'\n        time_part = time_str.replace('PM', '').strip()\n    \n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    start_time = time_to_minutes(friend['start'])\n    end_time = time_to_minutes(friend['end'])\n    travel_time = travel_times[current_location][friend['location']]\n    \n    arrival_time = current_time + travel_time\n    if arrival_time > end_time:\n        return None\n    \n    available_start = max(arrival_time, start_time)\n    available_end = end_time\n    available_duration = available_end - available_start\n    \n    if available_duration < friend['min_duration']:\n        return None\n    \n    meet_duration = friend['min_duration']\n    meet_end = available_start + meet_duration\n    \n    return {\n        'travel_time': travel_time,\n        'meet_start': available_start,\n        'meet_end': meet_end,\n        'location': friend['location'],\n        'duration': meet_duration\n    }\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'North Beach'\n    schedule = []\n    schedule.append({\n        'action': 'start',\n        'location': current_location,\n        'time': minutes_to_time(current_time)\n    })\n    total_meetings = 0\n    \n    for friend in order:\n        result = can_meet_friend(current_time, friend, current_location)\n        if result:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': result['travel_time'],\n                'time': minutes_to_time(current_time),\n                'to': result['location']\n            })\n            current_time += result['travel_time']\n            current_location = result['location']\n            \n            if current_time < result['meet_start']:\n                wait_time = result['meet_start'] - current_time\n                schedule.append({\n                    'action': 'wait',\n                    'location': current_location,\n                    'time': minutes_to_time(current_time),\n                    'duration': wait_time\n                })\n                current_time += wait_time\n            \n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': result['duration'],\n                'time': minutes_to_time(current_time)\n            })\n            current_time += result['duration']\n            total_meetings += 1\n    \n    return total_meetings, schedule\n\ndef find_optimal_schedule():\n    friend_names = list(friends.keys())\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all possible permutations (for small n this is feasible)\n    for perm in permutations(friend_names):\n        total, schedule = evaluate_schedule(perm)\n        if total > max_meetings:\n            max_meetings = total\n            best_schedule = schedule\n        elif total == max_meetings and best_schedule is None:\n            best_schedule = schedule\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\noutput = {\n    \"schedule\": optimal_schedule\n}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_592"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Laura",
            "start_time": "12:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Anthony",
            "start_time": "1:47PM",
            "end_time": "2:17PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Laura",
            "start_time": "12:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Anthony",
            "start_time": "1:47PM",
            "end_time": "2:17PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef calculate_schedule():\n    # Input parameters\n    travel_times = {\n        ('The Castro', 'Mission District'): 7,\n        ('The Castro', 'Financial District'): 20,\n        ('Mission District', 'The Castro'): 7,\n        ('Mission District', 'Financial District'): 17,\n        ('Financial District', 'The Castro'): 23,\n        ('Financial District', 'Mission District'): 17\n    }\n    \n    laura_available_start = time_to_minutes('12:15PM')\n    laura_available_end = time_to_minutes('7:45PM')\n    laura_min_duration = 75\n    \n    anthony_available_start = time_to_minutes('12:30PM')\n    anthony_available_end = time_to_minutes('2:45PM')\n    anthony_min_duration = 30\n    \n    current_location = 'The Castro'\n    current_time = time_to_minutes('9:00AM')\n    \n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    \n    # Calculate possible meeting schedules\n    best_schedule = None\n    max_meetings = 0\n    \n    # Option 1: Meet Laura first, then Anthony\n    option1_schedule = schedule.copy()\n    option1_time = current_time\n    option1_location = current_location\n    \n    # Travel to Mission District to meet Laura\n    travel_duration = travel_times[(option1_location, 'Mission District')]\n    option1_time += travel_duration\n    option1_schedule.append({\n        \"action\": \"travel\",\n        \"location\": option1_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(option1_time - travel_duration),\n        \"to\": \"Mission District\"\n    })\n    option1_location = 'Mission District'\n    \n    # Wait until Laura is available if needed\n    if option1_time < laura_available_start:\n        wait_duration = laura_available_start - option1_time\n        option1_time += wait_duration\n        option1_schedule.append({\n            \"action\": \"wait\",\n            \"location\": option1_location,\n            \"time\": minutes_to_time(option1_time - wait_duration)\n        })\n    \n    # Meet Laura\n    laura_meet_end = option1_time + laura_min_duration\n    if laura_meet_end <= laura_available_end:\n        option1_schedule.append({\n            \"action\": \"meet\",\n            \"location\": option1_location,\n            \"duration\": laura_min_duration,\n            \"time\": minutes_to_time(option1_time)\n        })\n        option1_time = laura_meet_end\n        \n        # Travel to Financial District to meet Anthony\n        travel_duration = travel_times[(option1_location, 'Financial District')]\n        option1_time += travel_duration\n        option1_schedule.append({\n            \"action\": \"travel\",\n            \"location\": option1_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(option1_time - travel_duration),\n            \"to\": \"Financial District\"\n        })\n        option1_location = 'Financial District'\n        \n        # Wait until Anthony is available if needed\n        if option1_time < anthony_available_start:\n            wait_duration = anthony_available_start - option1_time\n            option1_time += wait_duration\n            option1_schedule.append({\n                \"action\": \"wait\",\n                \"location\": option1_location,\n                \"time\": minutes_to_time(option1_time - wait_duration)\n            })\n        \n        # Meet Anthony\n        anthony_meet_end = option1_time + anthony_min_duration\n        if anthony_meet_end <= anthony_available_end:\n            option1_schedule.append({\n                \"action\": \"meet\",\n                \"location\": option1_location,\n                \"duration\": anthony_min_duration,\n                \"time\": minutes_to_time(option1_time)\n            })\n            best_schedule = option1_schedule\n            max_meetings = 2\n    \n    # Option 2: Meet Anthony first, then Laura\n    option2_schedule = schedule.copy()\n    option2_time = current_time\n    option2_location = current_location\n    \n    # Travel to Financial District to meet Anthony\n    travel_duration = travel_times[(option2_location, 'Financial District')]\n    option2_time += travel_duration\n    option2_schedule.append({\n        \"action\": \"travel\",\n        \"location\": option2_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(option2_time - travel_duration),\n        \"to\": \"Financial District\"\n    })\n    option2_location = 'Financial District'\n    \n    # Wait until Anthony is available if needed\n    if option2_time < anthony_available_start:\n        wait_duration = anthony_available_start - option2_time\n        option2_time += wait_duration\n        option2_schedule.append({\n            \"action\": \"wait\",\n            \"location\": option2_location,\n            \"time\": minutes_to_time(option2_time - wait_duration)\n        })\n    \n    # Meet Anthony\n    anthony_meet_end = option2_time + anthony_min_duration\n    if anthony_meet_end <= anthony_available_end:\n        option2_schedule.append({\n            \"action\": \"meet\",\n            \"location\": option2_location,\n            \"duration\": anthony_min_duration,\n            \"time\": minutes_to_time(option2_time)\n        })\n        option2_time = anthony_meet_end\n        \n        # Travel to Mission District to meet Laura\n        travel_duration = travel_times[(option2_location, 'Mission District')]\n        option2_time += travel_duration\n        option2_schedule.append({\n            \"action\": \"travel\",\n            \"location\": option2_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(option2_time - travel_duration),\n            \"to\": \"Mission District\"\n        })\n        option2_location = 'Mission District'\n        \n        # Wait until Laura is available if needed\n        if option2_time < laura_available_start:\n            wait_duration = laura_available_start - option2_time\n            option2_time += wait_duration\n            option2_schedule.append({\n                \"action\": \"wait\",\n                \"location\": option2_location,\n                \"time\": minutes_to_time(option2_time - wait_duration)\n            })\n        \n        # Meet Laura\n        laura_meet_end = option2_time + laura_min_duration\n        if laura_meet_end <= laura_available_end:\n            option2_schedule.append({\n                \"action\": \"meet\",\n                \"location\": option2_location,\n                \"duration\": laura_min_duration,\n                \"time\": minutes_to_time(option2_time)\n            })\n            if max_meetings < 2:\n                best_schedule = option2_schedule\n                max_meetings = 2\n    \n    # If both options fail, try to meet just one person\n    if max_meetings == 0:\n        # Try to meet Laura only\n        option3_schedule = schedule.copy()\n        option3_time = current_time\n        option3_location = current_location\n        \n        # Travel to Mission District to meet Laura\n        travel_duration = travel_times[(option3_location, 'Mission District')]\n        option3_time += travel_duration\n        option3_schedule.append({\n            \"action\": \"travel\",\n            \"location\": option3_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(option3_time - travel_duration),\n            \"to\": \"Mission District\"\n        })\n        option3_location = 'Mission District'\n        \n        # Wait until Laura is available if needed\n        if option3_time < laura_available_start:\n            wait_duration = laura_available_start - option3_time\n            option3_time += wait_duration\n            option3_schedule.append({\n                \"action\": \"wait\",\n                \"location\": option3_location,\n                \"time\": minutes_to_time(option3_time - wait_duration)\n            })\n        \n        # Meet Laura\n        laura_meet_end = option3_time + laura_min_duration\n        if laura_meet_end <= laura_available_end:\n            option3_schedule.append({\n                \"action\": \"meet\",\n                \"location\": option3_location,\n                \"duration\": laura_min_duration,\n                \"time\": minutes_to_time(option3_time)\n            })\n            best_schedule = option3_schedule\n            max_meetings = 1\n        \n        # Try to meet Anthony only\n        option4_schedule = schedule.copy()\n        option4_time = current_time\n        option4_location = current_location\n        \n        # Travel to Financial District to meet Anthony\n        travel_duration = travel_times[(option4_location, 'Financial District')]\n        option4_time += travel_duration\n        option4_schedule.append({\n            \"action\": \"travel\",\n            \"location\": option4_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(option4_time - travel_duration),\n            \"to\": \"Financial District\"\n        })\n        option4_location = 'Financial District'\n        \n        # Wait until Anthony is available if needed\n        if option4_time < anthony_available_start:\n            wait_duration = anthony_available_start - option4_time\n            option4_time += wait_duration\n            option4_schedule.append({\n                \"action\": \"wait\",\n                \"location\": option4_location,\n                \"time\": minutes_to_time(option4_time - wait_duration)\n            })\n        \n        # Meet Anthony\n        anthony_meet_end = option4_time + anthony_min_duration\n        if anthony_meet_end <= anthony_available_end:\n            option4_schedule.append({\n                \"action\": \"meet\",\n                \"location\": option4_location,\n                \"duration\": anthony_min_duration,\n                \"time\": minutes_to_time(option4_time)\n            })\n            if max_meetings < 1:\n                best_schedule = option4_schedule\n                max_meetings = 1\n    \n    return best_schedule if best_schedule else schedule\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_144"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Karen",
            "start_time": "11:45AM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Emily",
            "start_time": "12:27PM",
            "end_time": "12:42PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Steven",
            "start_time": "2:53PM",
            "end_time": "3:23PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Rebecca",
            "start_time": "3:28PM",
            "end_time": "5:13PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Matthew",
            "start_time": "5:30PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "William",
            "start_time": "6:34PM",
            "end_time": "8:04PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Emily",
            "start_time": "11:15AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Karen",
            "start_time": "11:45AM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "1:00PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "James",
            "start_time": "2:31PM",
            "end_time": "4:31PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Steven",
            "start_time": "4:38PM",
            "end_time": "5:08PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Matthew",
            "start_time": "5:29PM",
            "end_time": "6:14PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "William",
            "start_time": "6:33PM",
            "end_time": "8:03PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "8:30PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Richmond District': {\n        'The Castro': 16,\n        'Nob Hill': 17,\n        'Marina District': 9,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Chinatown': 20,\n        'Russian Hill': 13,\n        'Alamo Square': 13,\n        'Bayview': 27\n    },\n    'The Castro': {\n        'Richmond District': 16,\n        'Nob Hill': 16,\n        'Marina District': 21,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 6,\n        'Mission District': 7,\n        'Chinatown': 22,\n        'Russian Hill': 18,\n        'Alamo Square': 8,\n        'Bayview': 19\n    },\n    'Nob Hill': {\n        'Richmond District': 14,\n        'The Castro': 17,\n        'Marina District': 11,\n        'Pacific Heights': 8,\n        'Haight-Ashbury': 13,\n        'Mission District': 13,\n        'Chinatown': 6,\n        'Russian Hill': 5,\n        'Alamo Square': 11,\n        'Bayview': 19\n    },\n    'Marina District': {\n        'Richmond District': 11,\n        'The Castro': 22,\n        'Nob Hill': 12,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 16,\n        'Mission District': 20,\n        'Chinatown': 15,\n        'Russian Hill': 8,\n        'Alamo Square': 15,\n        'Bayview': 27\n    },\n    'Pacific Heights': {\n        'Richmond District': 12,\n        'The Castro': 16,\n        'Nob Hill': 8,\n        'Marina District': 6,\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Chinatown': 11,\n        'Russian Hill': 7,\n        'Alamo Square': 10,\n        'Bayview': 22\n    },\n    'Haight-Ashbury': {\n        'Richmond District': 10,\n        'The Castro': 6,\n        'Nob Hill': 15,\n        'Marina District': 17,\n        'Pacific Heights': 12,\n        'Mission District': 11,\n        'Chinatown': 19,\n        'Russian Hill': 17,\n        'Alamo Square': 5,\n        'Bayview': 18\n    },\n    'Mission District': {\n        'Richmond District': 20,\n        'The Castro': 7,\n        'Nob Hill': 12,\n        'Marina District': 19,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 12,\n        'Chinatown': 16,\n        'Russian Hill': 15,\n        'Alamo Square': 11,\n        'Bayview': 14\n    },\n    'Chinatown': {\n        'Richmond District': 20,\n        'The Castro': 22,\n        'Nob Hill': 9,\n        'Marina District': 12,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 19,\n        'Mission District': 17,\n        'Russian Hill': 7,\n        'Alamo Square': 17,\n        'Bayview': 20\n    },\n    'Russian Hill': {\n        'Richmond District': 14,\n        'The Castro': 21,\n        'Nob Hill': 5,\n        'Marina District': 7,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 17,\n        'Mission District': 16,\n        'Chinatown': 9,\n        'Alamo Square': 15,\n        'Bayview': 23\n    },\n    'Alamo Square': {\n        'Richmond District': 11,\n        'The Castro': 8,\n        'Nob Hill': 11,\n        'Marina District': 15,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 5,\n        'Mission District': 10,\n        'Chinatown': 15,\n        'Russian Hill': 13,\n        'Bayview': 16\n    },\n    'Bayview': {\n        'Richmond District': 25,\n        'The Castro': 19,\n        'Nob Hill': 20,\n        'Marina District': 27,\n        'Pacific Heights': 23,\n        'Haight-Ashbury': 19,\n        'Mission District': 13,\n        'Chinatown': 19,\n        'Russian Hill': 23,\n        'Alamo Square': 16\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Matthew': {'location': 'The Castro', 'start': '4:30PM', 'end': '8:00PM', 'duration': 45},\n    'Rebecca': {'location': 'Nob Hill', 'start': '3:15PM', 'end': '7:15PM', 'duration': 105},\n    'Brian': {'location': 'Marina District', 'start': '2:15PM', 'end': '10:00PM', 'duration': 30},\n    'Emily': {'location': 'Pacific Heights', 'start': '11:15AM', 'end': '7:45PM', 'duration': 15},\n    'Karen': {'location': 'Haight-Ashbury', 'start': '11:45AM', 'end': '5:30PM', 'duration': 30},\n    'Stephanie': {'location': 'Mission District', 'start': '1:00PM', 'end': '3:45PM', 'duration': 75},\n    'James': {'location': 'Chinatown', 'start': '2:30PM', 'end': '7:00PM', 'duration': 120},\n    'Steven': {'location': 'Russian Hill', 'start': '2:00PM', 'end': '8:00PM', 'duration': 30},\n    'Elizabeth': {'location': 'Alamo Square', 'start': '1:00PM', 'end': '5:15PM', 'duration': 120},\n    'William': {'location': 'Bayview', 'start': '6:15PM', 'end': '8:15PM', 'duration': 90}\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef generate_schedule(order):\n    current_location = 'Richmond District'\n    current_time = time_to_minutes('9:00AM')\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend in order:\n        if friend in met_friends:\n            continue\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        travel_duration = travel_times[current_location].get(destination, float('inf'))\n        \n        # Travel to friend\n        arrival_time = current_time + travel_duration\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': minutes_to_time(current_time),\n            'to': destination\n        })\n        \n        # Check if we can meet the friend\n        friend_start = time_to_minutes(friend_data['start'])\n        friend_end = time_to_minutes(friend_data['end'])\n        required_duration = friend_data['duration']\n        \n        # Calculate available time window\n        meet_start = max(arrival_time, friend_start)\n        meet_end = min(meet_start + required_duration, friend_end)\n        \n        if meet_end - meet_start >= required_duration:\n            # Add wait time if needed\n            if arrival_time < friend_start:\n                wait_duration = friend_start - arrival_time\n                schedule.append({\n                    'action': 'wait',\n                    'location': destination,\n                    'time': minutes_to_time(arrival_time),\n                    'duration': wait_duration\n                })\n            \n            # Add meeting\n            schedule.append({\n                'action': 'meet',\n                'location': destination,\n                'duration': required_duration,\n                'time': minutes_to_time(meet_start),\n                'with': friend\n            })\n            current_time = meet_start + required_duration\n            current_location = destination\n            met_friends.add(friend)\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_met = 0\n    \n    # Try different orders (limited to prevent excessive computation)\n    friend_names = list(friends.keys())\n    for _ in range(1000):  # Limit permutations for practical runtime\n        import random\n        random.shuffle(friend_names)\n        schedule, met = generate_schedule(friend_names)\n        if met > best_met:\n            best_met = met\n            best_schedule = schedule\n            if best_met == len(friends):\n                break\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nprint(json.dumps({\"schedule\": optimal_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_900"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Jason",
            "start_time": "9:21AM",
            "end_time": "10:36AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kenneth",
            "start_time": "10:39AM",
            "end_time": "11:09AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Kimberly",
            "start_time": "11:15AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Steven",
            "start_time": "12:35PM",
            "end_time": "1:35PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Jason",
            "start_time": "9:21AM",
            "end_time": "10:36AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kenneth",
            "start_time": "10:39AM",
            "end_time": "11:09AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "11:18AM",
            "end_time": "12:33PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Kimberly",
            "start_time": "12:47PM",
            "end_time": "2:02PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Jessica",
            "start_time": "2:12PM",
            "end_time": "3:42PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Brian",
            "start_time": "3:47PM",
            "end_time": "4:47PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Stephanie",
            "start_time": "4:57PM",
            "end_time": "6:42PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Steven",
            "start_time": "6:51PM",
            "end_time": "7:51PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Karen",
            "start_time": "9:00PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Presidio': {\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'Russian Hill': 14,\n        'North Beach': 18,\n        'Chinatown': 21,\n        'Union Square': 22,\n        'Embarcadero': 20,\n        'Financial District': 23,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Presidio': 15,\n        'Nob Hill': 15,\n        'Russian Hill': 17,\n        'North Beach': 19,\n        'Chinatown': 19,\n        'Union Square': 19,\n        'Embarcadero': 20,\n        'Financial District': 21,\n        'Marina District': 17\n    },\n    'Nob Hill': {\n        'Presidio': 17,\n        'Haight-Ashbury': 13,\n        'Russian Hill': 5,\n        'North Beach': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 9,\n        'Financial District': 9,\n        'Marina District': 11\n    },\n    'Russian Hill': {\n        'Presidio': 14,\n        'Haight-Ashbury': 17,\n        'Nob Hill': 5,\n        'North Beach': 5,\n        'Chinatown': 9,\n        'Union Square': 10,\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Marina District': 7\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 7,\n        'Russian Hill': 4,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 6,\n        'Financial District': 8,\n        'Marina District': 9\n    },\n    'Chinatown': {\n        'Presidio': 19,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 9,\n        'Russian Hill': 7,\n        'North Beach': 3,\n        'Union Square': 7,\n        'Embarcadero': 5,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Union Square': {\n        'Presidio': 24,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 9,\n        'Russian Hill': 13,\n        'North Beach': 10,\n        'Chinatown': 7,\n        'Embarcadero': 11,\n        'Financial District': 9,\n        'Marina District': 18\n    },\n    'Embarcadero': {\n        'Presidio': 20,\n        'Haight-Ashbury': 21,\n        'Nob Hill': 10,\n        'Russian Hill': 8,\n        'North Beach': 5,\n        'Chinatown': 7,\n        'Union Square': 10,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Financial District': {\n        'Presidio': 22,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 8,\n        'Russian Hill': 11,\n        'North Beach': 7,\n        'Chinatown': 5,\n        'Union Square': 9,\n        'Embarcadero': 4,\n        'Marina District': 15\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'Haight-Ashbury': 16,\n        'Nob Hill': 12,\n        'Russian Hill': 8,\n        'North Beach': 11,\n        'Chinatown': 15,\n        'Union Square': 16,\n        'Embarcadero': 14,\n        'Financial District': 17\n    }\n}\n\n# Friend data\nfriends = {\n    'Karen': {\n        'location': 'Haight-Ashbury',\n        'start': '9:00PM',\n        'end': '9:45PM',\n        'duration': 45\n    },\n    'Jessica': {\n        'location': 'Nob Hill',\n        'start': '1:45PM',\n        'end': '9:00PM',\n        'duration': 90\n    },\n    'Brian': {\n        'location': 'Russian Hill',\n        'start': '3:30PM',\n        'end': '9:45PM',\n        'duration': 60\n    },\n    'Kenneth': {\n        'location': 'North Beach',\n        'start': '9:45AM',\n        'end': '9:00PM',\n        'duration': 30\n    },\n    'Jason': {\n        'location': 'Chinatown',\n        'start': '8:15AM',\n        'end': '11:45AM',\n        'duration': 75\n    },\n    'Stephanie': {\n        'location': 'Union Square',\n        'start': '2:45PM',\n        'end': '6:45PM',\n        'duration': 105\n    },\n    'Kimberly': {\n        'location': 'Embarcadero',\n        'start': '9:45AM',\n        'end': '7:30PM',\n        'duration': 75\n    },\n    'Steven': {\n        'location': 'Financial District',\n        'start': '7:15AM',\n        'end': '9:15PM',\n        'duration': 60\n    },\n    'Mark': {\n        'location': 'Marina District',\n        'start': '10:15AM',\n        'end': '1:00PM',\n        'duration': 75\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name):\n    friend = friends[friend_name]\n    start = time_to_minutes(friend['start'])\n    end = time_to_minutes(friend['end'])\n    duration = friend['duration']\n    if current_time + duration <= end and current_time >= start:\n        return True\n    return False\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times[from_loc][to_loc]\n\ndef generate_schedule():\n    current_location = 'Presidio'\n    current_time = time_to_minutes('9:00AM')\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    remaining_friends = list(friends.keys())\n    \n    while remaining_friends:\n        best_friend = None\n        best_time = None\n        best_travel = None\n        \n        for friend in remaining_friends:\n            friend_loc = friends[friend]['location']\n            travel_time = get_travel_time(current_location, friend_loc)\n            arrival_time = current_time + travel_time\n            if can_meet_friend(arrival_time, friend):\n                if best_friend is None or arrival_time < best_time:\n                    best_friend = friend\n                    best_time = arrival_time\n                    best_travel = travel_time\n        \n        if best_friend is None:\n            break\n        \n        travel_time = best_travel\n        friend = friends[best_friend]\n        duration = friend['duration']\n        \n        if current_time + travel_time > time_to_minutes(friend['start']):\n            meet_time = current_time + travel_time\n        else:\n            meet_time = time_to_minutes(friend['start'])\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': friend['location']\n        })\n        \n        current_time += travel_time\n        current_location = friend['location']\n        \n        if current_time < meet_time:\n            wait_time = meet_time - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': wait_time\n            })\n            current_time = meet_time\n        \n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': duration,\n            'time': minutes_to_time(current_time)\n        })\n        \n        current_time += duration\n        remaining_friends.remove(best_friend)\n    \n    return schedule\n\nschedule = generate_schedule()\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
      "count": "meeting_planning_example_872"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Paul",
            "start_time": "4:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Carol",
            "start_time": "6:00PM",
            "end_time": "8:00PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Patricia",
            "start_time": "8:07PM",
            "end_time": "9:22PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Paul",
            "start_time": "4:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Karen",
            "start_time": "5:32PM",
            "end_time": "6:17PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Matthew",
            "start_time": "6:35PM",
            "end_time": "7:50PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Jeffrey",
            "start_time": "8:00PM",
            "end_time": "8:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "8:56PM",
            "end_time": "9:26PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Define travel times as a dictionary\ntravel_times = {\n    \"Bayview\": {\n        \"Nob Hill\": 20,\n        \"Union Square\": 17,\n        \"Chinatown\": 18,\n        \"The Castro\": 20,\n        \"Presidio\": 31,\n        \"Pacific Heights\": 23,\n        \"Russian Hill\": 23\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"Union Square\": 7,\n        \"Chinatown\": 6,\n        \"The Castro\": 17,\n        \"Presidio\": 17,\n        \"Pacific Heights\": 8,\n        \"Russian Hill\": 5\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"Nob Hill\": 9,\n        \"Chinatown\": 7,\n        \"The Castro\": 19,\n        \"Presidio\": 24,\n        \"Pacific Heights\": 15,\n        \"Russian Hill\": 13\n    },\n    \"Chinatown\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 7,\n        \"The Castro\": 22,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 10,\n        \"Russian Hill\": 7\n    },\n    \"The Castro\": {\n        \"Bayview\": 19,\n        \"Nob Hill\": 16,\n        \"Union Square\": 19,\n        \"Chinatown\": 20,\n        \"Presidio\": 20,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 18\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"Nob Hill\": 18,\n        \"Union Square\": 22,\n        \"Chinatown\": 21,\n        \"The Castro\": 21,\n        \"Pacific Heights\": 11,\n        \"Russian Hill\": 14\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 12,\n        \"Chinatown\": 11,\n        \"The Castro\": 16,\n        \"Presidio\": 11,\n        \"Russian Hill\": 7\n    },\n    \"Russian Hill\": {\n        \"Bayview\": 23,\n        \"Nob Hill\": 5,\n        \"Union Square\": 11,\n        \"Chinatown\": 9,\n        \"The Castro\": 21,\n        \"Presidio\": 14,\n        \"Pacific Heights\": 7\n    }\n}\n\n# Define friends' availability\nfriends = [\n    {\n        \"name\": \"Paul\",\n        \"location\": \"Nob Hill\",\n        \"start\": time_to_minutes(\"4:15PM\"),\n        \"end\": time_to_minutes(\"9:15PM\"),\n        \"duration\": 60\n    },\n    {\n        \"name\": \"Carol\",\n        \"location\": \"Union Square\",\n        \"start\": time_to_minutes(\"6:00PM\"),\n        \"end\": time_to_minutes(\"8:15PM\"),\n        \"duration\": 120\n    },\n    {\n        \"name\": \"Patricia\",\n        \"location\": \"Chinatown\",\n        \"start\": time_to_minutes(\"8:00PM\"),\n        \"end\": time_to_minutes(\"9:30PM\"),\n        \"duration\": 75\n    },\n    {\n        \"name\": \"Karen\",\n        \"location\": \"The Castro\",\n        \"start\": time_to_minutes(\"5:00PM\"),\n        \"end\": time_to_minutes(\"7:00PM\"),\n        \"duration\": 45\n    },\n    {\n        \"name\": \"Nancy\",\n        \"location\": \"Presidio\",\n        \"start\": time_to_minutes(\"11:45AM\"),\n        \"end\": time_to_minutes(\"10:00PM\"),\n        \"duration\": 30\n    },\n    {\n        \"name\": \"Jeffrey\",\n        \"location\": \"Pacific Heights\",\n        \"start\": time_to_minutes(\"8:00PM\"),\n        \"end\": time_to_minutes(\"8:45PM\"),\n        \"duration\": 45\n    },\n    {\n        \"name\": \"Matthew\",\n        \"location\": \"Russian Hill\",\n        \"start\": time_to_minutes(\"3:45PM\"),\n        \"end\": time_to_minutes(\"9:45PM\"),\n        \"duration\": 75\n    }\n]\n\ndef generate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Bayview\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = []\n\n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n\n        # Check if we can meet the friend\n        meeting_start = max(arrival_time, friend[\"start\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        if meeting_end > friend[\"end\"]:\n            return None  # Cannot meet this friend\n\n        # Add travel and meet actions\n        if arrival_time > current_time:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": minutes_to_time(current_time),\n                \"to\": friend[\"location\"]\n            })\n        if arrival_time < friend[\"start\"]:\n            wait_time = friend[\"start\"] - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend[\"location\"],\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_time\n            })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"duration\": friend[\"duration\"],\n            \"time\": minutes_to_time(meeting_start),\n            \"with\": friend[\"name\"]\n        })\n\n        met_friends.append(friend_name)\n        current_time = meeting_end\n        current_location = friend[\"location\"]\n\n    return {\n        \"schedule\": schedule,\n        \"met_friends\": met_friends\n    }\n\ndef evaluate_schedule(schedule_result):\n    if not schedule_result:\n        return -1\n    return len(schedule_result[\"met_friends\"])\n\n# Generate all possible orders of friends\nfriend_names = [f[\"name\"] for f in friends]\nbest_schedule = None\nbest_score = -1\n\n# Try all permutations of 3 friends (for performance)\nfor perm in permutations(friend_names, 3):\n    result = generate_schedule(perm)\n    score = evaluate_schedule(result)\n    if score > best_score:\n        best_score = score\n        best_schedule = result\n\n# If no schedule meets 3 friends, try 2\nif best_score < 3:\n    for perm in permutations(friend_names, 2):\n        result = generate_schedule(perm)\n        score = evaluate_schedule(result)\n        if score > best_score:\n            best_score = score\n            best_schedule = result\n\n# Output the best schedule\nif best_schedule:\n    print(json.dumps(best_schedule, indent=2))\nelse:\n    print(json.dumps({\"schedule\": [], \"met_friends\": []}, indent=2))\n```",
      "count": "meeting_planning_example_695"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Timothy",
            "start_time": "12:00PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Unknown",
            "start_time": "1:58PM",
            "end_time": "2:58PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "6:45PM",
            "end_time": "7:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Timothy",
            "start_time": "12:00PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "6:45PM",
            "end_time": "7:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Joseph",
            "start_time": "7:59PM",
            "end_time": "8:59PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Travel times dictionary: {from: {to: minutes}}\n    travel_times = {\n        \"Golden Gate Park\": {\"Alamo Square\": 10, \"Presidio\": 11, \"Russian Hill\": 19},\n        \"Alamo Square\": {\"Golden Gate Park\": 9, \"Presidio\": 18, \"Russian Hill\": 13},\n        \"Presidio\": {\"Golden Gate Park\": 12, \"Alamo Square\": 18, \"Russian Hill\": 14},\n        \"Russian Hill\": {\"Golden Gate Park\": 21, \"Alamo Square\": 15, \"Presidio\": 14}\n    }\n\n    # Constraints\n    current_time = str_to_time(\"9:00AM\")\n    current_location = \"Golden Gate Park\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": time_to_str(current_time)}]\n\n    # Timothy's constraints\n    timothy_start = str_to_time(\"12:00PM\")\n    timothy_end = str_to_time(\"4:15PM\")\n    timothy_min = 105\n\n    # Mark's constraints\n    mark_start = str_to_time(\"6:45PM\")\n    mark_end = str_to_time(\"9:00PM\")\n    mark_min = 60\n\n    # Joseph's constraints\n    joseph_start = str_to_time(\"4:45PM\")\n    joseph_end = str_to_time(\"9:30PM\")\n    joseph_min = 60\n\n    # Plan to meet Timothy first\n    # Travel to Alamo Square\n    travel_duration = travel_times[current_location][\"Alamo Square\"]\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Alamo Square\"\n    })\n    current_time = travel_end\n    current_location = \"Alamo Square\"\n\n    # Wait until Timothy is available if needed\n    if current_time < timothy_start:\n        wait_duration = (timothy_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": time_to_str(current_time)\n        })\n        current_time = timothy_start\n\n    # Meet Timothy\n    meet_end = current_time + timedelta(minutes=timothy_min)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": timothy_min,\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n\n    # Now decide between Joseph and Mark\n    # Option 1: Meet Joseph first, then Mark\n    # Travel to Russian Hill\n    travel_duration = travel_times[current_location][\"Russian Hill\"]\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    if travel_end <= joseph_end - timedelta(minutes=joseph_min):\n        # Can meet Joseph\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Russian Hill\"\n        })\n        current_time = travel_end\n        current_location = \"Russian Hill\"\n\n        # Meet Joseph\n        joseph_meet_end = current_time + timedelta(minutes=joseph_min)\n        if joseph_meet_end <= joseph_end:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": joseph_min,\n                \"time\": time_to_str(current_time)\n            })\n            current_time = joseph_meet_end\n\n            # Travel to Presidio\n            travel_duration = travel_times[current_location][\"Presidio\"]\n            travel_end = current_time + timedelta(minutes=travel_duration)\n            if travel_end <= mark_end - timedelta(minutes=mark_min):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_duration,\n                    \"time\": time_to_str(current_time),\n                    \"to\": \"Presidio\"\n                })\n                current_time = travel_end\n                current_location = \"Presidio\"\n\n                # Meet Mark\n                if current_time < mark_start:\n                    wait_duration = (mark_start - current_time).total_seconds() / 60\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": current_location,\n                        \"time\": time_to_str(current_time)\n                    })\n                    current_time = mark_start\n\n                mark_meet_end = current_time + timedelta(minutes=mark_min)\n                if mark_meet_end <= mark_end:\n                    schedule.append({\n                        \"action\": \"meet\",\n                        \"location\": current_location,\n                        \"duration\": mark_min,\n                        \"time\": time_to_str(current_time)\n                    })\n                    current_time = mark_meet_end\n\n    # If option 1 didn't work, try option 2: Meet Mark first, then Joseph\n    if len(schedule) < 6:  # If we didn't meet both Joseph and Mark\n        # Reset after meeting Timothy\n        current_time = meet_end\n        current_location = \"Alamo Square\"\n        schedule = schedule[:4]  # Keep only up to meeting Timothy\n\n        # Travel to Presidio\n        travel_duration = travel_times[current_location][\"Presidio\"]\n        travel_end = current_time + timedelta(minutes=travel_duration)\n        if travel_end <= mark_end - timedelta(minutes=mark_min):\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": time_to_str(current_time),\n                \"to\": \"Presidio\"\n            })\n            current_time = travel_end\n            current_location = \"Presidio\"\n\n            # Wait until Mark is available if needed\n            if current_time < mark_start:\n                wait_duration = (mark_start - current_time).total_seconds() / 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": time_to_str(current_time)\n                })\n                current_time = mark_start\n\n            # Meet Mark\n            mark_meet_end = current_time + timedelta(minutes=mark_min)\n            if mark_meet_end <= mark_end:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": current_location,\n                    \"duration\": mark_min,\n                    \"time\": time_to_str(current_time)\n                })\n                current_time = mark_meet_end\n\n                # Travel to Russian Hill\n                travel_duration = travel_times[current_location][\"Russian Hill\"]\n                travel_end = current_time + timedelta(minutes=travel_duration)\n                if travel_end <= joseph_end - timedelta(minutes=joseph_min):\n                    schedule.append({\n                        \"action\": \"travel\",\n                        \"location\": current_location,\n                        \"duration\": travel_duration,\n                        \"time\": time_to_str(current_time),\n                        \"to\": \"Russian Hill\"\n                    })\n                    current_time = travel_end\n                    current_location = \"Russian Hill\"\n\n                    # Meet Joseph\n                    joseph_meet_end = current_time + timedelta(minutes=joseph_min)\n                    if joseph_meet_end <= joseph_end:\n                        schedule.append({\n                            \"action\": \"meet\",\n                            \"location\": current_location,\n                            \"duration\": joseph_min,\n                            \"time\": time_to_str(current_time)\n                        })\n                        current_time = joseph_meet_end\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_268"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Unknown",
            "start_time": "9:11AM",
            "end_time": "10:41AM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "2:15PM",
            "end_time": "3:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    time_str = dt.strftime(\"%-I:%M%p\")\n    return time_str.replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Fisherman's Wharf\"\n    start_time_str = \"9:00AM\"\n    start_time = str_to_time(start_time_str)\n    \n    friend_location = \"Nob Hill\"\n    friend_available_start_str = \"2:15PM\"\n    friend_available_end_str = \"7:45PM\"\n    friend_available_start = str_to_time(friend_available_start_str)\n    friend_available_end = str_to_time(friend_available_end_str)\n    \n    travel_duration = 11  # minutes\n    min_meet_duration = 90  # minutes\n    \n    # Calculate possible meeting window\n    earliest_arrival = start_time + timedelta(minutes=travel_duration)\n    latest_departure = friend_available_end\n    \n    # Check if meeting is possible\n    if (friend_available_start - earliest_arrival).total_seconds() < 0:\n        # Can't meet before friend is available\n        possible_meet_start = friend_available_start\n    else:\n        possible_meet_start = earliest_arrival\n    \n    possible_meet_end = latest_departure\n    \n    if (possible_meet_end - possible_meet_start).total_seconds() < min_meet_duration * 60:\n        # Not enough time to meet\n        return {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n                {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \n                 \"time\": time_to_str(start_time), \"to\": friend_location},\n                {\"action\": \"wait\", \"location\": friend_location, \"time\": time_to_str(earliest_arrival)},\n                {\"action\": \"meet\", \"location\": friend_location, \"duration\": 0, \"time\": time_to_str(possible_meet_start)},\n                {\"error\": \"Not enough time to meet for the minimum duration\"}\n            ]\n        }\n    \n    # Optimal schedule is to meet as soon as possible for the full duration\n    meet_start = possible_meet_start\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    \n    # Build schedule\n    schedule = []\n    \n    # Start\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_str\n    })\n    \n    # Travel to friend's location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": start_time_str,\n        \"to\": friend_location\n    })\n    \n    # Arrival time\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # If we need to wait\n    if arrival_time < friend_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": time_to_str(arrival_time)\n        })\n    \n    # Meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meet_duration,\n        \"time\": time_to_str(meet_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_6"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "John",
            "start_time": "9:08AM",
            "end_time": "9:23AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "1:30PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Barbara",
            "start_time": "6:00PM",
            "end_time": "6:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "John",
            "start_time": "9:08AM",
            "end_time": "9:23AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "1:30PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Barbara",
            "start_time": "6:00PM",
            "end_time": "6:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    new_time = time_obj + timedelta(minutes=minutes_to_add)\n    return new_time.strftime(\"%I:%M%p\").lstrip('0')\n\ndef compute_schedule():\n    travel_times = {\n        ('Nob Hill', 'Presidio'): 17,\n        ('Nob Hill', 'North Beach'): 8,\n        ('Nob Hill', 'Fisherman\\'s Wharf'): 11,\n        ('Nob Hill', 'Pacific Heights'): 8,\n        ('Presidio', 'Nob Hill'): 18,\n        ('Presidio', 'North Beach'): 18,\n        ('Presidio', 'Fisherman\\'s Wharf'): 19,\n        ('Presidio', 'Pacific Heights'): 11,\n        ('North Beach', 'Nob Hill'): 7,\n        ('North Beach', 'Presidio'): 17,\n        ('North Beach', 'Fisherman\\'s Wharf'): 5,\n        ('North Beach', 'Pacific Heights'): 8,\n        ('Fisherman\\'s Wharf', 'Nob Hill'): 11,\n        ('Fisherman\\'s Wharf', 'Presidio'): 17,\n        ('Fisherman\\'s Wharf', 'North Beach'): 6,\n        ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n        ('Pacific Heights', 'Nob Hill'): 8,\n        ('Pacific Heights', 'Presidio'): 11,\n        ('Pacific Heights', 'North Beach'): 9,\n        ('Pacific Heights', 'Fisherman\\'s Wharf'): 13\n    }\n\n    friends = [\n        {'name': 'Jeffrey', 'location': 'Presidio', 'start': '8:00AM', 'end': '10:00AM', 'duration': 105},\n        {'name': 'John', 'location': 'Pacific Heights', 'start': '9:00AM', 'end': '1:30PM', 'duration': 15},\n        {'name': 'Steven', 'location': 'North Beach', 'start': '1:30PM', 'end': '10:00PM', 'duration': 45},\n        {'name': 'Barbara', 'location': 'Fisherman\\'s Wharf', 'start': '6:00PM', 'end': '9:30PM', 'duration': 30}\n    ]\n\n    current_location = 'Nob Hill'\n    current_time = '9:00AM'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Meet John first (since he's available right at 9:00AM and has the earliest end time)\n    john = friends[1]\n    travel_duration = travel_times[(current_location, john['location'])]\n    arrival_time = add_minutes_to_time(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": current_time,\n        \"to\": john['location']\n    })\n    current_location = john['location']\n    current_time = arrival_time\n\n    meet_end_time = add_minutes_to_time(current_time, john['duration'])\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": john['duration'],\n        \"time\": current_time\n    })\n    current_time = meet_end_time\n\n    # Try to meet Jeffrey (but we're already too late)\n    # Next is Steven (available from 1:30PM)\n    steven = friends[2]\n    travel_duration = travel_times[(current_location, steven['location'])]\n    arrival_time = add_minutes_to_time(current_time, travel_duration)\n    \n    # Wait until Steven is available if needed\n    if time_to_minutes(arrival_time) < time_to_minutes(steven['start']):\n        wait_time = time_to_minutes(steven['start']) - time_to_minutes(arrival_time)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": steven['location'],\n            \"time\": arrival_time\n        })\n        arrival_time = steven['start']\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": current_time,\n        \"to\": steven['location']\n    })\n    current_location = steven['location']\n    current_time = arrival_time\n\n    meet_end_time = add_minutes_to_time(current_time, steven['duration'])\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": steven['duration'],\n        \"time\": current_time\n    })\n    current_time = meet_end_time\n\n    # Finally meet Barbara\n    barbara = friends[3]\n    travel_duration = travel_times[(current_location, barbara['location'])]\n    arrival_time = add_minutes_to_time(current_time, travel_duration)\n    \n    # Wait until Barbara is available if needed\n    if time_to_minutes(arrival_time) < time_to_minutes(barbara['start']):\n        wait_time = time_to_minutes(barbara['start']) - time_to_minutes(arrival_time)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": barbara['location'],\n            \"time\": arrival_time\n        })\n        arrival_time = barbara['start']\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": current_time,\n        \"to\": barbara['location']\n    })\n    current_location = barbara['location']\n    current_time = arrival_time\n\n    meet_end_time = add_minutes_to_time(current_time, barbara['duration'])\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": barbara['duration'],\n        \"time\": current_time\n    })\n    current_time = meet_end_time\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_385"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Elizabeth",
            "start_time": "9:19AM",
            "end_time": "11:04AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "11:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Brian",
            "start_time": "11:52AM",
            "end_time": "12:22PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Stephanie",
            "start_time": "12:40PM",
            "end_time": "1:55PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Laura",
            "start_time": "2:30PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Helen",
            "start_time": "3:54PM",
            "end_time": "5:54PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mary",
            "start_time": "6:19PM",
            "end_time": "8:19PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "6:53PM",
            "end_time": "8:23PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Deborah",
            "start_time": "8:26PM",
            "end_time": "10:11PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "9:20AM",
            "end_time": "9:50AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Brian",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Stephanie",
            "start_time": "11:03AM",
            "end_time": "12:18PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Helen",
            "start_time": "12:40PM",
            "end_time": "2:40PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Laura",
            "start_time": "2:49PM",
            "end_time": "4:04PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mary",
            "start_time": "4:45PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Deborah",
            "start_time": "7:00PM",
            "end_time": "8:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    \"Mission District\": {\n        \"Alamo Square\": 11,\n        \"Presidio\": 25,\n        \"Russian Hill\": 15,\n        \"North Beach\": 17,\n        \"Golden Gate Park\": 17,\n        \"Richmond District\": 20,\n        \"Embarcadero\": 19,\n        \"Financial District\": 15,\n        \"Marina District\": 19\n    },\n    \"Alamo Square\": {\n        \"Mission District\": 10,\n        \"Presidio\": 17,\n        \"Russian Hill\": 13,\n        \"North Beach\": 15,\n        \"Golden Gate Park\": 9,\n        \"Richmond District\": 11,\n        \"Embarcadero\": 16,\n        \"Financial District\": 17,\n        \"Marina District\": 15\n    },\n    \"Presidio\": {\n        \"Mission District\": 26,\n        \"Alamo Square\": 19,\n        \"Russian Hill\": 14,\n        \"North Beach\": 18,\n        \"Golden Gate Park\": 12,\n        \"Richmond District\": 7,\n        \"Embarcadero\": 20,\n        \"Financial District\": 23,\n        \"Marina District\": 11\n    },\n    \"Russian Hill\": {\n        \"Mission District\": 16,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"North Beach\": 5,\n        \"Golden Gate Park\": 21,\n        \"Richmond District\": 14,\n        \"Embarcadero\": 8,\n        \"Financial District\": 11,\n        \"Marina District\": 7\n    },\n    \"North Beach\": {\n        \"Mission District\": 18,\n        \"Alamo Square\": 16,\n        \"Presidio\": 17,\n        \"Russian Hill\": 4,\n        \"Golden Gate Park\": 22,\n        \"Richmond District\": 18,\n        \"Embarcadero\": 6,\n        \"Financial District\": 8,\n        \"Marina District\": 9\n    },\n    \"Golden Gate Park\": {\n        \"Mission District\": 17,\n        \"Alamo Square\": 9,\n        \"Presidio\": 11,\n        \"Russian Hill\": 19,\n        \"North Beach\": 23,\n        \"Richmond District\": 7,\n        \"Embarcadero\": 25,\n        \"Financial District\": 26,\n        \"Marina District\": 16\n    },\n    \"Richmond District\": {\n        \"Mission District\": 20,\n        \"Alamo Square\": 13,\n        \"Presidio\": 7,\n        \"Russian Hill\": 13,\n        \"North Beach\": 17,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 19,\n        \"Financial District\": 22,\n        \"Marina District\": 9\n    },\n    \"Embarcadero\": {\n        \"Mission District\": 20,\n        \"Alamo Square\": 19,\n        \"Presidio\": 20,\n        \"Russian Hill\": 8,\n        \"North Beach\": 5,\n        \"Golden Gate Park\": 25,\n        \"Richmond District\": 21,\n        \"Financial District\": 5,\n        \"Marina District\": 12\n    },\n    \"Financial District\": {\n        \"Mission District\": 17,\n        \"Alamo Square\": 17,\n        \"Presidio\": 22,\n        \"Russian Hill\": 11,\n        \"North Beach\": 7,\n        \"Golden Gate Park\": 23,\n        \"Richmond District\": 21,\n        \"Embarcadero\": 4,\n        \"Marina District\": 15\n    },\n    \"Marina District\": {\n        \"Mission District\": 20,\n        \"Alamo Square\": 15,\n        \"Presidio\": 10,\n        \"Russian Hill\": 8,\n        \"North Beach\": 11,\n        \"Golden Gate Park\": 18,\n        \"Richmond District\": 11,\n        \"Embarcadero\": 14,\n        \"Financial District\": 17\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"Laura\": {\n        \"location\": \"Alamo Square\",\n        \"start\": datetime.strptime(\"2:30PM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"4:15PM\", \"%I:%M%p\"),\n        \"min_duration\": 75\n    },\n    \"Brian\": {\n        \"location\": \"Presidio\",\n        \"start\": datetime.strptime(\"10:15AM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"5:00PM\", \"%I:%M%p\"),\n        \"min_duration\": 30\n    },\n    \"Karen\": {\n        \"location\": \"Russian Hill\",\n        \"start\": datetime.strptime(\"6:00PM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"8:15PM\", \"%I:%M%p\"),\n        \"min_duration\": 90\n    },\n    \"Stephanie\": {\n        \"location\": \"North Beach\",\n        \"start\": datetime.strptime(\"10:15AM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"4:00PM\", \"%I:%M%p\"),\n        \"min_duration\": 75\n    },\n    \"Helen\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": datetime.strptime(\"11:30AM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"9:45PM\", \"%I:%M%p\"),\n        \"min_duration\": 120\n    },\n    \"Sandra\": {\n        \"location\": \"Richmond District\",\n        \"start\": datetime.strptime(\"8:00AM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"3:15PM\", \"%I:%M%p\"),\n        \"min_duration\": 30\n    },\n    \"Mary\": {\n        \"location\": \"Embarcadero\",\n        \"start\": datetime.strptime(\"4:45PM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"6:45PM\", \"%I:%M%p\"),\n        \"min_duration\": 120\n    },\n    \"Deborah\": {\n        \"location\": \"Financial District\",\n        \"start\": datetime.strptime(\"7:00PM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"8:45PM\", \"%I:%M%p\"),\n        \"min_duration\": 105\n    },\n    \"Elizabeth\": {\n        \"location\": \"Marina District\",\n        \"start\": datetime.strptime(\"8:30AM\", \"%I:%M%p\"),\n        \"end\": datetime.strptime(\"1:15PM\", \"%I:%M%p\"),\n        \"min_duration\": 105\n    }\n}\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\")\n\ndef calculate_schedule():\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Mission District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": time_to_str(current_time)}]\n    \n    # Helper function to add travel\n    def add_travel(to_location):\n        nonlocal current_time, current_location\n        duration = travel_times[current_location][to_location]\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": duration,\n            \"time\": time_to_str(current_time),\n            \"to\": to_location\n        })\n        current_time += timedelta(minutes=duration)\n        current_location = to_location\n    \n    # Meet Elizabeth first (Marina District)\n    add_travel(\"Marina District\")\n    meet_start = max(current_time, friends[\"Elizabeth\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Elizabeth\"][\"min_duration\"])\n    if meet_end > friends[\"Elizabeth\"][\"end\"]:\n        meet_start = friends[\"Elizabeth\"][\"end\"] - timedelta(minutes=friends[\"Elizabeth\"][\"min_duration\"])\n        meet_end = friends[\"Elizabeth\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Elizabeth\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Sandra (Richmond District)\n    add_travel(\"Richmond District\")\n    meet_start = max(current_time, friends[\"Sandra\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Sandra\"][\"min_duration\"])\n    if meet_end > friends[\"Sandra\"][\"end\"]:\n        meet_start = friends[\"Sandra\"][\"end\"] - timedelta(minutes=friends[\"Sandra\"][\"min_duration\"])\n        meet_end = friends[\"Sandra\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Sandra\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Brian (Presidio)\n    add_travel(\"Presidio\")\n    meet_start = max(current_time, friends[\"Brian\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Brian\"][\"min_duration\"])\n    if meet_end > friends[\"Brian\"][\"end\"]:\n        meet_start = friends[\"Brian\"][\"end\"] - timedelta(minutes=friends[\"Brian\"][\"min_duration\"])\n        meet_end = friends[\"Brian\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Brian\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Stephanie (North Beach)\n    add_travel(\"North Beach\")\n    meet_start = max(current_time, friends[\"Stephanie\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Stephanie\"][\"min_duration\"])\n    if meet_end > friends[\"Stephanie\"][\"end\"]:\n        meet_start = friends[\"Stephanie\"][\"end\"] - timedelta(minutes=friends[\"Stephanie\"][\"min_duration\"])\n        meet_end = friends[\"Stephanie\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Stephanie\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Laura (Alamo Square)\n    add_travel(\"Alamo Square\")\n    meet_start = max(current_time, friends[\"Laura\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Laura\"][\"min_duration\"])\n    if meet_end > friends[\"Laura\"][\"end\"]:\n        meet_start = friends[\"Laura\"][\"end\"] - timedelta(minutes=friends[\"Laura\"][\"min_duration\"])\n        meet_end = friends[\"Laura\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Laura\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Helen (Golden Gate Park)\n    add_travel(\"Golden Gate Park\")\n    meet_start = max(current_time, friends[\"Helen\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Helen\"][\"min_duration\"])\n    if meet_end > friends[\"Helen\"][\"end\"]:\n        meet_start = friends[\"Helen\"][\"end\"] - timedelta(minutes=friends[\"Helen\"][\"min_duration\"])\n        meet_end = friends[\"Helen\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Helen\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Mary (Embarcadero)\n    add_travel(\"Embarcadero\")\n    meet_start = max(current_time, friends[\"Mary\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Mary\"][\"min_duration\"])\n    if meet_end > friends[\"Mary\"][\"end\"]:\n        meet_start = friends[\"Mary\"][\"end\"] - timedelta(minutes=friends[\"Mary\"][\"min_duration\"])\n        meet_end = friends[\"Mary\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Mary\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Karen (Russian Hill)\n    add_travel(\"Russian Hill\")\n    meet_start = max(current_time, friends[\"Karen\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Karen\"][\"min_duration\"])\n    if meet_end > friends[\"Karen\"][\"end\"]:\n        meet_start = friends[\"Karen\"][\"end\"] - timedelta(minutes=friends[\"Karen\"][\"min_duration\"])\n        meet_end = friends[\"Karen\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Karen\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    # Meet Deborah (Financial District)\n    add_travel(\"Financial District\")\n    meet_start = max(current_time, friends[\"Deborah\"][\"start\"])\n    meet_end = meet_start + timedelta(minutes=friends[\"Deborah\"][\"min_duration\"])\n    if meet_end > friends[\"Deborah\"][\"end\"]:\n        meet_start = friends[\"Deborah\"][\"end\"] - timedelta(minutes=friends[\"Deborah\"][\"min_duration\"])\n        meet_end = friends[\"Deborah\"][\"end\"]\n    if current_time < meet_start:\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": time_to_str(current_time)})\n        current_time = meet_start\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": friends[\"Deborah\"][\"min_duration\"],\n        \"time\": time_to_str(current_time)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_862"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Lisa",
            "start_time": "9:10AM",
            "end_time": "9:55AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joshua",
            "start_time": "12:00PM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "12:23PM",
            "end_time": "1:23PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "John",
            "start_time": "4:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "9:11AM",
            "end_time": "10:41AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Lisa",
            "start_time": "10:53AM",
            "end_time": "11:38AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joshua",
            "start_time": "12:00PM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "12:23PM",
            "end_time": "1:23PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "John",
            "start_time": "4:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    'Embarcadero': {\n        'Richmond District': 21,\n        'Union Square': 10,\n        'Financial District': 5,\n        'Pacific Heights': 11,\n        'Nob Hill': 10,\n        'Bayview': 21\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Union Square': 21,\n        'Financial District': 22,\n        'Pacific Heights': 10,\n        'Nob Hill': 17,\n        'Bayview': 26\n    },\n    'Union Square': {\n        'Embarcadero': 11,\n        'Richmond District': 20,\n        'Financial District': 9,\n        'Pacific Heights': 15,\n        'Nob Hill': 9,\n        'Bayview': 15\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Richmond District': 21,\n        'Union Square': 9,\n        'Pacific Heights': 13,\n        'Nob Hill': 8,\n        'Bayview': 19\n    },\n    'Pacific Heights': {\n        'Embarcadero': 10,\n        'Richmond District': 12,\n        'Union Square': 12,\n        'Financial District': 13,\n        'Nob Hill': 8,\n        'Bayview': 22\n    },\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'Richmond District': 14,\n        'Union Square': 7,\n        'Financial District': 9,\n        'Pacific Heights': 8,\n        'Bayview': 19\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Richmond District': 25,\n        'Union Square': 17,\n        'Financial District': 19,\n        'Pacific Heights': 23,\n        'Nob Hill': 20\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Kenneth',\n        'location': 'Richmond District',\n        'start': time_to_minutes('9:15PM'),\n        'end': time_to_minutes('10:00PM'),\n        'duration': 30\n    },\n    {\n        'name': 'Lisa',\n        'location': 'Union Square',\n        'start': time_to_minutes('9:00AM'),\n        'end': time_to_minutes('4:30PM'),\n        'duration': 45\n    },\n    {\n        'name': 'Joshua',\n        'location': 'Financial District',\n        'start': time_to_minutes('12:00PM'),\n        'end': time_to_minutes('3:15PM'),\n        'duration': 15\n    },\n    {\n        'name': 'Nancy',\n        'location': 'Pacific Heights',\n        'start': time_to_minutes('8:00AM'),\n        'end': time_to_minutes('11:30AM'),\n        'duration': 90\n    },\n    {\n        'name': 'Andrew',\n        'location': 'Nob Hill',\n        'start': time_to_minutes('11:30AM'),\n        'end': time_to_minutes('8:15PM'),\n        'duration': 60\n    },\n    {\n        'name': 'John',\n        'location': 'Bayview',\n        'start': time_to_minutes('4:45PM'),\n        'end': time_to_minutes('9:30PM'),\n        'duration': 75\n    }\n]\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times[from_loc][to_loc]\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Embarcadero'\n    schedule = []\n    met_friends = []\n    \n    schedule.append({\n        'action': 'start',\n        'location': current_location,\n        'time': minutes_to_time(current_time)\n    })\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f['name'] == friend_name)\n        dest = friend['location']\n        \n        # Travel to friend\n        travel_time = get_travel_time(current_location, dest)\n        arrival_time = current_time + travel_time\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': dest\n        })\n        \n        current_time = arrival_time\n        current_location = dest\n        \n        # Check if we can meet\n        window_start = friend['start']\n        window_end = friend['end']\n        duration = friend['duration']\n        \n        if current_time < window_start:\n            # Need to wait\n            wait_time = window_start - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': wait_time\n            })\n            current_time = window_start\n        \n        if current_time + duration <= window_end:\n            # Can meet\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': duration,\n                'time': minutes_to_time(current_time),\n                'with': friend['name']\n            })\n            current_time += duration\n            met_friends.append(friend['name'])\n        else:\n            # Can't meet\n            pass\n    \n    return len(met_friends), schedule\n\n# Generate all possible orders of meeting friends\nfriend_names = [f['name'] for f in friends]\nbest_met = 0\nbest_schedule = None\n\n# Try all permutations (but limit to reasonable number for performance)\nfor order in permutations(friend_names, min(4, len(friend_names))):\n    met, schedule = evaluate_schedule(order)\n    if met > best_met:\n        best_met = met\n        best_schedule = schedule\n\n# If no permutation met all, try with fewer friends\nif best_met < len(friends):\n    for num in range(len(friends)-1, 0, -1):\n        for order in permutations(friend_names, num):\n            met, schedule = evaluate_schedule(order)\n            if met > best_met:\n                best_met = met\n                best_schedule = schedule\n        if best_met > 0:\n            break\n\n# Prepare output\noutput = {\n    'schedule': best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_546"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Daniel",
            "start_time": "7:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Daniel",
            "start_time": "7:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_location = \"Russian Hill\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Daniel's availability\n    daniel_location = \"Richmond District\"\n    daniel_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    daniel_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 75  # minutes\n    \n    # Travel times\n    travel_times = {\n        (\"Russian Hill\", \"Richmond District\"): 14,\n        (\"Richmond District\", \"Russian Hill\"): 13  # Note: Typo in original input (Richmond vs Richmond)\n    }\n    travel_to_daniel = travel_times[(arrival_location, daniel_location)]\n    \n    # Calculate latest departure time to meet Daniel for 75 minutes\n    meeting_end = daniel_end\n    meeting_start = meeting_end - timedelta(minutes=min_meeting_duration)\n    latest_departure = meeting_start - timedelta(minutes=travel_to_daniel)\n    \n    # Check if meeting is possible\n    if latest_departure < arrival_time:\n        print(json.dumps({\"error\": \"Cannot meet Daniel given constraints\"}))\n        return\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Russian Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to Richmond District\n    travel_start = arrival_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_to_daniel,\n        \"time\": format_time(travel_start),\n        \"to\": daniel_location\n    })\n    \n    # Arrive at Richmond District\n    arrive_time = travel_start + timedelta(minutes=travel_to_daniel)\n    \n    # Wait until meeting time (if needed)\n    if arrive_time < meeting_start:\n        wait_duration = (meeting_start - arrive_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": daniel_location,\n            \"time\": format_time(arrive_time),\n            \"duration\": int(wait_duration)\n        })\n    \n    # Meet Daniel\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": daniel_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Output result\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_91"
    },
    {
      "final_program_time": {
        "itinerary": []
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "David",
            "start_time": "9:18AM",
            "end_time": "10:03AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kenneth",
            "start_time": "2:00PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Deborah",
            "start_time": "4:09PM",
            "end_time": "5:39PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "John",
            "start_time": "5:55PM",
            "end_time": "6:10PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Karen",
            "start_time": "6:31PM",
            "end_time": "6:46PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Charles",
            "start_time": "9:45PM",
            "end_time": "10:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Chinatown\": {\n        \"Mission District\": 18,\n        \"Alamo Square\": 17,\n        \"Pacific Heights\": 10,\n        \"Union Square\": 7,\n        \"Golden Gate Park\": 23,\n        \"Sunset District\": 29,\n        \"Presidio\": 19\n    },\n    \"Mission District\": {\n        \"Chinatown\": 16,\n        \"Alamo Square\": 11,\n        \"Pacific Heights\": 16,\n        \"Union Square\": 15,\n        \"Golden Gate Park\": 17,\n        \"Sunset District\": 24,\n        \"Presidio\": 25\n    },\n    \"Alamo Square\": {\n        \"Chinatown\": 16,\n        \"Mission District\": 10,\n        \"Pacific Heights\": 10,\n        \"Union Square\": 14,\n        \"Golden Gate Park\": 9,\n        \"Sunset District\": 16,\n        \"Presidio\": 18\n    },\n    \"Pacific Heights\": {\n        \"Chinatown\": 11,\n        \"Mission District\": 15,\n        \"Alamo Square\": 10,\n        \"Union Square\": 12,\n        \"Golden Gate Park\": 15,\n        \"Sunset District\": 21,\n        \"Presidio\": 11\n    },\n    \"Union Square\": {\n        \"Chinatown\": 7,\n        \"Mission District\": 14,\n        \"Alamo Square\": 15,\n        \"Pacific Heights\": 15,\n        \"Golden Gate Park\": 22,\n        \"Sunset District\": 26,\n        \"Presidio\": 24\n    },\n    \"Golden Gate Park\": {\n        \"Chinatown\": 23,\n        \"Mission District\": 17,\n        \"Alamo Square\": 10,\n        \"Pacific Heights\": 16,\n        \"Union Square\": 22,\n        \"Sunset District\": 10,\n        \"Presidio\": 11\n    },\n    \"Sunset District\": {\n        \"Chinatown\": 30,\n        \"Mission District\": 24,\n        \"Alamo Square\": 17,\n        \"Pacific Heights\": 21,\n        \"Union Square\": 30,\n        \"Golden Gate Park\": 11,\n        \"Presidio\": 16\n    },\n    \"Presidio\": {\n        \"Chinatown\": 21,\n        \"Mission District\": 26,\n        \"Alamo Square\": 18,\n        \"Pacific Heights\": 11,\n        \"Union Square\": 22,\n        \"Golden Gate Park\": 12,\n        \"Sunset District\": 15\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\"name\": \"David\", \"location\": \"Mission District\", \"start\": \"8:00AM\", \"end\": \"7:45PM\", \"duration\": 45},\n    {\"name\": \"Kenneth\", \"location\": \"Alamo Square\", \"start\": \"2:00PM\", \"end\": \"7:45PM\", \"duration\": 120},\n    {\"name\": \"John\", \"location\": \"Pacific Heights\", \"start\": \"5:00PM\", \"end\": \"8:00PM\", \"duration\": 15},\n    {\"name\": \"Charles\", \"location\": \"Union Square\", \"start\": \"9:45PM\", \"end\": \"10:45PM\", \"duration\": 60},\n    {\"name\": \"Deborah\", \"location\": \"Golden Gate Park\", \"start\": \"7:00AM\", \"end\": \"6:15PM\", \"duration\": 90},\n    {\"name\": \"Karen\", \"location\": \"Sunset District\", \"start\": \"5:45PM\", \"end\": \"9:15PM\", \"duration\": 15},\n    {\"name\": \"Carol\", \"location\": \"Presidio\", \"start\": \"8:15AM\", \"end\": \"9:15AM\", \"duration\": 30}\n]\n\ncurrent_time = time_to_minutes(\"9:00AM\")\ncurrent_location = \"Chinatown\"\nschedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n\ndef can_meet(friend, arrival_time):\n    start = time_to_minutes(friend[\"start\"])\n    end = time_to_minutes(friend[\"end\"])\n    duration = friend[\"duration\"]\n    if arrival_time < start:\n        available_time = end - start\n        if available_time >= duration:\n            return start\n        else:\n            return -1\n    else:\n        available_time = end - arrival_time\n        if available_time >= duration:\n            return arrival_time\n        else:\n            return -1\n\ndef generate_possible_orders():\n    friend_indices = list(range(len(friends)))\n    return permutations(friend_indices)\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in generate_possible_orders():\n    temp_schedule = schedule.copy()\n    temp_location = current_location\n    temp_time = current_time\n    meetings = 0\n    valid = True\n    \n    for idx in order:\n        friend = friends[idx]\n        travel_duration = travel_times[temp_location][friend[\"location\"]]\n        arrival_time = temp_time + travel_duration\n        meet_time = can_meet(friend, arrival_time)\n        \n        if meet_time == -1:\n            valid = False\n            break\n        \n        if arrival_time < meet_time:\n            wait_duration = meet_time - arrival_time\n            temp_schedule.append({\n                \"action\": \"travel\",\n                \"location\": friend[\"location\"],\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(temp_time),\n                \"to\": friend[\"location\"]\n            })\n            temp_schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend[\"location\"],\n                \"time\": minutes_to_time(arrival_time)\n            })\n        else:\n            temp_schedule.append({\n                \"action\": \"travel\",\n                \"location\": friend[\"location\"],\n                \"duration\": travel_duration,\n                \"time\": minutes_to_time(temp_time),\n                \"to\": friend[\"location\"]\n            })\n        \n        temp_schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"duration\": friend[\"duration\"],\n            \"time\": minutes_to_time(meet_time)\n        })\n        \n        temp_location = friend[\"location\"]\n        temp_time = meet_time + friend[\"duration\"]\n        meetings += 1\n    \n    if valid and meetings > best_meetings:\n        best_meetings = meetings\n        best_schedule = temp_schedule\n\nif best_schedule is None:\n    best_schedule = schedule\n\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_609"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Mark",
            "start_time": "9:10AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Stephanie",
            "start_time": "12:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Betty",
            "start_time": "2:01PM",
            "end_time": "2:16PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Lisa",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "William",
            "start_time": "6:45PM",
            "end_time": "7:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Mark",
            "start_time": "9:10AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Betty",
            "start_time": "10:06AM",
            "end_time": "10:21AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Brian",
            "start_time": "10:40AM",
            "end_time": "11:10AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Joseph",
            "start_time": "11:31AM",
            "end_time": "1:01PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Stephanie",
            "start_time": "1:11PM",
            "end_time": "2:26PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Lisa",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Patricia",
            "start_time": "4:34PM",
            "end_time": "6:34PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "William",
            "start_time": "6:47PM",
            "end_time": "7:47PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Karen",
            "start_time": "8:10PM",
            "end_time": "9:55PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 22,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 11,\n        \"The Castro\": 20,\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Sunset District\": 30\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Presidio\": 17,\n        \"Bayview\": 26,\n        \"Haight-Ashbury\": 22,\n        \"Russian Hill\": 7,\n        \"The Castro\": 27,\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 13,\n        \"Sunset District\": 27\n    },\n    \"Presidio\": {\n        \"Financial District\": 23,\n        \"Fisherman's Wharf\": 19,\n        \"Bayview\": 31,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 14,\n        \"The Castro\": 21,\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Sunset District\": 15\n    },\n    \"Bayview\": {\n        \"Financial District\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Presidio\": 32,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 23,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Richmond District\": 25,\n        \"Union Square\": 18,\n        \"Sunset District\": 23\n    },\n    \"Haight-Ashbury\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 23,\n        \"Presidio\": 15,\n        \"Bayview\": 18,\n        \"Russian Hill\": 17,\n        \"The Castro\": 6,\n        \"Marina District\": 17,\n        \"Richmond District\": 10,\n        \"Union Square\": 19,\n        \"Sunset District\": 15\n    },\n    \"Russian Hill\": {\n        \"Financial District\": 11,\n        \"Fisherman's Wharf\": 7,\n        \"Presidio\": 14,\n        \"Bayview\": 23,\n        \"Haight-Ashbury\": 17,\n        \"The Castro\": 21,\n        \"Marina District\": 7,\n        \"Richmond District\": 14,\n        \"Union Square\": 10,\n        \"Sunset District\": 23\n    },\n    \"The Castro\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 24,\n        \"Presidio\": 20,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 6,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Union Square\": 19,\n        \"Sunset District\": 17\n    },\n    \"Marina District\": {\n        \"Financial District\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 10,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 16,\n        \"Russian Hill\": 8,\n        \"The Castro\": 22,\n        \"Richmond District\": 11,\n        \"Union Square\": 16,\n        \"Sunset District\": 19\n    },\n    \"Richmond District\": {\n        \"Financial District\": 22,\n        \"Fisherman's Wharf\": 18,\n        \"Presidio\": 7,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 10,\n        \"Russian Hill\": 13,\n        \"The Castro\": 16,\n        \"Marina District\": 9,\n        \"Union Square\": 21,\n        \"Sunset District\": 11\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Presidio\": 24,\n        \"Bayview\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Russian Hill\": 13,\n        \"The Castro\": 17,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Sunset District\": 27\n    },\n    \"Sunset District\": {\n        \"Financial District\": 30,\n        \"Fisherman's Wharf\": 29,\n        \"Presidio\": 16,\n        \"Bayview\": 22,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 24,\n        \"The Castro\": 17,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Union Square\": 30\n    }\n}\n\n# Friend availability\nfriends = {\n    \"Mark\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"start\": \"8:15AM\",\n        \"end\": \"10:00AM\",\n        \"duration\": 30\n    },\n    \"Stephanie\": {\n        \"location\": \"Presidio\",\n        \"start\": \"12:15PM\",\n        \"end\": \"3:00PM\",\n        \"duration\": 75\n    },\n    \"Betty\": {\n        \"location\": \"Bayview\",\n        \"start\": \"7:15AM\",\n        \"end\": \"8:30PM\",\n        \"duration\": 15\n    },\n    \"Lisa\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": \"3:30PM\",\n        \"end\": \"6:30PM\",\n        \"duration\": 45\n    },\n    \"William\": {\n        \"location\": \"Russian Hill\",\n        \"start\": \"6:45PM\",\n        \"end\": \"8:00PM\",\n        \"duration\": 60\n    },\n    \"Brian\": {\n        \"location\": \"The Castro\",\n        \"start\": \"9:15AM\",\n        \"end\": \"1:15PM\",\n        \"duration\": 30\n    },\n    \"Joseph\": {\n        \"location\": \"Marina District\",\n        \"start\": \"10:45AM\",\n        \"end\": \"3:00PM\",\n        \"duration\": 90\n    },\n    \"Ashley\": {\n        \"location\": \"Richmond District\",\n        \"start\": \"9:45AM\",\n        \"end\": \"11:15AM\",\n        \"duration\": 45\n    },\n    \"Patricia\": {\n        \"location\": \"Union Square\",\n        \"start\": \"4:30PM\",\n        \"end\": \"8:00PM\",\n        \"duration\": 120\n    },\n    \"Karen\": {\n        \"location\": \"Sunset District\",\n        \"start\": \"4:30PM\",\n        \"end\": \"10:00PM\",\n        \"duration\": 105\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name):\n    friend = friends[friend_name]\n    location = friend[\"location\"]\n    start = time_to_minutes(friend[\"start\"])\n    end = time_to_minutes(friend[\"end\"])\n    duration = friend[\"duration\"]\n    \n    if current_time + duration > end:\n        return False\n    meet_time = max(current_time, start)\n    if meet_time + duration > end:\n        return False\n    return True\n\ndef get_meet_time(current_time, friend_name):\n    friend = friends[friend_name]\n    start = time_to_minutes(friend[\"start\"])\n    end = time_to_minutes(friend[\"end\"])\n    duration = friend[\"duration\"]\n    \n    meet_time = max(current_time, start)\n    if meet_time + duration > end:\n        return None\n    return meet_time\n\ndef find_best_schedule():\n    best_schedule = []\n    max_meetings = 0\n    \n    # Try different orders of meeting friends\n    friend_names = list(friends.keys())\n    \n    # We'll limit permutations to a reasonable number for performance\n    for perm in permutations(friend_names, min(5, len(friend_names))):\n        current_location = \"Financial District\"\n        current_time = time_to_minutes(\"9:00AM\")\n        schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n        meetings = 0\n        \n        for friend_name in perm:\n            friend = friends[friend_name]\n            destination = friend[\"location\"]\n            \n            # Check if we can meet this friend\n            travel_duration = travel_times[current_location][destination]\n            arrival_time = current_time + travel_duration\n            meet_time = get_meet_time(arrival_time, friend_name)\n            \n            if meet_time is not None:\n                # Add travel action\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_duration,\n                    \"time\": minutes_to_time(current_time),\n                    \"to\": destination\n                })\n                \n                # Check if we need to wait\n                if arrival_time < meet_time:\n                    wait_duration = meet_time - arrival_time\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": destination,\n                        \"time\": minutes_to_time(arrival_time)\n                    })\n                \n                # Add meet action\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": destination,\n                    \"duration\": friend[\"duration\"],\n                    \"time\": minutes_to_time(meet_time)\n                })\n                \n                meetings += 1\n                current_location = destination\n                current_time = meet_time + friend[\"duration\"]\n        \n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_schedule = schedule\n    \n    return best_schedule\n\ndef main():\n    schedule = find_best_schedule()\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_908"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "9:09AM",
            "end_time": "9:24AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "10:45AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Betty",
            "start_time": "7:00PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Pacific Heights\": {\n        \"North Beach\": 9,\n        \"Financial District\": 13,\n        \"Alamo Square\": 10,\n        \"Mission District\": 15\n    },\n    \"North Beach\": {\n        \"Pacific Heights\": 8,\n        \"Financial District\": 8,\n        \"Alamo Square\": 16,\n        \"Mission District\": 18\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13,\n        \"North Beach\": 7,\n        \"Alamo Square\": 17,\n        \"Mission District\": 17\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10,\n        \"North Beach\": 15,\n        \"Financial District\": 17,\n        \"Mission District\": 10\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16,\n        \"North Beach\": 17,\n        \"Financial District\": 17,\n        \"Alamo Square\": 11\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        \"name\": \"Helen\",\n        \"location\": \"North Beach\",\n        \"start\": time_to_minutes(\"9:00AM\"),\n        \"end\": time_to_minutes(\"5:00PM\"),\n        \"duration\": 15\n    },\n    {\n        \"name\": \"Betty\",\n        \"location\": \"Financial District\",\n        \"start\": time_to_minutes(\"7:00PM\"),\n        \"end\": time_to_minutes(\"9:45PM\"),\n        \"duration\": 90\n    },\n    {\n        \"name\": \"Amanda\",\n        \"location\": \"Alamo Square\",\n        \"start\": time_to_minutes(\"7:45PM\"),\n        \"end\": time_to_minutes(\"9:00PM\"),\n        \"duration\": 60\n    },\n    {\n        \"name\": \"Kevin\",\n        \"location\": \"Mission District\",\n        \"start\": time_to_minutes(\"10:45AM\"),\n        \"end\": time_to_minutes(\"2:45PM\"),\n        \"duration\": 45\n    }\n]\n\ndef generate_schedules():\n    friend_permutations = permutations(friends)\n    valid_schedules = []\n    \n    for perm in friend_permutations:\n        current_time = time_to_minutes(\"9:00AM\")\n        current_location = \"Pacific Heights\"\n        schedule = []\n        feasible = True\n        schedule.append({\n            \"action\": \"start\",\n            \"location\": current_location,\n            \"time\": minutes_to_time(current_time)\n        })\n        \n        for friend in perm:\n            travel_duration = travel_times[current_location][friend[\"location\"]]\n            arrival_time = current_time + travel_duration\n            \n            # Check if we can meet the friend\n            if arrival_time > friend[\"end\"]:\n                feasible = False\n                break\n            \n            meet_start = max(arrival_time, friend[\"start\"])\n            meet_end = meet_start + friend[\"duration\"]\n            \n            if meet_end > friend[\"end\"]:\n                feasible = False\n                break\n            \n            # Add travel action\n            if travel_duration > 0:\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_duration,\n                    \"time\": minutes_to_time(current_time),\n                    \"to\": friend[\"location\"]\n                })\n            \n            # Add wait action if needed\n            if arrival_time < friend[\"start\"]:\n                wait_duration = friend[\"start\"] - arrival_time\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": friend[\"location\"],\n                    \"time\": minutes_to_time(arrival_time),\n                    \"duration\": wait_duration\n                })\n            \n            # Add meet action\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"duration\": friend[\"duration\"],\n                \"time\": minutes_to_time(meet_start)\n            })\n            \n            current_time = meet_end\n            current_location = friend[\"location\"]\n        \n        if feasible:\n            valid_schedules.append(schedule)\n    \n    return valid_schedules\n\ndef select_best_schedule(schedules):\n    if not schedules:\n        return None\n    # Prefer schedules that meet all friends\n    max_friends = max(len(s) for s in schedules)\n    candidates = [s for s in schedules if len(s) == max_friends]\n    # Among those, pick the one that ends earliest\n    candidates.sort(key=lambda s: sum(1 for a in s if a[\"action\"] in [\"meet\", \"travel\", \"wait\"]))\n    return candidates[0] if candidates else None\n\nschedules = generate_schedules()\nbest_schedule = select_best_schedule(schedules)\n\nif best_schedule:\n    output = {\"schedule\": best_schedule}\nelse:\n    output = {\"schedule\": []}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_335"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Matthew",
            "start_time": "9:12AM",
            "end_time": "9:27AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Michelle",
            "start_time": "10:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Carol",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Stephanie",
            "start_time": "1:37PM",
            "end_time": "2:07PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Linda",
            "start_time": "2:29PM",
            "end_time": "3:59PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Jessica",
            "start_time": "4:12PM",
            "end_time": "5:12PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "8:45PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Matthew",
            "start_time": "9:12AM",
            "end_time": "9:27AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Michelle",
            "start_time": "10:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Carol",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Stephanie",
            "start_time": "1:37PM",
            "end_time": "2:07PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Jessica",
            "start_time": "3:45PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Linda",
            "start_time": "4:56PM",
            "end_time": "6:26PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "8:45PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef time_diff_minutes(start, end):\n    return (end - start).total_seconds() // 60\n\n# Travel times dictionary: {from: {to: minutes}}\ntravel_times = {\n    'Sunset District': {\n        'Russian Hill': 24,\n        'The Castro': 17,\n        'Richmond District': 12,\n        'Marina District': 21,\n        'North Beach': 29,\n        'Union Square': 30,\n        'Golden Gate Park': 11\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'The Castro': 21,\n        'Richmond District': 14,\n        'Marina District': 7,\n        'North Beach': 5,\n        'Union Square': 11,\n        'Golden Gate Park': 21\n    },\n    'The Castro': {\n        'Sunset District': 17,\n        'Russian Hill': 18,\n        'Richmond District': 16,\n        'Marina District': 21,\n        'North Beach': 20,\n        'Union Square': 19,\n        'Golden Gate Park': 11\n    },\n    'Richmond District': {\n        'Sunset District': 11,\n        'Russian Hill': 13,\n        'The Castro': 16,\n        'Marina District': 9,\n        'North Beach': 17,\n        'Union Square': 21,\n        'Golden Gate Park': 9\n    },\n    'Marina District': {\n        'Sunset District': 19,\n        'Russian Hill': 8,\n        'The Castro': 22,\n        'Richmond District': 11,\n        'North Beach': 11,\n        'Union Square': 16,\n        'Golden Gate Park': 18\n    },\n    'North Beach': {\n        'Sunset District': 27,\n        'Russian Hill': 4,\n        'The Castro': 22,\n        'Richmond District': 18,\n        'Marina District': 9,\n        'Union Square': 7,\n        'Golden Gate Park': 22\n    },\n    'Union Square': {\n        'Sunset District': 26,\n        'Russian Hill': 13,\n        'The Castro': 19,\n        'Richmond District': 20,\n        'Marina District': 18,\n        'North Beach': 10,\n        'Golden Gate Park': 22\n    },\n    'Golden Gate Park': {\n        'Sunset District': 10,\n        'Russian Hill': 19,\n        'The Castro': 13,\n        'Richmond District': 7,\n        'Marina District': 16,\n        'North Beach': 24,\n        'Union Square': 22\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Karen': {\n        'location': 'Russian Hill',\n        'start': parse_time('8:45PM'),\n        'end': parse_time('9:45PM'),\n        'min_duration': 60\n    },\n    'Jessica': {\n        'location': 'The Castro',\n        'start': parse_time('3:45PM'),\n        'end': parse_time('7:30PM'),\n        'min_duration': 60\n    },\n    'Matthew': {\n        'location': 'Richmond District',\n        'start': parse_time('7:30AM'),\n        'end': parse_time('3:15PM'),\n        'min_duration': 15\n    },\n    'Michelle': {\n        'location': 'Marina District',\n        'start': parse_time('10:30AM'),\n        'end': parse_time('6:45PM'),\n        'min_duration': 75\n    },\n    'Carol': {\n        'location': 'North Beach',\n        'start': parse_time('12:00PM'),\n        'end': parse_time('5:00PM'),\n        'min_duration': 90\n    },\n    'Stephanie': {\n        'location': 'Union Square',\n        'start': parse_time('10:45AM'),\n        'end': parse_time('2:15PM'),\n        'min_duration': 30\n    },\n    'Linda': {\n        'location': 'Golden Gate Park',\n        'start': parse_time('10:45AM'),\n        'end': parse_time('10:00PM'),\n        'min_duration': 90\n    }\n}\n\n# Initial state\ncurrent_time = parse_time('9:00AM')\ncurrent_location = 'Sunset District'\nschedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\nvisited_friends = set()\n\ndef can_meet_friend(friend_name, arrival_time):\n    friend = friends[friend_name]\n    start = friend['start']\n    end = friend['end']\n    duration = friend['min_duration']\n    \n    if arrival_time < start:\n        possible_start = start\n    else:\n        possible_start = arrival_time\n    \n    if possible_start + timedelta(minutes=duration) <= end:\n        return possible_start\n    return None\n\ndef find_next_friend(current_loc, current_time):\n    best_friend = None\n    best_start_time = None\n    best_travel_time = float('inf')\n    best_duration = 0\n    \n    for friend_name, friend_data in friends.items():\n        if friend_name in visited_friends:\n            continue\n            \n        location = friend_data['location']\n        travel_time = travel_times[current_loc][location]\n        arrival_time = add_minutes(current_time, travel_time)\n        \n        meet_start = can_meet_friend(friend_name, arrival_time)\n        if meet_start:\n            duration = friend_data['min_duration']\n            total_time = travel_time + duration\n            \n            # Prioritize friends with earlier end times\n            if meet_start < (best_start_time if best_start_time else datetime.max):\n                best_friend = friend_name\n                best_start_time = meet_start\n                best_travel_time = travel_time\n                best_duration = duration\n    \n    return best_friend, best_travel_time, best_duration, best_start_time\n\n# Main scheduling loop\nwhile len(visited_friends) < len(friends):\n    next_friend, travel_time, duration, meet_start = find_next_friend(current_location, current_time)\n    \n    if not next_friend:\n        break\n    \n    # Add travel action\n    travel_end_time = add_minutes(current_time, travel_time)\n    schedule.append({\n        'action': 'travel',\n        'location': current_location,\n        'duration': travel_time,\n        'time': format_time(current_time),\n        'to': friends[next_friend]['location']\n    })\n    \n    # Check if need to wait\n    if travel_end_time < meet_start:\n        schedule.append({\n            'action': 'wait',\n            'location': friends[next_friend]['location'],\n            'time': format_time(travel_end_time)\n        })\n    \n    # Add meet action\n    schedule.append({\n        'action': 'meet',\n        'location': friends[next_friend]['location'],\n        'duration': duration,\n        'time': format_time(meet_start)\n    })\n    \n    # Update state\n    visited_friends.add(next_friend)\n    current_location = friends[next_friend]['location']\n    current_time = add_minutes(meet_start, duration)\n\nprint(json.dumps({'schedule': schedule}, indent=2))\n```",
      "count": "meeting_planning_example_607"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Barbara",
            "start_time": "10:30AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "11:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Joseph",
            "start_time": "12:07PM",
            "end_time": "1:37PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jeffrey",
            "start_time": "5:30PM",
            "end_time": "6:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Joseph",
            "start_time": "9:24AM",
            "end_time": "10:54AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "11:16AM",
            "end_time": "11:46AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Barbara",
            "start_time": "12:03PM",
            "end_time": "12:18PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jeffrey",
            "start_time": "5:30PM",
            "end_time": "6:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_time(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n        ('Golden Gate Park', 'Bayview'): 23,\n        ('Golden Gate Park', 'Mission District'): 17,\n        ('Golden Gate Park', 'Embarcadero'): 25,\n        ('Golden Gate Park', 'Financial District'): 26,\n        ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n        ('Fisherman\\'s Wharf', 'Bayview'): 26,\n        ('Fisherman\\'s Wharf', 'Mission District'): 22,\n        ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n        ('Fisherman\\'s Wharf', 'Financial District'): 11,\n        ('Bayview', 'Golden Gate Park'): 22,\n        ('Bayview', 'Fisherman\\'s Wharf'): 25,\n        ('Bayview', 'Mission District'): 13,\n        ('Bayview', 'Embarcadero'): 19,\n        ('Bayview', 'Financial District'): 19,\n        ('Mission District', 'Golden Gate Park'): 17,\n        ('Mission District', 'Fisherman\\'s Wharf'): 22,\n        ('Mission District', 'Bayview'): 15,\n        ('Mission District', 'Embarcadero'): 19,\n        ('Mission District', 'Financial District'): 17,\n        ('Embarcadero', 'Golden Gate Park'): 25,\n        ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n        ('Embarcadero', 'Bayview'): 21,\n        ('Embarcadero', 'Mission District'): 20,\n        ('Embarcadero', 'Financial District'): 5,\n        ('Financial District', 'Golden Gate Park'): 23,\n        ('Financial District', 'Fisherman\\'s Wharf'): 10,\n        ('Financial District', 'Bayview'): 19,\n        ('Financial District', 'Mission District'): 17,\n        ('Financial District', 'Embarcadero'): 4\n    }\n    return travel_times.get((from_loc, to_loc), 0)\n\ndef main():\n    current_time = parse_time('9:00AM')\n    current_location = 'Golden Gate Park'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n    \n    # David at Embarcadero 8:15AM-9:00AM (can't meet, already 9AM)\n    \n    # Barbara at Financial District 10:30AM-4:30PM (15 min)\n    travel_time = get_travel_time(current_location, 'Financial District')\n    arrival_time = add_time(current_time, travel_time)\n    if arrival_time <= parse_time('4:30PM'):\n        meet_time = max(arrival_time, parse_time('10:30AM'))\n        if meet_time <= parse_time('4:30PM'):\n            duration = 15\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": format_time(current_time),\n                \"to\": \"Financial District\"\n            })\n            if arrival_time < parse_time('10:30AM'):\n                wait_time = (parse_time('10:30AM') - arrival_time).total_seconds() / 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Financial District\",\n                    \"time\": format_time(arrival_time),\n                    \"duration\": wait_time\n                })\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Financial District\",\n                \"duration\": duration,\n                \"time\": format_time(meet_time)\n            })\n            current_time = add_time(meet_time, duration)\n            current_location = 'Financial District'\n    \n    # Kevin at Mission District 11:15AM-3:15PM (30 min)\n    travel_time = get_travel_time(current_location, 'Mission District')\n    arrival_time = add_time(current_time, travel_time)\n    if arrival_time <= parse_time('3:15PM'):\n        meet_time = max(arrival_time, parse_time('11:15AM'))\n        if meet_time <= parse_time('3:15PM'):\n            duration = 30\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": format_time(current_time),\n                \"to\": \"Mission District\"\n            })\n            if arrival_time < parse_time('11:15AM'):\n                wait_time = (parse_time('11:15AM') - arrival_time).total_seconds() / 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Mission District\",\n                    \"time\": format_time(arrival_time),\n                    \"duration\": wait_time\n                })\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Mission District\",\n                \"duration\": duration,\n                \"time\": format_time(meet_time)\n            })\n            current_time = add_time(meet_time, duration)\n            current_location = 'Mission District'\n    \n    # Joseph at Fisherman's Wharf 8:00AM-5:30PM (90 min)\n    travel_time = get_travel_time(current_location, 'Fisherman\\'s Wharf')\n    arrival_time = add_time(current_time, travel_time)\n    if arrival_time <= parse_time('5:30PM'):\n        meet_time = max(arrival_time, parse_time('8:00AM'))\n        if meet_time <= parse_time('5:30PM'):\n            duration = 90\n            if add_time(meet_time, duration) <= parse_time('5:30PM'):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_time,\n                    \"time\": format_time(current_time),\n                    \"to\": \"Fisherman\\'s Wharf\"\n                })\n                if arrival_time < parse_time('8:00AM'):\n                    wait_time = (parse_time('8:00AM') - arrival_time).total_seconds() / 60\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": \"Fisherman\\'s Wharf\",\n                        \"time\": format_time(arrival_time),\n                        \"duration\": wait_time\n                    })\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Fisherman\\'s Wharf\",\n                    \"duration\": duration,\n                    \"time\": format_time(meet_time)\n                })\n                current_time = add_time(meet_time, duration)\n                current_location = 'Fisherman\\'s Wharf'\n    \n    # Jeffrey at Bayview 5:30PM-9:30PM (60 min)\n    travel_time = get_travel_time(current_location, 'Bayview')\n    arrival_time = add_time(current_time, travel_time)\n    if arrival_time <= parse_time('9:30PM'):\n        meet_time = max(arrival_time, parse_time('5:30PM'))\n        if meet_time <= parse_time('9:30PM'):\n            duration = 60\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": format_time(current_time),\n                \"to\": \"Bayview\"\n            })\n            if arrival_time < parse_time('5:30PM'):\n                wait_time = (parse_time('5:30PM') - arrival_time).total_seconds() / 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Bayview\",\n                    \"time\": format_time(arrival_time),\n                    \"duration\": wait_time\n                })\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Bayview\",\n                \"duration\": duration,\n                \"time\": format_time(meet_time)\n            })\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_432"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Nancy",
            "start_time": "9:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Mary",
            "start_time": "11:17AM",
            "end_time": "12:32PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jessica",
            "start_time": "12:48PM",
            "end_time": "1:33PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Nancy",
            "start_time": "9:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Mary",
            "start_time": "11:17AM",
            "end_time": "12:32PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jessica",
            "start_time": "12:48PM",
            "end_time": "1:33PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    'Financial District': {\n        'Chinatown': 5,\n        'Alamo Square': 17,\n        'Bayview': 19,\n        'Fisherman\\'s Wharf': 10\n    },\n    'Chinatown': {\n        'Financial District': 5,\n        'Alamo Square': 17,\n        'Bayview': 22,\n        'Fisherman\\'s Wharf': 8\n    },\n    'Alamo Square': {\n        'Financial District': 17,\n        'Chinatown': 16,\n        'Bayview': 16,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Bayview': {\n        'Financial District': 19,\n        'Chinatown': 18,\n        'Alamo Square': 16,\n        'Fisherman\\'s Wharf': 25\n    },\n    'Fisherman\\'s Wharf': {\n        'Financial District': 11,\n        'Chinatown': 12,\n        'Alamo Square': 20,\n        'Bayview': 26\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Nancy': {\n        'location': 'Chinatown',\n        'start': time_to_minutes('9:30AM'),\n        'end': time_to_minutes('1:30PM'),\n        'duration': 90\n    },\n    'Mary': {\n        'location': 'Alamo Square',\n        'start': time_to_minutes('7:00AM'),\n        'end': time_to_minutes('9:00PM'),\n        'duration': 75\n    },\n    'Jessica': {\n        'location': 'Bayview',\n        'start': time_to_minutes('11:15AM'),\n        'end': time_to_minutes('1:45PM'),\n        'duration': 45\n    },\n    'Rebecca': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': time_to_minutes('7:00AM'),\n        'end': time_to_minutes('8:30AM'),\n        'duration': 45\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Financial District'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        # Arrive at destination\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if friend is available\n        window_start = friend['start']\n        window_end = friend['end']\n        meet_duration = friend['duration']\n        \n        if current_time < window_start:\n            # Need to wait\n            wait_duration = window_start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time = window_start\n        \n        # Check if we can meet\n        if current_time + meet_duration <= window_end:\n            # Meet the friend\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meet_duration,\n                \"time\": minutes_to_time(current_time),\n                \"with\": friend_name\n            })\n            current_time += meet_duration\n            met_friends.add(friend_name)\n        else:\n            # Can't meet this friend, skip\n            pass\n    \n    return schedule, len(met_friends)\n\n# Try all possible orders of meeting friends\nbest_schedule = None\nbest_met = 0\n\nfor order in permutations(friends.keys()):\n    schedule, met = calculate_schedule(order)\n    if met > best_met:\n        best_met = met\n        best_schedule = schedule\n\n# Output the best schedule\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_309"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Michelle",
            "start_time": "9:30AM",
            "end_time": "9:45AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Robert",
            "start_time": "9:53AM",
            "end_time": "10:23AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "George",
            "start_time": "10:40AM",
            "end_time": "11:10AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "William",
            "start_time": "6:30PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Michelle",
            "start_time": "9:30AM",
            "end_time": "9:45AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "George",
            "start_time": "10:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Robert",
            "start_time": "11:19AM",
            "end_time": "11:49AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "William",
            "start_time": "6:30PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Sunset District\": {\n        \"Russian Hill\": 24,\n        \"Chinatown\": 30,\n        \"Presidio\": 16,\n        \"Fisherman's Wharf\": 29\n    },\n    \"Russian Hill\": {\n        \"Sunset District\": 23,\n        \"Chinatown\": 9,\n        \"Presidio\": 14,\n        \"Fisherman's Wharf\": 7\n    },\n    \"Chinatown\": {\n        \"Sunset District\": 29,\n        \"Russian Hill\": 7,\n        \"Presidio\": 19,\n        \"Fisherman's Wharf\": 8\n    },\n    \"Presidio\": {\n        \"Sunset District\": 15,\n        \"Russian Hill\": 14,\n        \"Chinatown\": 21,\n        \"Fisherman's Wharf\": 19\n    },\n    \"Fisherman's Wharf\": {\n        \"Sunset District\": 27,\n        \"Russian Hill\": 7,\n        \"Chinatown\": 12,\n        \"Presidio\": 17\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"William\": {\n        \"location\": \"Russian Hill\",\n        \"available_start\": time_to_minutes(\"6:30PM\"),\n        \"available_end\": time_to_minutes(\"8:45PM\"),\n        \"min_duration\": 105\n    },\n    \"Michelle\": {\n        \"location\": \"Chinatown\",\n        \"available_start\": time_to_minutes(\"8:15AM\"),\n        \"available_end\": time_to_minutes(\"2:00PM\"),\n        \"min_duration\": 15\n    },\n    \"George\": {\n        \"location\": \"Presidio\",\n        \"available_start\": time_to_minutes(\"10:30AM\"),\n        \"available_end\": time_to_minutes(\"6:45PM\"),\n        \"min_duration\": 30\n    },\n    \"Robert\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"available_start\": time_to_minutes(\"9:00AM\"),\n        \"available_end\": time_to_minutes(\"1:45PM\"),\n        \"min_duration\": 30\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Sunset District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data[\"location\"]\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        current_time = travel_end\n        current_location = destination\n        \n        # Check if friend is available\n        available_start = friend_data[\"available_start\"]\n        available_end = friend_data[\"available_end\"]\n        min_duration = friend_data[\"min_duration\"]\n        \n        if current_time < available_start:\n            # Need to wait\n            wait_duration = available_start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = available_start\n        \n        # Check if we can meet\n        meeting_end = current_time + min_duration\n        if meeting_end > available_end:\n            return None  # Can't meet this friend\n        \n        # Meet the friend\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_duration,\n            \"time\": minutes_to_time(current_time),\n            \"with\": friend\n        })\n        met_friends.add(friend)\n        current_time = meeting_end\n    \n    # After meeting all friends in order, check if we can meet William (special case)\n    william_data = friends[\"William\"]\n    if \"William\" not in met_friends:\n        destination = william_data[\"location\"]\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        \n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        current_time = travel_end\n        current_location = destination\n        \n        # Check William's availability\n        available_start = william_data[\"available_start\"]\n        available_end = william_data[\"available_end\"]\n        min_duration = william_data[\"min_duration\"]\n        \n        if current_time < available_start:\n            wait_duration = available_start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = available_start\n        \n        meeting_end = current_time + min_duration\n        if meeting_end > available_end:\n            return None  # Can't meet William\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_duration,\n            \"time\": minutes_to_time(current_time),\n            \"with\": \"William\"\n        })\n        met_friends.add(\"William\")\n    \n    return schedule if len(met_friends) == 4 else None\n\n# Try all possible orders of meeting friends (excluding William initially)\nfriend_names = [\"Michelle\", \"George\", \"Robert\"]\nbest_schedule = None\n\n# Try all permutations of the three friends\nfor order in permutations(friend_names):\n    # Try meeting William last\n    test_order = list(order) + [\"William\"]\n    schedule = calculate_schedule(test_order)\n    if schedule and (best_schedule is None or len(schedule) < len(best_schedule)):\n        best_schedule = schedule\n\n# If no schedule meets all friends, try meeting just 3 friends\nif best_schedule is None:\n    for order in permutations(friend_names):\n        schedule = calculate_schedule(list(order))\n        if schedule and (best_schedule is None or len(schedule) < len(best_schedule)):\n            best_schedule = schedule\n\n# Output the best schedule found\nif best_schedule:\n    output = {\"schedule\": best_schedule}\nelse:\n    output = {\"error\": \"No valid schedule found that meets all constraints\"}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_322"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mary",
            "start_time": "9:25AM",
            "end_time": "10:10AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kevin",
            "start_time": "10:17AM",
            "end_time": "11:47AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Stephanie",
            "start_time": "12:02PM",
            "end_time": "2:02PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Deborah",
            "start_time": "3:00PM",
            "end_time": "5:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Emily",
            "start_time": "5:19PM",
            "end_time": "7:04PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mary",
            "start_time": "9:25AM",
            "end_time": "10:10AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kevin",
            "start_time": "10:17AM",
            "end_time": "11:47AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Stephanie",
            "start_time": "12:02PM",
            "end_time": "2:02PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Deborah",
            "start_time": "3:00PM",
            "end_time": "5:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Emily",
            "start_time": "5:19PM",
            "end_time": "7:04PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Embarcadero': {\n        'Golden Gate Park': 25,\n        'Haight-Ashbury': 21,\n        'Bayview': 21,\n        'Presidio': 20,\n        'Financial District': 5\n    },\n    'Golden Gate Park': {\n        'Embarcadero': 25,\n        'Haight-Ashbury': 7,\n        'Bayview': 23,\n        'Presidio': 11,\n        'Financial District': 26\n    },\n    'Haight-Ashbury': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 7,\n        'Bayview': 18,\n        'Presidio': 15,\n        'Financial District': 21\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Golden Gate Park': 22,\n        'Haight-Ashbury': 19,\n        'Presidio': 31,\n        'Financial District': 19\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Haight-Ashbury': 15,\n        'Bayview': 31,\n        'Financial District': 23\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Golden Gate Park': 23,\n        'Haight-Ashbury': 19,\n        'Bayview': 19,\n        'Presidio': 22\n    }\n}\n\n# Friend availability\nfriends = {\n    'Mary': {\n        'location': 'Golden Gate Park',\n        'start': '8:45AM',\n        'end': '11:45AM',\n        'duration': 45\n    },\n    'Kevin': {\n        'location': 'Haight-Ashbury',\n        'start': '10:15AM',\n        'end': '4:15PM',\n        'duration': 90\n    },\n    'Deborah': {\n        'location': 'Bayview',\n        'start': '3:00PM',\n        'end': '7:15PM',\n        'duration': 120\n    },\n    'Stephanie': {\n        'location': 'Presidio',\n        'start': '10:00AM',\n        'end': '5:15PM',\n        'duration': 120\n    },\n    'Emily': {\n        'location': 'Financial District',\n        'start': '11:30AM',\n        'end': '9:45PM',\n        'duration': 105\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name):\n    friend = friends[friend_name]\n    start_time = time_to_minutes(friend['start'])\n    end_time = time_to_minutes(friend['end'])\n    duration = friend['duration']\n    if current_time + duration > end_time:\n        return False\n    return max(current_time, start_time) + duration <= end_time\n\ndef get_meet_time(current_time, friend_name):\n    friend = friends[friend_name]\n    start_time = time_to_minutes(friend['start'])\n    end_time = time_to_minutes(friend['end'])\n    duration = friend['duration']\n    meet_start = max(current_time, start_time)\n    if meet_start + duration > end_time:\n        return None\n    return meet_start\n\ndef generate_schedule(order):\n    schedule = []\n    current_location = 'Embarcadero'\n    current_time = time_to_minutes('9:00AM')\n    schedule.append({\n        'action': 'start',\n        'location': current_location,\n        'time': minutes_to_time(current_time)\n    })\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        destination = friend['location']\n        if current_location != destination:\n            travel_duration = travel_times[current_location][destination]\n            travel_start = current_time\n            travel_end = current_time + travel_duration\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': minutes_to_time(travel_start),\n                'to': destination\n            })\n            current_time = travel_end\n            current_location = destination\n        \n        meet_start = get_meet_time(current_time, friend_name)\n        if meet_start is None:\n            return None\n        \n        if current_time < meet_start:\n            wait_duration = meet_start - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = meet_start\n        \n        meet_duration = friend['duration']\n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': meet_duration,\n            'time': minutes_to_time(current_time)\n        })\n        current_time += meet_duration\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if schedule is None:\n        return -1\n    total_meetings = sum(1 for item in schedule if item['action'] == 'meet')\n    return total_meetings\n\ndef find_best_schedule():\n    best_schedule = None\n    best_score = -1\n    for order in permutations(friends.keys()):\n        schedule = generate_schedule(order)\n        score = evaluate_schedule(schedule)\n        if score > best_score:\n            best_score = score\n            best_schedule = schedule\n    return best_schedule\n\nbest_schedule = find_best_schedule()\nprint(json.dumps({\"schedule\": best_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_479"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Timothy",
            "start_time": "8:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Timothy",
            "start_time": "8:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    timothy_start = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    timothy_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 45  # minutes\n    travel_to_richmond = 12  # minutes\n    travel_to_alamo = 13  # minutes\n\n    # Calculate possible meeting window\n    meeting_window_start = timothy_start\n    meeting_window_end = timothy_end - timedelta(minutes=min_meeting_duration)\n\n    # Calculate earliest we can arrive at Richmond\n    earliest_arrival_richmond = arrival_time + timedelta(minutes=travel_to_richmond)\n\n    # Calculate when we need to leave to make the meeting\n    if earliest_arrival_richmond <= meeting_window_end:\n        # We can make the meeting\n        if earliest_arrival_richmond < meeting_window_start:\n            # Need to wait\n            wait_duration = (meeting_window_start - earliest_arrival_richmond).total_seconds() / 60\n            travel_back_time = meeting_window_start + timedelta(minutes=min_meeting_duration)\n            schedule = [\n                {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_to_richmond, \n                 \"time\": format_time(arrival_time), \"to\": \"Richmond District\"},\n                {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": format_time(earliest_arrival_richmond)},\n                {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": min_meeting_duration, \n                 \"time\": format_time(meeting_window_start)},\n                {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_to_alamo, \n                 \"time\": format_time(travel_back_time), \"to\": \"Alamo Square\"}\n            ]\n        else:\n            # Can meet immediately upon arrival\n            travel_back_time = earliest_arrival_richmond + timedelta(minutes=min_meeting_duration)\n            schedule = [\n                {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_to_richmond, \n                 \"time\": format_time(arrival_time), \"to\": \"Richmond District\"},\n                {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": min_meeting_duration, \n                 \"time\": format_time(earliest_arrival_richmond)},\n                {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_to_alamo, \n                 \"time\": format_time(travel_back_time), \"to\": \"Alamo Square\"}\n            ]\n    else:\n        # Cannot make the meeting\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": format_time(arrival_time)},\n            {\"action\": \"note\", \"location\": \"None\", \"time\": format_time(arrival_time), \n             \"message\": \"Cannot meet Timothy given constraints\"}\n        ]\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_98"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "9:08AM",
            "end_time": "11:08AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Kimberly",
            "start_time": "4:30PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Patricia",
            "start_time": "6:00PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "9:08AM",
            "end_time": "11:08AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Kimberly",
            "start_time": "4:30PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Patricia",
            "start_time": "6:00PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    minutes = time_to_minutes(time_str)\n    new_minutes = minutes + minutes_to_add\n    return minutes_to_time(new_minutes)\n\ndef calculate_schedule():\n    # Travel times in minutes\n    travel_times = {\n        ('Nob Hill', 'North Beach'): 8,\n        ('Nob Hill', 'Fisherman\\'s Wharf'): 11,\n        ('Nob Hill', 'Bayview'): 19,\n        ('North Beach', 'Nob Hill'): 7,\n        ('North Beach', 'Fisherman\\'s Wharf'): 5,\n        ('North Beach', 'Bayview'): 22,\n        ('Fisherman\\'s Wharf', 'Nob Hill'): 11,\n        ('Fisherman\\'s Wharf', 'North Beach'): 6,\n        ('Fisherman\\'s Wharf', 'Bayview'): 26,\n        ('Bayview', 'Nob Hill'): 20,\n        ('Bayview', 'North Beach'): 21,\n        ('Bayview', 'Fisherman\\'s Wharf'): 25,\n    }\n\n    # Constraints\n    helen_start = '7:00AM'\n    helen_end = '4:45PM'\n    helen_duration = 120\n\n    kimberly_start = '4:30PM'\n    kimberly_end = '9:00PM'\n    kimberly_duration = 45\n\n    patricia_start = '6:00PM'\n    patricia_end = '9:15PM'\n    patricia_duration = 120\n\n    current_time = '9:00AM'\n    current_location = 'Nob Hill'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Try to meet Helen first\n    travel_to_north_beach = travel_times[(current_location, 'North Beach')]\n    arrival_north_beach = add_minutes_to_time(current_time, travel_to_north_beach)\n    helen_available_start = helen_start\n    helen_available_end = helen_end\n\n    # Calculate possible meeting time with Helen\n    meeting_start = max(time_to_minutes(arrival_north_beach), time_to_minutes(helen_available_start))\n    meeting_end = meeting_start + helen_duration\n    if meeting_end <= time_to_minutes(helen_available_end):\n        # Add travel to North Beach\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_north_beach,\n            \"time\": current_time,\n            \"to\": \"North Beach\"\n        })\n        current_time = arrival_north_beach\n        current_location = 'North Beach'\n\n        # Check if need to wait\n        if time_to_minutes(current_time) < meeting_start:\n            wait_duration = meeting_start - time_to_minutes(current_time)\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": current_time\n            })\n            current_time = minutes_to_time(meeting_start)\n\n        # Add meeting with Helen\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": helen_duration,\n            \"time\": current_time\n        })\n        current_time = minutes_to_time(meeting_end)\n\n        # Now try to meet Kimberly\n        travel_to_fishermans = travel_times[(current_location, 'Fisherman\\'s Wharf')]\n        arrival_fishermans = add_minutes_to_time(current_time, travel_to_fishermans)\n        kimberly_available_start = kimberly_start\n        kimberly_available_end = kimberly_end\n\n        # Calculate possible meeting time with Kimberly\n        meeting_start_k = max(time_to_minutes(arrival_fishermans), time_to_minutes(kimberly_available_start))\n        meeting_end_k = meeting_start_k + kimberly_duration\n        if meeting_end_k <= time_to_minutes(kimberly_available_end):\n            # Add travel to Fisherman's Wharf\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_fishermans,\n                \"time\": current_time,\n                \"to\": \"Fisherman\\'s Wharf\"\n            })\n            current_time = arrival_fishermans\n            current_location = 'Fisherman\\'s Wharf'\n\n            # Check if need to wait\n            if time_to_minutes(current_time) < meeting_start_k:\n                wait_duration = meeting_start_k - time_to_minutes(current_time)\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": current_time\n                })\n                current_time = minutes_to_time(meeting_start_k)\n\n            # Add meeting with Kimberly\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": kimberly_duration,\n                \"time\": current_time\n            })\n            current_time = minutes_to_time(meeting_end_k)\n\n        # Now try to meet Patricia\n        travel_to_bayview = travel_times[(current_location, 'Bayview')]\n        arrival_bayview = add_minutes_to_time(current_time, travel_to_bayview)\n        patricia_available_start = patricia_start\n        patricia_available_end = patricia_end\n\n        # Calculate possible meeting time with Patricia\n        meeting_start_p = max(time_to_minutes(arrival_bayview), time_to_minutes(patricia_available_start))\n        meeting_end_p = meeting_start_p + patricia_duration\n        if meeting_end_p <= time_to_minutes(patricia_available_end):\n            # Add travel to Bayview\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_to_bayview,\n                \"time\": current_time,\n                \"to\": \"Bayview\"\n            })\n            current_time = arrival_bayview\n            current_location = 'Bayview'\n\n            # Check if need to wait\n            if time_to_minutes(current_time) < meeting_start_p:\n                wait_duration = meeting_start_p - time_to_minutes(current_time)\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": current_time\n                })\n                current_time = minutes_to_time(meeting_start_p)\n\n            # Add meeting with Patricia\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": patricia_duration,\n                \"time\": current_time\n            })\n            current_time = minutes_to_time(meeting_end_p)\n\n    return {\"schedule\": schedule}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_222"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Margaret",
            "start_time": "9:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Matthew",
            "start_time": "11:04AM",
            "end_time": "12:34PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Kimberly",
            "start_time": "1:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "3:16PM",
            "end_time": "3:31PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Kenneth",
            "start_time": "3:53PM",
            "end_time": "4:53PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Helen",
            "start_time": "7:45PM",
            "end_time": "8:45PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Rebecca",
            "start_time": "9:15PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Matthew",
            "start_time": "11:00AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Kimberly",
            "start_time": "1:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "3:16PM",
            "end_time": "3:31PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Kenneth",
            "start_time": "3:53PM",
            "end_time": "4:53PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Margaret",
            "start_time": "5:11PM",
            "end_time": "6:41PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Helen",
            "start_time": "7:45PM",
            "end_time": "8:45PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Rebecca",
            "start_time": "9:15PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Russian Hill': {\n        'Presidio': 14,\n        'Chinatown': 9,\n        'Pacific Heights': 7,\n        'Richmond District': 14,\n        'Fisherman\\'s Wharf': 7,\n        'Golden Gate Park': 21,\n        'Bayview': 23\n    },\n    'Presidio': {\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Pacific Heights': 11,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 19,\n        'Golden Gate Park': 12,\n        'Bayview': 31\n    },\n    'Chinatown': {\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Pacific Heights': 10,\n        'Richmond District': 20,\n        'Fisherman\\'s Wharf': 8,\n        'Golden Gate Park': 23,\n        'Bayview': 22\n    },\n    'Pacific Heights': {\n        'Russian Hill': 7,\n        'Presidio': 11,\n        'Chinatown': 11,\n        'Richmond District': 12,\n        'Fisherman\\'s Wharf': 13,\n        'Golden Gate Park': 15,\n        'Bayview': 22\n    },\n    'Richmond District': {\n        'Russian Hill': 13,\n        'Presidio': 7,\n        'Chinatown': 20,\n        'Pacific Heights': 10,\n        'Fisherman\\'s Wharf': 18,\n        'Golden Gate Park': 9,\n        'Bayview': 26\n    },\n    'Fisherman\\'s Wharf': {\n        'Russian Hill': 7,\n        'Presidio': 17,\n        'Chinatown': 12,\n        'Pacific Heights': 12,\n        'Richmond District': 18,\n        'Golden Gate Park': 25,\n        'Bayview': 26\n    },\n    'Golden Gate Park': {\n        'Russian Hill': 19,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'Pacific Heights': 16,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23\n    },\n    'Bayview': {\n        'Russian Hill': 23,\n        'Presidio': 31,\n        'Chinatown': 18,\n        'Pacific Heights': 23,\n        'Richmond District': 25,\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Matthew': {\n        'location': 'Presidio',\n        'start': '11:00AM',\n        'end': '9:00PM',\n        'duration': 90\n    },\n    'Margaret': {\n        'location': 'Chinatown',\n        'start': '9:15AM',\n        'end': '6:45PM',\n        'duration': 90\n    },\n    'Nancy': {\n        'location': 'Pacific Heights',\n        'start': '2:15PM',\n        'end': '5:00PM',\n        'duration': 15\n    },\n    'Helen': {\n        'location': 'Richmond District',\n        'start': '7:45PM',\n        'end': '10:00PM',\n        'duration': 60\n    },\n    'Rebecca': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': '9:15PM',\n        'end': '10:15PM',\n        'duration': 60\n    },\n    'Kimberly': {\n        'location': 'Golden Gate Park',\n        'start': '1:00PM',\n        'end': '4:30PM',\n        'duration': 120\n    },\n    'Kenneth': {\n        'location': 'Bayview',\n        'start': '2:30PM',\n        'end': '6:00PM',\n        'duration': 60\n    }\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    travel_time = travel_times[current_location][friend['location']]\n    arrival_time = current_time + travel_time\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    \n    if arrival_time > friend_end:\n        return None\n    \n    start_meeting = max(arrival_time, friend_start)\n    end_meeting = start_meeting + friend['duration']\n    \n    if end_meeting > friend_end:\n        return None\n    \n    return {\n        'travel_time': travel_time,\n        'start_meeting': start_meeting,\n        'end_meeting': end_meeting\n    }\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Russian Hill'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend_name in order:\n        if friend_name in met_friends:\n            continue\n        \n        friend = friends[friend_name]\n        result = can_meet_friend(current_time, friend_name, current_location)\n        if result is None:\n            continue\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': result['travel_time'],\n            'time': minutes_to_time(current_time),\n            'to': friend['location']\n        })\n        current_time += result['travel_time']\n        current_location = friend['location']\n        \n        if current_time < result['start_meeting']:\n            wait_time = result['start_meeting'] - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = result['start_meeting']\n        \n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': friend['duration'],\n            'time': minutes_to_time(current_time)\n        })\n        current_time = result['end_meeting']\n        met_friends.add(friend_name)\n    \n    # Try to meet Helen and Rebecca at the end\n    for friend_name in ['Helen', 'Rebecca']:\n        if friend_name in met_friends:\n            continue\n        friend = friends[friend_name]\n        result = can_meet_friend(current_time, friend_name, current_location)\n        if result is None:\n            continue\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': result['travel_time'],\n            'time': minutes_to_time(current_time),\n            'to': friend['location']\n        })\n        current_time += result['travel_time']\n        current_location = friend['location']\n        \n        if current_time < result['start_meeting']:\n            wait_time = result['start_meeting'] - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time)\n            })\n            current_time = result['start_meeting']\n        \n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': friend['duration'],\n            'time': minutes_to_time(current_time)\n        })\n        current_time = result['end_meeting']\n        met_friends.add(friend_name)\n    \n    return len(met_friends), schedule\n\ndef generate_best_schedule():\n    best_count = 0\n    best_schedule = []\n    friend_names = list(friends.keys())\n    \n    # Try different orders prioritizing friends with tighter windows\n    test_orders = [\n        ['Margaret', 'Matthew', 'Kimberly', 'Kenneth', 'Nancy', 'Helen', 'Rebecca'],\n        ['Margaret', 'Kimberly', 'Matthew', 'Kenneth', 'Nancy', 'Helen', 'Rebecca'],\n        ['Margaret', 'Kimberly', 'Kenneth', 'Matthew', 'Nancy', 'Helen', 'Rebecca'],\n        ['Margaret', 'Matthew', 'Kimberly', 'Nancy', 'Kenneth', 'Helen', 'Rebecca'],\n    ]\n    \n    for order in test_orders:\n        count, schedule = evaluate_schedule(order)\n        if count > best_count:\n            best_count = count\n            best_schedule = schedule\n    \n    return best_schedule\n\nbest_schedule = generate_best_schedule()\noutput = {'schedule': best_schedule}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_629"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Rebecca",
            "start_time": "9:19AM",
            "end_time": "10:49AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "James",
            "start_time": "11:05AM",
            "end_time": "12:35PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Sarah",
            "start_time": "12:54PM",
            "end_time": "2:24PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Melissa",
            "start_time": "2:49PM",
            "end_time": "4:19PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Amanda",
            "start_time": "6:30PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Rebecca",
            "start_time": "9:19AM",
            "end_time": "10:49AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "James",
            "start_time": "11:05AM",
            "end_time": "12:35PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Sarah",
            "start_time": "12:54PM",
            "end_time": "2:24PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Melissa",
            "start_time": "2:49PM",
            "end_time": "4:19PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Amanda",
            "start_time": "6:30PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    'The Castro': {\n        'Bayview': 19,\n        'Pacific Heights': 16,\n        'Alamo Square': 8,\n        'Fisherman\\'s Wharf': 24,\n        'Golden Gate Park': 11\n    },\n    'Bayview': {\n        'The Castro': 20,\n        'Pacific Heights': 23,\n        'Alamo Square': 16,\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22\n    },\n    'Pacific Heights': {\n        'The Castro': 16,\n        'Bayview': 22,\n        'Alamo Square': 10,\n        'Fisherman\\'s Wharf': 13,\n        'Golden Gate Park': 15\n    },\n    'Alamo Square': {\n        'The Castro': 8,\n        'Bayview': 16,\n        'Pacific Heights': 10,\n        'Fisherman\\'s Wharf': 19,\n        'Golden Gate Park': 9\n    },\n    'Fisherman\\'s Wharf': {\n        'The Castro': 26,\n        'Bayview': 26,\n        'Pacific Heights': 12,\n        'Alamo Square': 20,\n        'Golden Gate Park': 25\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Bayview': 23,\n        'Pacific Heights': 16,\n        'Alamo Square': 10,\n        'Fisherman\\'s Wharf': 24\n    }\n}\n\nfriends = {\n    'Rebecca': {\n        'location': 'Bayview',\n        'start': time_to_minutes('9:00AM'),\n        'end': time_to_minutes('12:45PM'),\n        'duration': 90\n    },\n    'Amanda': {\n        'location': 'Pacific Heights',\n        'start': time_to_minutes('6:30PM'),\n        'end': time_to_minutes('9:45PM'),\n        'duration': 90\n    },\n    'James': {\n        'location': 'Alamo Square',\n        'start': time_to_minutes('9:45AM'),\n        'end': time_to_minutes('9:15PM'),\n        'duration': 90\n    },\n    'Sarah': {\n        'location': 'Fisherman\\'s Wharf',\n        'start': time_to_minutes('8:00AM'),\n        'end': time_to_minutes('9:30PM'),\n        'duration': 90\n    },\n    'Melissa': {\n        'location': 'Golden Gate Park',\n        'start': time_to_minutes('9:00AM'),\n        'end': time_to_minutes('6:45PM'),\n        'duration': 90\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'The Castro'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        travel_duration = travel_times[current_location][destination]\n        arrival_time = current_time + travel_duration\n        \n        # Check if we can meet the friend\n        meeting_start = max(arrival_time, friend_data['start'])\n        meeting_end = meeting_start + friend_data['duration']\n        \n        if meeting_end > friend_data['end']:\n            continue  # Cannot meet this friend in this order\n        \n        # Add travel action\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time),\n            \"to\": destination\n        })\n        \n        # Add wait action if needed\n        if arrival_time < friend_data['start']:\n            wait_duration = friend_data['start'] - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": destination,\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_duration\n            })\n        \n        # Add meet action\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": friend_data['duration'],\n            \"time\": minutes_to_time(meeting_start),\n            \"with\": friend\n        })\n        \n        met_friends.add(friend)\n        current_time = meeting_end\n        current_location = destination\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of friends\nfriend_names = list(friends.keys())\nbest_schedule = None\nbest_meetings = 0\n\n# Try all permutations to find the best schedule\nfor perm in permutations(friend_names):\n    schedule, num_meetings = calculate_schedule(perm)\n    if num_meetings > best_meetings:\n        best_meetings = num_meetings\n        best_schedule = schedule\n\n# Ensure we meet at least some friends\nif best_schedule is None:\n    best_schedule = [{\"action\": \"start\", \"location\": \"The Castro\", \"time\": \"9:00AM\"}]\n\n# Output the result\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_468"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Joseph",
            "start_time": "12:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Elizabeth",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "2:09PM",
            "end_time": "3:09PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "William",
            "start_time": "3:18PM",
            "end_time": "4:03PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Anthony",
            "start_time": "4:25PM",
            "end_time": "5:40PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Stephanie",
            "start_time": "5:47PM",
            "end_time": "7:02PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Barbara",
            "start_time": "7:15PM",
            "end_time": "8:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "William",
            "start_time": "10:45AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Sandra",
            "start_time": "11:40AM",
            "end_time": "11:55AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Elizabeth",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "2:09PM",
            "end_time": "3:09PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Anthony",
            "start_time": "3:32PM",
            "end_time": "4:47PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Stephanie",
            "start_time": "4:54PM",
            "end_time": "6:09PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Barbara",
            "start_time": "7:15PM",
            "end_time": "8:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes between locations\ntravel_times = {\n    \"Marina District\": {\n        \"Richmond District\": 11,\n        \"Union Square\": 16,\n        \"Nob Hill\": 12,\n        \"Fisherman's Wharf\": 10,\n        \"Golden Gate Park\": 18,\n        \"Embarcadero\": 14,\n        \"Financial District\": 17,\n        \"North Beach\": 11,\n        \"Presidio\": 10\n    },\n    \"Richmond District\": {\n        \"Marina District\": 9,\n        \"Union Square\": 21,\n        \"Nob Hill\": 17,\n        \"Fisherman's Wharf\": 18,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 19,\n        \"Financial District\": 22,\n        \"North Beach\": 17,\n        \"Presidio\": 7\n    },\n    \"Union Square\": {\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Nob Hill\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 11,\n        \"Financial District\": 9,\n        \"North Beach\": 10,\n        \"Presidio\": 24\n    },\n    \"Nob Hill\": {\n        \"Marina District\": 11,\n        \"Richmond District\": 14,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 10,\n        \"Golden Gate Park\": 17,\n        \"Embarcadero\": 9,\n        \"Financial District\": 9,\n        \"North Beach\": 8,\n        \"Presidio\": 17\n    },\n    \"Fisherman's Wharf\": {\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 13,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 25,\n        \"Embarcadero\": 8,\n        \"Financial District\": 11,\n        \"North Beach\": 6,\n        \"Presidio\": 17\n    },\n    \"Golden Gate Park\": {\n        \"Marina District\": 16,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Nob Hill\": 20,\n        \"Fisherman's Wharf\": 24,\n        \"Embarcadero\": 25,\n        \"Financial District\": 26,\n        \"North Beach\": 23,\n        \"Presidio\": 11\n    },\n    \"Embarcadero\": {\n        \"Marina District\": 12,\n        \"Richmond District\": 21,\n        \"Union Square\": 10,\n        \"Nob Hill\": 10,\n        \"Fisherman's Wharf\": 6,\n        \"Golden Gate Park\": 25,\n        \"Financial District\": 5,\n        \"North Beach\": 5,\n        \"Presidio\": 20\n    },\n    \"Financial District\": {\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Nob Hill\": 8,\n        \"Fisherman's Wharf\": 10,\n        \"Golden Gate Park\": 23,\n        \"Embarcadero\": 4,\n        \"North Beach\": 7,\n        \"Presidio\": 22\n    },\n    \"North Beach\": {\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 7,\n        \"Nob Hill\": 7,\n        \"Fisherman's Wharf\": 5,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 6,\n        \"Financial District\": 8,\n        \"Presidio\": 17\n    },\n    \"Presidio\": {\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Nob Hill\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Golden Gate Park\": 12,\n        \"Embarcadero\": 20,\n        \"Financial District\": 23,\n        \"North Beach\": 18\n    }\n}\n\n# Friend constraints\nfriends = {\n    \"Stephanie\": {\n        \"location\": \"Richmond District\",\n        \"available_start\": \"4:15PM\",\n        \"available_end\": \"9:30PM\",\n        \"min_duration\": 75\n    },\n    \"William\": {\n        \"location\": \"Union Square\",\n        \"available_start\": \"10:45AM\",\n        \"available_end\": \"5:30PM\",\n        \"min_duration\": 45\n    },\n    \"Elizabeth\": {\n        \"location\": \"Nob Hill\",\n        \"available_start\": \"12:15PM\",\n        \"available_end\": \"3:00PM\",\n        \"min_duration\": 105\n    },\n    \"Joseph\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"available_start\": \"12:45PM\",\n        \"available_end\": \"2:00PM\",\n        \"min_duration\": 75\n    },\n    \"Anthony\": {\n        \"location\": \"Golden Gate Park\",\n        \"available_start\": \"1:00PM\",\n        \"available_end\": \"8:30PM\",\n        \"min_duration\": 75\n    },\n    \"Barbara\": {\n        \"location\": \"Embarcadero\",\n        \"available_start\": \"7:15PM\",\n        \"available_end\": \"8:30PM\",\n        \"min_duration\": 75\n    },\n    \"Carol\": {\n        \"location\": \"Financial District\",\n        \"available_start\": \"11:45AM\",\n        \"available_end\": \"4:15PM\",\n        \"min_duration\": 60\n    },\n    \"Sandra\": {\n        \"location\": \"North Beach\",\n        \"available_start\": \"10:00AM\",\n        \"available_end\": \"12:30PM\",\n        \"min_duration\": 15\n    },\n    \"Kenneth\": {\n        \"location\": \"Presidio\",\n        \"available_start\": \"9:15PM\",\n        \"available_end\": \"10:15PM\",\n        \"min_duration\": 45\n    }\n}\n\ndef calculate_schedule():\n    current_location = \"Marina District\"\n    current_time = time_to_minutes(\"9:00AM\")\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    \n    # We'll prioritize friends with tighter time windows first\n    priority_order = [\n        \"Joseph\", \"Elizabeth\", \"Sandra\", \"Carol\", \"William\", \n        \"Anthony\", \"Stephanie\", \"Barbara\", \"Kenneth\"\n    ]\n    \n    for friend_name in priority_order:\n        friend = friends[friend_name]\n        loc = friend[\"location\"]\n        start_avail = time_to_minutes(friend[\"available_start\"])\n        end_avail = time_to_minutes(friend[\"available_end\"])\n        min_dur = friend[\"min_duration\"]\n        \n        travel_time = travel_times[current_location][loc]\n        arrival_time = current_time + travel_time\n        \n        if arrival_time > end_avail:\n            continue  # Can't meet this friend\n        \n        # Calculate possible meeting start time\n        meet_start = max(arrival_time, start_avail)\n        meet_end = meet_start + min_dur\n        \n        if meet_end > end_avail:\n            # Try to adjust by arriving earlier if possible\n            if start_avail + min_dur > end_avail:\n                continue  # Not enough time even if we arrive at start\n            meet_start = start_avail\n            meet_end = meet_start + min_dur\n            arrival_time = meet_start\n            # Need to adjust previous activities to arrive earlier\n            \n        # Add travel and meeting to schedule\n        if current_location != loc:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": minutes_to_time(current_time),\n                \"to\": loc\n            })\n        \n        if arrival_time < meet_start:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": loc,\n                \"time\": minutes_to_time(arrival_time)\n            })\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": loc,\n            \"duration\": min_dur,\n            \"time\": minutes_to_time(meet_start)\n        })\n        \n        current_location = loc\n        current_time = meet_end\n    \n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_828"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kimberly",
            "start_time": "9:10AM",
            "end_time": "9:25AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Brian",
            "start_time": "9:30AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Joseph",
            "start_time": "3:30PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Betty",
            "start_time": "7:00PM",
            "end_time": "8:30PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "8:36PM",
            "end_time": "9:06PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "9:14PM",
            "end_time": "9:29PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kimberly",
            "start_time": "9:10AM",
            "end_time": "9:25AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Brian",
            "start_time": "2:10PM",
            "end_time": "2:55PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Joseph",
            "start_time": "3:30PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Betty",
            "start_time": "7:00PM",
            "end_time": "8:30PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "8:36PM",
            "end_time": "9:06PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "9:14PM",
            "end_time": "9:29PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_time(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef time_diff(start, end):\n    return (end - start).total_seconds() / 60\n\n# Travel times dictionary: {from_location: {to_location: minutes}}\ntravel_times = {\n    'Union Square': {\n        'The Castro': 17, 'North Beach': 10, 'Embarcadero': 11, 'Alamo Square': 15,\n        'Nob Hill': 9, 'Presidio': 24, 'Fisherman\\'s Wharf': 15, 'Mission District': 14,\n        'Haight-Ashbury': 18\n    },\n    'The Castro': {\n        'Union Square': 19, 'North Beach': 20, 'Embarcadero': 22, 'Alamo Square': 8,\n        'Nob Hill': 16, 'Presidio': 20, 'Fisherman\\'s Wharf': 24, 'Mission District': 7,\n        'Haight-Ashbury': 6\n    },\n    'North Beach': {\n        'Union Square': 7, 'The Castro': 23, 'Embarcadero': 6, 'Alamo Square': 16,\n        'Nob Hill': 7, 'Presidio': 17, 'Fisherman\\'s Wharf': 5, 'Mission District': 18,\n        'Haight-Ashbury': 18\n    },\n    'Embarcadero': {\n        'Union Square': 10, 'The Castro': 25, 'North Beach': 5, 'Alamo Square': 19,\n        'Nob Hill': 10, 'Presidio': 20, 'Fisherman\\'s Wharf': 6, 'Mission District': 20,\n        'Haight-Ashbury': 21\n    },\n    'Alamo Square': {\n        'Union Square': 14, 'The Castro': 8, 'North Beach': 15, 'Embarcadero': 16,\n        'Nob Hill': 11, 'Presidio': 17, 'Fisherman\\'s Wharf': 19, 'Mission District': 10,\n        'Haight-Ashbury': 5\n    },\n    'Nob Hill': {\n        'Union Square': 7, 'The Castro': 17, 'North Beach': 8, 'Embarcadero': 9,\n        'Alamo Square': 11, 'Presidio': 17, 'Fisherman\\'s Wharf': 10, 'Mission District': 13,\n        'Haight-Ashbury': 13\n    },\n    'Presidio': {\n        'Union Square': 22, 'The Castro': 21, 'North Beach': 18, 'Embarcadero': 20,\n        'Alamo Square': 19, 'Nob Hill': 18, 'Fisherman\\'s Wharf': 19, 'Mission District': 26,\n        'Haight-Ashbury': 15\n    },\n    'Fisherman\\'s Wharf': {\n        'Union Square': 13, 'The Castro': 27, 'North Beach': 6, 'Embarcadero': 8,\n        'Alamo Square': 21, 'Nob Hill': 11, 'Presidio': 17, 'Mission District': 22,\n        'Haight-Ashbury': 22\n    },\n    'Mission District': {\n        'Union Square': 15, 'The Castro': 7, 'North Beach': 17, 'Embarcadero': 19,\n        'Alamo Square': 11, 'Nob Hill': 12, 'Presidio': 25, 'Fisherman\\'s Wharf': 22,\n        'Haight-Ashbury': 12\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19, 'The Castro': 6, 'North Beach': 19, 'Embarcadero': 20,\n        'Alamo Square': 5, 'Nob Hill': 15, 'Presidio': 15, 'Fisherman\\'s Wharf': 23,\n        'Mission District': 11\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Melissa': {'location': 'The Castro', 'start': '8:15PM', 'end': '9:15PM', 'duration': 30},\n    'Kimberly': {'location': 'North Beach', 'start': '7:00AM', 'end': '10:30AM', 'duration': 15},\n    'Joseph': {'location': 'Embarcadero', 'start': '3:30PM', 'end': '7:30PM', 'duration': 75},\n    'Barbara': {'location': 'Alamo Square', 'start': '8:45PM', 'end': '9:45PM', 'duration': 15},\n    'Kenneth': {'location': 'Nob Hill', 'start': '12:15PM', 'end': '5:15PM', 'duration': 105},\n    'Joshua': {'location': 'Presidio', 'start': '4:30PM', 'end': '6:15PM', 'duration': 105},\n    'Brian': {'location': 'Fisherman\\'s Wharf', 'start': '9:30AM', 'end': '3:30PM', 'duration': 45},\n    'Steven': {'location': 'Mission District', 'start': '7:30PM', 'end': '9:00PM', 'duration': 90},\n    'Betty': {'location': 'Haight-Ashbury', 'start': '7:00PM', 'end': '8:30PM', 'duration': 90}\n}\n\n# Initialize schedule\ncurrent_time = parse_time('9:00AM')\ncurrent_location = 'Union Square'\nschedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n\n# Helper function to find next friend to meet\ndef get_next_friend(current_time, current_location, remaining_friends):\n    best_friend = None\n    best_time = None\n    best_travel = None\n    best_end_time = None\n    \n    for friend in remaining_friends:\n        data = friends[friend]\n        location = data['location']\n        start_time = parse_time(data['start'])\n        end_time = parse_time(data['end'])\n        duration = data['duration']\n        \n        travel_time = travel_times[current_location][location]\n        arrival_time = add_time(current_time, travel_time)\n        \n        # Calculate when we can meet\n        meet_start = max(arrival_time, start_time)\n        meet_end = add_time(meet_start, duration)\n        \n        if meet_end > end_time:\n            continue  # Can't meet this friend\n        \n        if best_friend is None or meet_start < best_time:\n            best_friend = friend\n            best_time = meet_start\n            best_travel = travel_time\n            best_end_time = meet_end\n    \n    return best_friend, best_travel, best_time, best_end_time\n\nremaining_friends = set(friends.keys())\nwhile remaining_friends:\n    next_friend, travel_time, meet_time, meet_end = get_next_friend(current_time, current_location, remaining_friends)\n    \n    if next_friend is None:\n        break\n    \n    # Add travel action\n    if current_location != friends[next_friend]['location']:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_time,\n            \"time\": format_time(current_time),\n            \"to\": friends[next_friend]['location']\n        })\n    \n    # Add wait time if needed\n    wait_time = time_diff(add_time(current_time, travel_time), meet_time)\n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friends[next_friend]['location'],\n            \"time\": format_time(add_time(current_time, travel_time))\n        })\n    \n    # Add meet action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friends[next_friend]['location'],\n        \"duration\": friends[next_friend]['duration'],\n        \"time\": format_time(meet_time)\n    })\n    \n    # Update current time and location\n    current_time = meet_end\n    current_location = friends[next_friend]['location']\n    remaining_friends.remove(next_friend)\n\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_800"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Nancy",
            "start_time": "9:45AM",
            "end_time": "10:30AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Jessica",
            "start_time": "10:35AM",
            "end_time": "12:35PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Rebecca",
            "start_time": "12:58PM",
            "end_time": "2:13PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "John",
            "start_time": "2:41PM",
            "end_time": "2:56PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sarah",
            "start_time": "5:30PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Mark",
            "start_time": "6:28PM",
            "end_time": "7:58PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "8:45PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Jessica",
            "start_time": "9:13AM",
            "end_time": "11:13AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "John",
            "start_time": "11:18AM",
            "end_time": "11:33AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Nancy",
            "start_time": "11:40AM",
            "end_time": "12:25PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Rebecca",
            "start_time": "12:49PM",
            "end_time": "2:04PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Jason",
            "start_time": "3:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sarah",
            "start_time": "5:30PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Mark",
            "start_time": "6:28PM",
            "end_time": "7:58PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "8:45PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef time_diff(start, end):\n    return (end - start).total_seconds() / 60\n\n# Travel times dictionary: {from: {to: minutes}}\ntravel_times = {\n    \"Union Square\": {\n        \"Mission District\": 14,\n        \"Fisherman's Wharf\": 15,\n        \"Russian Hill\": 13,\n        \"Marina District\": 18,\n        \"North Beach\": 10,\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 15,\n        \"The Castro\": 17,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 27\n    },\n    \"Mission District\": {\n        \"Union Square\": 15,\n        \"Fisherman's Wharf\": 22,\n        \"Russian Hill\": 15,\n        \"Marina District\": 19,\n        \"North Beach\": 17,\n        \"Chinatown\": 16,\n        \"Pacific Heights\": 16,\n        \"The Castro\": 7,\n        \"Nob Hill\": 12,\n        \"Sunset District\": 24\n    },\n    \"Fisherman's Wharf\": {\n        \"Union Square\": 13,\n        \"Mission District\": 22,\n        \"Russian Hill\": 7,\n        \"Marina District\": 9,\n        \"North Beach\": 6,\n        \"Chinatown\": 12,\n        \"Pacific Heights\": 12,\n        \"The Castro\": 27,\n        \"Nob Hill\": 11,\n        \"Sunset District\": 27\n    },\n    \"Russian Hill\": {\n        \"Union Square\": 10,\n        \"Mission District\": 16,\n        \"Fisherman's Wharf\": 7,\n        \"Marina District\": 7,\n        \"North Beach\": 5,\n        \"Chinatown\": 9,\n        \"Pacific Heights\": 7,\n        \"The Castro\": 21,\n        \"Nob Hill\": 5,\n        \"Sunset District\": 23\n    },\n    \"Marina District\": {\n        \"Union Square\": 16,\n        \"Mission District\": 20,\n        \"Fisherman's Wharf\": 10,\n        \"Russian Hill\": 8,\n        \"North Beach\": 11,\n        \"Chinatown\": 15,\n        \"Pacific Heights\": 7,\n        \"The Castro\": 22,\n        \"Nob Hill\": 12,\n        \"Sunset District\": 19\n    },\n    \"North Beach\": {\n        \"Union Square\": 7,\n        \"Mission District\": 18,\n        \"Fisherman's Wharf\": 5,\n        \"Russian Hill\": 4,\n        \"Marina District\": 9,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8,\n        \"The Castro\": 23,\n        \"Nob Hill\": 7,\n        \"Sunset District\": 27\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Mission District\": 17,\n        \"Fisherman's Wharf\": 8,\n        \"Russian Hill\": 7,\n        \"Marina District\": 12,\n        \"North Beach\": 3,\n        \"Pacific Heights\": 10,\n        \"The Castro\": 22,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 29\n    },\n    \"Pacific Heights\": {\n        \"Union Square\": 12,\n        \"Mission District\": 15,\n        \"Fisherman's Wharf\": 13,\n        \"Russian Hill\": 7,\n        \"Marina District\": 6,\n        \"North Beach\": 9,\n        \"Chinatown\": 11,\n        \"The Castro\": 16,\n        \"Nob Hill\": 8,\n        \"Sunset District\": 21\n    },\n    \"The Castro\": {\n        \"Union Square\": 19,\n        \"Mission District\": 7,\n        \"Fisherman's Wharf\": 24,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"North Beach\": 20,\n        \"Chinatown\": 22,\n        \"Pacific Heights\": 16,\n        \"Nob Hill\": 16,\n        \"Sunset District\": 17\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"Mission District\": 13,\n        \"Fisherman's Wharf\": 10,\n        \"Russian Hill\": 5,\n        \"Marina District\": 11,\n        \"North Beach\": 8,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8,\n        \"The Castro\": 17,\n        \"Sunset District\": 24\n    },\n    \"Sunset District\": {\n        \"Union Square\": 30,\n        \"Mission District\": 25,\n        \"Fisherman's Wharf\": 29,\n        \"Russian Hill\": 24,\n        \"Marina District\": 21,\n        \"North Beach\": 28,\n        \"Chinatown\": 30,\n        \"Pacific Heights\": 21,\n        \"The Castro\": 17,\n        \"Nob Hill\": 27\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\"name\": \"Kevin\", \"location\": \"Mission District\", \"start\": \"8:45PM\", \"end\": \"9:45PM\", \"min_duration\": 60},\n    {\"name\": \"Mark\", \"location\": \"Fisherman's Wharf\", \"start\": \"5:15PM\", \"end\": \"8:00PM\", \"min_duration\": 90},\n    {\"name\": \"Jessica\", \"location\": \"Russian Hill\", \"start\": \"9:00AM\", \"end\": \"3:00PM\", \"min_duration\": 120},\n    {\"name\": \"Jason\", \"location\": \"Marina District\", \"start\": \"3:15PM\", \"end\": \"9:45PM\", \"min_duration\": 120},\n    {\"name\": \"John\", \"location\": \"North Beach\", \"start\": \"9:45AM\", \"end\": \"6:00PM\", \"min_duration\": 15},\n    {\"name\": \"Karen\", \"location\": \"Chinatown\", \"start\": \"4:45PM\", \"end\": \"7:00PM\", \"min_duration\": 75},\n    {\"name\": \"Sarah\", \"location\": \"Pacific Heights\", \"start\": \"5:30PM\", \"end\": \"6:15PM\", \"min_duration\": 45},\n    {\"name\": \"Amanda\", \"location\": \"The Castro\", \"start\": \"8:00PM\", \"end\": \"9:15PM\", \"min_duration\": 60},\n    {\"name\": \"Nancy\", \"location\": \"Nob Hill\", \"start\": \"9:45AM\", \"end\": \"1:00PM\", \"min_duration\": 45},\n    {\"name\": \"Rebecca\", \"location\": \"Sunset District\", \"start\": \"8:45AM\", \"end\": \"3:00PM\", \"min_duration\": 75}\n]\n\n# Convert friend times to datetime objects\nfor friend in friends:\n    friend[\"start_time\"] = parse_time(friend[\"start\"])\n    friend[\"end_time\"] = parse_time(friend[\"end\"])\n\n# Sort friends by end time (earlier first)\nfriends.sort(key=lambda x: x[\"end_time\"])\n\ncurrent_time = parse_time(\"9:00AM\")\ncurrent_location = \"Union Square\"\nschedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n\ndef can_meet(friend, arrival_time):\n    latest_start = friend[\"end_time\"] - timedelta(minutes=friend[\"min_duration\"])\n    if arrival_time > latest_start:\n        return False\n    meet_end = arrival_time + timedelta(minutes=friend[\"min_duration\"])\n    if meet_end > friend[\"end_time\"]:\n        return False\n    return True\n\ndef find_meeting_time(friend, earliest_arrival):\n    latest_start = friend[\"end_time\"] - timedelta(minutes=friend[\"min_duration\"])\n    if earliest_arrival <= friend[\"start_time\"]:\n        return friend[\"start_time\"]\n    elif earliest_arrival <= latest_start:\n        return earliest_arrival\n    else:\n        return None\n\nfor friend in friends:\n    travel_duration = travel_times[current_location][friend[\"location\"]]\n    arrival_time = add_minutes(current_time, travel_duration)\n    \n    meeting_time = find_meeting_time(friend, arrival_time)\n    if meeting_time is None:\n        continue\n    \n    # Add travel action\n    if current_location != friend[\"location\"]:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend[\"location\"]\n        })\n    \n    # Add wait action if needed\n    if arrival_time < meeting_time:\n        wait_duration = time_diff(arrival_time, meeting_time)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend[\"location\"],\n            \"time\": format_time(arrival_time),\n            \"duration\": wait_duration\n        })\n    \n    # Add meet action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend[\"location\"],\n        \"duration\": friend[\"min_duration\"],\n        \"time\": format_time(meeting_time)\n    })\n    \n    current_time = meeting_time + timedelta(minutes=friend[\"min_duration\"])\n    current_location = friend[\"location\"]\n\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_940"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kevin",
            "start_time": "9:17AM",
            "end_time": "10:32AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Kimberly",
            "start_time": "10:45AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "6:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Thomas",
            "start_time": "7:38PM",
            "end_time": "8:23PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kevin",
            "start_time": "9:17AM",
            "end_time": "10:32AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Kimberly",
            "start_time": "10:45AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "6:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Thomas",
            "start_time": "7:38PM",
            "end_time": "8:23PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    elif period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    \"Sunset District\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 24,\n        \"Presidio\": 16,\n        \"Financial District\": 30\n    },\n    \"Alamo Square\": {\n        \"Sunset District\": 16,\n        \"Russian Hill\": 13,\n        \"Presidio\": 18,\n        \"Financial District\": 17\n    },\n    \"Russian Hill\": {\n        \"Sunset District\": 23,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"Financial District\": 11\n    },\n    \"Presidio\": {\n        \"Sunset District\": 15,\n        \"Alamo Square\": 18,\n        \"Russian Hill\": 14,\n        \"Financial District\": 23\n    },\n    \"Financial District\": {\n        \"Sunset District\": 31,\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 10,\n        \"Presidio\": 22\n    }\n}\n\n# Friends' availability and meeting durations\nfriends = {\n    \"Kevin\": {\n        \"location\": \"Alamo Square\",\n        \"start\": time_to_minutes(\"8:15AM\"),\n        \"end\": time_to_minutes(\"9:30PM\"),\n        \"duration\": 75\n    },\n    \"Kimberly\": {\n        \"location\": \"Russian Hill\",\n        \"start\": time_to_minutes(\"8:45AM\"),\n        \"end\": time_to_minutes(\"12:30PM\"),\n        \"duration\": 30\n    },\n    \"Joseph\": {\n        \"location\": \"Presidio\",\n        \"start\": time_to_minutes(\"6:30PM\"),\n        \"end\": time_to_minutes(\"7:15PM\"),\n        \"duration\": 45\n    },\n    \"Thomas\": {\n        \"location\": \"Financial District\",\n        \"start\": time_to_minutes(\"7:00PM\"),\n        \"end\": time_to_minutes(\"9:45PM\"),\n        \"duration\": 45\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Sunset District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data[\"location\"]\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        # Arrive at destination\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if friend is available\n        friend_start = friend_data[\"start\"]\n        friend_end = friend_data[\"end\"]\n        meeting_duration = friend_data[\"duration\"]\n        \n        if current_time < friend_start:\n            # Need to wait\n            wait_duration = friend_start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = friend_start\n        \n        # Check if we can meet\n        if current_time >= friend_start and current_time + meeting_duration <= friend_end:\n            # Meet friend\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meeting_duration,\n                \"time\": minutes_to_time(current_time),\n                \"with\": friend\n            })\n            current_time += meeting_duration\n            met_friends.add(friend)\n        else:\n            # Cannot meet this friend, skip\n            pass\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of meeting friends\nfriend_names = list(friends.keys())\npossible_orders = permutations(friend_names)\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in possible_orders:\n    schedule, num_meetings = calculate_schedule(order)\n    if num_meetings > best_meetings:\n        best_meetings = num_meetings\n        best_schedule = schedule\n    elif num_meetings == best_meetings and best_schedule is None:\n        best_schedule = schedule\n\n# Output the best schedule\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_391"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mark",
            "start_time": "1:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Karen",
            "start_time": "6:45PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mark",
            "start_time": "1:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Karen",
            "start_time": "6:45PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str or 'PM' in time_str:\n        time_part = time_str.split('AM')[0].split('PM')[0].strip()\n        period = 'AM' if 'AM' in time_str else 'PM'\n    else:\n        time_part = time_str\n        period = ''\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    total_minutes = time_to_minutes(time_str) + minutes_to_add\n    return minutes_to_time(total_minutes)\n\ndef calculate_schedule():\n    travel_times = {\n        ('North Beach', 'Pacific Heights'): 8,\n        ('North Beach', 'Embarcadero'): 6,\n        ('Pacific Heights', 'North Beach'): 9,\n        ('Pacific Heights', 'Embarcadero'): 10,\n        ('Embarcadero', 'North Beach'): 5,\n        ('Embarcadero', 'Pacific Heights'): 11\n    }\n\n    karen_start = '6:45PM'\n    karen_end = '8:15PM'\n    karen_min_duration = 90\n    mark_start = '1:00PM'\n    mark_end = '5:45PM'\n    mark_min_duration = 120\n\n    current_time = '9:00AM'\n    current_location = 'North Beach'\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # First, try to meet Mark at Embarcadero\n    travel_to_mark = travel_times[(current_location, 'Embarcadero')]\n    arrival_at_mark = add_minutes_to_time(current_time, travel_to_mark)\n    mark_available_start = mark_start\n    mark_available_end = mark_end\n\n    if time_to_minutes(arrival_at_mark) < time_to_minutes(mark_available_start):\n        wait_time = time_to_minutes(mark_available_start) - time_to_minutes(arrival_at_mark)\n        schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_to_mark, \"time\": current_time, \"to\": \"Embarcadero\"})\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": arrival_at_mark})\n        current_time = mark_available_start\n    else:\n        if time_to_minutes(arrival_at_mark) <= time_to_minutes(mark_available_end):\n            schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_to_mark, \"time\": current_time, \"to\": \"Embarcadero\"})\n            current_time = arrival_at_mark\n        else:\n            pass  # Can't meet Mark\n\n    meet_mark_duration = min(mark_min_duration, time_to_minutes(mark_available_end) - time_to_minutes(current_time))\n    if meet_mark_duration >= mark_min_duration:\n        schedule.append({\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meet_mark_duration, \"time\": current_time})\n        current_time = add_minutes_to_time(current_time, meet_mark_duration)\n        current_location = 'Embarcadero'\n    else:\n        # If can't meet Mark, try to meet Karen first\n        current_time = '9:00AM'\n        current_location = 'North Beach'\n        schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time}]\n\n    # Now try to meet Karen at Pacific Heights\n    travel_to_karen = travel_times[(current_location, 'Pacific Heights')]\n    arrival_at_karen = add_minutes_to_time(current_time, travel_to_karen)\n    karen_available_start = karen_start\n    karen_available_end = karen_end\n\n    if time_to_minutes(arrival_at_karen) < time_to_minutes(karen_available_start):\n        wait_time = time_to_minutes(karen_available_start) - time_to_minutes(arrival_at_karen)\n        schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_to_karen, \"time\": current_time, \"to\": \"Pacific Heights\"})\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": arrival_at_karen})\n        current_time = karen_available_start\n    else:\n        if time_to_minutes(arrival_at_karen) <= time_to_minutes(karen_available_end):\n            schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_to_karen, \"time\": current_time, \"to\": \"Pacific Heights\"})\n            current_time = arrival_at_karen\n        else:\n            pass  # Can't meet Karen\n\n    meet_karen_duration = min(karen_min_duration, time_to_minutes(karen_available_end) - time_to_minutes(current_time))\n    if meet_karen_duration >= karen_min_duration:\n        schedule.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meet_karen_duration, \"time\": current_time})\n        current_time = add_minutes_to_time(current_time, meet_karen_duration)\n        current_location = 'Pacific Heights'\n    else:\n        pass  # Can't meet Karen\n\n    # After meeting Mark, try to meet Karen\n    if current_location == 'Embarcadero':\n        travel_to_karen = travel_times[(current_location, 'Pacific Heights')]\n        arrival_at_karen = add_minutes_to_time(current_time, travel_to_karen)\n        karen_available_start = karen_start\n        karen_available_end = karen_end\n\n        if time_to_minutes(arrival_at_karen) < time_to_minutes(karen_available_start):\n            wait_time = time_to_minutes(karen_available_start) - time_to_minutes(arrival_at_karen)\n            schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_to_karen, \"time\": current_time, \"to\": \"Pacific Heights\"})\n            schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": arrival_at_karen})\n            current_time = karen_available_start\n        else:\n            if time_to_minutes(arrival_at_karen) <= time_to_minutes(karen_available_end):\n                schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_to_karen, \"time\": current_time, \"to\": \"Pacific Heights\"})\n                current_time = arrival_at_karen\n            else:\n                pass  # Can't meet Karen\n\n        meet_karen_duration = min(karen_min_duration, time_to_minutes(karen_available_end) - time_to_minutes(current_time))\n        if meet_karen_duration >= karen_min_duration:\n            schedule.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meet_karen_duration, \"time\": current_time})\n            current_time = add_minutes_to_time(current_time, meet_karen_duration)\n            current_location = 'Pacific Heights'\n        else:\n            pass  # Can't meet Karen\n\n    return schedule\n\nschedule = calculate_schedule()\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_143"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joseph",
            "start_time": "12:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Sandra",
            "start_time": "2:19PM",
            "end_time": "3:34PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Nancy",
            "start_time": "3:46PM",
            "end_time": "5:31PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Karen",
            "start_time": "9:15PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joseph",
            "start_time": "12:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Sandra",
            "start_time": "2:19PM",
            "end_time": "3:34PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Nancy",
            "start_time": "3:46PM",
            "end_time": "5:31PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Karen",
            "start_time": "9:15PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times in minutes\ntravel_times = {\n    'Union Square': {\n        'Nob Hill': 9,\n        'Haight-Ashbury': 18,\n        'Chinatown': 7,\n        'Marina District': 18\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'Haight-Ashbury': 13,\n        'Chinatown': 6,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Union Square': 17,\n        'Nob Hill': 15,\n        'Chinatown': 19,\n        'Marina District': 17\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Nob Hill': 8,\n        'Haight-Ashbury': 19,\n        'Marina District': 12\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Nob Hill': 12,\n        'Haight-Ashbury': 16,\n        'Chinatown': 16\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Karen': {\n        'location': 'Nob Hill',\n        'start': time_to_minutes('9:15PM'),\n        'end': time_to_minutes('9:45PM'),\n        'duration': 30\n    },\n    'Joseph': {\n        'location': 'Haight-Ashbury',\n        'start': time_to_minutes('12:30PM'),\n        'end': time_to_minutes('7:45PM'),\n        'duration': 90\n    },\n    'Sandra': {\n        'location': 'Chinatown',\n        'start': time_to_minutes('7:15AM'),\n        'end': time_to_minutes('7:15PM'),\n        'duration': 75\n    },\n    'Nancy': {\n        'location': 'Marina District',\n        'start': time_to_minutes('11:00AM'),\n        'end': time_to_minutes('8:15PM'),\n        'duration': 105\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Union Square'\n    schedule = [{'action': 'start', 'location': current_location, 'time': minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': minutes_to_time(travel_start),\n            'to': destination\n        })\n        \n        # Arrive at destination\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if friend is available\n        meet_start = max(current_time, friend_data['start'])\n        meet_end = meet_start + friend_data['duration']\n        \n        if meet_end > friend_data['end']:\n            return None  # Cannot meet this friend\n        \n        # Add wait time if needed\n        if current_time < friend_data['start']:\n            wait_duration = friend_data['start'] - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': wait_duration\n            })\n            current_time = friend_data['start']\n        \n        # Meet friend\n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': friend_data['duration'],\n            'time': minutes_to_time(current_time),\n            'with': friend\n        })\n        current_time += friend_data['duration']\n        met_friends.add(friend)\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of meeting friends\nfriend_names = list(friends.keys())\nbest_schedule = None\nbest_met = 0\n\nfor order in permutations(friend_names):\n    result = calculate_schedule(order)\n    if result:\n        schedule, met = result\n        if met > best_met or (met == best_met and best_schedule is None):\n            best_schedule = schedule\n            best_met = met\n\n# Prepare the output\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_352"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "6:30PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "7:16PM",
            "end_time": "8:01PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Laura",
            "start_time": "9:11AM",
            "end_time": "9:41AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "6:30PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "7:16PM",
            "end_time": "8:01PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Patricia",
            "start_time": "8:15PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'Golden Gate Park': 25,\n        'Nob Hill': 11,\n        'Marina District': 9,\n        'Embarcadero': 8\n    },\n    'Bayview': {\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22,\n        'Nob Hill': 20,\n        'Marina District': 25,\n        'Embarcadero': 19\n    },\n    'Golden Gate Park': {\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23,\n        'Nob Hill': 20,\n        'Marina District': 16,\n        'Embarcadero': 25\n    },\n    'Nob Hill': {\n        'Fisherman\\'s Wharf': 11,\n        'Bayview': 19,\n        'Golden Gate Park': 17,\n        'Marina District': 11,\n        'Embarcadero': 9\n    },\n    'Marina District': {\n        'Fisherman\\'s Wharf': 10,\n        'Bayview': 27,\n        'Golden Gate Park': 18,\n        'Nob Hill': 12,\n        'Embarcadero': 14\n    },\n    'Embarcadero': {\n        'Fisherman\\'s Wharf': 6,\n        'Bayview': 21,\n        'Golden Gate Park': 25,\n        'Nob Hill': 10,\n        'Marina District': 12\n    }\n}\n\nfriends = {\n    'Thomas': {\n        'location': 'Bayview',\n        'start': time_to_minutes('3:30PM'),\n        'end': time_to_minutes('6:30PM'),\n        'min_duration': 120\n    },\n    'Stephanie': {\n        'location': 'Golden Gate Park',\n        'start': time_to_minutes('6:30PM'),\n        'end': time_to_minutes('9:45PM'),\n        'min_duration': 30\n    },\n    'Laura': {\n        'location': 'Nob Hill',\n        'start': time_to_minutes('8:45AM'),\n        'end': time_to_minutes('4:15PM'),\n        'min_duration': 30\n    },\n    'Betty': {\n        'location': 'Marina District',\n        'start': time_to_minutes('6:45PM'),\n        'end': time_to_minutes('9:45PM'),\n        'min_duration': 45\n    },\n    'Patricia': {\n        'location': 'Embarcadero',\n        'start': time_to_minutes('5:30PM'),\n        'end': time_to_minutes('10:00PM'),\n        'min_duration': 45\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Fisherman\\'s Wharf'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        \n        # Travel to friend's location\n        travel_duration = travel_times[current_location][destination]\n        travel_start_time = current_time\n        travel_end_time = travel_start_time + travel_duration\n        \n        if destination != current_location:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration,\n                'time': minutes_to_time(travel_start_time),\n                'to': destination\n            })\n        \n        # Arrive at friend's location\n        arrival_time = travel_end_time\n        available_start = friend_data['start']\n        available_end = friend_data['end']\n        \n        # Check if we can meet\n        if arrival_time > available_end:\n            return None  # Can't meet this friend\n        \n        # Calculate meeting time\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = min(meeting_start + friend_data['min_duration'], available_end)\n        \n        if meeting_end - meeting_start < friend_data['min_duration']:\n            return None  # Can't meet minimum duration\n        \n        # Add wait time if needed\n        if arrival_time < available_start:\n            wait_duration = available_start - arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': destination,\n                'time': minutes_to_time(arrival_time),\n                'duration': wait_duration\n            })\n        \n        # Add meeting\n        schedule.append({\n            'action': 'meet',\n            'location': destination,\n            'duration': friend_data['min_duration'],\n            'time': minutes_to_time(meeting_start),\n            'with': friend\n        })\n        \n        met_friends.add(friend)\n        current_time = meeting_start + friend_data['min_duration']\n        current_location = destination\n    \n    return schedule, len(met_friends)\n\n# Generate all possible friend orders\nfriend_names = list(friends.keys())\nbest_schedule = None\nbest_count = 0\n\n# Try all permutations of 3 friends (since meeting all 5 is impossible due to time constraints)\nfor perm in permutations(friend_names, 3):\n    result = calculate_schedule(perm)\n    if result:\n        schedule, count = result\n        if count > best_count or (count == best_count and len(schedule) < len(best_schedule[0])):\n            best_schedule = schedule\n            best_count = count\n\n# If no 3-meeting schedule found, try 2\nif best_count < 3:\n    for perm in permutations(friend_names, 2):\n        result = calculate_schedule(perm)\n        if result:\n            schedule, count = result\n            if count > best_count or (count == best_count and len(schedule) < len(best_schedule[0])):\n                best_schedule = schedule\n                best_count = count\n\n# Prepare final schedule\nfinal_schedule = []\nif best_schedule:\n    for item in best_schedule:\n        new_item = {k: v for k, v in item.items()}\n        if 'with' in new_item:\n            del new_item['with']\n        final_schedule.append(new_item)\n\noutput = {\n    \"schedule\": final_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_409"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Richard",
            "start_time": "11:00AM",
            "end_time": "12:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Elizabeth",
            "start_time": "12:11PM",
            "end_time": "1:26PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Brian",
            "start_time": "1:34PM",
            "end_time": "3:04PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Kenneth",
            "start_time": "3:10PM",
            "end_time": "4:55PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Ashley",
            "start_time": "5:14PM",
            "end_time": "6:44PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Deborah",
            "start_time": "7:03PM",
            "end_time": "8:03PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kimberly",
            "start_time": "8:18PM",
            "end_time": "9:03PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Richard",
            "start_time": "11:00AM",
            "end_time": "12:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Elizabeth",
            "start_time": "12:11PM",
            "end_time": "1:26PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Brian",
            "start_time": "1:34PM",
            "end_time": "3:04PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Anthony",
            "start_time": "3:12PM",
            "end_time": "3:42PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Ashley",
            "start_time": "3:53PM",
            "end_time": "5:23PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Deborah",
            "start_time": "5:42PM",
            "end_time": "6:42PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kimberly",
            "start_time": "6:57PM",
            "end_time": "7:42PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jessica",
            "start_time": "8:00PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Define the travel times as a dictionary of dictionaries\ntravel_times = {\n    \"Bayview\": {\n        \"North Beach\": 22,\n        \"Fisherman's Wharf\": 25,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 20,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 18,\n        \"Alamo Square\": 16,\n        \"Presidio\": 32,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 23\n    },\n    \"North Beach\": {\n        \"Bayview\": 25,\n        \"Fisherman's Wharf\": 5,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 7,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 7,\n        \"Alamo Square\": 16,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Fisherman's Wharf\": {\n        \"Bayview\": 26,\n        \"North Beach\": 6,\n        \"Haight-Ashbury\": 22,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 25,\n        \"Union Square\": 13,\n        \"Alamo Square\": 21,\n        \"Presidio\": 17,\n        \"Chinatown\": 12,\n        \"Pacific Heights\": 12\n    },\n    \"Haight-Ashbury\": {\n        \"Bayview\": 18,\n        \"North Beach\": 19,\n        \"Fisherman's Wharf\": 23,\n        \"Nob Hill\": 15,\n        \"Golden Gate Park\": 7,\n        \"Union Square\": 19,\n        \"Alamo Square\": 5,\n        \"Presidio\": 15,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 12\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"North Beach\": 8,\n        \"Fisherman's Wharf\": 10,\n        \"Haight-Ashbury\": 13,\n        \"Golden Gate Park\": 17,\n        \"Union Square\": 7,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Golden Gate Park\": {\n        \"Bayview\": 23,\n        \"North Beach\": 23,\n        \"Fisherman's Wharf\": 24,\n        \"Haight-Ashbury\": 7,\n        \"Nob Hill\": 20,\n        \"Union Square\": 22,\n        \"Alamo Square\": 9,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"Pacific Heights\": 16\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"North Beach\": 10,\n        \"Fisherman's Wharf\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 22,\n        \"Alamo Square\": 15,\n        \"Presidio\": 24,\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 15\n    },\n    \"Alamo Square\": {\n        \"Bayview\": 16,\n        \"North Beach\": 15,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 5,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 9,\n        \"Union Square\": 14,\n        \"Presidio\": 17,\n        \"Chinatown\": 15,\n        \"Pacific Heights\": 10\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"North Beach\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 15,\n        \"Nob Hill\": 18,\n        \"Golden Gate Park\": 12,\n        \"Union Square\": 22,\n        \"Alamo Square\": 19,\n        \"Chinatown\": 21,\n        \"Pacific Heights\": 11\n    },\n    \"Chinatown\": {\n        \"Bayview\": 20,\n        \"North Beach\": 3,\n        \"Fisherman's Wharf\": 8,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 23,\n        \"Union Square\": 7,\n        \"Alamo Square\": 17,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 10\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"North Beach\": 9,\n        \"Fisherman's Wharf\": 13,\n        \"Haight-Ashbury\": 11,\n        \"Nob Hill\": 8,\n        \"Golden Gate Park\": 15,\n        \"Union Square\": 12,\n        \"Alamo Square\": 10,\n        \"Presidio\": 11,\n        \"Chinatown\": 11\n    }\n}\n\n# Define the friends' availability and meeting durations\nfriends = [\n    {\"name\": \"Brian\", \"location\": \"North Beach\", \"start\": \"1:00PM\", \"end\": \"7:00PM\", \"duration\": 90},\n    {\"name\": \"Richard\", \"location\": \"Fisherman's Wharf\", \"start\": \"11:00AM\", \"end\": \"12:45PM\", \"duration\": 60},\n    {\"name\": \"Ashley\", \"location\": \"Haight-Ashbury\", \"start\": \"3:00PM\", \"end\": \"8:30PM\", \"duration\": 90},\n    {\"name\": \"Elizabeth\", \"location\": \"Nob Hill\", \"start\": \"11:45AM\", \"end\": \"6:30PM\", \"duration\": 75},\n    {\"name\": \"Jessica\", \"location\": \"Golden Gate Park\", \"start\": \"8:00PM\", \"end\": \"9:45PM\", \"duration\": 105},\n    {\"name\": \"Deborah\", \"location\": \"Union Square\", \"start\": \"5:30PM\", \"end\": \"10:00PM\", \"duration\": 60},\n    {\"name\": \"Kimberly\", \"location\": \"Alamo Square\", \"start\": \"5:30PM\", \"end\": \"9:15PM\", \"duration\": 45},\n    {\"name\": \"Matthew\", \"location\": \"Presidio\", \"start\": \"8:15AM\", \"end\": \"9:00AM\", \"duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Chinatown\", \"start\": \"1:45PM\", \"end\": \"7:30PM\", \"duration\": 105},\n    {\"name\": \"Anthony\", \"location\": \"Pacific Heights\", \"start\": \"2:15PM\", \"end\": \"4:00PM\", \"duration\": 30}\n]\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_str = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_str.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet(friend, current_time, current_location):\n    start_time = time_to_minutes(friend[\"start\"])\n    end_time = time_to_minutes(friend[\"end\"])\n    travel_time = travel_times[current_location][friend[\"location\"]]\n    arrival_time = current_time + travel_time\n    if arrival_time > end_time:\n        return False\n    meeting_end = arrival_time + friend[\"duration\"]\n    if meeting_end > end_time:\n        return False\n    return True\n\ndef get_meeting_time(friend, current_time, current_location):\n    start_time = time_to_minutes(friend[\"start\"])\n    end_time = time_to_minutes(friend[\"end\"])\n    travel_time = travel_times[current_location][friend[\"location\"]]\n    arrival_time = current_time + travel_time\n    meeting_start = max(arrival_time, start_time)\n    meeting_end = meeting_start + friend[\"duration\"]\n    if meeting_end > end_time:\n        return None\n    return meeting_start, meeting_end\n\ndef generate_schedule():\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Bayview\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    remaining_friends = friends.copy()\n    met_friends = []\n\n    # First, meet Matthew if possible\n    matthew = next(f for f in remaining_friends if f[\"name\"] == \"Matthew\")\n    if can_meet(matthew, current_time, current_location):\n        meeting_start, meeting_end = get_meeting_time(matthew, current_time, current_location)\n        travel_time = travel_times[current_location][matthew[\"location\"]]\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(current_time),\n            \"to\": matthew[\"location\"]\n        })\n        current_time += travel_time\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": matthew[\"location\"],\n            \"duration\": matthew[\"duration\"],\n            \"time\": minutes_to_time(meeting_start)\n        })\n        current_time = meeting_end\n        current_location = matthew[\"location\"]\n        met_friends.append(matthew)\n        remaining_friends.remove(matthew)\n\n    # Sort remaining friends by their start time\n    remaining_friends.sort(key=lambda x: time_to_minutes(x[\"start\"]))\n\n    for friend in remaining_friends:\n        if can_meet(friend, current_time, current_location):\n            meeting_start, meeting_end = get_meeting_time(friend, current_time, current_location)\n            travel_time = travel_times[current_location][friend[\"location\"]]\n            if current_time + travel_time < meeting_start:\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": current_location,\n                    \"time\": minutes_to_time(current_time + travel_time)\n                })\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": minutes_to_time(current_time),\n                \"to\": friend[\"location\"]\n            })\n            current_time = meeting_start\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"duration\": friend[\"duration\"],\n                \"time\": minutes_to_time(meeting_start)\n            })\n            current_time = meeting_end\n            current_location = friend[\"location\"]\n            met_friends.append(friend)\n\n    return schedule\n\nschedule = generate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=2))\n```",
      "count": "meeting_planning_example_952"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Sandra",
            "start_time": "9:15AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "10:24AM",
            "end_time": "11:24AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Kenneth",
            "start_time": "2:45PM",
            "end_time": "3:15PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Brian",
            "start_time": "3:35PM",
            "end_time": "4:50PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kimberly",
            "start_time": "4:57PM",
            "end_time": "5:27PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Laura",
            "start_time": "5:47PM",
            "end_time": "6:17PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "6:32PM",
            "end_time": "7:47PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Paul",
            "start_time": "9:00PM",
            "end_time": "9:15PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Linda",
            "start_time": "9:30PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "10:15AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kimberly",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Kenneth",
            "start_time": "3:01PM",
            "end_time": "3:31PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Brian",
            "start_time": "3:51PM",
            "end_time": "5:06PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Sandra",
            "start_time": "5:24PM",
            "end_time": "6:24PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Laura",
            "start_time": "6:37PM",
            "end_time": "7:07PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "7:22PM",
            "end_time": "8:37PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Paul",
            "start_time": "9:00PM",
            "end_time": "9:15PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Linda",
            "start_time": "9:30PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since midnight\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes since midnight to time string\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    'Pacific Heights': {\n        'Marina District': 6,\n        'The Castro': 16,\n        'Richmond District': 12,\n        'Alamo Square': 10,\n        'Financial District': 13,\n        'Presidio': 11,\n        'Mission District': 15,\n        'Nob Hill': 8,\n        'Russian Hill': 7\n    },\n    'Marina District': {\n        'Pacific Heights': 7,\n        'The Castro': 22,\n        'Richmond District': 11,\n        'Alamo Square': 15,\n        'Financial District': 17,\n        'Presidio': 10,\n        'Mission District': 20,\n        'Nob Hill': 12,\n        'Russian Hill': 8\n    },\n    'The Castro': {\n        'Pacific Heights': 16,\n        'Marina District': 21,\n        'Richmond District': 16,\n        'Alamo Square': 8,\n        'Financial District': 21,\n        'Presidio': 20,\n        'Mission District': 7,\n        'Nob Hill': 16,\n        'Russian Hill': 18\n    },\n    'Richmond District': {\n        'Pacific Heights': 10,\n        'Marina District': 9,\n        'The Castro': 16,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Presidio': 7,\n        'Mission District': 20,\n        'Nob Hill': 17,\n        'Russian Hill': 13\n    },\n    'Alamo Square': {\n        'Pacific Heights': 10,\n        'Marina District': 15,\n        'The Castro': 8,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Presidio': 17,\n        'Mission District': 10,\n        'Nob Hill': 11,\n        'Russian Hill': 13\n    },\n    'Financial District': {\n        'Pacific Heights': 13,\n        'Marina District': 15,\n        'The Castro': 20,\n        'Richmond District': 21,\n        'Alamo Square': 17,\n        'Presidio': 22,\n        'Mission District': 17,\n        'Nob Hill': 8,\n        'Russian Hill': 11\n    },\n    'Presidio': {\n        'Pacific Heights': 11,\n        'Marina District': 11,\n        'The Castro': 21,\n        'Richmond District': 7,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'Mission District': 26,\n        'Nob Hill': 18,\n        'Russian Hill': 14\n    },\n    'Mission District': {\n        'Pacific Heights': 16,\n        'Marina District': 19,\n        'The Castro': 7,\n        'Richmond District': 20,\n        'Alamo Square': 11,\n        'Financial District': 15,\n        'Presidio': 25,\n        'Nob Hill': 12,\n        'Russian Hill': 15\n    },\n    'Nob Hill': {\n        'Pacific Heights': 8,\n        'Marina District': 11,\n        'The Castro': 17,\n        'Richmond District': 14,\n        'Alamo Square': 11,\n        'Financial District': 9,\n        'Presidio': 17,\n        'Mission District': 13,\n        'Russian Hill': 5\n    },\n    'Russian Hill': {\n        'Pacific Heights': 7,\n        'Marina District': 7,\n        'The Castro': 21,\n        'Richmond District': 14,\n        'Alamo Square': 15,\n        'Financial District': 11,\n        'Presidio': 14,\n        'Mission District': 16,\n        'Nob Hill': 5\n    }\n}\n\n# Friends' availability\nfriends = {\n    'Linda': {\n        'location': 'Marina District',\n        'start': time_to_minutes('6:00PM'),\n        'end': time_to_minutes('10:00PM'),\n        'duration': 30\n    },\n    'Kenneth': {\n        'location': 'The Castro',\n        'start': time_to_minutes('2:45PM'),\n        'end': time_to_minutes('4:15PM'),\n        'duration': 30\n    },\n    'Kimberly': {\n        'location': 'Richmond District',\n        'start': time_to_minutes('2:15PM'),\n        'end': time_to_minutes('10:00PM'),\n        'duration': 30\n    },\n    'Paul': {\n        'location': 'Alamo Square',\n        'start': time_to_minutes('9:00PM'),\n        'end': time_to_minutes('9:30PM'),\n        'duration': 15\n    },\n    'Carol': {\n        'location': 'Financial District',\n        'start': time_to_minutes('10:15AM'),\n        'end': time_to_minutes('12:00PM'),\n        'duration': 60\n    },\n    'Brian': {\n        'location': 'Presidio',\n        'start': time_to_minutes('10:00AM'),\n        'end': time_to_minutes('9:30PM'),\n        'duration': 75\n    },\n    'Laura': {\n        'location': 'Mission District',\n        'start': time_to_minutes('4:15PM'),\n        'end': time_to_minutes('8:30PM'),\n        'duration': 30\n    },\n    'Sandra': {\n        'location': 'Nob Hill',\n        'start': time_to_minutes('9:15AM'),\n        'end': time_to_minutes('6:30PM'),\n        'duration': 60\n    },\n    'Karen': {\n        'location': 'Russian Hill',\n        'start': time_to_minutes('6:30PM'),\n        'end': time_to_minutes('10:00PM'),\n        'duration': 75\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Pacific Heights'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        destination = friend_data['location']\n        travel_time = travel_times[current_location].get(destination, float('inf'))\n        \n        # Travel to friend's location\n        arrival_time = current_time + travel_time\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_time,\n            'time': minutes_to_time(current_time),\n            'to': destination\n        })\n        \n        # Check if we can meet the friend\n        meeting_start = max(arrival_time, friend_data['start'])\n        meeting_end = meeting_start + friend_data['duration']\n        \n        if meeting_end > friend_data['end']:\n            # Can't meet this friend with current schedule\n            return None, set()\n        \n        # Add waiting time if needed\n        if arrival_time < friend_data['start']:\n            wait_time = friend_data['start'] - arrival_time\n            schedule.append({\n                'action': 'wait',\n                'location': destination,\n                'time': minutes_to_time(arrival_time)\n            })\n        \n        # Add meeting\n        schedule.append({\n            'action': 'meet',\n            'location': destination,\n            'duration': friend_data['duration'],\n            'time': minutes_to_time(meeting_start)\n        })\n        \n        met_friends.add(friend)\n        current_time = meeting_end\n        current_location = destination\n    \n    return schedule, met_friends\n\n# Try different orders to maximize the number of friends met\nbest_schedule = None\nbest_count = 0\nall_friends = list(friends.keys())\n\n# We'll try a reasonable number of permutations to find a good schedule\nfor _ in range(1000):\n    import random\n    random.shuffle(all_friends)\n    schedule, met_friends = calculate_schedule(all_friends)\n    if schedule and len(met_friends) > best_count:\n        best_schedule = schedule\n        best_count = len(met_friends)\n    if best_count == len(all_friends):\n        break\n\n# If no schedule meets all friends, try to find one that meets most\nif best_schedule is None:\n    for friend in all_friends:\n        schedule, met_friends = calculate_schedule([friend])\n        if schedule and len(met_friends) > best_count:\n            best_schedule = schedule\n            best_count = len(met_friends)\n\n# Default to a schedule that meets at least one friend if all else fails\nif best_schedule is None:\n    best_schedule = [{'action': 'start', 'location': 'Pacific Heights', 'time': '9:00AM'}]\n\nprint(json.dumps({'schedule': best_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_870"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "9:20AM",
            "end_time": "11:20AM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "David",
            "start_time": "12:30PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jessica",
            "start_time": "1:45PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "2:37PM",
            "end_time": "3:22PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mark",
            "start_time": "3:28PM",
            "end_time": "4:13PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "9:20AM",
            "end_time": "11:20AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Matthew",
            "start_time": "11:37AM",
            "end_time": "1:07PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "David",
            "start_time": "1:23PM",
            "end_time": "2:08PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "2:36PM",
            "end_time": "3:21PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mark",
            "start_time": "3:27PM",
            "end_time": "4:12PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jessica",
            "start_time": "4:17PM",
            "end_time": "5:02PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Deborah",
            "start_time": "7:00PM",
            "end_time": "7:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Karen",
            "start_time": "7:57PM",
            "end_time": "9:57PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Richmond District': {\n        'Chinatown': 20,\n        'Sunset District': 11,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Presidio': 7,\n        'Golden Gate Park': 9,\n        'Bayview': 27\n    },\n    'Chinatown': {\n        'Richmond District': 20,\n        'Sunset District': 29,\n        'Alamo Square': 17,\n        'Financial District': 5,\n        'North Beach': 3,\n        'Embarcadero': 5,\n        'Presidio': 19,\n        'Golden Gate Park': 23,\n        'Bayview': 20\n    },\n    'Sunset District': {\n        'Richmond District': 12,\n        'Chinatown': 30,\n        'Alamo Square': 17,\n        'Financial District': 30,\n        'North Beach': 28,\n        'Embarcadero': 30,\n        'Presidio': 16,\n        'Golden Gate Park': 11,\n        'Bayview': 22\n    },\n    'Alamo Square': {\n        'Richmond District': 11,\n        'Chinatown': 15,\n        'Sunset District': 16,\n        'Financial District': 17,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Presidio': 17,\n        'Golden Gate Park': 9,\n        'Bayview': 16\n    },\n    'Financial District': {\n        'Richmond District': 21,\n        'Chinatown': 5,\n        'Sunset District': 30,\n        'Alamo Square': 17,\n        'North Beach': 7,\n        'Embarcadero': 4,\n        'Presidio': 22,\n        'Golden Gate Park': 23,\n        'Bayview': 19\n    },\n    'North Beach': {\n        'Richmond District': 18,\n        'Chinatown': 6,\n        'Sunset District': 27,\n        'Alamo Square': 16,\n        'Financial District': 8,\n        'Embarcadero': 6,\n        'Presidio': 17,\n        'Golden Gate Park': 22,\n        'Bayview': 25\n    },\n    'Embarcadero': {\n        'Richmond District': 21,\n        'Chinatown': 7,\n        'Sunset District': 30,\n        'Alamo Square': 19,\n        'Financial District': 5,\n        'North Beach': 5,\n        'Presidio': 20,\n        'Golden Gate Park': 25,\n        'Bayview': 21\n    },\n    'Presidio': {\n        'Richmond District': 7,\n        'Chinatown': 21,\n        'Sunset District': 15,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Bayview': 31\n    },\n    'Golden Gate Park': {\n        'Richmond District': 7,\n        'Chinatown': 23,\n        'Sunset District': 10,\n        'Alamo Square': 9,\n        'Financial District': 26,\n        'North Beach': 23,\n        'Embarcadero': 25,\n        'Presidio': 11,\n        'Bayview': 23\n    },\n    'Bayview': {\n        'Richmond District': 25,\n        'Chinatown': 19,\n        'Sunset District': 23,\n        'Alamo Square': 16,\n        'Financial District': 19,\n        'North Beach': 22,\n        'Embarcadero': 19,\n        'Presidio': 32,\n        'Golden Gate Park': 22\n    }\n}\n\n# Friend constraints\nfriends = [\n    {'name': 'Robert', 'location': 'Chinatown', 'start': '7:45AM', 'end': '5:30PM', 'duration': 120},\n    {'name': 'David', 'location': 'Sunset District', 'start': '12:30PM', 'end': '7:45PM', 'duration': 45},\n    {'name': 'Matthew', 'location': 'Alamo Square', 'start': '8:45AM', 'end': '1:45PM', 'duration': 90},\n    {'name': 'Jessica', 'location': 'Financial District', 'start': '9:30AM', 'end': '6:45PM', 'duration': 45},\n    {'name': 'Melissa', 'location': 'North Beach', 'start': '7:15AM', 'end': '4:45PM', 'duration': 45},\n    {'name': 'Mark', 'location': 'Embarcadero', 'start': '3:15PM', 'end': '5:00PM', 'duration': 45},\n    {'name': 'Deborah', 'location': 'Presidio', 'start': '7:00PM', 'end': '7:45PM', 'duration': 45},\n    {'name': 'Karen', 'location': 'Golden Gate Park', 'start': '7:30PM', 'end': '10:00PM', 'duration': 120},\n    {'name': 'Laura', 'location': 'Bayview', 'start': '9:15PM', 'end': '10:15PM', 'duration': 15}\n]\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n        time_part = time_str.replace('AM', '').strip()\n    else:\n        period = 'PM'\n        time_part = time_str.replace('PM', '').strip()\n    \n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend, current_location):\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    travel_time = travel_times[current_location][friend['location']]\n    \n    arrival_time = current_time + travel_time\n    if arrival_time > friend_end:\n        return None\n    \n    meet_start = max(arrival_time, friend_start)\n    meet_end = meet_start + friend['duration']\n    \n    if meet_end > friend_end:\n        return None\n    \n    return {\n        'travel_time': travel_time,\n        'arrival_time': arrival_time,\n        'meet_start': meet_start,\n        'meet_end': meet_end,\n        'wait_time': max(0, friend_start - arrival_time)\n    }\n\ndef generate_schedule(meeting_order):\n    schedule = []\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Richmond District'\n    schedule.append({'action': 'start', 'location': current_location, 'time': '9:00AM'})\n    \n    for friend_name in meeting_order:\n        friend = next(f for f in friends if f['name'] == friend_name)\n        meeting_info = can_meet_friend(current_time, friend, current_location)\n        if not meeting_info:\n            return None\n        \n        if meeting_info['travel_time'] > 0:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': meeting_info['travel_time'],\n                'time': minutes_to_time(current_time),\n                'to': friend['location']\n            })\n        \n        current_time += meeting_info['travel_time']\n        \n        if meeting_info['wait_time'] > 0:\n            schedule.append({\n                'action': 'wait',\n                'location': friend['location'],\n                'time': minutes_to_time(current_time),\n                'duration': meeting_info['wait_time']\n            })\n            current_time += meeting_info['wait_time']\n        \n        schedule.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'duration': friend['duration'],\n            'time': minutes_to_time(current_time),\n            'with': friend['name']\n        })\n        current_time += friend['duration']\n        current_location = friend['location']\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return -1\n    met_friends = set()\n    for item in schedule:\n        if item['action'] == 'meet':\n            met_friends.add(item['with'])\n    return len(met_friends)\n\ndef find_best_schedule():\n    friend_names = [f['name'] for f in friends]\n    best_score = -1\n    best_schedule = None\n    \n    # We'll try permutations of length up to all friends, but limit for performance\n    for perm_length in range(1, min(5, len(friend_names)) + 1):\n        for perm in permutations(friend_names, perm_length):\n            schedule = generate_schedule(perm)\n            score = evaluate_schedule(schedule)\n            if score > best_score:\n                best_score = score\n                best_schedule = schedule\n                if best_score == len(friend_names):\n                    return best_schedule\n    return best_schedule\n\nbest_schedule = find_best_schedule()\n\n# Convert to required output format\noutput_schedule = []\ncurrent_time = time_to_minutes('9:00AM')\ncurrent_location = 'Richmond District'\noutput_schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"})\n\nif best_schedule:\n    for item in best_schedule:\n        if item['action'] == 'travel':\n            output_schedule.append({\n                \"action\": \"travel\",\n                \"location\": item['location'],\n                \"duration\": item['duration'],\n                \"time\": item['time'],\n                \"to\": item['to']\n            })\n        elif item['action'] == 'wait':\n            output_schedule.append({\n                \"action\": \"wait\",\n                \"location\": item['location'],\n                \"time\": item['time'],\n                \"duration\": item['duration']\n            })\n        elif item['action'] == 'meet':\n            output_schedule.append({\n                \"action\": \"meet\",\n                \"location\": item['location'],\n                \"duration\": item['duration'],\n                \"time\": item['time']\n            })\n\nprint(json.dumps({\"schedule\": output_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_884"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "James",
            "start_time": "12:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "2:07PM",
            "end_time": "2:37PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "James",
            "start_time": "12:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "2:07PM",
            "end_time": "2:37PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{minutes:02d}{period}\"\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        ('North Beach', 'Mission District'): 18,\n        ('North Beach', 'The Castro'): 22,\n        ('Mission District', 'North Beach'): 17,\n        ('Mission District', 'The Castro'): 7,\n        ('The Castro', 'North Beach'): 20,\n        ('The Castro', 'Mission District'): 7\n    }\n    \n    james_available_start = time_to_minutes('12:45PM')\n    james_available_end = time_to_minutes('2:00PM')\n    james_min_duration = 75\n    \n    robert_available_start = time_to_minutes('12:45PM')\n    robert_available_end = time_to_minutes('3:15PM')\n    robert_min_duration = 30\n    \n    current_location = 'North Beach'\n    current_time = time_to_minutes('9:00AM')\n    \n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": minutes_to_time(current_time)\n    })\n    \n    # Try to meet both friends\n    # Option 1: Meet James first, then Robert\n    option1_success = True\n    option1_schedule = schedule.copy()\n    \n    # Travel to Mission District to meet James\n    travel_time = travel_times[(current_location, 'Mission District')]\n    arrival_time = current_time + travel_time\n    option1_schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time,\n        \"time\": minutes_to_time(current_time),\n        \"to\": \"Mission District\"\n    })\n    \n    # Wait until James is available if needed\n    if arrival_time < james_available_start:\n        wait_time = james_available_start - arrival_time\n        option1_schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": minutes_to_time(arrival_time)\n        })\n        arrival_time = james_available_start\n    \n    # Check if we can meet James for required duration\n    if arrival_time + james_min_duration > james_available_end:\n        option1_success = False\n    else:\n        # Meet James\n        option1_schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"duration\": james_min_duration,\n            \"time\": minutes_to_time(arrival_time)\n        })\n        departure_time = arrival_time + james_min_duration\n        \n        # Travel to The Castro to meet Robert\n        travel_time = travel_times[('Mission District', 'The Castro')]\n        arrival_time = departure_time + travel_time\n        option1_schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(departure_time),\n            \"to\": \"The Castro\"\n        })\n        \n        # Check if we can meet Robert\n        if arrival_time > robert_available_end:\n            option1_success = False\n        else:\n            meet_time = min(robert_available_end - arrival_time, robert_min_duration)\n            if meet_time >= robert_min_duration:\n                option1_schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"The Castro\",\n                    \"duration\": robert_min_duration,\n                    \"time\": minutes_to_time(arrival_time)\n                })\n            else:\n                option1_success = False\n    \n    # Option 2: Meet Robert first, then James\n    option2_success = True\n    option2_schedule = schedule.copy()\n    \n    # Travel to The Castro to meet Robert\n    travel_time = travel_times[(current_location, 'The Castro')]\n    arrival_time = current_time + travel_time\n    option2_schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time,\n        \"time\": minutes_to_time(current_time),\n        \"to\": \"The Castro\"\n    })\n    \n    # Wait until Robert is available if needed\n    if arrival_time < robert_available_start:\n        wait_time = robert_available_start - arrival_time\n        option2_schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": minutes_to_time(arrival_time)\n        })\n        arrival_time = robert_available_start\n    \n    # Meet Robert\n    meet_time = min(robert_available_end - arrival_time, robert_min_duration)\n    if meet_time >= robert_min_duration:\n        option2_schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"duration\": robert_min_duration,\n            \"time\": minutes_to_time(arrival_time)\n        })\n        departure_time = arrival_time + robert_min_duration\n    else:\n        option2_success = False\n    \n    if option2_success:\n        # Travel to Mission District to meet James\n        travel_time = travel_times[('The Castro', 'Mission District')]\n        arrival_time = departure_time + travel_time\n        option2_schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(departure_time),\n            \"to\": \"Mission District\"\n        })\n        \n        # Check if we can meet James\n        if arrival_time > james_available_end:\n            option2_success = False\n        else:\n            meet_time = min(james_available_end - arrival_time, james_min_duration)\n            if meet_time >= james_min_duration:\n                option2_schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Mission District\",\n                    \"duration\": james_min_duration,\n                    \"time\": minutes_to_time(arrival_time)\n                })\n            else:\n                option2_success = False\n    \n    # Choose the best option\n    if option1_success and option2_success:\n        # Both options work, choose the one that meets friends earlier\n        final_schedule = option1_schedule\n    elif option1_success:\n        final_schedule = option1_schedule\n    elif option2_success:\n        final_schedule = option2_schedule\n    else:\n        # Can't meet both, try to meet just one\n        # Try to meet James\n        option3_schedule = schedule.copy()\n        travel_time = travel_times[(current_location, 'Mission District')]\n        arrival_time = current_time + travel_time\n        option3_schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(current_time),\n            \"to\": \"Mission District\"\n        })\n        \n        if arrival_time < james_available_start:\n            wait_time = james_available_start - arrival_time\n            option3_schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Mission District\",\n                \"time\": minutes_to_time(arrival_time)\n            })\n            arrival_time = james_available_start\n        \n        if arrival_time + james_min_duration <= james_available_end:\n            option3_schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Mission District\",\n                \"duration\": james_min_duration,\n                \"time\": minutes_to_time(arrival_time)\n            })\n            final_schedule = option3_schedule\n        else:\n            # Try to meet Robert\n            option4_schedule = schedule.copy()\n            travel_time = travel_times[(current_location, 'The Castro')]\n            arrival_time = current_time + travel_time\n            option4_schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_time,\n                \"time\": minutes_to_time(current_time),\n                \"to\": \"The Castro\"\n            })\n            \n            if arrival_time < robert_available_start:\n                wait_time = robert_available_start - arrival_time\n                option4_schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"The Castro\",\n                    \"time\": minutes_to_time(arrival_time)\n                })\n                arrival_time = robert_available_start\n            \n            meet_time = min(robert_available_end - arrival_time, robert_min_duration)\n            if meet_time >= robert_min_duration:\n                option4_schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"The Castro\",\n                    \"duration\": robert_min_duration,\n                    \"time\": minutes_to_time(arrival_time)\n                })\n                final_schedule = option4_schedule\n            else:\n                # Can't meet anyone\n                final_schedule = schedule\n    \n    return {\"schedule\": final_schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_180"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kenneth",
            "start_time": "12:00PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "4:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kenneth",
            "start_time": "12:00PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "4:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef add_minutes_to_time(time_str, minutes_to_add):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    new_time = time_obj + timedelta(minutes=minutes_to_add)\n    return new_time.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    start_time_str = \"9:00AM\"\n    \n    # Friend constraints\n    thomas_location = \"Pacific Heights\"\n    thomas_window_start_str = \"3:30PM\"\n    thomas_window_end_str = \"7:15PM\"\n    thomas_min_duration = 75\n    \n    kenneth_location = \"Mission District\"\n    kenneth_window_start_str = \"12:00PM\"\n    kenneth_window_end_str = \"3:45PM\"\n    kenneth_min_duration = 45\n    \n    # Travel times in minutes\n    travel_times = {\n        (\"Nob Hill\", \"Pacific Heights\"): 8,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Pacific Heights\", \"Nob Hill\"): 8,\n        (\"Pacific Heights\", \"Mission District\"): 15,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Mission District\", \"Pacific Heights\"): 16\n    }\n    \n    # Convert all times to minutes since midnight for easier calculations\n    start_time = time_to_minutes(start_time_str)\n    thomas_window_start = time_to_minutes(thomas_window_start_str)\n    thomas_window_end = time_to_minutes(thomas_window_end_str)\n    kenneth_window_start = time_to_minutes(kenneth_window_start_str)\n    kenneth_window_end = time_to_minutes(kenneth_window_end_str)\n    \n    # Possible schedules: meet Kenneth first or Thomas first\n    best_schedule = None\n    max_meetings = 0\n    \n    # Option 1: Meet Kenneth first, then Thomas\n    current_time = start_time\n    schedule1 = [{\"action\": \"start\", \"location\": start_location, \"time\": start_time_str}]\n    \n    # Travel to Kenneth\n    travel_duration = travel_times[(start_location, kenneth_location)]\n    current_time += travel_duration\n    schedule1.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(current_time - travel_duration),\n        \"to\": kenneth_location\n    })\n    \n    # Wait if necessary\n    if current_time < kenneth_window_start:\n        wait_duration = kenneth_window_start - current_time\n        schedule1.append({\n            \"action\": \"wait\",\n            \"location\": kenneth_location,\n            \"time\": minutes_to_time(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = kenneth_window_start\n    \n    # Meet Kenneth\n    meet_duration = kenneth_min_duration\n    if current_time + meet_duration > kenneth_window_end:\n        meet_duration = kenneth_window_end - current_time\n    if meet_duration >= kenneth_min_duration:\n        schedule1.append({\n            \"action\": \"meet\",\n            \"location\": kenneth_location,\n            \"duration\": meet_duration,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time += meet_duration\n        \n        # Travel to Thomas\n        travel_duration = travel_times[(kenneth_location, thomas_location)]\n        current_time += travel_duration\n        schedule1.append({\n            \"action\": \"travel\",\n            \"location\": kenneth_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time - travel_duration),\n            \"to\": thomas_location\n        })\n        \n        # Wait if necessary\n        if current_time < thomas_window_start:\n            wait_duration = thomas_window_start - current_time\n            schedule1.append({\n                \"action\": \"wait\",\n                \"location\": thomas_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = thomas_window_start\n        \n        # Meet Thomas\n        meet_duration = thomas_min_duration\n        if current_time + meet_duration > thomas_window_end:\n            meet_duration = thomas_window_end - current_time\n        if meet_duration >= thomas_min_duration:\n            schedule1.append({\n                \"action\": \"meet\",\n                \"location\": thomas_location,\n                \"duration\": meet_duration,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time += meet_duration\n            meetings_count = 2\n        else:\n            meetings_count = 1\n    else:\n        meetings_count = 0\n    \n    if meetings_count > max_meetings:\n        best_schedule = schedule1\n        max_meetings = meetings_count\n    \n    # Option 2: Meet Thomas first, then Kenneth (if possible)\n    current_time = start_time\n    schedule2 = [{\"action\": \"start\", \"location\": start_location, \"time\": start_time_str}]\n    \n    # Travel to Thomas\n    travel_duration = travel_times[(start_location, thomas_location)]\n    current_time += travel_duration\n    schedule2.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(current_time - travel_duration),\n        \"to\": thomas_location\n    })\n    \n    # Thomas isn't available until 3:30PM, so this would require waiting until then\n    if current_time < thomas_window_start:\n        wait_duration = thomas_window_start - current_time\n        schedule2.append({\n            \"action\": \"wait\",\n            \"location\": thomas_location,\n            \"time\": minutes_to_time(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = thomas_window_start\n    \n    # Meet Thomas\n    meet_duration = thomas_min_duration\n    if current_time + meet_duration > thomas_window_end:\n        meet_duration = thomas_window_end - current_time\n    if meet_duration >= thomas_min_duration:\n        schedule2.append({\n            \"action\": \"meet\",\n            \"location\": thomas_location,\n            \"duration\": meet_duration,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time += meet_duration\n        \n        # Travel to Kenneth\n        travel_duration = travel_times[(thomas_location, kenneth_location)]\n        current_time += travel_duration\n        schedule2.append({\n            \"action\": \"travel\",\n            \"location\": thomas_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time - travel_duration),\n            \"to\": kenneth_location\n        })\n        \n        # Check if we can still meet Kenneth\n        if current_time <= kenneth_window_end:\n            meet_duration = min(kenneth_min_duration, kenneth_window_end - current_time)\n            if meet_duration >= kenneth_min_duration:\n                schedule2.append({\n                    \"action\": \"meet\",\n                    \"location\": kenneth_location,\n                    \"duration\": meet_duration,\n                    \"time\": minutes_to_time(current_time)\n                })\n                current_time += meet_duration\n                meetings_count = 2\n            else:\n                meetings_count = 1\n        else:\n            meetings_count = 1\n    else:\n        meetings_count = 0\n    \n    if meetings_count > max_meetings or (meetings_count == max_meetings and meetings_count > 0):\n        best_schedule = schedule2\n    \n    # If no schedule meets both, try to meet just one\n    if max_meetings == 0:\n        # Try to meet Kenneth only\n        current_time = start_time\n        schedule_k = [{\"action\": \"start\", \"location\": start_location, \"time\": start_time_str}]\n        \n        # Travel to Kenneth\n        travel_duration = travel_times[(start_location, kenneth_location)]\n        current_time += travel_duration\n        schedule_k.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time - travel_duration),\n            \"to\": kenneth_location\n        })\n        \n        # Wait if necessary\n        if current_time < kenneth_window_start:\n            wait_duration = kenneth_window_start - current_time\n            schedule_k.append({\n                \"action\": \"wait\",\n                \"location\": kenneth_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = kenneth_window_start\n        \n        # Meet Kenneth\n        meet_duration = kenneth_min_duration\n        if current_time + meet_duration <= kenneth_window_end:\n            schedule_k.append({\n                \"action\": \"meet\",\n                \"location\": kenneth_location,\n                \"duration\": meet_duration,\n                \"time\": minutes_to_time(current_time)\n            })\n            best_schedule = schedule_k\n        \n        # Try to meet Thomas only\n        current_time = start_time\n        schedule_t = [{\"action\": \"start\", \"location\": start_location, \"time\": start_time_str}]\n        \n        # Travel to Thomas\n        travel_duration = travel_times[(start_location, thomas_location)]\n        current_time += travel_duration\n        schedule_t.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(current_time - travel_duration),\n            \"to\": thomas_location\n        })\n        \n        # Wait until Thomas is available\n        if current_time < thomas_window_start:\n            wait_duration = thomas_window_start - current_time\n            schedule_t.append({\n                \"action\": \"wait\",\n                \"location\": thomas_location,\n                \"time\": minutes_to_time(current_time),\n                \"duration\": wait_duration\n            })\n            current_time = thomas_window_start\n        \n        # Meet Thomas\n        meet_duration = thomas_min_duration\n        if current_time + meet_duration <= thomas_window_end:\n            schedule_t.append({\n                \"action\": \"meet\",\n                \"location\": thomas_location,\n                \"duration\": meet_duration,\n                \"time\": minutes_to_time(current_time)\n            })\n            # If both single-meeting schedules are possible, pick the one with more meeting time\n            if best_schedule is None or meet_duration > kenneth_min_duration:\n                best_schedule = schedule_t\n    \n    # Convert times back to proper format in the schedule\n    if best_schedule:\n        for entry in best_schedule:\n            if 'time' in entry:\n                entry['time'] = add_minutes_to_time(entry['time'], 0)\n    \n    return best_schedule if best_schedule else []\n\ndef main():\n    schedule = compute_schedule()\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_174"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "12:15PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Thomas",
            "start_time": "1:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Nancy",
            "start_time": "2:45PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Jessica",
            "start_time": "4:30PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Charles",
            "start_time": "6:47PM",
            "end_time": "8:32PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Thomas",
            "start_time": "1:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Nancy",
            "start_time": "2:45PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "3:09PM",
            "end_time": "4:09PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Jessica",
            "start_time": "4:30PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Mary",
            "start_time": "6:37PM",
            "end_time": "7:37PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Matthew",
            "start_time": "7:52PM",
            "end_time": "9:52PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef parse_duration(duration_str):\n    return timedelta(minutes=int(duration_str))\n\ndef calculate_schedule():\n    # Travel times dictionary (from -> to -> minutes)\n    travel_times = {\n        'Embarcadero': {\n            'Bayview': 21, 'Chinatown': 7, 'Alamo Square': 19, 'Nob Hill': 10,\n            'Presidio': 20, 'Union Square': 10, 'The Castro': 25, 'North Beach': 5,\n            'Fisherman\\'s Wharf': 6, 'Marina District': 12\n        },\n        'Bayview': {\n            'Embarcadero': 19, 'Chinatown': 19, 'Alamo Square': 16, 'Nob Hill': 20,\n            'Presidio': 32, 'Union Square': 18, 'The Castro': 19, 'North Beach': 22,\n            'Fisherman\\'s Wharf': 25, 'Marina District': 27\n        },\n        'Chinatown': {\n            'Embarcadero': 5, 'Bayview': 20, 'Alamo Square': 17, 'Nob Hill': 9,\n            'Presidio': 19, 'Union Square': 7, 'The Castro': 22, 'North Beach': 3,\n            'Fisherman\\'s Wharf': 8, 'Marina District': 12\n        },\n        'Alamo Square': {\n            'Embarcadero': 16, 'Bayview': 16, 'Chinatown': 15, 'Nob Hill': 11,\n            'Presidio': 17, 'Union Square': 14, 'The Castro': 8, 'North Beach': 15,\n            'Fisherman\\'s Wharf': 19, 'Marina District': 15\n        },\n        'Nob Hill': {\n            'Embarcadero': 9, 'Bayview': 19, 'Chinatown': 6, 'Alamo Square': 11,\n            'Presidio': 17, 'Union Square': 7, 'The Castro': 17, 'North Beach': 8,\n            'Fisherman\\'s Wharf': 10, 'Marina District': 11\n        },\n        'Presidio': {\n            'Embarcadero': 20, 'Bayview': 31, 'Chinatown': 21, 'Alamo Square': 19,\n            'Nob Hill': 18, 'Union Square': 22, 'The Castro': 21, 'North Beach': 18,\n            'Fisherman\\'s Wharf': 19, 'Marina District': 11\n        },\n        'Union Square': {\n            'Embarcadero': 11, 'Bayview': 15, 'Chinatown': 7, 'Alamo Square': 15,\n            'Nob Hill': 9, 'Presidio': 24, 'The Castro': 17, 'North Beach': 10,\n            'Fisherman\\'s Wharf': 15, 'Marina District': 18\n        },\n        'The Castro': {\n            'Embarcadero': 22, 'Bayview': 19, 'Chinatown': 22, 'Alamo Square': 8,\n            'Nob Hill': 16, 'Presidio': 20, 'Union Square': 19, 'North Beach': 20,\n            'Fisherman\\'s Wharf': 24, 'Marina District': 21\n        },\n        'North Beach': {\n            'Embarcadero': 6, 'Bayview': 25, 'Chinatown': 6, 'Alamo Square': 16,\n            'Nob Hill': 7, 'Presidio': 17, 'Union Square': 7, 'The Castro': 23,\n            'Fisherman\\'s Wharf': 5, 'Marina District': 9\n        },\n        'Fisherman\\'s Wharf': {\n            'Embarcadero': 8, 'Bayview': 26, 'Chinatown': 12, 'Alamo Square': 21,\n            'Nob Hill': 11, 'Presidio': 17, 'Union Square': 13, 'The Castro': 27,\n            'North Beach': 6, 'Marina District': 9\n        },\n        'Marina District': {\n            'Embarcadero': 14, 'Bayview': 27, 'Chinatown': 15, 'Alamo Square': 15,\n            'Nob Hill': 12, 'Presidio': 10, 'Union Square': 16, 'The Castro': 22,\n            'North Beach': 11, 'Fisherman\\'s Wharf': 10\n        }\n    }\n\n    # Friends' availability\n    friends = [\n        {'name': 'Matthew', 'location': 'Bayview', 'start': '7:15PM', 'end': '10:00PM', 'min_duration': 120},\n        {'name': 'Karen', 'location': 'Chinatown', 'start': '7:15PM', 'end': '9:15PM', 'min_duration': 90},\n        {'name': 'Sarah', 'location': 'Alamo Square', 'start': '8:00PM', 'end': '9:45PM', 'min_duration': 105},\n        {'name': 'Jessica', 'location': 'Nob Hill', 'start': '4:30PM', 'end': '6:45PM', 'min_duration': 120},\n        {'name': 'Stephanie', 'location': 'Presidio', 'start': '7:30AM', 'end': '10:15AM', 'min_duration': 60},\n        {'name': 'Mary', 'location': 'Union Square', 'start': '4:45PM', 'end': '9:30PM', 'min_duration': 60},\n        {'name': 'Charles', 'location': 'The Castro', 'start': '4:30PM', 'end': '10:00PM', 'min_duration': 105},\n        {'name': 'Nancy', 'location': 'North Beach', 'start': '2:45PM', 'end': '8:00PM', 'min_duration': 15},\n        {'name': 'Thomas', 'location': 'Fisherman\\'s Wharf', 'start': '1:30PM', 'end': '7:00PM', 'min_duration': 30},\n        {'name': 'Brian', 'location': 'Marina District', 'start': '12:15PM', 'end': '6:00PM', 'min_duration': 60}\n    ]\n\n    # Convert times to datetime objects\n    for friend in friends:\n        friend['start_dt'] = parse_time(friend['start'])\n        friend['end_dt'] = parse_time(friend['end'])\n        friend['min_duration_td'] = timedelta(minutes=friend['min_duration'])\n\n    # Sort friends by earliest start time\n    friends.sort(key=lambda x: x['start_dt'])\n\n    current_time = parse_time('9:00AM')\n    current_location = 'Embarcadero'\n    schedule = [{'action': 'start', 'location': current_location, 'time': format_time(current_time)}]\n\n    # Try to meet as many friends as possible\n    for friend in friends:\n        # Check if we can meet this friend\n        travel_duration = timedelta(minutes=travel_times[current_location][friend['location']])\n        arrival_time = current_time + travel_duration\n        \n        # If we arrive before friend's availability starts, wait\n        if arrival_time < friend['start_dt']:\n            wait_time = friend['start_dt'] - arrival_time\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration.seconds // 60,\n                'time': format_time(current_time),\n                'to': friend['location']\n            })\n            schedule.append({\n                'action': 'wait',\n                'location': friend['location'],\n                'time': format_time(arrival_time)\n            })\n            current_time = friend['start_dt']\n            current_location = friend['location']\n        \n        # If we arrive during friend's availability\n        elif arrival_time <= friend['end_dt']:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_duration.seconds // 60,\n                'time': format_time(current_time),\n                'to': friend['location']\n            })\n            current_time = arrival_time\n            current_location = friend['location']\n        \n        # If we can't arrive before friend's availability ends, skip\n        else:\n            continue\n        \n        # Calculate meeting time\n        meeting_end = min(current_time + friend['min_duration_td'], friend['end_dt'])\n        if meeting_end - current_time >= friend['min_duration_td']:\n            schedule.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'duration': (meeting_end - current_time).seconds // 60,\n                'time': format_time(current_time)\n            })\n            current_time = meeting_end\n        else:\n            # Not enough time to meet, remove travel entry\n            schedule.pop()\n            current_time -= travel_duration\n\n    # Convert datetime objects back to strings for JSON output\n    for entry in schedule:\n        if 'time' in entry and isinstance(entry['time'], datetime):\n            entry['time'] = format_time(entry['time'])\n\n    return {'schedule': schedule}\n\nif __name__ == '__main__':\n    result = calculate_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_976"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Karen",
            "start_time": "9:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "11:17AM",
            "end_time": "12:47PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "David",
            "start_time": "12:55PM",
            "end_time": "2:55PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Matthew",
            "start_time": "3:01PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "3:45PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Kevin",
            "start_time": "5:09PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Linda",
            "start_time": "6:15PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Nancy",
            "start_time": "7:22PM",
            "end_time": "8:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "8:16PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Karen",
            "start_time": "9:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "11:17AM",
            "end_time": "12:47PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Matthew",
            "start_time": "12:52PM",
            "end_time": "1:37PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "1:52PM",
            "end_time": "3:37PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "David",
            "start_time": "3:54PM",
            "end_time": "5:54PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Linda",
            "start_time": "6:15PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "7:27PM",
            "end_time": "8:57PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndistances = {\n    'Russian Hill': {\n        'Marina District': 7,\n        'Financial District': 11,\n        'Alamo Square': 15,\n        'Golden Gate Park': 21,\n        'The Castro': 21,\n        'Bayview': 23,\n        'Sunset District': 23,\n        'Haight-Ashbury': 17,\n        'Nob Hill': 5\n    },\n    'Marina District': {\n        'Russian Hill': 8,\n        'Financial District': 17,\n        'Alamo Square': 15,\n        'Golden Gate Park': 18,\n        'The Castro': 22,\n        'Bayview': 27,\n        'Sunset District': 19,\n        'Haight-Ashbury': 16,\n        'Nob Hill': 12\n    },\n    'Financial District': {\n        'Russian Hill': 11,\n        'Marina District': 15,\n        'Alamo Square': 17,\n        'Golden Gate Park': 23,\n        'The Castro': 20,\n        'Bayview': 19,\n        'Sunset District': 30,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 8\n    },\n    'Alamo Square': {\n        'Russian Hill': 13,\n        'Marina District': 15,\n        'Financial District': 17,\n        'Golden Gate Park': 9,\n        'The Castro': 8,\n        'Bayview': 16,\n        'Sunset District': 16,\n        'Haight-Ashbury': 5,\n        'Nob Hill': 11\n    },\n    'Golden Gate Park': {\n        'Russian Hill': 19,\n        'Marina District': 16,\n        'Financial District': 26,\n        'Alamo Square': 9,\n        'The Castro': 13,\n        'Bayview': 23,\n        'Sunset District': 10,\n        'Haight-Ashbury': 7,\n        'Nob Hill': 20\n    },\n    'The Castro': {\n        'Russian Hill': 18,\n        'Marina District': 21,\n        'Financial District': 21,\n        'Alamo Square': 8,\n        'Golden Gate Park': 11,\n        'Bayview': 19,\n        'Sunset District': 17,\n        'Haight-Ashbury': 6,\n        'Nob Hill': 16\n    },\n    'Bayview': {\n        'Russian Hill': 23,\n        'Marina District': 27,\n        'Financial District': 19,\n        'Alamo Square': 16,\n        'Golden Gate Park': 22,\n        'The Castro': 19,\n        'Sunset District': 23,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 20\n    },\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Marina District': 21,\n        'Financial District': 30,\n        'Alamo Square': 17,\n        'Golden Gate Park': 11,\n        'The Castro': 17,\n        'Bayview': 22,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 27\n    },\n    'Haight-Ashbury': {\n        'Russian Hill': 17,\n        'Marina District': 17,\n        'Financial District': 21,\n        'Alamo Square': 5,\n        'Golden Gate Park': 7,\n        'The Castro': 6,\n        'Bayview': 18,\n        'Sunset District': 15,\n        'Nob Hill': 15\n    },\n    'Nob Hill': {\n        'Russian Hill': 5,\n        'Marina District': 11,\n        'Financial District': 9,\n        'Alamo Square': 11,\n        'Golden Gate Park': 17,\n        'The Castro': 17,\n        'Bayview': 19,\n        'Sunset District': 24,\n        'Haight-Ashbury': 13\n    }\n}\n\nfriends = {\n    'Mark': {\n        'location': 'Marina District',\n        'start': time_to_minutes('6:45PM'),\n        'end': time_to_minutes('9:00PM'),\n        'duration': 90\n    },\n    'Karen': {\n        'location': 'Financial District',\n        'start': time_to_minutes('9:30AM'),\n        'end': time_to_minutes('12:45PM'),\n        'duration': 90\n    },\n    'Barbara': {\n        'location': 'Alamo Square',\n        'start': time_to_minutes('10:00AM'),\n        'end': time_to_minutes('7:30PM'),\n        'duration': 90\n    },\n    'Nancy': {\n        'location': 'Golden Gate Park',\n        'start': time_to_minutes('4:45PM'),\n        'end': time_to_minutes('8:00PM'),\n        'duration': 105\n    },\n    'David': {\n        'location': 'The Castro',\n        'start': time_to_minutes('9:00AM'),\n        'end': time_to_minutes('6:00PM'),\n        'duration': 120\n    },\n    'Linda': {\n        'location': 'Bayview',\n        'start': time_to_minutes('6:15PM'),\n        'end': time_to_minutes('7:45PM'),\n        'duration': 45\n    },\n    'Kevin': {\n        'location': 'Sunset District',\n        'start': time_to_minutes('10:00AM'),\n        'end': time_to_minutes('5:45PM'),\n        'duration': 120\n    },\n    'Matthew': {\n        'location': 'Haight-Ashbury',\n        'start': time_to_minutes('10:15AM'),\n        'end': time_to_minutes('3:30PM'),\n        'duration': 45\n    },\n    'Andrew': {\n        'location': 'Nob Hill',\n        'start': time_to_minutes('11:45AM'),\n        'end': time_to_minutes('4:45PM'),\n        'duration': 105\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Russian Hill'\n    schedule = [{'action': 'start', 'location': current_location, 'time': '9:00AM'}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        location = friend_data['location']\n        travel_time = distances[current_location][location]\n        \n        arrival_time = current_time + travel_time\n        start_time = max(arrival_time, friend_data['start'])\n        end_time = min(start_time + friend_data['duration'], friend_data['end'])\n        \n        if start_time >= friend_data['end'] or end_time > friend_data['end']:\n            continue\n        \n        if arrival_time < friend_data['start']:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': location\n            })\n            schedule.append({\n                'action': 'wait',\n                'location': location,\n                'time': minutes_to_time(arrival_time)\n            })\n            current_time = friend_data['start']\n        else:\n            schedule.append({\n                'action': 'travel',\n                'location': current_location,\n                'duration': travel_time,\n                'time': minutes_to_time(current_time),\n                'to': location\n            })\n            current_time = arrival_time\n        \n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'duration': end_time - start_time,\n            'time': minutes_to_time(start_time)\n        })\n        met_friends.add(friend)\n        current_time = end_time\n        current_location = location\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    best_schedule = []\n    max_met = 0\n    for perm in permutations(friends.keys()):\n        schedule, met = calculate_schedule(perm)\n        if met > max_met:\n            max_met = met\n            best_schedule = schedule\n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nprint(json.dumps({\"schedule\": optimal_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_885"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "William",
            "start_time": "9:14AM",
            "end_time": "10:14AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kimberly",
            "start_time": "9:00AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "George",
            "start_time": "2:15PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "4:16PM",
            "end_time": "6:16PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Ronald",
            "start_time": "6:25PM",
            "end_time": "6:55PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Charles",
            "start_time": "7:16PM",
            "end_time": "7:31PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "David",
            "start_time": "9:23AM",
            "end_time": "9:38AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "William",
            "start_time": "9:54AM",
            "end_time": "10:54AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kimberly",
            "start_time": "11:13AM",
            "end_time": "12:58PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mary",
            "start_time": "2:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "3:42PM",
            "end_time": "5:42PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Charles",
            "start_time": "5:56PM",
            "end_time": "6:11PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Ronald",
            "start_time": "6:30PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef time_add(start_time_str, minutes):\n    start_time = parse_time(start_time_str)\n    new_time = start_time + timedelta(minutes=minutes)\n    return format_time(new_time)\n\ndef time_diff(start_time_str, end_time_str):\n    start_time = parse_time(start_time_str)\n    end_time = parse_time(end_time_str)\n    return (end_time - start_time).total_seconds() / 60\n\ndef get_travel_time(from_loc, to_loc):\n    travel_times = {\n        \"Russian Hill\": {\n            \"Sunset District\": 23, \"Union Square\": 10, \"Nob Hill\": 5, \"Marina District\": 7,\n            \"Richmond District\": 14, \"Financial District\": 11, \"Embarcadero\": 8, \"The Castro\": 21,\n            \"Alamo Square\": 15, \"Presidio\": 14\n        },\n        \"Sunset District\": {\n            \"Russian Hill\": 24, \"Union Square\": 30, \"Nob Hill\": 27, \"Marina District\": 21,\n            \"Richmond District\": 12, \"Financial District\": 30, \"Embarcadero\": 30, \"The Castro\": 17,\n            \"Alamo Square\": 17, \"Presidio\": 16\n        },\n        \"Union Square\": {\n            \"Russian Hill\": 13, \"Sunset District\": 27, \"Nob Hill\": 9, \"Marina District\": 18,\n            \"Richmond District\": 20, \"Financial District\": 9, \"Embarcadero\": 11, \"The Castro\": 17,\n            \"Alamo Square\": 15, \"Presidio\": 24\n        },\n        \"Nob Hill\": {\n            \"Russian Hill\": 5, \"Sunset District\": 24, \"Union Square\": 7, \"Marina District\": 11,\n            \"Richmond District\": 14, \"Financial District\": 9, \"Embarcadero\": 9, \"The Castro\": 17,\n            \"Alamo Square\": 11, \"Presidio\": 17\n        },\n        \"Marina District\": {\n            \"Russian Hill\": 8, \"Sunset District\": 19, \"Union Square\": 16, \"Nob Hill\": 12,\n            \"Richmond District\": 11, \"Financial District\": 17, \"Embarcadero\": 14, \"The Castro\": 22,\n            \"Alamo Square\": 15, \"Presidio\": 10\n        },\n        \"Richmond District\": {\n            \"Russian Hill\": 13, \"Sunset District\": 11, \"Union Square\": 21, \"Nob Hill\": 17,\n            \"Marina District\": 9, \"Financial District\": 22, \"Embarcadero\": 19, \"The Castro\": 16,\n            \"Alamo Square\": 13, \"Presidio\": 7\n        },\n        \"Financial District\": {\n            \"Russian Hill\": 11, \"Sunset District\": 30, \"Union Square\": 9, \"Nob Hill\": 8,\n            \"Marina District\": 15, \"Richmond District\": 21, \"Embarcadero\": 4, \"The Castro\": 20,\n            \"Alamo Square\": 17, \"Presidio\": 22\n        },\n        \"Embarcadero\": {\n            \"Russian Hill\": 8, \"Sunset District\": 30, \"Union Square\": 10, \"Nob Hill\": 10,\n            \"Marina District\": 12, \"Richmond District\": 21, \"Financial District\": 5, \"The Castro\": 25,\n            \"Alamo Square\": 19, \"Presidio\": 20\n        },\n        \"The Castro\": {\n            \"Russian Hill\": 18, \"Sunset District\": 17, \"Union Square\": 19, \"Nob Hill\": 16,\n            \"Marina District\": 21, \"Richmond District\": 16, \"Financial District\": 21, \"Embarcadero\": 22,\n            \"Alamo Square\": 8, \"Presidio\": 20\n        },\n        \"Alamo Square\": {\n            \"Russian Hill\": 13, \"Sunset District\": 16, \"Union Square\": 14, \"Nob Hill\": 11,\n            \"Marina District\": 15, \"Richmond District\": 11, \"Financial District\": 17, \"Embarcadero\": 16,\n            \"The Castro\": 8, \"Presidio\": 17\n        },\n        \"Presidio\": {\n            \"Russian Hill\": 14, \"Sunset District\": 15, \"Union Square\": 22, \"Nob Hill\": 18,\n            \"Marina District\": 11, \"Richmond District\": 7, \"Financial District\": 23, \"Embarcadero\": 20,\n            \"The Castro\": 21, \"Alamo Square\": 19\n        }\n    }\n    return travel_times[from_loc][to_loc]\n\ndef generate_schedule():\n    schedule = []\n    current_time = \"9:00AM\"\n    current_location = \"Russian Hill\"\n    \n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": current_time})\n    \n    # Meet William at Presidio (7:00AM-12:45PM, min 60 mins)\n    travel_time = get_travel_time(current_location, \"Presidio\")\n    arrival_time = time_add(current_time, travel_time)\n    william_start = \"7:00AM\"\n    william_end = \"12:45PM\"\n    \n    if time_diff(arrival_time, william_end) >= 60:\n        meet_start = max(arrival_time, william_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Presidio\", \"duration\": 60, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 60)\n        current_location = \"Presidio\"\n    else:\n        # Skip William if not enough time\n        pass\n    \n    # Meet Kimberly at Alamo Square (9:00AM-2:30PM, min 105 mins)\n    travel_time = get_travel_time(current_location, \"Alamo Square\")\n    arrival_time = time_add(current_time, travel_time)\n    kimberly_start = \"9:00AM\"\n    kimberly_end = \"2:30PM\"\n    \n    if time_diff(arrival_time, kimberly_end) >= 105:\n        meet_start = max(arrival_time, kimberly_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": 105, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 105)\n        current_location = \"Alamo Square\"\n    else:\n        # Skip Kimberly if not enough time\n        pass\n    \n    # Meet George at The Castro (2:15PM-7:00PM, min 105 mins)\n    travel_time = get_travel_time(current_location, \"The Castro\")\n    arrival_time = time_add(current_time, travel_time)\n    george_start = \"2:15PM\"\n    george_end = \"7:00PM\"\n    \n    if time_diff(arrival_time, george_end) >= 105:\n        meet_start = max(arrival_time, george_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"The Castro\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"The Castro\", \"duration\": 105, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 105)\n        current_location = \"The Castro\"\n    else:\n        # Skip George if not enough time\n        pass\n    \n    # Meet Mary at Marina District (2:45PM-4:45PM, min 45 mins)\n    travel_time = get_travel_time(current_location, \"Marina District\")\n    arrival_time = time_add(current_time, travel_time)\n    mary_start = \"2:45PM\"\n    mary_end = \"4:45PM\"\n    \n    if time_diff(arrival_time, mary_end) >= 45:\n        meet_start = max(arrival_time, mary_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Marina District\", \"duration\": 45, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 45)\n        current_location = \"Marina District\"\n    else:\n        # Skip Mary if not enough time\n        pass\n    \n    # Meet Patricia at Nob Hill (3:00PM-7:15PM, min 120 mins)\n    travel_time = get_travel_time(current_location, \"Nob Hill\")\n    arrival_time = time_add(current_time, travel_time)\n    patricia_start = \"3:00PM\"\n    patricia_end = \"7:15PM\"\n    \n    if time_diff(arrival_time, patricia_end) >= 120:\n        meet_start = max(arrival_time, patricia_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": 120, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 120)\n        current_location = \"Nob Hill\"\n    else:\n        # Skip Patricia if not enough time\n        pass\n    \n    # Meet Joshua at Financial District (2:30PM-5:15PM, min 90 mins)\n    travel_time = get_travel_time(current_location, \"Financial District\")\n    arrival_time = time_add(current_time, travel_time)\n    joshua_start = \"2:30PM\"\n    joshua_end = \"5:15PM\"\n    \n    if time_diff(arrival_time, joshua_end) >= 90:\n        meet_start = max(arrival_time, joshua_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Financial District\", \"duration\": 90, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 90)\n        current_location = \"Financial District\"\n    else:\n        # Skip Joshua if not enough time\n        pass\n    \n    # Meet Ronald at Embarcadero (6:15PM-8:45PM, min 30 mins)\n    travel_time = get_travel_time(current_location, \"Embarcadero\")\n    arrival_time = time_add(current_time, travel_time)\n    ronald_start = \"6:15PM\"\n    ronald_end = \"8:45PM\"\n    \n    if time_diff(arrival_time, ronald_end) >= 30:\n        meet_start = max(arrival_time, ronald_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": 30, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 30)\n        current_location = \"Embarcadero\"\n    else:\n        # Skip Ronald if not enough time\n        pass\n    \n    # Meet Charles at Richmond District (5:15PM-9:00PM, min 15 mins)\n    travel_time = get_travel_time(current_location, \"Richmond District\")\n    arrival_time = time_add(current_time, travel_time)\n    charles_start = \"5:15PM\"\n    charles_end = \"9:00PM\"\n    \n    if time_diff(arrival_time, charles_end) >= 15:\n        meet_start = max(arrival_time, charles_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": 15, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 15)\n        current_location = \"Richmond District\"\n    else:\n        # Skip Charles if not enough time\n        pass\n    \n    # Meet Kenneth at Union Square (9:15PM-9:45PM, min 15 mins)\n    travel_time = get_travel_time(current_location, \"Union Square\")\n    arrival_time = time_add(current_time, travel_time)\n    kenneth_start = \"9:15PM\"\n    kenneth_end = \"9:45PM\"\n    \n    if time_diff(arrival_time, kenneth_end) >= 15:\n        meet_start = max(arrival_time, kenneth_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Union Square\", \"duration\": 15, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 15)\n        current_location = \"Union Square\"\n    else:\n        # Skip Kenneth if not enough time\n        pass\n    \n    # Meet David at Sunset District (9:15AM-10:00PM, min 15 mins)\n    travel_time = get_travel_time(current_location, \"Sunset District\")\n    arrival_time = time_add(current_time, travel_time)\n    david_start = \"9:15AM\"\n    david_end = \"10:00PM\"\n    \n    if time_diff(arrival_time, david_end) >= 15:\n        meet_start = max(arrival_time, david_start)\n        if meet_start != arrival_time:\n            schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": arrival_time})\n        schedule.append({\n            \"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": 15, \n            \"time\": meet_start\n        })\n        current_time = time_add(meet_start, 15)\n        current_location = \"Sunset District\"\n    else:\n        # Skip David if not enough time\n        pass\n    \n    # Add travel actions\n    final_schedule = []\n    for i in range(len(schedule)):\n        final_schedule.append(schedule[i])\n        if i < len(schedule) - 1 and schedule[i][\"location\"] != schedule[i+1][\"location\"]:\n            travel_time = get_travel_time(schedule[i][\"location\"], schedule[i+1][\"location\"])\n            final_schedule.append({\n                \"action\": \"travel\", \n                \"location\": schedule[i][\"location\"], \n                \"duration\": travel_time, \n                \"time\": schedule[i][\"time\"], \n                \"to\": schedule[i+1][\"location\"]\n            })\n    \n    return {\"schedule\": final_schedule}\n\nif __name__ == \"__main__\":\n    schedule = generate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_937"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Andrew",
            "start_time": "11:45AM",
            "end_time": "1:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "1:13PM",
            "end_time": "1:43PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sarah",
            "start_time": "4:15PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "5:30PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Rebecca",
            "start_time": "6:51PM",
            "end_time": "8:21PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Andrew",
            "start_time": "11:45AM",
            "end_time": "1:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "1:13PM",
            "end_time": "1:43PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sarah",
            "start_time": "4:15PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "5:30PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Rebecca",
            "start_time": "6:51PM",
            "end_time": "8:21PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Define travel times as a dictionary\ntravel_times = {\n    \"Union Square\": {\n        \"Golden Gate Park\": 22,\n        \"Pacific Heights\": 15,\n        \"Presidio\": 24,\n        \"Chinatown\": 7,\n        \"The Castro\": 19\n    },\n    \"Golden Gate Park\": {\n        \"Union Square\": 22,\n        \"Pacific Heights\": 16,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"The Castro\": 13\n    },\n    \"Pacific Heights\": {\n        \"Union Square\": 12,\n        \"Golden Gate Park\": 15,\n        \"Presidio\": 11,\n        \"Chinatown\": 11,\n        \"The Castro\": 16\n    },\n    \"Presidio\": {\n        \"Union Square\": 22,\n        \"Golden Gate Park\": 12,\n        \"Pacific Heights\": 11,\n        \"Chinatown\": 21,\n        \"The Castro\": 21\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Golden Gate Park\": 23,\n        \"Pacific Heights\": 10,\n        \"Presidio\": 19,\n        \"The Castro\": 22\n    },\n    \"The Castro\": {\n        \"Union Square\": 19,\n        \"Golden Gate Park\": 11,\n        \"Pacific Heights\": 16,\n        \"Presidio\": 20,\n        \"Chinatown\": 20\n    }\n}\n\n# Define friend constraints\nfriends = {\n    \"Andrew\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": time_to_minutes(\"11:45AM\"),\n        \"end\": time_to_minutes(\"2:30PM\"),\n        \"min_duration\": 75\n    },\n    \"Sarah\": {\n        \"location\": \"Pacific Heights\",\n        \"start\": time_to_minutes(\"4:15PM\"),\n        \"end\": time_to_minutes(\"6:45PM\"),\n        \"min_duration\": 15\n    },\n    \"Nancy\": {\n        \"location\": \"Presidio\",\n        \"start\": time_to_minutes(\"5:30PM\"),\n        \"end\": time_to_minutes(\"7:15PM\"),\n        \"min_duration\": 60\n    },\n    \"Rebecca\": {\n        \"location\": \"Chinatown\",\n        \"start\": time_to_minutes(\"9:45AM\"),\n        \"end\": time_to_minutes(\"9:30PM\"),\n        \"min_duration\": 90\n    },\n    \"Robert\": {\n        \"location\": \"The Castro\",\n        \"start\": time_to_minutes(\"8:30AM\"),\n        \"end\": time_to_minutes(\"2:15PM\"),\n        \"min_duration\": 30\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(\"9:00AM\")\n    current_location = \"Union Square\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": \"9:00AM\"}]\n    met_friends = set()\n    \n    for friend in order:\n        friend_data = friends[friend]\n        location = friend_data[\"location\"]\n        travel_time = travel_times[current_location][location]\n        \n        # Travel to friend's location\n        arrival_time = current_time + travel_time\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_time,\n            \"time\": minutes_to_time(current_time),\n            \"to\": location\n        })\n        \n        # Check if we can meet the friend\n        start_window = friend_data[\"start\"]\n        end_window = friend_data[\"end\"]\n        min_duration = friend_data[\"min_duration\"]\n        \n        if arrival_time > end_window:\n            # Can't meet, already past their availability\n            continue\n        \n        meet_start = max(arrival_time, start_window)\n        meet_end = meet_start + min_duration\n        \n        if meet_end > end_window:\n            # Not enough time to meet\n            continue\n        \n        # Add wait time if needed\n        if arrival_time < start_window:\n            wait_time = start_window - arrival_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": location,\n                \"time\": minutes_to_time(arrival_time),\n                \"duration\": wait_time\n            })\n        \n        # Add meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"duration\": min_duration,\n            \"time\": minutes_to_time(meet_start),\n            \"with\": friend\n        })\n        \n        met_friends.add(friend)\n        current_time = meet_end\n        current_location = location\n    \n    return schedule, len(met_friends)\n\n# Generate all possible orders of meeting friends\nfriend_names = list(friends.keys())\nbest_schedule = None\nbest_meetings = 0\n\n# Try all permutations (but limit to reasonable number for performance)\nfor order in permutations(friend_names):\n    schedule, num_meetings = calculate_schedule(order)\n    if num_meetings > best_meetings:\n        best_meetings = num_meetings\n        best_schedule = schedule\n    if best_meetings == len(friend_names):\n        break\n\n# Output the best schedule\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_403"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "David",
            "start_time": "8:00PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "David",
            "start_time": "4:00PM",
            "end_time": "5:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    start_location = \"Golden Gate Park\"\n    start_time_str = \"9:00AM\"\n    david_location = \"Chinatown\"\n    david_start_str = \"4:00PM\"\n    david_end_str = \"9:45PM\"\n    min_meet_duration = 105  # minutes\n    travel_time_gp_to_china = 23  # minutes\n    travel_time_china_to_gp = 23  # minutes\n\n    # Parse times\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    david_start = datetime.strptime(david_start_str, \"%I:%M%p\")\n    david_end = datetime.strptime(david_end_str, \"%I:%M%p\")\n\n    # Calculate possible meeting times\n    # Need to arrive at Chinatown by (david_end - min_meet_duration) at latest\n    latest_arrival = david_end - timedelta(minutes=min_meet_duration)\n    \n    # Calculate when we need to leave Golden Gate Park to arrive by latest_arrival\n    departure_time = latest_arrival - timedelta(minutes=travel_time_gp_to_china)\n    \n    # Check if departure_time is after start_time\n    if departure_time < start_time:\n        # Not possible to meet for required duration\n        possible = False\n    else:\n        possible = True\n    \n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    if possible:\n        # Add travel to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_time_gp_to_china,\n            \"time\": format_time(departure_time),\n            \"to\": david_location\n        })\n        \n        # Add meeting with David\n        arrival_time = departure_time + timedelta(minutes=travel_time_gp_to_china)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": david_location,\n            \"duration\": min_meet_duration,\n            \"time\": format_time(arrival_time)\n        })\n    else:\n        # Just wait at Golden Gate Park until end of day\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(start_time)\n        })\n    \n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_25"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Richard",
            "start_time": "9:17AM",
            "end_time": "11:17AM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    travel_times = {\n        ('Bayview', 'Union Square'): 17,\n        ('Bayview', 'Presidio'): 31,\n        ('Union Square', 'Bayview'): 15,\n        ('Union Square', 'Presidio'): 24,\n        ('Presidio', 'Bayview'): 31,\n        ('Presidio', 'Union Square'): 22\n    }\n    \n    # Parse constraints\n    current_time = parse_time('9:00AM')\n    current_location = 'Bayview'\n    \n    richard_start = parse_time('8:45AM')\n    richard_end = parse_time('1:00PM')\n    richard_min = 120\n    \n    charles_start = parse_time('9:45AM')\n    charles_end = parse_time('1:00PM')\n    charles_min = 120\n    \n    schedule = []\n    \n    # Initial state\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Option 1: Meet Richard first, then Charles\n    option1_time = current_time\n    option1_schedule = []\n    \n    # Travel to Union Square\n    travel_duration = travel_times[(current_location, 'Union Square')]\n    arrival_time = option1_time + timedelta(minutes=travel_duration)\n    option1_schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(option1_time),\n        \"to\": \"Union Square\"\n    })\n    \n    # Meet Richard\n    meet_start = max(arrival_time, richard_start)\n    meet_end = min(meet_start + timedelta(minutes=richard_min), richard_end)\n    actual_meet_duration = (meet_end - meet_start).total_seconds() / 60\n    \n    if actual_meet_duration < richard_min:\n        pass  # This option won't work\n    else:\n        option1_schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"duration\": actual_meet_duration,\n            \"time\": format_time(meet_start)\n        })\n        \n        # Travel to Presidio\n        travel_duration = travel_times[('Union Square', 'Presidio')]\n        travel_start = meet_end\n        arrival_time = travel_start + timedelta(minutes=travel_duration)\n        \n        option1_schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_duration,\n            \"time\": format_time(travel_start),\n            \"to\": \"Presidio\"\n        })\n        \n        # Meet Charles\n        meet_start = max(arrival_time, charles_start)\n        meet_end = min(meet_start + timedelta(minutes=charles_min), charles_end)\n        actual_meet_duration = (meet_end - meet_start).total_seconds() / 60\n        \n        if actual_meet_duration >= charles_min:\n            option1_schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Presidio\",\n                \"duration\": actual_meet_duration,\n                \"time\": format_time(meet_start)\n            })\n            option1_valid = True\n        else:\n            option1_valid = False\n    else:\n        option1_valid = False\n    \n    # Option 2: Meet Charles first, then Richard\n    option2_time = current_time\n    option2_schedule = []\n    \n    # Travel to Presidio\n    travel_duration = travel_times[(current_location, 'Presidio')]\n    arrival_time = option2_time + timedelta(minutes=travel_duration)\n    option2_schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(option2_time),\n        \"to\": \"Presidio\"\n    })\n    \n    # Wait until Charles is available\n    wait_start = arrival_time\n    meet_start = max(arrival_time, charles_start)\n    wait_duration = (meet_start - wait_start).total_seconds() / 60\n    \n    if wait_duration > 0:\n        option2_schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(wait_start)\n        })\n    \n    # Meet Charles\n    meet_end = min(meet_start + timedelta(minutes=charles_min), charles_end)\n    actual_meet_duration = (meet_end - meet_start).total_seconds() / 60\n    \n    if actual_meet_duration < charles_min:\n        option2_valid = False\n    else:\n        option2_schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"duration\": actual_meet_duration,\n            \"time\": format_time(meet_start)\n        })\n        \n        # Travel to Union Square\n        travel_duration = travel_times[('Presidio', 'Union Square')]\n        travel_start = meet_end\n        arrival_time = travel_start + timedelta(minutes=travel_duration)\n        \n        option2_schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_duration,\n            \"time\": format_time(travel_start),\n            \"to\": \"Union Square\"\n        })\n        \n        # Meet Richard\n        meet_start = arrival_time\n        meet_end = min(meet_start + timedelta(minutes=richard_min), richard_end)\n        actual_meet_duration = (meet_end - meet_start).total_seconds() / 60\n        \n        if actual_meet_duration >= richard_min:\n            option2_schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Union Square\",\n                \"duration\": actual_meet_duration,\n                \"time\": format_time(meet_start)\n            })\n            option2_valid = True\n        else:\n            option2_valid = False\n    \n    # Determine which option is better\n    if option1_valid and option2_valid:\n        # Both options work, choose the one with more meeting time\n        option1_total = sum(item['duration'] for item in option1_schedule if item['action'] == 'meet')\n        option2_total = sum(item['duration'] for item in option2_schedule if item['action'] == 'meet')\n        \n        if option1_total >= option2_total:\n            schedule.extend(option1_schedule)\n        else:\n            schedule.extend(option2_schedule)\n    elif option1_valid:\n        schedule.extend(option1_schedule)\n    elif option2_valid:\n        schedule.extend(option2_schedule)\n    else:\n        # Neither option works, just meet one person\n        # Try meeting Richard\n        travel_duration = travel_times[(current_location, 'Union Square')]\n        arrival_time = current_time + timedelta(minutes=travel_duration)\n        meet_start = max(arrival_time, richard_start)\n        meet_end = min(meet_start + timedelta(minutes=richard_min), richard_end)\n        actual_meet_duration = (meet_end - meet_start).total_seconds() / 60\n        \n        if actual_meet_duration >= richard_min:\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time),\n                \"to\": \"Union Square\"\n            })\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Union Square\",\n                \"duration\": actual_meet_duration,\n                \"time\": format_time(meet_start)\n            })\n        else:\n            # Try meeting Charles\n            travel_duration = travel_times[(current_location, 'Presidio')]\n            arrival_time = current_time + timedelta(minutes=travel_duration)\n            meet_start = max(arrival_time, charles_start)\n            meet_end = min(meet_start + timedelta(minutes=charles_min), charles_end)\n            actual_meet_duration = (meet_end - meet_start).total_seconds() / 60\n            \n            if actual_meet_duration >= charles_min:\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_duration,\n                    \"time\": format_time(current_time),\n                    \"to\": \"Presidio\"\n                })\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Presidio\",\n                    \"duration\": actual_meet_duration,\n                    \"time\": format_time(meet_start)\n                })\n    \n    # Output the result\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_118"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Matthew",
            "start_time": "9:16AM",
            "end_time": "9:31AM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Patricia",
            "start_time": "5:00PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joseph",
            "start_time": "6:15PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Sarah",
            "start_time": "7:04PM",
            "end_time": "8:49PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Robert",
            "start_time": "9:06PM",
            "end_time": "9:21PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary: {from: {to: duration}}\ntravel_times = {\n    'Golden Gate Park': {\n        'Haight-Ashbury': 7,\n        'Sunset District': 10,\n        'Marina District': 16,\n        'Financial District': 26,\n        'Union Square': 22\n    },\n    'Haight-Ashbury': {\n        'Golden Gate Park': 7,\n        'Sunset District': 15,\n        'Marina District': 17,\n        'Financial District': 21,\n        'Union Square': 17\n    },\n    'Sunset District': {\n        'Golden Gate Park': 11,\n        'Haight-Ashbury': 15,\n        'Marina District': 21,\n        'Financial District': 30,\n        'Union Square': 30\n    },\n    'Marina District': {\n        'Golden Gate Park': 18,\n        'Haight-Ashbury': 16,\n        'Sunset District': 19,\n        'Financial District': 17,\n        'Union Square': 16\n    },\n    'Financial District': {\n        'Golden Gate Park': 23,\n        'Haight-Ashbury': 19,\n        'Sunset District': 31,\n        'Marina District': 15,\n        'Union Square': 9\n    },\n    'Union Square': {\n        'Golden Gate Park': 22,\n        'Haight-Ashbury': 18,\n        'Sunset District': 26,\n        'Marina District': 18,\n        'Financial District': 9\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Sarah',\n        'location': 'Haight-Ashbury',\n        'available_start': '5:00PM',\n        'available_end': '9:30PM',\n        'min_duration': 105\n    },\n    {\n        'name': 'Patricia',\n        'location': 'Sunset District',\n        'available_start': '5:00PM',\n        'available_end': '7:45PM',\n        'min_duration': 45\n    },\n    {\n        'name': 'Matthew',\n        'location': 'Marina District',\n        'available_start': '9:15AM',\n        'available_end': '12:00PM',\n        'min_duration': 15\n    },\n    {\n        'name': 'Joseph',\n        'location': 'Financial District',\n        'available_start': '2:15PM',\n        'available_end': '6:45PM',\n        'min_duration': 30\n    },\n    {\n        'name': 'Robert',\n        'location': 'Union Square',\n        'available_start': '10:15AM',\n        'available_end': '9:45PM',\n        'min_duration': 15\n    }\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Golden Gate Park'\n    schedule = [{'action': 'start', 'location': current_location, 'time': minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f['name'] == friend_name)\n        destination = friend['location']\n        \n        # Travel to friend\n        travel_duration = travel_times[current_location][destination]\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'duration': travel_duration,\n            'time': minutes_to_time(travel_start),\n            'to': destination\n        })\n        \n        # Arrive at friend's location\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if friend is available\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        if current_time < available_start:\n            # Need to wait\n            wait_duration = available_start - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': wait_duration\n            })\n            current_time = available_start\n        \n        # Check if we can meet\n        meeting_end = current_time + min_duration\n        if meeting_end <= available_end:\n            # Can meet\n            schedule.append({\n                'action': 'meet',\n                'location': current_location,\n                'duration': min_duration,\n                'time': minutes_to_time(current_time),\n                'with': friend['name']\n            })\n            current_time = meeting_end\n            met_friends.add(friend['name'])\n        else:\n            # Cannot meet, skip\n            pass\n    \n    return schedule, len(met_friends)\n\n# Try all possible orders to find the optimal one\nbest_schedule = None\nbest_met = 0\n\n# Since trying all permutations is computationally expensive, we'll try a subset\n# focusing on friends with tight time windows first\npriority_order = ['Matthew', 'Robert', 'Joseph', 'Patricia', 'Sarah']\n\n# Generate permutations of the priority order\nfrom itertools import permutations\nfor order in permutations(priority_order):\n    schedule, met = calculate_schedule(order)\n    if met > best_met:\n        best_met = met\n        best_schedule = schedule\n    if best_met == len(friends):\n        break\n\n# If not all met, try other combinations\nif best_met < len(friends):\n    for friend in friends:\n        if friend['name'] not in priority_order:\n            for order in permutations([friend['name'] + priority_order):\n                schedule, met = calculate_schedule(order)\n                if met > best_met:\n                    best_met = met\n                    best_schedule = schedule\n                if best_met == len(friends):\n                    break\n\n# Output the best schedule found\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_402"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Joseph",
            "start_time": "9:23AM",
            "end_time": "10:23AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Nancy",
            "start_time": "11:00AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jeffrey",
            "start_time": "12:47PM",
            "end_time": "1:32PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Jason",
            "start_time": "4:45PM",
            "end_time": "5:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Joseph",
            "start_time": "9:23AM",
            "end_time": "10:23AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Nancy",
            "start_time": "11:00AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jeffrey",
            "start_time": "12:47PM",
            "end_time": "1:32PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Jason",
            "start_time": "4:45PM",
            "end_time": "5:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if \"AM\" in time_str:\n        period = \"AM\"\n    else:\n        period = \"PM\"\n    time_part = time_str.replace(\"AM\", \"\").replace(\"PM\", \"\").strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == \"PM\" and hours != 12:\n        hours += 12\n    if period == \"AM\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Input parameters\ntravel_times = {\n    'Bayview': {\n        'Russian Hill': 23,\n        'Alamo Square': 16,\n        'North Beach': 21,\n        'Financial District': 19\n    },\n    'Russian Hill': {\n        'Bayview': 23,\n        'Alamo Square': 15,\n        'North Beach': 5,\n        'Financial District': 11\n    },\n    'Alamo Square': {\n        'Bayview': 16,\n        'Russian Hill': 13,\n        'North Beach': 15,\n        'Financial District': 17\n    },\n    'North Beach': {\n        'Bayview': 22,\n        'Russian Hill': 4,\n        'Alamo Square': 16,\n        'Financial District': 8\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Russian Hill': 10,\n        'Alamo Square': 17,\n        'North Beach': 7\n    }\n}\n\nfriends = {\n    'Joseph': {\n        'location': 'Russian Hill',\n        'available_start': '8:30AM',\n        'available_end': '7:15PM',\n        'duration': 60\n    },\n    'Nancy': {\n        'location': 'Alamo Square',\n        'available_start': '11:00AM',\n        'available_end': '4:00PM',\n        'duration': 90\n    },\n    'Jason': {\n        'location': 'North Beach',\n        'available_start': '4:45PM',\n        'available_end': '9:45PM',\n        'duration': 15\n    },\n    'Jeffrey': {\n        'location': 'Financial District',\n        'available_start': '10:30AM',\n        'available_end': '3:45PM',\n        'duration': 45\n    }\n}\n\nstart_location = 'Bayview'\nstart_time = '9:00AM'\n\ndef generate_schedules():\n    friend_names = list(friends.keys())\n    all_permutations = permutations(friend_names)\n    return all_permutations\n\ndef evaluate_schedule(sequence):\n    current_location = start_location\n    current_time = time_to_minutes(start_time)\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": minutes_to_time(current_time)\n    })\n    met_friends = set()\n    \n    for friend_name in sequence:\n        friend = friends[friend_name]\n        destination = friend['location']\n        travel_duration = travel_times[current_location][destination]\n        \n        # Travel to friend\n        travel_start = current_time\n        travel_end = travel_start + travel_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_time(travel_start),\n            \"to\": destination\n        })\n        \n        # Arrive at friend's location\n        current_time = travel_end\n        current_location = destination\n        \n        # Check if friend is available\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        duration = friend['duration']\n        \n        if current_time < available_start:\n            # Need to wait\n            wait_duration = available_start - current_time\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time = available_start\n        \n        # Check if we can meet\n        meeting_end = current_time + duration\n        if meeting_end > available_end:\n            return None  # Cannot meet this friend\n        \n        # Meet the friend\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": duration,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time = meeting_end\n        met_friends.add(friend_name)\n    \n    return {\n        \"schedule\": schedule,\n        \"met_friends\": met_friends\n    }\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_met = 0\n    \n    for sequence in generate_schedules():\n        result = evaluate_schedule(sequence)\n        if result is not None:\n            num_met = len(result[\"met_friends\"])\n            if num_met > best_met or (num_met == best_met and best_schedule is None):\n                best_met = num_met\n                best_schedule = result[\"schedule\"]\n    \n    return best_schedule\n\noptimal_schedule = find_optimal_schedule()\nprint(json.dumps({\"schedule\": optimal_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_368"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Carol",
            "start_time": "11:30AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Jessica",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Carol",
            "start_time": "11:30AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Jessica",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        ('Richmond District', 'Pacific Heights'): 10,\n        ('Richmond District', 'Marina District'): 9,\n        ('Pacific Heights', 'Richmond District'): 12,\n        ('Pacific Heights', 'Marina District'): 6,\n        ('Marina District', 'Richmond District'): 11,\n        ('Marina District', 'Pacific Heights'): 7,\n    }\n    \n    start_time = str_to_time('9:00AM')\n    current_location = 'Richmond District'\n    \n    jessica_start = str_to_time('3:30PM')\n    jessica_end = str_to_time('4:45PM')\n    jessica_duration = 45\n    \n    carol_start = str_to_time('11:30AM')\n    carol_end = str_to_time('3:00PM')\n    carol_duration = 60\n    \n    schedule = []\n    current_time = start_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": time_to_str(current_time)\n    })\n    \n    # Plan to meet Carol first\n    # Travel to Marina District\n    travel_duration = travel_times[(current_location, 'Marina District')]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Marina District\"\n    })\n    current_time = travel_end_time\n    current_location = 'Marina District'\n    \n    # Wait until Carol is available if needed\n    meet_carol_start = max(current_time, carol_start)\n    if meet_carol_start > current_time:\n        wait_duration = (meet_carol_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": time_to_str(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = meet_carol_start\n    \n    # Meet Carol\n    meet_carol_end = meet_carol_start + timedelta(minutes=carol_duration)\n    if meet_carol_end > carol_end:\n        meet_carol_end = carol_end\n        carol_duration = (meet_carol_end - meet_carol_start).seconds // 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": carol_duration,\n        \"time\": time_to_str(meet_carol_start)\n    })\n    current_time = meet_carol_end\n    \n    # Travel to Pacific Heights to meet Jessica\n    travel_duration = travel_times[(current_location, 'Pacific Heights')]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Pacific Heights\"\n    })\n    current_time = travel_end_time\n    current_location = 'Pacific Heights'\n    \n    # Wait until Jessica is available if needed\n    meet_jessica_start = max(current_time, jessica_start)\n    if meet_jessica_start > current_time:\n        wait_duration = (meet_jessica_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": time_to_str(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = meet_jessica_start\n    \n    # Meet Jessica\n    meet_jessica_end = meet_jessica_start + timedelta(minutes=jessica_duration)\n    if meet_jessica_end > jessica_end:\n        meet_jessica_end = jessica_end\n        jessica_duration = (meet_jessica_end - meet_jessica_start).seconds // 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": jessica_duration,\n        \"time\": time_to_str(meet_jessica_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_115"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    robert_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    robert_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    min_meet_duration = 120\n    travel_to_presidio = 17\n    travel_to_nob_hill = 18\n\n    # Calculate possible meeting windows\n    earliest_departure = arrival_time\n    travel_duration = travel_to_presidio\n    arrival_at_presidio = earliest_departure + timedelta(minutes=travel_duration)\n    \n    # Calculate the latest we can leave Presidio to meet Robert for 120 minutes\n    latest_departure_from_presidio = robert_end - timedelta(minutes=min_meet_duration)\n    \n    # Calculate the latest we can leave Nob Hill to arrive by latest_departure_from_presidio\n    latest_departure_from_nob_hill = latest_departure_from_presidio - timedelta(minutes=travel_to_presidio)\n    \n    # Determine when to leave Nob Hill\n    if arrival_at_presidio <= robert_start:\n        # Need to wait at Presidio\n        wait_duration = (robert_start - arrival_at_presidio).total_seconds() / 60\n        depart_nob_hill = earliest_departure\n        meet_start = robert_start\n    else:\n        # Can meet immediately upon arrival\n        wait_duration = 0\n        depart_nob_hill = robert_start - timedelta(minutes=travel_to_presidio)\n        meet_start = arrival_at_presidio\n    \n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    if meet_end > robert_end:\n        meet_end = robert_end\n        meet_duration = (meet_end - meet_start).total_seconds() / 60\n    else:\n        meet_duration = min_meet_duration\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    if depart_nob_hill > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_to_presidio,\n        \"time\": format_time(depart_nob_hill),\n        \"to\": \"Presidio\"\n    })\n    \n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(arrival_at_presidio)\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meet_duration,\n        \"time\": format_time(meet_start)\n    })\n    \n    # Return to Nob Hill\n    depart_presidio = meet_end\n    arrival_back_nob_hill = depart_presidio + timedelta(minutes=travel_to_nob_hill)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(depart_presidio),\n        \"to\": \"Nob Hill\"\n    })\n    \n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(arrival_back_nob_hill)\n    })\n    \n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_66"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Stephanie",
            "start_time": "9:00AM",
            "end_time": "10:30AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "John",
            "start_time": "10:47AM",
            "end_time": "11:17AM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Stephanie",
            "start_time": "9:05AM",
            "end_time": "10:35AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "John",
            "start_time": "10:52AM",
            "end_time": "11:22AM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        (\"Embarcadero\", \"Financial District\"): 5,\n        (\"Embarcadero\", \"Alamo Square\"): 19,\n        (\"Financial District\", \"Embarcadero\"): 4,\n        (\"Financial District\", \"Alamo Square\"): 17,\n        (\"Alamo Square\", \"Embarcadero\"): 17,\n        (\"Alamo Square\", \"Financial District\"): 17,\n    }\n    \n    start_time = str_to_time(\"9:00AM\")\n    stephanie_available_start = str_to_time(\"8:15AM\")\n    stephanie_available_end = str_to_time(\"11:30AM\")\n    stephanie_min_duration = 90\n    \n    john_available_start = str_to_time(\"10:15AM\")\n    john_available_end = str_to_time(\"8:45PM\")\n    john_min_duration = 30\n    \n    possible_schedules = []\n    \n    # Option 1: Meet Stephanie first, then John\n    # Calculate earliest possible departure to meet Stephanie\n    earliest_stephanie_meet_start = max(start_time, stephanie_available_start)\n    stephanie_meet_start = earliest_stephanie_meet_start\n    stephanie_meet_end = stephanie_meet_start + timedelta(minutes=stephanie_min_duration)\n    \n    if stephanie_meet_end <= stephanie_available_end:\n        # Travel to Alamo Square after meeting Stephanie\n        travel_to_alamo_duration = travel_times[(\"Financial District\", \"Alamo Square\")]\n        arrive_alamo_time = stephanie_meet_end + timedelta(minutes=travel_to_alamo_duration)\n        \n        # Calculate meeting with John\n        john_meet_start = max(arrive_alamo_time, john_available_start)\n        john_meet_end = john_meet_start + timedelta(minutes=john_min_duration)\n        \n        if john_meet_end <= john_available_end:\n            # Valid schedule\n            schedule = []\n            schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": time_to_str(start_time)})\n            \n            # Travel to Financial District\n            travel_to_financial_duration = travel_times[(\"Embarcadero\", \"Financial District\")]\n            arrive_financial_time = start_time + timedelta(minutes=travel_to_financial_duration)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Financial District\",\n                \"duration\": travel_to_financial_duration,\n                \"time\": time_to_str(start_time),\n                \"to\": \"Financial District\"\n            })\n            \n            # Wait if needed before meeting Stephanie\n            if stephanie_meet_start > arrive_financial_time:\n                wait_duration = (stephanie_meet_start - arrive_financial_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Financial District\",\n                    \"time\": time_to_str(arrive_financial_time),\n                    \"duration\": wait_duration\n                })\n            \n            # Meet Stephanie\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Financial District\",\n                \"duration\": stephanie_min_duration,\n                \"time\": time_to_str(stephanie_meet_start)\n            })\n            \n            # Travel to Alamo Square\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Alamo Square\",\n                \"duration\": travel_to_alamo_duration,\n                \"time\": time_to_str(stephanie_meet_end),\n                \"to\": \"Alamo Square\"\n            })\n            \n            # Wait if needed before meeting John\n            if john_meet_start > arrive_alamo_time:\n                wait_duration = (john_meet_start - arrive_alamo_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Alamo Square\",\n                    \"time\": time_to_str(arrive_alamo_time),\n                    \"duration\": wait_duration\n                })\n            \n            # Meet John\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Alamo Square\",\n                \"duration\": john_min_duration,\n                \"time\": time_to_str(john_meet_start)\n            })\n            \n            possible_schedules.append(schedule)\n    \n    # Option 2: Meet John first, then Stephanie\n    # Calculate earliest possible departure to meet John\n    earliest_john_meet_start = max(start_time + timedelta(minutes=travel_times[(\"Embarcadero\", \"Alamo Square\")]), john_available_start)\n    john_meet_start = earliest_john_meet_start\n    john_meet_end = john_meet_start + timedelta(minutes=john_min_duration)\n    \n    if john_meet_end <= john_available_end:\n        # Travel to Financial District after meeting John\n        travel_to_financial_duration = travel_times[(\"Alamo Square\", \"Financial District\")]\n        arrive_financial_time = john_meet_end + timedelta(minutes=travel_to_financial_duration)\n        \n        # Calculate meeting with Stephanie\n        stephanie_meet_start = max(arrive_financial_time, stephanie_available_start)\n        stephanie_meet_end = stephanie_meet_start + timedelta(minutes=stephanie_min_duration)\n        \n        if stephanie_meet_end <= stephanie_available_end:\n            # Valid schedule\n            schedule = []\n            schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": time_to_str(start_time)})\n            \n            # Travel to Alamo Square\n            travel_to_alamo_duration = travel_times[(\"Embarcadero\", \"Alamo Square\")]\n            arrive_alamo_time = start_time + timedelta(minutes=travel_to_alamo_duration)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Alamo Square\",\n                \"duration\": travel_to_alamo_duration,\n                \"time\": time_to_str(start_time),\n                \"to\": \"Alamo Square\"\n            })\n            \n            # Wait if needed before meeting John\n            if john_meet_start > arrive_alamo_time:\n                wait_duration = (john_meet_start - arrive_alamo_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Alamo Square\",\n                    \"time\": time_to_str(arrive_alamo_time),\n                    \"duration\": wait_duration\n                })\n            \n            # Meet John\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Alamo Square\",\n                \"duration\": john_min_duration,\n                \"time\": time_to_str(john_meet_start)\n            })\n            \n            # Travel to Financial District\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Financial District\",\n                \"duration\": travel_to_financial_duration,\n                \"time\": time_to_str(john_meet_end),\n                \"to\": \"Financial District\"\n            })\n            \n            # Wait if needed before meeting Stephanie\n            if stephanie_meet_start > arrive_financial_time:\n                wait_duration = (stephanie_meet_start - arrive_financial_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Financial District\",\n                    \"time\": time_to_str(arrive_financial_time),\n                    \"duration\": wait_duration\n                })\n            \n            # Meet Stephanie\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Financial District\",\n                \"duration\": stephanie_min_duration,\n                \"time\": time_to_str(stephanie_meet_start)\n            })\n            \n            possible_schedules.append(schedule)\n    \n    # Select the best schedule (the one that meets both friends)\n    best_schedule = []\n    if len(possible_schedules) == 2:\n        best_schedule = possible_schedules[0]  # Prefer meeting Stephanie first\n    elif len(possible_schedules) == 1:\n        best_schedule = possible_schedules[0]\n    else:\n        # If no schedule meets both, try to meet at least one\n        # Try to meet Stephanie only\n        stephanie_meet_start = max(start_time + timedelta(minutes=travel_times[(\"Embarcadero\", \"Financial District\")]), stephanie_available_start)\n        stephanie_meet_end = stephanie_meet_start + timedelta(minutes=stephanie_min_duration)\n        if stephanie_meet_end <= stephanie_available_end:\n            schedule = []\n            schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": time_to_str(start_time)})\n            \n            # Travel to Financial District\n            travel_to_financial_duration = travel_times[(\"Embarcadero\", \"Financial District\")]\n            arrive_financial_time = start_time + timedelta(minutes=travel_to_financial_duration)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Financial District\",\n                \"duration\": travel_to_financial_duration,\n                \"time\": time_to_str(start_time),\n                \"to\": \"Financial District\"\n            })\n            \n            # Wait if needed\n            if stephanie_meet_start > arrive_financial_time:\n                wait_duration = (stephanie_meet_start - arrive_financial_time).seconds // 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Financial District\",\n                    \"time\": time_to_str(arrive_financial_time),\n                    \"duration\": wait_duration\n                })\n            \n            # Meet Stephanie\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Financial District\",\n                \"duration\": stephanie_min_duration,\n                \"time\": time_to_str(stephanie_meet_start)\n            })\n            \n            best_schedule = schedule\n        else:\n            # Try to meet John only\n            john_meet_start = max(start_time + timedelta(minutes=travel_times[(\"Embarcadero\", \"Alamo Square\")]), john_available_start)\n            john_meet_end = john_meet_start + timedelta(minutes=john_min_duration)\n            if john_meet_end <= john_available_end:\n                schedule = []\n                schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": time_to_str(start_time)})\n                \n                # Travel to Alamo Square\n                travel_to_alamo_duration = travel_times[(\"Embarcadero\", \"Alamo Square\")]\n                arrive_alamo_time = start_time + timedelta(minutes=travel_to_alamo_duration)\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": \"Alamo Square\",\n                    \"duration\": travel_to_alamo_duration,\n                    \"time\": time_to_str(start_time),\n                    \"to\": \"Alamo Square\"\n                })\n                \n                # Wait if needed\n                if john_meet_start > arrive_alamo_time:\n                    wait_duration = (john_meet_start - arrive_alamo_time).seconds // 60\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": \"Alamo Square\",\n                        \"time\": time_to_str(arrive_alamo_time),\n                        \"duration\": wait_duration\n                    })\n                \n                # Meet John\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Alamo Square\",\n                    \"duration\": john_min_duration,\n                    \"time\": time_to_str(john_meet_start)\n                })\n                \n                best_schedule = schedule\n    \n    return {\"schedule\": best_schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_125"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Jason",
            "start_time": "10:00AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kenneth",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Jason",
            "start_time": "10:00AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kenneth",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    time_str = dt.strftime(\"%-I:%M%p\")\n    return time_str[:-2] + time_str[-2:].upper()\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time(\"9:00AM\")\n    jason_available_start = str_to_time(\"10:00AM\")\n    jason_available_end = str_to_time(\"4:15PM\")\n    jason_min_duration = 90\n    kenneth_available_start = str_to_time(\"3:30PM\")\n    kenneth_available_end = str_to_time(\"4:45PM\")\n    kenneth_min_duration = 45\n\n    travel_times = {\n        (\"Pacific Heights\", \"Presidio\"): 11,\n        (\"Pacific Heights\", \"Marina District\"): 6,\n        (\"Presidio\", \"Pacific Heights\"): 11,\n        (\"Presidio\", \"Marina District\"): 10,\n        (\"Marina District\", \"Pacific Heights\"): 7,\n        (\"Marina District\", \"Presidio\"): 10,\n    }\n\n    # Possible schedules: meet Jason only, Kenneth only, or both\n    possible_schedules = []\n\n    # Option 1: Meet Jason only\n    # Earliest we can arrive at Presidio is arrival_time + travel_time (9:00AM + 11min = 9:11AM)\n    # But Jason is available from 10:00AM, so we can wait until then\n    jason_meet_start = max(arrival_time + timedelta(minutes=travel_times[(\"Pacific Heights\", \"Presidio\")]), jason_available_start)\n    jason_meet_end = jason_meet_start + timedelta(minutes=jason_min_duration)\n    if jason_meet_end <= jason_available_end:\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": time_to_str(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": 11, \"time\": time_to_str(arrival_time), \"to\": \"Presidio\"},\n            {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": time_to_str(arrival_time + timedelta(minutes=11))},\n            {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": jason_min_duration, \"time\": time_to_str(jason_meet_start)},\n        ]\n        possible_schedules.append((schedule, 1))  # (schedule, number of friends met)\n\n    # Option 2: Meet Kenneth only\n    # Earliest we can arrive at Marina District is arrival_time + travel_time (9:00AM + 6min = 9:06AM)\n    # But Kenneth is available from 3:30PM, so this is not optimal. Better to do other things first.\n    # However, for this option, we just go directly to meet Kenneth at his available time\n    kenneth_meet_start = max(arrival_time + timedelta(minutes=travel_times[(\"Pacific Heights\", \"Marina District\")]), kenneth_available_start)\n    kenneth_meet_end = kenneth_meet_start + timedelta(minutes=kenneth_min_duration)\n    if kenneth_meet_end <= kenneth_available_end:\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": time_to_str(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": 6, \"time\": time_to_str(arrival_time), \"to\": \"Marina District\"},\n            {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": time_to_str(arrival_time + timedelta(minutes=6))},\n            {\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": kenneth_min_duration, \"time\": time_to_str(kenneth_meet_start)},\n        ]\n        possible_schedules.append((schedule, 1))\n\n    # Option 3: Meet both Jason and Kenneth\n    # Try meeting Jason first, then Kenneth\n    # Meet Jason as early as possible\n    jason_meet_start = max(arrival_time + timedelta(minutes=travel_times[(\"Pacific Heights\", \"Presidio\")]), jason_available_start)\n    jason_meet_end = jason_meet_start + timedelta(minutes=jason_min_duration)\n    if jason_meet_end <= jason_available_end:\n        # Travel from Presidio to Marina District takes 10 minutes\n        arrival_at_marina = jason_meet_end + timedelta(minutes=travel_times[(\"Presidio\", \"Marina District\")])\n        kenneth_meet_start = max(arrival_at_marina, kenneth_available_start)\n        kenneth_meet_end = kenneth_meet_start + timedelta(minutes=kenneth_min_duration)\n        if kenneth_meet_end <= kenneth_available_end:\n            schedule = [\n                {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": time_to_str(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": 11, \"time\": time_to_str(arrival_time), \"to\": \"Presidio\"},\n                {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": time_to_str(arrival_time + timedelta(minutes=11))},\n                {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": jason_min_duration, \"time\": time_to_str(jason_meet_start)},\n                {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": 10, \"time\": time_to_str(jason_meet_end), \"to\": \"Marina District\"},\n                {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": time_to_str(arrival_at_marina)},\n                {\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": kenneth_min_duration, \"time\": time_to_str(kenneth_meet_start)},\n            ]\n            possible_schedules.append((schedule, 2))\n\n    # Try meeting Kenneth first, then Jason (but this is impossible because Kenneth's time is after Jason's)\n    \n    # Select the best schedule (one that meets most friends)\n    possible_schedules.sort(key=lambda x: -x[1])\n    best_schedule = possible_schedules[0][0] if possible_schedules else []\n\n    return {\"schedule\": best_schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
      "count": "meeting_planning_example_131"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jeffrey",
            "start_time": "12:00PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Charles",
            "start_time": "1:15PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Robert",
            "start_time": "3:18PM",
            "end_time": "4:48PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kimberly",
            "start_time": "5:00PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Karen",
            "start_time": "6:29PM",
            "end_time": "7:29PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Joshua",
            "start_time": "7:48PM",
            "end_time": "8:48PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Brian",
            "start_time": "8:58PM",
            "end_time": "9:58PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jeffrey",
            "start_time": "12:00PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Charles",
            "start_time": "1:15PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Robert",
            "start_time": "3:18PM",
            "end_time": "4:48PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kimberly",
            "start_time": "5:00PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Karen",
            "start_time": "6:29PM",
            "end_time": "7:29PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Brian",
            "start_time": "7:49PM",
            "end_time": "8:49PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Joshua",
            "start_time": "9:00PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    elif hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\n# Travel times dictionary\ntravel_times = {\n    'Sunset District': {\n        'Presidio': 16, 'Nob Hill': 27, 'Pacific Heights': 21, 'Mission District': 25,\n        'Marina District': 21, 'North Beach': 28, 'Russian Hill': 24, 'Richmond District': 12,\n        'Embarcadero': 30, 'Alamo Square': 17\n    },\n    'Presidio': {\n        'Sunset District': 15, 'Nob Hill': 18, 'Pacific Heights': 11, 'Mission District': 26,\n        'Marina District': 11, 'North Beach': 18, 'Russian Hill': 14, 'Richmond District': 7,\n        'Embarcadero': 20, 'Alamo Square': 19\n    },\n    'Nob Hill': {\n        'Sunset District': 24, 'Presidio': 17, 'Pacific Heights': 8, 'Mission District': 13,\n        'Marina District': 11, 'North Beach': 8, 'Russian Hill': 5, 'Richmond District': 14,\n        'Embarcadero': 9, 'Alamo Square': 11\n    },\n    'Pacific Heights': {\n        'Sunset District': 21, 'Presidio': 11, 'Nob Hill': 8, 'Mission District': 15,\n        'Marina District': 6, 'North Beach': 9, 'Russian Hill': 7, 'Richmond District': 12,\n        'Embarcadero': 10, 'Alamo Square': 10\n    },\n    'Mission District': {\n        'Sunset District': 24, 'Presidio': 25, 'Nob Hill': 12, 'Pacific Heights': 16,\n        'Marina District': 19, 'North Beach': 17, 'Russian Hill': 15, 'Richmond District': 20,\n        'Embarcadero': 19, 'Alamo Square': 11\n    },\n    'Marina District': {\n        'Sunset District': 19, 'Presidio': 10, 'Nob Hill': 12, 'Pacific Heights': 7,\n        'Mission District': 20, 'North Beach': 11, 'Russian Hill': 8, 'Richmond District': 11,\n        'Embarcadero': 14, 'Alamo Square': 15\n    },\n    'North Beach': {\n        'Sunset District': 27, 'Presidio': 17, 'Nob Hill': 7, 'Pacific Heights': 8,\n        'Mission District': 18, 'Marina District': 9, 'Russian Hill': 4, 'Richmond District': 18,\n        'Embarcadero': 6, 'Alamo Square': 16\n    },\n    'Russian Hill': {\n        'Sunset District': 23, 'Presidio': 14, 'Nob Hill': 5, 'Pacific Heights': 7,\n        'Mission District': 16, 'Marina District': 7, 'North Beach': 5, 'Richmond District': 14,\n        'Embarcadero': 8, 'Alamo Square': 15\n    },\n    'Richmond District': {\n        'Sunset District': 11, 'Presidio': 7, 'Nob Hill': 17, 'Pacific Heights': 10,\n        'Mission District': 20, 'Marina District': 9, 'North Beach': 17, 'Russian Hill': 13,\n        'Embarcadero': 19, 'Alamo Square': 13\n    },\n    'Embarcadero': {\n        'Sunset District': 30, 'Presidio': 20, 'Nob Hill': 10, 'Pacific Heights': 11,\n        'Mission District': 20, 'Marina District': 12, 'North Beach': 5, 'Russian Hill': 8,\n        'Richmond District': 21, 'Alamo Square': 19\n    },\n    'Alamo Square': {\n        'Sunset District': 16, 'Presidio': 17, 'Nob Hill': 11, 'Pacific Heights': 10,\n        'Mission District': 10, 'Marina District': 15, 'North Beach': 15, 'Russian Hill': 13,\n        'Richmond District': 11, 'Embarcadero': 16\n    }\n}\n\n# Fix typo in keys\ntravel_times['Pacific Heights']['Marina District'] = travel_times['Pacific Heights'].pop('Marina District', 6)\ntravel_times['North Beach']['Marina District'] = travel_times['North Beach'].pop('Marina District', 9)\ntravel_times['Alamo Square']['Marina District'] = travel_times['Alamo Square'].pop('Marina District', 15)\n\n# Friends data\nfriends = [\n    {'name': 'Charles', 'location': 'Presidio', 'start': '1:15PM', 'end': '3:00PM', 'duration': 105},\n    {'name': 'Robert', 'location': 'Nob Hill', 'start': '1:15PM', 'end': '5:30PM', 'duration': 90},\n    {'name': 'Nancy', 'location': 'Pacific Heights', 'start': '2:45PM', 'end': '10:00PM', 'duration': 105},\n    {'name': 'Brian', 'location': 'Mission District', 'start': '3:30PM', 'end': '10:00PM', 'duration': 60},\n    {'name': 'Kimberly', 'location': 'Marina District', 'start': '5:00PM', 'end': '7:45PM', 'duration': 75},\n    {'name': 'David', 'location': 'North Beach', 'start': '2:45PM', 'end': '4:30PM', 'duration': 75},\n    {'name': 'William', 'location': 'Russian Hill', 'start': '12:30PM', 'end': '7:15PM', 'duration': 120},\n    {'name': 'Jeffrey', 'location': 'Richmond District', 'start': '12:00PM', 'end': '7:15PM', 'duration': 45},\n    {'name': 'Karen', 'location': 'Embarcadero', 'start': '2:15PM', 'end': '8:45PM', 'duration': 60},\n    {'name': 'Joshua', 'location': 'Alamo Square', 'start': '6:45PM', 'end': '10:00PM', 'duration': 60}\n]\n\n# Fix typo in Kimberly's location\nfor friend in friends:\n    if friend['name'] == 'Kimberly':\n        friend['location'] = 'Marina District'\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times[from_loc].get(to_loc, float('inf'))\n\ndef generate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Sunset District'\n    schedule = [{'action': 'start', 'location': current_location, 'time': minutes_to_time(current_time)}]\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f['name'] == friend_name)\n        loc = friend['location']\n        start_window = time_to_minutes(friend['start'])\n        end_window = time_to_minutes(friend['end'])\n        duration = friend['duration']\n        \n        # Travel to friend's location\n        travel_duration = get_travel_time(current_location, loc)\n        arrival_time = current_time + travel_duration\n        \n        if arrival_time > end_window:\n            continue  # Can't meet this friend\n        \n        # Wait if arriving before window opens\n        if arrival_time < start_window:\n            wait_time = start_window - arrival_time\n            schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, \n                            'time': minutes_to_time(current_time), 'to': loc})\n            schedule.append({'action': 'wait', 'location': loc, 'time': minutes_to_time(arrival_time)})\n            current_time = start_window\n        else:\n            schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, \n                            'time': minutes_to_time(current_time), 'to': loc})\n            current_time = arrival_time\n        \n        # Check if we can meet for required duration\n        if current_time + duration > end_window:\n            continue  # Not enough time\n        \n        # Meet the friend\n        schedule.append({'action': 'meet', 'location': loc, 'duration': duration, \n                         'time': minutes_to_time(current_time)})\n        current_time += duration\n        current_location = loc\n        met_friends.add(friend_name)\n    \n    return schedule, len(met_friends)\n\n# Try different orders to maximize number of friends met\nbest_schedule = None\nbest_count = 0\nfriend_names = [f['name'] for f in friends]\n\n# Try some reasonable permutations (full permutation is too slow)\nfor _ in range(1000):\n    import random\n    random.shuffle(friend_names)\n    schedule, count = generate_schedule(friend_names)\n    if count > best_count:\n        best_count = count\n        best_schedule = schedule\n\n# Output the best schedule found\noutput = {\n    \"schedule\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
      "count": "meeting_planning_example_974"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Rebecca",
            "start_time": "2:45PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Mark",
            "start_time": "3:57PM",
            "end_time": "4:42PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Richard",
            "start_time": "4:52PM",
            "end_time": "6:22PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Margaret",
            "start_time": "6:28PM",
            "end_time": "6:43PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Matthew",
            "start_time": "6:50PM",
            "end_time": "8:20PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Rebecca",
            "start_time": "2:45PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Mark",
            "start_time": "3:57PM",
            "end_time": "4:42PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Richard",
            "start_time": "4:52PM",
            "end_time": "6:22PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Margaret",
            "start_time": "6:28PM",
            "end_time": "6:43PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Matthew",
            "start_time": "6:50PM",
            "end_time": "8:20PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Chinatown': {\n        'Embarcadero': 5,\n        'Pacific Heights': 10,\n        'Russian Hill': 7,\n        'Haight-Ashbury': 19,\n        'Golden Gate Park': 23,\n        'Fisherman\\'s Wharf': 8,\n        'Sunset District': 29,\n        'The Castro': 22\n    },\n    'Embarcadero': {\n        'Chinatown': 7,\n        'Pacific Heights': 11,\n        'Russian Hill': 8,\n        'Haight-Ashbury': 21,\n        'Golden Gate Park': 25,\n        'Fisherman\\'s Wharf': 6,\n        'Sunset District': 30,\n        'The Castro': 25\n    },\n    'Pacific Heights': {\n        'Chinatown': 11,\n        'Embarcadero': 10,\n        'Russian Hill': 7,\n        'Haight-Ashbury': 11,\n        'Golden Gate Park': 15,\n        'Fisherman\\'s Wharf': 13,\n        'Sunset District': 21,\n        'The Castro': 16\n    },\n    'Russian Hill': {\n        'Chinatown': 9,\n        'Embarcadero': 8,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 17,\n        'Golden Gate Park': 21,\n        'Fisherman\\'s Wharf': 7,\n        'Sunset District': 23,\n        'The Castro': 21\n    },\n    'Haight-Ashbury': {\n        'Chinatown': 19,\n        'Embarcadero': 20,\n        'Pacific Heights': 12,\n        'Russian Hill': 17,\n        'Golden Gate Park': 7,\n        'Fisherman\\'s Wharf': 23,\n        'Sunset District': 15,\n        'The Castro': 6\n    },\n    'Golden Gate Park': {\n        'Chinatown': 23,\n        'Embarcadero': 25,\n        'Pacific Heights': 16,\n        'Russian Hill': 19,\n        'Haight-Ashbury': 7,\n        'Fisherman\\'s Wharf': 24,\n        'Sunset District': 10,\n        'The Castro': 13\n    },\n    'Fisherman\\'s Wharf': {\n        'Chinatown': 12,\n        'Embarcadero': 8,\n        'Pacific Heights': 12,\n        'Russian Hill': 7,\n        'Haight-Ashbury': 22,\n        'Golden Gate Park': 25,\n        'Sunset District': 27,\n        'The Castro': 27\n    },\n    'Sunset District': {\n        'Chinatown': 30,\n        'Embarcadero': 30,\n        'Pacific Heights': 21,\n        'Russian Hill': 24,\n        'Haight-Ashbury': 15,\n        'Golden Gate Park': 11,\n        'Fisherman\\'s Wharf': 29,\n        'The Castro': 17\n    },\n    'The Castro': {\n        'Chinatown': 22,\n        'Embarcadero': 22,\n        'Pacific Heights': 16,\n        'Russian Hill': 18,\n        'Haight-Ashbury': 6,\n        'Golden Gate Park': 11,\n        'Fisherman\\'s Wharf': 24,\n        'Sunset District': 17\n    }\n}\n\n# Friends' availability\nfriends = {\n    'Richard': {'location': 'Embarcadero', 'start': '3:15PM', 'end': '6:45PM', 'duration': 90},\n    'Mark': {'location': 'Pacific Heights', 'start': '3:00PM', 'end': '5:00PM', 'duration': 45},\n    'Matthew': {'location': 'Russian Hill', 'start': '5:30PM', 'end': '9:00PM', 'duration': 90},\n    'Rebecca': {'location': 'Haight-Ashbury', 'start': '2:45PM', 'end': '6:00PM', 'duration': 60},\n    'Melissa': {'location': 'Golden Gate Park', 'start': '1:45PM', 'end': '5:30PM', 'duration': 90},\n    'Margaret': {'location': 'Fisherman\\'s Wharf', 'start': '2:45PM', 'end': '8:15PM', 'duration': 15},\n    'Emily': {'location': 'Sunset District', 'start': '3:45PM', 'end': '5:00PM', 'duration': 45},\n    'George': {'location': 'The Castro', 'start': '2:00PM', 'end': '4:15PM', 'duration': 75}\n}\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours > 12:\n        hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef can_meet_friend(current_time, friend_name, current_location):\n    friend = friends[friend_name]\n    travel_time = travel_times[current_location][friend['location']]\n    arrival_time = current_time + travel_time\n    start_time = time_to_minutes(friend['start'])\n    end_time = time_to_minutes(friend['end'])\n    \n    if arrival_time > end_time:\n        return None\n    \n    meet_start = max(arrival_time, start_time)\n    meet_end = meet_start + friend['duration']\n    \n    if meet_end > end_time:\n        return None\n    \n    return {\n        'travel_time': travel_time,\n        'meet_start': meet_start,\n        'meet_end': meet_end,\n        'location': friend['location']\n    }\n\ndef evaluate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Chinatown'\n    schedule = []\n    schedule.append({'action': 'start', 'location': current_location, 'time': '9:00AM'})\n    met_friends = set()\n    \n    for friend in order:\n        meeting = can_meet_friend(current_time, friend, current_location)\n        if meeting is None:\n            continue\n        \n        if current_time < meeting['meet_start'] - meeting['travel_time']:\n            travel_time = meeting['meet_start'] - meeting['travel_time'] - current_time\n            schedule.append({\n                'action': 'wait',\n                'location': current_location,\n                'time': minutes_to_time(current_time),\n                'duration': travel_time\n            })\n            current_time += travel_time\n        \n        schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'to': meeting['location'],\n            'duration': meeting['travel_time'],\n            'time': minutes_to_time(current_time)\n        })\n        current_time += meeting['travel_time']\n        current_location = meeting['location']\n        \n        schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': friends[friend]['duration'],\n            'time': minutes_to_time(meeting['meet_start'])\n        })\n        current_time = meeting['meet_end']\n        met_friends.add(friend)\n    \n    return len(met_friends), schedule\n\ndef find_best_schedule():\n    best_count = 0\n    best_schedule = []\n    \n    # Try all possible friend orders (but limit to 4 friends at a time for performance)\n    from itertools import combinations, permutations\n    for friend_count in range(1, len(friends)+1):\n        for friend_group in combinations(friends.keys(), friend_count):\n            for order in permutations(friend_group):\n                count, schedule = evaluate_schedule(order)\n                if count > best_count:\n                    best_count = count\n                    best_schedule = schedule\n                elif count == best_count and len(schedule) < len(best_schedule):\n                    best_schedule = schedule\n    \n    return best_schedule\n\nbest_schedule = find_best_schedule()\n\n# Convert to the required JSON format\nformatted_schedule = []\ncurrent_time = time_to_minutes('9:00AM')\ncurrent_location = 'Chinatown'\n\nformatted_schedule.append({\n    'action': 'start',\n    'location': current_location,\n    'time': '9:00AM'\n})\n\nfor item in best_schedule[1:]:\n    if item['action'] == 'wait':\n        formatted_schedule.append({\n            'action': 'wait',\n            'location': current_location,\n            'time': item['time']\n        })\n    elif item['action'] == 'travel':\n        formatted_schedule.append({\n            'action': 'travel',\n            'location': current_location,\n            'to': item['to'],\n            'duration': item['duration'],\n            'time': item['time']\n        })\n        current_location = item['to']\n    elif item['action'] == 'meet':\n        formatted_schedule.append({\n            'action': 'meet',\n            'location': current_location,\n            'duration': item['duration'],\n            'time': item['time']\n        })\n\nprint(json.dumps({'schedule': formatted_schedule}, indent=2))\n```",
      "count": "meeting_planning_example_763"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "9:29AM",
            "end_time": "11:14AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Anthony",
            "start_time": "1:15PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Rebecca",
            "start_time": "7:30PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "9:29AM",
            "end_time": "11:14AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Anthony",
            "start_time": "1:15PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Rebecca",
            "start_time": "7:30PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    travel_times = {\n        ('Sunset District', 'Chinatown'): 30,\n        ('Sunset District', 'Russian Hill'): 24,\n        ('Sunset District', 'North Beach'): 29,\n        ('Chinatown', 'Sunset District'): 29,\n        ('Chinatown', 'Russian Hill'): 7,\n        ('Chinatown', 'North Beach'): 3,\n        ('Russian Hill', 'Sunset District'): 23,\n        ('Russian Hill', 'Chinatown'): 9,\n        ('Russian Hill', 'North Beach'): 5,\n        ('North Beach', 'Sunset District'): 27,\n        ('North Beach', 'Chinatown'): 6,\n        ('North Beach', 'Russian Hill'): 4,\n    }\n\n    # Constraints\n    start_time = str_to_time(\"9:00AM\")\n    anthony_available_start = str_to_time(\"1:15PM\")\n    anthony_available_end = str_to_time(\"2:30PM\")\n    anthony_min_duration = 60\n    rebecca_available_start = str_to_time(\"7:30PM\")\n    rebecca_available_end = str_to_time(\"9:15PM\")\n    rebecca_min_duration = 105\n    melissa_available_start = str_to_time(\"8:15AM\")\n    melissa_available_end = str_to_time(\"1:30PM\")\n    melissa_min_duration = 105\n\n    current_time = start_time\n    current_location = \"Sunset District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": time_to_str(current_time)}]\n\n    # First, try to meet Melissa\n    if current_time < melissa_available_end:\n        travel_time = travel_times[(current_location, \"North Beach\")]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        if arrival_time < melissa_available_end:\n            meet_start = max(arrival_time, melissa_available_start)\n            meet_end = min(meet_start + timedelta(minutes=melissa_min_duration), melissa_available_end)\n            if meet_end - meet_start >= timedelta(minutes=melissa_min_duration):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_time,\n                    \"time\": time_to_str(current_time),\n                    \"to\": \"North Beach\"\n                })\n                current_time = arrival_time\n                current_location = \"North Beach\"\n                if current_time < meet_start:\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": current_location,\n                        \"time\": time_to_str(current_time)\n                    })\n                    current_time = meet_start\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": current_location,\n                    \"duration\": melissa_min_duration,\n                    \"time\": time_to_str(current_time)\n                })\n                current_time += timedelta(minutes=melissa_min_duration)\n\n    # Then try to meet Anthony\n    if current_time < anthony_available_end:\n        travel_time = travel_times[(current_location, \"Chinatown\")]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        if arrival_time < anthony_available_end:\n            meet_start = max(arrival_time, anthony_available_start)\n            meet_end = min(meet_start + timedelta(minutes=anthony_min_duration), anthony_available_end)\n            if meet_end - meet_start >= timedelta(minutes=anthony_min_duration):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_time,\n                    \"time\": time_to_str(current_time),\n                    \"to\": \"Chinatown\"\n                })\n                current_time = arrival_time\n                current_location = \"Chinatown\"\n                if current_time < meet_start:\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": current_location,\n                        \"time\": time_to_str(current_time)\n                    })\n                    current_time = meet_start\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": current_location,\n                    \"duration\": anthony_min_duration,\n                    \"time\": time_to_str(current_time)\n                })\n                current_time += timedelta(minutes=anthony_min_duration)\n\n    # Finally, try to meet Rebecca\n    if current_time < rebecca_available_end:\n        travel_time = travel_times[(current_location, \"Russian Hill\")]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        if arrival_time < rebecca_available_end:\n            meet_start = max(arrival_time, rebecca_available_start)\n            meet_end = min(meet_start + timedelta(minutes=rebecca_min_duration), rebecca_available_end)\n            if meet_end - meet_start >= timedelta(minutes=rebecca_min_duration):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": current_location,\n                    \"duration\": travel_time,\n                    \"time\": time_to_str(current_time),\n                    \"to\": \"Russian Hill\"\n                })\n                current_time = arrival_time\n                current_location = \"Russian Hill\"\n                if current_time < meet_start:\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": current_location,\n                        \"time\": time_to_str(current_time)\n                    })\n                    current_time = meet_start\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": current_location,\n                    \"duration\": rebecca_min_duration,\n                    \"time\": time_to_str(current_time)\n                })\n                current_time += timedelta(minutes=rebecca_min_duration)\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
      "count": "meeting_planning_example_209"
    }
  ]
}